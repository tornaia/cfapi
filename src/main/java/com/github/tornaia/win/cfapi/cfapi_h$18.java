// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$18 extends cfapi_h$17 {

    /* package-private */ cfapi_h$18() {}
    public static @C("BOOL") int SetThreadLocale (@C("LCID") int Locale) {
        try {
            return (int)cfapi_h$constants$39.SetThreadLocale$MH().invokeExact(Locale);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserDefaultUILanguage$MH() {
        return cfapi_h$constants$39.GetUserDefaultUILanguage$MH();
    }
    public static @C("LANGID") short GetUserDefaultUILanguage () {
        try {
            return (short)cfapi_h$constants$39.GetUserDefaultUILanguage$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserDefaultLangID$MH() {
        return cfapi_h$constants$39.GetUserDefaultLangID$MH();
    }
    public static @C("LANGID") short GetUserDefaultLangID () {
        try {
            return (short)cfapi_h$constants$39.GetUserDefaultLangID$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemDefaultLangID$MH() {
        return cfapi_h$constants$39.GetSystemDefaultLangID$MH();
    }
    public static @C("LANGID") short GetSystemDefaultLangID () {
        try {
            return (short)cfapi_h$constants$39.GetSystemDefaultLangID$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemDefaultLCID$MH() {
        return cfapi_h$constants$39.GetSystemDefaultLCID$MH();
    }
    public static @C("LCID") int GetSystemDefaultLCID () {
        try {
            return (int)cfapi_h$constants$39.GetSystemDefaultLCID$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserDefaultLCID$MH() {
        return cfapi_h$constants$39.GetUserDefaultLCID$MH();
    }
    public static @C("LCID") int GetUserDefaultLCID () {
        try {
            return (int)cfapi_h$constants$39.GetUserDefaultLCID$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadUILanguage$MH() {
        return cfapi_h$constants$39.SetThreadUILanguage$MH();
    }
    public static @C("LANGID") short SetThreadUILanguage (@C("LANGID") short LangId) {
        try {
            return (short)cfapi_h$constants$39.SetThreadUILanguage$MH().invokeExact(LangId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadUILanguage$MH() {
        return cfapi_h$constants$39.GetThreadUILanguage$MH();
    }
    public static @C("LANGID") short GetThreadUILanguage () {
        try {
            return (short)cfapi_h$constants$39.GetThreadUILanguage$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessPreferredUILanguages$MH() {
        return cfapi_h$constants$39.GetProcessPreferredUILanguages$MH();
    }
    public static @C("BOOL") int GetProcessPreferredUILanguages (@C("DWORD") int dwFlags, @C("PULONG") Addressable pulNumLanguages, @C("PZZWSTR") Addressable pwszLanguagesBuffer, @C("PULONG") Addressable pcchLanguagesBuffer) {
        try {
            return (int)cfapi_h$constants$39.GetProcessPreferredUILanguages$MH().invokeExact(dwFlags, pulNumLanguages.address(), pwszLanguagesBuffer.address(), pcchLanguagesBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessPreferredUILanguages$MH() {
        return cfapi_h$constants$39.SetProcessPreferredUILanguages$MH();
    }
    public static @C("BOOL") int SetProcessPreferredUILanguages (@C("DWORD") int dwFlags, @C("PCZZWSTR") Addressable pwszLanguagesBuffer, @C("PULONG") Addressable pulNumLanguages) {
        try {
            return (int)cfapi_h$constants$39.SetProcessPreferredUILanguages$MH().invokeExact(dwFlags, pwszLanguagesBuffer.address(), pulNumLanguages.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserPreferredUILanguages$MH() {
        return cfapi_h$constants$39.GetUserPreferredUILanguages$MH();
    }
    public static @C("BOOL") int GetUserPreferredUILanguages (@C("DWORD") int dwFlags, @C("PULONG") Addressable pulNumLanguages, @C("PZZWSTR") Addressable pwszLanguagesBuffer, @C("PULONG") Addressable pcchLanguagesBuffer) {
        try {
            return (int)cfapi_h$constants$39.GetUserPreferredUILanguages$MH().invokeExact(dwFlags, pulNumLanguages.address(), pwszLanguagesBuffer.address(), pcchLanguagesBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemPreferredUILanguages$MH() {
        return cfapi_h$constants$39.GetSystemPreferredUILanguages$MH();
    }
    public static @C("BOOL") int GetSystemPreferredUILanguages (@C("DWORD") int dwFlags, @C("PULONG") Addressable pulNumLanguages, @C("PZZWSTR") Addressable pwszLanguagesBuffer, @C("PULONG") Addressable pcchLanguagesBuffer) {
        try {
            return (int)cfapi_h$constants$39.GetSystemPreferredUILanguages$MH().invokeExact(dwFlags, pulNumLanguages.address(), pwszLanguagesBuffer.address(), pcchLanguagesBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadPreferredUILanguages$MH() {
        return cfapi_h$constants$39.GetThreadPreferredUILanguages$MH();
    }
    public static @C("BOOL") int GetThreadPreferredUILanguages (@C("DWORD") int dwFlags, @C("PULONG") Addressable pulNumLanguages, @C("PZZWSTR") Addressable pwszLanguagesBuffer, @C("PULONG") Addressable pcchLanguagesBuffer) {
        try {
            return (int)cfapi_h$constants$39.GetThreadPreferredUILanguages$MH().invokeExact(dwFlags, pulNumLanguages.address(), pwszLanguagesBuffer.address(), pcchLanguagesBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadPreferredUILanguages$MH() {
        return cfapi_h$constants$39.SetThreadPreferredUILanguages$MH();
    }
    public static @C("BOOL") int SetThreadPreferredUILanguages (@C("DWORD") int dwFlags, @C("PCZZWSTR") Addressable pwszLanguagesBuffer, @C("PULONG") Addressable pulNumLanguages) {
        try {
            return (int)cfapi_h$constants$39.SetThreadPreferredUILanguages$MH().invokeExact(dwFlags, pwszLanguagesBuffer.address(), pulNumLanguages.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileMUIInfo$MH() {
        return cfapi_h$constants$39.GetFileMUIInfo$MH();
    }
    public static @C("BOOL") int GetFileMUIInfo (@C("DWORD") int dwFlags, @C("PCWSTR") Addressable pcwszFilePath, @C("PFILEMUIINFO") Addressable pFileMUIInfo, @C("DWORD*") Addressable pcbFileMUIInfo) {
        try {
            return (int)cfapi_h$constants$39.GetFileMUIInfo$MH().invokeExact(dwFlags, pcwszFilePath.address(), pFileMUIInfo.address(), pcbFileMUIInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileMUIPath$MH() {
        return cfapi_h$constants$39.GetFileMUIPath$MH();
    }
    public static @C("BOOL") int GetFileMUIPath (@C("DWORD") int dwFlags, @C("PCWSTR") Addressable pcwszFilePath, @C("PWSTR") Addressable pwszLanguage, @C("PULONG") Addressable pcchLanguage, @C("PWSTR") Addressable pwszFileMUIPath, @C("PULONG") Addressable pcchFileMUIPath, @C("PULONGLONG") Addressable pululEnumerator) {
        try {
            return (int)cfapi_h$constants$39.GetFileMUIPath$MH().invokeExact(dwFlags, pcwszFilePath.address(), pwszLanguage.address(), pcchLanguage.address(), pwszFileMUIPath.address(), pcchFileMUIPath.address(), pululEnumerator.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUILanguageInfo$MH() {
        return cfapi_h$constants$39.GetUILanguageInfo$MH();
    }
    public static @C("BOOL") int GetUILanguageInfo (@C("DWORD") int dwFlags, @C("PCZZWSTR") Addressable pwmszLanguage, @C("PZZWSTR") Addressable pwszFallbackLanguages, @C("PDWORD") Addressable pcchFallbackLanguages, @C("PDWORD") Addressable pAttributes) {
        try {
            return (int)cfapi_h$constants$39.GetUILanguageInfo$MH().invokeExact(dwFlags, pwmszLanguage.address(), pwszFallbackLanguages.address(), pcchFallbackLanguages.address(), pAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadPreferredUILanguages2$MH() {
        return cfapi_h$constants$39.SetThreadPreferredUILanguages2$MH();
    }
    public static @C("BOOL") int SetThreadPreferredUILanguages2 (@C("ULONG") int flags, @C("PCZZWSTR") Addressable languages, @C("PULONG") Addressable numLanguagesSet, @C("HSAVEDUILANGUAGES*") Addressable snapshot) {
        try {
            return (int)cfapi_h$constants$39.SetThreadPreferredUILanguages2$MH().invokeExact(flags, languages.address(), numLanguagesSet.address(), snapshot.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RestoreThreadPreferredUILanguages$MH() {
        return cfapi_h$constants$39.RestoreThreadPreferredUILanguages$MH();
    }
    public static void RestoreThreadPreferredUILanguages (@C("const HSAVEDUILANGUAGES") Addressable snapshot) {
        try {
            cfapi_h$constants$39.RestoreThreadPreferredUILanguages$MH().invokeExact(snapshot.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NotifyUILanguageChange$MH() {
        return cfapi_h$constants$39.NotifyUILanguageChange$MH();
    }
    public static @C("BOOL") int NotifyUILanguageChange (@C("DWORD") int dwFlags, @C("PCWSTR") Addressable pcwstrNewLanguage, @C("PCWSTR") Addressable pcwstrPreviousLanguage, @C("DWORD") int dwReserved, @C("PDWORD") Addressable pdwStatusRtrn) {
        try {
            return (int)cfapi_h$constants$39.NotifyUILanguageChange$MH().invokeExact(dwFlags, pcwstrNewLanguage.address(), pcwstrPreviousLanguage.address(), dwReserved, pdwStatusRtrn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetStringTypeExA$MH() {
        return cfapi_h$constants$39.GetStringTypeExA$MH();
    }
    public static @C("BOOL") int GetStringTypeExA (@C("LCID") int Locale, @C("DWORD") int dwInfoType, @C("LPCSTR") Addressable lpSrcStr, @C("int") int cchSrc, @C("LPWORD") Addressable lpCharType) {
        try {
            return (int)cfapi_h$constants$39.GetStringTypeExA$MH().invokeExact(Locale, dwInfoType, lpSrcStr.address(), cchSrc, lpCharType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetStringTypeA$MH() {
        return cfapi_h$constants$39.GetStringTypeA$MH();
    }
    public static @C("BOOL") int GetStringTypeA (@C("LCID") int Locale, @C("DWORD") int dwInfoType, @C("LPCSTR") Addressable lpSrcStr, @C("int") int cchSrc, @C("LPWORD") Addressable lpCharType) {
        try {
            return (int)cfapi_h$constants$39.GetStringTypeA$MH().invokeExact(Locale, dwInfoType, lpSrcStr.address(), cchSrc, lpCharType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FoldStringA$MH() {
        return cfapi_h$constants$39.FoldStringA$MH();
    }
    public static @C("int") int FoldStringA (@C("DWORD") int dwMapFlags, @C("LPCSTR") Addressable lpSrcStr, @C("int") int cchSrc, @C("LPSTR") Addressable lpDestStr, @C("int") int cchDest) {
        try {
            return (int)cfapi_h$constants$39.FoldStringA$MH().invokeExact(dwMapFlags, lpSrcStr.address(), cchSrc, lpDestStr.address(), cchDest);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemLocalesA$MH() {
        return cfapi_h$constants$39.EnumSystemLocalesA$MH();
    }
    public static @C("BOOL") int EnumSystemLocalesA (@C("LOCALE_ENUMPROCA") Addressable lpLocaleEnumProc, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumSystemLocalesA$MH().invokeExact(lpLocaleEnumProc.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemLocalesW$MH() {
        return cfapi_h$constants$39.EnumSystemLocalesW$MH();
    }
    public static @C("BOOL") int EnumSystemLocalesW (@C("LOCALE_ENUMPROCW") Addressable lpLocaleEnumProc, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumSystemLocalesW$MH().invokeExact(lpLocaleEnumProc.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemLanguageGroupsA$MH() {
        return cfapi_h$constants$39.EnumSystemLanguageGroupsA$MH();
    }
    public static @C("BOOL") int EnumSystemLanguageGroupsA (@C("LANGUAGEGROUP_ENUMPROCA") Addressable lpLanguageGroupEnumProc, @C("DWORD") int dwFlags, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$39.EnumSystemLanguageGroupsA$MH().invokeExact(lpLanguageGroupEnumProc.address(), dwFlags, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemLanguageGroupsW$MH() {
        return cfapi_h$constants$39.EnumSystemLanguageGroupsW$MH();
    }
    public static @C("BOOL") int EnumSystemLanguageGroupsW (@C("LANGUAGEGROUP_ENUMPROCW") Addressable lpLanguageGroupEnumProc, @C("DWORD") int dwFlags, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$39.EnumSystemLanguageGroupsW$MH().invokeExact(lpLanguageGroupEnumProc.address(), dwFlags, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumLanguageGroupLocalesA$MH() {
        return cfapi_h$constants$39.EnumLanguageGroupLocalesA$MH();
    }
    public static @C("BOOL") int EnumLanguageGroupLocalesA (@C("LANGGROUPLOCALE_ENUMPROCA") Addressable lpLangGroupLocaleEnumProc, @C("LGRPID") int LanguageGroup, @C("DWORD") int dwFlags, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$39.EnumLanguageGroupLocalesA$MH().invokeExact(lpLangGroupLocaleEnumProc.address(), LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumLanguageGroupLocalesW$MH() {
        return cfapi_h$constants$39.EnumLanguageGroupLocalesW$MH();
    }
    public static @C("BOOL") int EnumLanguageGroupLocalesW (@C("LANGGROUPLOCALE_ENUMPROCW") Addressable lpLangGroupLocaleEnumProc, @C("LGRPID") int LanguageGroup, @C("DWORD") int dwFlags, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$39.EnumLanguageGroupLocalesW$MH().invokeExact(lpLangGroupLocaleEnumProc.address(), LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumUILanguagesA$MH() {
        return cfapi_h$constants$39.EnumUILanguagesA$MH();
    }
    public static @C("BOOL") int EnumUILanguagesA (@C("UILANGUAGE_ENUMPROCA") Addressable lpUILanguageEnumProc, @C("DWORD") int dwFlags, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$39.EnumUILanguagesA$MH().invokeExact(lpUILanguageEnumProc.address(), dwFlags, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumUILanguagesW$MH() {
        return cfapi_h$constants$39.EnumUILanguagesW$MH();
    }
    public static @C("BOOL") int EnumUILanguagesW (@C("UILANGUAGE_ENUMPROCW") Addressable lpUILanguageEnumProc, @C("DWORD") int dwFlags, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$39.EnumUILanguagesW$MH().invokeExact(lpUILanguageEnumProc.address(), dwFlags, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemCodePagesA$MH() {
        return cfapi_h$constants$39.EnumSystemCodePagesA$MH();
    }
    public static @C("BOOL") int EnumSystemCodePagesA (@C("CODEPAGE_ENUMPROCA") Addressable lpCodePageEnumProc, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumSystemCodePagesA$MH().invokeExact(lpCodePageEnumProc.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemCodePagesW$MH() {
        return cfapi_h$constants$39.EnumSystemCodePagesW$MH();
    }
    public static @C("BOOL") int EnumSystemCodePagesW (@C("CODEPAGE_ENUMPROCW") Addressable lpCodePageEnumProc, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumSystemCodePagesW$MH().invokeExact(lpCodePageEnumProc.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IdnToAscii$MH() {
        return cfapi_h$constants$39.IdnToAscii$MH();
    }
    public static @C("int") int IdnToAscii (@C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpUnicodeCharStr, @C("int") int cchUnicodeChar, @C("LPWSTR") Addressable lpASCIICharStr, @C("int") int cchASCIIChar) {
        try {
            return (int)cfapi_h$constants$39.IdnToAscii$MH().invokeExact(dwFlags, lpUnicodeCharStr.address(), cchUnicodeChar, lpASCIICharStr.address(), cchASCIIChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IdnToUnicode$MH() {
        return cfapi_h$constants$39.IdnToUnicode$MH();
    }
    public static @C("int") int IdnToUnicode (@C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpASCIICharStr, @C("int") int cchASCIIChar, @C("LPWSTR") Addressable lpUnicodeCharStr, @C("int") int cchUnicodeChar) {
        try {
            return (int)cfapi_h$constants$39.IdnToUnicode$MH().invokeExact(dwFlags, lpASCIICharStr.address(), cchASCIIChar, lpUnicodeCharStr.address(), cchUnicodeChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IdnToNameprepUnicode$MH() {
        return cfapi_h$constants$39.IdnToNameprepUnicode$MH();
    }
    public static @C("int") int IdnToNameprepUnicode (@C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpUnicodeCharStr, @C("int") int cchUnicodeChar, @C("LPWSTR") Addressable lpNameprepCharStr, @C("int") int cchNameprepChar) {
        try {
            return (int)cfapi_h$constants$39.IdnToNameprepUnicode$MH().invokeExact(dwFlags, lpUnicodeCharStr.address(), cchUnicodeChar, lpNameprepCharStr.address(), cchNameprepChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NormalizeString$MH() {
        return cfapi_h$constants$39.NormalizeString$MH();
    }
    public static @C("int") int NormalizeString (@C("NORM_FORM") int NormForm, @C("LPCWSTR") Addressable lpSrcString, @C("int") int cwSrcLength, @C("LPWSTR") Addressable lpDstString, @C("int") int cwDstLength) {
        try {
            return (int)cfapi_h$constants$39.NormalizeString$MH().invokeExact(NormForm, lpSrcString.address(), cwSrcLength, lpDstString.address(), cwDstLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsNormalizedString$MH() {
        return cfapi_h$constants$39.IsNormalizedString$MH();
    }
    public static @C("BOOL") int IsNormalizedString (@C("NORM_FORM") int NormForm, @C("LPCWSTR") Addressable lpString, @C("int") int cwLength) {
        try {
            return (int)cfapi_h$constants$39.IsNormalizedString$MH().invokeExact(NormForm, lpString.address(), cwLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerifyScripts$MH() {
        return cfapi_h$constants$39.VerifyScripts$MH();
    }
    public static @C("BOOL") int VerifyScripts (@C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpLocaleScripts, @C("int") int cchLocaleScripts, @C("LPCWSTR") Addressable lpTestScripts, @C("int") int cchTestScripts) {
        try {
            return (int)cfapi_h$constants$39.VerifyScripts$MH().invokeExact(dwFlags, lpLocaleScripts.address(), cchLocaleScripts, lpTestScripts.address(), cchTestScripts);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetStringScripts$MH() {
        return cfapi_h$constants$39.GetStringScripts$MH();
    }
    public static @C("int") int GetStringScripts (@C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpString, @C("int") int cchString, @C("LPWSTR") Addressable lpScripts, @C("int") int cchScripts) {
        try {
            return (int)cfapi_h$constants$39.GetStringScripts$MH().invokeExact(dwFlags, lpString.address(), cchString, lpScripts.address(), cchScripts);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLocaleInfoEx$MH() {
        return cfapi_h$constants$39.GetLocaleInfoEx$MH();
    }
    public static @C("int") int GetLocaleInfoEx (@C("LPCWSTR") Addressable lpLocaleName, @C("LCTYPE") int LCType, @C("LPWSTR") Addressable lpLCData, @C("int") int cchData) {
        try {
            return (int)cfapi_h$constants$39.GetLocaleInfoEx$MH().invokeExact(lpLocaleName.address(), LCType, lpLCData.address(), cchData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCalendarInfoEx$MH() {
        return cfapi_h$constants$39.GetCalendarInfoEx$MH();
    }
    public static @C("int") int GetCalendarInfoEx (@C("LPCWSTR") Addressable lpLocaleName, @C("CALID") int Calendar, @C("LPCWSTR") Addressable lpReserved, @C("CALTYPE") int CalType, @C("LPWSTR") Addressable lpCalData, @C("int") int cchData, @C("LPDWORD") Addressable lpValue) {
        try {
            return (int)cfapi_h$constants$39.GetCalendarInfoEx$MH().invokeExact(lpLocaleName.address(), Calendar, lpReserved.address(), CalType, lpCalData.address(), cchData, lpValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumberFormatEx$MH() {
        return cfapi_h$constants$39.GetNumberFormatEx$MH();
    }
    public static @C("int") int GetNumberFormatEx (@C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpValue, @C("const NUMBERFMTW*") Addressable lpFormat, @C("LPWSTR") Addressable lpNumberStr, @C("int") int cchNumber) {
        try {
            return (int)cfapi_h$constants$39.GetNumberFormatEx$MH().invokeExact(lpLocaleName.address(), dwFlags, lpValue.address(), lpFormat.address(), lpNumberStr.address(), cchNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrencyFormatEx$MH() {
        return cfapi_h$constants$39.GetCurrencyFormatEx$MH();
    }
    public static @C("int") int GetCurrencyFormatEx (@C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpValue, @C("const CURRENCYFMTW*") Addressable lpFormat, @C("LPWSTR") Addressable lpCurrencyStr, @C("int") int cchCurrency) {
        try {
            return (int)cfapi_h$constants$39.GetCurrencyFormatEx$MH().invokeExact(lpLocaleName.address(), dwFlags, lpValue.address(), lpFormat.address(), lpCurrencyStr.address(), cchCurrency);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserDefaultLocaleName$MH() {
        return cfapi_h$constants$39.GetUserDefaultLocaleName$MH();
    }
    public static @C("int") int GetUserDefaultLocaleName (@C("LPWSTR") Addressable lpLocaleName, @C("int") int cchLocaleName) {
        try {
            return (int)cfapi_h$constants$39.GetUserDefaultLocaleName$MH().invokeExact(lpLocaleName.address(), cchLocaleName);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemDefaultLocaleName$MH() {
        return cfapi_h$constants$39.GetSystemDefaultLocaleName$MH();
    }
    public static @C("int") int GetSystemDefaultLocaleName (@C("LPWSTR") Addressable lpLocaleName, @C("int") int cchLocaleName) {
        try {
            return (int)cfapi_h$constants$39.GetSystemDefaultLocaleName$MH().invokeExact(lpLocaleName.address(), cchLocaleName);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsNLSDefinedString$MH() {
        return cfapi_h$constants$39.IsNLSDefinedString$MH();
    }
    public static @C("BOOL") int IsNLSDefinedString (@C("NLS_FUNCTION") int Function, @C("DWORD") int dwFlags, @C("LPNLSVERSIONINFO") Addressable lpVersionInformation, @C("LPCWSTR") Addressable lpString, @C("INT") int cchStr) {
        try {
            return (int)cfapi_h$constants$39.IsNLSDefinedString$MH().invokeExact(Function, dwFlags, lpVersionInformation.address(), lpString.address(), cchStr);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNLSVersionEx$MH() {
        return cfapi_h$constants$39.GetNLSVersionEx$MH();
    }
    public static @C("BOOL") int GetNLSVersionEx (@C("NLS_FUNCTION") int function, @C("LPCWSTR") Addressable lpLocaleName, @C("LPNLSVERSIONINFOEX") Addressable lpVersionInformation) {
        try {
            return (int)cfapi_h$constants$39.GetNLSVersionEx$MH().invokeExact(function, lpLocaleName.address(), lpVersionInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsValidNLSVersion$MH() {
        return cfapi_h$constants$39.IsValidNLSVersion$MH();
    }
    public static @C("DWORD") int IsValidNLSVersion (@C("NLS_FUNCTION") int function, @C("LPCWSTR") Addressable lpLocaleName, @C("LPNLSVERSIONINFOEX") Addressable lpVersionInformation) {
        try {
            return (int)cfapi_h$constants$39.IsValidNLSVersion$MH().invokeExact(function, lpLocaleName.address(), lpVersionInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNLSStringEx$MH() {
        return cfapi_h$constants$39.FindNLSStringEx$MH();
    }
    public static @C("int") int FindNLSStringEx (@C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwFindNLSStringFlags, @C("LPCWSTR") Addressable lpStringSource, @C("int") int cchSource, @C("LPCWSTR") Addressable lpStringValue, @C("int") int cchValue, @C("LPINT") Addressable pcchFound, @C("LPNLSVERSIONINFO") Addressable lpVersionInformation, @C("LPVOID") Addressable lpReserved, @C("LPARAM") long sortHandle) {
        try {
            return (int)cfapi_h$constants$39.FindNLSStringEx$MH().invokeExact(lpLocaleName.address(), dwFindNLSStringFlags, lpStringSource.address(), cchSource, lpStringValue.address(), cchValue, pcchFound.address(), lpVersionInformation.address(), lpReserved.address(), sortHandle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LCMapStringEx$MH() {
        return cfapi_h$constants$39.LCMapStringEx$MH();
    }
    public static @C("int") int LCMapStringEx (@C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwMapFlags, @C("LPCWSTR") Addressable lpSrcStr, @C("int") int cchSrc, @C("LPWSTR") Addressable lpDestStr, @C("int") int cchDest, @C("LPNLSVERSIONINFO") Addressable lpVersionInformation, @C("LPVOID") Addressable lpReserved, @C("LPARAM") long sortHandle) {
        try {
            return (int)cfapi_h$constants$39.LCMapStringEx$MH().invokeExact(lpLocaleName.address(), dwMapFlags, lpSrcStr.address(), cchSrc, lpDestStr.address(), cchDest, lpVersionInformation.address(), lpReserved.address(), sortHandle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsValidLocaleName$MH() {
        return cfapi_h$constants$39.IsValidLocaleName$MH();
    }
    public static @C("BOOL") int IsValidLocaleName (@C("LPCWSTR") Addressable lpLocaleName) {
        try {
            return (int)cfapi_h$constants$39.IsValidLocaleName$MH().invokeExact(lpLocaleName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumCalendarInfoExEx$MH() {
        return cfapi_h$constants$39.EnumCalendarInfoExEx$MH();
    }
    public static @C("BOOL") int EnumCalendarInfoExEx (@C("CALINFO_ENUMPROCEXEX") Addressable pCalInfoEnumProcExEx, @C("LPCWSTR") Addressable lpLocaleName, @C("CALID") int Calendar, @C("LPCWSTR") Addressable lpReserved, @C("CALTYPE") int CalType, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$39.EnumCalendarInfoExEx$MH().invokeExact(pCalInfoEnumProcExEx.address(), lpLocaleName.address(), Calendar, lpReserved.address(), CalType, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDateFormatsExEx$MH() {
        return cfapi_h$constants$39.EnumDateFormatsExEx$MH();
    }
    public static @C("BOOL") int EnumDateFormatsExEx (@C("DATEFMT_ENUMPROCEXEX") Addressable lpDateFmtEnumProcExEx, @C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwFlags, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$39.EnumDateFormatsExEx$MH().invokeExact(lpDateFmtEnumProcExEx.address(), lpLocaleName.address(), dwFlags, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumTimeFormatsEx$MH() {
        return cfapi_h$constants$40.EnumTimeFormatsEx$MH();
    }
    public static @C("BOOL") int EnumTimeFormatsEx (@C("TIMEFMT_ENUMPROCEX") Addressable lpTimeFmtEnumProcEx, @C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwFlags, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$40.EnumTimeFormatsEx$MH().invokeExact(lpTimeFmtEnumProcEx.address(), lpLocaleName.address(), dwFlags, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemLocalesEx$MH() {
        return cfapi_h$constants$40.EnumSystemLocalesEx$MH();
    }
    public static @C("BOOL") int EnumSystemLocalesEx (@C("LOCALE_ENUMPROCEX") Addressable lpLocaleEnumProcEx, @C("DWORD") int dwFlags, @C("LPARAM") long lParam, @C("LPVOID") Addressable lpReserved) {
        try {
            return (int)cfapi_h$constants$40.EnumSystemLocalesEx$MH().invokeExact(lpLocaleEnumProcEx.address(), dwFlags, lParam, lpReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ResolveLocaleName$MH() {
        return cfapi_h$constants$40.ResolveLocaleName$MH();
    }
    public static @C("int") int ResolveLocaleName (@C("LPCWSTR") Addressable lpNameToResolve, @C("LPWSTR") Addressable lpLocaleName, @C("int") int cchLocaleName) {
        try {
            return (int)cfapi_h$constants$40.ResolveLocaleName$MH().invokeExact(lpNameToResolve.address(), lpLocaleName.address(), cchLocaleName);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AllocConsole$MH() {
        return cfapi_h$constants$40.AllocConsole$MH();
    }
    public static @C("BOOL") int AllocConsole () {
        try {
            return (int)cfapi_h$constants$40.AllocConsole$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeConsole$MH() {
        return cfapi_h$constants$40.FreeConsole$MH();
    }
    public static @C("BOOL") int FreeConsole () {
        try {
            return (int)cfapi_h$constants$40.FreeConsole$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AttachConsole$MH() {
        return cfapi_h$constants$40.AttachConsole$MH();
    }
    public static @C("BOOL") int AttachConsole (@C("DWORD") int dwProcessId) {
        try {
            return (int)cfapi_h$constants$40.AttachConsole$MH().invokeExact(dwProcessId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleCP$MH() {
        return cfapi_h$constants$40.GetConsoleCP$MH();
    }
    public static @C("UINT") int GetConsoleCP () {
        try {
            return (int)cfapi_h$constants$40.GetConsoleCP$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleOutputCP$MH() {
        return cfapi_h$constants$40.GetConsoleOutputCP$MH();
    }
    public static @C("UINT") int GetConsoleOutputCP () {
        try {
            return (int)cfapi_h$constants$40.GetConsoleOutputCP$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleMode$MH() {
        return cfapi_h$constants$40.GetConsoleMode$MH();
    }
    public static @C("BOOL") int GetConsoleMode (@C("HANDLE") Addressable hConsoleHandle, @C("LPDWORD") Addressable lpMode) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleMode$MH().invokeExact(hConsoleHandle.address(), lpMode.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleMode$MH() {
        return cfapi_h$constants$40.SetConsoleMode$MH();
    }
    public static @C("BOOL") int SetConsoleMode (@C("HANDLE") Addressable hConsoleHandle, @C("DWORD") int dwMode) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleMode$MH().invokeExact(hConsoleHandle.address(), dwMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumberOfConsoleInputEvents$MH() {
        return cfapi_h$constants$40.GetNumberOfConsoleInputEvents$MH();
    }
    public static @C("BOOL") int GetNumberOfConsoleInputEvents (@C("HANDLE") Addressable hConsoleInput, @C("LPDWORD") Addressable lpNumberOfEvents) {
        try {
            return (int)cfapi_h$constants$40.GetNumberOfConsoleInputEvents$MH().invokeExact(hConsoleInput.address(), lpNumberOfEvents.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadConsoleInputA$MH() {
        return cfapi_h$constants$40.ReadConsoleInputA$MH();
    }
    public static @C("BOOL") int ReadConsoleInputA (@C("HANDLE") Addressable hConsoleInput, @C("PINPUT_RECORD") Addressable lpBuffer, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpNumberOfEventsRead) {
        try {
            return (int)cfapi_h$constants$40.ReadConsoleInputA$MH().invokeExact(hConsoleInput.address(), lpBuffer.address(), nLength, lpNumberOfEventsRead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadConsoleInputW$MH() {
        return cfapi_h$constants$40.ReadConsoleInputW$MH();
    }
    public static @C("BOOL") int ReadConsoleInputW (@C("HANDLE") Addressable hConsoleInput, @C("PINPUT_RECORD") Addressable lpBuffer, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpNumberOfEventsRead) {
        try {
            return (int)cfapi_h$constants$40.ReadConsoleInputW$MH().invokeExact(hConsoleInput.address(), lpBuffer.address(), nLength, lpNumberOfEventsRead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PeekConsoleInputA$MH() {
        return cfapi_h$constants$40.PeekConsoleInputA$MH();
    }
    public static @C("BOOL") int PeekConsoleInputA (@C("HANDLE") Addressable hConsoleInput, @C("PINPUT_RECORD") Addressable lpBuffer, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpNumberOfEventsRead) {
        try {
            return (int)cfapi_h$constants$40.PeekConsoleInputA$MH().invokeExact(hConsoleInput.address(), lpBuffer.address(), nLength, lpNumberOfEventsRead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PeekConsoleInputW$MH() {
        return cfapi_h$constants$40.PeekConsoleInputW$MH();
    }
    public static @C("BOOL") int PeekConsoleInputW (@C("HANDLE") Addressable hConsoleInput, @C("PINPUT_RECORD") Addressable lpBuffer, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpNumberOfEventsRead) {
        try {
            return (int)cfapi_h$constants$40.PeekConsoleInputW$MH().invokeExact(hConsoleInput.address(), lpBuffer.address(), nLength, lpNumberOfEventsRead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadConsoleA$MH() {
        return cfapi_h$constants$40.ReadConsoleA$MH();
    }
    public static @C("BOOL") int ReadConsoleA (@C("HANDLE") Addressable hConsoleInput, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfCharsToRead, @C("LPDWORD") Addressable lpNumberOfCharsRead, @C("PCONSOLE_READCONSOLE_CONTROL") Addressable pInputControl) {
        try {
            return (int)cfapi_h$constants$40.ReadConsoleA$MH().invokeExact(hConsoleInput.address(), lpBuffer.address(), nNumberOfCharsToRead, lpNumberOfCharsRead.address(), pInputControl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadConsoleW$MH() {
        return cfapi_h$constants$40.ReadConsoleW$MH();
    }
    public static @C("BOOL") int ReadConsoleW (@C("HANDLE") Addressable hConsoleInput, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfCharsToRead, @C("LPDWORD") Addressable lpNumberOfCharsRead, @C("PCONSOLE_READCONSOLE_CONTROL") Addressable pInputControl) {
        try {
            return (int)cfapi_h$constants$40.ReadConsoleW$MH().invokeExact(hConsoleInput.address(), lpBuffer.address(), nNumberOfCharsToRead, lpNumberOfCharsRead.address(), pInputControl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteConsoleA$MH() {
        return cfapi_h$constants$40.WriteConsoleA$MH();
    }
    public static @C("BOOL") int WriteConsoleA (@C("HANDLE") Addressable hConsoleOutput, @C("void*") Addressable lpBuffer, @C("DWORD") int nNumberOfCharsToWrite, @C("LPDWORD") Addressable lpNumberOfCharsWritten, @C("LPVOID") Addressable lpReserved) {
        try {
            return (int)cfapi_h$constants$40.WriteConsoleA$MH().invokeExact(hConsoleOutput.address(), lpBuffer.address(), nNumberOfCharsToWrite, lpNumberOfCharsWritten.address(), lpReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteConsoleW$MH() {
        return cfapi_h$constants$40.WriteConsoleW$MH();
    }
    public static @C("BOOL") int WriteConsoleW (@C("HANDLE") Addressable hConsoleOutput, @C("void*") Addressable lpBuffer, @C("DWORD") int nNumberOfCharsToWrite, @C("LPDWORD") Addressable lpNumberOfCharsWritten, @C("LPVOID") Addressable lpReserved) {
        try {
            return (int)cfapi_h$constants$40.WriteConsoleW$MH().invokeExact(hConsoleOutput.address(), lpBuffer.address(), nNumberOfCharsToWrite, lpNumberOfCharsWritten.address(), lpReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleCtrlHandler$MH() {
        return cfapi_h$constants$40.SetConsoleCtrlHandler$MH();
    }
    public static @C("BOOL") int SetConsoleCtrlHandler (@C("PHANDLER_ROUTINE") Addressable HandlerRoutine, @C("BOOL") int Add) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleCtrlHandler$MH().invokeExact(HandlerRoutine.address(), Add);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePseudoConsole$MH() {
        return cfapi_h$constants$40.CreatePseudoConsole$MH();
    }
    public static @C("HRESULT") int CreatePseudoConsole (@C("COORD") MemorySegment size, @C("HANDLE") Addressable hInput, @C("HANDLE") Addressable hOutput, @C("DWORD") int dwFlags, @C("HPCON*") Addressable phPC) {
        try {
            return (int)cfapi_h$constants$40.CreatePseudoConsole$MH().invokeExact(size, hInput.address(), hOutput.address(), dwFlags, phPC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ResizePseudoConsole$MH() {
        return cfapi_h$constants$40.ResizePseudoConsole$MH();
    }
    public static @C("HRESULT") int ResizePseudoConsole (@C("HPCON") Addressable hPC, @C("COORD") MemorySegment size) {
        try {
            return (int)cfapi_h$constants$40.ResizePseudoConsole$MH().invokeExact(hPC.address(), size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClosePseudoConsole$MH() {
        return cfapi_h$constants$40.ClosePseudoConsole$MH();
    }
    public static void ClosePseudoConsole (@C("HPCON") Addressable hPC) {
        try {
            cfapi_h$constants$40.ClosePseudoConsole$MH().invokeExact(hPC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FillConsoleOutputCharacterA$MH() {
        return cfapi_h$constants$40.FillConsoleOutputCharacterA$MH();
    }
    public static @C("BOOL") int FillConsoleOutputCharacterA (@C("HANDLE") Addressable hConsoleOutput, @C("CHAR") byte cCharacter, @C("DWORD") int nLength, @C("COORD") MemorySegment dwWriteCoord, @C("LPDWORD") Addressable lpNumberOfCharsWritten) {
        try {
            return (int)cfapi_h$constants$40.FillConsoleOutputCharacterA$MH().invokeExact(hConsoleOutput.address(), cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FillConsoleOutputCharacterW$MH() {
        return cfapi_h$constants$40.FillConsoleOutputCharacterW$MH();
    }
    public static @C("BOOL") int FillConsoleOutputCharacterW (@C("HANDLE") Addressable hConsoleOutput, @C("WCHAR") short cCharacter, @C("DWORD") int nLength, @C("COORD") MemorySegment dwWriteCoord, @C("LPDWORD") Addressable lpNumberOfCharsWritten) {
        try {
            return (int)cfapi_h$constants$40.FillConsoleOutputCharacterW$MH().invokeExact(hConsoleOutput.address(), cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FillConsoleOutputAttribute$MH() {
        return cfapi_h$constants$40.FillConsoleOutputAttribute$MH();
    }
    public static @C("BOOL") int FillConsoleOutputAttribute (@C("HANDLE") Addressable hConsoleOutput, @C("WORD") short wAttribute, @C("DWORD") int nLength, @C("COORD") MemorySegment dwWriteCoord, @C("LPDWORD") Addressable lpNumberOfAttrsWritten) {
        try {
            return (int)cfapi_h$constants$40.FillConsoleOutputAttribute$MH().invokeExact(hConsoleOutput.address(), wAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GenerateConsoleCtrlEvent$MH() {
        return cfapi_h$constants$40.GenerateConsoleCtrlEvent$MH();
    }
    public static @C("BOOL") int GenerateConsoleCtrlEvent (@C("DWORD") int dwCtrlEvent, @C("DWORD") int dwProcessGroupId) {
        try {
            return (int)cfapi_h$constants$40.GenerateConsoleCtrlEvent$MH().invokeExact(dwCtrlEvent, dwProcessGroupId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateConsoleScreenBuffer$MH() {
        return cfapi_h$constants$40.CreateConsoleScreenBuffer$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateConsoleScreenBuffer (@C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("const SECURITY_ATTRIBUTES*") Addressable lpSecurityAttributes, @C("DWORD") int dwFlags, @C("LPVOID") Addressable lpScreenBufferData) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$40.CreateConsoleScreenBuffer$MH().invokeExact(dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwFlags, lpScreenBufferData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleActiveScreenBuffer$MH() {
        return cfapi_h$constants$40.SetConsoleActiveScreenBuffer$MH();
    }
    public static @C("BOOL") int SetConsoleActiveScreenBuffer (@C("HANDLE") Addressable hConsoleOutput) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleActiveScreenBuffer$MH().invokeExact(hConsoleOutput.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlushConsoleInputBuffer$MH() {
        return cfapi_h$constants$40.FlushConsoleInputBuffer$MH();
    }
    public static @C("BOOL") int FlushConsoleInputBuffer (@C("HANDLE") Addressable hConsoleInput) {
        try {
            return (int)cfapi_h$constants$40.FlushConsoleInputBuffer$MH().invokeExact(hConsoleInput.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleCP$MH() {
        return cfapi_h$constants$40.SetConsoleCP$MH();
    }
    public static @C("BOOL") int SetConsoleCP (@C("UINT") int wCodePageID) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleCP$MH().invokeExact(wCodePageID);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleOutputCP$MH() {
        return cfapi_h$constants$40.SetConsoleOutputCP$MH();
    }
    public static @C("BOOL") int SetConsoleOutputCP (@C("UINT") int wCodePageID) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleOutputCP$MH().invokeExact(wCodePageID);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleCursorInfo$MH() {
        return cfapi_h$constants$40.GetConsoleCursorInfo$MH();
    }
    public static @C("BOOL") int GetConsoleCursorInfo (@C("HANDLE") Addressable hConsoleOutput, @C("PCONSOLE_CURSOR_INFO") Addressable lpConsoleCursorInfo) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleCursorInfo$MH().invokeExact(hConsoleOutput.address(), lpConsoleCursorInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleCursorInfo$MH() {
        return cfapi_h$constants$40.SetConsoleCursorInfo$MH();
    }
    public static @C("BOOL") int SetConsoleCursorInfo (@C("HANDLE") Addressable hConsoleOutput, @C("const CONSOLE_CURSOR_INFO*") Addressable lpConsoleCursorInfo) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleCursorInfo$MH().invokeExact(hConsoleOutput.address(), lpConsoleCursorInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleScreenBufferInfo$MH() {
        return cfapi_h$constants$40.GetConsoleScreenBufferInfo$MH();
    }
    public static @C("BOOL") int GetConsoleScreenBufferInfo (@C("HANDLE") Addressable hConsoleOutput, @C("PCONSOLE_SCREEN_BUFFER_INFO") Addressable lpConsoleScreenBufferInfo) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleScreenBufferInfo$MH().invokeExact(hConsoleOutput.address(), lpConsoleScreenBufferInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleScreenBufferInfoEx$MH() {
        return cfapi_h$constants$40.GetConsoleScreenBufferInfoEx$MH();
    }
    public static @C("BOOL") int GetConsoleScreenBufferInfoEx (@C("HANDLE") Addressable hConsoleOutput, @C("PCONSOLE_SCREEN_BUFFER_INFOEX") Addressable lpConsoleScreenBufferInfoEx) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleScreenBufferInfoEx$MH().invokeExact(hConsoleOutput.address(), lpConsoleScreenBufferInfoEx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleScreenBufferInfoEx$MH() {
        return cfapi_h$constants$40.SetConsoleScreenBufferInfoEx$MH();
    }
    public static @C("BOOL") int SetConsoleScreenBufferInfoEx (@C("HANDLE") Addressable hConsoleOutput, @C("PCONSOLE_SCREEN_BUFFER_INFOEX") Addressable lpConsoleScreenBufferInfoEx) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleScreenBufferInfoEx$MH().invokeExact(hConsoleOutput.address(), lpConsoleScreenBufferInfoEx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleScreenBufferSize$MH() {
        return cfapi_h$constants$40.SetConsoleScreenBufferSize$MH();
    }
    public static @C("BOOL") int SetConsoleScreenBufferSize (@C("HANDLE") Addressable hConsoleOutput, @C("COORD") MemorySegment dwSize) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleScreenBufferSize$MH().invokeExact(hConsoleOutput.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleCursorPosition$MH() {
        return cfapi_h$constants$40.SetConsoleCursorPosition$MH();
    }
    public static @C("BOOL") int SetConsoleCursorPosition (@C("HANDLE") Addressable hConsoleOutput, @C("COORD") MemorySegment dwCursorPosition) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleCursorPosition$MH().invokeExact(hConsoleOutput.address(), dwCursorPosition);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLargestConsoleWindowSize$MH() {
        return cfapi_h$constants$40.GetLargestConsoleWindowSize$MH();
    }
    public static @C("COORD") MemorySegment GetLargestConsoleWindowSize (@C("HANDLE") Addressable hConsoleOutput) {
        try {
            return (jdk.incubator.foreign.MemorySegment)cfapi_h$constants$40.GetLargestConsoleWindowSize$MH().invokeExact(hConsoleOutput.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleTextAttribute$MH() {
        return cfapi_h$constants$40.SetConsoleTextAttribute$MH();
    }
    public static @C("BOOL") int SetConsoleTextAttribute (@C("HANDLE") Addressable hConsoleOutput, @C("WORD") short wAttributes) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleTextAttribute$MH().invokeExact(hConsoleOutput.address(), wAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleWindowInfo$MH() {
        return cfapi_h$constants$40.SetConsoleWindowInfo$MH();
    }
    public static @C("BOOL") int SetConsoleWindowInfo (@C("HANDLE") Addressable hConsoleOutput, @C("BOOL") int bAbsolute, @C("const SMALL_RECT*") Addressable lpConsoleWindow) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleWindowInfo$MH().invokeExact(hConsoleOutput.address(), bAbsolute, lpConsoleWindow.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteConsoleOutputCharacterA$MH() {
        return cfapi_h$constants$40.WriteConsoleOutputCharacterA$MH();
    }
    public static @C("BOOL") int WriteConsoleOutputCharacterA (@C("HANDLE") Addressable hConsoleOutput, @C("LPCSTR") Addressable lpCharacter, @C("DWORD") int nLength, @C("COORD") MemorySegment dwWriteCoord, @C("LPDWORD") Addressable lpNumberOfCharsWritten) {
        try {
            return (int)cfapi_h$constants$40.WriteConsoleOutputCharacterA$MH().invokeExact(hConsoleOutput.address(), lpCharacter.address(), nLength, dwWriteCoord, lpNumberOfCharsWritten.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteConsoleOutputCharacterW$MH() {
        return cfapi_h$constants$40.WriteConsoleOutputCharacterW$MH();
    }
    public static @C("BOOL") int WriteConsoleOutputCharacterW (@C("HANDLE") Addressable hConsoleOutput, @C("LPCWSTR") Addressable lpCharacter, @C("DWORD") int nLength, @C("COORD") MemorySegment dwWriteCoord, @C("LPDWORD") Addressable lpNumberOfCharsWritten) {
        try {
            return (int)cfapi_h$constants$40.WriteConsoleOutputCharacterW$MH().invokeExact(hConsoleOutput.address(), lpCharacter.address(), nLength, dwWriteCoord, lpNumberOfCharsWritten.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteConsoleOutputAttribute$MH() {
        return cfapi_h$constants$40.WriteConsoleOutputAttribute$MH();
    }
    public static @C("BOOL") int WriteConsoleOutputAttribute (@C("HANDLE") Addressable hConsoleOutput, @C("const WORD*") Addressable lpAttribute, @C("DWORD") int nLength, @C("COORD") MemorySegment dwWriteCoord, @C("LPDWORD") Addressable lpNumberOfAttrsWritten) {
        try {
            return (int)cfapi_h$constants$40.WriteConsoleOutputAttribute$MH().invokeExact(hConsoleOutput.address(), lpAttribute.address(), nLength, dwWriteCoord, lpNumberOfAttrsWritten.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadConsoleOutputCharacterA$MH() {
        return cfapi_h$constants$40.ReadConsoleOutputCharacterA$MH();
    }
    public static @C("BOOL") int ReadConsoleOutputCharacterA (@C("HANDLE") Addressable hConsoleOutput, @C("LPSTR") Addressable lpCharacter, @C("DWORD") int nLength, @C("COORD") MemorySegment dwReadCoord, @C("LPDWORD") Addressable lpNumberOfCharsRead) {
        try {
            return (int)cfapi_h$constants$40.ReadConsoleOutputCharacterA$MH().invokeExact(hConsoleOutput.address(), lpCharacter.address(), nLength, dwReadCoord, lpNumberOfCharsRead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadConsoleOutputCharacterW$MH() {
        return cfapi_h$constants$40.ReadConsoleOutputCharacterW$MH();
    }
    public static @C("BOOL") int ReadConsoleOutputCharacterW (@C("HANDLE") Addressable hConsoleOutput, @C("LPWSTR") Addressable lpCharacter, @C("DWORD") int nLength, @C("COORD") MemorySegment dwReadCoord, @C("LPDWORD") Addressable lpNumberOfCharsRead) {
        try {
            return (int)cfapi_h$constants$40.ReadConsoleOutputCharacterW$MH().invokeExact(hConsoleOutput.address(), lpCharacter.address(), nLength, dwReadCoord, lpNumberOfCharsRead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadConsoleOutputAttribute$MH() {
        return cfapi_h$constants$40.ReadConsoleOutputAttribute$MH();
    }
    public static @C("BOOL") int ReadConsoleOutputAttribute (@C("HANDLE") Addressable hConsoleOutput, @C("LPWORD") Addressable lpAttribute, @C("DWORD") int nLength, @C("COORD") MemorySegment dwReadCoord, @C("LPDWORD") Addressable lpNumberOfAttrsRead) {
        try {
            return (int)cfapi_h$constants$40.ReadConsoleOutputAttribute$MH().invokeExact(hConsoleOutput.address(), lpAttribute.address(), nLength, dwReadCoord, lpNumberOfAttrsRead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteConsoleInputA$MH() {
        return cfapi_h$constants$40.WriteConsoleInputA$MH();
    }
    public static @C("BOOL") int WriteConsoleInputA (@C("HANDLE") Addressable hConsoleInput, @C("const INPUT_RECORD*") Addressable lpBuffer, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpNumberOfEventsWritten) {
        try {
            return (int)cfapi_h$constants$40.WriteConsoleInputA$MH().invokeExact(hConsoleInput.address(), lpBuffer.address(), nLength, lpNumberOfEventsWritten.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteConsoleInputW$MH() {
        return cfapi_h$constants$40.WriteConsoleInputW$MH();
    }
    public static @C("BOOL") int WriteConsoleInputW (@C("HANDLE") Addressable hConsoleInput, @C("const INPUT_RECORD*") Addressable lpBuffer, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpNumberOfEventsWritten) {
        try {
            return (int)cfapi_h$constants$40.WriteConsoleInputW$MH().invokeExact(hConsoleInput.address(), lpBuffer.address(), nLength, lpNumberOfEventsWritten.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ScrollConsoleScreenBufferA$MH() {
        return cfapi_h$constants$40.ScrollConsoleScreenBufferA$MH();
    }
    public static @C("BOOL") int ScrollConsoleScreenBufferA (@C("HANDLE") Addressable hConsoleOutput, @C("const SMALL_RECT*") Addressable lpScrollRectangle, @C("const SMALL_RECT*") Addressable lpClipRectangle, @C("COORD") MemorySegment dwDestinationOrigin, @C("const CHAR_INFO*") Addressable lpFill) {
        try {
            return (int)cfapi_h$constants$40.ScrollConsoleScreenBufferA$MH().invokeExact(hConsoleOutput.address(), lpScrollRectangle.address(), lpClipRectangle.address(), dwDestinationOrigin, lpFill.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ScrollConsoleScreenBufferW$MH() {
        return cfapi_h$constants$40.ScrollConsoleScreenBufferW$MH();
    }
    public static @C("BOOL") int ScrollConsoleScreenBufferW (@C("HANDLE") Addressable hConsoleOutput, @C("const SMALL_RECT*") Addressable lpScrollRectangle, @C("const SMALL_RECT*") Addressable lpClipRectangle, @C("COORD") MemorySegment dwDestinationOrigin, @C("const CHAR_INFO*") Addressable lpFill) {
        try {
            return (int)cfapi_h$constants$40.ScrollConsoleScreenBufferW$MH().invokeExact(hConsoleOutput.address(), lpScrollRectangle.address(), lpClipRectangle.address(), dwDestinationOrigin, lpFill.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteConsoleOutputA$MH() {
        return cfapi_h$constants$40.WriteConsoleOutputA$MH();
    }
    public static @C("BOOL") int WriteConsoleOutputA (@C("HANDLE") Addressable hConsoleOutput, @C("const CHAR_INFO*") Addressable lpBuffer, @C("COORD") MemorySegment dwBufferSize, @C("COORD") MemorySegment dwBufferCoord, @C("PSMALL_RECT") Addressable lpWriteRegion) {
        try {
            return (int)cfapi_h$constants$40.WriteConsoleOutputA$MH().invokeExact(hConsoleOutput.address(), lpBuffer.address(), dwBufferSize, dwBufferCoord, lpWriteRegion.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteConsoleOutputW$MH() {
        return cfapi_h$constants$40.WriteConsoleOutputW$MH();
    }
    public static @C("BOOL") int WriteConsoleOutputW (@C("HANDLE") Addressable hConsoleOutput, @C("const CHAR_INFO*") Addressable lpBuffer, @C("COORD") MemorySegment dwBufferSize, @C("COORD") MemorySegment dwBufferCoord, @C("PSMALL_RECT") Addressable lpWriteRegion) {
        try {
            return (int)cfapi_h$constants$40.WriteConsoleOutputW$MH().invokeExact(hConsoleOutput.address(), lpBuffer.address(), dwBufferSize, dwBufferCoord, lpWriteRegion.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadConsoleOutputA$MH() {
        return cfapi_h$constants$40.ReadConsoleOutputA$MH();
    }
    public static @C("BOOL") int ReadConsoleOutputA (@C("HANDLE") Addressable hConsoleOutput, @C("PCHAR_INFO") Addressable lpBuffer, @C("COORD") MemorySegment dwBufferSize, @C("COORD") MemorySegment dwBufferCoord, @C("PSMALL_RECT") Addressable lpReadRegion) {
        try {
            return (int)cfapi_h$constants$40.ReadConsoleOutputA$MH().invokeExact(hConsoleOutput.address(), lpBuffer.address(), dwBufferSize, dwBufferCoord, lpReadRegion.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadConsoleOutputW$MH() {
        return cfapi_h$constants$40.ReadConsoleOutputW$MH();
    }
    public static @C("BOOL") int ReadConsoleOutputW (@C("HANDLE") Addressable hConsoleOutput, @C("PCHAR_INFO") Addressable lpBuffer, @C("COORD") MemorySegment dwBufferSize, @C("COORD") MemorySegment dwBufferCoord, @C("PSMALL_RECT") Addressable lpReadRegion) {
        try {
            return (int)cfapi_h$constants$40.ReadConsoleOutputW$MH().invokeExact(hConsoleOutput.address(), lpBuffer.address(), dwBufferSize, dwBufferCoord, lpReadRegion.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleTitleA$MH() {
        return cfapi_h$constants$40.GetConsoleTitleA$MH();
    }
    public static @C("DWORD") int GetConsoleTitleA (@C("LPSTR") Addressable lpConsoleTitle, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleTitleA$MH().invokeExact(lpConsoleTitle.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleTitleW$MH() {
        return cfapi_h$constants$40.GetConsoleTitleW$MH();
    }
    public static @C("DWORD") int GetConsoleTitleW (@C("LPWSTR") Addressable lpConsoleTitle, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleTitleW$MH().invokeExact(lpConsoleTitle.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleOriginalTitleA$MH() {
        return cfapi_h$constants$40.GetConsoleOriginalTitleA$MH();
    }
    public static @C("DWORD") int GetConsoleOriginalTitleA (@C("LPSTR") Addressable lpConsoleTitle, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleOriginalTitleA$MH().invokeExact(lpConsoleTitle.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleOriginalTitleW$MH() {
        return cfapi_h$constants$40.GetConsoleOriginalTitleW$MH();
    }
    public static @C("DWORD") int GetConsoleOriginalTitleW (@C("LPWSTR") Addressable lpConsoleTitle, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleOriginalTitleW$MH().invokeExact(lpConsoleTitle.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleTitleA$MH() {
        return cfapi_h$constants$40.SetConsoleTitleA$MH();
    }
    public static @C("BOOL") int SetConsoleTitleA (@C("LPCSTR") Addressable lpConsoleTitle) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleTitleA$MH().invokeExact(lpConsoleTitle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleTitleW$MH() {
        return cfapi_h$constants$40.SetConsoleTitleW$MH();
    }
    public static @C("BOOL") int SetConsoleTitleW (@C("LPCWSTR") Addressable lpConsoleTitle) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleTitleW$MH().invokeExact(lpConsoleTitle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumberOfConsoleMouseButtons$MH() {
        return cfapi_h$constants$40.GetNumberOfConsoleMouseButtons$MH();
    }
    public static @C("BOOL") int GetNumberOfConsoleMouseButtons (@C("LPDWORD") Addressable lpNumberOfMouseButtons) {
        try {
            return (int)cfapi_h$constants$40.GetNumberOfConsoleMouseButtons$MH().invokeExact(lpNumberOfMouseButtons.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleFontSize$MH() {
        return cfapi_h$constants$40.GetConsoleFontSize$MH();
    }
    public static @C("COORD") MemorySegment GetConsoleFontSize (@C("HANDLE") Addressable hConsoleOutput, @C("DWORD") int nFont) {
        try {
            return (jdk.incubator.foreign.MemorySegment)cfapi_h$constants$40.GetConsoleFontSize$MH().invokeExact(hConsoleOutput.address(), nFont);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentConsoleFont$MH() {
        return cfapi_h$constants$40.GetCurrentConsoleFont$MH();
    }
    public static @C("BOOL") int GetCurrentConsoleFont (@C("HANDLE") Addressable hConsoleOutput, @C("BOOL") int bMaximumWindow, @C("PCONSOLE_FONT_INFO") Addressable lpConsoleCurrentFont) {
        try {
            return (int)cfapi_h$constants$40.GetCurrentConsoleFont$MH().invokeExact(hConsoleOutput.address(), bMaximumWindow, lpConsoleCurrentFont.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentConsoleFontEx$MH() {
        return cfapi_h$constants$40.GetCurrentConsoleFontEx$MH();
    }
    public static @C("BOOL") int GetCurrentConsoleFontEx (@C("HANDLE") Addressable hConsoleOutput, @C("BOOL") int bMaximumWindow, @C("PCONSOLE_FONT_INFOEX") Addressable lpConsoleCurrentFontEx) {
        try {
            return (int)cfapi_h$constants$40.GetCurrentConsoleFontEx$MH().invokeExact(hConsoleOutput.address(), bMaximumWindow, lpConsoleCurrentFontEx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCurrentConsoleFontEx$MH() {
        return cfapi_h$constants$40.SetCurrentConsoleFontEx$MH();
    }
    public static @C("BOOL") int SetCurrentConsoleFontEx (@C("HANDLE") Addressable hConsoleOutput, @C("BOOL") int bMaximumWindow, @C("PCONSOLE_FONT_INFOEX") Addressable lpConsoleCurrentFontEx) {
        try {
            return (int)cfapi_h$constants$40.SetCurrentConsoleFontEx$MH().invokeExact(hConsoleOutput.address(), bMaximumWindow, lpConsoleCurrentFontEx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleSelectionInfo$MH() {
        return cfapi_h$constants$40.GetConsoleSelectionInfo$MH();
    }
    public static @C("BOOL") int GetConsoleSelectionInfo (@C("PCONSOLE_SELECTION_INFO") Addressable lpConsoleSelectionInfo) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleSelectionInfo$MH().invokeExact(lpConsoleSelectionInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleHistoryInfo$MH() {
        return cfapi_h$constants$40.GetConsoleHistoryInfo$MH();
    }
    public static @C("BOOL") int GetConsoleHistoryInfo (@C("PCONSOLE_HISTORY_INFO") Addressable lpConsoleHistoryInfo) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleHistoryInfo$MH().invokeExact(lpConsoleHistoryInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleHistoryInfo$MH() {
        return cfapi_h$constants$40.SetConsoleHistoryInfo$MH();
    }
    public static @C("BOOL") int SetConsoleHistoryInfo (@C("PCONSOLE_HISTORY_INFO") Addressable lpConsoleHistoryInfo) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleHistoryInfo$MH().invokeExact(lpConsoleHistoryInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleDisplayMode$MH() {
        return cfapi_h$constants$40.GetConsoleDisplayMode$MH();
    }
    public static @C("BOOL") int GetConsoleDisplayMode (@C("LPDWORD") Addressable lpModeFlags) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleDisplayMode$MH().invokeExact(lpModeFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleDisplayMode$MH() {
        return cfapi_h$constants$40.SetConsoleDisplayMode$MH();
    }
    public static @C("BOOL") int SetConsoleDisplayMode (@C("HANDLE") Addressable hConsoleOutput, @C("DWORD") int dwFlags, @C("PCOORD") Addressable lpNewScreenBufferDimensions) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleDisplayMode$MH().invokeExact(hConsoleOutput.address(), dwFlags, lpNewScreenBufferDimensions.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleWindow$MH() {
        return cfapi_h$constants$40.GetConsoleWindow$MH();
    }
    public static @C("HWND") MemoryAddress GetConsoleWindow () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$40.GetConsoleWindow$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddConsoleAliasA$MH() {
        return cfapi_h$constants$40.AddConsoleAliasA$MH();
    }
    public static @C("BOOL") int AddConsoleAliasA (@C("LPSTR") Addressable Source, @C("LPSTR") Addressable Target, @C("LPSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.AddConsoleAliasA$MH().invokeExact(Source.address(), Target.address(), ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddConsoleAliasW$MH() {
        return cfapi_h$constants$40.AddConsoleAliasW$MH();
    }
    public static @C("BOOL") int AddConsoleAliasW (@C("LPWSTR") Addressable Source, @C("LPWSTR") Addressable Target, @C("LPWSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.AddConsoleAliasW$MH().invokeExact(Source.address(), Target.address(), ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasA$MH() {
        return cfapi_h$constants$40.GetConsoleAliasA$MH();
    }
    public static @C("DWORD") int GetConsoleAliasA (@C("LPSTR") Addressable Source, @C("LPSTR") Addressable TargetBuffer, @C("DWORD") int TargetBufferLength, @C("LPSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasA$MH().invokeExact(Source.address(), TargetBuffer.address(), TargetBufferLength, ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasW$MH() {
        return cfapi_h$constants$40.GetConsoleAliasW$MH();
    }
    public static @C("DWORD") int GetConsoleAliasW (@C("LPWSTR") Addressable Source, @C("LPWSTR") Addressable TargetBuffer, @C("DWORD") int TargetBufferLength, @C("LPWSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasW$MH().invokeExact(Source.address(), TargetBuffer.address(), TargetBufferLength, ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasesLengthA$MH() {
        return cfapi_h$constants$40.GetConsoleAliasesLengthA$MH();
    }
    public static @C("DWORD") int GetConsoleAliasesLengthA (@C("LPSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasesLengthA$MH().invokeExact(ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasesLengthW$MH() {
        return cfapi_h$constants$40.GetConsoleAliasesLengthW$MH();
    }
    public static @C("DWORD") int GetConsoleAliasesLengthW (@C("LPWSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasesLengthW$MH().invokeExact(ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasExesLengthA$MH() {
        return cfapi_h$constants$40.GetConsoleAliasExesLengthA$MH();
    }
    public static @C("DWORD") int GetConsoleAliasExesLengthA () {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasExesLengthA$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasExesLengthW$MH() {
        return cfapi_h$constants$40.GetConsoleAliasExesLengthW$MH();
    }
    public static @C("DWORD") int GetConsoleAliasExesLengthW () {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasExesLengthW$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasesA$MH() {
        return cfapi_h$constants$40.GetConsoleAliasesA$MH();
    }
    public static @C("DWORD") int GetConsoleAliasesA (@C("LPSTR") Addressable AliasBuffer, @C("DWORD") int AliasBufferLength, @C("LPSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasesA$MH().invokeExact(AliasBuffer.address(), AliasBufferLength, ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasesW$MH() {
        return cfapi_h$constants$40.GetConsoleAliasesW$MH();
    }
    public static @C("DWORD") int GetConsoleAliasesW (@C("LPWSTR") Addressable AliasBuffer, @C("DWORD") int AliasBufferLength, @C("LPWSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasesW$MH().invokeExact(AliasBuffer.address(), AliasBufferLength, ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasExesA$MH() {
        return cfapi_h$constants$40.GetConsoleAliasExesA$MH();
    }
    public static @C("DWORD") int GetConsoleAliasExesA (@C("LPSTR") Addressable ExeNameBuffer, @C("DWORD") int ExeNameBufferLength) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasExesA$MH().invokeExact(ExeNameBuffer.address(), ExeNameBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleAliasExesW$MH() {
        return cfapi_h$constants$40.GetConsoleAliasExesW$MH();
    }
    public static @C("DWORD") int GetConsoleAliasExesW (@C("LPWSTR") Addressable ExeNameBuffer, @C("DWORD") int ExeNameBufferLength) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleAliasExesW$MH().invokeExact(ExeNameBuffer.address(), ExeNameBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExpungeConsoleCommandHistoryA$MH() {
        return cfapi_h$constants$40.ExpungeConsoleCommandHistoryA$MH();
    }
    public static void ExpungeConsoleCommandHistoryA (@C("LPSTR") Addressable ExeName) {
        try {
            cfapi_h$constants$40.ExpungeConsoleCommandHistoryA$MH().invokeExact(ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExpungeConsoleCommandHistoryW$MH() {
        return cfapi_h$constants$40.ExpungeConsoleCommandHistoryW$MH();
    }
    public static void ExpungeConsoleCommandHistoryW (@C("LPWSTR") Addressable ExeName) {
        try {
            cfapi_h$constants$40.ExpungeConsoleCommandHistoryW$MH().invokeExact(ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleNumberOfCommandsA$MH() {
        return cfapi_h$constants$40.SetConsoleNumberOfCommandsA$MH();
    }
    public static @C("BOOL") int SetConsoleNumberOfCommandsA (@C("DWORD") int Number, @C("LPSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleNumberOfCommandsA$MH().invokeExact(Number, ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetConsoleNumberOfCommandsW$MH() {
        return cfapi_h$constants$40.SetConsoleNumberOfCommandsW$MH();
    }
    public static @C("BOOL") int SetConsoleNumberOfCommandsW (@C("DWORD") int Number, @C("LPWSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.SetConsoleNumberOfCommandsW$MH().invokeExact(Number, ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleCommandHistoryLengthA$MH() {
        return cfapi_h$constants$40.GetConsoleCommandHistoryLengthA$MH();
    }
    public static @C("DWORD") int GetConsoleCommandHistoryLengthA (@C("LPSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleCommandHistoryLengthA$MH().invokeExact(ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleCommandHistoryLengthW$MH() {
        return cfapi_h$constants$40.GetConsoleCommandHistoryLengthW$MH();
    }
    public static @C("DWORD") int GetConsoleCommandHistoryLengthW (@C("LPWSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleCommandHistoryLengthW$MH().invokeExact(ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleCommandHistoryA$MH() {
        return cfapi_h$constants$40.GetConsoleCommandHistoryA$MH();
    }
    public static @C("DWORD") int GetConsoleCommandHistoryA (@C("LPSTR") Addressable Commands, @C("DWORD") int CommandBufferLength, @C("LPSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleCommandHistoryA$MH().invokeExact(Commands.address(), CommandBufferLength, ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleCommandHistoryW$MH() {
        return cfapi_h$constants$40.GetConsoleCommandHistoryW$MH();
    }
    public static @C("DWORD") int GetConsoleCommandHistoryW (@C("LPWSTR") Addressable Commands, @C("DWORD") int CommandBufferLength, @C("LPWSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleCommandHistoryW$MH().invokeExact(Commands.address(), CommandBufferLength, ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetConsoleProcessList$MH() {
        return cfapi_h$constants$40.GetConsoleProcessList$MH();
    }
    public static @C("DWORD") int GetConsoleProcessList (@C("LPDWORD") Addressable lpdwProcessList, @C("DWORD") int dwProcessCount) {
        try {
            return (int)cfapi_h$constants$40.GetConsoleProcessList$MH().invokeExact(lpdwProcessList.address(), dwProcessCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerFindFileA$MH() {
        return cfapi_h$constants$40.VerFindFileA$MH();
    }
    public static @C("DWORD") int VerFindFileA (@C("DWORD") int uFlags, @C("LPCSTR") Addressable szFileName, @C("LPCSTR") Addressable szWinDir, @C("LPCSTR") Addressable szAppDir, @C("LPSTR") Addressable szCurDir, @C("PUINT") Addressable puCurDirLen, @C("LPSTR") Addressable szDestDir, @C("PUINT") Addressable puDestDirLen) {
        try {
            return (int)cfapi_h$constants$40.VerFindFileA$MH().invokeExact(uFlags, szFileName.address(), szWinDir.address(), szAppDir.address(), szCurDir.address(), puCurDirLen.address(), szDestDir.address(), puDestDirLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerFindFileW$MH() {
        return cfapi_h$constants$40.VerFindFileW$MH();
    }
    public static @C("DWORD") int VerFindFileW (@C("DWORD") int uFlags, @C("LPCWSTR") Addressable szFileName, @C("LPCWSTR") Addressable szWinDir, @C("LPCWSTR") Addressable szAppDir, @C("LPWSTR") Addressable szCurDir, @C("PUINT") Addressable puCurDirLen, @C("LPWSTR") Addressable szDestDir, @C("PUINT") Addressable puDestDirLen) {
        try {
            return (int)cfapi_h$constants$40.VerFindFileW$MH().invokeExact(uFlags, szFileName.address(), szWinDir.address(), szAppDir.address(), szCurDir.address(), puCurDirLen.address(), szDestDir.address(), puDestDirLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerInstallFileA$MH() {
        return cfapi_h$constants$40.VerInstallFileA$MH();
    }
    public static @C("DWORD") int VerInstallFileA (@C("DWORD") int uFlags, @C("LPCSTR") Addressable szSrcFileName, @C("LPCSTR") Addressable szDestFileName, @C("LPCSTR") Addressable szSrcDir, @C("LPCSTR") Addressable szDestDir, @C("LPCSTR") Addressable szCurDir, @C("LPSTR") Addressable szTmpFile, @C("PUINT") Addressable puTmpFileLen) {
        try {
            return (int)cfapi_h$constants$40.VerInstallFileA$MH().invokeExact(uFlags, szSrcFileName.address(), szDestFileName.address(), szSrcDir.address(), szDestDir.address(), szCurDir.address(), szTmpFile.address(), puTmpFileLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerInstallFileW$MH() {
        return cfapi_h$constants$40.VerInstallFileW$MH();
    }
    public static @C("DWORD") int VerInstallFileW (@C("DWORD") int uFlags, @C("LPCWSTR") Addressable szSrcFileName, @C("LPCWSTR") Addressable szDestFileName, @C("LPCWSTR") Addressable szSrcDir, @C("LPCWSTR") Addressable szDestDir, @C("LPCWSTR") Addressable szCurDir, @C("LPWSTR") Addressable szTmpFile, @C("PUINT") Addressable puTmpFileLen) {
        try {
            return (int)cfapi_h$constants$40.VerInstallFileW$MH().invokeExact(uFlags, szSrcFileName.address(), szDestFileName.address(), szSrcDir.address(), szDestDir.address(), szCurDir.address(), szTmpFile.address(), puTmpFileLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileVersionInfoSizeA$MH() {
        return cfapi_h$constants$40.GetFileVersionInfoSizeA$MH();
    }
    public static @C("DWORD") int GetFileVersionInfoSizeA (@C("LPCSTR") Addressable lptstrFilename, @C("LPDWORD") Addressable lpdwHandle) {
        try {
            return (int)cfapi_h$constants$40.GetFileVersionInfoSizeA$MH().invokeExact(lptstrFilename.address(), lpdwHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileVersionInfoSizeW$MH() {
        return cfapi_h$constants$40.GetFileVersionInfoSizeW$MH();
    }
    public static @C("DWORD") int GetFileVersionInfoSizeW (@C("LPCWSTR") Addressable lptstrFilename, @C("LPDWORD") Addressable lpdwHandle) {
        try {
            return (int)cfapi_h$constants$40.GetFileVersionInfoSizeW$MH().invokeExact(lptstrFilename.address(), lpdwHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileVersionInfoA$MH() {
        return cfapi_h$constants$40.GetFileVersionInfoA$MH();
    }
    public static @C("BOOL") int GetFileVersionInfoA (@C("LPCSTR") Addressable lptstrFilename, @C("DWORD") int dwHandle, @C("DWORD") int dwLen, @C("LPVOID") Addressable lpData) {
        try {
            return (int)cfapi_h$constants$40.GetFileVersionInfoA$MH().invokeExact(lptstrFilename.address(), dwHandle, dwLen, lpData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileVersionInfoW$MH() {
        return cfapi_h$constants$40.GetFileVersionInfoW$MH();
    }
    public static @C("BOOL") int GetFileVersionInfoW (@C("LPCWSTR") Addressable lptstrFilename, @C("DWORD") int dwHandle, @C("DWORD") int dwLen, @C("LPVOID") Addressable lpData) {
        try {
            return (int)cfapi_h$constants$40.GetFileVersionInfoW$MH().invokeExact(lptstrFilename.address(), dwHandle, dwLen, lpData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileVersionInfoSizeExA$MH() {
        return cfapi_h$constants$40.GetFileVersionInfoSizeExA$MH();
    }
    public static @C("DWORD") int GetFileVersionInfoSizeExA (@C("DWORD") int dwFlags, @C("LPCSTR") Addressable lpwstrFilename, @C("LPDWORD") Addressable lpdwHandle) {
        try {
            return (int)cfapi_h$constants$40.GetFileVersionInfoSizeExA$MH().invokeExact(dwFlags, lpwstrFilename.address(), lpdwHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileVersionInfoSizeExW$MH() {
        return cfapi_h$constants$40.GetFileVersionInfoSizeExW$MH();
    }
    public static @C("DWORD") int GetFileVersionInfoSizeExW (@C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpwstrFilename, @C("LPDWORD") Addressable lpdwHandle) {
        try {
            return (int)cfapi_h$constants$40.GetFileVersionInfoSizeExW$MH().invokeExact(dwFlags, lpwstrFilename.address(), lpdwHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileVersionInfoExA$MH() {
        return cfapi_h$constants$40.GetFileVersionInfoExA$MH();
    }
    public static @C("BOOL") int GetFileVersionInfoExA (@C("DWORD") int dwFlags, @C("LPCSTR") Addressable lpwstrFilename, @C("DWORD") int dwHandle, @C("DWORD") int dwLen, @C("LPVOID") Addressable lpData) {
        try {
            return (int)cfapi_h$constants$40.GetFileVersionInfoExA$MH().invokeExact(dwFlags, lpwstrFilename.address(), dwHandle, dwLen, lpData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileVersionInfoExW$MH() {
        return cfapi_h$constants$40.GetFileVersionInfoExW$MH();
    }
    public static @C("BOOL") int GetFileVersionInfoExW (@C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpwstrFilename, @C("DWORD") int dwHandle, @C("DWORD") int dwLen, @C("LPVOID") Addressable lpData) {
        try {
            return (int)cfapi_h$constants$40.GetFileVersionInfoExW$MH().invokeExact(dwFlags, lpwstrFilename.address(), dwHandle, dwLen, lpData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerLanguageNameA$MH() {
        return cfapi_h$constants$40.VerLanguageNameA$MH();
    }
    public static @C("DWORD") int VerLanguageNameA (@C("DWORD") int wLang, @C("LPSTR") Addressable szLang, @C("DWORD") int cchLang) {
        try {
            return (int)cfapi_h$constants$40.VerLanguageNameA$MH().invokeExact(wLang, szLang.address(), cchLang);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerLanguageNameW$MH() {
        return cfapi_h$constants$40.VerLanguageNameW$MH();
    }
    public static @C("DWORD") int VerLanguageNameW (@C("DWORD") int wLang, @C("LPWSTR") Addressable szLang, @C("DWORD") int cchLang) {
        try {
            return (int)cfapi_h$constants$40.VerLanguageNameW$MH().invokeExact(wLang, szLang.address(), cchLang);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerQueryValueA$MH() {
        return cfapi_h$constants$40.VerQueryValueA$MH();
    }
    public static @C("BOOL") int VerQueryValueA (@C("LPCVOID") Addressable pBlock, @C("LPCSTR") Addressable lpSubBlock, @C("LPVOID*") Addressable lplpBuffer, @C("PUINT") Addressable puLen) {
        try {
            return (int)cfapi_h$constants$40.VerQueryValueA$MH().invokeExact(pBlock.address(), lpSubBlock.address(), lplpBuffer.address(), puLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerQueryValueW$MH() {
        return cfapi_h$constants$40.VerQueryValueW$MH();
    }
    public static @C("BOOL") int VerQueryValueW (@C("LPCVOID") Addressable pBlock, @C("LPCWSTR") Addressable lpSubBlock, @C("LPVOID*") Addressable lplpBuffer, @C("PUINT") Addressable puLen) {
        try {
            return (int)cfapi_h$constants$40.VerQueryValueW$MH().invokeExact(pBlock.address(), lpSubBlock.address(), lplpBuffer.address(), puLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("long") ValueLayout LSTATUS = C_LONG;
    public static  MethodHandle RegCloseKey$MH() {
        return cfapi_h$constants$40.RegCloseKey$MH();
    }
    public static @C("LSTATUS") int RegCloseKey (@C("HKEY") Addressable hKey) {
        try {
            return (int)cfapi_h$constants$40.RegCloseKey$MH().invokeExact(hKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegOverridePredefKey$MH() {
        return cfapi_h$constants$40.RegOverridePredefKey$MH();
    }
    public static @C("LSTATUS") int RegOverridePredefKey (@C("HKEY") Addressable hKey, @C("HKEY") Addressable hNewHKey) {
        try {
            return (int)cfapi_h$constants$40.RegOverridePredefKey$MH().invokeExact(hKey.address(), hNewHKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegOpenUserClassesRoot$MH() {
        return cfapi_h$constants$40.RegOpenUserClassesRoot$MH();
    }
    public static @C("LSTATUS") int RegOpenUserClassesRoot (@C("HANDLE") Addressable hToken, @C("DWORD") int dwOptions, @C("REGSAM") int samDesired, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegOpenUserClassesRoot$MH().invokeExact(hToken.address(), dwOptions, samDesired, phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegOpenCurrentUser$MH() {
        return cfapi_h$constants$40.RegOpenCurrentUser$MH();
    }
    public static @C("LSTATUS") int RegOpenCurrentUser (@C("REGSAM") int samDesired, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegOpenCurrentUser$MH().invokeExact(samDesired, phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDisablePredefinedCache$MH() {
        return cfapi_h$constants$40.RegDisablePredefinedCache$MH();
    }
    public static @C("LSTATUS") int RegDisablePredefinedCache () {
        try {
            return (int)cfapi_h$constants$40.RegDisablePredefinedCache$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDisablePredefinedCacheEx$MH() {
        return cfapi_h$constants$40.RegDisablePredefinedCacheEx$MH();
    }
    public static @C("LSTATUS") int RegDisablePredefinedCacheEx () {
        try {
            return (int)cfapi_h$constants$40.RegDisablePredefinedCacheEx$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegConnectRegistryA$MH() {
        return cfapi_h$constants$40.RegConnectRegistryA$MH();
    }
    public static @C("LSTATUS") int RegConnectRegistryA (@C("LPCSTR") Addressable lpMachineName, @C("HKEY") Addressable hKey, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegConnectRegistryA$MH().invokeExact(lpMachineName.address(), hKey.address(), phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegConnectRegistryW$MH() {
        return cfapi_h$constants$40.RegConnectRegistryW$MH();
    }
    public static @C("LSTATUS") int RegConnectRegistryW (@C("LPCWSTR") Addressable lpMachineName, @C("HKEY") Addressable hKey, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegConnectRegistryW$MH().invokeExact(lpMachineName.address(), hKey.address(), phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegConnectRegistryExA$MH() {
        return cfapi_h$constants$40.RegConnectRegistryExA$MH();
    }
    public static @C("LSTATUS") int RegConnectRegistryExA (@C("LPCSTR") Addressable lpMachineName, @C("HKEY") Addressable hKey, @C("ULONG") int Flags, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegConnectRegistryExA$MH().invokeExact(lpMachineName.address(), hKey.address(), Flags, phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegConnectRegistryExW$MH() {
        return cfapi_h$constants$40.RegConnectRegistryExW$MH();
    }
    public static @C("LSTATUS") int RegConnectRegistryExW (@C("LPCWSTR") Addressable lpMachineName, @C("HKEY") Addressable hKey, @C("ULONG") int Flags, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegConnectRegistryExW$MH().invokeExact(lpMachineName.address(), hKey.address(), Flags, phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegCreateKeyA$MH() {
        return cfapi_h$constants$40.RegCreateKeyA$MH();
    }
    public static @C("LSTATUS") int RegCreateKeyA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegCreateKeyA$MH().invokeExact(hKey.address(), lpSubKey.address(), phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegCreateKeyW$MH() {
        return cfapi_h$constants$40.RegCreateKeyW$MH();
    }
    public static @C("LSTATUS") int RegCreateKeyW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegCreateKeyW$MH().invokeExact(hKey.address(), lpSubKey.address(), phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegCreateKeyExA$MH() {
        return cfapi_h$constants$40.RegCreateKeyExA$MH();
    }
    public static @C("LSTATUS") int RegCreateKeyExA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("DWORD") int Reserved, @C("LPSTR") Addressable lpClass, @C("DWORD") int dwOptions, @C("REGSAM") int samDesired, @C("const LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("PHKEY") Addressable phkResult, @C("LPDWORD") Addressable lpdwDisposition) {
        try {
            return (int)cfapi_h$constants$40.RegCreateKeyExA$MH().invokeExact(hKey.address(), lpSubKey.address(), Reserved, lpClass.address(), dwOptions, samDesired, lpSecurityAttributes.address(), phkResult.address(), lpdwDisposition.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegCreateKeyExW$MH() {
        return cfapi_h$constants$40.RegCreateKeyExW$MH();
    }
    public static @C("LSTATUS") int RegCreateKeyExW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("DWORD") int Reserved, @C("LPWSTR") Addressable lpClass, @C("DWORD") int dwOptions, @C("REGSAM") int samDesired, @C("const LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("PHKEY") Addressable phkResult, @C("LPDWORD") Addressable lpdwDisposition) {
        try {
            return (int)cfapi_h$constants$40.RegCreateKeyExW$MH().invokeExact(hKey.address(), lpSubKey.address(), Reserved, lpClass.address(), dwOptions, samDesired, lpSecurityAttributes.address(), phkResult.address(), lpdwDisposition.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegCreateKeyTransactedA$MH() {
        return cfapi_h$constants$40.RegCreateKeyTransactedA$MH();
    }
    public static @C("LSTATUS") int RegCreateKeyTransactedA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("DWORD") int Reserved, @C("LPSTR") Addressable lpClass, @C("DWORD") int dwOptions, @C("REGSAM") int samDesired, @C("const LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("PHKEY") Addressable phkResult, @C("LPDWORD") Addressable lpdwDisposition, @C("HANDLE") Addressable hTransaction, @C("PVOID") Addressable pExtendedParemeter) {
        try {
            return (int)cfapi_h$constants$40.RegCreateKeyTransactedA$MH().invokeExact(hKey.address(), lpSubKey.address(), Reserved, lpClass.address(), dwOptions, samDesired, lpSecurityAttributes.address(), phkResult.address(), lpdwDisposition.address(), hTransaction.address(), pExtendedParemeter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegCreateKeyTransactedW$MH() {
        return cfapi_h$constants$40.RegCreateKeyTransactedW$MH();
    }
    public static @C("LSTATUS") int RegCreateKeyTransactedW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("DWORD") int Reserved, @C("LPWSTR") Addressable lpClass, @C("DWORD") int dwOptions, @C("REGSAM") int samDesired, @C("const LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("PHKEY") Addressable phkResult, @C("LPDWORD") Addressable lpdwDisposition, @C("HANDLE") Addressable hTransaction, @C("PVOID") Addressable pExtendedParemeter) {
        try {
            return (int)cfapi_h$constants$40.RegCreateKeyTransactedW$MH().invokeExact(hKey.address(), lpSubKey.address(), Reserved, lpClass.address(), dwOptions, samDesired, lpSecurityAttributes.address(), phkResult.address(), lpdwDisposition.address(), hTransaction.address(), pExtendedParemeter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteKeyA$MH() {
        return cfapi_h$constants$40.RegDeleteKeyA$MH();
    }
    public static @C("LSTATUS") int RegDeleteKeyA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteKeyA$MH().invokeExact(hKey.address(), lpSubKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteKeyW$MH() {
        return cfapi_h$constants$40.RegDeleteKeyW$MH();
    }
    public static @C("LSTATUS") int RegDeleteKeyW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteKeyW$MH().invokeExact(hKey.address(), lpSubKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteKeyExA$MH() {
        return cfapi_h$constants$40.RegDeleteKeyExA$MH();
    }
    public static @C("LSTATUS") int RegDeleteKeyExA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("REGSAM") int samDesired, @C("DWORD") int Reserved) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteKeyExA$MH().invokeExact(hKey.address(), lpSubKey.address(), samDesired, Reserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteKeyExW$MH() {
        return cfapi_h$constants$40.RegDeleteKeyExW$MH();
    }
    public static @C("LSTATUS") int RegDeleteKeyExW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("REGSAM") int samDesired, @C("DWORD") int Reserved) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteKeyExW$MH().invokeExact(hKey.address(), lpSubKey.address(), samDesired, Reserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteKeyTransactedA$MH() {
        return cfapi_h$constants$40.RegDeleteKeyTransactedA$MH();
    }
    public static @C("LSTATUS") int RegDeleteKeyTransactedA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("REGSAM") int samDesired, @C("DWORD") int Reserved, @C("HANDLE") Addressable hTransaction, @C("PVOID") Addressable pExtendedParameter) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteKeyTransactedA$MH().invokeExact(hKey.address(), lpSubKey.address(), samDesired, Reserved, hTransaction.address(), pExtendedParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteKeyTransactedW$MH() {
        return cfapi_h$constants$40.RegDeleteKeyTransactedW$MH();
    }
    public static @C("LSTATUS") int RegDeleteKeyTransactedW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("REGSAM") int samDesired, @C("DWORD") int Reserved, @C("HANDLE") Addressable hTransaction, @C("PVOID") Addressable pExtendedParameter) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteKeyTransactedW$MH().invokeExact(hKey.address(), lpSubKey.address(), samDesired, Reserved, hTransaction.address(), pExtendedParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDisableReflectionKey$MH() {
        return cfapi_h$constants$40.RegDisableReflectionKey$MH();
    }
    public static @C("LONG") int RegDisableReflectionKey (@C("HKEY") Addressable hBase) {
        try {
            return (int)cfapi_h$constants$40.RegDisableReflectionKey$MH().invokeExact(hBase.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegEnableReflectionKey$MH() {
        return cfapi_h$constants$40.RegEnableReflectionKey$MH();
    }
    public static @C("LONG") int RegEnableReflectionKey (@C("HKEY") Addressable hBase) {
        try {
            return (int)cfapi_h$constants$40.RegEnableReflectionKey$MH().invokeExact(hBase.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegQueryReflectionKey$MH() {
        return cfapi_h$constants$40.RegQueryReflectionKey$MH();
    }
    public static @C("LONG") int RegQueryReflectionKey (@C("HKEY") Addressable hBase, @C("BOOL*") Addressable bIsReflectionDisabled) {
        try {
            return (int)cfapi_h$constants$40.RegQueryReflectionKey$MH().invokeExact(hBase.address(), bIsReflectionDisabled.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteValueA$MH() {
        return cfapi_h$constants$40.RegDeleteValueA$MH();
    }
    public static @C("LSTATUS") int RegDeleteValueA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpValueName) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteValueA$MH().invokeExact(hKey.address(), lpValueName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteValueW$MH() {
        return cfapi_h$constants$40.RegDeleteValueW$MH();
    }
    public static @C("LSTATUS") int RegDeleteValueW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpValueName) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteValueW$MH().invokeExact(hKey.address(), lpValueName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegEnumKeyA$MH() {
        return cfapi_h$constants$40.RegEnumKeyA$MH();
    }
    public static @C("LSTATUS") int RegEnumKeyA (@C("HKEY") Addressable hKey, @C("DWORD") int dwIndex, @C("LPSTR") Addressable lpName, @C("DWORD") int cchName) {
        try {
            return (int)cfapi_h$constants$40.RegEnumKeyA$MH().invokeExact(hKey.address(), dwIndex, lpName.address(), cchName);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegEnumKeyW$MH() {
        return cfapi_h$constants$40.RegEnumKeyW$MH();
    }
    public static @C("LSTATUS") int RegEnumKeyW (@C("HKEY") Addressable hKey, @C("DWORD") int dwIndex, @C("LPWSTR") Addressable lpName, @C("DWORD") int cchName) {
        try {
            return (int)cfapi_h$constants$40.RegEnumKeyW$MH().invokeExact(hKey.address(), dwIndex, lpName.address(), cchName);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegEnumKeyExA$MH() {
        return cfapi_h$constants$40.RegEnumKeyExA$MH();
    }
    public static @C("LSTATUS") int RegEnumKeyExA (@C("HKEY") Addressable hKey, @C("DWORD") int dwIndex, @C("LPSTR") Addressable lpName, @C("LPDWORD") Addressable lpcchName, @C("LPDWORD") Addressable lpReserved, @C("LPSTR") Addressable lpClass, @C("LPDWORD") Addressable lpcchClass, @C("PFILETIME") Addressable lpftLastWriteTime) {
        try {
            return (int)cfapi_h$constants$40.RegEnumKeyExA$MH().invokeExact(hKey.address(), dwIndex, lpName.address(), lpcchName.address(), lpReserved.address(), lpClass.address(), lpcchClass.address(), lpftLastWriteTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegEnumKeyExW$MH() {
        return cfapi_h$constants$40.RegEnumKeyExW$MH();
    }
    public static @C("LSTATUS") int RegEnumKeyExW (@C("HKEY") Addressable hKey, @C("DWORD") int dwIndex, @C("LPWSTR") Addressable lpName, @C("LPDWORD") Addressable lpcchName, @C("LPDWORD") Addressable lpReserved, @C("LPWSTR") Addressable lpClass, @C("LPDWORD") Addressable lpcchClass, @C("PFILETIME") Addressable lpftLastWriteTime) {
        try {
            return (int)cfapi_h$constants$40.RegEnumKeyExW$MH().invokeExact(hKey.address(), dwIndex, lpName.address(), lpcchName.address(), lpReserved.address(), lpClass.address(), lpcchClass.address(), lpftLastWriteTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegEnumValueA$MH() {
        return cfapi_h$constants$40.RegEnumValueA$MH();
    }
    public static @C("LSTATUS") int RegEnumValueA (@C("HKEY") Addressable hKey, @C("DWORD") int dwIndex, @C("LPSTR") Addressable lpValueName, @C("LPDWORD") Addressable lpcchValueName, @C("LPDWORD") Addressable lpReserved, @C("LPDWORD") Addressable lpType, @C("LPBYTE") Addressable lpData, @C("LPDWORD") Addressable lpcbData) {
        try {
            return (int)cfapi_h$constants$40.RegEnumValueA$MH().invokeExact(hKey.address(), dwIndex, lpValueName.address(), lpcchValueName.address(), lpReserved.address(), lpType.address(), lpData.address(), lpcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegEnumValueW$MH() {
        return cfapi_h$constants$40.RegEnumValueW$MH();
    }
    public static @C("LSTATUS") int RegEnumValueW (@C("HKEY") Addressable hKey, @C("DWORD") int dwIndex, @C("LPWSTR") Addressable lpValueName, @C("LPDWORD") Addressable lpcchValueName, @C("LPDWORD") Addressable lpReserved, @C("LPDWORD") Addressable lpType, @C("LPBYTE") Addressable lpData, @C("LPDWORD") Addressable lpcbData) {
        try {
            return (int)cfapi_h$constants$40.RegEnumValueW$MH().invokeExact(hKey.address(), dwIndex, lpValueName.address(), lpcchValueName.address(), lpReserved.address(), lpType.address(), lpData.address(), lpcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegFlushKey$MH() {
        return cfapi_h$constants$40.RegFlushKey$MH();
    }
    public static @C("LSTATUS") int RegFlushKey (@C("HKEY") Addressable hKey) {
        try {
            return (int)cfapi_h$constants$40.RegFlushKey$MH().invokeExact(hKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegGetKeySecurity$MH() {
        return cfapi_h$constants$40.RegGetKeySecurity$MH();
    }
    public static @C("LSTATUS") int RegGetKeySecurity (@C("HKEY") Addressable hKey, @C("SECURITY_INFORMATION") int SecurityInformation, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("LPDWORD") Addressable lpcbSecurityDescriptor) {
        try {
            return (int)cfapi_h$constants$40.RegGetKeySecurity$MH().invokeExact(hKey.address(), SecurityInformation, pSecurityDescriptor.address(), lpcbSecurityDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegLoadKeyA$MH() {
        return cfapi_h$constants$40.RegLoadKeyA$MH();
    }
    public static @C("LSTATUS") int RegLoadKeyA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("LPCSTR") Addressable lpFile) {
        try {
            return (int)cfapi_h$constants$40.RegLoadKeyA$MH().invokeExact(hKey.address(), lpSubKey.address(), lpFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegLoadKeyW$MH() {
        return cfapi_h$constants$40.RegLoadKeyW$MH();
    }
    public static @C("LSTATUS") int RegLoadKeyW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("LPCWSTR") Addressable lpFile) {
        try {
            return (int)cfapi_h$constants$40.RegLoadKeyW$MH().invokeExact(hKey.address(), lpSubKey.address(), lpFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegNotifyChangeKeyValue$MH() {
        return cfapi_h$constants$40.RegNotifyChangeKeyValue$MH();
    }
    public static @C("LSTATUS") int RegNotifyChangeKeyValue (@C("HKEY") Addressable hKey, @C("BOOL") int bWatchSubtree, @C("DWORD") int dwNotifyFilter, @C("HANDLE") Addressable hEvent, @C("BOOL") int fAsynchronous) {
        try {
            return (int)cfapi_h$constants$40.RegNotifyChangeKeyValue$MH().invokeExact(hKey.address(), bWatchSubtree, dwNotifyFilter, hEvent.address(), fAsynchronous);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegOpenKeyA$MH() {
        return cfapi_h$constants$40.RegOpenKeyA$MH();
    }
    public static @C("LSTATUS") int RegOpenKeyA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegOpenKeyA$MH().invokeExact(hKey.address(), lpSubKey.address(), phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegOpenKeyW$MH() {
        return cfapi_h$constants$40.RegOpenKeyW$MH();
    }
    public static @C("LSTATUS") int RegOpenKeyW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegOpenKeyW$MH().invokeExact(hKey.address(), lpSubKey.address(), phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegOpenKeyExA$MH() {
        return cfapi_h$constants$40.RegOpenKeyExA$MH();
    }
    public static @C("LSTATUS") int RegOpenKeyExA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("DWORD") int ulOptions, @C("REGSAM") int samDesired, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegOpenKeyExA$MH().invokeExact(hKey.address(), lpSubKey.address(), ulOptions, samDesired, phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegOpenKeyExW$MH() {
        return cfapi_h$constants$40.RegOpenKeyExW$MH();
    }
    public static @C("LSTATUS") int RegOpenKeyExW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("DWORD") int ulOptions, @C("REGSAM") int samDesired, @C("PHKEY") Addressable phkResult) {
        try {
            return (int)cfapi_h$constants$40.RegOpenKeyExW$MH().invokeExact(hKey.address(), lpSubKey.address(), ulOptions, samDesired, phkResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegOpenKeyTransactedA$MH() {
        return cfapi_h$constants$40.RegOpenKeyTransactedA$MH();
    }
    public static @C("LSTATUS") int RegOpenKeyTransactedA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("DWORD") int ulOptions, @C("REGSAM") int samDesired, @C("PHKEY") Addressable phkResult, @C("HANDLE") Addressable hTransaction, @C("PVOID") Addressable pExtendedParemeter) {
        try {
            return (int)cfapi_h$constants$40.RegOpenKeyTransactedA$MH().invokeExact(hKey.address(), lpSubKey.address(), ulOptions, samDesired, phkResult.address(), hTransaction.address(), pExtendedParemeter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegOpenKeyTransactedW$MH() {
        return cfapi_h$constants$40.RegOpenKeyTransactedW$MH();
    }
    public static @C("LSTATUS") int RegOpenKeyTransactedW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("DWORD") int ulOptions, @C("REGSAM") int samDesired, @C("PHKEY") Addressable phkResult, @C("HANDLE") Addressable hTransaction, @C("PVOID") Addressable pExtendedParemeter) {
        try {
            return (int)cfapi_h$constants$40.RegOpenKeyTransactedW$MH().invokeExact(hKey.address(), lpSubKey.address(), ulOptions, samDesired, phkResult.address(), hTransaction.address(), pExtendedParemeter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegQueryInfoKeyA$MH() {
        return cfapi_h$constants$40.RegQueryInfoKeyA$MH();
    }
    public static @C("LSTATUS") int RegQueryInfoKeyA (@C("HKEY") Addressable hKey, @C("LPSTR") Addressable lpClass, @C("LPDWORD") Addressable lpcchClass, @C("LPDWORD") Addressable lpReserved, @C("LPDWORD") Addressable lpcSubKeys, @C("LPDWORD") Addressable lpcbMaxSubKeyLen, @C("LPDWORD") Addressable lpcbMaxClassLen, @C("LPDWORD") Addressable lpcValues, @C("LPDWORD") Addressable lpcbMaxValueNameLen, @C("LPDWORD") Addressable lpcbMaxValueLen, @C("LPDWORD") Addressable lpcbSecurityDescriptor, @C("PFILETIME") Addressable lpftLastWriteTime) {
        try {
            return (int)cfapi_h$constants$40.RegQueryInfoKeyA$MH().invokeExact(hKey.address(), lpClass.address(), lpcchClass.address(), lpReserved.address(), lpcSubKeys.address(), lpcbMaxSubKeyLen.address(), lpcbMaxClassLen.address(), lpcValues.address(), lpcbMaxValueNameLen.address(), lpcbMaxValueLen.address(), lpcbSecurityDescriptor.address(), lpftLastWriteTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegQueryInfoKeyW$MH() {
        return cfapi_h$constants$40.RegQueryInfoKeyW$MH();
    }
    public static @C("LSTATUS") int RegQueryInfoKeyW (@C("HKEY") Addressable hKey, @C("LPWSTR") Addressable lpClass, @C("LPDWORD") Addressable lpcchClass, @C("LPDWORD") Addressable lpReserved, @C("LPDWORD") Addressable lpcSubKeys, @C("LPDWORD") Addressable lpcbMaxSubKeyLen, @C("LPDWORD") Addressable lpcbMaxClassLen, @C("LPDWORD") Addressable lpcValues, @C("LPDWORD") Addressable lpcbMaxValueNameLen, @C("LPDWORD") Addressable lpcbMaxValueLen, @C("LPDWORD") Addressable lpcbSecurityDescriptor, @C("PFILETIME") Addressable lpftLastWriteTime) {
        try {
            return (int)cfapi_h$constants$40.RegQueryInfoKeyW$MH().invokeExact(hKey.address(), lpClass.address(), lpcchClass.address(), lpReserved.address(), lpcSubKeys.address(), lpcbMaxSubKeyLen.address(), lpcbMaxClassLen.address(), lpcValues.address(), lpcbMaxValueNameLen.address(), lpcbMaxValueLen.address(), lpcbSecurityDescriptor.address(), lpftLastWriteTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegQueryValueA$MH() {
        return cfapi_h$constants$40.RegQueryValueA$MH();
    }
    public static @C("LSTATUS") int RegQueryValueA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("LPSTR") Addressable lpData, @C("PLONG") Addressable lpcbData) {
        try {
            return (int)cfapi_h$constants$40.RegQueryValueA$MH().invokeExact(hKey.address(), lpSubKey.address(), lpData.address(), lpcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegQueryValueW$MH() {
        return cfapi_h$constants$40.RegQueryValueW$MH();
    }
    public static @C("LSTATUS") int RegQueryValueW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("LPWSTR") Addressable lpData, @C("PLONG") Addressable lpcbData) {
        try {
            return (int)cfapi_h$constants$40.RegQueryValueW$MH().invokeExact(hKey.address(), lpSubKey.address(), lpData.address(), lpcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegQueryMultipleValuesA$MH() {
        return cfapi_h$constants$40.RegQueryMultipleValuesA$MH();
    }
    public static @C("LSTATUS") int RegQueryMultipleValuesA (@C("HKEY") Addressable hKey, @C("PVALENTA") Addressable val_list, @C("DWORD") int num_vals, @C("LPSTR") Addressable lpValueBuf, @C("LPDWORD") Addressable ldwTotsize) {
        try {
            return (int)cfapi_h$constants$40.RegQueryMultipleValuesA$MH().invokeExact(hKey.address(), val_list.address(), num_vals, lpValueBuf.address(), ldwTotsize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegQueryMultipleValuesW$MH() {
        return cfapi_h$constants$40.RegQueryMultipleValuesW$MH();
    }
    public static @C("LSTATUS") int RegQueryMultipleValuesW (@C("HKEY") Addressable hKey, @C("PVALENTW") Addressable val_list, @C("DWORD") int num_vals, @C("LPWSTR") Addressable lpValueBuf, @C("LPDWORD") Addressable ldwTotsize) {
        try {
            return (int)cfapi_h$constants$40.RegQueryMultipleValuesW$MH().invokeExact(hKey.address(), val_list.address(), num_vals, lpValueBuf.address(), ldwTotsize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegQueryValueExA$MH() {
        return cfapi_h$constants$40.RegQueryValueExA$MH();
    }
    public static @C("LSTATUS") int RegQueryValueExA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpValueName, @C("LPDWORD") Addressable lpReserved, @C("LPDWORD") Addressable lpType, @C("LPBYTE") Addressable lpData, @C("LPDWORD") Addressable lpcbData) {
        try {
            return (int)cfapi_h$constants$40.RegQueryValueExA$MH().invokeExact(hKey.address(), lpValueName.address(), lpReserved.address(), lpType.address(), lpData.address(), lpcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegQueryValueExW$MH() {
        return cfapi_h$constants$40.RegQueryValueExW$MH();
    }
    public static @C("LSTATUS") int RegQueryValueExW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpValueName, @C("LPDWORD") Addressable lpReserved, @C("LPDWORD") Addressable lpType, @C("LPBYTE") Addressable lpData, @C("LPDWORD") Addressable lpcbData) {
        try {
            return (int)cfapi_h$constants$40.RegQueryValueExW$MH().invokeExact(hKey.address(), lpValueName.address(), lpReserved.address(), lpType.address(), lpData.address(), lpcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegReplaceKeyA$MH() {
        return cfapi_h$constants$40.RegReplaceKeyA$MH();
    }
    public static @C("LSTATUS") int RegReplaceKeyA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("LPCSTR") Addressable lpNewFile, @C("LPCSTR") Addressable lpOldFile) {
        try {
            return (int)cfapi_h$constants$40.RegReplaceKeyA$MH().invokeExact(hKey.address(), lpSubKey.address(), lpNewFile.address(), lpOldFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegReplaceKeyW$MH() {
        return cfapi_h$constants$40.RegReplaceKeyW$MH();
    }
    public static @C("LSTATUS") int RegReplaceKeyW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("LPCWSTR") Addressable lpNewFile, @C("LPCWSTR") Addressable lpOldFile) {
        try {
            return (int)cfapi_h$constants$40.RegReplaceKeyW$MH().invokeExact(hKey.address(), lpSubKey.address(), lpNewFile.address(), lpOldFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegRestoreKeyA$MH() {
        return cfapi_h$constants$40.RegRestoreKeyA$MH();
    }
    public static @C("LSTATUS") int RegRestoreKeyA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpFile, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$40.RegRestoreKeyA$MH().invokeExact(hKey.address(), lpFile.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegRestoreKeyW$MH() {
        return cfapi_h$constants$40.RegRestoreKeyW$MH();
    }
    public static @C("LSTATUS") int RegRestoreKeyW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpFile, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$40.RegRestoreKeyW$MH().invokeExact(hKey.address(), lpFile.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegRenameKey$MH() {
        return cfapi_h$constants$40.RegRenameKey$MH();
    }
    public static @C("LSTATUS") int RegRenameKey (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKeyName, @C("LPCWSTR") Addressable lpNewKeyName) {
        try {
            return (int)cfapi_h$constants$40.RegRenameKey$MH().invokeExact(hKey.address(), lpSubKeyName.address(), lpNewKeyName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSaveKeyA$MH() {
        return cfapi_h$constants$40.RegSaveKeyA$MH();
    }
    public static @C("LSTATUS") int RegSaveKeyA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpFile, @C("const LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$40.RegSaveKeyA$MH().invokeExact(hKey.address(), lpFile.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSaveKeyW$MH() {
        return cfapi_h$constants$40.RegSaveKeyW$MH();
    }
    public static @C("LSTATUS") int RegSaveKeyW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpFile, @C("const LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$40.RegSaveKeyW$MH().invokeExact(hKey.address(), lpFile.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSetKeySecurity$MH() {
        return cfapi_h$constants$40.RegSetKeySecurity$MH();
    }
    public static @C("LSTATUS") int RegSetKeySecurity (@C("HKEY") Addressable hKey, @C("SECURITY_INFORMATION") int SecurityInformation, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor) {
        try {
            return (int)cfapi_h$constants$40.RegSetKeySecurity$MH().invokeExact(hKey.address(), SecurityInformation, pSecurityDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSetValueA$MH() {
        return cfapi_h$constants$40.RegSetValueA$MH();
    }
    public static @C("LSTATUS") int RegSetValueA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("DWORD") int dwType, @C("LPCSTR") Addressable lpData, @C("DWORD") int cbData) {
        try {
            return (int)cfapi_h$constants$40.RegSetValueA$MH().invokeExact(hKey.address(), lpSubKey.address(), dwType, lpData.address(), cbData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSetValueW$MH() {
        return cfapi_h$constants$40.RegSetValueW$MH();
    }
    public static @C("LSTATUS") int RegSetValueW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("DWORD") int dwType, @C("LPCWSTR") Addressable lpData, @C("DWORD") int cbData) {
        try {
            return (int)cfapi_h$constants$40.RegSetValueW$MH().invokeExact(hKey.address(), lpSubKey.address(), dwType, lpData.address(), cbData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSetValueExA$MH() {
        return cfapi_h$constants$40.RegSetValueExA$MH();
    }
    public static @C("LSTATUS") int RegSetValueExA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpValueName, @C("DWORD") int Reserved, @C("DWORD") int dwType, @C("const BYTE*") Addressable lpData, @C("DWORD") int cbData) {
        try {
            return (int)cfapi_h$constants$40.RegSetValueExA$MH().invokeExact(hKey.address(), lpValueName.address(), Reserved, dwType, lpData.address(), cbData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSetValueExW$MH() {
        return cfapi_h$constants$40.RegSetValueExW$MH();
    }
    public static @C("LSTATUS") int RegSetValueExW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpValueName, @C("DWORD") int Reserved, @C("DWORD") int dwType, @C("const BYTE*") Addressable lpData, @C("DWORD") int cbData) {
        try {
            return (int)cfapi_h$constants$40.RegSetValueExW$MH().invokeExact(hKey.address(), lpValueName.address(), Reserved, dwType, lpData.address(), cbData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegUnLoadKeyA$MH() {
        return cfapi_h$constants$40.RegUnLoadKeyA$MH();
    }
    public static @C("LSTATUS") int RegUnLoadKeyA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey) {
        try {
            return (int)cfapi_h$constants$40.RegUnLoadKeyA$MH().invokeExact(hKey.address(), lpSubKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegUnLoadKeyW$MH() {
        return cfapi_h$constants$40.RegUnLoadKeyW$MH();
    }
    public static @C("LSTATUS") int RegUnLoadKeyW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey) {
        try {
            return (int)cfapi_h$constants$40.RegUnLoadKeyW$MH().invokeExact(hKey.address(), lpSubKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteKeyValueA$MH() {
        return cfapi_h$constants$40.RegDeleteKeyValueA$MH();
    }
    public static @C("LSTATUS") int RegDeleteKeyValueA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("LPCSTR") Addressable lpValueName) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteKeyValueA$MH().invokeExact(hKey.address(), lpSubKey.address(), lpValueName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteKeyValueW$MH() {
        return cfapi_h$constants$40.RegDeleteKeyValueW$MH();
    }
    public static @C("LSTATUS") int RegDeleteKeyValueW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("LPCWSTR") Addressable lpValueName) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteKeyValueW$MH().invokeExact(hKey.address(), lpSubKey.address(), lpValueName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSetKeyValueA$MH() {
        return cfapi_h$constants$40.RegSetKeyValueA$MH();
    }
    public static @C("LSTATUS") int RegSetKeyValueA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey, @C("LPCSTR") Addressable lpValueName, @C("DWORD") int dwType, @C("LPCVOID") Addressable lpData, @C("DWORD") int cbData) {
        try {
            return (int)cfapi_h$constants$40.RegSetKeyValueA$MH().invokeExact(hKey.address(), lpSubKey.address(), lpValueName.address(), dwType, lpData.address(), cbData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSetKeyValueW$MH() {
        return cfapi_h$constants$40.RegSetKeyValueW$MH();
    }
    public static @C("LSTATUS") int RegSetKeyValueW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey, @C("LPCWSTR") Addressable lpValueName, @C("DWORD") int dwType, @C("LPCVOID") Addressable lpData, @C("DWORD") int cbData) {
        try {
            return (int)cfapi_h$constants$40.RegSetKeyValueW$MH().invokeExact(hKey.address(), lpSubKey.address(), lpValueName.address(), dwType, lpData.address(), cbData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteTreeA$MH() {
        return cfapi_h$constants$40.RegDeleteTreeA$MH();
    }
    public static @C("LSTATUS") int RegDeleteTreeA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpSubKey) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteTreeA$MH().invokeExact(hKey.address(), lpSubKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegDeleteTreeW$MH() {
        return cfapi_h$constants$40.RegDeleteTreeW$MH();
    }
    public static @C("LSTATUS") int RegDeleteTreeW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpSubKey) {
        try {
            return (int)cfapi_h$constants$40.RegDeleteTreeW$MH().invokeExact(hKey.address(), lpSubKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegCopyTreeA$MH() {
        return cfapi_h$constants$40.RegCopyTreeA$MH();
    }
    public static @C("LSTATUS") int RegCopyTreeA (@C("HKEY") Addressable hKeySrc, @C("LPCSTR") Addressable lpSubKey, @C("HKEY") Addressable hKeyDest) {
        try {
            return (int)cfapi_h$constants$40.RegCopyTreeA$MH().invokeExact(hKeySrc.address(), lpSubKey.address(), hKeyDest.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegGetValueA$MH() {
        return cfapi_h$constants$40.RegGetValueA$MH();
    }
    public static @C("LSTATUS") int RegGetValueA (@C("HKEY") Addressable hkey, @C("LPCSTR") Addressable lpSubKey, @C("LPCSTR") Addressable lpValue, @C("DWORD") int dwFlags, @C("LPDWORD") Addressable pdwType, @C("PVOID") Addressable pvData, @C("LPDWORD") Addressable pcbData) {
        try {
            return (int)cfapi_h$constants$40.RegGetValueA$MH().invokeExact(hkey.address(), lpSubKey.address(), lpValue.address(), dwFlags, pdwType.address(), pvData.address(), pcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegGetValueW$MH() {
        return cfapi_h$constants$40.RegGetValueW$MH();
    }
    public static @C("LSTATUS") int RegGetValueW (@C("HKEY") Addressable hkey, @C("LPCWSTR") Addressable lpSubKey, @C("LPCWSTR") Addressable lpValue, @C("DWORD") int dwFlags, @C("LPDWORD") Addressable pdwType, @C("PVOID") Addressable pvData, @C("LPDWORD") Addressable pcbData) {
        try {
            return (int)cfapi_h$constants$40.RegGetValueW$MH().invokeExact(hkey.address(), lpSubKey.address(), lpValue.address(), dwFlags, pdwType.address(), pvData.address(), pcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegCopyTreeW$MH() {
        return cfapi_h$constants$40.RegCopyTreeW$MH();
    }
    public static @C("LSTATUS") int RegCopyTreeW (@C("HKEY") Addressable hKeySrc, @C("LPCWSTR") Addressable lpSubKey, @C("HKEY") Addressable hKeyDest) {
        try {
            return (int)cfapi_h$constants$40.RegCopyTreeW$MH().invokeExact(hKeySrc.address(), lpSubKey.address(), hKeyDest.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegLoadMUIStringA$MH() {
        return cfapi_h$constants$40.RegLoadMUIStringA$MH();
    }
    public static @C("LSTATUS") int RegLoadMUIStringA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable pszValue, @C("LPSTR") Addressable pszOutBuf, @C("DWORD") int cbOutBuf, @C("LPDWORD") Addressable pcbData, @C("DWORD") int Flags, @C("LPCSTR") Addressable pszDirectory) {
        try {
            return (int)cfapi_h$constants$40.RegLoadMUIStringA$MH().invokeExact(hKey.address(), pszValue.address(), pszOutBuf.address(), cbOutBuf, pcbData.address(), Flags, pszDirectory.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegLoadMUIStringW$MH() {
        return cfapi_h$constants$40.RegLoadMUIStringW$MH();
    }
    public static @C("LSTATUS") int RegLoadMUIStringW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable pszValue, @C("LPWSTR") Addressable pszOutBuf, @C("DWORD") int cbOutBuf, @C("LPDWORD") Addressable pcbData, @C("DWORD") int Flags, @C("LPCWSTR") Addressable pszDirectory) {
        try {
            return (int)cfapi_h$constants$40.RegLoadMUIStringW$MH().invokeExact(hKey.address(), pszValue.address(), pszOutBuf.address(), cbOutBuf, pcbData.address(), Flags, pszDirectory.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegLoadAppKeyA$MH() {
        return cfapi_h$constants$40.RegLoadAppKeyA$MH();
    }
    public static @C("LSTATUS") int RegLoadAppKeyA (@C("LPCSTR") Addressable lpFile, @C("PHKEY") Addressable phkResult, @C("REGSAM") int samDesired, @C("DWORD") int dwOptions, @C("DWORD") int Reserved) {
        try {
            return (int)cfapi_h$constants$40.RegLoadAppKeyA$MH().invokeExact(lpFile.address(), phkResult.address(), samDesired, dwOptions, Reserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegLoadAppKeyW$MH() {
        return cfapi_h$constants$40.RegLoadAppKeyW$MH();
    }
    public static @C("LSTATUS") int RegLoadAppKeyW (@C("LPCWSTR") Addressable lpFile, @C("PHKEY") Addressable phkResult, @C("REGSAM") int samDesired, @C("DWORD") int dwOptions, @C("DWORD") int Reserved) {
        try {
            return (int)cfapi_h$constants$40.RegLoadAppKeyW$MH().invokeExact(lpFile.address(), phkResult.address(), samDesired, dwOptions, Reserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitiateSystemShutdownA$MH() {
        return cfapi_h$constants$40.InitiateSystemShutdownA$MH();
    }
    public static @C("BOOL") int InitiateSystemShutdownA (@C("LPSTR") Addressable lpMachineName, @C("LPSTR") Addressable lpMessage, @C("DWORD") int dwTimeout, @C("BOOL") int bForceAppsClosed, @C("BOOL") int bRebootAfterShutdown) {
        try {
            return (int)cfapi_h$constants$40.InitiateSystemShutdownA$MH().invokeExact(lpMachineName.address(), lpMessage.address(), dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitiateSystemShutdownW$MH() {
        return cfapi_h$constants$40.InitiateSystemShutdownW$MH();
    }
    public static @C("BOOL") int InitiateSystemShutdownW (@C("LPWSTR") Addressable lpMachineName, @C("LPWSTR") Addressable lpMessage, @C("DWORD") int dwTimeout, @C("BOOL") int bForceAppsClosed, @C("BOOL") int bRebootAfterShutdown) {
        try {
            return (int)cfapi_h$constants$40.InitiateSystemShutdownW$MH().invokeExact(lpMachineName.address(), lpMessage.address(), dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AbortSystemShutdownA$MH() {
        return cfapi_h$constants$40.AbortSystemShutdownA$MH();
    }
    public static @C("BOOL") int AbortSystemShutdownA (@C("LPSTR") Addressable lpMachineName) {
        try {
            return (int)cfapi_h$constants$40.AbortSystemShutdownA$MH().invokeExact(lpMachineName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AbortSystemShutdownW$MH() {
        return cfapi_h$constants$40.AbortSystemShutdownW$MH();
    }
    public static @C("BOOL") int AbortSystemShutdownW (@C("LPWSTR") Addressable lpMachineName) {
        try {
            return (int)cfapi_h$constants$40.AbortSystemShutdownW$MH().invokeExact(lpMachineName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitiateSystemShutdownExA$MH() {
        return cfapi_h$constants$40.InitiateSystemShutdownExA$MH();
    }
    public static @C("BOOL") int InitiateSystemShutdownExA (@C("LPSTR") Addressable lpMachineName, @C("LPSTR") Addressable lpMessage, @C("DWORD") int dwTimeout, @C("BOOL") int bForceAppsClosed, @C("BOOL") int bRebootAfterShutdown, @C("DWORD") int dwReason) {
        try {
            return (int)cfapi_h$constants$40.InitiateSystemShutdownExA$MH().invokeExact(lpMachineName.address(), lpMessage.address(), dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitiateSystemShutdownExW$MH() {
        return cfapi_h$constants$40.InitiateSystemShutdownExW$MH();
    }
    public static @C("BOOL") int InitiateSystemShutdownExW (@C("LPWSTR") Addressable lpMachineName, @C("LPWSTR") Addressable lpMessage, @C("DWORD") int dwTimeout, @C("BOOL") int bForceAppsClosed, @C("BOOL") int bRebootAfterShutdown, @C("DWORD") int dwReason) {
        try {
            return (int)cfapi_h$constants$40.InitiateSystemShutdownExW$MH().invokeExact(lpMachineName.address(), lpMessage.address(), dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitiateShutdownA$MH() {
        return cfapi_h$constants$40.InitiateShutdownA$MH();
    }
    public static @C("DWORD") int InitiateShutdownA (@C("LPSTR") Addressable lpMachineName, @C("LPSTR") Addressable lpMessage, @C("DWORD") int dwGracePeriod, @C("DWORD") int dwShutdownFlags, @C("DWORD") int dwReason) {
        try {
            return (int)cfapi_h$constants$40.InitiateShutdownA$MH().invokeExact(lpMachineName.address(), lpMessage.address(), dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitiateShutdownW$MH() {
        return cfapi_h$constants$40.InitiateShutdownW$MH();
    }
    public static @C("DWORD") int InitiateShutdownW (@C("LPWSTR") Addressable lpMachineName, @C("LPWSTR") Addressable lpMessage, @C("DWORD") int dwGracePeriod, @C("DWORD") int dwShutdownFlags, @C("DWORD") int dwReason) {
        try {
            return (int)cfapi_h$constants$40.InitiateShutdownW$MH().invokeExact(lpMachineName.address(), lpMessage.address(), dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckForHiberboot$MH() {
        return cfapi_h$constants$40.CheckForHiberboot$MH();
    }
    public static @C("DWORD") int CheckForHiberboot (@C("PBOOLEAN") Addressable pHiberboot, @C("BOOLEAN") byte bClearFlag) {
        try {
            return (int)cfapi_h$constants$40.CheckForHiberboot$MH().invokeExact(pHiberboot.address(), bClearFlag);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSaveKeyExA$MH() {
        return cfapi_h$constants$40.RegSaveKeyExA$MH();
    }
    public static @C("LSTATUS") int RegSaveKeyExA (@C("HKEY") Addressable hKey, @C("LPCSTR") Addressable lpFile, @C("const LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int Flags) {
        try {
            return (int)cfapi_h$constants$40.RegSaveKeyExA$MH().invokeExact(hKey.address(), lpFile.address(), lpSecurityAttributes.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegSaveKeyExW$MH() {
        return cfapi_h$constants$40.RegSaveKeyExW$MH();
    }
    public static @C("LSTATUS") int RegSaveKeyExW (@C("HKEY") Addressable hKey, @C("LPCWSTR") Addressable lpFile, @C("const LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int Flags) {
        try {
            return (int)cfapi_h$constants$40.RegSaveKeyExW$MH().invokeExact(hKey.address(), lpFile.address(), lpSecurityAttributes.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetAddConnectionA$MH() {
        return cfapi_h$constants$40.WNetAddConnectionA$MH();
    }
    public static @C("DWORD") int WNetAddConnectionA (@C("LPCSTR") Addressable lpRemoteName, @C("LPCSTR") Addressable lpPassword, @C("LPCSTR") Addressable lpLocalName) {
        try {
            return (int)cfapi_h$constants$40.WNetAddConnectionA$MH().invokeExact(lpRemoteName.address(), lpPassword.address(), lpLocalName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetAddConnectionW$MH() {
        return cfapi_h$constants$40.WNetAddConnectionW$MH();
    }
    public static @C("DWORD") int WNetAddConnectionW (@C("LPCWSTR") Addressable lpRemoteName, @C("LPCWSTR") Addressable lpPassword, @C("LPCWSTR") Addressable lpLocalName) {
        try {
            return (int)cfapi_h$constants$40.WNetAddConnectionW$MH().invokeExact(lpRemoteName.address(), lpPassword.address(), lpLocalName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetAddConnection2A$MH() {
        return cfapi_h$constants$40.WNetAddConnection2A$MH();
    }
    public static @C("DWORD") int WNetAddConnection2A (@C("LPNETRESOURCEA") Addressable lpNetResource, @C("LPCSTR") Addressable lpPassword, @C("LPCSTR") Addressable lpUserName, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$40.WNetAddConnection2A$MH().invokeExact(lpNetResource.address(), lpPassword.address(), lpUserName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetAddConnection2W$MH() {
        return cfapi_h$constants$40.WNetAddConnection2W$MH();
    }
    public static @C("DWORD") int WNetAddConnection2W (@C("LPNETRESOURCEW") Addressable lpNetResource, @C("LPCWSTR") Addressable lpPassword, @C("LPCWSTR") Addressable lpUserName, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$40.WNetAddConnection2W$MH().invokeExact(lpNetResource.address(), lpPassword.address(), lpUserName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetAddConnection3A$MH() {
        return cfapi_h$constants$40.WNetAddConnection3A$MH();
    }
    public static @C("DWORD") int WNetAddConnection3A (@C("HWND") Addressable hwndOwner, @C("LPNETRESOURCEA") Addressable lpNetResource, @C("LPCSTR") Addressable lpPassword, @C("LPCSTR") Addressable lpUserName, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$40.WNetAddConnection3A$MH().invokeExact(hwndOwner.address(), lpNetResource.address(), lpPassword.address(), lpUserName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetAddConnection3W$MH() {
        return cfapi_h$constants$40.WNetAddConnection3W$MH();
    }
    public static @C("DWORD") int WNetAddConnection3W (@C("HWND") Addressable hwndOwner, @C("LPNETRESOURCEW") Addressable lpNetResource, @C("LPCWSTR") Addressable lpPassword, @C("LPCWSTR") Addressable lpUserName, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$40.WNetAddConnection3W$MH().invokeExact(hwndOwner.address(), lpNetResource.address(), lpPassword.address(), lpUserName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetAddConnection4A$MH() {
        return cfapi_h$constants$40.WNetAddConnection4A$MH();
    }
    public static @C("DWORD") int WNetAddConnection4A (@C("HWND") Addressable hwndOwner, @C("LPNETRESOURCEA") Addressable lpNetResource, @C("PVOID") Addressable pAuthBuffer, @C("DWORD") int cbAuthBuffer, @C("DWORD") int dwFlags, @C("PBYTE") Addressable lpUseOptions, @C("DWORD") int cbUseOptions) {
        try {
            return (int)cfapi_h$constants$40.WNetAddConnection4A$MH().invokeExact(hwndOwner.address(), lpNetResource.address(), pAuthBuffer.address(), cbAuthBuffer, dwFlags, lpUseOptions.address(), cbUseOptions);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetAddConnection4W$MH() {
        return cfapi_h$constants$40.WNetAddConnection4W$MH();
    }
    public static @C("DWORD") int WNetAddConnection4W (@C("HWND") Addressable hwndOwner, @C("LPNETRESOURCEW") Addressable lpNetResource, @C("PVOID") Addressable pAuthBuffer, @C("DWORD") int cbAuthBuffer, @C("DWORD") int dwFlags, @C("PBYTE") Addressable lpUseOptions, @C("DWORD") int cbUseOptions) {
        try {
            return (int)cfapi_h$constants$40.WNetAddConnection4W$MH().invokeExact(hwndOwner.address(), lpNetResource.address(), pAuthBuffer.address(), cbAuthBuffer, dwFlags, lpUseOptions.address(), cbUseOptions);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetCancelConnectionA$MH() {
        return cfapi_h$constants$40.WNetCancelConnectionA$MH();
    }
    public static @C("DWORD") int WNetCancelConnectionA (@C("LPCSTR") Addressable lpName, @C("BOOL") int fForce) {
        try {
            return (int)cfapi_h$constants$40.WNetCancelConnectionA$MH().invokeExact(lpName.address(), fForce);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetCancelConnectionW$MH() {
        return cfapi_h$constants$40.WNetCancelConnectionW$MH();
    }
    public static @C("DWORD") int WNetCancelConnectionW (@C("LPCWSTR") Addressable lpName, @C("BOOL") int fForce) {
        try {
            return (int)cfapi_h$constants$40.WNetCancelConnectionW$MH().invokeExact(lpName.address(), fForce);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetCancelConnection2A$MH() {
        return cfapi_h$constants$40.WNetCancelConnection2A$MH();
    }
    public static @C("DWORD") int WNetCancelConnection2A (@C("LPCSTR") Addressable lpName, @C("DWORD") int dwFlags, @C("BOOL") int fForce) {
        try {
            return (int)cfapi_h$constants$40.WNetCancelConnection2A$MH().invokeExact(lpName.address(), dwFlags, fForce);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetCancelConnection2W$MH() {
        return cfapi_h$constants$40.WNetCancelConnection2W$MH();
    }
    public static @C("DWORD") int WNetCancelConnection2W (@C("LPCWSTR") Addressable lpName, @C("DWORD") int dwFlags, @C("BOOL") int fForce) {
        try {
            return (int)cfapi_h$constants$40.WNetCancelConnection2W$MH().invokeExact(lpName.address(), dwFlags, fForce);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetConnectionA$MH() {
        return cfapi_h$constants$40.WNetGetConnectionA$MH();
    }
    public static @C("DWORD") int WNetGetConnectionA (@C("LPCSTR") Addressable lpLocalName, @C("LPSTR") Addressable lpRemoteName, @C("LPDWORD") Addressable lpnLength) {
        try {
            return (int)cfapi_h$constants$40.WNetGetConnectionA$MH().invokeExact(lpLocalName.address(), lpRemoteName.address(), lpnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetConnectionW$MH() {
        return cfapi_h$constants$40.WNetGetConnectionW$MH();
    }
    public static @C("DWORD") int WNetGetConnectionW (@C("LPCWSTR") Addressable lpLocalName, @C("LPWSTR") Addressable lpRemoteName, @C("LPDWORD") Addressable lpnLength) {
        try {
            return (int)cfapi_h$constants$40.WNetGetConnectionW$MH().invokeExact(lpLocalName.address(), lpRemoteName.address(), lpnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetRestoreSingleConnectionW$MH() {
        return cfapi_h$constants$40.WNetRestoreSingleConnectionW$MH();
    }
    public static @C("DWORD") int WNetRestoreSingleConnectionW (@C("HWND") Addressable hwndParent, @C("LPCWSTR") Addressable lpDevice, @C("BOOL") int fUseUI) {
        try {
            return (int)cfapi_h$constants$40.WNetRestoreSingleConnectionW$MH().invokeExact(hwndParent.address(), lpDevice.address(), fUseUI);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetUseConnectionA$MH() {
        return cfapi_h$constants$40.WNetUseConnectionA$MH();
    }
    public static @C("DWORD") int WNetUseConnectionA (@C("HWND") Addressable hwndOwner, @C("LPNETRESOURCEA") Addressable lpNetResource, @C("LPCSTR") Addressable lpPassword, @C("LPCSTR") Addressable lpUserId, @C("DWORD") int dwFlags, @C("LPSTR") Addressable lpAccessName, @C("LPDWORD") Addressable lpBufferSize, @C("LPDWORD") Addressable lpResult) {
        try {
            return (int)cfapi_h$constants$40.WNetUseConnectionA$MH().invokeExact(hwndOwner.address(), lpNetResource.address(), lpPassword.address(), lpUserId.address(), dwFlags, lpAccessName.address(), lpBufferSize.address(), lpResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetUseConnectionW$MH() {
        return cfapi_h$constants$40.WNetUseConnectionW$MH();
    }
    public static @C("DWORD") int WNetUseConnectionW (@C("HWND") Addressable hwndOwner, @C("LPNETRESOURCEW") Addressable lpNetResource, @C("LPCWSTR") Addressable lpPassword, @C("LPCWSTR") Addressable lpUserId, @C("DWORD") int dwFlags, @C("LPWSTR") Addressable lpAccessName, @C("LPDWORD") Addressable lpBufferSize, @C("LPDWORD") Addressable lpResult) {
        try {
            return (int)cfapi_h$constants$40.WNetUseConnectionW$MH().invokeExact(hwndOwner.address(), lpNetResource.address(), lpPassword.address(), lpUserId.address(), dwFlags, lpAccessName.address(), lpBufferSize.address(), lpResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetUseConnection4A$MH() {
        return cfapi_h$constants$40.WNetUseConnection4A$MH();
    }
    public static @C("DWORD") int WNetUseConnection4A (@C("HWND") Addressable hwndOwner, @C("LPNETRESOURCEA") Addressable lpNetResource, @C("PVOID") Addressable pAuthBuffer, @C("DWORD") int cbAuthBuffer, @C("DWORD") int dwFlags, @C("PBYTE") Addressable lpUseOptions, @C("DWORD") int cbUseOptions, @C("LPSTR") Addressable lpAccessName, @C("LPDWORD") Addressable lpBufferSize, @C("LPDWORD") Addressable lpResult) {
        try {
            return (int)cfapi_h$constants$40.WNetUseConnection4A$MH().invokeExact(hwndOwner.address(), lpNetResource.address(), pAuthBuffer.address(), cbAuthBuffer, dwFlags, lpUseOptions.address(), cbUseOptions, lpAccessName.address(), lpBufferSize.address(), lpResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetUseConnection4W$MH() {
        return cfapi_h$constants$40.WNetUseConnection4W$MH();
    }
    public static @C("DWORD") int WNetUseConnection4W (@C("HWND") Addressable hwndOwner, @C("LPNETRESOURCEW") Addressable lpNetResource, @C("PVOID") Addressable pAuthBuffer, @C("DWORD") int cbAuthBuffer, @C("DWORD") int dwFlags, @C("PBYTE") Addressable lpUseOptions, @C("DWORD") int cbUseOptions, @C("LPWSTR") Addressable lpAccessName, @C("LPDWORD") Addressable lpBufferSize, @C("LPDWORD") Addressable lpResult) {
        try {
            return (int)cfapi_h$constants$40.WNetUseConnection4W$MH().invokeExact(hwndOwner.address(), lpNetResource.address(), pAuthBuffer.address(), cbAuthBuffer, dwFlags, lpUseOptions.address(), cbUseOptions, lpAccessName.address(), lpBufferSize.address(), lpResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetConnectionDialog$MH() {
        return cfapi_h$constants$40.WNetConnectionDialog$MH();
    }
    public static @C("DWORD") int WNetConnectionDialog (@C("HWND") Addressable hwnd, @C("DWORD") int dwType) {
        try {
            return (int)cfapi_h$constants$40.WNetConnectionDialog$MH().invokeExact(hwnd.address(), dwType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetDisconnectDialog$MH() {
        return cfapi_h$constants$40.WNetDisconnectDialog$MH();
    }
    public static @C("DWORD") int WNetDisconnectDialog (@C("HWND") Addressable hwnd, @C("DWORD") int dwType) {
        try {
            return (int)cfapi_h$constants$40.WNetDisconnectDialog$MH().invokeExact(hwnd.address(), dwType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetConnectionDialog1A$MH() {
        return cfapi_h$constants$41.WNetConnectionDialog1A$MH();
    }
    public static @C("DWORD") int WNetConnectionDialog1A (@C("LPCONNECTDLGSTRUCTA") Addressable lpConnDlgStruct) {
        try {
            return (int)cfapi_h$constants$41.WNetConnectionDialog1A$MH().invokeExact(lpConnDlgStruct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetConnectionDialog1W$MH() {
        return cfapi_h$constants$41.WNetConnectionDialog1W$MH();
    }
    public static @C("DWORD") int WNetConnectionDialog1W (@C("LPCONNECTDLGSTRUCTW") Addressable lpConnDlgStruct) {
        try {
            return (int)cfapi_h$constants$41.WNetConnectionDialog1W$MH().invokeExact(lpConnDlgStruct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetDisconnectDialog1A$MH() {
        return cfapi_h$constants$41.WNetDisconnectDialog1A$MH();
    }
    public static @C("DWORD") int WNetDisconnectDialog1A (@C("LPDISCDLGSTRUCTA") Addressable lpConnDlgStruct) {
        try {
            return (int)cfapi_h$constants$41.WNetDisconnectDialog1A$MH().invokeExact(lpConnDlgStruct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetDisconnectDialog1W$MH() {
        return cfapi_h$constants$41.WNetDisconnectDialog1W$MH();
    }
    public static @C("DWORD") int WNetDisconnectDialog1W (@C("LPDISCDLGSTRUCTW") Addressable lpConnDlgStruct) {
        try {
            return (int)cfapi_h$constants$41.WNetDisconnectDialog1W$MH().invokeExact(lpConnDlgStruct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetOpenEnumA$MH() {
        return cfapi_h$constants$41.WNetOpenEnumA$MH();
    }
    public static @C("DWORD") int WNetOpenEnumA (@C("DWORD") int dwScope, @C("DWORD") int dwType, @C("DWORD") int dwUsage, @C("LPNETRESOURCEA") Addressable lpNetResource, @C("LPHANDLE") Addressable lphEnum) {
        try {
            return (int)cfapi_h$constants$41.WNetOpenEnumA$MH().invokeExact(dwScope, dwType, dwUsage, lpNetResource.address(), lphEnum.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetOpenEnumW$MH() {
        return cfapi_h$constants$41.WNetOpenEnumW$MH();
    }
    public static @C("DWORD") int WNetOpenEnumW (@C("DWORD") int dwScope, @C("DWORD") int dwType, @C("DWORD") int dwUsage, @C("LPNETRESOURCEW") Addressable lpNetResource, @C("LPHANDLE") Addressable lphEnum) {
        try {
            return (int)cfapi_h$constants$41.WNetOpenEnumW$MH().invokeExact(dwScope, dwType, dwUsage, lpNetResource.address(), lphEnum.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetEnumResourceA$MH() {
        return cfapi_h$constants$41.WNetEnumResourceA$MH();
    }
    public static @C("DWORD") int WNetEnumResourceA (@C("HANDLE") Addressable hEnum, @C("LPDWORD") Addressable lpcCount, @C("LPVOID") Addressable lpBuffer, @C("LPDWORD") Addressable lpBufferSize) {
        try {
            return (int)cfapi_h$constants$41.WNetEnumResourceA$MH().invokeExact(hEnum.address(), lpcCount.address(), lpBuffer.address(), lpBufferSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetEnumResourceW$MH() {
        return cfapi_h$constants$41.WNetEnumResourceW$MH();
    }
    public static @C("DWORD") int WNetEnumResourceW (@C("HANDLE") Addressable hEnum, @C("LPDWORD") Addressable lpcCount, @C("LPVOID") Addressable lpBuffer, @C("LPDWORD") Addressable lpBufferSize) {
        try {
            return (int)cfapi_h$constants$41.WNetEnumResourceW$MH().invokeExact(hEnum.address(), lpcCount.address(), lpBuffer.address(), lpBufferSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetCloseEnum$MH() {
        return cfapi_h$constants$41.WNetCloseEnum$MH();
    }
    public static @C("DWORD") int WNetCloseEnum (@C("HANDLE") Addressable hEnum) {
        try {
            return (int)cfapi_h$constants$41.WNetCloseEnum$MH().invokeExact(hEnum.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetResourceParentA$MH() {
        return cfapi_h$constants$41.WNetGetResourceParentA$MH();
    }
    public static @C("DWORD") int WNetGetResourceParentA (@C("LPNETRESOURCEA") Addressable lpNetResource, @C("LPVOID") Addressable lpBuffer, @C("LPDWORD") Addressable lpcbBuffer) {
        try {
            return (int)cfapi_h$constants$41.WNetGetResourceParentA$MH().invokeExact(lpNetResource.address(), lpBuffer.address(), lpcbBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetResourceParentW$MH() {
        return cfapi_h$constants$41.WNetGetResourceParentW$MH();
    }
    public static @C("DWORD") int WNetGetResourceParentW (@C("LPNETRESOURCEW") Addressable lpNetResource, @C("LPVOID") Addressable lpBuffer, @C("LPDWORD") Addressable lpcbBuffer) {
        try {
            return (int)cfapi_h$constants$41.WNetGetResourceParentW$MH().invokeExact(lpNetResource.address(), lpBuffer.address(), lpcbBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetResourceInformationA$MH() {
        return cfapi_h$constants$41.WNetGetResourceInformationA$MH();
    }
    public static @C("DWORD") int WNetGetResourceInformationA (@C("LPNETRESOURCEA") Addressable lpNetResource, @C("LPVOID") Addressable lpBuffer, @C("LPDWORD") Addressable lpcbBuffer, @C("LPSTR*") Addressable lplpSystem) {
        try {
            return (int)cfapi_h$constants$41.WNetGetResourceInformationA$MH().invokeExact(lpNetResource.address(), lpBuffer.address(), lpcbBuffer.address(), lplpSystem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetResourceInformationW$MH() {
        return cfapi_h$constants$41.WNetGetResourceInformationW$MH();
    }
    public static @C("DWORD") int WNetGetResourceInformationW (@C("LPNETRESOURCEW") Addressable lpNetResource, @C("LPVOID") Addressable lpBuffer, @C("LPDWORD") Addressable lpcbBuffer, @C("LPWSTR*") Addressable lplpSystem) {
        try {
            return (int)cfapi_h$constants$41.WNetGetResourceInformationW$MH().invokeExact(lpNetResource.address(), lpBuffer.address(), lpcbBuffer.address(), lplpSystem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetUniversalNameA$MH() {
        return cfapi_h$constants$41.WNetGetUniversalNameA$MH();
    }
    public static @C("DWORD") int WNetGetUniversalNameA (@C("LPCSTR") Addressable lpLocalPath, @C("DWORD") int dwInfoLevel, @C("LPVOID") Addressable lpBuffer, @C("LPDWORD") Addressable lpBufferSize) {
        try {
            return (int)cfapi_h$constants$41.WNetGetUniversalNameA$MH().invokeExact(lpLocalPath.address(), dwInfoLevel, lpBuffer.address(), lpBufferSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetUniversalNameW$MH() {
        return cfapi_h$constants$41.WNetGetUniversalNameW$MH();
    }
    public static @C("DWORD") int WNetGetUniversalNameW (@C("LPCWSTR") Addressable lpLocalPath, @C("DWORD") int dwInfoLevel, @C("LPVOID") Addressable lpBuffer, @C("LPDWORD") Addressable lpBufferSize) {
        try {
            return (int)cfapi_h$constants$41.WNetGetUniversalNameW$MH().invokeExact(lpLocalPath.address(), dwInfoLevel, lpBuffer.address(), lpBufferSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetUserA$MH() {
        return cfapi_h$constants$41.WNetGetUserA$MH();
    }
    public static @C("DWORD") int WNetGetUserA (@C("LPCSTR") Addressable lpName, @C("LPSTR") Addressable lpUserName, @C("LPDWORD") Addressable lpnLength) {
        try {
            return (int)cfapi_h$constants$41.WNetGetUserA$MH().invokeExact(lpName.address(), lpUserName.address(), lpnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetUserW$MH() {
        return cfapi_h$constants$41.WNetGetUserW$MH();
    }
    public static @C("DWORD") int WNetGetUserW (@C("LPCWSTR") Addressable lpName, @C("LPWSTR") Addressable lpUserName, @C("LPDWORD") Addressable lpnLength) {
        try {
            return (int)cfapi_h$constants$41.WNetGetUserW$MH().invokeExact(lpName.address(), lpUserName.address(), lpnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetProviderNameA$MH() {
        return cfapi_h$constants$41.WNetGetProviderNameA$MH();
    }
    public static @C("DWORD") int WNetGetProviderNameA (@C("DWORD") int dwNetType, @C("LPSTR") Addressable lpProviderName, @C("LPDWORD") Addressable lpBufferSize) {
        try {
            return (int)cfapi_h$constants$41.WNetGetProviderNameA$MH().invokeExact(dwNetType, lpProviderName.address(), lpBufferSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetProviderNameW$MH() {
        return cfapi_h$constants$41.WNetGetProviderNameW$MH();
    }
    public static @C("DWORD") int WNetGetProviderNameW (@C("DWORD") int dwNetType, @C("LPWSTR") Addressable lpProviderName, @C("LPDWORD") Addressable lpBufferSize) {
        try {
            return (int)cfapi_h$constants$41.WNetGetProviderNameW$MH().invokeExact(dwNetType, lpProviderName.address(), lpBufferSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetNetworkInformationA$MH() {
        return cfapi_h$constants$41.WNetGetNetworkInformationA$MH();
    }
    public static @C("DWORD") int WNetGetNetworkInformationA (@C("LPCSTR") Addressable lpProvider, @C("LPNETINFOSTRUCT") Addressable lpNetInfoStruct) {
        try {
            return (int)cfapi_h$constants$41.WNetGetNetworkInformationA$MH().invokeExact(lpProvider.address(), lpNetInfoStruct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetNetworkInformationW$MH() {
        return cfapi_h$constants$41.WNetGetNetworkInformationW$MH();
    }
    public static @C("DWORD") int WNetGetNetworkInformationW (@C("LPCWSTR") Addressable lpProvider, @C("LPNETINFOSTRUCT") Addressable lpNetInfoStruct) {
        try {
            return (int)cfapi_h$constants$41.WNetGetNetworkInformationW$MH().invokeExact(lpProvider.address(), lpNetInfoStruct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetLastErrorA$MH() {
        return cfapi_h$constants$41.WNetGetLastErrorA$MH();
    }
    public static @C("DWORD") int WNetGetLastErrorA (@C("LPDWORD") Addressable lpError, @C("LPSTR") Addressable lpErrorBuf, @C("DWORD") int nErrorBufSize, @C("LPSTR") Addressable lpNameBuf, @C("DWORD") int nNameBufSize) {
        try {
            return (int)cfapi_h$constants$41.WNetGetLastErrorA$MH().invokeExact(lpError.address(), lpErrorBuf.address(), nErrorBufSize, lpNameBuf.address(), nNameBufSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WNetGetLastErrorW$MH() {
        return cfapi_h$constants$41.WNetGetLastErrorW$MH();
    }
    public static @C("DWORD") int WNetGetLastErrorW (@C("LPDWORD") Addressable lpError, @C("LPWSTR") Addressable lpErrorBuf, @C("DWORD") int nErrorBufSize, @C("LPWSTR") Addressable lpNameBuf, @C("DWORD") int nNameBufSize) {
        try {
            return (int)cfapi_h$constants$41.WNetGetLastErrorW$MH().invokeExact(lpError.address(), lpErrorBuf.address(), nErrorBufSize, lpNameBuf.address(), nNameBufSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MultinetGetConnectionPerformanceA$MH() {
        return cfapi_h$constants$41.MultinetGetConnectionPerformanceA$MH();
    }
    public static @C("DWORD") int MultinetGetConnectionPerformanceA (@C("LPNETRESOURCEA") Addressable lpNetResource, @C("LPNETCONNECTINFOSTRUCT") Addressable lpNetConnectInfoStruct) {
        try {
            return (int)cfapi_h$constants$41.MultinetGetConnectionPerformanceA$MH().invokeExact(lpNetResource.address(), lpNetConnectInfoStruct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MultinetGetConnectionPerformanceW$MH() {
        return cfapi_h$constants$41.MultinetGetConnectionPerformanceW$MH();
    }
    public static @C("DWORD") int MultinetGetConnectionPerformanceW (@C("LPNETRESOURCEW") Addressable lpNetResource, @C("LPNETCONNECTINFOSTRUCT") Addressable lpNetConnectInfoStruct) {
        try {
            return (int)cfapi_h$constants$41.MultinetGetConnectionPerformanceW$MH().invokeExact(lpNetResource.address(), lpNetConnectInfoStruct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeSetQualityOfService$MH() {
        return cfapi_h$constants$41.DdeSetQualityOfService$MH();
    }
    public static @C("BOOL") int DdeSetQualityOfService (@C("HWND") Addressable hwndClient, @C("const SECURITY_QUALITY_OF_SERVICE*") Addressable pqosNew, @C("PSECURITY_QUALITY_OF_SERVICE") Addressable pqosPrev) {
        try {
            return (int)cfapi_h$constants$41.DdeSetQualityOfService$MH().invokeExact(hwndClient.address(), pqosNew.address(), pqosPrev.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ImpersonateDdeClientWindow$MH() {
        return cfapi_h$constants$41.ImpersonateDdeClientWindow$MH();
    }
    public static @C("BOOL") int ImpersonateDdeClientWindow (@C("HWND") Addressable hWndClient, @C("HWND") Addressable hWndServer) {
        try {
            return (int)cfapi_h$constants$41.ImpersonateDdeClientWindow$MH().invokeExact(hWndClient.address(), hWndServer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PackDDElParam$MH() {
        return cfapi_h$constants$41.PackDDElParam$MH();
    }
    public static @C("LPARAM") long PackDDElParam (@C("UINT") int msg, @C("UINT_PTR") long uiLo, @C("UINT_PTR") long uiHi) {
        try {
            return (long)cfapi_h$constants$41.PackDDElParam$MH().invokeExact(msg, uiLo, uiHi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnpackDDElParam$MH() {
        return cfapi_h$constants$41.UnpackDDElParam$MH();
    }
    public static @C("BOOL") int UnpackDDElParam (@C("UINT") int msg, @C("LPARAM") long lParam, @C("PUINT_PTR") Addressable puiLo, @C("PUINT_PTR") Addressable puiHi) {
        try {
            return (int)cfapi_h$constants$41.UnpackDDElParam$MH().invokeExact(msg, lParam, puiLo.address(), puiHi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeDDElParam$MH() {
        return cfapi_h$constants$41.FreeDDElParam$MH();
    }
    public static @C("BOOL") int FreeDDElParam (@C("UINT") int msg, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$41.FreeDDElParam$MH().invokeExact(msg, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReuseDDElParam$MH() {
        return cfapi_h$constants$41.ReuseDDElParam$MH();
    }
    public static @C("LPARAM") long ReuseDDElParam (@C("LPARAM") long lParam, @C("UINT") int msgIn, @C("UINT") int msgOut, @C("UINT_PTR") long uiLo, @C("UINT_PTR") long uiHi) {
        try {
            return (long)cfapi_h$constants$41.ReuseDDElParam$MH().invokeExact(lParam, msgIn, msgOut, uiLo, uiHi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeInitializeA$MH() {
        return cfapi_h$constants$41.DdeInitializeA$MH();
    }
    public static @C("UINT") int DdeInitializeA (@C("LPDWORD") Addressable pidInst, @C("PFNCALLBACK") Addressable pfnCallback, @C("DWORD") int afCmd, @C("DWORD") int ulRes) {
        try {
            return (int)cfapi_h$constants$41.DdeInitializeA$MH().invokeExact(pidInst.address(), pfnCallback.address(), afCmd, ulRes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeInitializeW$MH() {
        return cfapi_h$constants$41.DdeInitializeW$MH();
    }
    public static @C("UINT") int DdeInitializeW (@C("LPDWORD") Addressable pidInst, @C("PFNCALLBACK") Addressable pfnCallback, @C("DWORD") int afCmd, @C("DWORD") int ulRes) {
        try {
            return (int)cfapi_h$constants$41.DdeInitializeW$MH().invokeExact(pidInst.address(), pfnCallback.address(), afCmd, ulRes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeUninitialize$MH() {
        return cfapi_h$constants$41.DdeUninitialize$MH();
    }
    public static @C("BOOL") int DdeUninitialize (@C("DWORD") int idInst) {
        try {
            return (int)cfapi_h$constants$41.DdeUninitialize$MH().invokeExact(idInst);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeConnectList$MH() {
        return cfapi_h$constants$41.DdeConnectList$MH();
    }
    public static @C("HCONVLIST") MemoryAddress DdeConnectList (@C("DWORD") int idInst, @C("HSZ") Addressable hszService, @C("HSZ") Addressable hszTopic, @C("HCONVLIST") Addressable hConvList, @C("PCONVCONTEXT") Addressable pCC) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeConnectList$MH().invokeExact(idInst, hszService.address(), hszTopic.address(), hConvList.address(), pCC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeQueryNextServer$MH() {
        return cfapi_h$constants$41.DdeQueryNextServer$MH();
    }
    public static @C("HCONV") MemoryAddress DdeQueryNextServer (@C("HCONVLIST") Addressable hConvList, @C("HCONV") Addressable hConvPrev) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeQueryNextServer$MH().invokeExact(hConvList.address(), hConvPrev.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeDisconnectList$MH() {
        return cfapi_h$constants$41.DdeDisconnectList$MH();
    }
    public static @C("BOOL") int DdeDisconnectList (@C("HCONVLIST") Addressable hConvList) {
        try {
            return (int)cfapi_h$constants$41.DdeDisconnectList$MH().invokeExact(hConvList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeConnect$MH() {
        return cfapi_h$constants$41.DdeConnect$MH();
    }
    public static @C("HCONV") MemoryAddress DdeConnect (@C("DWORD") int idInst, @C("HSZ") Addressable hszService, @C("HSZ") Addressable hszTopic, @C("PCONVCONTEXT") Addressable pCC) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeConnect$MH().invokeExact(idInst, hszService.address(), hszTopic.address(), pCC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeDisconnect$MH() {
        return cfapi_h$constants$41.DdeDisconnect$MH();
    }
    public static @C("BOOL") int DdeDisconnect (@C("HCONV") Addressable hConv) {
        try {
            return (int)cfapi_h$constants$41.DdeDisconnect$MH().invokeExact(hConv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeReconnect$MH() {
        return cfapi_h$constants$41.DdeReconnect$MH();
    }
    public static @C("HCONV") MemoryAddress DdeReconnect (@C("HCONV") Addressable hConv) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeReconnect$MH().invokeExact(hConv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeQueryConvInfo$MH() {
        return cfapi_h$constants$41.DdeQueryConvInfo$MH();
    }
    public static @C("UINT") int DdeQueryConvInfo (@C("HCONV") Addressable hConv, @C("DWORD") int idTransaction, @C("PCONVINFO") Addressable pConvInfo) {
        try {
            return (int)cfapi_h$constants$41.DdeQueryConvInfo$MH().invokeExact(hConv.address(), idTransaction, pConvInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeSetUserHandle$MH() {
        return cfapi_h$constants$41.DdeSetUserHandle$MH();
    }
    public static @C("BOOL") int DdeSetUserHandle (@C("HCONV") Addressable hConv, @C("DWORD") int id, @C("DWORD_PTR") long hUser) {
        try {
            return (int)cfapi_h$constants$41.DdeSetUserHandle$MH().invokeExact(hConv.address(), id, hUser);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeAbandonTransaction$MH() {
        return cfapi_h$constants$41.DdeAbandonTransaction$MH();
    }
    public static @C("BOOL") int DdeAbandonTransaction (@C("DWORD") int idInst, @C("HCONV") Addressable hConv, @C("DWORD") int idTransaction) {
        try {
            return (int)cfapi_h$constants$41.DdeAbandonTransaction$MH().invokeExact(idInst, hConv.address(), idTransaction);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdePostAdvise$MH() {
        return cfapi_h$constants$41.DdePostAdvise$MH();
    }
    public static @C("BOOL") int DdePostAdvise (@C("DWORD") int idInst, @C("HSZ") Addressable hszTopic, @C("HSZ") Addressable hszItem) {
        try {
            return (int)cfapi_h$constants$41.DdePostAdvise$MH().invokeExact(idInst, hszTopic.address(), hszItem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeEnableCallback$MH() {
        return cfapi_h$constants$41.DdeEnableCallback$MH();
    }
    public static @C("BOOL") int DdeEnableCallback (@C("DWORD") int idInst, @C("HCONV") Addressable hConv, @C("UINT") int wCmd) {
        try {
            return (int)cfapi_h$constants$41.DdeEnableCallback$MH().invokeExact(idInst, hConv.address(), wCmd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeImpersonateClient$MH() {
        return cfapi_h$constants$41.DdeImpersonateClient$MH();
    }
    public static @C("BOOL") int DdeImpersonateClient (@C("HCONV") Addressable hConv) {
        try {
            return (int)cfapi_h$constants$41.DdeImpersonateClient$MH().invokeExact(hConv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeNameService$MH() {
        return cfapi_h$constants$41.DdeNameService$MH();
    }
    public static @C("HDDEDATA") MemoryAddress DdeNameService (@C("DWORD") int idInst, @C("HSZ") Addressable hsz1, @C("HSZ") Addressable hsz2, @C("UINT") int afCmd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeNameService$MH().invokeExact(idInst, hsz1.address(), hsz2.address(), afCmd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeClientTransaction$MH() {
        return cfapi_h$constants$41.DdeClientTransaction$MH();
    }
    public static @C("HDDEDATA") MemoryAddress DdeClientTransaction (@C("LPBYTE") Addressable pData, @C("DWORD") int cbData, @C("HCONV") Addressable hConv, @C("HSZ") Addressable hszItem, @C("UINT") int wFmt, @C("UINT") int wType, @C("DWORD") int dwTimeout, @C("LPDWORD") Addressable pdwResult) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeClientTransaction$MH().invokeExact(pData.address(), cbData, hConv.address(), hszItem.address(), wFmt, wType, dwTimeout, pdwResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeCreateDataHandle$MH() {
        return cfapi_h$constants$41.DdeCreateDataHandle$MH();
    }
    public static @C("HDDEDATA") MemoryAddress DdeCreateDataHandle (@C("DWORD") int idInst, @C("LPBYTE") Addressable pSrc, @C("DWORD") int cb, @C("DWORD") int cbOff, @C("HSZ") Addressable hszItem, @C("UINT") int wFmt, @C("UINT") int afCmd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeCreateDataHandle$MH().invokeExact(idInst, pSrc.address(), cb, cbOff, hszItem.address(), wFmt, afCmd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeAddData$MH() {
        return cfapi_h$constants$41.DdeAddData$MH();
    }
    public static @C("HDDEDATA") MemoryAddress DdeAddData (@C("HDDEDATA") Addressable hData, @C("LPBYTE") Addressable pSrc, @C("DWORD") int cb, @C("DWORD") int cbOff) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeAddData$MH().invokeExact(hData.address(), pSrc.address(), cb, cbOff);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeGetData$MH() {
        return cfapi_h$constants$41.DdeGetData$MH();
    }
    public static @C("DWORD") int DdeGetData (@C("HDDEDATA") Addressable hData, @C("LPBYTE") Addressable pDst, @C("DWORD") int cbMax, @C("DWORD") int cbOff) {
        try {
            return (int)cfapi_h$constants$41.DdeGetData$MH().invokeExact(hData.address(), pDst.address(), cbMax, cbOff);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeAccessData$MH() {
        return cfapi_h$constants$41.DdeAccessData$MH();
    }
    public static @C("LPBYTE") MemoryAddress DdeAccessData (@C("HDDEDATA") Addressable hData, @C("LPDWORD") Addressable pcbDataSize) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeAccessData$MH().invokeExact(hData.address(), pcbDataSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeUnaccessData$MH() {
        return cfapi_h$constants$41.DdeUnaccessData$MH();
    }
    public static @C("BOOL") int DdeUnaccessData (@C("HDDEDATA") Addressable hData) {
        try {
            return (int)cfapi_h$constants$41.DdeUnaccessData$MH().invokeExact(hData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeFreeDataHandle$MH() {
        return cfapi_h$constants$41.DdeFreeDataHandle$MH();
    }
    public static @C("BOOL") int DdeFreeDataHandle (@C("HDDEDATA") Addressable hData) {
        try {
            return (int)cfapi_h$constants$41.DdeFreeDataHandle$MH().invokeExact(hData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeGetLastError$MH() {
        return cfapi_h$constants$41.DdeGetLastError$MH();
    }
    public static @C("UINT") int DdeGetLastError (@C("DWORD") int idInst) {
        try {
            return (int)cfapi_h$constants$41.DdeGetLastError$MH().invokeExact(idInst);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeCreateStringHandleA$MH() {
        return cfapi_h$constants$41.DdeCreateStringHandleA$MH();
    }
    public static @C("HSZ") MemoryAddress DdeCreateStringHandleA (@C("DWORD") int idInst, @C("LPCSTR") Addressable psz, @C("int") int iCodePage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeCreateStringHandleA$MH().invokeExact(idInst, psz.address(), iCodePage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeCreateStringHandleW$MH() {
        return cfapi_h$constants$41.DdeCreateStringHandleW$MH();
    }
    public static @C("HSZ") MemoryAddress DdeCreateStringHandleW (@C("DWORD") int idInst, @C("LPCWSTR") Addressable psz, @C("int") int iCodePage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.DdeCreateStringHandleW$MH().invokeExact(idInst, psz.address(), iCodePage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeQueryStringA$MH() {
        return cfapi_h$constants$41.DdeQueryStringA$MH();
    }
    public static @C("DWORD") int DdeQueryStringA (@C("DWORD") int idInst, @C("HSZ") Addressable hsz, @C("LPSTR") Addressable psz, @C("DWORD") int cchMax, @C("int") int iCodePage) {
        try {
            return (int)cfapi_h$constants$41.DdeQueryStringA$MH().invokeExact(idInst, hsz.address(), psz.address(), cchMax, iCodePage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeQueryStringW$MH() {
        return cfapi_h$constants$41.DdeQueryStringW$MH();
    }
    public static @C("DWORD") int DdeQueryStringW (@C("DWORD") int idInst, @C("HSZ") Addressable hsz, @C("LPWSTR") Addressable psz, @C("DWORD") int cchMax, @C("int") int iCodePage) {
        try {
            return (int)cfapi_h$constants$41.DdeQueryStringW$MH().invokeExact(idInst, hsz.address(), psz.address(), cchMax, iCodePage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeFreeStringHandle$MH() {
        return cfapi_h$constants$41.DdeFreeStringHandle$MH();
    }
    public static @C("BOOL") int DdeFreeStringHandle (@C("DWORD") int idInst, @C("HSZ") Addressable hsz) {
        try {
            return (int)cfapi_h$constants$41.DdeFreeStringHandle$MH().invokeExact(idInst, hsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeKeepStringHandle$MH() {
        return cfapi_h$constants$41.DdeKeepStringHandle$MH();
    }
    public static @C("BOOL") int DdeKeepStringHandle (@C("DWORD") int idInst, @C("HSZ") Addressable hsz) {
        try {
            return (int)cfapi_h$constants$41.DdeKeepStringHandle$MH().invokeExact(idInst, hsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DdeCmpStringHandles$MH() {
        return cfapi_h$constants$41.DdeCmpStringHandles$MH();
    }
    public static @C("int") int DdeCmpStringHandles (@C("HSZ") Addressable hsz1, @C("HSZ") Addressable hsz2) {
        try {
            return (int)cfapi_h$constants$41.DdeCmpStringHandles$MH().invokeExact(hsz1.address(), hsz2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LZStart$MH() {
        return cfapi_h$constants$41.LZStart$MH();
    }
    public static @C("INT") int LZStart () {
        try {
            return (int)cfapi_h$constants$41.LZStart$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LZDone$MH() {
        return cfapi_h$constants$41.LZDone$MH();
    }
    public static void LZDone () {
        try {
            cfapi_h$constants$41.LZDone$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyLZFile$MH() {
        return cfapi_h$constants$41.CopyLZFile$MH();
    }
    public static @C("LONG") int CopyLZFile (@C("INT") int hfSource, @C("INT") int hfDest) {
        try {
            return (int)cfapi_h$constants$41.CopyLZFile$MH().invokeExact(hfSource, hfDest);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LZCopy$MH() {
        return cfapi_h$constants$41.LZCopy$MH();
    }
    public static @C("LONG") int LZCopy (@C("INT") int hfSource, @C("INT") int hfDest) {
        try {
            return (int)cfapi_h$constants$41.LZCopy$MH().invokeExact(hfSource, hfDest);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LZInit$MH() {
        return cfapi_h$constants$41.LZInit$MH();
    }
    public static @C("INT") int LZInit (@C("INT") int hfSource) {
        try {
            return (int)cfapi_h$constants$41.LZInit$MH().invokeExact(hfSource);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetExpandedNameA$MH() {
        return cfapi_h$constants$41.GetExpandedNameA$MH();
    }
    public static @C("INT") int GetExpandedNameA (@C("LPSTR") Addressable lpszSource, @C("LPSTR") Addressable lpszBuffer) {
        try {
            return (int)cfapi_h$constants$41.GetExpandedNameA$MH().invokeExact(lpszSource.address(), lpszBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetExpandedNameW$MH() {
        return cfapi_h$constants$41.GetExpandedNameW$MH();
    }
    public static @C("INT") int GetExpandedNameW (@C("LPWSTR") Addressable lpszSource, @C("LPWSTR") Addressable lpszBuffer) {
        try {
            return (int)cfapi_h$constants$41.GetExpandedNameW$MH().invokeExact(lpszSource.address(), lpszBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LZOpenFileA$MH() {
        return cfapi_h$constants$41.LZOpenFileA$MH();
    }
    public static @C("INT") int LZOpenFileA (@C("LPSTR") Addressable lpFileName, @C("LPOFSTRUCT") Addressable lpReOpenBuf, @C("WORD") short wStyle) {
        try {
            return (int)cfapi_h$constants$41.LZOpenFileA$MH().invokeExact(lpFileName.address(), lpReOpenBuf.address(), wStyle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LZOpenFileW$MH() {
        return cfapi_h$constants$41.LZOpenFileW$MH();
    }
    public static @C("INT") int LZOpenFileW (@C("LPWSTR") Addressable lpFileName, @C("LPOFSTRUCT") Addressable lpReOpenBuf, @C("WORD") short wStyle) {
        try {
            return (int)cfapi_h$constants$41.LZOpenFileW$MH().invokeExact(lpFileName.address(), lpReOpenBuf.address(), wStyle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LZSeek$MH() {
        return cfapi_h$constants$41.LZSeek$MH();
    }
    public static @C("LONG") int LZSeek (@C("INT") int hFile, @C("LONG") int lOffset, @C("INT") int iOrigin) {
        try {
            return (int)cfapi_h$constants$41.LZSeek$MH().invokeExact(hFile, lOffset, iOrigin);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LZRead$MH() {
        return cfapi_h$constants$41.LZRead$MH();
    }
    public static @C("INT") int LZRead (@C("INT") int hFile, @C("CHAR*") Addressable lpBuffer, @C("INT") int cbRead) {
        try {
            return (int)cfapi_h$constants$41.LZRead$MH().invokeExact(hFile, lpBuffer.address(), cbRead);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LZClose$MH() {
        return cfapi_h$constants$41.LZClose$MH();
    }
    public static void LZClose (@C("INT") int hFile) {
        try {
            cfapi_h$constants$41.LZClose$MH().invokeExact(hFile);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciSendCommandA$MH() {
        return cfapi_h$constants$41.mciSendCommandA$MH();
    }
    public static @C("MCIERROR") int mciSendCommandA (@C("MCIDEVICEID") int mciId, @C("UINT") int uMsg, @C("DWORD_PTR") long dwParam1, @C("DWORD_PTR") long dwParam2) {
        try {
            return (int)cfapi_h$constants$41.mciSendCommandA$MH().invokeExact(mciId, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciSendCommandW$MH() {
        return cfapi_h$constants$41.mciSendCommandW$MH();
    }
    public static @C("MCIERROR") int mciSendCommandW (@C("MCIDEVICEID") int mciId, @C("UINT") int uMsg, @C("DWORD_PTR") long dwParam1, @C("DWORD_PTR") long dwParam2) {
        try {
            return (int)cfapi_h$constants$41.mciSendCommandW$MH().invokeExact(mciId, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciSendStringA$MH() {
        return cfapi_h$constants$41.mciSendStringA$MH();
    }
    public static @C("MCIERROR") int mciSendStringA (@C("LPCSTR") Addressable lpstrCommand, @C("LPSTR") Addressable lpstrReturnString, @C("UINT") int uReturnLength, @C("HWND") Addressable hwndCallback) {
        try {
            return (int)cfapi_h$constants$41.mciSendStringA$MH().invokeExact(lpstrCommand.address(), lpstrReturnString.address(), uReturnLength, hwndCallback.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciSendStringW$MH() {
        return cfapi_h$constants$41.mciSendStringW$MH();
    }
    public static @C("MCIERROR") int mciSendStringW (@C("LPCWSTR") Addressable lpstrCommand, @C("LPWSTR") Addressable lpstrReturnString, @C("UINT") int uReturnLength, @C("HWND") Addressable hwndCallback) {
        try {
            return (int)cfapi_h$constants$41.mciSendStringW$MH().invokeExact(lpstrCommand.address(), lpstrReturnString.address(), uReturnLength, hwndCallback.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciGetDeviceIDA$MH() {
        return cfapi_h$constants$41.mciGetDeviceIDA$MH();
    }
    public static @C("MCIDEVICEID") int mciGetDeviceIDA (@C("LPCSTR") Addressable pszDevice) {
        try {
            return (int)cfapi_h$constants$41.mciGetDeviceIDA$MH().invokeExact(pszDevice.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciGetDeviceIDW$MH() {
        return cfapi_h$constants$41.mciGetDeviceIDW$MH();
    }
    public static @C("MCIDEVICEID") int mciGetDeviceIDW (@C("LPCWSTR") Addressable pszDevice) {
        try {
            return (int)cfapi_h$constants$41.mciGetDeviceIDW$MH().invokeExact(pszDevice.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciGetDeviceIDFromElementIDA$MH() {
        return cfapi_h$constants$41.mciGetDeviceIDFromElementIDA$MH();
    }
    public static @C("MCIDEVICEID") int mciGetDeviceIDFromElementIDA (@C("DWORD") int dwElementID, @C("LPCSTR") Addressable lpstrType) {
        try {
            return (int)cfapi_h$constants$41.mciGetDeviceIDFromElementIDA$MH().invokeExact(dwElementID, lpstrType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciGetDeviceIDFromElementIDW$MH() {
        return cfapi_h$constants$41.mciGetDeviceIDFromElementIDW$MH();
    }
    public static @C("MCIDEVICEID") int mciGetDeviceIDFromElementIDW (@C("DWORD") int dwElementID, @C("LPCWSTR") Addressable lpstrType) {
        try {
            return (int)cfapi_h$constants$41.mciGetDeviceIDFromElementIDW$MH().invokeExact(dwElementID, lpstrType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciGetErrorStringA$MH() {
        return cfapi_h$constants$41.mciGetErrorStringA$MH();
    }
    public static @C("BOOL") int mciGetErrorStringA (@C("MCIERROR") int mcierr, @C("LPSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$41.mciGetErrorStringA$MH().invokeExact(mcierr, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciGetErrorStringW$MH() {
        return cfapi_h$constants$41.mciGetErrorStringW$MH();
    }
    public static @C("BOOL") int mciGetErrorStringW (@C("MCIERROR") int mcierr, @C("LPWSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$41.mciGetErrorStringW$MH().invokeExact(mcierr, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciSetYieldProc$MH() {
        return cfapi_h$constants$41.mciSetYieldProc$MH();
    }
    public static @C("BOOL") int mciSetYieldProc (@C("MCIDEVICEID") int mciId, @C("YIELDPROC") Addressable fpYieldProc, @C("DWORD") int dwYieldData) {
        try {
            return (int)cfapi_h$constants$41.mciSetYieldProc$MH().invokeExact(mciId, fpYieldProc.address(), dwYieldData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciGetCreatorTask$MH() {
        return cfapi_h$constants$41.mciGetCreatorTask$MH();
    }
    public static @C("HTASK") MemoryAddress mciGetCreatorTask (@C("MCIDEVICEID") int mciId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.mciGetCreatorTask$MH().invokeExact(mciId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciGetYieldProc$MH() {
        return cfapi_h$constants$41.mciGetYieldProc$MH();
    }
    public static @C("YIELDPROC") MemoryAddress mciGetYieldProc (@C("MCIDEVICEID") int mciId, @C("LPDWORD") Addressable pdwYieldData) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$41.mciGetYieldProc$MH().invokeExact(mciId, pdwYieldData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciGetDriverData$MH() {
        return cfapi_h$constants$42.mciGetDriverData$MH();
    }
    public static @C("DWORD_PTR") long mciGetDriverData (@C("MCIDEVICEID") int wDeviceID) {
        try {
            return (long)cfapi_h$constants$42.mciGetDriverData$MH().invokeExact(wDeviceID);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciLoadCommandResource$MH() {
        return cfapi_h$constants$42.mciLoadCommandResource$MH();
    }
    public static @C("UINT") int mciLoadCommandResource (@C("HANDLE") Addressable hInstance, @C("LPCWSTR") Addressable lpResName, @C("UINT") int wType) {
        try {
            return (int)cfapi_h$constants$42.mciLoadCommandResource$MH().invokeExact(hInstance.address(), lpResName.address(), wType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciSetDriverData$MH() {
        return cfapi_h$constants$42.mciSetDriverData$MH();
    }
    public static @C("BOOL") int mciSetDriverData (@C("MCIDEVICEID") int wDeviceID, @C("DWORD_PTR") long dwData) {
        try {
            return (int)cfapi_h$constants$42.mciSetDriverData$MH().invokeExact(wDeviceID, dwData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciDriverYield$MH() {
        return cfapi_h$constants$42.mciDriverYield$MH();
    }
    public static @C("UINT") int mciDriverYield (@C("MCIDEVICEID") int wDeviceID) {
        try {
            return (int)cfapi_h$constants$42.mciDriverYield$MH().invokeExact(wDeviceID);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciDriverNotify$MH() {
        return cfapi_h$constants$42.mciDriverNotify$MH();
    }
    public static @C("BOOL") int mciDriverNotify (@C("HANDLE") Addressable hwndCallback, @C("MCIDEVICEID") int wDeviceID, @C("UINT") int uStatus) {
        try {
            return (int)cfapi_h$constants$42.mciDriverNotify$MH().invokeExact(hwndCallback.address(), wDeviceID, uStatus);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mciFreeCommandResource$MH() {
        return cfapi_h$constants$42.mciFreeCommandResource$MH();
    }
    public static @C("BOOL") int mciFreeCommandResource (@C("UINT") int wTable) {
        try {
            return (int)cfapi_h$constants$42.mciFreeCommandResource$MH().invokeExact(wTable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseDriver$MH() {
        return cfapi_h$constants$42.CloseDriver$MH();
    }
    public static @C("LRESULT") long CloseDriver (@C("HDRVR") Addressable hDriver, @C("LPARAM") long lParam1, @C("LPARAM") long lParam2) {
        try {
            return (long)cfapi_h$constants$42.CloseDriver$MH().invokeExact(hDriver.address(), lParam1, lParam2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenDriver$MH() {
        return cfapi_h$constants$42.OpenDriver$MH();
    }
    public static @C("HDRVR") MemoryAddress OpenDriver (@C("LPCWSTR") Addressable szDriverName, @C("LPCWSTR") Addressable szSectionName, @C("LPARAM") long lParam2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$42.OpenDriver$MH().invokeExact(szDriverName.address(), szSectionName.address(), lParam2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendDriverMessage$MH() {
        return cfapi_h$constants$42.SendDriverMessage$MH();
    }
    public static @C("LRESULT") long SendDriverMessage (@C("HDRVR") Addressable hDriver, @C("UINT") int message, @C("LPARAM") long lParam1, @C("LPARAM") long lParam2) {
        try {
            return (long)cfapi_h$constants$42.SendDriverMessage$MH().invokeExact(hDriver.address(), message, lParam1, lParam2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrvGetModuleHandle$MH() {
        return cfapi_h$constants$42.DrvGetModuleHandle$MH();
    }
    public static @C("HMODULE") MemoryAddress DrvGetModuleHandle (@C("HDRVR") Addressable hDriver) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$42.DrvGetModuleHandle$MH().invokeExact(hDriver.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDriverModuleHandle$MH() {
        return cfapi_h$constants$42.GetDriverModuleHandle$MH();
    }
    public static @C("HMODULE") MemoryAddress GetDriverModuleHandle (@C("HDRVR") Addressable hDriver) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$42.GetDriverModuleHandle$MH().invokeExact(hDriver.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefDriverProc$MH() {
        return cfapi_h$constants$42.DefDriverProc$MH();
    }
    public static @C("LRESULT") long DefDriverProc (@C("DWORD_PTR") long dwDriverIdentifier, @C("HDRVR") Addressable hdrvr, @C("UINT") int uMsg, @C("LPARAM") long lParam1, @C("LPARAM") long lParam2) {
        try {
            return (long)cfapi_h$constants$42.DefDriverProc$MH().invokeExact(dwDriverIdentifier, hdrvr.address(), uMsg, lParam1, lParam2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DriverCallback$MH() {
        return cfapi_h$constants$42.DriverCallback$MH();
    }
    public static @C("BOOL") int DriverCallback (@C("DWORD_PTR") long dwCallback, @C("DWORD") int dwFlags, @C("HDRVR") Addressable hDevice, @C("DWORD") int dwMsg, @C("DWORD_PTR") long dwUser, @C("DWORD_PTR") long dwParam1, @C("DWORD_PTR") long dwParam2) {
        try {
            return (int)cfapi_h$constants$42.DriverCallback$MH().invokeExact(dwCallback, dwFlags, hDevice.address(), dwMsg, dwUser, dwParam1, dwParam2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle sndOpenSound$MH() {
        return cfapi_h$constants$42.sndOpenSound$MH();
    }
    public static @C("LONG") int sndOpenSound (@C("LPCWSTR") Addressable EventName, @C("LPCWSTR") Addressable AppName, @C("INT32") int Flags, @C("PHANDLE") Addressable FileHandle) {
        try {
            return (int)cfapi_h$constants$42.sndOpenSound$MH().invokeExact(EventName.address(), AppName.address(), Flags, FileHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmDrvInstall$MH() {
        return cfapi_h$constants$42.mmDrvInstall$MH();
    }
    public static @C("UINT") int mmDrvInstall (@C("HDRVR") Addressable hDriver, @C("LPCWSTR") Addressable wszDrvEntry, @C("DRIVERMSGPROC") Addressable drvMessage, @C("UINT") int wFlags) {
        try {
            return (int)cfapi_h$constants$42.mmDrvInstall$MH().invokeExact(hDriver.address(), wszDrvEntry.address(), drvMessage.address(), wFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioStringToFOURCCA$MH() {
        return cfapi_h$constants$42.mmioStringToFOURCCA$MH();
    }
    public static @C("FOURCC") int mmioStringToFOURCCA (@C("LPCSTR") Addressable sz, @C("UINT") int uFlags) {
        try {
            return (int)cfapi_h$constants$42.mmioStringToFOURCCA$MH().invokeExact(sz.address(), uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioStringToFOURCCW$MH() {
        return cfapi_h$constants$42.mmioStringToFOURCCW$MH();
    }
    public static @C("FOURCC") int mmioStringToFOURCCW (@C("LPCWSTR") Addressable sz, @C("UINT") int uFlags) {
        try {
            return (int)cfapi_h$constants$42.mmioStringToFOURCCW$MH().invokeExact(sz.address(), uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioInstallIOProcA$MH() {
        return cfapi_h$constants$42.mmioInstallIOProcA$MH();
    }
    public static @C("LPMMIOPROC") MemoryAddress mmioInstallIOProcA (@C("FOURCC") int fccIOProc, @C("LPMMIOPROC") Addressable pIOProc, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$42.mmioInstallIOProcA$MH().invokeExact(fccIOProc, pIOProc.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioInstallIOProcW$MH() {
        return cfapi_h$constants$42.mmioInstallIOProcW$MH();
    }
    public static @C("LPMMIOPROC") MemoryAddress mmioInstallIOProcW (@C("FOURCC") int fccIOProc, @C("LPMMIOPROC") Addressable pIOProc, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$42.mmioInstallIOProcW$MH().invokeExact(fccIOProc, pIOProc.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioOpenA$MH() {
        return cfapi_h$constants$42.mmioOpenA$MH();
    }
    public static @C("HMMIO") MemoryAddress mmioOpenA (@C("LPSTR") Addressable pszFileName, @C("LPMMIOINFO") Addressable pmmioinfo, @C("DWORD") int fdwOpen) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$42.mmioOpenA$MH().invokeExact(pszFileName.address(), pmmioinfo.address(), fdwOpen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioOpenW$MH() {
        return cfapi_h$constants$42.mmioOpenW$MH();
    }
    public static @C("HMMIO") MemoryAddress mmioOpenW (@C("LPWSTR") Addressable pszFileName, @C("LPMMIOINFO") Addressable pmmioinfo, @C("DWORD") int fdwOpen) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$42.mmioOpenW$MH().invokeExact(pszFileName.address(), pmmioinfo.address(), fdwOpen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioRenameA$MH() {
        return cfapi_h$constants$42.mmioRenameA$MH();
    }
    public static @C("MMRESULT") int mmioRenameA (@C("LPCSTR") Addressable pszFileName, @C("LPCSTR") Addressable pszNewFileName, @C("LPCMMIOINFO") Addressable pmmioinfo, @C("DWORD") int fdwRename) {
        try {
            return (int)cfapi_h$constants$42.mmioRenameA$MH().invokeExact(pszFileName.address(), pszNewFileName.address(), pmmioinfo.address(), fdwRename);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioRenameW$MH() {
        return cfapi_h$constants$42.mmioRenameW$MH();
    }
    public static @C("MMRESULT") int mmioRenameW (@C("LPCWSTR") Addressable pszFileName, @C("LPCWSTR") Addressable pszNewFileName, @C("LPCMMIOINFO") Addressable pmmioinfo, @C("DWORD") int fdwRename) {
        try {
            return (int)cfapi_h$constants$42.mmioRenameW$MH().invokeExact(pszFileName.address(), pszNewFileName.address(), pmmioinfo.address(), fdwRename);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioClose$MH() {
        return cfapi_h$constants$42.mmioClose$MH();
    }
    public static @C("MMRESULT") int mmioClose (@C("HMMIO") Addressable hmmio, @C("UINT") int fuClose) {
        try {
            return (int)cfapi_h$constants$42.mmioClose$MH().invokeExact(hmmio.address(), fuClose);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioRead$MH() {
        return cfapi_h$constants$42.mmioRead$MH();
    }
    public static @C("LONG") int mmioRead (@C("HMMIO") Addressable hmmio, @C("HPSTR") Addressable pch, @C("LONG") int cch) {
        try {
            return (int)cfapi_h$constants$42.mmioRead$MH().invokeExact(hmmio.address(), pch.address(), cch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioWrite$MH() {
        return cfapi_h$constants$42.mmioWrite$MH();
    }
    public static @C("LONG") int mmioWrite (@C("HMMIO") Addressable hmmio, @C("char*") Addressable pch, @C("LONG") int cch) {
        try {
            return (int)cfapi_h$constants$42.mmioWrite$MH().invokeExact(hmmio.address(), pch.address(), cch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioSeek$MH() {
        return cfapi_h$constants$42.mmioSeek$MH();
    }
    public static @C("LONG") int mmioSeek (@C("HMMIO") Addressable hmmio, @C("LONG") int lOffset, @C("int") int iOrigin) {
        try {
            return (int)cfapi_h$constants$42.mmioSeek$MH().invokeExact(hmmio.address(), lOffset, iOrigin);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioGetInfo$MH() {
        return cfapi_h$constants$42.mmioGetInfo$MH();
    }
    public static @C("MMRESULT") int mmioGetInfo (@C("HMMIO") Addressable hmmio, @C("LPMMIOINFO") Addressable pmmioinfo, @C("UINT") int fuInfo) {
        try {
            return (int)cfapi_h$constants$42.mmioGetInfo$MH().invokeExact(hmmio.address(), pmmioinfo.address(), fuInfo);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioSetInfo$MH() {
        return cfapi_h$constants$42.mmioSetInfo$MH();
    }
    public static @C("MMRESULT") int mmioSetInfo (@C("HMMIO") Addressable hmmio, @C("LPCMMIOINFO") Addressable pmmioinfo, @C("UINT") int fuInfo) {
        try {
            return (int)cfapi_h$constants$42.mmioSetInfo$MH().invokeExact(hmmio.address(), pmmioinfo.address(), fuInfo);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioSetBuffer$MH() {
        return cfapi_h$constants$42.mmioSetBuffer$MH();
    }
    public static @C("MMRESULT") int mmioSetBuffer (@C("HMMIO") Addressable hmmio, @C("LPSTR") Addressable pchBuffer, @C("LONG") int cchBuffer, @C("UINT") int fuBuffer) {
        try {
            return (int)cfapi_h$constants$42.mmioSetBuffer$MH().invokeExact(hmmio.address(), pchBuffer.address(), cchBuffer, fuBuffer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioFlush$MH() {
        return cfapi_h$constants$42.mmioFlush$MH();
    }
    public static @C("MMRESULT") int mmioFlush (@C("HMMIO") Addressable hmmio, @C("UINT") int fuFlush) {
        try {
            return (int)cfapi_h$constants$42.mmioFlush$MH().invokeExact(hmmio.address(), fuFlush);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioAdvance$MH() {
        return cfapi_h$constants$42.mmioAdvance$MH();
    }
    public static @C("MMRESULT") int mmioAdvance (@C("HMMIO") Addressable hmmio, @C("LPMMIOINFO") Addressable pmmioinfo, @C("UINT") int fuAdvance) {
        try {
            return (int)cfapi_h$constants$42.mmioAdvance$MH().invokeExact(hmmio.address(), pmmioinfo.address(), fuAdvance);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioSendMessage$MH() {
        return cfapi_h$constants$42.mmioSendMessage$MH();
    }
    public static @C("LRESULT") long mmioSendMessage (@C("HMMIO") Addressable hmmio, @C("UINT") int uMsg, @C("LPARAM") long lParam1, @C("LPARAM") long lParam2) {
        try {
            return (long)cfapi_h$constants$42.mmioSendMessage$MH().invokeExact(hmmio.address(), uMsg, lParam1, lParam2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioDescend$MH() {
        return cfapi_h$constants$42.mmioDescend$MH();
    }
    public static @C("MMRESULT") int mmioDescend (@C("HMMIO") Addressable hmmio, @C("LPMMCKINFO") Addressable pmmcki, @C("const MMCKINFO*") Addressable pmmckiParent, @C("UINT") int fuDescend) {
        try {
            return (int)cfapi_h$constants$42.mmioDescend$MH().invokeExact(hmmio.address(), pmmcki.address(), pmmckiParent.address(), fuDescend);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioAscend$MH() {
        return cfapi_h$constants$42.mmioAscend$MH();
    }
    public static @C("MMRESULT") int mmioAscend (@C("HMMIO") Addressable hmmio, @C("LPMMCKINFO") Addressable pmmcki, @C("UINT") int fuAscend) {
        try {
            return (int)cfapi_h$constants$42.mmioAscend$MH().invokeExact(hmmio.address(), pmmcki.address(), fuAscend);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mmioCreateChunk$MH() {
        return cfapi_h$constants$42.mmioCreateChunk$MH();
    }
    public static @C("MMRESULT") int mmioCreateChunk (@C("HMMIO") Addressable hmmio, @C("LPMMCKINFO") Addressable pmmcki, @C("UINT") int fuCreate) {
        try {
            return (int)cfapi_h$constants$42.mmioCreateChunk$MH().invokeExact(hmmio.address(), pmmcki.address(), fuCreate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle timeSetEvent$MH() {
        return cfapi_h$constants$43.timeSetEvent$MH();
    }
    public static @C("MMRESULT") int timeSetEvent (@C("UINT") int uDelay, @C("UINT") int uResolution, @C("LPTIMECALLBACK") Addressable fptc, @C("DWORD_PTR") long dwUser, @C("UINT") int fuEvent) {
        try {
            return (int)cfapi_h$constants$43.timeSetEvent$MH().invokeExact(uDelay, uResolution, fptc.address(), dwUser, fuEvent);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle timeKillEvent$MH() {
        return cfapi_h$constants$43.timeKillEvent$MH();
    }
    public static @C("MMRESULT") int timeKillEvent (@C("UINT") int uTimerID) {
        try {
            return (int)cfapi_h$constants$43.timeKillEvent$MH().invokeExact(uTimerID);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle sndPlaySoundA$MH() {
        return cfapi_h$constants$43.sndPlaySoundA$MH();
    }
    public static @C("BOOL") int sndPlaySoundA (@C("LPCSTR") Addressable pszSound, @C("UINT") int fuSound) {
        try {
            return (int)cfapi_h$constants$43.sndPlaySoundA$MH().invokeExact(pszSound.address(), fuSound);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle sndPlaySoundW$MH() {
        return cfapi_h$constants$43.sndPlaySoundW$MH();
    }
    public static @C("BOOL") int sndPlaySoundW (@C("LPCWSTR") Addressable pszSound, @C("UINT") int fuSound) {
        try {
            return (int)cfapi_h$constants$43.sndPlaySoundW$MH().invokeExact(pszSound.address(), fuSound);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PlaySoundA$MH() {
        return cfapi_h$constants$43.PlaySoundA$MH();
    }
    public static @C("BOOL") int PlaySoundA (@C("LPCSTR") Addressable pszSound, @C("HMODULE") Addressable hmod, @C("DWORD") int fdwSound) {
        try {
            return (int)cfapi_h$constants$43.PlaySoundA$MH().invokeExact(pszSound.address(), hmod.address(), fdwSound);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PlaySoundW$MH() {
        return cfapi_h$constants$43.PlaySoundW$MH();
    }
    public static @C("BOOL") int PlaySoundW (@C("LPCWSTR") Addressable pszSound, @C("HMODULE") Addressable hmod, @C("DWORD") int fdwSound) {
        try {
            return (int)cfapi_h$constants$43.PlaySoundW$MH().invokeExact(pszSound.address(), hmod.address(), fdwSound);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetNumDevs$MH() {
        return cfapi_h$constants$43.waveOutGetNumDevs$MH();
    }
    public static @C("UINT") int waveOutGetNumDevs () {
        try {
            return (int)cfapi_h$constants$43.waveOutGetNumDevs$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetDevCapsA$MH() {
        return cfapi_h$constants$43.waveOutGetDevCapsA$MH();
    }
    public static @C("MMRESULT") int waveOutGetDevCapsA (@C("UINT_PTR") long uDeviceID, @C("LPWAVEOUTCAPSA") Addressable pwoc, @C("UINT") int cbwoc) {
        try {
            return (int)cfapi_h$constants$43.waveOutGetDevCapsA$MH().invokeExact(uDeviceID, pwoc.address(), cbwoc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetDevCapsW$MH() {
        return cfapi_h$constants$43.waveOutGetDevCapsW$MH();
    }
    public static @C("MMRESULT") int waveOutGetDevCapsW (@C("UINT_PTR") long uDeviceID, @C("LPWAVEOUTCAPSW") Addressable pwoc, @C("UINT") int cbwoc) {
        try {
            return (int)cfapi_h$constants$43.waveOutGetDevCapsW$MH().invokeExact(uDeviceID, pwoc.address(), cbwoc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetVolume$MH() {
        return cfapi_h$constants$43.waveOutGetVolume$MH();
    }
    public static @C("MMRESULT") int waveOutGetVolume (@C("HWAVEOUT") Addressable hwo, @C("LPDWORD") Addressable pdwVolume) {
        try {
            return (int)cfapi_h$constants$43.waveOutGetVolume$MH().invokeExact(hwo.address(), pdwVolume.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutSetVolume$MH() {
        return cfapi_h$constants$43.waveOutSetVolume$MH();
    }
    public static @C("MMRESULT") int waveOutSetVolume (@C("HWAVEOUT") Addressable hwo, @C("DWORD") int dwVolume) {
        try {
            return (int)cfapi_h$constants$43.waveOutSetVolume$MH().invokeExact(hwo.address(), dwVolume);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetErrorTextA$MH() {
        return cfapi_h$constants$43.waveOutGetErrorTextA$MH();
    }
    public static @C("MMRESULT") int waveOutGetErrorTextA (@C("MMRESULT") int mmrError, @C("LPSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$43.waveOutGetErrorTextA$MH().invokeExact(mmrError, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetErrorTextW$MH() {
        return cfapi_h$constants$43.waveOutGetErrorTextW$MH();
    }
    public static @C("MMRESULT") int waveOutGetErrorTextW (@C("MMRESULT") int mmrError, @C("LPWSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$43.waveOutGetErrorTextW$MH().invokeExact(mmrError, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutOpen$MH() {
        return cfapi_h$constants$43.waveOutOpen$MH();
    }
    public static @C("MMRESULT") int waveOutOpen (@C("LPHWAVEOUT") Addressable phwo, @C("UINT") int uDeviceID, @C("LPCWAVEFORMATEX") Addressable pwfx, @C("DWORD_PTR") long dwCallback, @C("DWORD_PTR") long dwInstance, @C("DWORD") int fdwOpen) {
        try {
            return (int)cfapi_h$constants$43.waveOutOpen$MH().invokeExact(phwo.address(), uDeviceID, pwfx.address(), dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutClose$MH() {
        return cfapi_h$constants$43.waveOutClose$MH();
    }
    public static @C("MMRESULT") int waveOutClose (@C("HWAVEOUT") Addressable hwo) {
        try {
            return (int)cfapi_h$constants$43.waveOutClose$MH().invokeExact(hwo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutPrepareHeader$MH() {
        return cfapi_h$constants$43.waveOutPrepareHeader$MH();
    }
    public static @C("MMRESULT") int waveOutPrepareHeader (@C("HWAVEOUT") Addressable hwo, @C("LPWAVEHDR") Addressable pwh, @C("UINT") int cbwh) {
        try {
            return (int)cfapi_h$constants$43.waveOutPrepareHeader$MH().invokeExact(hwo.address(), pwh.address(), cbwh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutUnprepareHeader$MH() {
        return cfapi_h$constants$43.waveOutUnprepareHeader$MH();
    }
    public static @C("MMRESULT") int waveOutUnprepareHeader (@C("HWAVEOUT") Addressable hwo, @C("LPWAVEHDR") Addressable pwh, @C("UINT") int cbwh) {
        try {
            return (int)cfapi_h$constants$43.waveOutUnprepareHeader$MH().invokeExact(hwo.address(), pwh.address(), cbwh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutWrite$MH() {
        return cfapi_h$constants$43.waveOutWrite$MH();
    }
    public static @C("MMRESULT") int waveOutWrite (@C("HWAVEOUT") Addressable hwo, @C("LPWAVEHDR") Addressable pwh, @C("UINT") int cbwh) {
        try {
            return (int)cfapi_h$constants$43.waveOutWrite$MH().invokeExact(hwo.address(), pwh.address(), cbwh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutPause$MH() {
        return cfapi_h$constants$43.waveOutPause$MH();
    }
    public static @C("MMRESULT") int waveOutPause (@C("HWAVEOUT") Addressable hwo) {
        try {
            return (int)cfapi_h$constants$43.waveOutPause$MH().invokeExact(hwo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutRestart$MH() {
        return cfapi_h$constants$43.waveOutRestart$MH();
    }
    public static @C("MMRESULT") int waveOutRestart (@C("HWAVEOUT") Addressable hwo) {
        try {
            return (int)cfapi_h$constants$43.waveOutRestart$MH().invokeExact(hwo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutReset$MH() {
        return cfapi_h$constants$43.waveOutReset$MH();
    }
    public static @C("MMRESULT") int waveOutReset (@C("HWAVEOUT") Addressable hwo) {
        try {
            return (int)cfapi_h$constants$43.waveOutReset$MH().invokeExact(hwo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutBreakLoop$MH() {
        return cfapi_h$constants$43.waveOutBreakLoop$MH();
    }
    public static @C("MMRESULT") int waveOutBreakLoop (@C("HWAVEOUT") Addressable hwo) {
        try {
            return (int)cfapi_h$constants$43.waveOutBreakLoop$MH().invokeExact(hwo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetPosition$MH() {
        return cfapi_h$constants$43.waveOutGetPosition$MH();
    }
    public static @C("MMRESULT") int waveOutGetPosition (@C("HWAVEOUT") Addressable hwo, @C("LPMMTIME") Addressable pmmt, @C("UINT") int cbmmt) {
        try {
            return (int)cfapi_h$constants$43.waveOutGetPosition$MH().invokeExact(hwo.address(), pmmt.address(), cbmmt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetPitch$MH() {
        return cfapi_h$constants$43.waveOutGetPitch$MH();
    }
    public static @C("MMRESULT") int waveOutGetPitch (@C("HWAVEOUT") Addressable hwo, @C("LPDWORD") Addressable pdwPitch) {
        try {
            return (int)cfapi_h$constants$43.waveOutGetPitch$MH().invokeExact(hwo.address(), pdwPitch.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutSetPitch$MH() {
        return cfapi_h$constants$43.waveOutSetPitch$MH();
    }
    public static @C("MMRESULT") int waveOutSetPitch (@C("HWAVEOUT") Addressable hwo, @C("DWORD") int dwPitch) {
        try {
            return (int)cfapi_h$constants$43.waveOutSetPitch$MH().invokeExact(hwo.address(), dwPitch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetPlaybackRate$MH() {
        return cfapi_h$constants$43.waveOutGetPlaybackRate$MH();
    }
    public static @C("MMRESULT") int waveOutGetPlaybackRate (@C("HWAVEOUT") Addressable hwo, @C("LPDWORD") Addressable pdwRate) {
        try {
            return (int)cfapi_h$constants$43.waveOutGetPlaybackRate$MH().invokeExact(hwo.address(), pdwRate.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutSetPlaybackRate$MH() {
        return cfapi_h$constants$43.waveOutSetPlaybackRate$MH();
    }
    public static @C("MMRESULT") int waveOutSetPlaybackRate (@C("HWAVEOUT") Addressable hwo, @C("DWORD") int dwRate) {
        try {
            return (int)cfapi_h$constants$43.waveOutSetPlaybackRate$MH().invokeExact(hwo.address(), dwRate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutGetID$MH() {
        return cfapi_h$constants$43.waveOutGetID$MH();
    }
    public static @C("MMRESULT") int waveOutGetID (@C("HWAVEOUT") Addressable hwo, @C("LPUINT") Addressable puDeviceID) {
        try {
            return (int)cfapi_h$constants$43.waveOutGetID$MH().invokeExact(hwo.address(), puDeviceID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveOutMessage$MH() {
        return cfapi_h$constants$43.waveOutMessage$MH();
    }
    public static @C("MMRESULT") int waveOutMessage (@C("HWAVEOUT") Addressable hwo, @C("UINT") int uMsg, @C("DWORD_PTR") long dw1, @C("DWORD_PTR") long dw2) {
        try {
            return (int)cfapi_h$constants$43.waveOutMessage$MH().invokeExact(hwo.address(), uMsg, dw1, dw2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInGetNumDevs$MH() {
        return cfapi_h$constants$43.waveInGetNumDevs$MH();
    }
    public static @C("UINT") int waveInGetNumDevs () {
        try {
            return (int)cfapi_h$constants$43.waveInGetNumDevs$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInGetDevCapsA$MH() {
        return cfapi_h$constants$43.waveInGetDevCapsA$MH();
    }
    public static @C("MMRESULT") int waveInGetDevCapsA (@C("UINT_PTR") long uDeviceID, @C("LPWAVEINCAPSA") Addressable pwic, @C("UINT") int cbwic) {
        try {
            return (int)cfapi_h$constants$43.waveInGetDevCapsA$MH().invokeExact(uDeviceID, pwic.address(), cbwic);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInGetDevCapsW$MH() {
        return cfapi_h$constants$43.waveInGetDevCapsW$MH();
    }
    public static @C("MMRESULT") int waveInGetDevCapsW (@C("UINT_PTR") long uDeviceID, @C("LPWAVEINCAPSW") Addressable pwic, @C("UINT") int cbwic) {
        try {
            return (int)cfapi_h$constants$43.waveInGetDevCapsW$MH().invokeExact(uDeviceID, pwic.address(), cbwic);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInGetErrorTextA$MH() {
        return cfapi_h$constants$43.waveInGetErrorTextA$MH();
    }
    public static @C("MMRESULT") int waveInGetErrorTextA (@C("MMRESULT") int mmrError, @C("LPSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$43.waveInGetErrorTextA$MH().invokeExact(mmrError, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInGetErrorTextW$MH() {
        return cfapi_h$constants$43.waveInGetErrorTextW$MH();
    }
    public static @C("MMRESULT") int waveInGetErrorTextW (@C("MMRESULT") int mmrError, @C("LPWSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$43.waveInGetErrorTextW$MH().invokeExact(mmrError, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInOpen$MH() {
        return cfapi_h$constants$43.waveInOpen$MH();
    }
    public static @C("MMRESULT") int waveInOpen (@C("LPHWAVEIN") Addressable phwi, @C("UINT") int uDeviceID, @C("LPCWAVEFORMATEX") Addressable pwfx, @C("DWORD_PTR") long dwCallback, @C("DWORD_PTR") long dwInstance, @C("DWORD") int fdwOpen) {
        try {
            return (int)cfapi_h$constants$43.waveInOpen$MH().invokeExact(phwi.address(), uDeviceID, pwfx.address(), dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInClose$MH() {
        return cfapi_h$constants$43.waveInClose$MH();
    }
    public static @C("MMRESULT") int waveInClose (@C("HWAVEIN") Addressable hwi) {
        try {
            return (int)cfapi_h$constants$43.waveInClose$MH().invokeExact(hwi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInPrepareHeader$MH() {
        return cfapi_h$constants$43.waveInPrepareHeader$MH();
    }
    public static @C("MMRESULT") int waveInPrepareHeader (@C("HWAVEIN") Addressable hwi, @C("LPWAVEHDR") Addressable pwh, @C("UINT") int cbwh) {
        try {
            return (int)cfapi_h$constants$43.waveInPrepareHeader$MH().invokeExact(hwi.address(), pwh.address(), cbwh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInUnprepareHeader$MH() {
        return cfapi_h$constants$43.waveInUnprepareHeader$MH();
    }
    public static @C("MMRESULT") int waveInUnprepareHeader (@C("HWAVEIN") Addressable hwi, @C("LPWAVEHDR") Addressable pwh, @C("UINT") int cbwh) {
        try {
            return (int)cfapi_h$constants$43.waveInUnprepareHeader$MH().invokeExact(hwi.address(), pwh.address(), cbwh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInAddBuffer$MH() {
        return cfapi_h$constants$43.waveInAddBuffer$MH();
    }
    public static @C("MMRESULT") int waveInAddBuffer (@C("HWAVEIN") Addressable hwi, @C("LPWAVEHDR") Addressable pwh, @C("UINT") int cbwh) {
        try {
            return (int)cfapi_h$constants$43.waveInAddBuffer$MH().invokeExact(hwi.address(), pwh.address(), cbwh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInStart$MH() {
        return cfapi_h$constants$43.waveInStart$MH();
    }
    public static @C("MMRESULT") int waveInStart (@C("HWAVEIN") Addressable hwi) {
        try {
            return (int)cfapi_h$constants$43.waveInStart$MH().invokeExact(hwi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInStop$MH() {
        return cfapi_h$constants$43.waveInStop$MH();
    }
    public static @C("MMRESULT") int waveInStop (@C("HWAVEIN") Addressable hwi) {
        try {
            return (int)cfapi_h$constants$43.waveInStop$MH().invokeExact(hwi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInReset$MH() {
        return cfapi_h$constants$43.waveInReset$MH();
    }
    public static @C("MMRESULT") int waveInReset (@C("HWAVEIN") Addressable hwi) {
        try {
            return (int)cfapi_h$constants$43.waveInReset$MH().invokeExact(hwi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInGetPosition$MH() {
        return cfapi_h$constants$43.waveInGetPosition$MH();
    }
    public static @C("MMRESULT") int waveInGetPosition (@C("HWAVEIN") Addressable hwi, @C("LPMMTIME") Addressable pmmt, @C("UINT") int cbmmt) {
        try {
            return (int)cfapi_h$constants$43.waveInGetPosition$MH().invokeExact(hwi.address(), pmmt.address(), cbmmt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInGetID$MH() {
        return cfapi_h$constants$43.waveInGetID$MH();
    }
    public static @C("MMRESULT") int waveInGetID (@C("HWAVEIN") Addressable hwi, @C("LPUINT") Addressable puDeviceID) {
        try {
            return (int)cfapi_h$constants$43.waveInGetID$MH().invokeExact(hwi.address(), puDeviceID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle waveInMessage$MH() {
        return cfapi_h$constants$43.waveInMessage$MH();
    }
    public static @C("MMRESULT") int waveInMessage (@C("HWAVEIN") Addressable hwi, @C("UINT") int uMsg, @C("DWORD_PTR") long dw1, @C("DWORD_PTR") long dw2) {
        try {
            return (int)cfapi_h$constants$43.waveInMessage$MH().invokeExact(hwi.address(), uMsg, dw1, dw2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutGetNumDevs$MH() {
        return cfapi_h$constants$43.midiOutGetNumDevs$MH();
    }
    public static @C("UINT") int midiOutGetNumDevs () {
        try {
            return (int)cfapi_h$constants$43.midiOutGetNumDevs$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiStreamOpen$MH() {
        return cfapi_h$constants$43.midiStreamOpen$MH();
    }
    public static @C("MMRESULT") int midiStreamOpen (@C("LPHMIDISTRM") Addressable phms, @C("LPUINT") Addressable puDeviceID, @C("DWORD") int cMidi, @C("DWORD_PTR") long dwCallback, @C("DWORD_PTR") long dwInstance, @C("DWORD") int fdwOpen) {
        try {
            return (int)cfapi_h$constants$43.midiStreamOpen$MH().invokeExact(phms.address(), puDeviceID.address(), cMidi, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiStreamClose$MH() {
        return cfapi_h$constants$43.midiStreamClose$MH();
    }
    public static @C("MMRESULT") int midiStreamClose (@C("HMIDISTRM") Addressable hms) {
        try {
            return (int)cfapi_h$constants$43.midiStreamClose$MH().invokeExact(hms.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiStreamProperty$MH() {
        return cfapi_h$constants$43.midiStreamProperty$MH();
    }
    public static @C("MMRESULT") int midiStreamProperty (@C("HMIDISTRM") Addressable hms, @C("LPBYTE") Addressable lppropdata, @C("DWORD") int dwProperty) {
        try {
            return (int)cfapi_h$constants$43.midiStreamProperty$MH().invokeExact(hms.address(), lppropdata.address(), dwProperty);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiStreamPosition$MH() {
        return cfapi_h$constants$43.midiStreamPosition$MH();
    }
    public static @C("MMRESULT") int midiStreamPosition (@C("HMIDISTRM") Addressable hms, @C("LPMMTIME") Addressable lpmmt, @C("UINT") int cbmmt) {
        try {
            return (int)cfapi_h$constants$43.midiStreamPosition$MH().invokeExact(hms.address(), lpmmt.address(), cbmmt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiStreamOut$MH() {
        return cfapi_h$constants$43.midiStreamOut$MH();
    }
    public static @C("MMRESULT") int midiStreamOut (@C("HMIDISTRM") Addressable hms, @C("LPMIDIHDR") Addressable pmh, @C("UINT") int cbmh) {
        try {
            return (int)cfapi_h$constants$43.midiStreamOut$MH().invokeExact(hms.address(), pmh.address(), cbmh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiStreamPause$MH() {
        return cfapi_h$constants$43.midiStreamPause$MH();
    }
    public static @C("MMRESULT") int midiStreamPause (@C("HMIDISTRM") Addressable hms) {
        try {
            return (int)cfapi_h$constants$43.midiStreamPause$MH().invokeExact(hms.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiStreamRestart$MH() {
        return cfapi_h$constants$43.midiStreamRestart$MH();
    }
    public static @C("MMRESULT") int midiStreamRestart (@C("HMIDISTRM") Addressable hms) {
        try {
            return (int)cfapi_h$constants$43.midiStreamRestart$MH().invokeExact(hms.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiStreamStop$MH() {
        return cfapi_h$constants$43.midiStreamStop$MH();
    }
    public static @C("MMRESULT") int midiStreamStop (@C("HMIDISTRM") Addressable hms) {
        try {
            return (int)cfapi_h$constants$43.midiStreamStop$MH().invokeExact(hms.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiConnect$MH() {
        return cfapi_h$constants$43.midiConnect$MH();
    }
    public static @C("MMRESULT") int midiConnect (@C("HMIDI") Addressable hmi, @C("HMIDIOUT") Addressable hmo, @C("LPVOID") Addressable pReserved) {
        try {
            return (int)cfapi_h$constants$43.midiConnect$MH().invokeExact(hmi.address(), hmo.address(), pReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiDisconnect$MH() {
        return cfapi_h$constants$43.midiDisconnect$MH();
    }
    public static @C("MMRESULT") int midiDisconnect (@C("HMIDI") Addressable hmi, @C("HMIDIOUT") Addressable hmo, @C("LPVOID") Addressable pReserved) {
        try {
            return (int)cfapi_h$constants$43.midiDisconnect$MH().invokeExact(hmi.address(), hmo.address(), pReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutGetDevCapsA$MH() {
        return cfapi_h$constants$43.midiOutGetDevCapsA$MH();
    }
    public static @C("MMRESULT") int midiOutGetDevCapsA (@C("UINT_PTR") long uDeviceID, @C("LPMIDIOUTCAPSA") Addressable pmoc, @C("UINT") int cbmoc) {
        try {
            return (int)cfapi_h$constants$43.midiOutGetDevCapsA$MH().invokeExact(uDeviceID, pmoc.address(), cbmoc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutGetDevCapsW$MH() {
        return cfapi_h$constants$43.midiOutGetDevCapsW$MH();
    }
    public static @C("MMRESULT") int midiOutGetDevCapsW (@C("UINT_PTR") long uDeviceID, @C("LPMIDIOUTCAPSW") Addressable pmoc, @C("UINT") int cbmoc) {
        try {
            return (int)cfapi_h$constants$43.midiOutGetDevCapsW$MH().invokeExact(uDeviceID, pmoc.address(), cbmoc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutGetVolume$MH() {
        return cfapi_h$constants$43.midiOutGetVolume$MH();
    }
    public static @C("MMRESULT") int midiOutGetVolume (@C("HMIDIOUT") Addressable hmo, @C("LPDWORD") Addressable pdwVolume) {
        try {
            return (int)cfapi_h$constants$43.midiOutGetVolume$MH().invokeExact(hmo.address(), pdwVolume.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutSetVolume$MH() {
        return cfapi_h$constants$43.midiOutSetVolume$MH();
    }
    public static @C("MMRESULT") int midiOutSetVolume (@C("HMIDIOUT") Addressable hmo, @C("DWORD") int dwVolume) {
        try {
            return (int)cfapi_h$constants$43.midiOutSetVolume$MH().invokeExact(hmo.address(), dwVolume);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutGetErrorTextA$MH() {
        return cfapi_h$constants$43.midiOutGetErrorTextA$MH();
    }
    public static @C("MMRESULT") int midiOutGetErrorTextA (@C("MMRESULT") int mmrError, @C("LPSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$43.midiOutGetErrorTextA$MH().invokeExact(mmrError, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutGetErrorTextW$MH() {
        return cfapi_h$constants$43.midiOutGetErrorTextW$MH();
    }
    public static @C("MMRESULT") int midiOutGetErrorTextW (@C("MMRESULT") int mmrError, @C("LPWSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$43.midiOutGetErrorTextW$MH().invokeExact(mmrError, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutOpen$MH() {
        return cfapi_h$constants$43.midiOutOpen$MH();
    }
    public static @C("MMRESULT") int midiOutOpen (@C("LPHMIDIOUT") Addressable phmo, @C("UINT") int uDeviceID, @C("DWORD_PTR") long dwCallback, @C("DWORD_PTR") long dwInstance, @C("DWORD") int fdwOpen) {
        try {
            return (int)cfapi_h$constants$43.midiOutOpen$MH().invokeExact(phmo.address(), uDeviceID, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutClose$MH() {
        return cfapi_h$constants$43.midiOutClose$MH();
    }
    public static @C("MMRESULT") int midiOutClose (@C("HMIDIOUT") Addressable hmo) {
        try {
            return (int)cfapi_h$constants$43.midiOutClose$MH().invokeExact(hmo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutPrepareHeader$MH() {
        return cfapi_h$constants$43.midiOutPrepareHeader$MH();
    }
    public static @C("MMRESULT") int midiOutPrepareHeader (@C("HMIDIOUT") Addressable hmo, @C("LPMIDIHDR") Addressable pmh, @C("UINT") int cbmh) {
        try {
            return (int)cfapi_h$constants$43.midiOutPrepareHeader$MH().invokeExact(hmo.address(), pmh.address(), cbmh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutUnprepareHeader$MH() {
        return cfapi_h$constants$43.midiOutUnprepareHeader$MH();
    }
    public static @C("MMRESULT") int midiOutUnprepareHeader (@C("HMIDIOUT") Addressable hmo, @C("LPMIDIHDR") Addressable pmh, @C("UINT") int cbmh) {
        try {
            return (int)cfapi_h$constants$43.midiOutUnprepareHeader$MH().invokeExact(hmo.address(), pmh.address(), cbmh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutShortMsg$MH() {
        return cfapi_h$constants$43.midiOutShortMsg$MH();
    }
    public static @C("MMRESULT") int midiOutShortMsg (@C("HMIDIOUT") Addressable hmo, @C("DWORD") int dwMsg) {
        try {
            return (int)cfapi_h$constants$43.midiOutShortMsg$MH().invokeExact(hmo.address(), dwMsg);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutLongMsg$MH() {
        return cfapi_h$constants$43.midiOutLongMsg$MH();
    }
    public static @C("MMRESULT") int midiOutLongMsg (@C("HMIDIOUT") Addressable hmo, @C("LPMIDIHDR") Addressable pmh, @C("UINT") int cbmh) {
        try {
            return (int)cfapi_h$constants$43.midiOutLongMsg$MH().invokeExact(hmo.address(), pmh.address(), cbmh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutReset$MH() {
        return cfapi_h$constants$43.midiOutReset$MH();
    }
    public static @C("MMRESULT") int midiOutReset (@C("HMIDIOUT") Addressable hmo) {
        try {
            return (int)cfapi_h$constants$43.midiOutReset$MH().invokeExact(hmo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutCachePatches$MH() {
        return cfapi_h$constants$43.midiOutCachePatches$MH();
    }
    public static @C("MMRESULT") int midiOutCachePatches (@C("HMIDIOUT") Addressable hmo, @C("UINT") int uBank, @C("LPWORD") Addressable pwpa, @C("UINT") int fuCache) {
        try {
            return (int)cfapi_h$constants$43.midiOutCachePatches$MH().invokeExact(hmo.address(), uBank, pwpa.address(), fuCache);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutCacheDrumPatches$MH() {
        return cfapi_h$constants$43.midiOutCacheDrumPatches$MH();
    }
    public static @C("MMRESULT") int midiOutCacheDrumPatches (@C("HMIDIOUT") Addressable hmo, @C("UINT") int uPatch, @C("LPWORD") Addressable pwkya, @C("UINT") int fuCache) {
        try {
            return (int)cfapi_h$constants$43.midiOutCacheDrumPatches$MH().invokeExact(hmo.address(), uPatch, pwkya.address(), fuCache);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutGetID$MH() {
        return cfapi_h$constants$43.midiOutGetID$MH();
    }
    public static @C("MMRESULT") int midiOutGetID (@C("HMIDIOUT") Addressable hmo, @C("LPUINT") Addressable puDeviceID) {
        try {
            return (int)cfapi_h$constants$43.midiOutGetID$MH().invokeExact(hmo.address(), puDeviceID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiOutMessage$MH() {
        return cfapi_h$constants$43.midiOutMessage$MH();
    }
    public static @C("MMRESULT") int midiOutMessage (@C("HMIDIOUT") Addressable hmo, @C("UINT") int uMsg, @C("DWORD_PTR") long dw1, @C("DWORD_PTR") long dw2) {
        try {
            return (int)cfapi_h$constants$43.midiOutMessage$MH().invokeExact(hmo.address(), uMsg, dw1, dw2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInGetNumDevs$MH() {
        return cfapi_h$constants$43.midiInGetNumDevs$MH();
    }
    public static @C("UINT") int midiInGetNumDevs () {
        try {
            return (int)cfapi_h$constants$43.midiInGetNumDevs$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInGetDevCapsA$MH() {
        return cfapi_h$constants$43.midiInGetDevCapsA$MH();
    }
    public static @C("MMRESULT") int midiInGetDevCapsA (@C("UINT_PTR") long uDeviceID, @C("LPMIDIINCAPSA") Addressable pmic, @C("UINT") int cbmic) {
        try {
            return (int)cfapi_h$constants$43.midiInGetDevCapsA$MH().invokeExact(uDeviceID, pmic.address(), cbmic);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInGetDevCapsW$MH() {
        return cfapi_h$constants$43.midiInGetDevCapsW$MH();
    }
    public static @C("MMRESULT") int midiInGetDevCapsW (@C("UINT_PTR") long uDeviceID, @C("LPMIDIINCAPSW") Addressable pmic, @C("UINT") int cbmic) {
        try {
            return (int)cfapi_h$constants$43.midiInGetDevCapsW$MH().invokeExact(uDeviceID, pmic.address(), cbmic);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInGetErrorTextA$MH() {
        return cfapi_h$constants$43.midiInGetErrorTextA$MH();
    }
    public static @C("MMRESULT") int midiInGetErrorTextA (@C("MMRESULT") int mmrError, @C("LPSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$43.midiInGetErrorTextA$MH().invokeExact(mmrError, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInGetErrorTextW$MH() {
        return cfapi_h$constants$43.midiInGetErrorTextW$MH();
    }
    public static @C("MMRESULT") int midiInGetErrorTextW (@C("MMRESULT") int mmrError, @C("LPWSTR") Addressable pszText, @C("UINT") int cchText) {
        try {
            return (int)cfapi_h$constants$43.midiInGetErrorTextW$MH().invokeExact(mmrError, pszText.address(), cchText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInOpen$MH() {
        return cfapi_h$constants$43.midiInOpen$MH();
    }
    public static @C("MMRESULT") int midiInOpen (@C("LPHMIDIIN") Addressable phmi, @C("UINT") int uDeviceID, @C("DWORD_PTR") long dwCallback, @C("DWORD_PTR") long dwInstance, @C("DWORD") int fdwOpen) {
        try {
            return (int)cfapi_h$constants$43.midiInOpen$MH().invokeExact(phmi.address(), uDeviceID, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInClose$MH() {
        return cfapi_h$constants$43.midiInClose$MH();
    }
    public static @C("MMRESULT") int midiInClose (@C("HMIDIIN") Addressable hmi) {
        try {
            return (int)cfapi_h$constants$43.midiInClose$MH().invokeExact(hmi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInPrepareHeader$MH() {
        return cfapi_h$constants$43.midiInPrepareHeader$MH();
    }
    public static @C("MMRESULT") int midiInPrepareHeader (@C("HMIDIIN") Addressable hmi, @C("LPMIDIHDR") Addressable pmh, @C("UINT") int cbmh) {
        try {
            return (int)cfapi_h$constants$43.midiInPrepareHeader$MH().invokeExact(hmi.address(), pmh.address(), cbmh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInUnprepareHeader$MH() {
        return cfapi_h$constants$43.midiInUnprepareHeader$MH();
    }
    public static @C("MMRESULT") int midiInUnprepareHeader (@C("HMIDIIN") Addressable hmi, @C("LPMIDIHDR") Addressable pmh, @C("UINT") int cbmh) {
        try {
            return (int)cfapi_h$constants$43.midiInUnprepareHeader$MH().invokeExact(hmi.address(), pmh.address(), cbmh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInAddBuffer$MH() {
        return cfapi_h$constants$43.midiInAddBuffer$MH();
    }
    public static @C("MMRESULT") int midiInAddBuffer (@C("HMIDIIN") Addressable hmi, @C("LPMIDIHDR") Addressable pmh, @C("UINT") int cbmh) {
        try {
            return (int)cfapi_h$constants$43.midiInAddBuffer$MH().invokeExact(hmi.address(), pmh.address(), cbmh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInStart$MH() {
        return cfapi_h$constants$43.midiInStart$MH();
    }
    public static @C("MMRESULT") int midiInStart (@C("HMIDIIN") Addressable hmi) {
        try {
            return (int)cfapi_h$constants$43.midiInStart$MH().invokeExact(hmi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInStop$MH() {
        return cfapi_h$constants$43.midiInStop$MH();
    }
    public static @C("MMRESULT") int midiInStop (@C("HMIDIIN") Addressable hmi) {
        try {
            return (int)cfapi_h$constants$43.midiInStop$MH().invokeExact(hmi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInReset$MH() {
        return cfapi_h$constants$43.midiInReset$MH();
    }
    public static @C("MMRESULT") int midiInReset (@C("HMIDIIN") Addressable hmi) {
        try {
            return (int)cfapi_h$constants$43.midiInReset$MH().invokeExact(hmi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInGetID$MH() {
        return cfapi_h$constants$43.midiInGetID$MH();
    }
    public static @C("MMRESULT") int midiInGetID (@C("HMIDIIN") Addressable hmi, @C("LPUINT") Addressable puDeviceID) {
        try {
            return (int)cfapi_h$constants$43.midiInGetID$MH().invokeExact(hmi.address(), puDeviceID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle midiInMessage$MH() {
        return cfapi_h$constants$43.midiInMessage$MH();
    }
    public static @C("MMRESULT") int midiInMessage (@C("HMIDIIN") Addressable hmi, @C("UINT") int uMsg, @C("DWORD_PTR") long dw1, @C("DWORD_PTR") long dw2) {
        try {
            return (int)cfapi_h$constants$43.midiInMessage$MH().invokeExact(hmi.address(), uMsg, dw1, dw2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle auxGetNumDevs$MH() {
        return cfapi_h$constants$44.auxGetNumDevs$MH();
    }
    public static @C("UINT") int auxGetNumDevs () {
        try {
            return (int)cfapi_h$constants$44.auxGetNumDevs$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle auxGetDevCapsA$MH() {
        return cfapi_h$constants$44.auxGetDevCapsA$MH();
    }
    public static @C("MMRESULT") int auxGetDevCapsA (@C("UINT_PTR") long uDeviceID, @C("LPAUXCAPSA") Addressable pac, @C("UINT") int cbac) {
        try {
            return (int)cfapi_h$constants$44.auxGetDevCapsA$MH().invokeExact(uDeviceID, pac.address(), cbac);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle auxGetDevCapsW$MH() {
        return cfapi_h$constants$44.auxGetDevCapsW$MH();
    }
    public static @C("MMRESULT") int auxGetDevCapsW (@C("UINT_PTR") long uDeviceID, @C("LPAUXCAPSW") Addressable pac, @C("UINT") int cbac) {
        try {
            return (int)cfapi_h$constants$44.auxGetDevCapsW$MH().invokeExact(uDeviceID, pac.address(), cbac);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle auxSetVolume$MH() {
        return cfapi_h$constants$44.auxSetVolume$MH();
    }
    public static @C("MMRESULT") int auxSetVolume (@C("UINT") int uDeviceID, @C("DWORD") int dwVolume) {
        try {
            return (int)cfapi_h$constants$44.auxSetVolume$MH().invokeExact(uDeviceID, dwVolume);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle auxGetVolume$MH() {
        return cfapi_h$constants$44.auxGetVolume$MH();
    }
    public static @C("MMRESULT") int auxGetVolume (@C("UINT") int uDeviceID, @C("LPDWORD") Addressable pdwVolume) {
        try {
            return (int)cfapi_h$constants$44.auxGetVolume$MH().invokeExact(uDeviceID, pdwVolume.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle auxOutMessage$MH() {
        return cfapi_h$constants$44.auxOutMessage$MH();
    }
    public static @C("MMRESULT") int auxOutMessage (@C("UINT") int uDeviceID, @C("UINT") int uMsg, @C("DWORD_PTR") long dw1, @C("DWORD_PTR") long dw2) {
        try {
            return (int)cfapi_h$constants$44.auxOutMessage$MH().invokeExact(uDeviceID, uMsg, dw1, dw2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mixerGetNumDevs$MH() {
        return cfapi_h$constants$44.mixerGetNumDevs$MH();
    }
    public static @C("UINT") int mixerGetNumDevs () {
        try {
            return (int)cfapi_h$constants$44.mixerGetNumDevs$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mixerGetDevCapsA$MH() {
        return cfapi_h$constants$44.mixerGetDevCapsA$MH();
    }
    public static @C("MMRESULT") int mixerGetDevCapsA (@C("UINT_PTR") long uMxId, @C("LPMIXERCAPSA") Addressable pmxcaps, @C("UINT") int cbmxcaps) {
        try {
            return (int)cfapi_h$constants$44.mixerGetDevCapsA$MH().invokeExact(uMxId, pmxcaps.address(), cbmxcaps);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mixerGetDevCapsW$MH() {
        return cfapi_h$constants$44.mixerGetDevCapsW$MH();
    }
    public static @C("MMRESULT") int mixerGetDevCapsW (@C("UINT_PTR") long uMxId, @C("LPMIXERCAPSW") Addressable pmxcaps, @C("UINT") int cbmxcaps) {
        try {
            return (int)cfapi_h$constants$44.mixerGetDevCapsW$MH().invokeExact(uMxId, pmxcaps.address(), cbmxcaps);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mixerOpen$MH() {
        return cfapi_h$constants$44.mixerOpen$MH();
    }
    public static @C("MMRESULT") int mixerOpen (@C("LPHMIXER") Addressable phmx, @C("UINT") int uMxId, @C("DWORD_PTR") long dwCallback, @C("DWORD_PTR") long dwInstance, @C("DWORD") int fdwOpen) {
        try {
            return (int)cfapi_h$constants$44.mixerOpen$MH().invokeExact(phmx.address(), uMxId, dwCallback, dwInstance, fdwOpen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mixerClose$MH() {
        return cfapi_h$constants$44.mixerClose$MH();
    }
    public static @C("MMRESULT") int mixerClose (@C("HMIXER") Addressable hmx) {
        try {
            return (int)cfapi_h$constants$44.mixerClose$MH().invokeExact(hmx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mixerMessage$MH() {
        return cfapi_h$constants$44.mixerMessage$MH();
    }
    public static @C("DWORD") int mixerMessage (@C("HMIXER") Addressable hmx, @C("UINT") int uMsg, @C("DWORD_PTR") long dwParam1, @C("DWORD_PTR") long dwParam2) {
        try {
            return (int)cfapi_h$constants$44.mixerMessage$MH().invokeExact(hmx.address(), uMsg, dwParam1, dwParam2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mixerGetLineInfoA$MH() {
        return cfapi_h$constants$44.mixerGetLineInfoA$MH();
    }
    public static @C("MMRESULT") int mixerGetLineInfoA (@C("HMIXEROBJ") Addressable hmxobj, @C("LPMIXERLINEA") Addressable pmxl, @C("DWORD") int fdwInfo) {
        try {
            return (int)cfapi_h$constants$44.mixerGetLineInfoA$MH().invokeExact(hmxobj.address(), pmxl.address(), fdwInfo);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mixerGetLineInfoW$MH() {
        return cfapi_h$constants$44.mixerGetLineInfoW$MH();
    }
}


