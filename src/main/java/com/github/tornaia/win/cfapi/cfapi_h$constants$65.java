// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$65 extends cfapi_h$constants$64 {

    /* package-private */ cfapi_h$constants$65() {}
    static final MemoryLayout Mft2WritesUserLevel$Write$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout Mft2WritesUserLevel$Write$LAYOUT() { return Mft2WritesUserLevel$Write$LAYOUT_; }

    static final VarHandle Mft2WritesUserLevel$Write$VH_ = Mft2WritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Write"));
    static final java.lang.invoke.VarHandle Mft2WritesUserLevel$Write$VH() { return Mft2WritesUserLevel$Write$VH_; }

    static final MemoryLayout Mft2WritesUserLevel$Create$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout Mft2WritesUserLevel$Create$LAYOUT() { return Mft2WritesUserLevel$Create$LAYOUT_; }

    static final VarHandle Mft2WritesUserLevel$Create$VH_ = Mft2WritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Create"));
    static final java.lang.invoke.VarHandle Mft2WritesUserLevel$Create$VH() { return Mft2WritesUserLevel$Create$VH_; }

    static final MemoryLayout Mft2WritesUserLevel$SetInfo$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout Mft2WritesUserLevel$SetInfo$LAYOUT() { return Mft2WritesUserLevel$SetInfo$LAYOUT_; }

    static final VarHandle Mft2WritesUserLevel$SetInfo$VH_ = Mft2WritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SetInfo"));
    static final java.lang.invoke.VarHandle Mft2WritesUserLevel$SetInfo$VH() { return Mft2WritesUserLevel$SetInfo$VH_; }

    static final MemoryLayout Mft2WritesUserLevel$Flush$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout Mft2WritesUserLevel$Flush$LAYOUT() { return Mft2WritesUserLevel$Flush$LAYOUT_; }

    static final VarHandle Mft2WritesUserLevel$Flush$VH_ = Mft2WritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flush"));
    static final java.lang.invoke.VarHandle Mft2WritesUserLevel$Flush$VH() { return Mft2WritesUserLevel$Flush$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$Mft2WritesFlushForLogFileFull$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$Mft2WritesFlushForLogFileFull$LAYOUT() { return _NTFS_STATISTICS$Mft2WritesFlushForLogFileFull$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$Mft2WritesFlushForLogFileFull$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Mft2WritesFlushForLogFileFull"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$Mft2WritesFlushForLogFileFull$VH() { return _NTFS_STATISTICS$Mft2WritesFlushForLogFileFull$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$Mft2WritesLazyWriter$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$Mft2WritesLazyWriter$LAYOUT() { return _NTFS_STATISTICS$Mft2WritesLazyWriter$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$Mft2WritesLazyWriter$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Mft2WritesLazyWriter"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$Mft2WritesLazyWriter$VH() { return _NTFS_STATISTICS$Mft2WritesLazyWriter$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$Mft2WritesUserRequest$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$Mft2WritesUserRequest$LAYOUT() { return _NTFS_STATISTICS$Mft2WritesUserRequest$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$Mft2WritesUserRequest$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Mft2WritesUserRequest"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$Mft2WritesUserRequest$VH() { return _NTFS_STATISTICS$Mft2WritesUserRequest$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$RootIndexReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$RootIndexReads$LAYOUT() { return _NTFS_STATISTICS$RootIndexReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$RootIndexReads$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RootIndexReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$RootIndexReads$VH() { return _NTFS_STATISTICS$RootIndexReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$RootIndexReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$RootIndexReadBytes$LAYOUT() { return _NTFS_STATISTICS$RootIndexReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$RootIndexReadBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RootIndexReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$RootIndexReadBytes$VH() { return _NTFS_STATISTICS$RootIndexReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$RootIndexWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$RootIndexWrites$LAYOUT() { return _NTFS_STATISTICS$RootIndexWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$RootIndexWrites$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RootIndexWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$RootIndexWrites$VH() { return _NTFS_STATISTICS$RootIndexWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$RootIndexWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$RootIndexWriteBytes$LAYOUT() { return _NTFS_STATISTICS$RootIndexWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$RootIndexWriteBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RootIndexWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$RootIndexWriteBytes$VH() { return _NTFS_STATISTICS$RootIndexWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$BitmapReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$BitmapReads$LAYOUT() { return _NTFS_STATISTICS$BitmapReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$BitmapReads$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BitmapReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$BitmapReads$VH() { return _NTFS_STATISTICS$BitmapReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$BitmapReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$BitmapReadBytes$LAYOUT() { return _NTFS_STATISTICS$BitmapReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$BitmapReadBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BitmapReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$BitmapReadBytes$VH() { return _NTFS_STATISTICS$BitmapReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$BitmapWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$BitmapWrites$LAYOUT() { return _NTFS_STATISTICS$BitmapWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$BitmapWrites$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BitmapWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$BitmapWrites$VH() { return _NTFS_STATISTICS$BitmapWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$BitmapWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$BitmapWriteBytes$LAYOUT() { return _NTFS_STATISTICS$BitmapWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$BitmapWriteBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BitmapWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$BitmapWriteBytes$VH() { return _NTFS_STATISTICS$BitmapWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$BitmapWritesFlushForLogFileFull$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$BitmapWritesFlushForLogFileFull$LAYOUT() { return _NTFS_STATISTICS$BitmapWritesFlushForLogFileFull$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$BitmapWritesFlushForLogFileFull$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("BitmapWritesFlushForLogFileFull"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$BitmapWritesFlushForLogFileFull$VH() { return _NTFS_STATISTICS$BitmapWritesFlushForLogFileFull$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$BitmapWritesLazyWriter$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$BitmapWritesLazyWriter$LAYOUT() { return _NTFS_STATISTICS$BitmapWritesLazyWriter$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$BitmapWritesLazyWriter$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("BitmapWritesLazyWriter"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$BitmapWritesLazyWriter$VH() { return _NTFS_STATISTICS$BitmapWritesLazyWriter$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$BitmapWritesUserRequest$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$BitmapWritesUserRequest$LAYOUT() { return _NTFS_STATISTICS$BitmapWritesUserRequest$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$BitmapWritesUserRequest$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("BitmapWritesUserRequest"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$BitmapWritesUserRequest$VH() { return _NTFS_STATISTICS$BitmapWritesUserRequest$VH_; }

    static final MemoryLayout BitmapWritesUserLevel$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Write"),
        C_SHORT.withName("Create"),
        C_SHORT.withName("SetInfo")
    );
    static final jdk.incubator.foreign.MemoryLayout BitmapWritesUserLevel$struct$LAYOUT() { return BitmapWritesUserLevel$struct$LAYOUT_; }

    static final MemoryLayout BitmapWritesUserLevel$Write$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout BitmapWritesUserLevel$Write$LAYOUT() { return BitmapWritesUserLevel$Write$LAYOUT_; }

    static final VarHandle BitmapWritesUserLevel$Write$VH_ = BitmapWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Write"));
    static final java.lang.invoke.VarHandle BitmapWritesUserLevel$Write$VH() { return BitmapWritesUserLevel$Write$VH_; }

    static final MemoryLayout BitmapWritesUserLevel$Create$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout BitmapWritesUserLevel$Create$LAYOUT() { return BitmapWritesUserLevel$Create$LAYOUT_; }

    static final VarHandle BitmapWritesUserLevel$Create$VH_ = BitmapWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Create"));
    static final java.lang.invoke.VarHandle BitmapWritesUserLevel$Create$VH() { return BitmapWritesUserLevel$Create$VH_; }

    static final MemoryLayout BitmapWritesUserLevel$SetInfo$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout BitmapWritesUserLevel$SetInfo$LAYOUT() { return BitmapWritesUserLevel$SetInfo$LAYOUT_; }

    static final VarHandle BitmapWritesUserLevel$SetInfo$VH_ = BitmapWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SetInfo"));
    static final java.lang.invoke.VarHandle BitmapWritesUserLevel$SetInfo$VH() { return BitmapWritesUserLevel$SetInfo$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftBitmapReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftBitmapReads$LAYOUT() { return _NTFS_STATISTICS$MftBitmapReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftBitmapReads$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftBitmapReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftBitmapReads$VH() { return _NTFS_STATISTICS$MftBitmapReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftBitmapReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftBitmapReadBytes$LAYOUT() { return _NTFS_STATISTICS$MftBitmapReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftBitmapReadBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftBitmapReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftBitmapReadBytes$VH() { return _NTFS_STATISTICS$MftBitmapReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftBitmapWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftBitmapWrites$LAYOUT() { return _NTFS_STATISTICS$MftBitmapWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftBitmapWrites$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftBitmapWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftBitmapWrites$VH() { return _NTFS_STATISTICS$MftBitmapWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftBitmapWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftBitmapWriteBytes$LAYOUT() { return _NTFS_STATISTICS$MftBitmapWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftBitmapWriteBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftBitmapWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftBitmapWriteBytes$VH() { return _NTFS_STATISTICS$MftBitmapWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftBitmapWritesFlushForLogFileFull$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftBitmapWritesFlushForLogFileFull$LAYOUT() { return _NTFS_STATISTICS$MftBitmapWritesFlushForLogFileFull$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftBitmapWritesFlushForLogFileFull$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MftBitmapWritesFlushForLogFileFull"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftBitmapWritesFlushForLogFileFull$VH() { return _NTFS_STATISTICS$MftBitmapWritesFlushForLogFileFull$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftBitmapWritesLazyWriter$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftBitmapWritesLazyWriter$LAYOUT() { return _NTFS_STATISTICS$MftBitmapWritesLazyWriter$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftBitmapWritesLazyWriter$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MftBitmapWritesLazyWriter"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftBitmapWritesLazyWriter$VH() { return _NTFS_STATISTICS$MftBitmapWritesLazyWriter$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftBitmapWritesUserRequest$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftBitmapWritesUserRequest$LAYOUT() { return _NTFS_STATISTICS$MftBitmapWritesUserRequest$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftBitmapWritesUserRequest$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MftBitmapWritesUserRequest"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftBitmapWritesUserRequest$VH() { return _NTFS_STATISTICS$MftBitmapWritesUserRequest$VH_; }

    static final MemoryLayout MftBitmapWritesUserLevel$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Write"),
        C_SHORT.withName("Create"),
        C_SHORT.withName("SetInfo"),
        C_SHORT.withName("Flush")
    );
    static final jdk.incubator.foreign.MemoryLayout MftBitmapWritesUserLevel$struct$LAYOUT() { return MftBitmapWritesUserLevel$struct$LAYOUT_; }

    static final MemoryLayout MftBitmapWritesUserLevel$Write$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout MftBitmapWritesUserLevel$Write$LAYOUT() { return MftBitmapWritesUserLevel$Write$LAYOUT_; }

    static final VarHandle MftBitmapWritesUserLevel$Write$VH_ = MftBitmapWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Write"));
    static final java.lang.invoke.VarHandle MftBitmapWritesUserLevel$Write$VH() { return MftBitmapWritesUserLevel$Write$VH_; }

    static final MemoryLayout MftBitmapWritesUserLevel$Create$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout MftBitmapWritesUserLevel$Create$LAYOUT() { return MftBitmapWritesUserLevel$Create$LAYOUT_; }

    static final VarHandle MftBitmapWritesUserLevel$Create$VH_ = MftBitmapWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Create"));
    static final java.lang.invoke.VarHandle MftBitmapWritesUserLevel$Create$VH() { return MftBitmapWritesUserLevel$Create$VH_; }

    static final MemoryLayout MftBitmapWritesUserLevel$SetInfo$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout MftBitmapWritesUserLevel$SetInfo$LAYOUT() { return MftBitmapWritesUserLevel$SetInfo$LAYOUT_; }

    static final VarHandle MftBitmapWritesUserLevel$SetInfo$VH_ = MftBitmapWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SetInfo"));
    static final java.lang.invoke.VarHandle MftBitmapWritesUserLevel$SetInfo$VH() { return MftBitmapWritesUserLevel$SetInfo$VH_; }

    static final MemoryLayout MftBitmapWritesUserLevel$Flush$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout MftBitmapWritesUserLevel$Flush$LAYOUT() { return MftBitmapWritesUserLevel$Flush$LAYOUT_; }

    static final VarHandle MftBitmapWritesUserLevel$Flush$VH_ = MftBitmapWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flush"));
    static final java.lang.invoke.VarHandle MftBitmapWritesUserLevel$Flush$VH() { return MftBitmapWritesUserLevel$Flush$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$UserIndexReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$UserIndexReads$LAYOUT() { return _NTFS_STATISTICS$UserIndexReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$UserIndexReads$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserIndexReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$UserIndexReads$VH() { return _NTFS_STATISTICS$UserIndexReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$UserIndexReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$UserIndexReadBytes$LAYOUT() { return _NTFS_STATISTICS$UserIndexReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$UserIndexReadBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserIndexReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$UserIndexReadBytes$VH() { return _NTFS_STATISTICS$UserIndexReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$UserIndexWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$UserIndexWrites$LAYOUT() { return _NTFS_STATISTICS$UserIndexWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$UserIndexWrites$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserIndexWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$UserIndexWrites$VH() { return _NTFS_STATISTICS$UserIndexWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$UserIndexWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$UserIndexWriteBytes$LAYOUT() { return _NTFS_STATISTICS$UserIndexWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$UserIndexWriteBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserIndexWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$UserIndexWriteBytes$VH() { return _NTFS_STATISTICS$UserIndexWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$LogFileReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$LogFileReads$LAYOUT() { return _NTFS_STATISTICS$LogFileReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$LogFileReads$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogFileReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$LogFileReads$VH() { return _NTFS_STATISTICS$LogFileReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$LogFileReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$LogFileReadBytes$LAYOUT() { return _NTFS_STATISTICS$LogFileReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$LogFileReadBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogFileReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$LogFileReadBytes$VH() { return _NTFS_STATISTICS$LogFileReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$LogFileWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$LogFileWrites$LAYOUT() { return _NTFS_STATISTICS$LogFileWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$LogFileWrites$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogFileWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$LogFileWrites$VH() { return _NTFS_STATISTICS$LogFileWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$LogFileWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$LogFileWriteBytes$LAYOUT() { return _NTFS_STATISTICS$LogFileWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$LogFileWriteBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogFileWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$LogFileWriteBytes$VH() { return _NTFS_STATISTICS$LogFileWriteBytes$VH_; }

    static final MemoryLayout Allocate$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Calls"),
        C_LONG.withName("Clusters"),
        C_LONG.withName("Hints"),
        C_LONG.withName("RunsReturned"),
        C_LONG.withName("HintsHonored"),
        C_LONG.withName("HintsClusters"),
        C_LONG.withName("Cache"),
        C_LONG.withName("CacheClusters"),
        C_LONG.withName("CacheMiss"),
        C_LONG.withName("CacheMissClusters")
    );
    static final jdk.incubator.foreign.MemoryLayout Allocate$struct$LAYOUT() { return Allocate$struct$LAYOUT_; }

    static final MemoryLayout Allocate$Calls$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$Calls$LAYOUT() { return Allocate$Calls$LAYOUT_; }

    static final VarHandle Allocate$Calls$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Calls"));
    static final java.lang.invoke.VarHandle Allocate$Calls$VH() { return Allocate$Calls$VH_; }

    static final MemoryLayout Allocate$Clusters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$Clusters$LAYOUT() { return Allocate$Clusters$LAYOUT_; }

    static final VarHandle Allocate$Clusters$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Clusters"));
    static final java.lang.invoke.VarHandle Allocate$Clusters$VH() { return Allocate$Clusters$VH_; }

    static final MemoryLayout Allocate$Hints$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$Hints$LAYOUT() { return Allocate$Hints$LAYOUT_; }

    static final VarHandle Allocate$Hints$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Hints"));
    static final java.lang.invoke.VarHandle Allocate$Hints$VH() { return Allocate$Hints$VH_; }

    static final MemoryLayout Allocate$RunsReturned$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$RunsReturned$LAYOUT() { return Allocate$RunsReturned$LAYOUT_; }

    static final VarHandle Allocate$RunsReturned$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RunsReturned"));
    static final java.lang.invoke.VarHandle Allocate$RunsReturned$VH() { return Allocate$RunsReturned$VH_; }

    static final MemoryLayout Allocate$HintsHonored$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$HintsHonored$LAYOUT() { return Allocate$HintsHonored$LAYOUT_; }

    static final VarHandle Allocate$HintsHonored$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HintsHonored"));
    static final java.lang.invoke.VarHandle Allocate$HintsHonored$VH() { return Allocate$HintsHonored$VH_; }

    static final MemoryLayout Allocate$HintsClusters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$HintsClusters$LAYOUT() { return Allocate$HintsClusters$LAYOUT_; }

    static final VarHandle Allocate$HintsClusters$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HintsClusters"));
    static final java.lang.invoke.VarHandle Allocate$HintsClusters$VH() { return Allocate$HintsClusters$VH_; }

    static final MemoryLayout Allocate$Cache$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$Cache$LAYOUT() { return Allocate$Cache$LAYOUT_; }

    static final VarHandle Allocate$Cache$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Cache"));
    static final java.lang.invoke.VarHandle Allocate$Cache$VH() { return Allocate$Cache$VH_; }

    static final MemoryLayout Allocate$CacheClusters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$CacheClusters$LAYOUT() { return Allocate$CacheClusters$LAYOUT_; }

    static final VarHandle Allocate$CacheClusters$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CacheClusters"));
    static final java.lang.invoke.VarHandle Allocate$CacheClusters$VH() { return Allocate$CacheClusters$VH_; }

    static final MemoryLayout Allocate$CacheMiss$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$CacheMiss$LAYOUT() { return Allocate$CacheMiss$LAYOUT_; }

    static final VarHandle Allocate$CacheMiss$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CacheMiss"));
    static final java.lang.invoke.VarHandle Allocate$CacheMiss$VH() { return Allocate$CacheMiss$VH_; }

    static final MemoryLayout Allocate$CacheMissClusters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Allocate$CacheMissClusters$LAYOUT() { return Allocate$CacheMissClusters$LAYOUT_; }

    static final VarHandle Allocate$CacheMissClusters$VH_ = Allocate$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CacheMissClusters"));
    static final java.lang.invoke.VarHandle Allocate$CacheMissClusters$VH() { return Allocate$CacheMissClusters$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$DiskResourcesExhausted$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$DiskResourcesExhausted$LAYOUT() { return _NTFS_STATISTICS$DiskResourcesExhausted$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$DiskResourcesExhausted$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DiskResourcesExhausted"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$DiskResourcesExhausted$VH() { return _NTFS_STATISTICS$DiskResourcesExhausted$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("FileSystemType"),
        C_SHORT.withName("Version"),
        C_LONG.withName("SizeOfCompleteStructure"),
        C_LONGLONG.withName("UserFileReads"),
        C_LONGLONG.withName("UserFileReadBytes"),
        C_LONGLONG.withName("UserDiskReads"),
        C_LONGLONG.withName("UserFileWrites"),
        C_LONGLONG.withName("UserFileWriteBytes"),
        C_LONGLONG.withName("UserDiskWrites"),
        C_LONGLONG.withName("MetaDataReads"),
        C_LONGLONG.withName("MetaDataReadBytes"),
        C_LONGLONG.withName("MetaDataDiskReads"),
        C_LONGLONG.withName("MetaDataWrites"),
        C_LONGLONG.withName("MetaDataWriteBytes"),
        C_LONGLONG.withName("MetaDataDiskWrites")
    ).withName("_FILESYSTEM_STATISTICS_EX");
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$struct$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$FileSystemType$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$FileSystemType$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$FileSystemType$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$FileSystemType$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileSystemType"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$FileSystemType$VH() { return _FILESYSTEM_STATISTICS_EX$FileSystemType$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$Version$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$Version$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$Version$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$Version$VH() { return _FILESYSTEM_STATISTICS_EX$Version$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$SizeOfCompleteStructure$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$SizeOfCompleteStructure$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$SizeOfCompleteStructure$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$SizeOfCompleteStructure$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCompleteStructure"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$SizeOfCompleteStructure$VH() { return _FILESYSTEM_STATISTICS_EX$SizeOfCompleteStructure$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$UserFileReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$UserFileReads$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$UserFileReads$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$UserFileReads$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserFileReads"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$UserFileReads$VH() { return _FILESYSTEM_STATISTICS_EX$UserFileReads$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$UserFileReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$UserFileReadBytes$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$UserFileReadBytes$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$UserFileReadBytes$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserFileReadBytes"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$UserFileReadBytes$VH() { return _FILESYSTEM_STATISTICS_EX$UserFileReadBytes$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$UserDiskReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$UserDiskReads$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$UserDiskReads$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$UserDiskReads$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserDiskReads"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$UserDiskReads$VH() { return _FILESYSTEM_STATISTICS_EX$UserDiskReads$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$UserFileWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$UserFileWrites$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$UserFileWrites$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$UserFileWrites$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserFileWrites"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$UserFileWrites$VH() { return _FILESYSTEM_STATISTICS_EX$UserFileWrites$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$UserFileWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$UserFileWriteBytes$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$UserFileWriteBytes$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$UserFileWriteBytes$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserFileWriteBytes"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$UserFileWriteBytes$VH() { return _FILESYSTEM_STATISTICS_EX$UserFileWriteBytes$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$UserDiskWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$UserDiskWrites$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$UserDiskWrites$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$UserDiskWrites$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserDiskWrites"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$UserDiskWrites$VH() { return _FILESYSTEM_STATISTICS_EX$UserDiskWrites$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataReads$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$MetaDataReads$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataReads$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MetaDataReads"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataReads$VH() { return _FILESYSTEM_STATISTICS_EX$MetaDataReads$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataReadBytes$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$MetaDataReadBytes$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataReadBytes$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MetaDataReadBytes"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataReadBytes$VH() { return _FILESYSTEM_STATISTICS_EX$MetaDataReadBytes$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataDiskReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataDiskReads$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$MetaDataDiskReads$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataDiskReads$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MetaDataDiskReads"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataDiskReads$VH() { return _FILESYSTEM_STATISTICS_EX$MetaDataDiskReads$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataWrites$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$MetaDataWrites$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataWrites$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MetaDataWrites"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataWrites$VH() { return _FILESYSTEM_STATISTICS_EX$MetaDataWrites$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataWriteBytes$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$MetaDataWriteBytes$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataWriteBytes$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MetaDataWriteBytes"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataWriteBytes$VH() { return _FILESYSTEM_STATISTICS_EX$MetaDataWriteBytes$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataDiskWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS_EX$MetaDataDiskWrites$LAYOUT() { return _FILESYSTEM_STATISTICS_EX$MetaDataDiskWrites$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataDiskWrites$VH_ = _FILESYSTEM_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MetaDataDiskWrites"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS_EX$MetaDataDiskWrites$VH() { return _FILESYSTEM_STATISTICS_EX$MetaDataDiskWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LogFileFullExceptions"),
        C_LONG.withName("OtherExceptions"),
        C_LONGLONG.withName("MftReads"),
        C_LONGLONG.withName("MftReadBytes"),
        C_LONGLONG.withName("MftWrites"),
        C_LONGLONG.withName("MftWriteBytes"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Write"),
            C_LONG.withName("Create"),
            C_LONG.withName("SetInfo"),
            C_LONG.withName("Flush")
        ).withName("MftWritesUserLevel"),
        C_LONG.withName("MftWritesFlushForLogFileFull"),
        C_LONG.withName("MftWritesLazyWriter"),
        C_LONG.withName("MftWritesUserRequest"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Mft2Writes"),
        C_LONGLONG.withName("Mft2WriteBytes"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Write"),
            C_LONG.withName("Create"),
            C_LONG.withName("SetInfo"),
            C_LONG.withName("Flush")
        ).withName("Mft2WritesUserLevel"),
        C_LONG.withName("Mft2WritesFlushForLogFileFull"),
        C_LONG.withName("Mft2WritesLazyWriter"),
        C_LONG.withName("Mft2WritesUserRequest"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("RootIndexReads"),
        C_LONGLONG.withName("RootIndexReadBytes"),
        C_LONGLONG.withName("RootIndexWrites"),
        C_LONGLONG.withName("RootIndexWriteBytes"),
        C_LONGLONG.withName("BitmapReads"),
        C_LONGLONG.withName("BitmapReadBytes"),
        C_LONGLONG.withName("BitmapWrites"),
        C_LONGLONG.withName("BitmapWriteBytes"),
        C_LONG.withName("BitmapWritesFlushForLogFileFull"),
        C_LONG.withName("BitmapWritesLazyWriter"),
        C_LONG.withName("BitmapWritesUserRequest"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Write"),
            C_LONG.withName("Create"),
            C_LONG.withName("SetInfo"),
            C_LONG.withName("Flush")
        ).withName("BitmapWritesUserLevel"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("MftBitmapReads"),
        C_LONGLONG.withName("MftBitmapReadBytes"),
        C_LONGLONG.withName("MftBitmapWrites"),
        C_LONGLONG.withName("MftBitmapWriteBytes"),
        C_LONG.withName("MftBitmapWritesFlushForLogFileFull"),
        C_LONG.withName("MftBitmapWritesLazyWriter"),
        C_LONG.withName("MftBitmapWritesUserRequest"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Write"),
            C_LONG.withName("Create"),
            C_LONG.withName("SetInfo"),
            C_LONG.withName("Flush")
        ).withName("MftBitmapWritesUserLevel"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("UserIndexReads"),
        C_LONGLONG.withName("UserIndexReadBytes"),
        C_LONGLONG.withName("UserIndexWrites"),
        C_LONGLONG.withName("UserIndexWriteBytes"),
        C_LONGLONG.withName("LogFileReads"),
        C_LONGLONG.withName("LogFileReadBytes"),
        C_LONGLONG.withName("LogFileWrites"),
        C_LONGLONG.withName("LogFileWriteBytes"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Calls"),
            C_LONG.withName("RunsReturned"),
            C_LONG.withName("Hints"),
            C_LONG.withName("HintsHonored"),
            C_LONG.withName("Cache"),
            C_LONG.withName("CacheMiss"),
            C_LONGLONG.withName("Clusters"),
            C_LONGLONG.withName("HintsClusters"),
            C_LONGLONG.withName("CacheClusters"),
            C_LONGLONG.withName("CacheMissClusters")
        ).withName("Allocate"),
        C_LONG.withName("DiskResourcesExhausted"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("VolumeTrimCount"),
        C_LONGLONG.withName("VolumeTrimTime"),
        C_LONGLONG.withName("VolumeTrimByteCount"),
        C_LONGLONG.withName("FileLevelTrimCount"),
        C_LONGLONG.withName("FileLevelTrimTime"),
        C_LONGLONG.withName("FileLevelTrimByteCount"),
        C_LONGLONG.withName("VolumeTrimSkippedCount"),
        C_LONGLONG.withName("VolumeTrimSkippedByteCount"),
        C_LONGLONG.withName("NtfsFillStatInfoFromMftRecordCalledCount"),
        C_LONGLONG.withName("NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount"),
        C_LONGLONG.withName("NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount")
    ).withName("_NTFS_STATISTICS_EX");
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$struct$LAYOUT() { return _NTFS_STATISTICS_EX$struct$LAYOUT_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$LogFileFullExceptions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$LogFileFullExceptions$LAYOUT() { return _NTFS_STATISTICS_EX$LogFileFullExceptions$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$LogFileFullExceptions$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogFileFullExceptions"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$LogFileFullExceptions$VH() { return _NTFS_STATISTICS_EX$LogFileFullExceptions$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$OtherExceptions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$OtherExceptions$LAYOUT() { return _NTFS_STATISTICS_EX$OtherExceptions$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$OtherExceptions$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OtherExceptions"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$OtherExceptions$VH() { return _NTFS_STATISTICS_EX$OtherExceptions$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftReads$LAYOUT() { return _NTFS_STATISTICS_EX$MftReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftReads$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MftReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftReads$VH() { return _NTFS_STATISTICS_EX$MftReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftReadBytes$LAYOUT() { return _NTFS_STATISTICS_EX$MftReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftReadBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MftReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftReadBytes$VH() { return _NTFS_STATISTICS_EX$MftReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftWrites$LAYOUT() { return _NTFS_STATISTICS_EX$MftWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftWrites$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MftWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftWrites$VH() { return _NTFS_STATISTICS_EX$MftWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftWriteBytes$LAYOUT() { return _NTFS_STATISTICS_EX$MftWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftWriteBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MftWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftWriteBytes$VH() { return _NTFS_STATISTICS_EX$MftWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftWritesFlushForLogFileFull$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftWritesFlushForLogFileFull$LAYOUT() { return _NTFS_STATISTICS_EX$MftWritesFlushForLogFileFull$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftWritesFlushForLogFileFull$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftWritesFlushForLogFileFull"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftWritesFlushForLogFileFull$VH() { return _NTFS_STATISTICS_EX$MftWritesFlushForLogFileFull$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftWritesLazyWriter$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftWritesLazyWriter$LAYOUT() { return _NTFS_STATISTICS_EX$MftWritesLazyWriter$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftWritesLazyWriter$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftWritesLazyWriter"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftWritesLazyWriter$VH() { return _NTFS_STATISTICS_EX$MftWritesLazyWriter$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftWritesUserRequest$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftWritesUserRequest$LAYOUT() { return _NTFS_STATISTICS_EX$MftWritesUserRequest$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftWritesUserRequest$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftWritesUserRequest"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftWritesUserRequest$VH() { return _NTFS_STATISTICS_EX$MftWritesUserRequest$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$Mft2Writes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$Mft2Writes$LAYOUT() { return _NTFS_STATISTICS_EX$Mft2Writes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$Mft2Writes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Mft2Writes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$Mft2Writes$VH() { return _NTFS_STATISTICS_EX$Mft2Writes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$Mft2WriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$Mft2WriteBytes$LAYOUT() { return _NTFS_STATISTICS_EX$Mft2WriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$Mft2WriteBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Mft2WriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$Mft2WriteBytes$VH() { return _NTFS_STATISTICS_EX$Mft2WriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$Mft2WritesFlushForLogFileFull$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$Mft2WritesFlushForLogFileFull$LAYOUT() { return _NTFS_STATISTICS_EX$Mft2WritesFlushForLogFileFull$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$Mft2WritesFlushForLogFileFull$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mft2WritesFlushForLogFileFull"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$Mft2WritesFlushForLogFileFull$VH() { return _NTFS_STATISTICS_EX$Mft2WritesFlushForLogFileFull$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$Mft2WritesLazyWriter$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$Mft2WritesLazyWriter$LAYOUT() { return _NTFS_STATISTICS_EX$Mft2WritesLazyWriter$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$Mft2WritesLazyWriter$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mft2WritesLazyWriter"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$Mft2WritesLazyWriter$VH() { return _NTFS_STATISTICS_EX$Mft2WritesLazyWriter$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$Mft2WritesUserRequest$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$Mft2WritesUserRequest$LAYOUT() { return _NTFS_STATISTICS_EX$Mft2WritesUserRequest$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$Mft2WritesUserRequest$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mft2WritesUserRequest"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$Mft2WritesUserRequest$VH() { return _NTFS_STATISTICS_EX$Mft2WritesUserRequest$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$RootIndexReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$RootIndexReads$LAYOUT() { return _NTFS_STATISTICS_EX$RootIndexReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$RootIndexReads$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RootIndexReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$RootIndexReads$VH() { return _NTFS_STATISTICS_EX$RootIndexReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$RootIndexReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$RootIndexReadBytes$LAYOUT() { return _NTFS_STATISTICS_EX$RootIndexReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$RootIndexReadBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RootIndexReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$RootIndexReadBytes$VH() { return _NTFS_STATISTICS_EX$RootIndexReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$RootIndexWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$RootIndexWrites$LAYOUT() { return _NTFS_STATISTICS_EX$RootIndexWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$RootIndexWrites$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RootIndexWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$RootIndexWrites$VH() { return _NTFS_STATISTICS_EX$RootIndexWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$RootIndexWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$RootIndexWriteBytes$LAYOUT() { return _NTFS_STATISTICS_EX$RootIndexWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$RootIndexWriteBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RootIndexWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$RootIndexWriteBytes$VH() { return _NTFS_STATISTICS_EX$RootIndexWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$BitmapReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$BitmapReads$LAYOUT() { return _NTFS_STATISTICS_EX$BitmapReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$BitmapReads$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BitmapReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$BitmapReads$VH() { return _NTFS_STATISTICS_EX$BitmapReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$BitmapReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$BitmapReadBytes$LAYOUT() { return _NTFS_STATISTICS_EX$BitmapReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$BitmapReadBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BitmapReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$BitmapReadBytes$VH() { return _NTFS_STATISTICS_EX$BitmapReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$BitmapWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$BitmapWrites$LAYOUT() { return _NTFS_STATISTICS_EX$BitmapWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$BitmapWrites$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BitmapWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$BitmapWrites$VH() { return _NTFS_STATISTICS_EX$BitmapWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$BitmapWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$BitmapWriteBytes$LAYOUT() { return _NTFS_STATISTICS_EX$BitmapWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$BitmapWriteBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BitmapWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$BitmapWriteBytes$VH() { return _NTFS_STATISTICS_EX$BitmapWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$BitmapWritesFlushForLogFileFull$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$BitmapWritesFlushForLogFileFull$LAYOUT() { return _NTFS_STATISTICS_EX$BitmapWritesFlushForLogFileFull$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$BitmapWritesFlushForLogFileFull$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BitmapWritesFlushForLogFileFull"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$BitmapWritesFlushForLogFileFull$VH() { return _NTFS_STATISTICS_EX$BitmapWritesFlushForLogFileFull$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$BitmapWritesLazyWriter$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$BitmapWritesLazyWriter$LAYOUT() { return _NTFS_STATISTICS_EX$BitmapWritesLazyWriter$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$BitmapWritesLazyWriter$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BitmapWritesLazyWriter"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$BitmapWritesLazyWriter$VH() { return _NTFS_STATISTICS_EX$BitmapWritesLazyWriter$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$BitmapWritesUserRequest$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$BitmapWritesUserRequest$LAYOUT() { return _NTFS_STATISTICS_EX$BitmapWritesUserRequest$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$BitmapWritesUserRequest$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BitmapWritesUserRequest"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$BitmapWritesUserRequest$VH() { return _NTFS_STATISTICS_EX$BitmapWritesUserRequest$VH_; }

    static final MemoryLayout BitmapWritesUserLevel$Flush$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout BitmapWritesUserLevel$Flush$LAYOUT() { return BitmapWritesUserLevel$Flush$LAYOUT_; }

    static final VarHandle BitmapWritesUserLevel$Flush$VH_ = BitmapWritesUserLevel$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flush"));
    static final java.lang.invoke.VarHandle BitmapWritesUserLevel$Flush$VH() { return BitmapWritesUserLevel$Flush$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftBitmapReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftBitmapReads$LAYOUT() { return _NTFS_STATISTICS_EX$MftBitmapReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftBitmapReads$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MftBitmapReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftBitmapReads$VH() { return _NTFS_STATISTICS_EX$MftBitmapReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftBitmapReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftBitmapReadBytes$LAYOUT() { return _NTFS_STATISTICS_EX$MftBitmapReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftBitmapReadBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MftBitmapReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftBitmapReadBytes$VH() { return _NTFS_STATISTICS_EX$MftBitmapReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWrites$LAYOUT() { return _NTFS_STATISTICS_EX$MftBitmapWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftBitmapWrites$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MftBitmapWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftBitmapWrites$VH() { return _NTFS_STATISTICS_EX$MftBitmapWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWriteBytes$LAYOUT() { return _NTFS_STATISTICS_EX$MftBitmapWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftBitmapWriteBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MftBitmapWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftBitmapWriteBytes$VH() { return _NTFS_STATISTICS_EX$MftBitmapWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWritesFlushForLogFileFull$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWritesFlushForLogFileFull$LAYOUT() { return _NTFS_STATISTICS_EX$MftBitmapWritesFlushForLogFileFull$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftBitmapWritesFlushForLogFileFull$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftBitmapWritesFlushForLogFileFull"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftBitmapWritesFlushForLogFileFull$VH() { return _NTFS_STATISTICS_EX$MftBitmapWritesFlushForLogFileFull$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWritesLazyWriter$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWritesLazyWriter$LAYOUT() { return _NTFS_STATISTICS_EX$MftBitmapWritesLazyWriter$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftBitmapWritesLazyWriter$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftBitmapWritesLazyWriter"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftBitmapWritesLazyWriter$VH() { return _NTFS_STATISTICS_EX$MftBitmapWritesLazyWriter$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWritesUserRequest$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$MftBitmapWritesUserRequest$LAYOUT() { return _NTFS_STATISTICS_EX$MftBitmapWritesUserRequest$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$MftBitmapWritesUserRequest$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftBitmapWritesUserRequest"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$MftBitmapWritesUserRequest$VH() { return _NTFS_STATISTICS_EX$MftBitmapWritesUserRequest$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$UserIndexReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$UserIndexReads$LAYOUT() { return _NTFS_STATISTICS_EX$UserIndexReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$UserIndexReads$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserIndexReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$UserIndexReads$VH() { return _NTFS_STATISTICS_EX$UserIndexReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$UserIndexReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$UserIndexReadBytes$LAYOUT() { return _NTFS_STATISTICS_EX$UserIndexReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$UserIndexReadBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserIndexReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$UserIndexReadBytes$VH() { return _NTFS_STATISTICS_EX$UserIndexReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$UserIndexWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$UserIndexWrites$LAYOUT() { return _NTFS_STATISTICS_EX$UserIndexWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$UserIndexWrites$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserIndexWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$UserIndexWrites$VH() { return _NTFS_STATISTICS_EX$UserIndexWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$UserIndexWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$UserIndexWriteBytes$LAYOUT() { return _NTFS_STATISTICS_EX$UserIndexWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$UserIndexWriteBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserIndexWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$UserIndexWriteBytes$VH() { return _NTFS_STATISTICS_EX$UserIndexWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$LogFileReads$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$LogFileReads$LAYOUT() { return _NTFS_STATISTICS_EX$LogFileReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$LogFileReads$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LogFileReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$LogFileReads$VH() { return _NTFS_STATISTICS_EX$LogFileReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$LogFileReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$LogFileReadBytes$LAYOUT() { return _NTFS_STATISTICS_EX$LogFileReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$LogFileReadBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LogFileReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$LogFileReadBytes$VH() { return _NTFS_STATISTICS_EX$LogFileReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$LogFileWrites$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$LogFileWrites$LAYOUT() { return _NTFS_STATISTICS_EX$LogFileWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$LogFileWrites$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LogFileWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$LogFileWrites$VH() { return _NTFS_STATISTICS_EX$LogFileWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$LogFileWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$LogFileWriteBytes$LAYOUT() { return _NTFS_STATISTICS_EX$LogFileWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$LogFileWriteBytes$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LogFileWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$LogFileWriteBytes$VH() { return _NTFS_STATISTICS_EX$LogFileWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$DiskResourcesExhausted$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$DiskResourcesExhausted$LAYOUT() { return _NTFS_STATISTICS_EX$DiskResourcesExhausted$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$DiskResourcesExhausted$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DiskResourcesExhausted"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$DiskResourcesExhausted$VH() { return _NTFS_STATISTICS_EX$DiskResourcesExhausted$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimCount$LAYOUT() { return _NTFS_STATISTICS_EX$VolumeTrimCount$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$VolumeTrimCount$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeTrimCount"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$VolumeTrimCount$VH() { return _NTFS_STATISTICS_EX$VolumeTrimCount$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimTime$LAYOUT() { return _NTFS_STATISTICS_EX$VolumeTrimTime$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$VolumeTrimTime$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeTrimTime"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$VolumeTrimTime$VH() { return _NTFS_STATISTICS_EX$VolumeTrimTime$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimByteCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimByteCount$LAYOUT() { return _NTFS_STATISTICS_EX$VolumeTrimByteCount$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$VolumeTrimByteCount$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeTrimByteCount"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$VolumeTrimByteCount$VH() { return _NTFS_STATISTICS_EX$VolumeTrimByteCount$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$FileLevelTrimCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$FileLevelTrimCount$LAYOUT() { return _NTFS_STATISTICS_EX$FileLevelTrimCount$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$FileLevelTrimCount$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileLevelTrimCount"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$FileLevelTrimCount$VH() { return _NTFS_STATISTICS_EX$FileLevelTrimCount$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$FileLevelTrimTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$FileLevelTrimTime$LAYOUT() { return _NTFS_STATISTICS_EX$FileLevelTrimTime$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$FileLevelTrimTime$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileLevelTrimTime"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$FileLevelTrimTime$VH() { return _NTFS_STATISTICS_EX$FileLevelTrimTime$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$FileLevelTrimByteCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$FileLevelTrimByteCount$LAYOUT() { return _NTFS_STATISTICS_EX$FileLevelTrimByteCount$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$FileLevelTrimByteCount$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileLevelTrimByteCount"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$FileLevelTrimByteCount$VH() { return _NTFS_STATISTICS_EX$FileLevelTrimByteCount$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimSkippedCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimSkippedCount$LAYOUT() { return _NTFS_STATISTICS_EX$VolumeTrimSkippedCount$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$VolumeTrimSkippedCount$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeTrimSkippedCount"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$VolumeTrimSkippedCount$VH() { return _NTFS_STATISTICS_EX$VolumeTrimSkippedCount$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimSkippedByteCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$VolumeTrimSkippedByteCount$LAYOUT() { return _NTFS_STATISTICS_EX$VolumeTrimSkippedByteCount$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$VolumeTrimSkippedByteCount$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeTrimSkippedByteCount"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$VolumeTrimSkippedByteCount$VH() { return _NTFS_STATISTICS_EX$VolumeTrimSkippedByteCount$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordCalledCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordCalledCount$LAYOUT() { return _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordCalledCount$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordCalledCount$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NtfsFillStatInfoFromMftRecordCalledCount"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordCalledCount$VH() { return _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordCalledCount$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$LAYOUT() { return _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$VH() { return _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount$VH_; }

    static final MemoryLayout _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$LAYOUT() { return _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$VH_ = _NTFS_STATISTICS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$VH() { return _NTFS_STATISTICS_EX$NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount$VH_; }

    static final MemoryLayout _FILE_OBJECTID_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(16, C_CHAR).withName("ObjectId"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("BirthVolumeId"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("BirthObjectId"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("DomainId"),
        MemoryLayout.ofSequence(48, C_CHAR).withName("ExtendedInfo")
    ).withName("_FILE_OBJECTID_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FILE_OBJECTID_BUFFER$struct$LAYOUT() { return _FILE_OBJECTID_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _FILE_SET_SPARSE_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("SetSparse")
    ).withName("_FILE_SET_SPARSE_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FILE_SET_SPARSE_BUFFER$struct$LAYOUT() { return _FILE_SET_SPARSE_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _FILE_SET_SPARSE_BUFFER$SetSparse$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _FILE_SET_SPARSE_BUFFER$SetSparse$LAYOUT() { return _FILE_SET_SPARSE_BUFFER$SetSparse$LAYOUT_; }

    static final VarHandle _FILE_SET_SPARSE_BUFFER$SetSparse$VH_ = _FILE_SET_SPARSE_BUFFER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SetSparse"));
    static final java.lang.invoke.VarHandle _FILE_SET_SPARSE_BUFFER$SetSparse$VH() { return _FILE_SET_SPARSE_BUFFER$SetSparse$VH_; }

    static final MemoryLayout _FILE_ZERO_DATA_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("BeyondFinalZero")
    ).withName("_FILE_ZERO_DATA_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _FILE_ZERO_DATA_INFORMATION$struct$LAYOUT() { return _FILE_ZERO_DATA_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _FILE_ZERO_DATA_INFORMATION_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("BeyondFinalZero"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_FILE_ZERO_DATA_INFORMATION_EX");
    static final jdk.incubator.foreign.MemoryLayout _FILE_ZERO_DATA_INFORMATION_EX$struct$LAYOUT() { return _FILE_ZERO_DATA_INFORMATION_EX$struct$LAYOUT_; }

    static final MemoryLayout _FILE_ZERO_DATA_INFORMATION_EX$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_ZERO_DATA_INFORMATION_EX$Flags$LAYOUT() { return _FILE_ZERO_DATA_INFORMATION_EX$Flags$LAYOUT_; }

    static final VarHandle _FILE_ZERO_DATA_INFORMATION_EX$Flags$VH_ = _FILE_ZERO_DATA_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FILE_ZERO_DATA_INFORMATION_EX$Flags$VH() { return _FILE_ZERO_DATA_INFORMATION_EX$Flags$VH_; }

    static final MemoryLayout _FILE_ALLOCATED_RANGE_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Length")
    ).withName("_FILE_ALLOCATED_RANGE_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FILE_ALLOCATED_RANGE_BUFFER$struct$LAYOUT() { return _FILE_ALLOCATED_RANGE_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTION_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("EncryptionOperation"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Private"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_ENCRYPTION_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_BUFFER$struct$LAYOUT() { return _ENCRYPTION_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTION_BUFFER$EncryptionOperation$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_BUFFER$EncryptionOperation$LAYOUT() { return _ENCRYPTION_BUFFER$EncryptionOperation$LAYOUT_; }

    static final VarHandle _ENCRYPTION_BUFFER$EncryptionOperation$VH_ = _ENCRYPTION_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EncryptionOperation"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_BUFFER$EncryptionOperation$VH() { return _ENCRYPTION_BUFFER$EncryptionOperation$VH_; }

    static final MemoryLayout _DECRYPTION_STATUS_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("NoEncryptedStreams")
    ).withName("_DECRYPTION_STATUS_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _DECRYPTION_STATUS_BUFFER$struct$LAYOUT() { return _DECRYPTION_STATUS_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _DECRYPTION_STATUS_BUFFER$NoEncryptedStreams$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DECRYPTION_STATUS_BUFFER$NoEncryptedStreams$LAYOUT() { return _DECRYPTION_STATUS_BUFFER$NoEncryptedStreams$LAYOUT_; }

    static final VarHandle _DECRYPTION_STATUS_BUFFER$NoEncryptedStreams$VH_ = _DECRYPTION_STATUS_BUFFER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NoEncryptedStreams"));
    static final java.lang.invoke.VarHandle _DECRYPTION_STATUS_BUFFER$NoEncryptedStreams$VH() { return _DECRYPTION_STATUS_BUFFER$NoEncryptedStreams$VH_; }

    static final MemoryLayout _REQUEST_RAW_ENCRYPTED_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("FileOffset"),
        C_LONG.withName("Length"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_REQUEST_RAW_ENCRYPTED_DATA");
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_RAW_ENCRYPTED_DATA$struct$LAYOUT() { return _REQUEST_RAW_ENCRYPTED_DATA$struct$LAYOUT_; }

    static final MemoryLayout _REQUEST_RAW_ENCRYPTED_DATA$FileOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_RAW_ENCRYPTED_DATA$FileOffset$LAYOUT() { return _REQUEST_RAW_ENCRYPTED_DATA$FileOffset$LAYOUT_; }

    static final VarHandle _REQUEST_RAW_ENCRYPTED_DATA$FileOffset$VH_ = _REQUEST_RAW_ENCRYPTED_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileOffset"));
    static final java.lang.invoke.VarHandle _REQUEST_RAW_ENCRYPTED_DATA$FileOffset$VH() { return _REQUEST_RAW_ENCRYPTED_DATA$FileOffset$VH_; }

    static final MemoryLayout _REQUEST_RAW_ENCRYPTED_DATA$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_RAW_ENCRYPTED_DATA$Length$LAYOUT() { return _REQUEST_RAW_ENCRYPTED_DATA$Length$LAYOUT_; }

    static final VarHandle _REQUEST_RAW_ENCRYPTED_DATA$Length$VH_ = _REQUEST_RAW_ENCRYPTED_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _REQUEST_RAW_ENCRYPTED_DATA$Length$VH() { return _REQUEST_RAW_ENCRYPTED_DATA$Length$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartingFileOffset"),
        C_LONG.withName("OutputBufferOffset"),
        C_LONG.withName("BytesWithinFileSize"),
        C_LONG.withName("BytesWithinValidDataLength"),
        C_SHORT.withName("CompressionFormat"),
        C_CHAR.withName("DataUnitShift"),
        C_CHAR.withName("ChunkShift"),
        C_CHAR.withName("ClusterShift"),
        C_CHAR.withName("EncryptionFormat"),
        C_SHORT.withName("NumberOfDataBlocks"),
        MemoryLayout.ofSequence(1, C_LONG).withName("DataBlockSize")
    ).withName("_ENCRYPTED_DATA_INFO");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$struct$LAYOUT() { return _ENCRYPTED_DATA_INFO$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$StartingFileOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$StartingFileOffset$LAYOUT() { return _ENCRYPTED_DATA_INFO$StartingFileOffset$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$StartingFileOffset$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartingFileOffset"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$StartingFileOffset$VH() { return _ENCRYPTED_DATA_INFO$StartingFileOffset$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$OutputBufferOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$OutputBufferOffset$LAYOUT() { return _ENCRYPTED_DATA_INFO$OutputBufferOffset$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$OutputBufferOffset$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OutputBufferOffset"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$OutputBufferOffset$VH() { return _ENCRYPTED_DATA_INFO$OutputBufferOffset$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$BytesWithinFileSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$BytesWithinFileSize$LAYOUT() { return _ENCRYPTED_DATA_INFO$BytesWithinFileSize$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$BytesWithinFileSize$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesWithinFileSize"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$BytesWithinFileSize$VH() { return _ENCRYPTED_DATA_INFO$BytesWithinFileSize$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$BytesWithinValidDataLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$BytesWithinValidDataLength$LAYOUT() { return _ENCRYPTED_DATA_INFO$BytesWithinValidDataLength$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$BytesWithinValidDataLength$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesWithinValidDataLength"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$BytesWithinValidDataLength$VH() { return _ENCRYPTED_DATA_INFO$BytesWithinValidDataLength$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$CompressionFormat$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$CompressionFormat$LAYOUT() { return _ENCRYPTED_DATA_INFO$CompressionFormat$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$CompressionFormat$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CompressionFormat"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$CompressionFormat$VH() { return _ENCRYPTED_DATA_INFO$CompressionFormat$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$DataUnitShift$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$DataUnitShift$LAYOUT() { return _ENCRYPTED_DATA_INFO$DataUnitShift$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$DataUnitShift$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DataUnitShift"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$DataUnitShift$VH() { return _ENCRYPTED_DATA_INFO$DataUnitShift$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$ChunkShift$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$ChunkShift$LAYOUT() { return _ENCRYPTED_DATA_INFO$ChunkShift$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$ChunkShift$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ChunkShift"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$ChunkShift$VH() { return _ENCRYPTED_DATA_INFO$ChunkShift$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$ClusterShift$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$ClusterShift$LAYOUT() { return _ENCRYPTED_DATA_INFO$ClusterShift$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$ClusterShift$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ClusterShift"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$ClusterShift$VH() { return _ENCRYPTED_DATA_INFO$ClusterShift$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$EncryptionFormat$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$EncryptionFormat$LAYOUT() { return _ENCRYPTED_DATA_INFO$EncryptionFormat$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$EncryptionFormat$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EncryptionFormat"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$EncryptionFormat$VH() { return _ENCRYPTED_DATA_INFO$EncryptionFormat$VH_; }

    static final MemoryLayout _ENCRYPTED_DATA_INFO$NumberOfDataBlocks$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_DATA_INFO$NumberOfDataBlocks$LAYOUT() { return _ENCRYPTED_DATA_INFO$NumberOfDataBlocks$LAYOUT_; }

    static final VarHandle _ENCRYPTED_DATA_INFO$NumberOfDataBlocks$VH_ = _ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfDataBlocks"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_DATA_INFO$NumberOfDataBlocks$VH() { return _ENCRYPTED_DATA_INFO$NumberOfDataBlocks$VH_; }

    static final MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExtendedCode"),
        C_LONG.withName("Length"),
        C_LONG.withName("Flags"),
        C_LONG.withName("Reserved")
    ).withName("_EXTENDED_ENCRYPTED_DATA_INFO");
    static final jdk.incubator.foreign.MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$struct$LAYOUT() { return _EXTENDED_ENCRYPTED_DATA_INFO$struct$LAYOUT_; }

    static final MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$ExtendedCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$ExtendedCode$LAYOUT() { return _EXTENDED_ENCRYPTED_DATA_INFO$ExtendedCode$LAYOUT_; }

    static final VarHandle _EXTENDED_ENCRYPTED_DATA_INFO$ExtendedCode$VH_ = _EXTENDED_ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtendedCode"));
    static final java.lang.invoke.VarHandle _EXTENDED_ENCRYPTED_DATA_INFO$ExtendedCode$VH() { return _EXTENDED_ENCRYPTED_DATA_INFO$ExtendedCode$VH_; }

    static final MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$Length$LAYOUT() { return _EXTENDED_ENCRYPTED_DATA_INFO$Length$LAYOUT_; }

    static final VarHandle _EXTENDED_ENCRYPTED_DATA_INFO$Length$VH_ = _EXTENDED_ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _EXTENDED_ENCRYPTED_DATA_INFO$Length$VH() { return _EXTENDED_ENCRYPTED_DATA_INFO$Length$VH_; }

    static final MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$Flags$LAYOUT() { return _EXTENDED_ENCRYPTED_DATA_INFO$Flags$LAYOUT_; }

    static final VarHandle _EXTENDED_ENCRYPTED_DATA_INFO$Flags$VH_ = _EXTENDED_ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _EXTENDED_ENCRYPTED_DATA_INFO$Flags$VH() { return _EXTENDED_ENCRYPTED_DATA_INFO$Flags$VH_; }

    static final MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXTENDED_ENCRYPTED_DATA_INFO$Reserved$LAYOUT() { return _EXTENDED_ENCRYPTED_DATA_INFO$Reserved$LAYOUT_; }

    static final VarHandle _EXTENDED_ENCRYPTED_DATA_INFO$Reserved$VH_ = _EXTENDED_ENCRYPTED_DATA_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _EXTENDED_ENCRYPTED_DATA_INFO$Reserved$VH() { return _EXTENDED_ENCRYPTED_DATA_INFO$Reserved$VH_; }

    static final MemoryLayout _PLEX_READ_DATA_REQUEST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ByteOffset"),
        C_LONG.withName("ByteLength"),
        C_LONG.withName("PlexNumber")
    ).withName("_PLEX_READ_DATA_REQUEST");
    static final jdk.incubator.foreign.MemoryLayout _PLEX_READ_DATA_REQUEST$struct$LAYOUT() { return _PLEX_READ_DATA_REQUEST$struct$LAYOUT_; }

    static final MemoryLayout _PLEX_READ_DATA_REQUEST$ByteLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PLEX_READ_DATA_REQUEST$ByteLength$LAYOUT() { return _PLEX_READ_DATA_REQUEST$ByteLength$LAYOUT_; }

    static final VarHandle _PLEX_READ_DATA_REQUEST$ByteLength$VH_ = _PLEX_READ_DATA_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ByteLength"));
    static final java.lang.invoke.VarHandle _PLEX_READ_DATA_REQUEST$ByteLength$VH() { return _PLEX_READ_DATA_REQUEST$ByteLength$VH_; }

    static final MemoryLayout _PLEX_READ_DATA_REQUEST$PlexNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PLEX_READ_DATA_REQUEST$PlexNumber$LAYOUT() { return _PLEX_READ_DATA_REQUEST$PlexNumber$LAYOUT_; }

    static final VarHandle _PLEX_READ_DATA_REQUEST$PlexNumber$VH_ = _PLEX_READ_DATA_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PlexNumber"));
    static final java.lang.invoke.VarHandle _PLEX_READ_DATA_REQUEST$PlexNumber$VH() { return _PLEX_READ_DATA_REQUEST$PlexNumber$VH_; }

    static final MemoryLayout _SI_COPYFILE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SourceFileNameLength"),
        C_LONG.withName("DestinationFileNameLength"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileNameBuffer"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_SI_COPYFILE");
    static final jdk.incubator.foreign.MemoryLayout _SI_COPYFILE$struct$LAYOUT() { return _SI_COPYFILE$struct$LAYOUT_; }

    static final MemoryLayout _SI_COPYFILE$SourceFileNameLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SI_COPYFILE$SourceFileNameLength$LAYOUT() { return _SI_COPYFILE$SourceFileNameLength$LAYOUT_; }

    static final VarHandle _SI_COPYFILE$SourceFileNameLength$VH_ = _SI_COPYFILE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SourceFileNameLength"));
    static final java.lang.invoke.VarHandle _SI_COPYFILE$SourceFileNameLength$VH() { return _SI_COPYFILE$SourceFileNameLength$VH_; }

    static final MemoryLayout _SI_COPYFILE$DestinationFileNameLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SI_COPYFILE$DestinationFileNameLength$LAYOUT() { return _SI_COPYFILE$DestinationFileNameLength$LAYOUT_; }

    static final VarHandle _SI_COPYFILE$DestinationFileNameLength$VH_ = _SI_COPYFILE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DestinationFileNameLength"));
    static final java.lang.invoke.VarHandle _SI_COPYFILE$DestinationFileNameLength$VH() { return _SI_COPYFILE$DestinationFileNameLength$VH_; }

    static final MemoryLayout _SI_COPYFILE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SI_COPYFILE$Flags$LAYOUT() { return _SI_COPYFILE$Flags$LAYOUT_; }

    static final VarHandle _SI_COPYFILE$Flags$VH_ = _SI_COPYFILE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SI_COPYFILE$Flags$VH() { return _SI_COPYFILE$Flags$VH_; }

    static final MemoryLayout _FILE_MAKE_COMPATIBLE_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("CloseDisc")
    ).withName("_FILE_MAKE_COMPATIBLE_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FILE_MAKE_COMPATIBLE_BUFFER$struct$LAYOUT() { return _FILE_MAKE_COMPATIBLE_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _FILE_MAKE_COMPATIBLE_BUFFER$CloseDisc$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _FILE_MAKE_COMPATIBLE_BUFFER$CloseDisc$LAYOUT() { return _FILE_MAKE_COMPATIBLE_BUFFER$CloseDisc$LAYOUT_; }

    static final VarHandle _FILE_MAKE_COMPATIBLE_BUFFER$CloseDisc$VH_ = _FILE_MAKE_COMPATIBLE_BUFFER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("CloseDisc"));
    static final java.lang.invoke.VarHandle _FILE_MAKE_COMPATIBLE_BUFFER$CloseDisc$VH() { return _FILE_MAKE_COMPATIBLE_BUFFER$CloseDisc$VH_; }

    static final MemoryLayout _FILE_SET_DEFECT_MGMT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Disable")
    ).withName("_FILE_SET_DEFECT_MGMT_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FILE_SET_DEFECT_MGMT_BUFFER$struct$LAYOUT() { return _FILE_SET_DEFECT_MGMT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _FILE_SET_DEFECT_MGMT_BUFFER$Disable$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _FILE_SET_DEFECT_MGMT_BUFFER$Disable$LAYOUT() { return _FILE_SET_DEFECT_MGMT_BUFFER$Disable$LAYOUT_; }

    static final VarHandle _FILE_SET_DEFECT_MGMT_BUFFER$Disable$VH_ = _FILE_SET_DEFECT_MGMT_BUFFER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Disable"));
    static final java.lang.invoke.VarHandle _FILE_SET_DEFECT_MGMT_BUFFER$Disable$VH() { return _FILE_SET_DEFECT_MGMT_BUFFER$Disable$VH_; }

    static final MemoryLayout _FILE_QUERY_SPARING_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SparingUnitBytes"),
        C_CHAR.withName("SoftwareSparing"),
        MemoryLayout.ofPaddingBits(24),
        C_LONG.withName("TotalSpareBlocks"),
        C_LONG.withName("FreeSpareBlocks")
    ).withName("_FILE_QUERY_SPARING_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FILE_QUERY_SPARING_BUFFER$struct$LAYOUT() { return _FILE_QUERY_SPARING_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _FILE_QUERY_SPARING_BUFFER$SparingUnitBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_QUERY_SPARING_BUFFER$SparingUnitBytes$LAYOUT() { return _FILE_QUERY_SPARING_BUFFER$SparingUnitBytes$LAYOUT_; }

    static final VarHandle _FILE_QUERY_SPARING_BUFFER$SparingUnitBytes$VH_ = _FILE_QUERY_SPARING_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SparingUnitBytes"));
    static final java.lang.invoke.VarHandle _FILE_QUERY_SPARING_BUFFER$SparingUnitBytes$VH() { return _FILE_QUERY_SPARING_BUFFER$SparingUnitBytes$VH_; }

    static final MemoryLayout _FILE_QUERY_SPARING_BUFFER$SoftwareSparing$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _FILE_QUERY_SPARING_BUFFER$SoftwareSparing$LAYOUT() { return _FILE_QUERY_SPARING_BUFFER$SoftwareSparing$LAYOUT_; }

    static final VarHandle _FILE_QUERY_SPARING_BUFFER$SoftwareSparing$VH_ = _FILE_QUERY_SPARING_BUFFER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SoftwareSparing"));
    static final java.lang.invoke.VarHandle _FILE_QUERY_SPARING_BUFFER$SoftwareSparing$VH() { return _FILE_QUERY_SPARING_BUFFER$SoftwareSparing$VH_; }

    static final MemoryLayout _FILE_QUERY_SPARING_BUFFER$TotalSpareBlocks$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_QUERY_SPARING_BUFFER$TotalSpareBlocks$LAYOUT() { return _FILE_QUERY_SPARING_BUFFER$TotalSpareBlocks$LAYOUT_; }

    static final VarHandle _FILE_QUERY_SPARING_BUFFER$TotalSpareBlocks$VH_ = _FILE_QUERY_SPARING_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalSpareBlocks"));
    static final java.lang.invoke.VarHandle _FILE_QUERY_SPARING_BUFFER$TotalSpareBlocks$VH() { return _FILE_QUERY_SPARING_BUFFER$TotalSpareBlocks$VH_; }

    static final MemoryLayout _FILE_QUERY_SPARING_BUFFER$FreeSpareBlocks$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_QUERY_SPARING_BUFFER$FreeSpareBlocks$LAYOUT() { return _FILE_QUERY_SPARING_BUFFER$FreeSpareBlocks$LAYOUT_; }

    static final VarHandle _FILE_QUERY_SPARING_BUFFER$FreeSpareBlocks$VH_ = _FILE_QUERY_SPARING_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FreeSpareBlocks"));
    static final java.lang.invoke.VarHandle _FILE_QUERY_SPARING_BUFFER$FreeSpareBlocks$VH() { return _FILE_QUERY_SPARING_BUFFER$FreeSpareBlocks$VH_; }

    static final MemoryLayout _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("DirectoryCount"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileCount"),
        C_SHORT.withName("FsFormatMajVersion"),
        C_SHORT.withName("FsFormatMinVersion"),
        MemoryLayout.ofSequence(12, C_SHORT).withName("FsFormatName"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FormatTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastUpdateTime"),
        MemoryLayout.ofSequence(34, C_SHORT).withName("CopyrightInfo"),
        MemoryLayout.ofSequence(34, C_SHORT).withName("AbstractInfo"),
        MemoryLayout.ofSequence(34, C_SHORT).withName("FormattingImplementationInfo"),
        MemoryLayout.ofSequence(34, C_SHORT).withName("LastModifyingImplementationInfo")
    ).withName("_FILE_QUERY_ON_DISK_VOL_INFO_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$struct$LAYOUT() { return _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMajVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMajVersion$LAYOUT() { return _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMajVersion$LAYOUT_; }

    static final VarHandle _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMajVersion$VH_ = _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FsFormatMajVersion"));
    static final java.lang.invoke.VarHandle _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMajVersion$VH() { return _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMajVersion$VH_; }

    static final MemoryLayout _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMinVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMinVersion$LAYOUT() { return _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMinVersion$LAYOUT_; }

    static final VarHandle _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMinVersion$VH_ = _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FsFormatMinVersion"));
    static final java.lang.invoke.VarHandle _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMinVersion$VH() { return _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER$FsFormatMinVersion$VH_; }

    static final MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Hint1"),
        C_LONGLONG.withName("Hint2"),
        C_LONGLONG.withName("Clsn"),
        C_LONG.withName("Status"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_FILE_INITIATE_REPAIR_OUTPUT_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$struct$LAYOUT() { return _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint1$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint1$LAYOUT() { return _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint1$LAYOUT_; }

    static final VarHandle _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint1$VH_ = _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Hint1"));
    static final java.lang.invoke.VarHandle _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint1$VH() { return _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint1$VH_; }

    static final MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint2$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint2$LAYOUT() { return _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint2$LAYOUT_; }

    static final VarHandle _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint2$VH_ = _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Hint2"));
    static final java.lang.invoke.VarHandle _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint2$VH() { return _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Hint2$VH_; }

    static final MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Clsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Clsn$LAYOUT() { return _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Clsn$LAYOUT_; }

    static final VarHandle _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Clsn$VH_ = _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Clsn"));
    static final java.lang.invoke.VarHandle _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Clsn$VH() { return _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Clsn$VH_; }

    static final MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Status$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Status$LAYOUT() { return _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Status$LAYOUT_; }

    static final VarHandle _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Status$VH_ = _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Status"));
    static final java.lang.invoke.VarHandle _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Status$VH() { return _FILE_INITIATE_REPAIR_OUTPUT_BUFFER$Status$VH_; }

    static final int ShrinkPrepare() { return (int)1L; }

    static final int ShrinkCommit() { return (int)2L; }

    static final int ShrinkAbort() { return (int)3L; }

    static final MemoryLayout _SHRINK_VOLUME_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ShrinkRequestType"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Flags"),
        C_LONGLONG.withName("NewNumberOfSectors")
    ).withName("_SHRINK_VOLUME_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SHRINK_VOLUME_INFORMATION$struct$LAYOUT() { return _SHRINK_VOLUME_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SHRINK_VOLUME_INFORMATION$ShrinkRequestType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SHRINK_VOLUME_INFORMATION$ShrinkRequestType$LAYOUT() { return _SHRINK_VOLUME_INFORMATION$ShrinkRequestType$LAYOUT_; }

    static final VarHandle _SHRINK_VOLUME_INFORMATION$ShrinkRequestType$VH_ = _SHRINK_VOLUME_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ShrinkRequestType"));
    static final java.lang.invoke.VarHandle _SHRINK_VOLUME_INFORMATION$ShrinkRequestType$VH() { return _SHRINK_VOLUME_INFORMATION$ShrinkRequestType$VH_; }

    static final MemoryLayout _SHRINK_VOLUME_INFORMATION$Flags$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SHRINK_VOLUME_INFORMATION$Flags$LAYOUT() { return _SHRINK_VOLUME_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _SHRINK_VOLUME_INFORMATION$Flags$VH_ = _SHRINK_VOLUME_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SHRINK_VOLUME_INFORMATION$Flags$VH() { return _SHRINK_VOLUME_INFORMATION$Flags$VH_; }

    static final MemoryLayout _SHRINK_VOLUME_INFORMATION$NewNumberOfSectors$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SHRINK_VOLUME_INFORMATION$NewNumberOfSectors$LAYOUT() { return _SHRINK_VOLUME_INFORMATION$NewNumberOfSectors$LAYOUT_; }

    static final VarHandle _SHRINK_VOLUME_INFORMATION$NewNumberOfSectors$VH_ = _SHRINK_VOLUME_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NewNumberOfSectors"));
    static final java.lang.invoke.VarHandle _SHRINK_VOLUME_INFORMATION$NewNumberOfSectors$VH() { return _SHRINK_VOLUME_INFORMATION$NewNumberOfSectors$VH_; }

    static final MemoryLayout _TXFS_MODIFY_RM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("LogContainerCountMax"),
        C_LONG.withName("LogContainerCountMin"),
        C_LONG.withName("LogContainerCount"),
        C_LONG.withName("LogGrowthIncrement"),
        C_LONG.withName("LogAutoShrinkPercentage"),
        C_LONGLONG.withName("Reserved"),
        C_SHORT.withName("LoggingMode"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_TXFS_MODIFY_RM");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_MODIFY_RM$struct$LAYOUT() { return _TXFS_MODIFY_RM$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_MODIFY_RM$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_MODIFY_RM$Flags$LAYOUT() { return _TXFS_MODIFY_RM$Flags$LAYOUT_; }

    static final VarHandle _TXFS_MODIFY_RM$Flags$VH_ = _TXFS_MODIFY_RM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _TXFS_MODIFY_RM$Flags$VH() { return _TXFS_MODIFY_RM$Flags$VH_; }

    static final MemoryLayout _TXFS_MODIFY_RM$LogContainerCountMax$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_MODIFY_RM$LogContainerCountMax$LAYOUT() { return _TXFS_MODIFY_RM$LogContainerCountMax$LAYOUT_; }

    static final VarHandle _TXFS_MODIFY_RM$LogContainerCountMax$VH_ = _TXFS_MODIFY_RM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogContainerCountMax"));
    static final java.lang.invoke.VarHandle _TXFS_MODIFY_RM$LogContainerCountMax$VH() { return _TXFS_MODIFY_RM$LogContainerCountMax$VH_; }

    static final MemoryLayout _TXFS_MODIFY_RM$LogContainerCountMin$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_MODIFY_RM$LogContainerCountMin$LAYOUT() { return _TXFS_MODIFY_RM$LogContainerCountMin$LAYOUT_; }

    static final VarHandle _TXFS_MODIFY_RM$LogContainerCountMin$VH_ = _TXFS_MODIFY_RM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogContainerCountMin"));
    static final java.lang.invoke.VarHandle _TXFS_MODIFY_RM$LogContainerCountMin$VH() { return _TXFS_MODIFY_RM$LogContainerCountMin$VH_; }

    static final MemoryLayout _TXFS_MODIFY_RM$LogContainerCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_MODIFY_RM$LogContainerCount$LAYOUT() { return _TXFS_MODIFY_RM$LogContainerCount$LAYOUT_; }

    static final VarHandle _TXFS_MODIFY_RM$LogContainerCount$VH_ = _TXFS_MODIFY_RM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogContainerCount"));
    static final java.lang.invoke.VarHandle _TXFS_MODIFY_RM$LogContainerCount$VH() { return _TXFS_MODIFY_RM$LogContainerCount$VH_; }

    static final MemoryLayout _TXFS_MODIFY_RM$LogGrowthIncrement$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_MODIFY_RM$LogGrowthIncrement$LAYOUT() { return _TXFS_MODIFY_RM$LogGrowthIncrement$LAYOUT_; }

    static final VarHandle _TXFS_MODIFY_RM$LogGrowthIncrement$VH_ = _TXFS_MODIFY_RM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogGrowthIncrement"));
    static final java.lang.invoke.VarHandle _TXFS_MODIFY_RM$LogGrowthIncrement$VH() { return _TXFS_MODIFY_RM$LogGrowthIncrement$VH_; }

    static final MemoryLayout _TXFS_MODIFY_RM$LogAutoShrinkPercentage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_MODIFY_RM$LogAutoShrinkPercentage$LAYOUT() { return _TXFS_MODIFY_RM$LogAutoShrinkPercentage$LAYOUT_; }

    static final VarHandle _TXFS_MODIFY_RM$LogAutoShrinkPercentage$VH_ = _TXFS_MODIFY_RM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogAutoShrinkPercentage"));
    static final java.lang.invoke.VarHandle _TXFS_MODIFY_RM$LogAutoShrinkPercentage$VH() { return _TXFS_MODIFY_RM$LogAutoShrinkPercentage$VH_; }

    static final MemoryLayout _TXFS_MODIFY_RM$Reserved$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_MODIFY_RM$Reserved$LAYOUT() { return _TXFS_MODIFY_RM$Reserved$LAYOUT_; }

    static final VarHandle _TXFS_MODIFY_RM$Reserved$VH_ = _TXFS_MODIFY_RM$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _TXFS_MODIFY_RM$Reserved$VH() { return _TXFS_MODIFY_RM$Reserved$VH_; }

    static final MemoryLayout _TXFS_MODIFY_RM$LoggingMode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_MODIFY_RM$LoggingMode$LAYOUT() { return _TXFS_MODIFY_RM$LoggingMode$LAYOUT_; }

    static final VarHandle _TXFS_MODIFY_RM$LoggingMode$VH_ = _TXFS_MODIFY_RM$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LoggingMode"));
    static final java.lang.invoke.VarHandle _TXFS_MODIFY_RM$LoggingMode$VH() { return _TXFS_MODIFY_RM$LoggingMode$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("BytesRequired"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("TailLsn"),
        C_LONGLONG.withName("CurrentLsn"),
        C_LONGLONG.withName("ArchiveTailLsn"),
        C_LONGLONG.withName("LogContainerSize"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("HighestVirtualClock"),
        C_LONG.withName("LogContainerCount"),
        C_LONG.withName("LogContainerCountMax"),
        C_LONG.withName("LogContainerCountMin"),
        C_LONG.withName("LogGrowthIncrement"),
        C_LONG.withName("LogAutoShrinkPercentage"),
        C_LONG.withName("Flags"),
        C_SHORT.withName("LoggingMode"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("RmState"),
        C_LONGLONG.withName("LogCapacity"),
        C_LONGLONG.withName("LogFree"),
        C_LONGLONG.withName("TopsSize"),
        C_LONGLONG.withName("TopsUsed"),
        C_LONGLONG.withName("TransactionCount"),
        C_LONGLONG.withName("OnePCCount"),
        C_LONGLONG.withName("TwoPCCount"),
        C_LONGLONG.withName("NumberLogFileFull"),
        C_LONGLONG.withName("OldestTransactionAge"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("RMName"),
        C_LONG.withName("TmLogPathOffset"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_TXFS_QUERY_RM_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$BytesRequired$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$BytesRequired$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$BytesRequired$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$BytesRequired$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesRequired"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$BytesRequired$VH() { return _TXFS_QUERY_RM_INFORMATION$BytesRequired$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$TailLsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$TailLsn$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$TailLsn$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$TailLsn$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TailLsn"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$TailLsn$VH() { return _TXFS_QUERY_RM_INFORMATION$TailLsn$VH_; }

}

