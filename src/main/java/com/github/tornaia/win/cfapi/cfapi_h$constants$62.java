// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$62 extends cfapi_h$constants$61 {

    /* package-private */ cfapi_h$constants$62() {}
    static final MemoryLayout _STORAGE_HW_FIRMWARE_INFO$ImagePayloadMaxSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_INFO$ImagePayloadMaxSize$LAYOUT() { return _STORAGE_HW_FIRMWARE_INFO$ImagePayloadMaxSize$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_INFO$ImagePayloadMaxSize$VH_ = _STORAGE_HW_FIRMWARE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImagePayloadMaxSize"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_INFO$ImagePayloadMaxSize$VH() { return _STORAGE_HW_FIRMWARE_INFO$ImagePayloadMaxSize$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_CHAR.withName("Slot"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Reserved"),
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("BufferSize"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("ImageBuffer"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_STORAGE_HW_FIRMWARE_DOWNLOAD");
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$struct$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$struct$LAYOUT_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Version$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Version$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Version$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Version$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Version$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Size$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Size$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Size$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Size$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Size$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Flags$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Flags$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Flags$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Flags$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Flags$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Slot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Slot$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Slot$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Slot$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Slot"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Slot$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Slot$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$Offset$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Offset$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Offset$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$Offset$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$Offset$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$BufferSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD$BufferSize$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$BufferSize$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$BufferSize$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferSize"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD$BufferSize$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD$BufferSize$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_CHAR.withName("Slot"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Reserved"),
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("BufferSize"),
        C_LONG.withName("ImageSize"),
        C_LONG.withName("Reserved2"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("ImageBuffer"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_STORAGE_HW_FIRMWARE_DOWNLOAD_V2");
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Version$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Version$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Version$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Version$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Version$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Size$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Size$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Size$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Size$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Size$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Flags$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Flags$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Flags$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Flags$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Flags$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Slot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Slot$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Slot$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Slot$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Slot"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Slot$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Slot$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Offset$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Offset$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Offset$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Offset$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Offset$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$BufferSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$BufferSize$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$BufferSize$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$BufferSize$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferSize"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$BufferSize$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$BufferSize$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$ImageSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$ImageSize$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$ImageSize$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$ImageSize$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageSize"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$ImageSize$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$ImageSize$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Reserved2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Reserved2$LAYOUT() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Reserved2$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Reserved2$VH_ = _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Reserved2$VH() { return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2$Reserved2$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_CHAR.withName("Slot"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Reserved0")
    ).withName("_STORAGE_HW_FIRMWARE_ACTIVATE");
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$struct$LAYOUT() { return _STORAGE_HW_FIRMWARE_ACTIVATE$struct$LAYOUT_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$Version$LAYOUT() { return _STORAGE_HW_FIRMWARE_ACTIVATE$Version$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_ACTIVATE$Version$VH_ = _STORAGE_HW_FIRMWARE_ACTIVATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_ACTIVATE$Version$VH() { return _STORAGE_HW_FIRMWARE_ACTIVATE$Version$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$Size$LAYOUT() { return _STORAGE_HW_FIRMWARE_ACTIVATE$Size$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_ACTIVATE$Size$VH_ = _STORAGE_HW_FIRMWARE_ACTIVATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_ACTIVATE$Size$VH() { return _STORAGE_HW_FIRMWARE_ACTIVATE$Size$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$Flags$LAYOUT() { return _STORAGE_HW_FIRMWARE_ACTIVATE$Flags$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_ACTIVATE$Flags$VH_ = _STORAGE_HW_FIRMWARE_ACTIVATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_ACTIVATE$Flags$VH() { return _STORAGE_HW_FIRMWARE_ACTIVATE$Flags$VH_; }

    static final MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$Slot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_HW_FIRMWARE_ACTIVATE$Slot$LAYOUT() { return _STORAGE_HW_FIRMWARE_ACTIVATE$Slot$LAYOUT_; }

    static final VarHandle _STORAGE_HW_FIRMWARE_ACTIVATE$Slot$VH_ = _STORAGE_HW_FIRMWARE_ACTIVATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Slot"));
    static final java.lang.invoke.VarHandle _STORAGE_HW_FIRMWARE_ACTIVATE$Slot$VH() { return _STORAGE_HW_FIRMWARE_ACTIVATE$Slot$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Length"),
        C_INT.withName("ProtocolType"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ReturnStatus"),
        C_LONG.withName("ErrorCode"),
        C_LONG.withName("CommandLength"),
        C_LONG.withName("ErrorInfoLength"),
        C_LONG.withName("DataToDeviceTransferLength"),
        C_LONG.withName("DataFromDeviceTransferLength"),
        C_LONG.withName("TimeOutValue"),
        C_LONG.withName("ErrorInfoOffset"),
        C_LONG.withName("DataToDeviceBufferOffset"),
        C_LONG.withName("DataFromDeviceBufferOffset"),
        C_LONG.withName("CommandSpecific"),
        C_LONG.withName("Reserved0"),
        C_LONG.withName("FixedProtocolReturnData"),
        MemoryLayout.ofSequence(3, C_LONG).withName("Reserved1"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Command"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_STORAGE_PROTOCOL_COMMAND");
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$Version$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$Version$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$Version$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$Version$VH() { return _STORAGE_PROTOCOL_COMMAND$Version$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$Length$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$Length$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$Length$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$Length$VH() { return _STORAGE_PROTOCOL_COMMAND$Length$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$ProtocolType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$ProtocolType$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$ProtocolType$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$ProtocolType$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProtocolType"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$ProtocolType$VH() { return _STORAGE_PROTOCOL_COMMAND$ProtocolType$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$Flags$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$Flags$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$Flags$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$Flags$VH() { return _STORAGE_PROTOCOL_COMMAND$Flags$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$ReturnStatus$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$ReturnStatus$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$ReturnStatus$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$ReturnStatus$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReturnStatus"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$ReturnStatus$VH() { return _STORAGE_PROTOCOL_COMMAND$ReturnStatus$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$ErrorCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$ErrorCode$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$ErrorCode$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$ErrorCode$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ErrorCode"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$ErrorCode$VH() { return _STORAGE_PROTOCOL_COMMAND$ErrorCode$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$CommandLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$CommandLength$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$CommandLength$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$CommandLength$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CommandLength"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$CommandLength$VH() { return _STORAGE_PROTOCOL_COMMAND$CommandLength$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$ErrorInfoLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$ErrorInfoLength$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$ErrorInfoLength$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$ErrorInfoLength$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ErrorInfoLength"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$ErrorInfoLength$VH() { return _STORAGE_PROTOCOL_COMMAND$ErrorInfoLength$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$DataToDeviceTransferLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$DataToDeviceTransferLength$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$DataToDeviceTransferLength$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$DataToDeviceTransferLength$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataToDeviceTransferLength"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$DataToDeviceTransferLength$VH() { return _STORAGE_PROTOCOL_COMMAND$DataToDeviceTransferLength$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$DataFromDeviceTransferLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$DataFromDeviceTransferLength$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$DataFromDeviceTransferLength$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$DataFromDeviceTransferLength$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataFromDeviceTransferLength"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$DataFromDeviceTransferLength$VH() { return _STORAGE_PROTOCOL_COMMAND$DataFromDeviceTransferLength$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$TimeOutValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$TimeOutValue$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$TimeOutValue$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$TimeOutValue$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeOutValue"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$TimeOutValue$VH() { return _STORAGE_PROTOCOL_COMMAND$TimeOutValue$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$ErrorInfoOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$ErrorInfoOffset$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$ErrorInfoOffset$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$ErrorInfoOffset$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ErrorInfoOffset"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$ErrorInfoOffset$VH() { return _STORAGE_PROTOCOL_COMMAND$ErrorInfoOffset$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$DataToDeviceBufferOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$DataToDeviceBufferOffset$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$DataToDeviceBufferOffset$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$DataToDeviceBufferOffset$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataToDeviceBufferOffset"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$DataToDeviceBufferOffset$VH() { return _STORAGE_PROTOCOL_COMMAND$DataToDeviceBufferOffset$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$DataFromDeviceBufferOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$DataFromDeviceBufferOffset$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$DataFromDeviceBufferOffset$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$DataFromDeviceBufferOffset$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataFromDeviceBufferOffset"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$DataFromDeviceBufferOffset$VH() { return _STORAGE_PROTOCOL_COMMAND$DataFromDeviceBufferOffset$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$CommandSpecific$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$CommandSpecific$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$CommandSpecific$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$CommandSpecific$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CommandSpecific"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$CommandSpecific$VH() { return _STORAGE_PROTOCOL_COMMAND$CommandSpecific$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$Reserved0$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$Reserved0$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$Reserved0$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$Reserved0$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved0"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$Reserved0$VH() { return _STORAGE_PROTOCOL_COMMAND$Reserved0$VH_; }

    static final MemoryLayout _STORAGE_PROTOCOL_COMMAND$FixedProtocolReturnData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_PROTOCOL_COMMAND$FixedProtocolReturnData$LAYOUT() { return _STORAGE_PROTOCOL_COMMAND$FixedProtocolReturnData$LAYOUT_; }

    static final VarHandle _STORAGE_PROTOCOL_COMMAND$FixedProtocolReturnData$VH_ = _STORAGE_PROTOCOL_COMMAND$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FixedProtocolReturnData"));
    static final java.lang.invoke.VarHandle _STORAGE_PROTOCOL_COMMAND$FixedProtocolReturnData$VH() { return _STORAGE_PROTOCOL_COMMAND$FixedProtocolReturnData$VH_; }

    static final int StorAttributeMgmt_ClearAttribute() { return (int)0L; }

    static final int StorAttributeMgmt_SetAttribute() { return (int)1L; }

    static final int StorAttributeMgmt_ResetAttribute() { return (int)2L; }

    static final MemoryLayout _STORAGE_ATTRIBUTE_MGMT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_INT.withName("Action"),
        C_LONG.withName("Attribute")
    ).withName("_STORAGE_ATTRIBUTE_MGMT");
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_ATTRIBUTE_MGMT$struct$LAYOUT() { return _STORAGE_ATTRIBUTE_MGMT$struct$LAYOUT_; }

    static final MemoryLayout _STORAGE_ATTRIBUTE_MGMT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_ATTRIBUTE_MGMT$Version$LAYOUT() { return _STORAGE_ATTRIBUTE_MGMT$Version$LAYOUT_; }

    static final VarHandle _STORAGE_ATTRIBUTE_MGMT$Version$VH_ = _STORAGE_ATTRIBUTE_MGMT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _STORAGE_ATTRIBUTE_MGMT$Version$VH() { return _STORAGE_ATTRIBUTE_MGMT$Version$VH_; }

    static final MemoryLayout _STORAGE_ATTRIBUTE_MGMT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_ATTRIBUTE_MGMT$Size$LAYOUT() { return _STORAGE_ATTRIBUTE_MGMT$Size$LAYOUT_; }

    static final VarHandle _STORAGE_ATTRIBUTE_MGMT$Size$VH_ = _STORAGE_ATTRIBUTE_MGMT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _STORAGE_ATTRIBUTE_MGMT$Size$VH() { return _STORAGE_ATTRIBUTE_MGMT$Size$VH_; }

    static final MemoryLayout _STORAGE_ATTRIBUTE_MGMT$Action$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_ATTRIBUTE_MGMT$Action$LAYOUT() { return _STORAGE_ATTRIBUTE_MGMT$Action$LAYOUT_; }

    static final VarHandle _STORAGE_ATTRIBUTE_MGMT$Action$VH_ = _STORAGE_ATTRIBUTE_MGMT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Action"));
    static final java.lang.invoke.VarHandle _STORAGE_ATTRIBUTE_MGMT$Action$VH() { return _STORAGE_ATTRIBUTE_MGMT$Action$VH_; }

    static final MemoryLayout _STORAGE_ATTRIBUTE_MGMT$Attribute$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_ATTRIBUTE_MGMT$Attribute$LAYOUT() { return _STORAGE_ATTRIBUTE_MGMT$Attribute$LAYOUT_; }

    static final VarHandle _STORAGE_ATTRIBUTE_MGMT$Attribute$VH_ = _STORAGE_ATTRIBUTE_MGMT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Attribute"));
    static final java.lang.invoke.VarHandle _STORAGE_ATTRIBUTE_MGMT$Attribute$VH() { return _STORAGE_ATTRIBUTE_MGMT$Attribute$VH_; }

    static final MemoryLayout _SCM_PD_HEALTH_NOTIFICATION_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("DeviceGuid")
    ).withName("_SCM_PD_HEALTH_NOTIFICATION_DATA");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_HEALTH_NOTIFICATION_DATA$struct$LAYOUT() { return _SCM_PD_HEALTH_NOTIFICATION_DATA$struct$LAYOUT_; }

    static final MemoryLayout _SCM_LOGICAL_DEVICE_INSTANCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("DeviceGuid"),
        MemoryLayout.ofSequence(256, C_SHORT).withName("SymbolicLink")
    ).withName("_SCM_LOGICAL_DEVICE_INSTANCE");
    static final jdk.incubator.foreign.MemoryLayout _SCM_LOGICAL_DEVICE_INSTANCE$struct$LAYOUT() { return _SCM_LOGICAL_DEVICE_INSTANCE$struct$LAYOUT_; }

    static final MemoryLayout _SCM_LOGICAL_DEVICE_INSTANCE$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_LOGICAL_DEVICE_INSTANCE$Version$LAYOUT() { return _SCM_LOGICAL_DEVICE_INSTANCE$Version$LAYOUT_; }

    static final VarHandle _SCM_LOGICAL_DEVICE_INSTANCE$Version$VH_ = _SCM_LOGICAL_DEVICE_INSTANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_LOGICAL_DEVICE_INSTANCE$Version$VH() { return _SCM_LOGICAL_DEVICE_INSTANCE$Version$VH_; }

    static final MemoryLayout _SCM_LOGICAL_DEVICE_INSTANCE$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_LOGICAL_DEVICE_INSTANCE$Size$LAYOUT() { return _SCM_LOGICAL_DEVICE_INSTANCE$Size$LAYOUT_; }

    static final VarHandle _SCM_LOGICAL_DEVICE_INSTANCE$Size$VH_ = _SCM_LOGICAL_DEVICE_INSTANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_LOGICAL_DEVICE_INSTANCE$Size$VH() { return _SCM_LOGICAL_DEVICE_INSTANCE$Size$VH_; }

    static final MemoryLayout _SCM_LOGICAL_DEVICES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("DeviceCount"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Version"),
            C_LONG.withName("Size"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("DeviceGuid"),
            MemoryLayout.ofSequence(256, C_SHORT).withName("SymbolicLink")
        ).withName("_SCM_LOGICAL_DEVICE_INSTANCE")).withName("Devices")
    ).withName("_SCM_LOGICAL_DEVICES");
    static final jdk.incubator.foreign.MemoryLayout _SCM_LOGICAL_DEVICES$struct$LAYOUT() { return _SCM_LOGICAL_DEVICES$struct$LAYOUT_; }

    static final MemoryLayout _SCM_LOGICAL_DEVICES$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_LOGICAL_DEVICES$Version$LAYOUT() { return _SCM_LOGICAL_DEVICES$Version$LAYOUT_; }

    static final VarHandle _SCM_LOGICAL_DEVICES$Version$VH_ = _SCM_LOGICAL_DEVICES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_LOGICAL_DEVICES$Version$VH() { return _SCM_LOGICAL_DEVICES$Version$VH_; }

    static final MemoryLayout _SCM_LOGICAL_DEVICES$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_LOGICAL_DEVICES$Size$LAYOUT() { return _SCM_LOGICAL_DEVICES$Size$LAYOUT_; }

    static final VarHandle _SCM_LOGICAL_DEVICES$Size$VH_ = _SCM_LOGICAL_DEVICES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_LOGICAL_DEVICES$Size$VH() { return _SCM_LOGICAL_DEVICES$Size$VH_; }

    static final MemoryLayout _SCM_LOGICAL_DEVICES$DeviceCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_LOGICAL_DEVICES$DeviceCount$LAYOUT() { return _SCM_LOGICAL_DEVICES$DeviceCount$LAYOUT_; }

    static final VarHandle _SCM_LOGICAL_DEVICES$DeviceCount$VH_ = _SCM_LOGICAL_DEVICES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeviceCount"));
    static final java.lang.invoke.VarHandle _SCM_LOGICAL_DEVICES$DeviceCount$VH() { return _SCM_LOGICAL_DEVICES$DeviceCount$VH_; }

    static final MemoryLayout _SCM_PHYSICAL_DEVICE_INSTANCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("NfitHandle"),
        MemoryLayout.ofSequence(256, C_SHORT).withName("SymbolicLink")
    ).withName("_SCM_PHYSICAL_DEVICE_INSTANCE");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PHYSICAL_DEVICE_INSTANCE$struct$LAYOUT() { return _SCM_PHYSICAL_DEVICE_INSTANCE$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PHYSICAL_DEVICE_INSTANCE$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PHYSICAL_DEVICE_INSTANCE$Version$LAYOUT() { return _SCM_PHYSICAL_DEVICE_INSTANCE$Version$LAYOUT_; }

    static final VarHandle _SCM_PHYSICAL_DEVICE_INSTANCE$Version$VH_ = _SCM_PHYSICAL_DEVICE_INSTANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PHYSICAL_DEVICE_INSTANCE$Version$VH() { return _SCM_PHYSICAL_DEVICE_INSTANCE$Version$VH_; }

    static final MemoryLayout _SCM_PHYSICAL_DEVICE_INSTANCE$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PHYSICAL_DEVICE_INSTANCE$Size$LAYOUT() { return _SCM_PHYSICAL_DEVICE_INSTANCE$Size$LAYOUT_; }

    static final VarHandle _SCM_PHYSICAL_DEVICE_INSTANCE$Size$VH_ = _SCM_PHYSICAL_DEVICE_INSTANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PHYSICAL_DEVICE_INSTANCE$Size$VH() { return _SCM_PHYSICAL_DEVICE_INSTANCE$Size$VH_; }

    static final MemoryLayout _SCM_PHYSICAL_DEVICE_INSTANCE$NfitHandle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PHYSICAL_DEVICE_INSTANCE$NfitHandle$LAYOUT() { return _SCM_PHYSICAL_DEVICE_INSTANCE$NfitHandle$LAYOUT_; }

    static final VarHandle _SCM_PHYSICAL_DEVICE_INSTANCE$NfitHandle$VH_ = _SCM_PHYSICAL_DEVICE_INSTANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NfitHandle"));
    static final java.lang.invoke.VarHandle _SCM_PHYSICAL_DEVICE_INSTANCE$NfitHandle$VH() { return _SCM_PHYSICAL_DEVICE_INSTANCE$NfitHandle$VH_; }

    static final MemoryLayout _SCM_PHYSICAL_DEVICES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("DeviceCount"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Version"),
            C_LONG.withName("Size"),
            C_LONG.withName("NfitHandle"),
            MemoryLayout.ofSequence(256, C_SHORT).withName("SymbolicLink")
        ).withName("_SCM_PHYSICAL_DEVICE_INSTANCE")).withName("Devices")
    ).withName("_SCM_PHYSICAL_DEVICES");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PHYSICAL_DEVICES$struct$LAYOUT() { return _SCM_PHYSICAL_DEVICES$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PHYSICAL_DEVICES$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PHYSICAL_DEVICES$Version$LAYOUT() { return _SCM_PHYSICAL_DEVICES$Version$LAYOUT_; }

    static final VarHandle _SCM_PHYSICAL_DEVICES$Version$VH_ = _SCM_PHYSICAL_DEVICES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PHYSICAL_DEVICES$Version$VH() { return _SCM_PHYSICAL_DEVICES$Version$VH_; }

    static final MemoryLayout _SCM_PHYSICAL_DEVICES$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PHYSICAL_DEVICES$Size$LAYOUT() { return _SCM_PHYSICAL_DEVICES$Size$LAYOUT_; }

    static final VarHandle _SCM_PHYSICAL_DEVICES$Size$VH_ = _SCM_PHYSICAL_DEVICES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PHYSICAL_DEVICES$Size$VH() { return _SCM_PHYSICAL_DEVICES$Size$VH_; }

    static final MemoryLayout _SCM_PHYSICAL_DEVICES$DeviceCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PHYSICAL_DEVICES$DeviceCount$LAYOUT() { return _SCM_PHYSICAL_DEVICES$DeviceCount$LAYOUT_; }

    static final VarHandle _SCM_PHYSICAL_DEVICES$DeviceCount$VH_ = _SCM_PHYSICAL_DEVICES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeviceCount"));
    static final java.lang.invoke.VarHandle _SCM_PHYSICAL_DEVICES$DeviceCount$VH() { return _SCM_PHYSICAL_DEVICES$DeviceCount$VH_; }

    static final int ScmRegionFlagNone() { return (int)0L; }

    static final int ScmRegionFlagLabel() { return (int)1L; }

    static final MemoryLayout _SCM_REGION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONG.withName("NfitHandle"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("LogicalDeviceGuid"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("AddressRangeType"),
        C_LONG.withName("AssociatedId"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Length"),
        C_LONGLONG.withName("StartingDPA"),
        C_LONGLONG.withName("BaseSPA"),
        C_LONGLONG.withName("SPAOffset"),
        C_LONGLONG.withName("RegionOffset")
    ).withName("_SCM_REGION");
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$struct$LAYOUT() { return _SCM_REGION$struct$LAYOUT_; }

    static final MemoryLayout _SCM_REGION$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$Version$LAYOUT() { return _SCM_REGION$Version$LAYOUT_; }

    static final VarHandle _SCM_REGION$Version$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_REGION$Version$VH() { return _SCM_REGION$Version$VH_; }

    static final MemoryLayout _SCM_REGION$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$Size$LAYOUT() { return _SCM_REGION$Size$LAYOUT_; }

    static final VarHandle _SCM_REGION$Size$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_REGION$Size$VH() { return _SCM_REGION$Size$VH_; }

    static final MemoryLayout _SCM_REGION$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$Flags$LAYOUT() { return _SCM_REGION$Flags$LAYOUT_; }

    static final VarHandle _SCM_REGION$Flags$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SCM_REGION$Flags$VH() { return _SCM_REGION$Flags$VH_; }

    static final MemoryLayout _SCM_REGION$NfitHandle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$NfitHandle$LAYOUT() { return _SCM_REGION$NfitHandle$LAYOUT_; }

    static final VarHandle _SCM_REGION$NfitHandle$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NfitHandle"));
    static final java.lang.invoke.VarHandle _SCM_REGION$NfitHandle$VH() { return _SCM_REGION$NfitHandle$VH_; }

    static final MemoryLayout _SCM_REGION$AssociatedId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$AssociatedId$LAYOUT() { return _SCM_REGION$AssociatedId$LAYOUT_; }

    static final VarHandle _SCM_REGION$AssociatedId$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AssociatedId"));
    static final java.lang.invoke.VarHandle _SCM_REGION$AssociatedId$VH() { return _SCM_REGION$AssociatedId$VH_; }

    static final MemoryLayout _SCM_REGION$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$Length$LAYOUT() { return _SCM_REGION$Length$LAYOUT_; }

    static final VarHandle _SCM_REGION$Length$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _SCM_REGION$Length$VH() { return _SCM_REGION$Length$VH_; }

    static final MemoryLayout _SCM_REGION$StartingDPA$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$StartingDPA$LAYOUT() { return _SCM_REGION$StartingDPA$LAYOUT_; }

    static final VarHandle _SCM_REGION$StartingDPA$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartingDPA"));
    static final java.lang.invoke.VarHandle _SCM_REGION$StartingDPA$VH() { return _SCM_REGION$StartingDPA$VH_; }

    static final MemoryLayout _SCM_REGION$BaseSPA$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$BaseSPA$LAYOUT() { return _SCM_REGION$BaseSPA$LAYOUT_; }

    static final VarHandle _SCM_REGION$BaseSPA$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseSPA"));
    static final java.lang.invoke.VarHandle _SCM_REGION$BaseSPA$VH() { return _SCM_REGION$BaseSPA$VH_; }

    static final MemoryLayout _SCM_REGION$SPAOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$SPAOffset$LAYOUT() { return _SCM_REGION$SPAOffset$LAYOUT_; }

    static final VarHandle _SCM_REGION$SPAOffset$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SPAOffset"));
    static final java.lang.invoke.VarHandle _SCM_REGION$SPAOffset$VH() { return _SCM_REGION$SPAOffset$VH_; }

    static final MemoryLayout _SCM_REGION$RegionOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGION$RegionOffset$LAYOUT() { return _SCM_REGION$RegionOffset$LAYOUT_; }

    static final VarHandle _SCM_REGION$RegionOffset$VH_ = _SCM_REGION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegionOffset"));
    static final java.lang.invoke.VarHandle _SCM_REGION$RegionOffset$VH() { return _SCM_REGION$RegionOffset$VH_; }

    static final MemoryLayout _SCM_REGIONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("RegionCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Version"),
            C_LONG.withName("Size"),
            C_LONG.withName("Flags"),
            C_LONG.withName("NfitHandle"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("LogicalDeviceGuid"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("AddressRangeType"),
            C_LONG.withName("AssociatedId"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("Length"),
            C_LONGLONG.withName("StartingDPA"),
            C_LONGLONG.withName("BaseSPA"),
            C_LONGLONG.withName("SPAOffset"),
            C_LONGLONG.withName("RegionOffset")
        ).withName("_SCM_REGION")).withName("Regions")
    ).withName("_SCM_REGIONS");
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGIONS$struct$LAYOUT() { return _SCM_REGIONS$struct$LAYOUT_; }

    static final MemoryLayout _SCM_REGIONS$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGIONS$Version$LAYOUT() { return _SCM_REGIONS$Version$LAYOUT_; }

    static final VarHandle _SCM_REGIONS$Version$VH_ = _SCM_REGIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_REGIONS$Version$VH() { return _SCM_REGIONS$Version$VH_; }

    static final MemoryLayout _SCM_REGIONS$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGIONS$Size$LAYOUT() { return _SCM_REGIONS$Size$LAYOUT_; }

    static final VarHandle _SCM_REGIONS$Size$VH_ = _SCM_REGIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_REGIONS$Size$VH() { return _SCM_REGIONS$Size$VH_; }

    static final MemoryLayout _SCM_REGIONS$RegionCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_REGIONS$RegionCount$LAYOUT() { return _SCM_REGIONS$RegionCount$LAYOUT_; }

    static final VarHandle _SCM_REGIONS$RegionCount$VH_ = _SCM_REGIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegionCount"));
    static final java.lang.invoke.VarHandle _SCM_REGIONS$RegionCount$VH() { return _SCM_REGIONS$RegionCount$VH_; }

    static final MemoryLayout _SCM_INTERLEAVED_PD_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("DeviceHandle"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("DeviceGuid")
    ).withName("_SCM_INTERLEAVED_PD_INFO");
    static final jdk.incubator.foreign.MemoryLayout _SCM_INTERLEAVED_PD_INFO$struct$LAYOUT() { return _SCM_INTERLEAVED_PD_INFO$struct$LAYOUT_; }

    static final MemoryLayout _SCM_INTERLEAVED_PD_INFO$DeviceHandle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_INTERLEAVED_PD_INFO$DeviceHandle$LAYOUT() { return _SCM_INTERLEAVED_PD_INFO$DeviceHandle$LAYOUT_; }

    static final VarHandle _SCM_INTERLEAVED_PD_INFO$DeviceHandle$VH_ = _SCM_INTERLEAVED_PD_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeviceHandle"));
    static final java.lang.invoke.VarHandle _SCM_INTERLEAVED_PD_INFO$DeviceHandle$VH() { return _SCM_INTERLEAVED_PD_INFO$DeviceHandle$VH_; }

    static final MemoryLayout _SCM_LD_INTERLEAVE_SET_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("InterleaveSetSize"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("DeviceHandle"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("DeviceGuid")
        ).withName("_SCM_INTERLEAVED_PD_INFO")).withName("InterleaveSet")
    ).withName("_SCM_LD_INTERLEAVE_SET_INFO");
    static final jdk.incubator.foreign.MemoryLayout _SCM_LD_INTERLEAVE_SET_INFO$struct$LAYOUT() { return _SCM_LD_INTERLEAVE_SET_INFO$struct$LAYOUT_; }

    static final MemoryLayout _SCM_LD_INTERLEAVE_SET_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_LD_INTERLEAVE_SET_INFO$Version$LAYOUT() { return _SCM_LD_INTERLEAVE_SET_INFO$Version$LAYOUT_; }

    static final VarHandle _SCM_LD_INTERLEAVE_SET_INFO$Version$VH_ = _SCM_LD_INTERLEAVE_SET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_LD_INTERLEAVE_SET_INFO$Version$VH() { return _SCM_LD_INTERLEAVE_SET_INFO$Version$VH_; }

    static final MemoryLayout _SCM_LD_INTERLEAVE_SET_INFO$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_LD_INTERLEAVE_SET_INFO$Size$LAYOUT() { return _SCM_LD_INTERLEAVE_SET_INFO$Size$LAYOUT_; }

    static final VarHandle _SCM_LD_INTERLEAVE_SET_INFO$Size$VH_ = _SCM_LD_INTERLEAVE_SET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_LD_INTERLEAVE_SET_INFO$Size$VH() { return _SCM_LD_INTERLEAVE_SET_INFO$Size$VH_; }

    static final MemoryLayout _SCM_LD_INTERLEAVE_SET_INFO$InterleaveSetSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_LD_INTERLEAVE_SET_INFO$InterleaveSetSize$LAYOUT() { return _SCM_LD_INTERLEAVE_SET_INFO$InterleaveSetSize$LAYOUT_; }

    static final VarHandle _SCM_LD_INTERLEAVE_SET_INFO$InterleaveSetSize$VH_ = _SCM_LD_INTERLEAVE_SET_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InterleaveSetSize"));
    static final java.lang.invoke.VarHandle _SCM_LD_INTERLEAVE_SET_INFO$InterleaveSetSize$VH() { return _SCM_LD_INTERLEAVE_SET_INFO$InterleaveSetSize$VH_; }

    static final int ScmPhysicalDeviceQuery_Descriptor() { return (int)0L; }

    static final int ScmPhysicalDeviceQuery_IsSupported() { return (int)1L; }

    static final int ScmPhysicalDeviceQuery_Max() { return (int)2L; }

    static final int ScmPhysicalDeviceProperty_DeviceInfo() { return (int)0L; }

    static final int ScmPhysicalDeviceProperty_ManagementStatus() { return (int)1L; }

    static final int ScmPhysicalDeviceProperty_FirmwareInfo() { return (int)2L; }

    static final int ScmPhysicalDeviceProperty_LocationString() { return (int)3L; }

    static final int ScmPhysicalDeviceProperty_DeviceSpecificInfo() { return (int)4L; }

    static final int ScmPhysicalDeviceProperty_DeviceHandle() { return (int)5L; }

    static final int ScmPhysicalDeviceProperty_Max() { return (int)6L; }

    static final MemoryLayout _SCM_PD_PROPERTY_QUERY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_INT.withName("PropertyId"),
        C_INT.withName("QueryType"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("AdditionalParameters"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_SCM_PD_PROPERTY_QUERY");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PROPERTY_QUERY$struct$LAYOUT() { return _SCM_PD_PROPERTY_QUERY$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_PROPERTY_QUERY$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PROPERTY_QUERY$Version$LAYOUT() { return _SCM_PD_PROPERTY_QUERY$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_PROPERTY_QUERY$Version$VH_ = _SCM_PD_PROPERTY_QUERY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_PROPERTY_QUERY$Version$VH() { return _SCM_PD_PROPERTY_QUERY$Version$VH_; }

    static final MemoryLayout _SCM_PD_PROPERTY_QUERY$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PROPERTY_QUERY$Size$LAYOUT() { return _SCM_PD_PROPERTY_QUERY$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_PROPERTY_QUERY$Size$VH_ = _SCM_PD_PROPERTY_QUERY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_PROPERTY_QUERY$Size$VH() { return _SCM_PD_PROPERTY_QUERY$Size$VH_; }

    static final MemoryLayout _SCM_PD_PROPERTY_QUERY$PropertyId$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PROPERTY_QUERY$PropertyId$LAYOUT() { return _SCM_PD_PROPERTY_QUERY$PropertyId$LAYOUT_; }

    static final VarHandle _SCM_PD_PROPERTY_QUERY$PropertyId$VH_ = _SCM_PD_PROPERTY_QUERY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PropertyId"));
    static final java.lang.invoke.VarHandle _SCM_PD_PROPERTY_QUERY$PropertyId$VH() { return _SCM_PD_PROPERTY_QUERY$PropertyId$VH_; }

    static final MemoryLayout _SCM_PD_PROPERTY_QUERY$QueryType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PROPERTY_QUERY$QueryType$LAYOUT() { return _SCM_PD_PROPERTY_QUERY$QueryType$LAYOUT_; }

    static final VarHandle _SCM_PD_PROPERTY_QUERY$QueryType$VH_ = _SCM_PD_PROPERTY_QUERY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("QueryType"));
    static final java.lang.invoke.VarHandle _SCM_PD_PROPERTY_QUERY$QueryType$VH() { return _SCM_PD_PROPERTY_QUERY$QueryType$VH_; }

    static final MemoryLayout _SCM_PD_DESCRIPTOR_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size")
    ).withName("_SCM_PD_DESCRIPTOR_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DESCRIPTOR_HEADER$struct$LAYOUT() { return _SCM_PD_DESCRIPTOR_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_DESCRIPTOR_HEADER$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DESCRIPTOR_HEADER$Version$LAYOUT() { return _SCM_PD_DESCRIPTOR_HEADER$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_DESCRIPTOR_HEADER$Version$VH_ = _SCM_PD_DESCRIPTOR_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_DESCRIPTOR_HEADER$Version$VH() { return _SCM_PD_DESCRIPTOR_HEADER$Version$VH_; }

    static final MemoryLayout _SCM_PD_DESCRIPTOR_HEADER$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DESCRIPTOR_HEADER$Size$LAYOUT() { return _SCM_PD_DESCRIPTOR_HEADER$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_DESCRIPTOR_HEADER$Size$VH_ = _SCM_PD_DESCRIPTOR_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_DESCRIPTOR_HEADER$Size$VH() { return _SCM_PD_DESCRIPTOR_HEADER$Size$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_HANDLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("DeviceGuid"),
        C_LONG.withName("DeviceHandle")
    ).withName("_SCM_PD_DEVICE_HANDLE");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_HANDLE$struct$LAYOUT() { return _SCM_PD_DEVICE_HANDLE$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_DEVICE_HANDLE$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_HANDLE$Version$LAYOUT() { return _SCM_PD_DEVICE_HANDLE$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_HANDLE$Version$VH_ = _SCM_PD_DEVICE_HANDLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_HANDLE$Version$VH() { return _SCM_PD_DEVICE_HANDLE$Version$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_HANDLE$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_HANDLE$Size$LAYOUT() { return _SCM_PD_DEVICE_HANDLE$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_HANDLE$Size$VH_ = _SCM_PD_DEVICE_HANDLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_HANDLE$Size$VH() { return _SCM_PD_DEVICE_HANDLE$Size$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_HANDLE$DeviceHandle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_HANDLE$DeviceHandle$LAYOUT() { return _SCM_PD_DEVICE_HANDLE$DeviceHandle$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_HANDLE$DeviceHandle$VH_ = _SCM_PD_DEVICE_HANDLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeviceHandle"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_HANDLE$DeviceHandle$VH() { return _SCM_PD_DEVICE_HANDLE$DeviceHandle$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("DeviceGuid"),
        C_LONG.withName("UnsafeShutdownCount"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("PersistentMemorySizeInBytes"),
        C_LONGLONG.withName("VolatileMemorySizeInBytes"),
        C_LONGLONG.withName("TotalMemorySizeInBytes"),
        C_LONG.withName("SlotNumber"),
        C_LONG.withName("DeviceHandle"),
        C_SHORT.withName("PhysicalId"),
        C_CHAR.withName("NumberOfFormatInterfaceCodes"),
        MemoryLayout.ofPaddingBits(8),
        MemoryLayout.ofSequence(8, C_SHORT).withName("FormatInterfaceCodes"),
        C_LONG.withName("VendorId"),
        C_LONG.withName("ProductId"),
        C_LONG.withName("SubsystemDeviceId"),
        C_LONG.withName("SubsystemVendorId"),
        C_CHAR.withName("ManufacturingLocation"),
        C_CHAR.withName("ManufacturingWeek"),
        C_CHAR.withName("ManufacturingYear"),
        MemoryLayout.ofPaddingBits(8),
        C_LONG.withName("SerialNumber4Byte"),
        C_LONG.withName("SerialNumberLengthInChars"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("SerialNumber"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_SCM_PD_DEVICE_INFO");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$struct$LAYOUT() { return _SCM_PD_DEVICE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$Version$LAYOUT() { return _SCM_PD_DEVICE_INFO$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$Version$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$Version$VH() { return _SCM_PD_DEVICE_INFO$Version$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$Size$LAYOUT() { return _SCM_PD_DEVICE_INFO$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$Size$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$Size$VH() { return _SCM_PD_DEVICE_INFO$Size$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$UnsafeShutdownCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$UnsafeShutdownCount$LAYOUT() { return _SCM_PD_DEVICE_INFO$UnsafeShutdownCount$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$UnsafeShutdownCount$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UnsafeShutdownCount"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$UnsafeShutdownCount$VH() { return _SCM_PD_DEVICE_INFO$UnsafeShutdownCount$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$PersistentMemorySizeInBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$PersistentMemorySizeInBytes$LAYOUT() { return _SCM_PD_DEVICE_INFO$PersistentMemorySizeInBytes$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$PersistentMemorySizeInBytes$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PersistentMemorySizeInBytes"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$PersistentMemorySizeInBytes$VH() { return _SCM_PD_DEVICE_INFO$PersistentMemorySizeInBytes$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$VolatileMemorySizeInBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$VolatileMemorySizeInBytes$LAYOUT() { return _SCM_PD_DEVICE_INFO$VolatileMemorySizeInBytes$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$VolatileMemorySizeInBytes$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolatileMemorySizeInBytes"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$VolatileMemorySizeInBytes$VH() { return _SCM_PD_DEVICE_INFO$VolatileMemorySizeInBytes$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$TotalMemorySizeInBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$TotalMemorySizeInBytes$LAYOUT() { return _SCM_PD_DEVICE_INFO$TotalMemorySizeInBytes$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$TotalMemorySizeInBytes$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalMemorySizeInBytes"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$TotalMemorySizeInBytes$VH() { return _SCM_PD_DEVICE_INFO$TotalMemorySizeInBytes$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$SlotNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$SlotNumber$LAYOUT() { return _SCM_PD_DEVICE_INFO$SlotNumber$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$SlotNumber$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SlotNumber"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$SlotNumber$VH() { return _SCM_PD_DEVICE_INFO$SlotNumber$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$DeviceHandle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$DeviceHandle$LAYOUT() { return _SCM_PD_DEVICE_INFO$DeviceHandle$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$DeviceHandle$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeviceHandle"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$DeviceHandle$VH() { return _SCM_PD_DEVICE_INFO$DeviceHandle$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$PhysicalId$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$PhysicalId$LAYOUT() { return _SCM_PD_DEVICE_INFO$PhysicalId$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$PhysicalId$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("PhysicalId"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$PhysicalId$VH() { return _SCM_PD_DEVICE_INFO$PhysicalId$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$NumberOfFormatInterfaceCodes$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$NumberOfFormatInterfaceCodes$LAYOUT() { return _SCM_PD_DEVICE_INFO$NumberOfFormatInterfaceCodes$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$NumberOfFormatInterfaceCodes$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NumberOfFormatInterfaceCodes"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$NumberOfFormatInterfaceCodes$VH() { return _SCM_PD_DEVICE_INFO$NumberOfFormatInterfaceCodes$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$VendorId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$VendorId$LAYOUT() { return _SCM_PD_DEVICE_INFO$VendorId$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$VendorId$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VendorId"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$VendorId$VH() { return _SCM_PD_DEVICE_INFO$VendorId$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$ProductId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$ProductId$LAYOUT() { return _SCM_PD_DEVICE_INFO$ProductId$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$ProductId$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProductId"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$ProductId$VH() { return _SCM_PD_DEVICE_INFO$ProductId$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$SubsystemDeviceId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$SubsystemDeviceId$LAYOUT() { return _SCM_PD_DEVICE_INFO$SubsystemDeviceId$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$SubsystemDeviceId$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SubsystemDeviceId"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$SubsystemDeviceId$VH() { return _SCM_PD_DEVICE_INFO$SubsystemDeviceId$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$SubsystemVendorId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$SubsystemVendorId$LAYOUT() { return _SCM_PD_DEVICE_INFO$SubsystemVendorId$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$SubsystemVendorId$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SubsystemVendorId"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$SubsystemVendorId$VH() { return _SCM_PD_DEVICE_INFO$SubsystemVendorId$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$ManufacturingLocation$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$ManufacturingLocation$LAYOUT() { return _SCM_PD_DEVICE_INFO$ManufacturingLocation$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$ManufacturingLocation$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ManufacturingLocation"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$ManufacturingLocation$VH() { return _SCM_PD_DEVICE_INFO$ManufacturingLocation$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$ManufacturingWeek$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$ManufacturingWeek$LAYOUT() { return _SCM_PD_DEVICE_INFO$ManufacturingWeek$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$ManufacturingWeek$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ManufacturingWeek"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$ManufacturingWeek$VH() { return _SCM_PD_DEVICE_INFO$ManufacturingWeek$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$ManufacturingYear$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$ManufacturingYear$LAYOUT() { return _SCM_PD_DEVICE_INFO$ManufacturingYear$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$ManufacturingYear$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ManufacturingYear"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$ManufacturingYear$VH() { return _SCM_PD_DEVICE_INFO$ManufacturingYear$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$SerialNumber4Byte$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$SerialNumber4Byte$LAYOUT() { return _SCM_PD_DEVICE_INFO$SerialNumber4Byte$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$SerialNumber4Byte$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SerialNumber4Byte"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$SerialNumber4Byte$VH() { return _SCM_PD_DEVICE_INFO$SerialNumber4Byte$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_INFO$SerialNumberLengthInChars$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_INFO$SerialNumberLengthInChars$LAYOUT() { return _SCM_PD_DEVICE_INFO$SerialNumberLengthInChars$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_INFO$SerialNumberLengthInChars$VH_ = _SCM_PD_DEVICE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SerialNumberLengthInChars"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_INFO$SerialNumberLengthInChars$VH() { return _SCM_PD_DEVICE_INFO$SerialNumberLengthInChars$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_SPECIFIC_PROPERTY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(128, C_SHORT).withName("Name"),
        C_LONGLONG.withName("Value")
    ).withName("_SCM_PD_DEVICE_SPECIFIC_PROPERTY");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_SPECIFIC_PROPERTY$struct$LAYOUT() { return _SCM_PD_DEVICE_SPECIFIC_PROPERTY$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_DEVICE_SPECIFIC_PROPERTY$Value$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_SPECIFIC_PROPERTY$Value$LAYOUT() { return _SCM_PD_DEVICE_SPECIFIC_PROPERTY$Value$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_SPECIFIC_PROPERTY$Value$VH_ = _SCM_PD_DEVICE_SPECIFIC_PROPERTY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Value"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_SPECIFIC_PROPERTY$Value$VH() { return _SCM_PD_DEVICE_SPECIFIC_PROPERTY$Value$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_SPECIFIC_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("NumberOfProperties"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(128, C_SHORT).withName("Name"),
            C_LONGLONG.withName("Value")
        ).withName("_SCM_PD_DEVICE_SPECIFIC_PROPERTY")).withName("DeviceSpecificProperties")
    ).withName("_SCM_PD_DEVICE_SPECIFIC_INFO");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_SPECIFIC_INFO$struct$LAYOUT() { return _SCM_PD_DEVICE_SPECIFIC_INFO$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_DEVICE_SPECIFIC_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_SPECIFIC_INFO$Version$LAYOUT() { return _SCM_PD_DEVICE_SPECIFIC_INFO$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_SPECIFIC_INFO$Version$VH_ = _SCM_PD_DEVICE_SPECIFIC_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_SPECIFIC_INFO$Version$VH() { return _SCM_PD_DEVICE_SPECIFIC_INFO$Version$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_SPECIFIC_INFO$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_SPECIFIC_INFO$Size$LAYOUT() { return _SCM_PD_DEVICE_SPECIFIC_INFO$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_SPECIFIC_INFO$Size$VH_ = _SCM_PD_DEVICE_SPECIFIC_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_SPECIFIC_INFO$Size$VH() { return _SCM_PD_DEVICE_SPECIFIC_INFO$Size$VH_; }

    static final MemoryLayout _SCM_PD_DEVICE_SPECIFIC_INFO$NumberOfProperties$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_DEVICE_SPECIFIC_INFO$NumberOfProperties$LAYOUT() { return _SCM_PD_DEVICE_SPECIFIC_INFO$NumberOfProperties$LAYOUT_; }

    static final VarHandle _SCM_PD_DEVICE_SPECIFIC_INFO$NumberOfProperties$VH_ = _SCM_PD_DEVICE_SPECIFIC_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfProperties"));
    static final java.lang.invoke.VarHandle _SCM_PD_DEVICE_SPECIFIC_INFO$NumberOfProperties$VH() { return _SCM_PD_DEVICE_SPECIFIC_INFO$NumberOfProperties$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_SLOT_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_CHAR.withName("SlotNumber"),
        C_CHAR,
        MemoryLayout.ofSequence(6, C_CHAR).withName("Reserved1"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("Revision")
    ).withName("_SCM_PD_FIRMWARE_SLOT_INFO");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_SLOT_INFO$struct$LAYOUT() { return _SCM_PD_FIRMWARE_SLOT_INFO$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_SLOT_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_SLOT_INFO$Version$LAYOUT() { return _SCM_PD_FIRMWARE_SLOT_INFO$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_SLOT_INFO$Version$VH_ = _SCM_PD_FIRMWARE_SLOT_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_SLOT_INFO$Version$VH() { return _SCM_PD_FIRMWARE_SLOT_INFO$Version$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_SLOT_INFO$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_SLOT_INFO$Size$LAYOUT() { return _SCM_PD_FIRMWARE_SLOT_INFO$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_SLOT_INFO$Size$VH_ = _SCM_PD_FIRMWARE_SLOT_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_SLOT_INFO$Size$VH() { return _SCM_PD_FIRMWARE_SLOT_INFO$Size$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_SLOT_INFO$SlotNumber$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_SLOT_INFO$SlotNumber$LAYOUT() { return _SCM_PD_FIRMWARE_SLOT_INFO$SlotNumber$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_SLOT_INFO$SlotNumber$VH_ = _SCM_PD_FIRMWARE_SLOT_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SlotNumber"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_SLOT_INFO$SlotNumber$VH() { return _SCM_PD_FIRMWARE_SLOT_INFO$SlotNumber$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_CHAR.withName("ActiveSlot"),
        C_CHAR.withName("NextActiveSlot"),
        C_CHAR.withName("SlotCount"),
        MemoryLayout.ofPaddingBits(8),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Version"),
            C_LONG.withName("Size"),
            C_CHAR.withName("SlotNumber"),
            C_CHAR,
            MemoryLayout.ofSequence(6, C_CHAR).withName("Reserved1"),
            MemoryLayout.ofSequence(32, C_CHAR).withName("Revision")
        ).withName("_SCM_PD_FIRMWARE_SLOT_INFO")).withName("Slots")
    ).withName("_SCM_PD_FIRMWARE_INFO");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_INFO$struct$LAYOUT() { return _SCM_PD_FIRMWARE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_INFO$Version$LAYOUT() { return _SCM_PD_FIRMWARE_INFO$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_INFO$Version$VH_ = _SCM_PD_FIRMWARE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_INFO$Version$VH() { return _SCM_PD_FIRMWARE_INFO$Version$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_INFO$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_INFO$Size$LAYOUT() { return _SCM_PD_FIRMWARE_INFO$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_INFO$Size$VH_ = _SCM_PD_FIRMWARE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_INFO$Size$VH() { return _SCM_PD_FIRMWARE_INFO$Size$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_INFO$ActiveSlot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_INFO$ActiveSlot$LAYOUT() { return _SCM_PD_FIRMWARE_INFO$ActiveSlot$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_INFO$ActiveSlot$VH_ = _SCM_PD_FIRMWARE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ActiveSlot"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_INFO$ActiveSlot$VH() { return _SCM_PD_FIRMWARE_INFO$ActiveSlot$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_INFO$NextActiveSlot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_INFO$NextActiveSlot$LAYOUT() { return _SCM_PD_FIRMWARE_INFO$NextActiveSlot$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_INFO$NextActiveSlot$VH_ = _SCM_PD_FIRMWARE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NextActiveSlot"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_INFO$NextActiveSlot$VH() { return _SCM_PD_FIRMWARE_INFO$NextActiveSlot$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_INFO$SlotCount$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_INFO$SlotCount$LAYOUT() { return _SCM_PD_FIRMWARE_INFO$SlotCount$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_INFO$SlotCount$VH_ = _SCM_PD_FIRMWARE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SlotCount"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_INFO$SlotCount$VH() { return _SCM_PD_FIRMWARE_INFO$SlotCount$VH_; }

    static final int ScmPhysicalDeviceHealth_Unknown() { return (int)0L; }

    static final int ScmPhysicalDeviceHealth_Unhealthy() { return (int)1L; }

    static final int ScmPhysicalDeviceHealth_Warning() { return (int)2L; }

    static final int ScmPhysicalDeviceHealth_Healthy() { return (int)3L; }

    static final int ScmPhysicalDeviceHealth_Max() { return (int)4L; }

    static final int ScmPhysicalDeviceOpStatus_Unknown() { return (int)0L; }

    static final int ScmPhysicalDeviceOpStatus_Ok() { return (int)1L; }

    static final int ScmPhysicalDeviceOpStatus_PredictingFailure() { return (int)2L; }

    static final int ScmPhysicalDeviceOpStatus_InService() { return (int)3L; }

    static final int ScmPhysicalDeviceOpStatus_HardwareError() { return (int)4L; }

    static final int ScmPhysicalDeviceOpStatus_NotUsable() { return (int)5L; }

    static final int ScmPhysicalDeviceOpStatus_TransientError() { return (int)6L; }

    static final int ScmPhysicalDeviceOpStatus_Missing() { return (int)7L; }

    static final int ScmPhysicalDeviceOpStatus_Max() { return (int)8L; }

    static final int ScmPhysicalDeviceOpReason_Unknown() { return (int)0L; }

    static final int ScmPhysicalDeviceOpReason_Media() { return (int)1L; }

    static final int ScmPhysicalDeviceOpReason_ThresholdExceeded() { return (int)2L; }

    static final int ScmPhysicalDeviceOpReason_LostData() { return (int)3L; }

    static final int ScmPhysicalDeviceOpReason_EnergySource() { return (int)4L; }

    static final int ScmPhysicalDeviceOpReason_Configuration() { return (int)5L; }

    static final int ScmPhysicalDeviceOpReason_DeviceController() { return (int)6L; }

    static final int ScmPhysicalDeviceOpReason_MediaController() { return (int)7L; }

    static final int ScmPhysicalDeviceOpReason_Component() { return (int)8L; }

    static final int ScmPhysicalDeviceOpReason_BackgroundOperation() { return (int)9L; }

    static final int ScmPhysicalDeviceOpReason_InvalidFirmware() { return (int)10L; }

    static final int ScmPhysicalDeviceOpReason_HealthCheck() { return (int)11L; }

    static final int ScmPhysicalDeviceOpReason_LostDataPersistence() { return (int)12L; }

    static final int ScmPhysicalDeviceOpReason_DisabledByPlatform() { return (int)13L; }

    static final int ScmPhysicalDeviceOpReason_PermanentError() { return (int)14L; }

    static final int ScmPhysicalDeviceOpReason_LostWritePersistence() { return (int)15L; }

    static final int ScmPhysicalDeviceOpReason_FatalError() { return (int)16L; }

    static final int ScmPhysicalDeviceOpReason_DataPersistenceLossImminent() { return (int)17L; }

    static final int ScmPhysicalDeviceOpReason_WritePersistenceLossImminent() { return (int)18L; }

    static final int ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock() { return (int)19L; }

    static final int ScmPhysicalDeviceOpReason_PerformanceDegradation() { return (int)20L; }

    static final int ScmPhysicalDeviceOpReason_ExcessiveTemperature() { return (int)21L; }

    static final int ScmPhysicalDeviceOpReason_Max() { return (int)22L; }

    static final MemoryLayout _SCM_PD_MANAGEMENT_STATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_INT.withName("Health"),
        C_LONG.withName("NumberOfOperationalStatus"),
        C_LONG.withName("NumberOfAdditionalReasons"),
        MemoryLayout.ofSequence(16, C_INT).withName("OperationalStatus"),
        MemoryLayout.ofSequence(1, C_INT).withName("AdditionalReasons")
    ).withName("_SCM_PD_MANAGEMENT_STATUS");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_MANAGEMENT_STATUS$struct$LAYOUT() { return _SCM_PD_MANAGEMENT_STATUS$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_MANAGEMENT_STATUS$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_MANAGEMENT_STATUS$Version$LAYOUT() { return _SCM_PD_MANAGEMENT_STATUS$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_MANAGEMENT_STATUS$Version$VH_ = _SCM_PD_MANAGEMENT_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_MANAGEMENT_STATUS$Version$VH() { return _SCM_PD_MANAGEMENT_STATUS$Version$VH_; }

    static final MemoryLayout _SCM_PD_MANAGEMENT_STATUS$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_MANAGEMENT_STATUS$Size$LAYOUT() { return _SCM_PD_MANAGEMENT_STATUS$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_MANAGEMENT_STATUS$Size$VH_ = _SCM_PD_MANAGEMENT_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_MANAGEMENT_STATUS$Size$VH() { return _SCM_PD_MANAGEMENT_STATUS$Size$VH_; }

    static final MemoryLayout _SCM_PD_MANAGEMENT_STATUS$Health$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_MANAGEMENT_STATUS$Health$LAYOUT() { return _SCM_PD_MANAGEMENT_STATUS$Health$LAYOUT_; }

    static final VarHandle _SCM_PD_MANAGEMENT_STATUS$Health$VH_ = _SCM_PD_MANAGEMENT_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Health"));
    static final java.lang.invoke.VarHandle _SCM_PD_MANAGEMENT_STATUS$Health$VH() { return _SCM_PD_MANAGEMENT_STATUS$Health$VH_; }

    static final MemoryLayout _SCM_PD_MANAGEMENT_STATUS$NumberOfOperationalStatus$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_MANAGEMENT_STATUS$NumberOfOperationalStatus$LAYOUT() { return _SCM_PD_MANAGEMENT_STATUS$NumberOfOperationalStatus$LAYOUT_; }

    static final VarHandle _SCM_PD_MANAGEMENT_STATUS$NumberOfOperationalStatus$VH_ = _SCM_PD_MANAGEMENT_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfOperationalStatus"));
    static final java.lang.invoke.VarHandle _SCM_PD_MANAGEMENT_STATUS$NumberOfOperationalStatus$VH() { return _SCM_PD_MANAGEMENT_STATUS$NumberOfOperationalStatus$VH_; }

    static final MemoryLayout _SCM_PD_MANAGEMENT_STATUS$NumberOfAdditionalReasons$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_MANAGEMENT_STATUS$NumberOfAdditionalReasons$LAYOUT() { return _SCM_PD_MANAGEMENT_STATUS$NumberOfAdditionalReasons$LAYOUT_; }

    static final VarHandle _SCM_PD_MANAGEMENT_STATUS$NumberOfAdditionalReasons$VH_ = _SCM_PD_MANAGEMENT_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfAdditionalReasons"));
    static final java.lang.invoke.VarHandle _SCM_PD_MANAGEMENT_STATUS$NumberOfAdditionalReasons$VH() { return _SCM_PD_MANAGEMENT_STATUS$NumberOfAdditionalReasons$VH_; }

    static final MemoryLayout _SCM_PD_LOCATION_STRING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("Location"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_SCM_PD_LOCATION_STRING");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_LOCATION_STRING$struct$LAYOUT() { return _SCM_PD_LOCATION_STRING$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_LOCATION_STRING$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_LOCATION_STRING$Version$LAYOUT() { return _SCM_PD_LOCATION_STRING$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_LOCATION_STRING$Version$VH_ = _SCM_PD_LOCATION_STRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_LOCATION_STRING$Version$VH() { return _SCM_PD_LOCATION_STRING$Version$VH_; }

    static final MemoryLayout _SCM_PD_LOCATION_STRING$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_LOCATION_STRING$Size$LAYOUT() { return _SCM_PD_LOCATION_STRING$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_LOCATION_STRING$Size$VH_ = _SCM_PD_LOCATION_STRING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_LOCATION_STRING$Size$VH() { return _SCM_PD_LOCATION_STRING$Size$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_CHAR.withName("Slot"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Reserved"),
        C_LONGLONG.withName("Offset"),
        C_LONG.withName("FirmwareImageSizeInBytes"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("FirmwareImage"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_SCM_PD_FIRMWARE_DOWNLOAD");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$struct$LAYOUT() { return _SCM_PD_FIRMWARE_DOWNLOAD$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Version$LAYOUT() { return _SCM_PD_FIRMWARE_DOWNLOAD$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Version$VH_ = _SCM_PD_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Version$VH() { return _SCM_PD_FIRMWARE_DOWNLOAD$Version$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Size$LAYOUT() { return _SCM_PD_FIRMWARE_DOWNLOAD$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Size$VH_ = _SCM_PD_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Size$VH() { return _SCM_PD_FIRMWARE_DOWNLOAD$Size$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Flags$LAYOUT() { return _SCM_PD_FIRMWARE_DOWNLOAD$Flags$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Flags$VH_ = _SCM_PD_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Flags$VH() { return _SCM_PD_FIRMWARE_DOWNLOAD$Flags$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Slot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Slot$LAYOUT() { return _SCM_PD_FIRMWARE_DOWNLOAD$Slot$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Slot$VH_ = _SCM_PD_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Slot"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Slot$VH() { return _SCM_PD_FIRMWARE_DOWNLOAD$Slot$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$Offset$LAYOUT() { return _SCM_PD_FIRMWARE_DOWNLOAD$Offset$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Offset$VH_ = _SCM_PD_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$Offset$VH() { return _SCM_PD_FIRMWARE_DOWNLOAD$Offset$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$FirmwareImageSizeInBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_DOWNLOAD$FirmwareImageSizeInBytes$LAYOUT() { return _SCM_PD_FIRMWARE_DOWNLOAD$FirmwareImageSizeInBytes$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$FirmwareImageSizeInBytes$VH_ = _SCM_PD_FIRMWARE_DOWNLOAD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirmwareImageSizeInBytes"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_DOWNLOAD$FirmwareImageSizeInBytes$VH() { return _SCM_PD_FIRMWARE_DOWNLOAD$FirmwareImageSizeInBytes$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_CHAR.withName("Slot"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_SCM_PD_FIRMWARE_ACTIVATE");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$struct$LAYOUT() { return _SCM_PD_FIRMWARE_ACTIVATE$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$Version$LAYOUT() { return _SCM_PD_FIRMWARE_ACTIVATE$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_ACTIVATE$Version$VH_ = _SCM_PD_FIRMWARE_ACTIVATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_ACTIVATE$Version$VH() { return _SCM_PD_FIRMWARE_ACTIVATE$Version$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$Size$LAYOUT() { return _SCM_PD_FIRMWARE_ACTIVATE$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_ACTIVATE$Size$VH_ = _SCM_PD_FIRMWARE_ACTIVATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_ACTIVATE$Size$VH() { return _SCM_PD_FIRMWARE_ACTIVATE$Size$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$Flags$LAYOUT() { return _SCM_PD_FIRMWARE_ACTIVATE$Flags$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_ACTIVATE$Flags$VH_ = _SCM_PD_FIRMWARE_ACTIVATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_ACTIVATE$Flags$VH() { return _SCM_PD_FIRMWARE_ACTIVATE$Flags$VH_; }

    static final MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$Slot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_FIRMWARE_ACTIVATE$Slot$LAYOUT() { return _SCM_PD_FIRMWARE_ACTIVATE$Slot$LAYOUT_; }

    static final VarHandle _SCM_PD_FIRMWARE_ACTIVATE$Slot$VH_ = _SCM_PD_FIRMWARE_ACTIVATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Slot"));
    static final java.lang.invoke.VarHandle _SCM_PD_FIRMWARE_ACTIVATE$Slot$VH() { return _SCM_PD_FIRMWARE_ACTIVATE$Slot$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ProtocolGuid"),
        C_LONG.withName("DataSize"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Data"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_SCM_PD_PASSTHROUGH_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INPUT$struct$LAYOUT() { return _SCM_PD_PASSTHROUGH_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INPUT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INPUT$Version$LAYOUT() { return _SCM_PD_PASSTHROUGH_INPUT$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_INPUT$Version$VH_ = _SCM_PD_PASSTHROUGH_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_INPUT$Version$VH() { return _SCM_PD_PASSTHROUGH_INPUT$Version$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INPUT$Size$LAYOUT() { return _SCM_PD_PASSTHROUGH_INPUT$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_INPUT$Size$VH_ = _SCM_PD_PASSTHROUGH_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_INPUT$Size$VH() { return _SCM_PD_PASSTHROUGH_INPUT$Size$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INPUT$DataSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INPUT$DataSize$LAYOUT() { return _SCM_PD_PASSTHROUGH_INPUT$DataSize$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_INPUT$DataSize$VH_ = _SCM_PD_PASSTHROUGH_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataSize"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_INPUT$DataSize$VH() { return _SCM_PD_PASSTHROUGH_INPUT$DataSize$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ProtocolGuid"),
        C_LONG.withName("DataSize"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Data"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_SCM_PD_PASSTHROUGH_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_OUTPUT$struct$LAYOUT() { return _SCM_PD_PASSTHROUGH_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_OUTPUT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_OUTPUT$Version$LAYOUT() { return _SCM_PD_PASSTHROUGH_OUTPUT$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_OUTPUT$Version$VH_ = _SCM_PD_PASSTHROUGH_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_OUTPUT$Version$VH() { return _SCM_PD_PASSTHROUGH_OUTPUT$Version$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_OUTPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_OUTPUT$Size$LAYOUT() { return _SCM_PD_PASSTHROUGH_OUTPUT$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_OUTPUT$Size$VH_ = _SCM_PD_PASSTHROUGH_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_OUTPUT$Size$VH() { return _SCM_PD_PASSTHROUGH_OUTPUT$Size$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_OUTPUT$DataSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_OUTPUT$DataSize$LAYOUT() { return _SCM_PD_PASSTHROUGH_OUTPUT$DataSize$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_OUTPUT$DataSize$VH_ = _SCM_PD_PASSTHROUGH_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataSize"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_OUTPUT$DataSize$VH() { return _SCM_PD_PASSTHROUGH_OUTPUT$DataSize$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Opcode"),
        C_LONG.withName("OpcodeParametersLength"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("OpcodeParameters"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_SCM_PD_PASSTHROUGH_INVDIMM_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$struct$LAYOUT() { return _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$Opcode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$Opcode$LAYOUT() { return _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$Opcode$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$Opcode$VH_ = _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Opcode"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$Opcode$VH() { return _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$Opcode$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$OpcodeParametersLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$OpcodeParametersLength$LAYOUT() { return _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$OpcodeParametersLength$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$OpcodeParametersLength$VH_ = _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OpcodeParametersLength"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$OpcodeParametersLength$VH() { return _SCM_PD_PASSTHROUGH_INVDIMM_INPUT$OpcodeParametersLength$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("GeneralStatus"),
        C_SHORT.withName("ExtendedStatus"),
        C_LONG.withName("OutputDataLength"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("OutputData"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$struct$LAYOUT() { return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$GeneralStatus$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$GeneralStatus$LAYOUT() { return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$GeneralStatus$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$GeneralStatus$VH_ = _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("GeneralStatus"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$GeneralStatus$VH() { return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$GeneralStatus$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$ExtendedStatus$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$ExtendedStatus$LAYOUT() { return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$ExtendedStatus$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$ExtendedStatus$VH_ = _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ExtendedStatus"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$ExtendedStatus$VH() { return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$ExtendedStatus$VH_; }

    static final MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$OutputDataLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$OutputDataLength$LAYOUT() { return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$OutputDataLength$LAYOUT_; }

    static final VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$OutputDataLength$VH_ = _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OutputDataLength"));
    static final java.lang.invoke.VarHandle _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$OutputDataLength$VH() { return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT$OutputDataLength$VH_; }

    static final MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        MemoryLayout.ofStruct(
            C_INT
        ).withName("Options")
    ).withName("_SCM_PD_REINITIALIZE_MEDIA_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_INPUT$struct$LAYOUT() { return _SCM_PD_REINITIALIZE_MEDIA_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_INPUT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_INPUT$Version$LAYOUT() { return _SCM_PD_REINITIALIZE_MEDIA_INPUT$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_REINITIALIZE_MEDIA_INPUT$Version$VH_ = _SCM_PD_REINITIALIZE_MEDIA_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_REINITIALIZE_MEDIA_INPUT$Version$VH() { return _SCM_PD_REINITIALIZE_MEDIA_INPUT$Version$VH_; }

    static final MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_INPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_INPUT$Size$LAYOUT() { return _SCM_PD_REINITIALIZE_MEDIA_INPUT$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_REINITIALIZE_MEDIA_INPUT$Size$VH_ = _SCM_PD_REINITIALIZE_MEDIA_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_REINITIALIZE_MEDIA_INPUT$Size$VH() { return _SCM_PD_REINITIALIZE_MEDIA_INPUT$Size$VH_; }

    static final MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_INPUT$Options$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    );
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_INPUT$Options$struct$LAYOUT() { return _SCM_PD_REINITIALIZE_MEDIA_INPUT$Options$struct$LAYOUT_; }

    static final int ScmPhysicalDeviceReinit_Success() { return (int)0L; }

    static final int ScmPhysicalDeviceReinit_RebootNeeded() { return (int)1L; }

    static final int ScmPhysicalDeviceReinit_ColdBootNeeded() { return (int)2L; }

    static final int ScmPhysicalDeviceReinit_Max() { return (int)3L; }

    static final MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_INT.withName("Status")
    ).withName("_SCM_PD_REINITIALIZE_MEDIA_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$struct$LAYOUT() { return _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Version$LAYOUT() { return _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Version$LAYOUT_; }

    static final VarHandle _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Version$VH_ = _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Version$VH() { return _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Version$VH_; }

    static final MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Size$LAYOUT() { return _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Size$LAYOUT_; }

    static final VarHandle _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Size$VH_ = _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Size$VH() { return _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Size$VH_; }

    static final MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Status$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Status$LAYOUT() { return _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Status$LAYOUT_; }

    static final VarHandle _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Status$VH_ = _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Status"));
    static final java.lang.invoke.VarHandle _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Status$VH() { return _SCM_PD_REINITIALIZE_MEDIA_OUTPUT$Status$VH_; }

    static final int Unknown() { return (int)0L; }

    static final int F5_1Pt2_512() { return (int)1L; }

    static final int F3_1Pt44_512() { return (int)2L; }

    static final int F3_2Pt88_512() { return (int)3L; }

    static final int F3_20Pt8_512() { return (int)4L; }

    static final int F3_720_512() { return (int)5L; }

    static final int F5_360_512() { return (int)6L; }

    static final int F5_320_512() { return (int)7L; }

    static final int F5_320_1024() { return (int)8L; }

    static final int F5_180_512() { return (int)9L; }

    static final int F5_160_512() { return (int)10L; }

    static final int RemovableMedia() { return (int)11L; }

    static final int FixedMedia() { return (int)12L; }

    static final int F3_120M_512() { return (int)13L; }

    static final int F3_640_512() { return (int)14L; }

    static final int F5_640_512() { return (int)15L; }

    static final int F5_720_512() { return (int)16L; }

    static final int F3_1Pt2_512() { return (int)17L; }

    static final int F3_1Pt23_1024() { return (int)18L; }

    static final int F5_1Pt23_1024() { return (int)19L; }

    static final int F3_128Mb_512() { return (int)20L; }

    static final int F3_230Mb_512() { return (int)21L; }

    static final int F8_256_128() { return (int)22L; }

    static final int F3_200Mb_512() { return (int)23L; }

    static final int F3_240M_512() { return (int)24L; }

    static final int F3_32M_512() { return (int)25L; }

    static final MemoryLayout _FORMAT_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MediaType"),
        C_LONG.withName("StartCylinderNumber"),
        C_LONG.withName("EndCylinderNumber"),
        C_LONG.withName("StartHeadNumber"),
        C_LONG.withName("EndHeadNumber")
    ).withName("_FORMAT_PARAMETERS");
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_PARAMETERS$struct$LAYOUT() { return _FORMAT_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _FORMAT_PARAMETERS$MediaType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_PARAMETERS$MediaType$LAYOUT() { return _FORMAT_PARAMETERS$MediaType$LAYOUT_; }

    static final VarHandle _FORMAT_PARAMETERS$MediaType$VH_ = _FORMAT_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MediaType"));
    static final java.lang.invoke.VarHandle _FORMAT_PARAMETERS$MediaType$VH() { return _FORMAT_PARAMETERS$MediaType$VH_; }

    static final MemoryLayout _FORMAT_PARAMETERS$StartCylinderNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_PARAMETERS$StartCylinderNumber$LAYOUT() { return _FORMAT_PARAMETERS$StartCylinderNumber$LAYOUT_; }

    static final VarHandle _FORMAT_PARAMETERS$StartCylinderNumber$VH_ = _FORMAT_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StartCylinderNumber"));
    static final java.lang.invoke.VarHandle _FORMAT_PARAMETERS$StartCylinderNumber$VH() { return _FORMAT_PARAMETERS$StartCylinderNumber$VH_; }

    static final MemoryLayout _FORMAT_PARAMETERS$EndCylinderNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_PARAMETERS$EndCylinderNumber$LAYOUT() { return _FORMAT_PARAMETERS$EndCylinderNumber$LAYOUT_; }

    static final VarHandle _FORMAT_PARAMETERS$EndCylinderNumber$VH_ = _FORMAT_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndCylinderNumber"));
    static final java.lang.invoke.VarHandle _FORMAT_PARAMETERS$EndCylinderNumber$VH() { return _FORMAT_PARAMETERS$EndCylinderNumber$VH_; }

    static final MemoryLayout _FORMAT_PARAMETERS$StartHeadNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_PARAMETERS$StartHeadNumber$LAYOUT() { return _FORMAT_PARAMETERS$StartHeadNumber$LAYOUT_; }

    static final VarHandle _FORMAT_PARAMETERS$StartHeadNumber$VH_ = _FORMAT_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StartHeadNumber"));
    static final java.lang.invoke.VarHandle _FORMAT_PARAMETERS$StartHeadNumber$VH() { return _FORMAT_PARAMETERS$StartHeadNumber$VH_; }

    static final MemoryLayout _FORMAT_PARAMETERS$EndHeadNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_PARAMETERS$EndHeadNumber$LAYOUT() { return _FORMAT_PARAMETERS$EndHeadNumber$LAYOUT_; }

    static final VarHandle _FORMAT_PARAMETERS$EndHeadNumber$VH_ = _FORMAT_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndHeadNumber"));
    static final java.lang.invoke.VarHandle _FORMAT_PARAMETERS$EndHeadNumber$VH() { return _FORMAT_PARAMETERS$EndHeadNumber$VH_; }

    static final MemoryLayout _FORMAT_EX_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("MediaType"),
        C_LONG.withName("StartCylinderNumber"),
        C_LONG.withName("EndCylinderNumber"),
        C_LONG.withName("StartHeadNumber"),
        C_LONG.withName("EndHeadNumber"),
        C_SHORT.withName("FormatGapLength"),
        C_SHORT.withName("SectorsPerTrack"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("SectorNumber"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FORMAT_EX_PARAMETERS");
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_EX_PARAMETERS$struct$LAYOUT() { return _FORMAT_EX_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _FORMAT_EX_PARAMETERS$MediaType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_EX_PARAMETERS$MediaType$LAYOUT() { return _FORMAT_EX_PARAMETERS$MediaType$LAYOUT_; }

    static final VarHandle _FORMAT_EX_PARAMETERS$MediaType$VH_ = _FORMAT_EX_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MediaType"));
    static final java.lang.invoke.VarHandle _FORMAT_EX_PARAMETERS$MediaType$VH() { return _FORMAT_EX_PARAMETERS$MediaType$VH_; }

    static final MemoryLayout _FORMAT_EX_PARAMETERS$StartCylinderNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_EX_PARAMETERS$StartCylinderNumber$LAYOUT() { return _FORMAT_EX_PARAMETERS$StartCylinderNumber$LAYOUT_; }

    static final VarHandle _FORMAT_EX_PARAMETERS$StartCylinderNumber$VH_ = _FORMAT_EX_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StartCylinderNumber"));
    static final java.lang.invoke.VarHandle _FORMAT_EX_PARAMETERS$StartCylinderNumber$VH() { return _FORMAT_EX_PARAMETERS$StartCylinderNumber$VH_; }

    static final MemoryLayout _FORMAT_EX_PARAMETERS$EndCylinderNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_EX_PARAMETERS$EndCylinderNumber$LAYOUT() { return _FORMAT_EX_PARAMETERS$EndCylinderNumber$LAYOUT_; }

    static final VarHandle _FORMAT_EX_PARAMETERS$EndCylinderNumber$VH_ = _FORMAT_EX_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndCylinderNumber"));
    static final java.lang.invoke.VarHandle _FORMAT_EX_PARAMETERS$EndCylinderNumber$VH() { return _FORMAT_EX_PARAMETERS$EndCylinderNumber$VH_; }

    static final MemoryLayout _FORMAT_EX_PARAMETERS$StartHeadNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_EX_PARAMETERS$StartHeadNumber$LAYOUT() { return _FORMAT_EX_PARAMETERS$StartHeadNumber$LAYOUT_; }

    static final VarHandle _FORMAT_EX_PARAMETERS$StartHeadNumber$VH_ = _FORMAT_EX_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StartHeadNumber"));
    static final java.lang.invoke.VarHandle _FORMAT_EX_PARAMETERS$StartHeadNumber$VH() { return _FORMAT_EX_PARAMETERS$StartHeadNumber$VH_; }

    static final MemoryLayout _FORMAT_EX_PARAMETERS$EndHeadNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_EX_PARAMETERS$EndHeadNumber$LAYOUT() { return _FORMAT_EX_PARAMETERS$EndHeadNumber$LAYOUT_; }

    static final VarHandle _FORMAT_EX_PARAMETERS$EndHeadNumber$VH_ = _FORMAT_EX_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndHeadNumber"));
    static final java.lang.invoke.VarHandle _FORMAT_EX_PARAMETERS$EndHeadNumber$VH() { return _FORMAT_EX_PARAMETERS$EndHeadNumber$VH_; }

    static final MemoryLayout _FORMAT_EX_PARAMETERS$FormatGapLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_EX_PARAMETERS$FormatGapLength$LAYOUT() { return _FORMAT_EX_PARAMETERS$FormatGapLength$LAYOUT_; }

    static final VarHandle _FORMAT_EX_PARAMETERS$FormatGapLength$VH_ = _FORMAT_EX_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FormatGapLength"));
    static final java.lang.invoke.VarHandle _FORMAT_EX_PARAMETERS$FormatGapLength$VH() { return _FORMAT_EX_PARAMETERS$FormatGapLength$VH_; }

    static final MemoryLayout _FORMAT_EX_PARAMETERS$SectorsPerTrack$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FORMAT_EX_PARAMETERS$SectorsPerTrack$LAYOUT() { return _FORMAT_EX_PARAMETERS$SectorsPerTrack$LAYOUT_; }

    static final VarHandle _FORMAT_EX_PARAMETERS$SectorsPerTrack$VH_ = _FORMAT_EX_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SectorsPerTrack"));
    static final java.lang.invoke.VarHandle _FORMAT_EX_PARAMETERS$SectorsPerTrack$VH() { return _FORMAT_EX_PARAMETERS$SectorsPerTrack$VH_; }

    static final MemoryLayout _DISK_GEOMETRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Cylinders"),
        C_INT.withName("MediaType"),
        C_LONG.withName("TracksPerCylinder"),
        C_LONG.withName("SectorsPerTrack"),
        C_LONG.withName("BytesPerSector")
    ).withName("_DISK_GEOMETRY");
    static final jdk.incubator.foreign.MemoryLayout _DISK_GEOMETRY$struct$LAYOUT() { return _DISK_GEOMETRY$struct$LAYOUT_; }

    static final MemoryLayout _DISK_GEOMETRY$MediaType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_GEOMETRY$MediaType$LAYOUT() { return _DISK_GEOMETRY$MediaType$LAYOUT_; }

    static final VarHandle _DISK_GEOMETRY$MediaType$VH_ = _DISK_GEOMETRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MediaType"));
    static final java.lang.invoke.VarHandle _DISK_GEOMETRY$MediaType$VH() { return _DISK_GEOMETRY$MediaType$VH_; }

    static final MemoryLayout _DISK_GEOMETRY$TracksPerCylinder$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_GEOMETRY$TracksPerCylinder$LAYOUT() { return _DISK_GEOMETRY$TracksPerCylinder$LAYOUT_; }

    static final VarHandle _DISK_GEOMETRY$TracksPerCylinder$VH_ = _DISK_GEOMETRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TracksPerCylinder"));
    static final java.lang.invoke.VarHandle _DISK_GEOMETRY$TracksPerCylinder$VH() { return _DISK_GEOMETRY$TracksPerCylinder$VH_; }

    static final MemoryLayout _DISK_GEOMETRY$SectorsPerTrack$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_GEOMETRY$SectorsPerTrack$LAYOUT() { return _DISK_GEOMETRY$SectorsPerTrack$LAYOUT_; }

    static final VarHandle _DISK_GEOMETRY$SectorsPerTrack$VH_ = _DISK_GEOMETRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectorsPerTrack"));
    static final java.lang.invoke.VarHandle _DISK_GEOMETRY$SectorsPerTrack$VH() { return _DISK_GEOMETRY$SectorsPerTrack$VH_; }

    static final MemoryLayout _DISK_GEOMETRY$BytesPerSector$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_GEOMETRY$BytesPerSector$LAYOUT() { return _DISK_GEOMETRY$BytesPerSector$LAYOUT_; }

    static final VarHandle _DISK_GEOMETRY$BytesPerSector$VH_ = _DISK_GEOMETRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerSector"));
    static final java.lang.invoke.VarHandle _DISK_GEOMETRY$BytesPerSector$VH() { return _DISK_GEOMETRY$BytesPerSector$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PartitionLength"),
        C_LONG.withName("HiddenSectors"),
        C_LONG.withName("PartitionNumber"),
        C_CHAR.withName("PartitionType"),
        C_CHAR.withName("BootIndicator"),
        C_CHAR.withName("RecognizedPartition"),
        C_CHAR.withName("RewritePartition"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_PARTITION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION$struct$LAYOUT() { return _PARTITION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _PARTITION_INFORMATION$HiddenSectors$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION$HiddenSectors$LAYOUT() { return _PARTITION_INFORMATION$HiddenSectors$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION$HiddenSectors$VH_ = _PARTITION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HiddenSectors"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION$HiddenSectors$VH() { return _PARTITION_INFORMATION$HiddenSectors$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION$PartitionNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION$PartitionNumber$LAYOUT() { return _PARTITION_INFORMATION$PartitionNumber$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION$PartitionNumber$VH_ = _PARTITION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionNumber"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION$PartitionNumber$VH() { return _PARTITION_INFORMATION$PartitionNumber$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION$PartitionType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION$PartitionType$LAYOUT() { return _PARTITION_INFORMATION$PartitionType$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION$PartitionType$VH_ = _PARTITION_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PartitionType"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION$PartitionType$VH() { return _PARTITION_INFORMATION$PartitionType$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION$BootIndicator$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION$BootIndicator$LAYOUT() { return _PARTITION_INFORMATION$BootIndicator$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION$BootIndicator$VH_ = _PARTITION_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BootIndicator"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION$BootIndicator$VH() { return _PARTITION_INFORMATION$BootIndicator$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION$RecognizedPartition$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION$RecognizedPartition$LAYOUT() { return _PARTITION_INFORMATION$RecognizedPartition$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION$RecognizedPartition$VH_ = _PARTITION_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("RecognizedPartition"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION$RecognizedPartition$VH() { return _PARTITION_INFORMATION$RecognizedPartition$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION$RewritePartition$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION$RewritePartition$LAYOUT() { return _PARTITION_INFORMATION$RewritePartition$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION$RewritePartition$VH_ = _PARTITION_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("RewritePartition"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION$RewritePartition$VH() { return _PARTITION_INFORMATION$RewritePartition$VH_; }

    static final MemoryLayout _SET_PARTITION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("PartitionType")
    ).withName("_SET_PARTITION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SET_PARTITION_INFORMATION$struct$LAYOUT() { return _SET_PARTITION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SET_PARTITION_INFORMATION$PartitionType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SET_PARTITION_INFORMATION$PartitionType$LAYOUT() { return _SET_PARTITION_INFORMATION$PartitionType$LAYOUT_; }

    static final VarHandle _SET_PARTITION_INFORMATION$PartitionType$VH_ = _SET_PARTITION_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PartitionType"));
    static final java.lang.invoke.VarHandle _SET_PARTITION_INFORMATION$PartitionType$VH() { return _SET_PARTITION_INFORMATION$PartitionType$VH_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PartitionCount"),
        C_LONG.withName("Signature"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("StartingOffset"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("PartitionLength"),
            C_LONG.withName("HiddenSectors"),
            C_LONG.withName("PartitionNumber"),
            C_CHAR.withName("PartitionType"),
            C_CHAR.withName("BootIndicator"),
            C_CHAR.withName("RecognizedPartition"),
            C_CHAR.withName("RewritePartition"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("_PARTITION_INFORMATION")).withName("PartitionEntry")
    ).withName("_DRIVE_LAYOUT_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION$struct$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION$PartitionCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION$PartitionCount$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION$PartitionCount$LAYOUT_; }

    static final VarHandle _DRIVE_LAYOUT_INFORMATION$PartitionCount$VH_ = _DRIVE_LAYOUT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionCount"));
    static final java.lang.invoke.VarHandle _DRIVE_LAYOUT_INFORMATION$PartitionCount$VH() { return _DRIVE_LAYOUT_INFORMATION$PartitionCount$VH_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION$Signature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION$Signature$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION$Signature$LAYOUT_; }

    static final VarHandle _DRIVE_LAYOUT_INFORMATION$Signature$VH_ = _DRIVE_LAYOUT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    static final java.lang.invoke.VarHandle _DRIVE_LAYOUT_INFORMATION$Signature$VH() { return _DRIVE_LAYOUT_INFORMATION$Signature$VH_; }

    static final MemoryLayout _VERIFY_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingOffset"),
        C_LONG.withName("Length"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_VERIFY_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _VERIFY_INFORMATION$struct$LAYOUT() { return _VERIFY_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _VERIFY_INFORMATION$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VERIFY_INFORMATION$Length$LAYOUT() { return _VERIFY_INFORMATION$Length$LAYOUT_; }

    static final VarHandle _VERIFY_INFORMATION$Length$VH_ = _VERIFY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _VERIFY_INFORMATION$Length$VH() { return _VERIFY_INFORMATION$Length$VH_; }

    static final MemoryLayout _REASSIGN_BLOCKS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Reserved"),
        C_SHORT.withName("Count"),
        MemoryLayout.ofSequence(1, C_LONG).withName("BlockNumber")
    ).withName("_REASSIGN_BLOCKS");
    static final jdk.incubator.foreign.MemoryLayout _REASSIGN_BLOCKS$struct$LAYOUT() { return _REASSIGN_BLOCKS$struct$LAYOUT_; }

    static final MemoryLayout _REASSIGN_BLOCKS$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REASSIGN_BLOCKS$Reserved$LAYOUT() { return _REASSIGN_BLOCKS$Reserved$LAYOUT_; }

    static final VarHandle _REASSIGN_BLOCKS$Reserved$VH_ = _REASSIGN_BLOCKS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _REASSIGN_BLOCKS$Reserved$VH() { return _REASSIGN_BLOCKS$Reserved$VH_; }

    static final MemoryLayout _REASSIGN_BLOCKS$Count$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REASSIGN_BLOCKS$Count$LAYOUT() { return _REASSIGN_BLOCKS$Count$LAYOUT_; }

    static final VarHandle _REASSIGN_BLOCKS$Count$VH_ = _REASSIGN_BLOCKS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _REASSIGN_BLOCKS$Count$VH() { return _REASSIGN_BLOCKS$Count$VH_; }

    static final MemoryLayout _REASSIGN_BLOCKS_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Reserved"),
        C_SHORT.withName("Count"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER")).withName("BlockNumber")
    ).withName("_REASSIGN_BLOCKS_EX");
    static final jdk.incubator.foreign.MemoryLayout _REASSIGN_BLOCKS_EX$struct$LAYOUT() { return _REASSIGN_BLOCKS_EX$struct$LAYOUT_; }

    static final MemoryLayout _REASSIGN_BLOCKS_EX$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REASSIGN_BLOCKS_EX$Reserved$LAYOUT() { return _REASSIGN_BLOCKS_EX$Reserved$LAYOUT_; }

    static final VarHandle _REASSIGN_BLOCKS_EX$Reserved$VH_ = _REASSIGN_BLOCKS_EX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _REASSIGN_BLOCKS_EX$Reserved$VH() { return _REASSIGN_BLOCKS_EX$Reserved$VH_; }

    static final MemoryLayout _REASSIGN_BLOCKS_EX$Count$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REASSIGN_BLOCKS_EX$Count$LAYOUT() { return _REASSIGN_BLOCKS_EX$Count$LAYOUT_; }

    static final VarHandle _REASSIGN_BLOCKS_EX$Count$VH_ = _REASSIGN_BLOCKS_EX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _REASSIGN_BLOCKS_EX$Count$VH() { return _REASSIGN_BLOCKS_EX$Count$VH_; }

    static final int PARTITION_STYLE_MBR() { return (int)0L; }

    static final int PARTITION_STYLE_GPT() { return (int)1L; }

    static final int PARTITION_STYLE_RAW() { return (int)2L; }

    static final MemoryLayout _PARTITION_INFORMATION_GPT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("PartitionType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("PartitionId"),
        C_LONGLONG.withName("Attributes"),
        MemoryLayout.ofSequence(36, C_SHORT).withName("Name")
    ).withName("_PARTITION_INFORMATION_GPT");
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_GPT$struct$LAYOUT() { return _PARTITION_INFORMATION_GPT$struct$LAYOUT_; }

    static final MemoryLayout _PARTITION_INFORMATION_GPT$Attributes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_GPT$Attributes$LAYOUT() { return _PARTITION_INFORMATION_GPT$Attributes$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION_GPT$Attributes$VH_ = _PARTITION_INFORMATION_GPT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Attributes"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION_GPT$Attributes$VH() { return _PARTITION_INFORMATION_GPT$Attributes$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION_MBR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("PartitionType"),
        C_CHAR.withName("BootIndicator"),
        C_CHAR.withName("RecognizedPartition"),
        MemoryLayout.ofPaddingBits(8),
        C_LONG.withName("HiddenSectors"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("PartitionId")
    ).withName("_PARTITION_INFORMATION_MBR");
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_MBR$struct$LAYOUT() { return _PARTITION_INFORMATION_MBR$struct$LAYOUT_; }

    static final MemoryLayout _PARTITION_INFORMATION_MBR$PartitionType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_MBR$PartitionType$LAYOUT() { return _PARTITION_INFORMATION_MBR$PartitionType$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION_MBR$PartitionType$VH_ = _PARTITION_INFORMATION_MBR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PartitionType"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION_MBR$PartitionType$VH() { return _PARTITION_INFORMATION_MBR$PartitionType$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION_MBR$BootIndicator$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_MBR$BootIndicator$LAYOUT() { return _PARTITION_INFORMATION_MBR$BootIndicator$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION_MBR$BootIndicator$VH_ = _PARTITION_INFORMATION_MBR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BootIndicator"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION_MBR$BootIndicator$VH() { return _PARTITION_INFORMATION_MBR$BootIndicator$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION_MBR$RecognizedPartition$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_MBR$RecognizedPartition$LAYOUT() { return _PARTITION_INFORMATION_MBR$RecognizedPartition$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION_MBR$RecognizedPartition$VH_ = _PARTITION_INFORMATION_MBR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("RecognizedPartition"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION_MBR$RecognizedPartition$VH() { return _PARTITION_INFORMATION_MBR$RecognizedPartition$VH_; }

}

