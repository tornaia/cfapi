// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$51 extends cfapi_h$constants$50 {

    /* package-private */ cfapi_h$constants$51() {}
    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsMask$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsMask$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsMask$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FlagsMask"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsMask$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsMask$VH_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsExpected$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsExpected$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsExpected$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsExpected$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FlagsExpected"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsExpected$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$FlagsExpected$VH_; }

    static final MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("KeyUsage"),
        C_INT,
        C_LONG.withName("cbAlgName"),
        C_LONG.withName("cbNonce"),
        C_LONG.withName("cbAuthTag"),
        C_LONG.withName("cbWrappingKey"),
        C_LONG.withName("cbIsolatedKey")
    ).withName("_NCRYPT_EXPORTED_ISOLATED_KEY_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$Version$LAYOUT() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$Version$LAYOUT_; }

    static final VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$Version$VH_ = _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$Version$VH() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$Version$VH_; }

    static final MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$KeyUsage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$KeyUsage$LAYOUT() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$KeyUsage$LAYOUT_; }

    static final VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$KeyUsage$VH_ = _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("KeyUsage"));
    static final java.lang.invoke.VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$KeyUsage$VH() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$KeyUsage$VH_; }

    static final MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAlgName$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAlgName$LAYOUT() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAlgName$LAYOUT_; }

    static final VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAlgName$VH_ = _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbAlgName"));
    static final java.lang.invoke.VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAlgName$VH() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAlgName$VH_; }

    static final MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbNonce$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbNonce$LAYOUT() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbNonce$LAYOUT_; }

    static final VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbNonce$VH_ = _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbNonce"));
    static final java.lang.invoke.VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbNonce$VH() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbNonce$VH_; }

    static final MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAuthTag$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAuthTag$LAYOUT() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAuthTag$LAYOUT_; }

    static final VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAuthTag$VH_ = _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbAuthTag"));
    static final java.lang.invoke.VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAuthTag$VH() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbAuthTag$VH_; }

    static final MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbWrappingKey$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbWrappingKey$LAYOUT() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbWrappingKey$LAYOUT_; }

    static final VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbWrappingKey$VH_ = _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbWrappingKey"));
    static final java.lang.invoke.VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbWrappingKey$VH() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbWrappingKey$VH_; }

    static final MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbIsolatedKey$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbIsolatedKey$LAYOUT() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbIsolatedKey$LAYOUT_; }

    static final VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbIsolatedKey$VH_ = _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbIsolatedKey"));
    static final java.lang.invoke.VarHandle _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbIsolatedKey$VH() { return _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER$cbIsolatedKey$VH_; }

    static final MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Version"),
            C_LONG.withName("KeyUsage"),
            C_INT,
            C_LONG.withName("cbAlgName"),
            C_LONG.withName("cbNonce"),
            C_LONG.withName("cbAuthTag"),
            C_LONG.withName("cbWrappingKey"),
            C_LONG.withName("cbIsolatedKey")
        ).withName("Header")
    ).withName("_NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE$struct$LAYOUT() { return _NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE$struct$LAYOUT_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Magic"),
        C_INT.withName("Version"),
        C_INT.withName("HeaderSize"),
        C_INT.withName("cbCertifyInfo"),
        C_INT.withName("cbSignature"),
        C_INT.withName("cbTpmPublic")
    ).withName("__NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT");
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$struct$LAYOUT() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$struct$LAYOUT_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Magic$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Magic$LAYOUT() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Magic$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Magic$VH_ = __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Magic$VH() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Magic$VH_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Version$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Version$LAYOUT() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Version$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Version$VH_ = __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Version$VH() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$Version$VH_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$HeaderSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$HeaderSize$LAYOUT() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$HeaderSize$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$HeaderSize$VH_ = __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HeaderSize"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$HeaderSize$VH() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$HeaderSize$VH_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbCertifyInfo$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbCertifyInfo$LAYOUT() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbCertifyInfo$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbCertifyInfo$VH_ = __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbCertifyInfo"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbCertifyInfo$VH() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbCertifyInfo$VH_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbSignature$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbSignature$LAYOUT() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbSignature$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbSignature$VH_ = __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSignature"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbSignature$VH() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbSignature$VH_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbTpmPublic$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbTpmPublic$LAYOUT() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbTpmPublic$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbTpmPublic$VH_ = __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbTpmPublic"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbTpmPublic$VH() { return __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT$cbTpmPublic$VH_; }

    static final MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Magic"),
        C_LONG.withName("Version"),
        C_LONG.withName("pcrAlg"),
        C_LONG.withName("cbSignature"),
        C_LONG.withName("cbQuote"),
        C_LONG.withName("cbPcrs")
    ).withName("_NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$struct$LAYOUT() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$struct$LAYOUT_; }

    static final MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Magic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Magic$LAYOUT() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Magic$LAYOUT_; }

    static final VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Magic$VH_ = _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Magic$VH() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Magic$VH_; }

    static final MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Version$LAYOUT() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Version$LAYOUT_; }

    static final VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Version$VH_ = _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Version$VH() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$Version$VH_; }

    static final MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$pcrAlg$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$pcrAlg$LAYOUT() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$pcrAlg$LAYOUT_; }

    static final VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$pcrAlg$VH_ = _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pcrAlg"));
    static final java.lang.invoke.VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$pcrAlg$VH() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$pcrAlg$VH_; }

    static final MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbSignature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbSignature$LAYOUT() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbSignature$LAYOUT_; }

    static final VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbSignature$VH_ = _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSignature"));
    static final java.lang.invoke.VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbSignature$VH() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbSignature$VH_; }

    static final MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbQuote$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbQuote$LAYOUT() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbQuote$LAYOUT_; }

    static final VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbQuote$VH_ = _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbQuote"));
    static final java.lang.invoke.VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbQuote$VH() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbQuote$VH_; }

    static final MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbPcrs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbPcrs$LAYOUT() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbPcrs$LAYOUT_; }

    static final VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbPcrs$VH_ = _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPcrs"));
    static final java.lang.invoke.VarHandle _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbPcrs$VH() { return _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT$cbPcrs$VH_; }

    static final FunctionDescriptor NCryptOpenStorageProvider$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptOpenStorageProvider$FUNC() { return NCryptOpenStorageProvider$FUNC_; }

    static final MethodHandle NCryptOpenStorageProvider$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptOpenStorageProvider",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        NCryptOpenStorageProvider$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptOpenStorageProvider$MH() { return NCryptOpenStorageProvider$MH_; }

    static final MemoryLayout _NCryptAlgorithmName$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszName"),
        C_LONG.withName("dwClass"),
        C_LONG.withName("dwAlgOperations"),
        C_LONG.withName("dwFlags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_NCryptAlgorithmName");
    static final jdk.incubator.foreign.MemoryLayout _NCryptAlgorithmName$struct$LAYOUT() { return _NCryptAlgorithmName$struct$LAYOUT_; }

    static final MemoryLayout _NCryptAlgorithmName$pszName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NCryptAlgorithmName$pszName$LAYOUT() { return _NCryptAlgorithmName$pszName$LAYOUT_; }

    static final VarHandle _NCryptAlgorithmName$pszName$VH_ = MemoryHandles.asAddressVarHandle(_NCryptAlgorithmName$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszName")));
    static final java.lang.invoke.VarHandle _NCryptAlgorithmName$pszName$VH() { return _NCryptAlgorithmName$pszName$VH_; }

    static final MemoryLayout _NCryptAlgorithmName$dwClass$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCryptAlgorithmName$dwClass$LAYOUT() { return _NCryptAlgorithmName$dwClass$LAYOUT_; }

    static final VarHandle _NCryptAlgorithmName$dwClass$VH_ = _NCryptAlgorithmName$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwClass"));
    static final java.lang.invoke.VarHandle _NCryptAlgorithmName$dwClass$VH() { return _NCryptAlgorithmName$dwClass$VH_; }

    static final MemoryLayout _NCryptAlgorithmName$dwAlgOperations$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCryptAlgorithmName$dwAlgOperations$LAYOUT() { return _NCryptAlgorithmName$dwAlgOperations$LAYOUT_; }

    static final VarHandle _NCryptAlgorithmName$dwAlgOperations$VH_ = _NCryptAlgorithmName$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAlgOperations"));
    static final java.lang.invoke.VarHandle _NCryptAlgorithmName$dwAlgOperations$VH() { return _NCryptAlgorithmName$dwAlgOperations$VH_; }

    static final MemoryLayout _NCryptAlgorithmName$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCryptAlgorithmName$dwFlags$LAYOUT() { return _NCryptAlgorithmName$dwFlags$LAYOUT_; }

    static final VarHandle _NCryptAlgorithmName$dwFlags$VH_ = _NCryptAlgorithmName$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _NCryptAlgorithmName$dwFlags$VH() { return _NCryptAlgorithmName$dwFlags$VH_; }

    static final FunctionDescriptor NCryptEnumAlgorithms$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptEnumAlgorithms$FUNC() { return NCryptEnumAlgorithms$FUNC_; }

    static final MethodHandle NCryptEnumAlgorithms$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptEnumAlgorithms",
        "(JILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        NCryptEnumAlgorithms$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptEnumAlgorithms$MH() { return NCryptEnumAlgorithms$MH_; }

    static final FunctionDescriptor NCryptIsAlgSupported$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptIsAlgSupported$FUNC() { return NCryptIsAlgSupported$FUNC_; }

    static final MethodHandle NCryptIsAlgSupported$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptIsAlgSupported",
        "(JLjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptIsAlgSupported$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptIsAlgSupported$MH() { return NCryptIsAlgSupported$MH_; }

    static final MemoryLayout NCryptKeyName$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszName"),
        C_POINTER.withName("pszAlgid"),
        C_LONG.withName("dwLegacyKeySpec"),
        C_LONG.withName("dwFlags")
    ).withName("NCryptKeyName");
    static final jdk.incubator.foreign.MemoryLayout NCryptKeyName$struct$LAYOUT() { return NCryptKeyName$struct$LAYOUT_; }

    static final MemoryLayout NCryptKeyName$pszName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout NCryptKeyName$pszName$LAYOUT() { return NCryptKeyName$pszName$LAYOUT_; }

    static final VarHandle NCryptKeyName$pszName$VH_ = MemoryHandles.asAddressVarHandle(NCryptKeyName$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszName")));
    static final java.lang.invoke.VarHandle NCryptKeyName$pszName$VH() { return NCryptKeyName$pszName$VH_; }

    static final MemoryLayout NCryptKeyName$pszAlgid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout NCryptKeyName$pszAlgid$LAYOUT() { return NCryptKeyName$pszAlgid$LAYOUT_; }

    static final VarHandle NCryptKeyName$pszAlgid$VH_ = MemoryHandles.asAddressVarHandle(NCryptKeyName$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszAlgid")));
    static final java.lang.invoke.VarHandle NCryptKeyName$pszAlgid$VH() { return NCryptKeyName$pszAlgid$VH_; }

    static final MemoryLayout NCryptKeyName$dwLegacyKeySpec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NCryptKeyName$dwLegacyKeySpec$LAYOUT() { return NCryptKeyName$dwLegacyKeySpec$LAYOUT_; }

    static final VarHandle NCryptKeyName$dwLegacyKeySpec$VH_ = NCryptKeyName$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLegacyKeySpec"));
    static final java.lang.invoke.VarHandle NCryptKeyName$dwLegacyKeySpec$VH() { return NCryptKeyName$dwLegacyKeySpec$VH_; }

    static final MemoryLayout NCryptKeyName$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NCryptKeyName$dwFlags$LAYOUT() { return NCryptKeyName$dwFlags$LAYOUT_; }

    static final VarHandle NCryptKeyName$dwFlags$VH_ = NCryptKeyName$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle NCryptKeyName$dwFlags$VH() { return NCryptKeyName$dwFlags$VH_; }

    static final FunctionDescriptor NCryptEnumKeys$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptEnumKeys$FUNC() { return NCryptEnumKeys$FUNC_; }

    static final MethodHandle NCryptEnumKeys$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptEnumKeys",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        NCryptEnumKeys$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptEnumKeys$MH() { return NCryptEnumKeys$MH_; }

    static final MemoryLayout NCryptProviderName$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszName"),
        C_POINTER.withName("pszComment")
    ).withName("NCryptProviderName");
    static final jdk.incubator.foreign.MemoryLayout NCryptProviderName$struct$LAYOUT() { return NCryptProviderName$struct$LAYOUT_; }

    static final MemoryLayout NCryptProviderName$pszName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout NCryptProviderName$pszName$LAYOUT() { return NCryptProviderName$pszName$LAYOUT_; }

    static final VarHandle NCryptProviderName$pszName$VH_ = MemoryHandles.asAddressVarHandle(NCryptProviderName$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszName")));
    static final java.lang.invoke.VarHandle NCryptProviderName$pszName$VH() { return NCryptProviderName$pszName$VH_; }

    static final MemoryLayout NCryptProviderName$pszComment$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout NCryptProviderName$pszComment$LAYOUT() { return NCryptProviderName$pszComment$LAYOUT_; }

    static final VarHandle NCryptProviderName$pszComment$VH_ = MemoryHandles.asAddressVarHandle(NCryptProviderName$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszComment")));
    static final java.lang.invoke.VarHandle NCryptProviderName$pszComment$VH() { return NCryptProviderName$pszComment$VH_; }

    static final FunctionDescriptor NCryptEnumStorageProviders$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptEnumStorageProviders$FUNC() { return NCryptEnumStorageProviders$FUNC_; }

    static final MethodHandle NCryptEnumStorageProviders$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptEnumStorageProviders",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        NCryptEnumStorageProviders$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptEnumStorageProviders$MH() { return NCryptEnumStorageProviders$MH_; }

    static final FunctionDescriptor NCryptFreeBuffer$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptFreeBuffer$FUNC() { return NCryptFreeBuffer$FUNC_; }

    static final MethodHandle NCryptFreeBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptFreeBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        NCryptFreeBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptFreeBuffer$MH() { return NCryptFreeBuffer$MH_; }

    static final FunctionDescriptor NCryptOpenKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptOpenKey$FUNC() { return NCryptOpenKey$FUNC_; }

    static final MethodHandle NCryptOpenKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptOpenKey",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        NCryptOpenKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptOpenKey$MH() { return NCryptOpenKey$MH_; }

    static final FunctionDescriptor NCryptCreatePersistedKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptCreatePersistedKey$FUNC() { return NCryptCreatePersistedKey$FUNC_; }

    static final MethodHandle NCryptCreatePersistedKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptCreatePersistedKey",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        NCryptCreatePersistedKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptCreatePersistedKey$MH() { return NCryptCreatePersistedKey$MH_; }

    static final MemoryLayout __NCRYPT_UI_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        C_LONG.withName("dwFlags"),
        C_POINTER.withName("pszCreationTitle"),
        C_POINTER.withName("pszFriendlyName"),
        C_POINTER.withName("pszDescription")
    ).withName("__NCRYPT_UI_POLICY");
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_UI_POLICY$struct$LAYOUT() { return __NCRYPT_UI_POLICY$struct$LAYOUT_; }

    static final MemoryLayout __NCRYPT_UI_POLICY$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_UI_POLICY$dwVersion$LAYOUT() { return __NCRYPT_UI_POLICY$dwVersion$LAYOUT_; }

    static final VarHandle __NCRYPT_UI_POLICY$dwVersion$VH_ = __NCRYPT_UI_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle __NCRYPT_UI_POLICY$dwVersion$VH() { return __NCRYPT_UI_POLICY$dwVersion$VH_; }

    static final MemoryLayout __NCRYPT_UI_POLICY$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_UI_POLICY$dwFlags$LAYOUT() { return __NCRYPT_UI_POLICY$dwFlags$LAYOUT_; }

    static final VarHandle __NCRYPT_UI_POLICY$dwFlags$VH_ = __NCRYPT_UI_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle __NCRYPT_UI_POLICY$dwFlags$VH() { return __NCRYPT_UI_POLICY$dwFlags$VH_; }

    static final MemoryLayout __NCRYPT_UI_POLICY$pszCreationTitle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_UI_POLICY$pszCreationTitle$LAYOUT() { return __NCRYPT_UI_POLICY$pszCreationTitle$LAYOUT_; }

    static final VarHandle __NCRYPT_UI_POLICY$pszCreationTitle$VH_ = MemoryHandles.asAddressVarHandle(__NCRYPT_UI_POLICY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszCreationTitle")));
    static final java.lang.invoke.VarHandle __NCRYPT_UI_POLICY$pszCreationTitle$VH() { return __NCRYPT_UI_POLICY$pszCreationTitle$VH_; }

    static final MemoryLayout __NCRYPT_UI_POLICY$pszFriendlyName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_UI_POLICY$pszFriendlyName$LAYOUT() { return __NCRYPT_UI_POLICY$pszFriendlyName$LAYOUT_; }

    static final VarHandle __NCRYPT_UI_POLICY$pszFriendlyName$VH_ = MemoryHandles.asAddressVarHandle(__NCRYPT_UI_POLICY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszFriendlyName")));
    static final java.lang.invoke.VarHandle __NCRYPT_UI_POLICY$pszFriendlyName$VH() { return __NCRYPT_UI_POLICY$pszFriendlyName$VH_; }

    static final MemoryLayout __NCRYPT_UI_POLICY$pszDescription$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_UI_POLICY$pszDescription$LAYOUT() { return __NCRYPT_UI_POLICY$pszDescription$LAYOUT_; }

    static final VarHandle __NCRYPT_UI_POLICY$pszDescription$VH_ = MemoryHandles.asAddressVarHandle(__NCRYPT_UI_POLICY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszDescription")));
    static final java.lang.invoke.VarHandle __NCRYPT_UI_POLICY$pszDescription$VH() { return __NCRYPT_UI_POLICY$pszDescription$VH_; }

    static final MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        C_LONG.withName("dwPolicyFlags"),
        C_LONG.withName("cbUserSid"),
        C_LONG.withName("cbApplicationSid")
    ).withName("__NCRYPT_KEY_ACCESS_POLICY_BLOB");
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$struct$LAYOUT() { return __NCRYPT_KEY_ACCESS_POLICY_BLOB$struct$LAYOUT_; }

    static final MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwVersion$LAYOUT() { return __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwVersion$LAYOUT_; }

    static final VarHandle __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwVersion$VH_ = __NCRYPT_KEY_ACCESS_POLICY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwVersion$VH() { return __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwVersion$VH_; }

    static final MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwPolicyFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwPolicyFlags$LAYOUT() { return __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwPolicyFlags$LAYOUT_; }

    static final VarHandle __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwPolicyFlags$VH_ = __NCRYPT_KEY_ACCESS_POLICY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPolicyFlags"));
    static final java.lang.invoke.VarHandle __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwPolicyFlags$VH() { return __NCRYPT_KEY_ACCESS_POLICY_BLOB$dwPolicyFlags$VH_; }

    static final MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbUserSid$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbUserSid$LAYOUT() { return __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbUserSid$LAYOUT_; }

    static final VarHandle __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbUserSid$VH_ = __NCRYPT_KEY_ACCESS_POLICY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbUserSid"));
    static final java.lang.invoke.VarHandle __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbUserSid$VH() { return __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbUserSid$VH_; }

    static final MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbApplicationSid$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbApplicationSid$LAYOUT() { return __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbApplicationSid$LAYOUT_; }

    static final VarHandle __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbApplicationSid$VH_ = __NCRYPT_KEY_ACCESS_POLICY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbApplicationSid"));
    static final java.lang.invoke.VarHandle __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbApplicationSid$VH() { return __NCRYPT_KEY_ACCESS_POLICY_BLOB$cbApplicationSid$VH_; }

    static final MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwMinLength"),
        C_LONG.withName("dwMaxLength"),
        C_LONG.withName("dwIncrement"),
        C_LONG.withName("dwDefaultLength")
    ).withName("__NCRYPT_SUPPORTED_LENGTHS");
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$struct$LAYOUT() { return __NCRYPT_SUPPORTED_LENGTHS$struct$LAYOUT_; }

    static final MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$dwMinLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$dwMinLength$LAYOUT() { return __NCRYPT_SUPPORTED_LENGTHS$dwMinLength$LAYOUT_; }

    static final VarHandle __NCRYPT_SUPPORTED_LENGTHS$dwMinLength$VH_ = __NCRYPT_SUPPORTED_LENGTHS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinLength"));
    static final java.lang.invoke.VarHandle __NCRYPT_SUPPORTED_LENGTHS$dwMinLength$VH() { return __NCRYPT_SUPPORTED_LENGTHS$dwMinLength$VH_; }

    static final MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$dwMaxLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$dwMaxLength$LAYOUT() { return __NCRYPT_SUPPORTED_LENGTHS$dwMaxLength$LAYOUT_; }

    static final VarHandle __NCRYPT_SUPPORTED_LENGTHS$dwMaxLength$VH_ = __NCRYPT_SUPPORTED_LENGTHS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxLength"));
    static final java.lang.invoke.VarHandle __NCRYPT_SUPPORTED_LENGTHS$dwMaxLength$VH() { return __NCRYPT_SUPPORTED_LENGTHS$dwMaxLength$VH_; }

    static final MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$dwIncrement$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$dwIncrement$LAYOUT() { return __NCRYPT_SUPPORTED_LENGTHS$dwIncrement$LAYOUT_; }

    static final VarHandle __NCRYPT_SUPPORTED_LENGTHS$dwIncrement$VH_ = __NCRYPT_SUPPORTED_LENGTHS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwIncrement"));
    static final java.lang.invoke.VarHandle __NCRYPT_SUPPORTED_LENGTHS$dwIncrement$VH() { return __NCRYPT_SUPPORTED_LENGTHS$dwIncrement$VH_; }

    static final MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$dwDefaultLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_SUPPORTED_LENGTHS$dwDefaultLength$LAYOUT() { return __NCRYPT_SUPPORTED_LENGTHS$dwDefaultLength$LAYOUT_; }

    static final VarHandle __NCRYPT_SUPPORTED_LENGTHS$dwDefaultLength$VH_ = __NCRYPT_SUPPORTED_LENGTHS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDefaultLength"));
    static final java.lang.invoke.VarHandle __NCRYPT_SUPPORTED_LENGTHS$dwDefaultLength$VH() { return __NCRYPT_SUPPORTED_LENGTHS$dwDefaultLength$VH_; }

    static final MemoryLayout __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        C_INT.withName("iExpiration"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("pabNonce"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("pabPolicyRef"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("pabHMAC")
    ).withName("__NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO");
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$struct$LAYOUT() { return __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$struct$LAYOUT_; }

    static final MemoryLayout __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$dwVersion$LAYOUT() { return __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$dwVersion$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$dwVersion$VH_ = __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$dwVersion$VH() { return __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$dwVersion$VH_; }

    static final MemoryLayout __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$iExpiration$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$iExpiration$LAYOUT() { return __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$iExpiration$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$iExpiration$VH_ = __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iExpiration"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$iExpiration$VH() { return __NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO$iExpiration$VH_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("major1"),
        C_SHORT.withName("major2"),
        C_SHORT.withName("minor1"),
        C_SHORT.withName("minor2")
    ).withName("__NCRYPT_PCP_TPM_FW_VERSION_INFO");
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$struct$LAYOUT() { return __NCRYPT_PCP_TPM_FW_VERSION_INFO$struct$LAYOUT_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$major1$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$major1$LAYOUT() { return __NCRYPT_PCP_TPM_FW_VERSION_INFO$major1$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_FW_VERSION_INFO$major1$VH_ = __NCRYPT_PCP_TPM_FW_VERSION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("major1"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_FW_VERSION_INFO$major1$VH() { return __NCRYPT_PCP_TPM_FW_VERSION_INFO$major1$VH_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$major2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$major2$LAYOUT() { return __NCRYPT_PCP_TPM_FW_VERSION_INFO$major2$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_FW_VERSION_INFO$major2$VH_ = __NCRYPT_PCP_TPM_FW_VERSION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("major2"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_FW_VERSION_INFO$major2$VH() { return __NCRYPT_PCP_TPM_FW_VERSION_INFO$major2$VH_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor1$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor1$LAYOUT() { return __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor1$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor1$VH_ = __NCRYPT_PCP_TPM_FW_VERSION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("minor1"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor1$VH() { return __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor1$VH_; }

    static final MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor2$LAYOUT() { return __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor2$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor2$VH_ = __NCRYPT_PCP_TPM_FW_VERSION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("minor2"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor2$VH() { return __NCRYPT_PCP_TPM_FW_VERSION_INFO$minor2$VH_; }

    static final MemoryLayout __NCRYPT_PCP_RAW_POLICYDIGEST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        C_LONG.withName("cbDigest")
    ).withName("__NCRYPT_PCP_RAW_POLICYDIGEST");
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_RAW_POLICYDIGEST$struct$LAYOUT() { return __NCRYPT_PCP_RAW_POLICYDIGEST$struct$LAYOUT_; }

    static final MemoryLayout __NCRYPT_PCP_RAW_POLICYDIGEST$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_RAW_POLICYDIGEST$dwVersion$LAYOUT() { return __NCRYPT_PCP_RAW_POLICYDIGEST$dwVersion$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_RAW_POLICYDIGEST$dwVersion$VH_ = __NCRYPT_PCP_RAW_POLICYDIGEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_RAW_POLICYDIGEST$dwVersion$VH() { return __NCRYPT_PCP_RAW_POLICYDIGEST$dwVersion$VH_; }

    static final MemoryLayout __NCRYPT_PCP_RAW_POLICYDIGEST$cbDigest$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __NCRYPT_PCP_RAW_POLICYDIGEST$cbDigest$LAYOUT() { return __NCRYPT_PCP_RAW_POLICYDIGEST$cbDigest$LAYOUT_; }

    static final VarHandle __NCRYPT_PCP_RAW_POLICYDIGEST$cbDigest$VH_ = __NCRYPT_PCP_RAW_POLICYDIGEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbDigest"));
    static final java.lang.invoke.VarHandle __NCRYPT_PCP_RAW_POLICYDIGEST$cbDigest$VH() { return __NCRYPT_PCP_RAW_POLICYDIGEST$cbDigest$VH_; }

    static final FunctionDescriptor NCryptGetProperty$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptGetProperty$FUNC() { return NCryptGetProperty$FUNC_; }

    static final MethodHandle NCryptGetProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptGetProperty",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptGetProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptGetProperty$MH() { return NCryptGetProperty$MH_; }

    static final FunctionDescriptor NCryptSetProperty$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptSetProperty$FUNC() { return NCryptSetProperty$FUNC_; }

    static final MethodHandle NCryptSetProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptSetProperty",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        NCryptSetProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptSetProperty$MH() { return NCryptSetProperty$MH_; }

    static final FunctionDescriptor NCryptFinalizeKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptFinalizeKey$FUNC() { return NCryptFinalizeKey$FUNC_; }

    static final MethodHandle NCryptFinalizeKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptFinalizeKey",
        "(JI)I",
        NCryptFinalizeKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptFinalizeKey$MH() { return NCryptFinalizeKey$MH_; }

    static final FunctionDescriptor NCryptEncrypt$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptEncrypt$FUNC() { return NCryptEncrypt$FUNC_; }

    static final MethodHandle NCryptEncrypt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptEncrypt",
        "(JLjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptEncrypt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptEncrypt$MH() { return NCryptEncrypt$MH_; }

    static final FunctionDescriptor NCryptDecrypt$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptDecrypt$FUNC() { return NCryptDecrypt$FUNC_; }

    static final MethodHandle NCryptDecrypt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptDecrypt",
        "(JLjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptDecrypt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptDecrypt$MH() { return NCryptDecrypt$MH_; }

    static final MemoryLayout _NCRYPT_KEY_BLOB_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwMagic"),
        C_LONG.withName("cbAlgName"),
        C_LONG.withName("cbKeyData")
    ).withName("_NCRYPT_KEY_BLOB_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_BLOB_HEADER$struct$LAYOUT() { return _NCRYPT_KEY_BLOB_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _NCRYPT_KEY_BLOB_HEADER$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_BLOB_HEADER$cbSize$LAYOUT() { return _NCRYPT_KEY_BLOB_HEADER$cbSize$LAYOUT_; }

    static final VarHandle _NCRYPT_KEY_BLOB_HEADER$cbSize$VH_ = _NCRYPT_KEY_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _NCRYPT_KEY_BLOB_HEADER$cbSize$VH() { return _NCRYPT_KEY_BLOB_HEADER$cbSize$VH_; }

    static final MemoryLayout _NCRYPT_KEY_BLOB_HEADER$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_BLOB_HEADER$dwMagic$LAYOUT() { return _NCRYPT_KEY_BLOB_HEADER$dwMagic$LAYOUT_; }

    static final VarHandle _NCRYPT_KEY_BLOB_HEADER$dwMagic$VH_ = _NCRYPT_KEY_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _NCRYPT_KEY_BLOB_HEADER$dwMagic$VH() { return _NCRYPT_KEY_BLOB_HEADER$dwMagic$VH_; }

    static final MemoryLayout _NCRYPT_KEY_BLOB_HEADER$cbAlgName$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_BLOB_HEADER$cbAlgName$LAYOUT() { return _NCRYPT_KEY_BLOB_HEADER$cbAlgName$LAYOUT_; }

    static final VarHandle _NCRYPT_KEY_BLOB_HEADER$cbAlgName$VH_ = _NCRYPT_KEY_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbAlgName"));
    static final java.lang.invoke.VarHandle _NCRYPT_KEY_BLOB_HEADER$cbAlgName$VH() { return _NCRYPT_KEY_BLOB_HEADER$cbAlgName$VH_; }

    static final MemoryLayout _NCRYPT_KEY_BLOB_HEADER$cbKeyData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_BLOB_HEADER$cbKeyData$LAYOUT() { return _NCRYPT_KEY_BLOB_HEADER$cbKeyData$LAYOUT_; }

    static final VarHandle _NCRYPT_KEY_BLOB_HEADER$cbKeyData$VH_ = _NCRYPT_KEY_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKeyData"));
    static final java.lang.invoke.VarHandle _NCRYPT_KEY_BLOB_HEADER$cbKeyData$VH() { return _NCRYPT_KEY_BLOB_HEADER$cbKeyData$VH_; }

    static final MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("magic"),
        C_LONG.withName("cbHeader"),
        C_LONG.withName("cbPublic"),
        C_LONG.withName("cbPrivate"),
        C_LONG.withName("cbName")
    ).withName("NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER");
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$struct$LAYOUT() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$struct$LAYOUT_; }

    static final MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$magic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$magic$LAYOUT() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$magic$LAYOUT_; }

    static final VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$magic$VH_ = NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("magic"));
    static final java.lang.invoke.VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$magic$VH() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$magic$VH_; }

    static final MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbHeader$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbHeader$LAYOUT() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbHeader$LAYOUT_; }

    static final VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbHeader$VH_ = NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbHeader"));
    static final java.lang.invoke.VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbHeader$VH() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbHeader$VH_; }

    static final MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPublic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPublic$LAYOUT() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPublic$LAYOUT_; }

    static final VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPublic$VH_ = NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPublic"));
    static final java.lang.invoke.VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPublic$VH() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPublic$VH_; }

    static final MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPrivate$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPrivate$LAYOUT() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPrivate$LAYOUT_; }

    static final VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPrivate$VH_ = NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPrivate"));
    static final java.lang.invoke.VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPrivate$VH() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbPrivate$VH_; }

    static final MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbName$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbName$LAYOUT() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbName$LAYOUT_; }

    static final VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbName$VH_ = NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbName"));
    static final java.lang.invoke.VarHandle NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbName$VH() { return NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER$cbName$VH_; }

    static final FunctionDescriptor NCryptImportKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptImportKey$FUNC() { return NCryptImportKey$FUNC_; }

    static final MethodHandle NCryptImportKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptImportKey",
        "(JJLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        NCryptImportKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptImportKey$MH() { return NCryptImportKey$MH_; }

    static final FunctionDescriptor NCryptExportKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptExportKey$FUNC() { return NCryptExportKey$FUNC_; }

    static final MethodHandle NCryptExportKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptExportKey",
        "(JJLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptExportKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptExportKey$MH() { return NCryptExportKey$MH_; }

    static final FunctionDescriptor NCryptSignHash$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptSignHash$FUNC() { return NCryptSignHash$FUNC_; }

    static final MethodHandle NCryptSignHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptSignHash",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptSignHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptSignHash$MH() { return NCryptSignHash$MH_; }

    static final FunctionDescriptor NCryptVerifySignature$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptVerifySignature$FUNC() { return NCryptVerifySignature$FUNC_; }

    static final MethodHandle NCryptVerifySignature$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptVerifySignature",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        NCryptVerifySignature$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptVerifySignature$MH() { return NCryptVerifySignature$MH_; }

    static final FunctionDescriptor NCryptDeleteKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptDeleteKey$FUNC() { return NCryptDeleteKey$FUNC_; }

    static final MethodHandle NCryptDeleteKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptDeleteKey",
        "(JI)I",
        NCryptDeleteKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptDeleteKey$MH() { return NCryptDeleteKey$MH_; }

    static final FunctionDescriptor NCryptFreeObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptFreeObject$FUNC() { return NCryptFreeObject$FUNC_; }

    static final MethodHandle NCryptFreeObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptFreeObject",
        "(J)I",
        NCryptFreeObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptFreeObject$MH() { return NCryptFreeObject$MH_; }

    static final FunctionDescriptor NCryptIsKeyHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptIsKeyHandle$FUNC() { return NCryptIsKeyHandle$FUNC_; }

    static final MethodHandle NCryptIsKeyHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptIsKeyHandle",
        "(J)I",
        NCryptIsKeyHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptIsKeyHandle$MH() { return NCryptIsKeyHandle$MH_; }

    static final FunctionDescriptor NCryptTranslateHandle$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptTranslateHandle$FUNC() { return NCryptTranslateHandle$FUNC_; }

    static final MethodHandle NCryptTranslateHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptTranslateHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJII)I",
        NCryptTranslateHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptTranslateHandle$MH() { return NCryptTranslateHandle$MH_; }

    static final FunctionDescriptor NCryptNotifyChangeKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptNotifyChangeKey$FUNC() { return NCryptNotifyChangeKey$FUNC_; }

    static final MethodHandle NCryptNotifyChangeKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptNotifyChangeKey",
        "(JLjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptNotifyChangeKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptNotifyChangeKey$MH() { return NCryptNotifyChangeKey$MH_; }

    static final FunctionDescriptor NCryptSecretAgreement$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptSecretAgreement$FUNC() { return NCryptSecretAgreement$FUNC_; }

    static final MethodHandle NCryptSecretAgreement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptSecretAgreement",
        "(JJLjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptSecretAgreement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptSecretAgreement$MH() { return NCryptSecretAgreement$MH_; }

    static final FunctionDescriptor NCryptDeriveKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptDeriveKey$FUNC() { return NCryptDeriveKey$FUNC_; }

    static final MethodHandle NCryptDeriveKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptDeriveKey",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptDeriveKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptDeriveKey$MH() { return NCryptDeriveKey$MH_; }

    static final FunctionDescriptor NCryptKeyDerivation$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptKeyDerivation$FUNC() { return NCryptKeyDerivation$FUNC_; }

    static final MethodHandle NCryptKeyDerivation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptKeyDerivation",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptKeyDerivation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptKeyDerivation$MH() { return NCryptKeyDerivation$MH_; }

    static final FunctionDescriptor NCryptCreateClaim$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptCreateClaim$FUNC() { return NCryptCreateClaim$FUNC_; }

    static final MethodHandle NCryptCreateClaim$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptCreateClaim",
        "(JJILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptCreateClaim$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptCreateClaim$MH() { return NCryptCreateClaim$MH_; }

    static final FunctionDescriptor NCryptVerifyClaim$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONGLONG,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NCryptVerifyClaim$FUNC() { return NCryptVerifyClaim$FUNC_; }

    static final MethodHandle NCryptVerifyClaim$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NCryptVerifyClaim",
        "(JJILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        NCryptVerifyClaim$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NCryptVerifyClaim$MH() { return NCryptVerifyClaim$MH_; }

    static final MemoryLayout _CRYPT_BIT_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbData"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbData"),
        C_LONG.withName("cUnusedBits"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CRYPT_BIT_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_BIT_BLOB$struct$LAYOUT() { return _CRYPT_BIT_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_BIT_BLOB$cbData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_BIT_BLOB$cbData$LAYOUT() { return _CRYPT_BIT_BLOB$cbData$LAYOUT_; }

    static final VarHandle _CRYPT_BIT_BLOB$cbData$VH_ = _CRYPT_BIT_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbData"));
    static final java.lang.invoke.VarHandle _CRYPT_BIT_BLOB$cbData$VH() { return _CRYPT_BIT_BLOB$cbData$VH_; }

    static final MemoryLayout _CRYPT_BIT_BLOB$pbData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_BIT_BLOB$pbData$LAYOUT() { return _CRYPT_BIT_BLOB$pbData$LAYOUT_; }

    static final VarHandle _CRYPT_BIT_BLOB$pbData$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_BIT_BLOB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbData")));
    static final java.lang.invoke.VarHandle _CRYPT_BIT_BLOB$pbData$VH() { return _CRYPT_BIT_BLOB$pbData$VH_; }

    static final MemoryLayout _CRYPT_BIT_BLOB$cUnusedBits$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_BIT_BLOB$cUnusedBits$LAYOUT() { return _CRYPT_BIT_BLOB$cUnusedBits$LAYOUT_; }

    static final VarHandle _CRYPT_BIT_BLOB$cUnusedBits$VH_ = _CRYPT_BIT_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cUnusedBits"));
    static final java.lang.invoke.VarHandle _CRYPT_BIT_BLOB$cUnusedBits$VH() { return _CRYPT_BIT_BLOB$cUnusedBits$VH_; }

    static final MemoryLayout _CRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszObjId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Parameters")
    ).withName("_CRYPT_ALGORITHM_IDENTIFIER");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT() { return _CRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_ALGORITHM_IDENTIFIER$pszObjId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ALGORITHM_IDENTIFIER$pszObjId$LAYOUT() { return _CRYPT_ALGORITHM_IDENTIFIER$pszObjId$LAYOUT_; }

    static final VarHandle _CRYPT_ALGORITHM_IDENTIFIER$pszObjId$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszObjId")));
    static final java.lang.invoke.VarHandle _CRYPT_ALGORITHM_IDENTIFIER$pszObjId$VH() { return _CRYPT_ALGORITHM_IDENTIFIER$pszObjId$VH_; }

    static final MemoryLayout _CRYPT_OBJID_TABLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwAlgId"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pszObjId")
    ).withName("_CRYPT_OBJID_TABLE");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJID_TABLE$struct$LAYOUT() { return _CRYPT_OBJID_TABLE$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_OBJID_TABLE$dwAlgId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJID_TABLE$dwAlgId$LAYOUT() { return _CRYPT_OBJID_TABLE$dwAlgId$LAYOUT_; }

    static final VarHandle _CRYPT_OBJID_TABLE$dwAlgId$VH_ = _CRYPT_OBJID_TABLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAlgId"));
    static final java.lang.invoke.VarHandle _CRYPT_OBJID_TABLE$dwAlgId$VH() { return _CRYPT_OBJID_TABLE$dwAlgId$VH_; }

    static final MemoryLayout _CRYPT_OBJID_TABLE$pszObjId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJID_TABLE$pszObjId$LAYOUT() { return _CRYPT_OBJID_TABLE$pszObjId$LAYOUT_; }

    static final VarHandle _CRYPT_OBJID_TABLE$pszObjId$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_OBJID_TABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszObjId")));
    static final java.lang.invoke.VarHandle _CRYPT_OBJID_TABLE$pszObjId$VH() { return _CRYPT_OBJID_TABLE$pszObjId$VH_; }

    static final MemoryLayout _CRYPT_HASH_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("HashAlgorithm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Hash")
    ).withName("_CRYPT_HASH_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_HASH_INFO$struct$LAYOUT() { return _CRYPT_HASH_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_EXTENSION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszObjId"),
        C_INT.withName("fCritical"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Value")
    ).withName("_CERT_EXTENSION");
    static final jdk.incubator.foreign.MemoryLayout _CERT_EXTENSION$struct$LAYOUT() { return _CERT_EXTENSION$struct$LAYOUT_; }

    static final MemoryLayout _CERT_EXTENSION$pszObjId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_EXTENSION$pszObjId$LAYOUT() { return _CERT_EXTENSION$pszObjId$LAYOUT_; }

    static final VarHandle _CERT_EXTENSION$pszObjId$VH_ = MemoryHandles.asAddressVarHandle(_CERT_EXTENSION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszObjId")));
    static final java.lang.invoke.VarHandle _CERT_EXTENSION$pszObjId$VH() { return _CERT_EXTENSION$pszObjId$VH_; }

    static final MemoryLayout _CERT_EXTENSION$fCritical$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CERT_EXTENSION$fCritical$LAYOUT() { return _CERT_EXTENSION$fCritical$LAYOUT_; }

    static final VarHandle _CERT_EXTENSION$fCritical$VH_ = _CERT_EXTENSION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fCritical"));
    static final java.lang.invoke.VarHandle _CERT_EXTENSION$fCritical$VH() { return _CERT_EXTENSION$fCritical$VH_; }

    static final MemoryLayout _CRYPT_ATTRIBUTE_TYPE_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszObjId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Value")
    ).withName("_CRYPT_ATTRIBUTE_TYPE_VALUE");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ATTRIBUTE_TYPE_VALUE$struct$LAYOUT() { return _CRYPT_ATTRIBUTE_TYPE_VALUE$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_ATTRIBUTE_TYPE_VALUE$pszObjId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ATTRIBUTE_TYPE_VALUE$pszObjId$LAYOUT() { return _CRYPT_ATTRIBUTE_TYPE_VALUE$pszObjId$LAYOUT_; }

    static final VarHandle _CRYPT_ATTRIBUTE_TYPE_VALUE$pszObjId$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ATTRIBUTE_TYPE_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszObjId")));
    static final java.lang.invoke.VarHandle _CRYPT_ATTRIBUTE_TYPE_VALUE$pszObjId$VH() { return _CRYPT_ATTRIBUTE_TYPE_VALUE$pszObjId$VH_; }

    static final MemoryLayout _CRYPT_ATTRIBUTE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszObjId"),
        C_LONG.withName("cValue"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgValue")
    ).withName("_CRYPT_ATTRIBUTE");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ATTRIBUTE$struct$LAYOUT() { return _CRYPT_ATTRIBUTE$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_ATTRIBUTE$pszObjId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ATTRIBUTE$pszObjId$LAYOUT() { return _CRYPT_ATTRIBUTE$pszObjId$LAYOUT_; }

    static final VarHandle _CRYPT_ATTRIBUTE$pszObjId$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ATTRIBUTE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszObjId")));
    static final java.lang.invoke.VarHandle _CRYPT_ATTRIBUTE$pszObjId$VH() { return _CRYPT_ATTRIBUTE$pszObjId$VH_; }

    static final MemoryLayout _CRYPT_ATTRIBUTE$cValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ATTRIBUTE$cValue$LAYOUT() { return _CRYPT_ATTRIBUTE$cValue$LAYOUT_; }

    static final VarHandle _CRYPT_ATTRIBUTE$cValue$VH_ = _CRYPT_ATTRIBUTE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cValue"));
    static final java.lang.invoke.VarHandle _CRYPT_ATTRIBUTE$cValue$VH() { return _CRYPT_ATTRIBUTE$cValue$VH_; }

    static final MemoryLayout _CRYPT_ATTRIBUTE$rgValue$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ATTRIBUTE$rgValue$LAYOUT() { return _CRYPT_ATTRIBUTE$rgValue$LAYOUT_; }

    static final VarHandle _CRYPT_ATTRIBUTE$rgValue$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ATTRIBUTE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgValue")));
    static final java.lang.invoke.VarHandle _CRYPT_ATTRIBUTE$rgValue$VH() { return _CRYPT_ATTRIBUTE$rgValue$VH_; }

    static final MemoryLayout _CRYPT_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cAttr"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgAttr")
    ).withName("_CRYPT_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ATTRIBUTES$struct$LAYOUT() { return _CRYPT_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_ATTRIBUTES$cAttr$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ATTRIBUTES$cAttr$LAYOUT() { return _CRYPT_ATTRIBUTES$cAttr$LAYOUT_; }

    static final VarHandle _CRYPT_ATTRIBUTES$cAttr$VH_ = _CRYPT_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cAttr"));
    static final java.lang.invoke.VarHandle _CRYPT_ATTRIBUTES$cAttr$VH() { return _CRYPT_ATTRIBUTES$cAttr$VH_; }

    static final MemoryLayout _CRYPT_ATTRIBUTES$rgAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ATTRIBUTES$rgAttr$LAYOUT() { return _CRYPT_ATTRIBUTES$rgAttr$LAYOUT_; }

    static final VarHandle _CRYPT_ATTRIBUTES$rgAttr$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgAttr")));
    static final java.lang.invoke.VarHandle _CRYPT_ATTRIBUTES$rgAttr$VH() { return _CRYPT_ATTRIBUTES$rgAttr$VH_; }

    static final MemoryLayout _CERT_RDN_ATTR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszObjId"),
        C_LONG.withName("dwValueType"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Value")
    ).withName("_CERT_RDN_ATTR");
    static final jdk.incubator.foreign.MemoryLayout _CERT_RDN_ATTR$struct$LAYOUT() { return _CERT_RDN_ATTR$struct$LAYOUT_; }

    static final MemoryLayout _CERT_RDN_ATTR$pszObjId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_RDN_ATTR$pszObjId$LAYOUT() { return _CERT_RDN_ATTR$pszObjId$LAYOUT_; }

    static final VarHandle _CERT_RDN_ATTR$pszObjId$VH_ = MemoryHandles.asAddressVarHandle(_CERT_RDN_ATTR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszObjId")));
    static final java.lang.invoke.VarHandle _CERT_RDN_ATTR$pszObjId$VH() { return _CERT_RDN_ATTR$pszObjId$VH_; }

    static final MemoryLayout _CERT_RDN_ATTR$dwValueType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_RDN_ATTR$dwValueType$LAYOUT() { return _CERT_RDN_ATTR$dwValueType$LAYOUT_; }

    static final VarHandle _CERT_RDN_ATTR$dwValueType$VH_ = _CERT_RDN_ATTR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwValueType"));
    static final java.lang.invoke.VarHandle _CERT_RDN_ATTR$dwValueType$VH() { return _CERT_RDN_ATTR$dwValueType$VH_; }

    static final MemoryLayout _CERT_RDN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cRDNAttr"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgRDNAttr")
    ).withName("_CERT_RDN");
    static final jdk.incubator.foreign.MemoryLayout _CERT_RDN$struct$LAYOUT() { return _CERT_RDN$struct$LAYOUT_; }

    static final MemoryLayout _CERT_RDN$cRDNAttr$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_RDN$cRDNAttr$LAYOUT() { return _CERT_RDN$cRDNAttr$LAYOUT_; }

    static final VarHandle _CERT_RDN$cRDNAttr$VH_ = _CERT_RDN$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cRDNAttr"));
    static final java.lang.invoke.VarHandle _CERT_RDN$cRDNAttr$VH() { return _CERT_RDN$cRDNAttr$VH_; }

    static final MemoryLayout _CERT_RDN$rgRDNAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_RDN$rgRDNAttr$LAYOUT() { return _CERT_RDN$rgRDNAttr$LAYOUT_; }

    static final VarHandle _CERT_RDN$rgRDNAttr$VH_ = MemoryHandles.asAddressVarHandle(_CERT_RDN$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgRDNAttr")));
    static final java.lang.invoke.VarHandle _CERT_RDN$rgRDNAttr$VH() { return _CERT_RDN$rgRDNAttr$VH_; }

    static final MemoryLayout _CERT_NAME_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cRDN"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgRDN")
    ).withName("_CERT_NAME_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_NAME_INFO$struct$LAYOUT() { return _CERT_NAME_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_NAME_INFO$cRDN$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_NAME_INFO$cRDN$LAYOUT() { return _CERT_NAME_INFO$cRDN$LAYOUT_; }

    static final VarHandle _CERT_NAME_INFO$cRDN$VH_ = _CERT_NAME_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cRDN"));
    static final java.lang.invoke.VarHandle _CERT_NAME_INFO$cRDN$VH() { return _CERT_NAME_INFO$cRDN$VH_; }

    static final MemoryLayout _CERT_NAME_INFO$rgRDN$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_NAME_INFO$rgRDN$LAYOUT() { return _CERT_NAME_INFO$rgRDN$LAYOUT_; }

    static final VarHandle _CERT_NAME_INFO$rgRDN$VH_ = MemoryHandles.asAddressVarHandle(_CERT_NAME_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgRDN")));
    static final java.lang.invoke.VarHandle _CERT_NAME_INFO$rgRDN$VH() { return _CERT_NAME_INFO$rgRDN$VH_; }

    static final MemoryLayout _CERT_NAME_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwValueType"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Value")
    ).withName("_CERT_NAME_VALUE");
    static final jdk.incubator.foreign.MemoryLayout _CERT_NAME_VALUE$struct$LAYOUT() { return _CERT_NAME_VALUE$struct$LAYOUT_; }

    static final MemoryLayout _CERT_NAME_VALUE$dwValueType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_NAME_VALUE$dwValueType$LAYOUT() { return _CERT_NAME_VALUE$dwValueType$LAYOUT_; }

    static final VarHandle _CERT_NAME_VALUE$dwValueType$VH_ = _CERT_NAME_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwValueType"));
    static final java.lang.invoke.VarHandle _CERT_NAME_VALUE$dwValueType$VH() { return _CERT_NAME_VALUE$dwValueType$VH_; }

    static final MemoryLayout _CERT_PUBLIC_KEY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("Algorithm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("PublicKey")
    ).withName("_CERT_PUBLIC_KEY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_PUBLIC_KEY_INFO$struct$LAYOUT() { return _CERT_PUBLIC_KEY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_ECC_PRIVATE_KEY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("PrivateKey"),
        C_POINTER.withName("szCurveOid"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("PublicKey")
    ).withName("_CRYPT_ECC_PRIVATE_KEY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ECC_PRIVATE_KEY_INFO$struct$LAYOUT() { return _CRYPT_ECC_PRIVATE_KEY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_ECC_PRIVATE_KEY_INFO$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ECC_PRIVATE_KEY_INFO$dwVersion$LAYOUT() { return _CRYPT_ECC_PRIVATE_KEY_INFO$dwVersion$LAYOUT_; }

    static final VarHandle _CRYPT_ECC_PRIVATE_KEY_INFO$dwVersion$VH_ = _CRYPT_ECC_PRIVATE_KEY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _CRYPT_ECC_PRIVATE_KEY_INFO$dwVersion$VH() { return _CRYPT_ECC_PRIVATE_KEY_INFO$dwVersion$VH_; }

    static final MemoryLayout _CRYPT_ECC_PRIVATE_KEY_INFO$szCurveOid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ECC_PRIVATE_KEY_INFO$szCurveOid$LAYOUT() { return _CRYPT_ECC_PRIVATE_KEY_INFO$szCurveOid$LAYOUT_; }

    static final VarHandle _CRYPT_ECC_PRIVATE_KEY_INFO$szCurveOid$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ECC_PRIVATE_KEY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("szCurveOid")));
    static final java.lang.invoke.VarHandle _CRYPT_ECC_PRIVATE_KEY_INFO$szCurveOid$VH() { return _CRYPT_ECC_PRIVATE_KEY_INFO$szCurveOid$VH_; }

    static final MemoryLayout _CRYPT_PRIVATE_KEY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("Algorithm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("PrivateKey"),
        C_POINTER.withName("pAttributes")
    ).withName("_CRYPT_PRIVATE_KEY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PRIVATE_KEY_INFO$struct$LAYOUT() { return _CRYPT_PRIVATE_KEY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PRIVATE_KEY_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PRIVATE_KEY_INFO$Version$LAYOUT() { return _CRYPT_PRIVATE_KEY_INFO$Version$LAYOUT_; }

    static final VarHandle _CRYPT_PRIVATE_KEY_INFO$Version$VH_ = _CRYPT_PRIVATE_KEY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _CRYPT_PRIVATE_KEY_INFO$Version$VH() { return _CRYPT_PRIVATE_KEY_INFO$Version$VH_; }

    static final MemoryLayout _CRYPT_PRIVATE_KEY_INFO$pAttributes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PRIVATE_KEY_INFO$pAttributes$LAYOUT() { return _CRYPT_PRIVATE_KEY_INFO$pAttributes$LAYOUT_; }

    static final VarHandle _CRYPT_PRIVATE_KEY_INFO$pAttributes$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PRIVATE_KEY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAttributes")));
    static final java.lang.invoke.VarHandle _CRYPT_PRIVATE_KEY_INFO$pAttributes$VH() { return _CRYPT_PRIVATE_KEY_INFO$pAttributes$VH_; }

    static final MemoryLayout _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("EncryptionAlgorithm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("EncryptedPrivateKey")
    ).withName("_CRYPT_ENCRYPTED_PRIVATE_KEY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO$struct$LAYOUT() { return _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("PrivateKey"),
        C_POINTER.withName("pResolvehCryptProvFunc"),
        C_POINTER.withName("pVoidResolveFunc"),
        C_POINTER.withName("pDecryptPrivateKeyFunc"),
        C_POINTER.withName("pVoidDecryptFunc")
    ).withName("_CRYPT_PKCS8_IMPORT_PARAMS");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$struct$LAYOUT() { return _CRYPT_PKCS8_IMPORT_PARAMS$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$pResolvehCryptProvFunc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$pResolvehCryptProvFunc$LAYOUT() { return _CRYPT_PKCS8_IMPORT_PARAMS$pResolvehCryptProvFunc$LAYOUT_; }

    static final VarHandle _CRYPT_PKCS8_IMPORT_PARAMS$pResolvehCryptProvFunc$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PKCS8_IMPORT_PARAMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pResolvehCryptProvFunc")));
    static final java.lang.invoke.VarHandle _CRYPT_PKCS8_IMPORT_PARAMS$pResolvehCryptProvFunc$VH() { return _CRYPT_PKCS8_IMPORT_PARAMS$pResolvehCryptProvFunc$VH_; }

    static final MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$pVoidResolveFunc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$pVoidResolveFunc$LAYOUT() { return _CRYPT_PKCS8_IMPORT_PARAMS$pVoidResolveFunc$LAYOUT_; }

    static final VarHandle _CRYPT_PKCS8_IMPORT_PARAMS$pVoidResolveFunc$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PKCS8_IMPORT_PARAMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pVoidResolveFunc")));
    static final java.lang.invoke.VarHandle _CRYPT_PKCS8_IMPORT_PARAMS$pVoidResolveFunc$VH() { return _CRYPT_PKCS8_IMPORT_PARAMS$pVoidResolveFunc$VH_; }

    static final MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$pDecryptPrivateKeyFunc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$pDecryptPrivateKeyFunc$LAYOUT() { return _CRYPT_PKCS8_IMPORT_PARAMS$pDecryptPrivateKeyFunc$LAYOUT_; }

    static final VarHandle _CRYPT_PKCS8_IMPORT_PARAMS$pDecryptPrivateKeyFunc$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PKCS8_IMPORT_PARAMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDecryptPrivateKeyFunc")));
    static final java.lang.invoke.VarHandle _CRYPT_PKCS8_IMPORT_PARAMS$pDecryptPrivateKeyFunc$VH() { return _CRYPT_PKCS8_IMPORT_PARAMS$pDecryptPrivateKeyFunc$VH_; }

    static final MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$pVoidDecryptFunc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_IMPORT_PARAMS$pVoidDecryptFunc$LAYOUT() { return _CRYPT_PKCS8_IMPORT_PARAMS$pVoidDecryptFunc$LAYOUT_; }

    static final VarHandle _CRYPT_PKCS8_IMPORT_PARAMS$pVoidDecryptFunc$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PKCS8_IMPORT_PARAMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pVoidDecryptFunc")));
    static final java.lang.invoke.VarHandle _CRYPT_PKCS8_IMPORT_PARAMS$pVoidDecryptFunc$VH() { return _CRYPT_PKCS8_IMPORT_PARAMS$pVoidDecryptFunc$VH_; }

    static final MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("hCryptProv"),
        C_LONG.withName("dwKeySpec"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pszPrivateKeyObjId"),
        C_POINTER.withName("pEncryptPrivateKeyFunc"),
        C_POINTER.withName("pVoidEncryptFunc")
    ).withName("_CRYPT_PKCS8_EXPORT_PARAMS");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$struct$LAYOUT() { return _CRYPT_PKCS8_EXPORT_PARAMS$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$hCryptProv$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$hCryptProv$LAYOUT() { return _CRYPT_PKCS8_EXPORT_PARAMS$hCryptProv$LAYOUT_; }

    static final VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$hCryptProv$VH_ = _CRYPT_PKCS8_EXPORT_PARAMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCryptProv"));
    static final java.lang.invoke.VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$hCryptProv$VH() { return _CRYPT_PKCS8_EXPORT_PARAMS$hCryptProv$VH_; }

    static final MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$dwKeySpec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$dwKeySpec$LAYOUT() { return _CRYPT_PKCS8_EXPORT_PARAMS$dwKeySpec$LAYOUT_; }

    static final VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$dwKeySpec$VH_ = _CRYPT_PKCS8_EXPORT_PARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwKeySpec"));
    static final java.lang.invoke.VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$dwKeySpec$VH() { return _CRYPT_PKCS8_EXPORT_PARAMS$dwKeySpec$VH_; }

    static final MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$pszPrivateKeyObjId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$pszPrivateKeyObjId$LAYOUT() { return _CRYPT_PKCS8_EXPORT_PARAMS$pszPrivateKeyObjId$LAYOUT_; }

    static final VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$pszPrivateKeyObjId$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PKCS8_EXPORT_PARAMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszPrivateKeyObjId")));
    static final java.lang.invoke.VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$pszPrivateKeyObjId$VH() { return _CRYPT_PKCS8_EXPORT_PARAMS$pszPrivateKeyObjId$VH_; }

    static final MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$pEncryptPrivateKeyFunc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$pEncryptPrivateKeyFunc$LAYOUT() { return _CRYPT_PKCS8_EXPORT_PARAMS$pEncryptPrivateKeyFunc$LAYOUT_; }

    static final VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$pEncryptPrivateKeyFunc$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PKCS8_EXPORT_PARAMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pEncryptPrivateKeyFunc")));
    static final java.lang.invoke.VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$pEncryptPrivateKeyFunc$VH() { return _CRYPT_PKCS8_EXPORT_PARAMS$pEncryptPrivateKeyFunc$VH_; }

    static final MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$pVoidEncryptFunc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PKCS8_EXPORT_PARAMS$pVoidEncryptFunc$LAYOUT() { return _CRYPT_PKCS8_EXPORT_PARAMS$pVoidEncryptFunc$LAYOUT_; }

    static final VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$pVoidEncryptFunc$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PKCS8_EXPORT_PARAMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pVoidEncryptFunc")));
    static final java.lang.invoke.VarHandle _CRYPT_PKCS8_EXPORT_PARAMS$pVoidEncryptFunc$VH() { return _CRYPT_PKCS8_EXPORT_PARAMS$pVoidEncryptFunc$VH_; }

    static final MemoryLayout _CERT_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("SerialNumber"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("SignatureAlgorithm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Issuer"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("NotBefore"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("NotAfter"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Subject"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_POINTER.withName("pszObjId"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("cbData"),
                    MemoryLayout.ofPaddingBits(32),
                    C_POINTER.withName("pbData")
                ).withName("Parameters")
            ).withName("Algorithm"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData"),
                C_LONG.withName("cUnusedBits"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("PublicKey")
        ).withName("SubjectPublicKeyInfo"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("IssuerUniqueId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("SubjectUniqueId"),
        C_LONG.withName("cExtension"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgExtension")
    ).withName("_CERT_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_INFO$struct$LAYOUT() { return _CERT_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_INFO$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_INFO$dwVersion$LAYOUT() { return _CERT_INFO$dwVersion$LAYOUT_; }

    static final VarHandle _CERT_INFO$dwVersion$VH_ = _CERT_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _CERT_INFO$dwVersion$VH() { return _CERT_INFO$dwVersion$VH_; }

    static final MemoryLayout _CERT_INFO$cExtension$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_INFO$cExtension$LAYOUT() { return _CERT_INFO$cExtension$LAYOUT_; }

    static final VarHandle _CERT_INFO$cExtension$VH_ = _CERT_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cExtension"));
    static final java.lang.invoke.VarHandle _CERT_INFO$cExtension$VH() { return _CERT_INFO$cExtension$VH_; }

    static final MemoryLayout _CERT_INFO$rgExtension$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_INFO$rgExtension$LAYOUT() { return _CERT_INFO$rgExtension$LAYOUT_; }

    static final VarHandle _CERT_INFO$rgExtension$VH_ = MemoryHandles.asAddressVarHandle(_CERT_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgExtension")));
    static final java.lang.invoke.VarHandle _CERT_INFO$rgExtension$VH() { return _CERT_INFO$rgExtension$VH_; }

    static final MemoryLayout _CRL_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("SerialNumber"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("RevocationDate"),
        C_LONG.withName("cExtension"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgExtension")
    ).withName("_CRL_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _CRL_ENTRY$struct$LAYOUT() { return _CRL_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _CRL_ENTRY$cExtension$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRL_ENTRY$cExtension$LAYOUT() { return _CRL_ENTRY$cExtension$LAYOUT_; }

    static final VarHandle _CRL_ENTRY$cExtension$VH_ = _CRL_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cExtension"));
    static final java.lang.invoke.VarHandle _CRL_ENTRY$cExtension$VH() { return _CRL_ENTRY$cExtension$VH_; }

    static final MemoryLayout _CRL_ENTRY$rgExtension$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRL_ENTRY$rgExtension$LAYOUT() { return _CRL_ENTRY$rgExtension$LAYOUT_; }

    static final VarHandle _CRL_ENTRY$rgExtension$VH_ = MemoryHandles.asAddressVarHandle(_CRL_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgExtension")));
    static final java.lang.invoke.VarHandle _CRL_ENTRY$rgExtension$VH() { return _CRL_ENTRY$rgExtension$VH_; }

    static final MemoryLayout _CRL_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("SignatureAlgorithm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Issuer"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("ThisUpdate"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("NextUpdate"),
        C_LONG.withName("cCRLEntry"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgCRLEntry"),
        C_LONG.withName("cExtension"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgExtension")
    ).withName("_CRL_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRL_INFO$struct$LAYOUT() { return _CRL_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CRL_INFO$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRL_INFO$dwVersion$LAYOUT() { return _CRL_INFO$dwVersion$LAYOUT_; }

    static final VarHandle _CRL_INFO$dwVersion$VH_ = _CRL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _CRL_INFO$dwVersion$VH() { return _CRL_INFO$dwVersion$VH_; }

    static final MemoryLayout _CRL_INFO$cCRLEntry$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRL_INFO$cCRLEntry$LAYOUT() { return _CRL_INFO$cCRLEntry$LAYOUT_; }

    static final VarHandle _CRL_INFO$cCRLEntry$VH_ = _CRL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cCRLEntry"));
    static final java.lang.invoke.VarHandle _CRL_INFO$cCRLEntry$VH() { return _CRL_INFO$cCRLEntry$VH_; }

    static final MemoryLayout _CRL_INFO$rgCRLEntry$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRL_INFO$rgCRLEntry$LAYOUT() { return _CRL_INFO$rgCRLEntry$LAYOUT_; }

    static final VarHandle _CRL_INFO$rgCRLEntry$VH_ = MemoryHandles.asAddressVarHandle(_CRL_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgCRLEntry")));
    static final java.lang.invoke.VarHandle _CRL_INFO$rgCRLEntry$VH() { return _CRL_INFO$rgCRLEntry$VH_; }

    static final MemoryLayout _CRL_INFO$cExtension$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRL_INFO$cExtension$LAYOUT() { return _CRL_INFO$cExtension$LAYOUT_; }

    static final VarHandle _CRL_INFO$cExtension$VH_ = _CRL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cExtension"));
    static final java.lang.invoke.VarHandle _CRL_INFO$cExtension$VH() { return _CRL_INFO$cExtension$VH_; }

    static final MemoryLayout _CRL_INFO$rgExtension$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRL_INFO$rgExtension$LAYOUT() { return _CRL_INFO$rgExtension$LAYOUT_; }

    static final VarHandle _CRL_INFO$rgExtension$VH_ = MemoryHandles.asAddressVarHandle(_CRL_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgExtension")));
    static final java.lang.invoke.VarHandle _CRL_INFO$rgExtension$VH() { return _CRL_INFO$rgExtension$VH_; }

    static final MemoryLayout _CERT_OR_CRL_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwChoice"),
        C_LONG.withName("cbEncoded"),
        C_POINTER.withName("pbEncoded")
    ).withName("_CERT_OR_CRL_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _CERT_OR_CRL_BLOB$struct$LAYOUT() { return _CERT_OR_CRL_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _CERT_OR_CRL_BLOB$dwChoice$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_OR_CRL_BLOB$dwChoice$LAYOUT() { return _CERT_OR_CRL_BLOB$dwChoice$LAYOUT_; }

    static final VarHandle _CERT_OR_CRL_BLOB$dwChoice$VH_ = _CERT_OR_CRL_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwChoice"));
    static final java.lang.invoke.VarHandle _CERT_OR_CRL_BLOB$dwChoice$VH() { return _CERT_OR_CRL_BLOB$dwChoice$VH_; }

    static final MemoryLayout _CERT_OR_CRL_BLOB$cbEncoded$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_OR_CRL_BLOB$cbEncoded$LAYOUT() { return _CERT_OR_CRL_BLOB$cbEncoded$LAYOUT_; }

    static final VarHandle _CERT_OR_CRL_BLOB$cbEncoded$VH_ = _CERT_OR_CRL_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbEncoded"));
    static final java.lang.invoke.VarHandle _CERT_OR_CRL_BLOB$cbEncoded$VH() { return _CERT_OR_CRL_BLOB$cbEncoded$VH_; }

    static final MemoryLayout _CERT_OR_CRL_BLOB$pbEncoded$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_OR_CRL_BLOB$pbEncoded$LAYOUT() { return _CERT_OR_CRL_BLOB$pbEncoded$LAYOUT_; }

    static final VarHandle _CERT_OR_CRL_BLOB$pbEncoded$VH_ = MemoryHandles.asAddressVarHandle(_CERT_OR_CRL_BLOB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbEncoded")));
    static final java.lang.invoke.VarHandle _CERT_OR_CRL_BLOB$pbEncoded$VH() { return _CERT_OR_CRL_BLOB$pbEncoded$VH_; }

    static final MemoryLayout _CERT_OR_CRL_BUNDLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cItem"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgItem")
    ).withName("_CERT_OR_CRL_BUNDLE");
    static final jdk.incubator.foreign.MemoryLayout _CERT_OR_CRL_BUNDLE$struct$LAYOUT() { return _CERT_OR_CRL_BUNDLE$struct$LAYOUT_; }

    static final MemoryLayout _CERT_OR_CRL_BUNDLE$cItem$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_OR_CRL_BUNDLE$cItem$LAYOUT() { return _CERT_OR_CRL_BUNDLE$cItem$LAYOUT_; }

    static final VarHandle _CERT_OR_CRL_BUNDLE$cItem$VH_ = _CERT_OR_CRL_BUNDLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cItem"));
    static final java.lang.invoke.VarHandle _CERT_OR_CRL_BUNDLE$cItem$VH() { return _CERT_OR_CRL_BUNDLE$cItem$VH_; }

    static final MemoryLayout _CERT_OR_CRL_BUNDLE$rgItem$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_OR_CRL_BUNDLE$rgItem$LAYOUT() { return _CERT_OR_CRL_BUNDLE$rgItem$LAYOUT_; }

    static final VarHandle _CERT_OR_CRL_BUNDLE$rgItem$VH_ = MemoryHandles.asAddressVarHandle(_CERT_OR_CRL_BUNDLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgItem")));
    static final java.lang.invoke.VarHandle _CERT_OR_CRL_BUNDLE$rgItem$VH() { return _CERT_OR_CRL_BUNDLE$rgItem$VH_; }

    static final MemoryLayout _CERT_REQUEST_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Subject"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_POINTER.withName("pszObjId"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("cbData"),
                    MemoryLayout.ofPaddingBits(32),
                    C_POINTER.withName("pbData")
                ).withName("Parameters")
            ).withName("Algorithm"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData"),
                C_LONG.withName("cUnusedBits"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("PublicKey")
        ).withName("SubjectPublicKeyInfo"),
        C_LONG.withName("cAttribute"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgAttribute")
    ).withName("_CERT_REQUEST_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_REQUEST_INFO$struct$LAYOUT() { return _CERT_REQUEST_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_REQUEST_INFO$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REQUEST_INFO$dwVersion$LAYOUT() { return _CERT_REQUEST_INFO$dwVersion$LAYOUT_; }

    static final VarHandle _CERT_REQUEST_INFO$dwVersion$VH_ = _CERT_REQUEST_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _CERT_REQUEST_INFO$dwVersion$VH() { return _CERT_REQUEST_INFO$dwVersion$VH_; }

    static final MemoryLayout _CERT_REQUEST_INFO$cAttribute$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REQUEST_INFO$cAttribute$LAYOUT() { return _CERT_REQUEST_INFO$cAttribute$LAYOUT_; }

    static final VarHandle _CERT_REQUEST_INFO$cAttribute$VH_ = _CERT_REQUEST_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cAttribute"));
    static final java.lang.invoke.VarHandle _CERT_REQUEST_INFO$cAttribute$VH() { return _CERT_REQUEST_INFO$cAttribute$VH_; }

    static final MemoryLayout _CERT_REQUEST_INFO$rgAttribute$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REQUEST_INFO$rgAttribute$LAYOUT() { return _CERT_REQUEST_INFO$rgAttribute$LAYOUT_; }

    static final VarHandle _CERT_REQUEST_INFO$rgAttribute$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REQUEST_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgAttribute")));
    static final java.lang.invoke.VarHandle _CERT_REQUEST_INFO$rgAttribute$VH() { return _CERT_REQUEST_INFO$rgAttribute$VH_; }

    static final MemoryLayout _CERT_KEYGEN_REQUEST_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_POINTER.withName("pszObjId"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("cbData"),
                    MemoryLayout.ofPaddingBits(32),
                    C_POINTER.withName("pbData")
                ).withName("Parameters")
            ).withName("Algorithm"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData"),
                C_LONG.withName("cUnusedBits"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("PublicKey")
        ).withName("SubjectPublicKeyInfo"),
        C_POINTER.withName("pwszChallengeString")
    ).withName("_CERT_KEYGEN_REQUEST_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_KEYGEN_REQUEST_INFO$struct$LAYOUT() { return _CERT_KEYGEN_REQUEST_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_KEYGEN_REQUEST_INFO$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_KEYGEN_REQUEST_INFO$dwVersion$LAYOUT() { return _CERT_KEYGEN_REQUEST_INFO$dwVersion$LAYOUT_; }

    static final VarHandle _CERT_KEYGEN_REQUEST_INFO$dwVersion$VH_ = _CERT_KEYGEN_REQUEST_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _CERT_KEYGEN_REQUEST_INFO$dwVersion$VH() { return _CERT_KEYGEN_REQUEST_INFO$dwVersion$VH_; }

    static final MemoryLayout _CERT_KEYGEN_REQUEST_INFO$pwszChallengeString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_KEYGEN_REQUEST_INFO$pwszChallengeString$LAYOUT() { return _CERT_KEYGEN_REQUEST_INFO$pwszChallengeString$LAYOUT_; }

    static final VarHandle _CERT_KEYGEN_REQUEST_INFO$pwszChallengeString$VH_ = MemoryHandles.asAddressVarHandle(_CERT_KEYGEN_REQUEST_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszChallengeString")));
    static final java.lang.invoke.VarHandle _CERT_KEYGEN_REQUEST_INFO$pwszChallengeString$VH() { return _CERT_KEYGEN_REQUEST_INFO$pwszChallengeString$VH_; }

    static final MemoryLayout _CERT_SIGNED_CONTENT_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("ToBeSigned"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("SignatureAlgorithm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Signature")
    ).withName("_CERT_SIGNED_CONTENT_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_SIGNED_CONTENT_INFO$struct$LAYOUT() { return _CERT_SIGNED_CONTENT_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CTL_USAGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cUsageIdentifier"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpszUsageIdentifier")
    ).withName("_CTL_USAGE");
    static final jdk.incubator.foreign.MemoryLayout _CTL_USAGE$struct$LAYOUT() { return _CTL_USAGE$struct$LAYOUT_; }

    static final MemoryLayout _CTL_USAGE$cUsageIdentifier$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_USAGE$cUsageIdentifier$LAYOUT() { return _CTL_USAGE$cUsageIdentifier$LAYOUT_; }

    static final VarHandle _CTL_USAGE$cUsageIdentifier$VH_ = _CTL_USAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cUsageIdentifier"));
    static final java.lang.invoke.VarHandle _CTL_USAGE$cUsageIdentifier$VH() { return _CTL_USAGE$cUsageIdentifier$VH_; }

    static final MemoryLayout _CTL_USAGE$rgpszUsageIdentifier$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_USAGE$rgpszUsageIdentifier$LAYOUT() { return _CTL_USAGE$rgpszUsageIdentifier$LAYOUT_; }

    static final VarHandle _CTL_USAGE$rgpszUsageIdentifier$VH_ = MemoryHandles.asAddressVarHandle(_CTL_USAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpszUsageIdentifier")));
    static final java.lang.invoke.VarHandle _CTL_USAGE$rgpszUsageIdentifier$VH() { return _CTL_USAGE$rgpszUsageIdentifier$VH_; }

    static final MemoryLayout _CTL_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("SubjectIdentifier"),
        C_LONG.withName("cAttribute"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgAttribute")
    ).withName("_CTL_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _CTL_ENTRY$struct$LAYOUT() { return _CTL_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _CTL_ENTRY$cAttribute$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_ENTRY$cAttribute$LAYOUT() { return _CTL_ENTRY$cAttribute$LAYOUT_; }

    static final VarHandle _CTL_ENTRY$cAttribute$VH_ = _CTL_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cAttribute"));
    static final java.lang.invoke.VarHandle _CTL_ENTRY$cAttribute$VH() { return _CTL_ENTRY$cAttribute$VH_; }

    static final MemoryLayout _CTL_ENTRY$rgAttribute$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_ENTRY$rgAttribute$LAYOUT() { return _CTL_ENTRY$rgAttribute$LAYOUT_; }

    static final VarHandle _CTL_ENTRY$rgAttribute$VH_ = MemoryHandles.asAddressVarHandle(_CTL_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgAttribute")));
    static final java.lang.invoke.VarHandle _CTL_ENTRY$rgAttribute$VH() { return _CTL_ENTRY$rgAttribute$VH_; }

    static final MemoryLayout _CTL_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cUsageIdentifier"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("rgpszUsageIdentifier")
        ).withName("SubjectUsage"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("ListIdentifier"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("SequenceNumber"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("ThisUpdate"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("NextUpdate"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("SubjectAlgorithm"),
        C_LONG.withName("cCTLEntry"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgCTLEntry"),
        C_LONG.withName("cExtension"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgExtension")
    ).withName("_CTL_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CTL_INFO$struct$LAYOUT() { return _CTL_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CTL_INFO$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_INFO$dwVersion$LAYOUT() { return _CTL_INFO$dwVersion$LAYOUT_; }

    static final VarHandle _CTL_INFO$dwVersion$VH_ = _CTL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _CTL_INFO$dwVersion$VH() { return _CTL_INFO$dwVersion$VH_; }

    static final MemoryLayout _CTL_INFO$cCTLEntry$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_INFO$cCTLEntry$LAYOUT() { return _CTL_INFO$cCTLEntry$LAYOUT_; }

    static final VarHandle _CTL_INFO$cCTLEntry$VH_ = _CTL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cCTLEntry"));
    static final java.lang.invoke.VarHandle _CTL_INFO$cCTLEntry$VH() { return _CTL_INFO$cCTLEntry$VH_; }

    static final MemoryLayout _CTL_INFO$rgCTLEntry$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_INFO$rgCTLEntry$LAYOUT() { return _CTL_INFO$rgCTLEntry$LAYOUT_; }

    static final VarHandle _CTL_INFO$rgCTLEntry$VH_ = MemoryHandles.asAddressVarHandle(_CTL_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgCTLEntry")));
    static final java.lang.invoke.VarHandle _CTL_INFO$rgCTLEntry$VH() { return _CTL_INFO$rgCTLEntry$VH_; }

    static final MemoryLayout _CTL_INFO$cExtension$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_INFO$cExtension$LAYOUT() { return _CTL_INFO$cExtension$LAYOUT_; }

    static final VarHandle _CTL_INFO$cExtension$VH_ = _CTL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cExtension"));
    static final java.lang.invoke.VarHandle _CTL_INFO$cExtension$VH() { return _CTL_INFO$cExtension$VH_; }

    static final MemoryLayout _CTL_INFO$rgExtension$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_INFO$rgExtension$LAYOUT() { return _CTL_INFO$rgExtension$LAYOUT_; }

    static final VarHandle _CTL_INFO$rgExtension$VH_ = MemoryHandles.asAddressVarHandle(_CTL_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgExtension")));
    static final java.lang.invoke.VarHandle _CTL_INFO$rgExtension$VH() { return _CTL_INFO$rgExtension$VH_; }

    static final MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszTimeStampAlgorithm"),
        C_POINTER.withName("pszContentType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Content"),
        C_LONG.withName("cAttribute"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgAttribute")
    ).withName("_CRYPT_TIME_STAMP_REQUEST_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$struct$LAYOUT() { return _CRYPT_TIME_STAMP_REQUEST_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$pszTimeStampAlgorithm$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$pszTimeStampAlgorithm$LAYOUT() { return _CRYPT_TIME_STAMP_REQUEST_INFO$pszTimeStampAlgorithm$LAYOUT_; }

    static final VarHandle _CRYPT_TIME_STAMP_REQUEST_INFO$pszTimeStampAlgorithm$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIME_STAMP_REQUEST_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszTimeStampAlgorithm")));
    static final java.lang.invoke.VarHandle _CRYPT_TIME_STAMP_REQUEST_INFO$pszTimeStampAlgorithm$VH() { return _CRYPT_TIME_STAMP_REQUEST_INFO$pszTimeStampAlgorithm$VH_; }

    static final MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$pszContentType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$pszContentType$LAYOUT() { return _CRYPT_TIME_STAMP_REQUEST_INFO$pszContentType$LAYOUT_; }

    static final VarHandle _CRYPT_TIME_STAMP_REQUEST_INFO$pszContentType$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIME_STAMP_REQUEST_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszContentType")));
    static final java.lang.invoke.VarHandle _CRYPT_TIME_STAMP_REQUEST_INFO$pszContentType$VH() { return _CRYPT_TIME_STAMP_REQUEST_INFO$pszContentType$VH_; }

    static final MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$cAttribute$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$cAttribute$LAYOUT() { return _CRYPT_TIME_STAMP_REQUEST_INFO$cAttribute$LAYOUT_; }

    static final VarHandle _CRYPT_TIME_STAMP_REQUEST_INFO$cAttribute$VH_ = _CRYPT_TIME_STAMP_REQUEST_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cAttribute"));
    static final java.lang.invoke.VarHandle _CRYPT_TIME_STAMP_REQUEST_INFO$cAttribute$VH() { return _CRYPT_TIME_STAMP_REQUEST_INFO$cAttribute$VH_; }

    static final MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$rgAttribute$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIME_STAMP_REQUEST_INFO$rgAttribute$LAYOUT() { return _CRYPT_TIME_STAMP_REQUEST_INFO$rgAttribute$LAYOUT_; }

    static final VarHandle _CRYPT_TIME_STAMP_REQUEST_INFO$rgAttribute$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIME_STAMP_REQUEST_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgAttribute")));
    static final java.lang.invoke.VarHandle _CRYPT_TIME_STAMP_REQUEST_INFO$rgAttribute$VH() { return _CRYPT_TIME_STAMP_REQUEST_INFO$rgAttribute$VH_; }

    static final MemoryLayout _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pwszName"),
        C_POINTER.withName("pwszValue")
    ).withName("_CRYPT_ENROLLMENT_NAME_VALUE_PAIR");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$struct$LAYOUT() { return _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszName$LAYOUT() { return _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszName$LAYOUT_; }

    static final VarHandle _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszName$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ENROLLMENT_NAME_VALUE_PAIR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszName")));
    static final java.lang.invoke.VarHandle _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszName$VH() { return _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszName$VH_; }

    static final MemoryLayout _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszValue$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszValue$LAYOUT() { return _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszValue$LAYOUT_; }

    static final VarHandle _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszValue$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ENROLLMENT_NAME_VALUE_PAIR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszValue")));
    static final java.lang.invoke.VarHandle _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszValue$VH() { return _CRYPT_ENROLLMENT_NAME_VALUE_PAIR$pwszValue$VH_; }

    static final MemoryLayout _CRYPT_CSP_PROVIDER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwKeySpec"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pwszProviderName"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Signature")
    ).withName("_CRYPT_CSP_PROVIDER");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CSP_PROVIDER$struct$LAYOUT() { return _CRYPT_CSP_PROVIDER$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_CSP_PROVIDER$dwKeySpec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CSP_PROVIDER$dwKeySpec$LAYOUT() { return _CRYPT_CSP_PROVIDER$dwKeySpec$LAYOUT_; }

    static final VarHandle _CRYPT_CSP_PROVIDER$dwKeySpec$VH_ = _CRYPT_CSP_PROVIDER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwKeySpec"));
    static final java.lang.invoke.VarHandle _CRYPT_CSP_PROVIDER$dwKeySpec$VH() { return _CRYPT_CSP_PROVIDER$dwKeySpec$VH_; }

    static final MemoryLayout _CRYPT_CSP_PROVIDER$pwszProviderName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CSP_PROVIDER$pwszProviderName$LAYOUT() { return _CRYPT_CSP_PROVIDER$pwszProviderName$LAYOUT_; }

    static final VarHandle _CRYPT_CSP_PROVIDER$pwszProviderName$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_CSP_PROVIDER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszProviderName")));
    static final java.lang.invoke.VarHandle _CRYPT_CSP_PROVIDER$pwszProviderName$VH() { return _CRYPT_CSP_PROVIDER$pwszProviderName$VH_; }

    static final FunctionDescriptor CryptFormatObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptFormatObject$FUNC() { return CryptFormatObject$FUNC_; }

    static final MethodHandle CryptFormatObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptFormatObject",
        "(IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptFormatObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptFormatObject$MH() { return CryptFormatObject$MH_; }

    static final MemoryLayout _CRYPT_ENCODE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pfnAlloc"),
        C_POINTER.withName("pfnFree")
    ).withName("_CRYPT_ENCODE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCODE_PARA$struct$LAYOUT() { return _CRYPT_ENCODE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_ENCODE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCODE_PARA$cbSize$LAYOUT() { return _CRYPT_ENCODE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_ENCODE_PARA$cbSize$VH_ = _CRYPT_ENCODE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_ENCODE_PARA$cbSize$VH() { return _CRYPT_ENCODE_PARA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_ENCODE_PARA$pfnAlloc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCODE_PARA$pfnAlloc$LAYOUT() { return _CRYPT_ENCODE_PARA$pfnAlloc$LAYOUT_; }

    static final VarHandle _CRYPT_ENCODE_PARA$pfnAlloc$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ENCODE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnAlloc")));
    static final java.lang.invoke.VarHandle _CRYPT_ENCODE_PARA$pfnAlloc$VH() { return _CRYPT_ENCODE_PARA$pfnAlloc$VH_; }

    static final MemoryLayout _CRYPT_ENCODE_PARA$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCODE_PARA$pfnFree$LAYOUT() { return _CRYPT_ENCODE_PARA$pfnFree$LAYOUT_; }

    static final VarHandle _CRYPT_ENCODE_PARA$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ENCODE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle _CRYPT_ENCODE_PARA$pfnFree$VH() { return _CRYPT_ENCODE_PARA$pfnFree$VH_; }

    static final FunctionDescriptor CryptEncodeObjectEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptEncodeObjectEx$FUNC() { return CryptEncodeObjectEx$FUNC_; }

    static final MethodHandle CryptEncodeObjectEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptEncodeObjectEx",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptEncodeObjectEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptEncodeObjectEx$MH() { return CryptEncodeObjectEx$MH_; }

    static final FunctionDescriptor CryptEncodeObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptEncodeObject$FUNC() { return CryptEncodeObject$FUNC_; }

    static final MethodHandle CryptEncodeObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptEncodeObject",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptEncodeObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptEncodeObject$MH() { return CryptEncodeObject$MH_; }

    static final MemoryLayout _CRYPT_DECODE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pfnAlloc"),
        C_POINTER.withName("pfnFree")
    ).withName("_CRYPT_DECODE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DECODE_PARA$struct$LAYOUT() { return _CRYPT_DECODE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_DECODE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DECODE_PARA$cbSize$LAYOUT() { return _CRYPT_DECODE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_DECODE_PARA$cbSize$VH_ = _CRYPT_DECODE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_DECODE_PARA$cbSize$VH() { return _CRYPT_DECODE_PARA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_DECODE_PARA$pfnAlloc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DECODE_PARA$pfnAlloc$LAYOUT() { return _CRYPT_DECODE_PARA$pfnAlloc$LAYOUT_; }

    static final VarHandle _CRYPT_DECODE_PARA$pfnAlloc$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_DECODE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnAlloc")));
    static final java.lang.invoke.VarHandle _CRYPT_DECODE_PARA$pfnAlloc$VH() { return _CRYPT_DECODE_PARA$pfnAlloc$VH_; }

    static final MemoryLayout _CRYPT_DECODE_PARA$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DECODE_PARA$pfnFree$LAYOUT() { return _CRYPT_DECODE_PARA$pfnFree$LAYOUT_; }

    static final VarHandle _CRYPT_DECODE_PARA$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_DECODE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle _CRYPT_DECODE_PARA$pfnFree$VH() { return _CRYPT_DECODE_PARA$pfnFree$VH_; }

    static final FunctionDescriptor CryptDecodeObjectEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptDecodeObjectEx$FUNC() { return CryptDecodeObjectEx$FUNC_; }

    static final MethodHandle CryptDecodeObjectEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptDecodeObjectEx",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptDecodeObjectEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptDecodeObjectEx$MH() { return CryptDecodeObjectEx$MH_; }

    static final FunctionDescriptor CryptDecodeObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptDecodeObject$FUNC() { return CryptDecodeObject$FUNC_; }

    static final MethodHandle CryptDecodeObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptDecodeObject",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptDecodeObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptDecodeObject$MH() { return CryptDecodeObject$MH_; }

    static final MemoryLayout _CERT_EXTENSIONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cExtension"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgExtension")
    ).withName("_CERT_EXTENSIONS");
    static final jdk.incubator.foreign.MemoryLayout _CERT_EXTENSIONS$struct$LAYOUT() { return _CERT_EXTENSIONS$struct$LAYOUT_; }

    static final MemoryLayout _CERT_EXTENSIONS$cExtension$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_EXTENSIONS$cExtension$LAYOUT() { return _CERT_EXTENSIONS$cExtension$LAYOUT_; }

    static final VarHandle _CERT_EXTENSIONS$cExtension$VH_ = _CERT_EXTENSIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cExtension"));
    static final java.lang.invoke.VarHandle _CERT_EXTENSIONS$cExtension$VH() { return _CERT_EXTENSIONS$cExtension$VH_; }

    static final MemoryLayout _CERT_EXTENSIONS$rgExtension$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_EXTENSIONS$rgExtension$LAYOUT() { return _CERT_EXTENSIONS$rgExtension$LAYOUT_; }

    static final VarHandle _CERT_EXTENSIONS$rgExtension$VH_ = MemoryHandles.asAddressVarHandle(_CERT_EXTENSIONS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgExtension")));
    static final java.lang.invoke.VarHandle _CERT_EXTENSIONS$rgExtension$VH() { return _CERT_EXTENSIONS$rgExtension$VH_; }

    static final MemoryLayout _CERT_AUTHORITY_KEY_ID_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("KeyId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("CertIssuer"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("CertSerialNumber")
    ).withName("_CERT_AUTHORITY_KEY_ID_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_AUTHORITY_KEY_ID_INFO$struct$LAYOUT() { return _CERT_AUTHORITY_KEY_ID_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_PRIVATE_KEY_VALIDITY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("NotBefore"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("NotAfter")
    ).withName("_CERT_PRIVATE_KEY_VALIDITY");
    static final jdk.incubator.foreign.MemoryLayout _CERT_PRIVATE_KEY_VALIDITY$struct$LAYOUT() { return _CERT_PRIVATE_KEY_VALIDITY$struct$LAYOUT_; }

    static final MemoryLayout _CERT_KEY_ATTRIBUTES_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("KeyId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("IntendedKeyUsage"),
        C_POINTER.withName("pPrivateKeyUsagePeriod")
    ).withName("_CERT_KEY_ATTRIBUTES_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_KEY_ATTRIBUTES_INFO$struct$LAYOUT() { return _CERT_KEY_ATTRIBUTES_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_KEY_ATTRIBUTES_INFO$pPrivateKeyUsagePeriod$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_KEY_ATTRIBUTES_INFO$pPrivateKeyUsagePeriod$LAYOUT() { return _CERT_KEY_ATTRIBUTES_INFO$pPrivateKeyUsagePeriod$LAYOUT_; }

    static final VarHandle _CERT_KEY_ATTRIBUTES_INFO$pPrivateKeyUsagePeriod$VH_ = MemoryHandles.asAddressVarHandle(_CERT_KEY_ATTRIBUTES_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pPrivateKeyUsagePeriod")));
    static final java.lang.invoke.VarHandle _CERT_KEY_ATTRIBUTES_INFO$pPrivateKeyUsagePeriod$VH() { return _CERT_KEY_ATTRIBUTES_INFO$pPrivateKeyUsagePeriod$VH_; }

    static final MemoryLayout _CERT_POLICY_ID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cCertPolicyElementId"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpszCertPolicyElementId")
    ).withName("_CERT_POLICY_ID");
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_ID$struct$LAYOUT() { return _CERT_POLICY_ID$struct$LAYOUT_; }

    static final MemoryLayout _CERT_POLICY_ID$cCertPolicyElementId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_ID$cCertPolicyElementId$LAYOUT() { return _CERT_POLICY_ID$cCertPolicyElementId$LAYOUT_; }

    static final VarHandle _CERT_POLICY_ID$cCertPolicyElementId$VH_ = _CERT_POLICY_ID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cCertPolicyElementId"));
    static final java.lang.invoke.VarHandle _CERT_POLICY_ID$cCertPolicyElementId$VH() { return _CERT_POLICY_ID$cCertPolicyElementId$VH_; }

    static final MemoryLayout _CERT_POLICY_ID$rgpszCertPolicyElementId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_ID$rgpszCertPolicyElementId$LAYOUT() { return _CERT_POLICY_ID$rgpszCertPolicyElementId$LAYOUT_; }

    static final VarHandle _CERT_POLICY_ID$rgpszCertPolicyElementId$VH_ = MemoryHandles.asAddressVarHandle(_CERT_POLICY_ID$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpszCertPolicyElementId")));
    static final java.lang.invoke.VarHandle _CERT_POLICY_ID$rgpszCertPolicyElementId$VH() { return _CERT_POLICY_ID$rgpszCertPolicyElementId$VH_; }

    static final MemoryLayout _CERT_KEY_USAGE_RESTRICTION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cCertPolicyId"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgCertPolicyId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("RestrictedKeyUsage")
    ).withName("_CERT_KEY_USAGE_RESTRICTION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_KEY_USAGE_RESTRICTION_INFO$struct$LAYOUT() { return _CERT_KEY_USAGE_RESTRICTION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_KEY_USAGE_RESTRICTION_INFO$cCertPolicyId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_KEY_USAGE_RESTRICTION_INFO$cCertPolicyId$LAYOUT() { return _CERT_KEY_USAGE_RESTRICTION_INFO$cCertPolicyId$LAYOUT_; }

    static final VarHandle _CERT_KEY_USAGE_RESTRICTION_INFO$cCertPolicyId$VH_ = _CERT_KEY_USAGE_RESTRICTION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cCertPolicyId"));
    static final java.lang.invoke.VarHandle _CERT_KEY_USAGE_RESTRICTION_INFO$cCertPolicyId$VH() { return _CERT_KEY_USAGE_RESTRICTION_INFO$cCertPolicyId$VH_; }

    static final MemoryLayout _CERT_KEY_USAGE_RESTRICTION_INFO$rgCertPolicyId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_KEY_USAGE_RESTRICTION_INFO$rgCertPolicyId$LAYOUT() { return _CERT_KEY_USAGE_RESTRICTION_INFO$rgCertPolicyId$LAYOUT_; }

    static final VarHandle _CERT_KEY_USAGE_RESTRICTION_INFO$rgCertPolicyId$VH_ = MemoryHandles.asAddressVarHandle(_CERT_KEY_USAGE_RESTRICTION_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgCertPolicyId")));
    static final java.lang.invoke.VarHandle _CERT_KEY_USAGE_RESTRICTION_INFO$rgCertPolicyId$VH() { return _CERT_KEY_USAGE_RESTRICTION_INFO$rgCertPolicyId$VH_; }

    static final MemoryLayout _CERT_OTHER_NAME$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszObjId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Value")
    ).withName("_CERT_OTHER_NAME");
    static final jdk.incubator.foreign.MemoryLayout _CERT_OTHER_NAME$struct$LAYOUT() { return _CERT_OTHER_NAME$struct$LAYOUT_; }

    static final MemoryLayout _CERT_OTHER_NAME$pszObjId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_OTHER_NAME$pszObjId$LAYOUT() { return _CERT_OTHER_NAME$pszObjId$LAYOUT_; }

    static final VarHandle _CERT_OTHER_NAME$pszObjId$VH_ = MemoryHandles.asAddressVarHandle(_CERT_OTHER_NAME$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszObjId")));
    static final java.lang.invoke.VarHandle _CERT_OTHER_NAME$pszObjId$VH() { return _CERT_OTHER_NAME$pszObjId$VH_; }

    static final MemoryLayout _CERT_ALT_NAME_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwAltNameChoice"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pOtherName"),
        C_POINTER.withName("pwszRfc822Name"),
        C_POINTER.withName("pwszDNSName"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("DirectoryName"),
        C_POINTER.withName("pwszURL"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("IPAddress"),
        C_POINTER.withName("pszRegisteredID")
    ).withName("_CERT_ALT_NAME_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_ENTRY$struct$LAYOUT() { return _CERT_ALT_NAME_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _CERT_ALT_NAME_ENTRY$dwAltNameChoice$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_ENTRY$dwAltNameChoice$LAYOUT() { return _CERT_ALT_NAME_ENTRY$dwAltNameChoice$LAYOUT_; }

    static final VarHandle _CERT_ALT_NAME_ENTRY$dwAltNameChoice$VH_ = _CERT_ALT_NAME_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAltNameChoice"));
    static final java.lang.invoke.VarHandle _CERT_ALT_NAME_ENTRY$dwAltNameChoice$VH() { return _CERT_ALT_NAME_ENTRY$dwAltNameChoice$VH_; }

    static final MemoryLayout _CERT_ALT_NAME_ENTRY$pOtherName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_ENTRY$pOtherName$LAYOUT() { return _CERT_ALT_NAME_ENTRY$pOtherName$LAYOUT_; }

    static final VarHandle _CERT_ALT_NAME_ENTRY$pOtherName$VH_ = MemoryHandles.asAddressVarHandle(_CERT_ALT_NAME_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pOtherName")));
    static final java.lang.invoke.VarHandle _CERT_ALT_NAME_ENTRY$pOtherName$VH() { return _CERT_ALT_NAME_ENTRY$pOtherName$VH_; }

    static final MemoryLayout _CERT_ALT_NAME_ENTRY$pwszRfc822Name$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_ENTRY$pwszRfc822Name$LAYOUT() { return _CERT_ALT_NAME_ENTRY$pwszRfc822Name$LAYOUT_; }

    static final VarHandle _CERT_ALT_NAME_ENTRY$pwszRfc822Name$VH_ = MemoryHandles.asAddressVarHandle(_CERT_ALT_NAME_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszRfc822Name")));
    static final java.lang.invoke.VarHandle _CERT_ALT_NAME_ENTRY$pwszRfc822Name$VH() { return _CERT_ALT_NAME_ENTRY$pwszRfc822Name$VH_; }

    static final MemoryLayout _CERT_ALT_NAME_ENTRY$pwszDNSName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_ENTRY$pwszDNSName$LAYOUT() { return _CERT_ALT_NAME_ENTRY$pwszDNSName$LAYOUT_; }

    static final VarHandle _CERT_ALT_NAME_ENTRY$pwszDNSName$VH_ = MemoryHandles.asAddressVarHandle(_CERT_ALT_NAME_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszDNSName")));
    static final java.lang.invoke.VarHandle _CERT_ALT_NAME_ENTRY$pwszDNSName$VH() { return _CERT_ALT_NAME_ENTRY$pwszDNSName$VH_; }

    static final MemoryLayout _CERT_ALT_NAME_ENTRY$pwszURL$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_ENTRY$pwszURL$LAYOUT() { return _CERT_ALT_NAME_ENTRY$pwszURL$LAYOUT_; }

    static final VarHandle _CERT_ALT_NAME_ENTRY$pwszURL$VH_ = MemoryHandles.asAddressVarHandle(_CERT_ALT_NAME_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszURL")));
    static final java.lang.invoke.VarHandle _CERT_ALT_NAME_ENTRY$pwszURL$VH() { return _CERT_ALT_NAME_ENTRY$pwszURL$VH_; }

    static final MemoryLayout _CERT_ALT_NAME_ENTRY$pszRegisteredID$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_ENTRY$pszRegisteredID$LAYOUT() { return _CERT_ALT_NAME_ENTRY$pszRegisteredID$LAYOUT_; }

    static final VarHandle _CERT_ALT_NAME_ENTRY$pszRegisteredID$VH_ = MemoryHandles.asAddressVarHandle(_CERT_ALT_NAME_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszRegisteredID")));
    static final java.lang.invoke.VarHandle _CERT_ALT_NAME_ENTRY$pszRegisteredID$VH() { return _CERT_ALT_NAME_ENTRY$pszRegisteredID$VH_; }

    static final MemoryLayout _CERT_ALT_NAME_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cAltEntry"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgAltEntry")
    ).withName("_CERT_ALT_NAME_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_INFO$struct$LAYOUT() { return _CERT_ALT_NAME_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_ALT_NAME_INFO$cAltEntry$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_INFO$cAltEntry$LAYOUT() { return _CERT_ALT_NAME_INFO$cAltEntry$LAYOUT_; }

    static final VarHandle _CERT_ALT_NAME_INFO$cAltEntry$VH_ = _CERT_ALT_NAME_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cAltEntry"));
    static final java.lang.invoke.VarHandle _CERT_ALT_NAME_INFO$cAltEntry$VH() { return _CERT_ALT_NAME_INFO$cAltEntry$VH_; }

    static final MemoryLayout _CERT_ALT_NAME_INFO$rgAltEntry$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_ALT_NAME_INFO$rgAltEntry$LAYOUT() { return _CERT_ALT_NAME_INFO$rgAltEntry$LAYOUT_; }

    static final VarHandle _CERT_ALT_NAME_INFO$rgAltEntry$VH_ = MemoryHandles.asAddressVarHandle(_CERT_ALT_NAME_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgAltEntry")));
    static final java.lang.invoke.VarHandle _CERT_ALT_NAME_INFO$rgAltEntry$VH() { return _CERT_ALT_NAME_INFO$rgAltEntry$VH_; }

    static final MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData"),
            C_LONG.withName("cUnusedBits"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("SubjectType"),
        C_INT.withName("fPathLenConstraint"),
        C_LONG.withName("dwPathLenConstraint"),
        C_LONG.withName("cSubtreesConstraint"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgSubtreesConstraint")
    ).withName("_CERT_BASIC_CONSTRAINTS_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$struct$LAYOUT() { return _CERT_BASIC_CONSTRAINTS_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$fPathLenConstraint$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$fPathLenConstraint$LAYOUT() { return _CERT_BASIC_CONSTRAINTS_INFO$fPathLenConstraint$LAYOUT_; }

    static final VarHandle _CERT_BASIC_CONSTRAINTS_INFO$fPathLenConstraint$VH_ = _CERT_BASIC_CONSTRAINTS_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fPathLenConstraint"));
    static final java.lang.invoke.VarHandle _CERT_BASIC_CONSTRAINTS_INFO$fPathLenConstraint$VH() { return _CERT_BASIC_CONSTRAINTS_INFO$fPathLenConstraint$VH_; }

    static final MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$dwPathLenConstraint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$dwPathLenConstraint$LAYOUT() { return _CERT_BASIC_CONSTRAINTS_INFO$dwPathLenConstraint$LAYOUT_; }

    static final VarHandle _CERT_BASIC_CONSTRAINTS_INFO$dwPathLenConstraint$VH_ = _CERT_BASIC_CONSTRAINTS_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPathLenConstraint"));
    static final java.lang.invoke.VarHandle _CERT_BASIC_CONSTRAINTS_INFO$dwPathLenConstraint$VH() { return _CERT_BASIC_CONSTRAINTS_INFO$dwPathLenConstraint$VH_; }

    static final MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$cSubtreesConstraint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$cSubtreesConstraint$LAYOUT() { return _CERT_BASIC_CONSTRAINTS_INFO$cSubtreesConstraint$LAYOUT_; }

    static final VarHandle _CERT_BASIC_CONSTRAINTS_INFO$cSubtreesConstraint$VH_ = _CERT_BASIC_CONSTRAINTS_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cSubtreesConstraint"));
    static final java.lang.invoke.VarHandle _CERT_BASIC_CONSTRAINTS_INFO$cSubtreesConstraint$VH() { return _CERT_BASIC_CONSTRAINTS_INFO$cSubtreesConstraint$VH_; }

    static final MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$rgSubtreesConstraint$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_BASIC_CONSTRAINTS_INFO$rgSubtreesConstraint$LAYOUT() { return _CERT_BASIC_CONSTRAINTS_INFO$rgSubtreesConstraint$LAYOUT_; }

    static final VarHandle _CERT_BASIC_CONSTRAINTS_INFO$rgSubtreesConstraint$VH_ = MemoryHandles.asAddressVarHandle(_CERT_BASIC_CONSTRAINTS_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgSubtreesConstraint")));
    static final java.lang.invoke.VarHandle _CERT_BASIC_CONSTRAINTS_INFO$rgSubtreesConstraint$VH() { return _CERT_BASIC_CONSTRAINTS_INFO$rgSubtreesConstraint$VH_; }

    static final MemoryLayout _CERT_BASIC_CONSTRAINTS2_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("fCA"),
        C_INT.withName("fPathLenConstraint"),
        C_LONG.withName("dwPathLenConstraint")
    ).withName("_CERT_BASIC_CONSTRAINTS2_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_BASIC_CONSTRAINTS2_INFO$struct$LAYOUT() { return _CERT_BASIC_CONSTRAINTS2_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_BASIC_CONSTRAINTS2_INFO$fCA$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CERT_BASIC_CONSTRAINTS2_INFO$fCA$LAYOUT() { return _CERT_BASIC_CONSTRAINTS2_INFO$fCA$LAYOUT_; }

    static final VarHandle _CERT_BASIC_CONSTRAINTS2_INFO$fCA$VH_ = _CERT_BASIC_CONSTRAINTS2_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fCA"));
    static final java.lang.invoke.VarHandle _CERT_BASIC_CONSTRAINTS2_INFO$fCA$VH() { return _CERT_BASIC_CONSTRAINTS2_INFO$fCA$VH_; }

    static final MemoryLayout _CERT_BASIC_CONSTRAINTS2_INFO$fPathLenConstraint$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CERT_BASIC_CONSTRAINTS2_INFO$fPathLenConstraint$LAYOUT() { return _CERT_BASIC_CONSTRAINTS2_INFO$fPathLenConstraint$LAYOUT_; }

    static final VarHandle _CERT_BASIC_CONSTRAINTS2_INFO$fPathLenConstraint$VH_ = _CERT_BASIC_CONSTRAINTS2_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fPathLenConstraint"));
    static final java.lang.invoke.VarHandle _CERT_BASIC_CONSTRAINTS2_INFO$fPathLenConstraint$VH() { return _CERT_BASIC_CONSTRAINTS2_INFO$fPathLenConstraint$VH_; }

    static final MemoryLayout _CERT_BASIC_CONSTRAINTS2_INFO$dwPathLenConstraint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_BASIC_CONSTRAINTS2_INFO$dwPathLenConstraint$LAYOUT() { return _CERT_BASIC_CONSTRAINTS2_INFO$dwPathLenConstraint$LAYOUT_; }

    static final VarHandle _CERT_BASIC_CONSTRAINTS2_INFO$dwPathLenConstraint$VH_ = _CERT_BASIC_CONSTRAINTS2_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPathLenConstraint"));
    static final java.lang.invoke.VarHandle _CERT_BASIC_CONSTRAINTS2_INFO$dwPathLenConstraint$VH() { return _CERT_BASIC_CONSTRAINTS2_INFO$dwPathLenConstraint$VH_; }

    static final MemoryLayout _CERT_POLICY_QUALIFIER_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszPolicyQualifierId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Qualifier")
    ).withName("_CERT_POLICY_QUALIFIER_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_QUALIFIER_INFO$struct$LAYOUT() { return _CERT_POLICY_QUALIFIER_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_POLICY_QUALIFIER_INFO$pszPolicyQualifierId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_QUALIFIER_INFO$pszPolicyQualifierId$LAYOUT() { return _CERT_POLICY_QUALIFIER_INFO$pszPolicyQualifierId$LAYOUT_; }

    static final VarHandle _CERT_POLICY_QUALIFIER_INFO$pszPolicyQualifierId$VH_ = MemoryHandles.asAddressVarHandle(_CERT_POLICY_QUALIFIER_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszPolicyQualifierId")));
    static final java.lang.invoke.VarHandle _CERT_POLICY_QUALIFIER_INFO$pszPolicyQualifierId$VH() { return _CERT_POLICY_QUALIFIER_INFO$pszPolicyQualifierId$VH_; }

    static final MemoryLayout _CERT_POLICY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszPolicyIdentifier"),
        C_LONG.withName("cPolicyQualifier"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgPolicyQualifier")
    ).withName("_CERT_POLICY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_INFO$struct$LAYOUT() { return _CERT_POLICY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_POLICY_INFO$pszPolicyIdentifier$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_INFO$pszPolicyIdentifier$LAYOUT() { return _CERT_POLICY_INFO$pszPolicyIdentifier$LAYOUT_; }

    static final VarHandle _CERT_POLICY_INFO$pszPolicyIdentifier$VH_ = MemoryHandles.asAddressVarHandle(_CERT_POLICY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszPolicyIdentifier")));
    static final java.lang.invoke.VarHandle _CERT_POLICY_INFO$pszPolicyIdentifier$VH() { return _CERT_POLICY_INFO$pszPolicyIdentifier$VH_; }

    static final MemoryLayout _CERT_POLICY_INFO$cPolicyQualifier$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_INFO$cPolicyQualifier$LAYOUT() { return _CERT_POLICY_INFO$cPolicyQualifier$LAYOUT_; }

    static final VarHandle _CERT_POLICY_INFO$cPolicyQualifier$VH_ = _CERT_POLICY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cPolicyQualifier"));
    static final java.lang.invoke.VarHandle _CERT_POLICY_INFO$cPolicyQualifier$VH() { return _CERT_POLICY_INFO$cPolicyQualifier$VH_; }

    static final MemoryLayout _CERT_POLICY_INFO$rgPolicyQualifier$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_INFO$rgPolicyQualifier$LAYOUT() { return _CERT_POLICY_INFO$rgPolicyQualifier$LAYOUT_; }

    static final VarHandle _CERT_POLICY_INFO$rgPolicyQualifier$VH_ = MemoryHandles.asAddressVarHandle(_CERT_POLICY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgPolicyQualifier")));
    static final java.lang.invoke.VarHandle _CERT_POLICY_INFO$rgPolicyQualifier$VH() { return _CERT_POLICY_INFO$rgPolicyQualifier$VH_; }

    static final MemoryLayout _CERT_POLICIES_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cPolicyInfo"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgPolicyInfo")
    ).withName("_CERT_POLICIES_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICIES_INFO$struct$LAYOUT() { return _CERT_POLICIES_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_POLICIES_INFO$cPolicyInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICIES_INFO$cPolicyInfo$LAYOUT() { return _CERT_POLICIES_INFO$cPolicyInfo$LAYOUT_; }

    static final VarHandle _CERT_POLICIES_INFO$cPolicyInfo$VH_ = _CERT_POLICIES_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cPolicyInfo"));
    static final java.lang.invoke.VarHandle _CERT_POLICIES_INFO$cPolicyInfo$VH() { return _CERT_POLICIES_INFO$cPolicyInfo$VH_; }

    static final MemoryLayout _CERT_POLICIES_INFO$rgPolicyInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICIES_INFO$rgPolicyInfo$LAYOUT() { return _CERT_POLICIES_INFO$rgPolicyInfo$LAYOUT_; }

    static final VarHandle _CERT_POLICIES_INFO$rgPolicyInfo$VH_ = MemoryHandles.asAddressVarHandle(_CERT_POLICIES_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgPolicyInfo")));
    static final java.lang.invoke.VarHandle _CERT_POLICIES_INFO$rgPolicyInfo$VH() { return _CERT_POLICIES_INFO$rgPolicyInfo$VH_; }

    static final MemoryLayout _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszOrganization"),
        C_LONG.withName("cNoticeNumbers"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgNoticeNumbers")
    ).withName("_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE");
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$struct$LAYOUT() { return _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$struct$LAYOUT_; }

    static final MemoryLayout _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$pszOrganization$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$pszOrganization$LAYOUT() { return _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$pszOrganization$LAYOUT_; }

    static final VarHandle _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$pszOrganization$VH_ = MemoryHandles.asAddressVarHandle(_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszOrganization")));
    static final java.lang.invoke.VarHandle _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$pszOrganization$VH() { return _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$pszOrganization$VH_; }

    static final MemoryLayout _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$cNoticeNumbers$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$cNoticeNumbers$LAYOUT() { return _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$cNoticeNumbers$LAYOUT_; }

    static final VarHandle _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$cNoticeNumbers$VH_ = _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cNoticeNumbers"));
    static final java.lang.invoke.VarHandle _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$cNoticeNumbers$VH() { return _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$cNoticeNumbers$VH_; }

    static final MemoryLayout _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$rgNoticeNumbers$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$rgNoticeNumbers$LAYOUT() { return _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$rgNoticeNumbers$LAYOUT_; }

    static final VarHandle _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$rgNoticeNumbers$VH_ = MemoryHandles.asAddressVarHandle(_CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgNoticeNumbers")));
    static final java.lang.invoke.VarHandle _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$rgNoticeNumbers$VH() { return _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE$rgNoticeNumbers$VH_; }

    static final MemoryLayout _CERT_POLICY_QUALIFIER_USER_NOTICE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pNoticeReference"),
        C_POINTER.withName("pszDisplayText")
    ).withName("_CERT_POLICY_QUALIFIER_USER_NOTICE");
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_QUALIFIER_USER_NOTICE$struct$LAYOUT() { return _CERT_POLICY_QUALIFIER_USER_NOTICE$struct$LAYOUT_; }

    static final MemoryLayout _CERT_POLICY_QUALIFIER_USER_NOTICE$pNoticeReference$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_QUALIFIER_USER_NOTICE$pNoticeReference$LAYOUT() { return _CERT_POLICY_QUALIFIER_USER_NOTICE$pNoticeReference$LAYOUT_; }

    static final VarHandle _CERT_POLICY_QUALIFIER_USER_NOTICE$pNoticeReference$VH_ = MemoryHandles.asAddressVarHandle(_CERT_POLICY_QUALIFIER_USER_NOTICE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pNoticeReference")));
    static final java.lang.invoke.VarHandle _CERT_POLICY_QUALIFIER_USER_NOTICE$pNoticeReference$VH() { return _CERT_POLICY_QUALIFIER_USER_NOTICE$pNoticeReference$VH_; }

    static final MemoryLayout _CERT_POLICY_QUALIFIER_USER_NOTICE$pszDisplayText$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_POLICY_QUALIFIER_USER_NOTICE$pszDisplayText$LAYOUT() { return _CERT_POLICY_QUALIFIER_USER_NOTICE$pszDisplayText$LAYOUT_; }

    static final VarHandle _CERT_POLICY_QUALIFIER_USER_NOTICE$pszDisplayText$VH_ = MemoryHandles.asAddressVarHandle(_CERT_POLICY_QUALIFIER_USER_NOTICE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszDisplayText")));
    static final java.lang.invoke.VarHandle _CERT_POLICY_QUALIFIER_USER_NOTICE$pszDisplayText$VH() { return _CERT_POLICY_QUALIFIER_USER_NOTICE$pszDisplayText$VH_; }

    static final MemoryLayout _CPS_URLS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszURL"),
        C_POINTER.withName("pAlgorithm"),
        C_POINTER.withName("pDigest")
    ).withName("_CPS_URLS");
    static final jdk.incubator.foreign.MemoryLayout _CPS_URLS$struct$LAYOUT() { return _CPS_URLS$struct$LAYOUT_; }

    static final MemoryLayout _CPS_URLS$pszURL$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CPS_URLS$pszURL$LAYOUT() { return _CPS_URLS$pszURL$LAYOUT_; }

    static final VarHandle _CPS_URLS$pszURL$VH_ = MemoryHandles.asAddressVarHandle(_CPS_URLS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszURL")));
    static final java.lang.invoke.VarHandle _CPS_URLS$pszURL$VH() { return _CPS_URLS$pszURL$VH_; }

    static final MemoryLayout _CPS_URLS$pAlgorithm$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CPS_URLS$pAlgorithm$LAYOUT() { return _CPS_URLS$pAlgorithm$LAYOUT_; }

    static final VarHandle _CPS_URLS$pAlgorithm$VH_ = MemoryHandles.asAddressVarHandle(_CPS_URLS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAlgorithm")));
    static final java.lang.invoke.VarHandle _CPS_URLS$pAlgorithm$VH() { return _CPS_URLS$pAlgorithm$VH_; }

}

