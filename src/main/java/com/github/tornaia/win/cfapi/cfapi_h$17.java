// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$17 extends cfapi_h$16 {

    /* package-private */ cfapi_h$17() {}
    public static @C("BOOL") int KillTimer (@C("HWND") Addressable hWnd, @C("UINT_PTR") long uIDEvent) {
        try {
            return (int)cfapi_h$constants$36.KillTimer$MH().invokeExact(hWnd.address(), uIDEvent);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWindowUnicode$MH() {
        return cfapi_h$constants$36.IsWindowUnicode$MH();
    }
    public static @C("BOOL") int IsWindowUnicode (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$36.IsWindowUnicode$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnableWindow$MH() {
        return cfapi_h$constants$36.EnableWindow$MH();
    }
    public static @C("BOOL") int EnableWindow (@C("HWND") Addressable hWnd, @C("BOOL") int bEnable) {
        try {
            return (int)cfapi_h$constants$36.EnableWindow$MH().invokeExact(hWnd.address(), bEnable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWindowEnabled$MH() {
        return cfapi_h$constants$36.IsWindowEnabled$MH();
    }
    public static @C("BOOL") int IsWindowEnabled (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$36.IsWindowEnabled$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadAcceleratorsA$MH() {
        return cfapi_h$constants$36.LoadAcceleratorsA$MH();
    }
    public static @C("HACCEL") MemoryAddress LoadAcceleratorsA (@C("HINSTANCE") Addressable hInstance, @C("LPCSTR") Addressable lpTableName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.LoadAcceleratorsA$MH().invokeExact(hInstance.address(), lpTableName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadAcceleratorsW$MH() {
        return cfapi_h$constants$36.LoadAcceleratorsW$MH();
    }
    public static @C("HACCEL") MemoryAddress LoadAcceleratorsW (@C("HINSTANCE") Addressable hInstance, @C("LPCWSTR") Addressable lpTableName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.LoadAcceleratorsW$MH().invokeExact(hInstance.address(), lpTableName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateAcceleratorTableA$MH() {
        return cfapi_h$constants$36.CreateAcceleratorTableA$MH();
    }
    public static @C("HACCEL") MemoryAddress CreateAcceleratorTableA (@C("LPACCEL") Addressable paccel, @C("int") int cAccel) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.CreateAcceleratorTableA$MH().invokeExact(paccel.address(), cAccel);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateAcceleratorTableW$MH() {
        return cfapi_h$constants$36.CreateAcceleratorTableW$MH();
    }
    public static @C("HACCEL") MemoryAddress CreateAcceleratorTableW (@C("LPACCEL") Addressable paccel, @C("int") int cAccel) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.CreateAcceleratorTableW$MH().invokeExact(paccel.address(), cAccel);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroyAcceleratorTable$MH() {
        return cfapi_h$constants$36.DestroyAcceleratorTable$MH();
    }
    public static @C("BOOL") int DestroyAcceleratorTable (@C("HACCEL") Addressable hAccel) {
        try {
            return (int)cfapi_h$constants$36.DestroyAcceleratorTable$MH().invokeExact(hAccel.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyAcceleratorTableA$MH() {
        return cfapi_h$constants$36.CopyAcceleratorTableA$MH();
    }
    public static @C("int") int CopyAcceleratorTableA (@C("HACCEL") Addressable hAccelSrc, @C("LPACCEL") Addressable lpAccelDst, @C("int") int cAccelEntries) {
        try {
            return (int)cfapi_h$constants$36.CopyAcceleratorTableA$MH().invokeExact(hAccelSrc.address(), lpAccelDst.address(), cAccelEntries);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyAcceleratorTableW$MH() {
        return cfapi_h$constants$36.CopyAcceleratorTableW$MH();
    }
    public static @C("int") int CopyAcceleratorTableW (@C("HACCEL") Addressable hAccelSrc, @C("LPACCEL") Addressable lpAccelDst, @C("int") int cAccelEntries) {
        try {
            return (int)cfapi_h$constants$36.CopyAcceleratorTableW$MH().invokeExact(hAccelSrc.address(), lpAccelDst.address(), cAccelEntries);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TranslateAcceleratorA$MH() {
        return cfapi_h$constants$36.TranslateAcceleratorA$MH();
    }
    public static @C("int") int TranslateAcceleratorA (@C("HWND") Addressable hWnd, @C("HACCEL") Addressable hAccTable, @C("LPMSG") Addressable lpMsg) {
        try {
            return (int)cfapi_h$constants$36.TranslateAcceleratorA$MH().invokeExact(hWnd.address(), hAccTable.address(), lpMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TranslateAcceleratorW$MH() {
        return cfapi_h$constants$36.TranslateAcceleratorW$MH();
    }
    public static @C("int") int TranslateAcceleratorW (@C("HWND") Addressable hWnd, @C("HACCEL") Addressable hAccTable, @C("LPMSG") Addressable lpMsg) {
        try {
            return (int)cfapi_h$constants$36.TranslateAcceleratorW$MH().invokeExact(hWnd.address(), hAccTable.address(), lpMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemMetrics$MH() {
        return cfapi_h$constants$36.GetSystemMetrics$MH();
    }
    public static @C("int") int GetSystemMetrics (@C("int") int nIndex) {
        try {
            return (int)cfapi_h$constants$36.GetSystemMetrics$MH().invokeExact(nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemMetricsForDpi$MH() {
        return cfapi_h$constants$36.GetSystemMetricsForDpi$MH();
    }
    public static @C("int") int GetSystemMetricsForDpi (@C("int") int nIndex, @C("UINT") int dpi) {
        try {
            return (int)cfapi_h$constants$36.GetSystemMetricsForDpi$MH().invokeExact(nIndex, dpi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadMenuA$MH() {
        return cfapi_h$constants$36.LoadMenuA$MH();
    }
    public static @C("HMENU") MemoryAddress LoadMenuA (@C("HINSTANCE") Addressable hInstance, @C("LPCSTR") Addressable lpMenuName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.LoadMenuA$MH().invokeExact(hInstance.address(), lpMenuName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadMenuW$MH() {
        return cfapi_h$constants$36.LoadMenuW$MH();
    }
    public static @C("HMENU") MemoryAddress LoadMenuW (@C("HINSTANCE") Addressable hInstance, @C("LPCWSTR") Addressable lpMenuName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.LoadMenuW$MH().invokeExact(hInstance.address(), lpMenuName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadMenuIndirectA$MH() {
        return cfapi_h$constants$36.LoadMenuIndirectA$MH();
    }
    public static @C("HMENU") MemoryAddress LoadMenuIndirectA (@C("const MENUTEMPLATEA*") Addressable lpMenuTemplate) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.LoadMenuIndirectA$MH().invokeExact(lpMenuTemplate.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadMenuIndirectW$MH() {
        return cfapi_h$constants$36.LoadMenuIndirectW$MH();
    }
    public static @C("HMENU") MemoryAddress LoadMenuIndirectW (@C("const MENUTEMPLATEW*") Addressable lpMenuTemplate) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.LoadMenuIndirectW$MH().invokeExact(lpMenuTemplate.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenu$MH() {
        return cfapi_h$constants$36.GetMenu$MH();
    }
    public static @C("HMENU") MemoryAddress GetMenu (@C("HWND") Addressable hWnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetMenu$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMenu$MH() {
        return cfapi_h$constants$36.SetMenu$MH();
    }
    public static @C("BOOL") int SetMenu (@C("HWND") Addressable hWnd, @C("HMENU") Addressable hMenu) {
        try {
            return (int)cfapi_h$constants$36.SetMenu$MH().invokeExact(hWnd.address(), hMenu.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChangeMenuA$MH() {
        return cfapi_h$constants$36.ChangeMenuA$MH();
    }
    public static @C("BOOL") int ChangeMenuA (@C("HMENU") Addressable hMenu, @C("UINT") int cmd, @C("LPCSTR") Addressable lpszNewItem, @C("UINT") int cmdInsert, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$36.ChangeMenuA$MH().invokeExact(hMenu.address(), cmd, lpszNewItem.address(), cmdInsert, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChangeMenuW$MH() {
        return cfapi_h$constants$36.ChangeMenuW$MH();
    }
    public static @C("BOOL") int ChangeMenuW (@C("HMENU") Addressable hMenu, @C("UINT") int cmd, @C("LPCWSTR") Addressable lpszNewItem, @C("UINT") int cmdInsert, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$36.ChangeMenuW$MH().invokeExact(hMenu.address(), cmd, lpszNewItem.address(), cmdInsert, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HiliteMenuItem$MH() {
        return cfapi_h$constants$36.HiliteMenuItem$MH();
    }
    public static @C("BOOL") int HiliteMenuItem (@C("HWND") Addressable hWnd, @C("HMENU") Addressable hMenu, @C("UINT") int uIDHiliteItem, @C("UINT") int uHilite) {
        try {
            return (int)cfapi_h$constants$36.HiliteMenuItem$MH().invokeExact(hWnd.address(), hMenu.address(), uIDHiliteItem, uHilite);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuStringA$MH() {
        return cfapi_h$constants$36.GetMenuStringA$MH();
    }
    public static @C("int") int GetMenuStringA (@C("HMENU") Addressable hMenu, @C("UINT") int uIDItem, @C("LPSTR") Addressable lpString, @C("int") int cchMax, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$36.GetMenuStringA$MH().invokeExact(hMenu.address(), uIDItem, lpString.address(), cchMax, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuStringW$MH() {
        return cfapi_h$constants$36.GetMenuStringW$MH();
    }
    public static @C("int") int GetMenuStringW (@C("HMENU") Addressable hMenu, @C("UINT") int uIDItem, @C("LPWSTR") Addressable lpString, @C("int") int cchMax, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$36.GetMenuStringW$MH().invokeExact(hMenu.address(), uIDItem, lpString.address(), cchMax, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuState$MH() {
        return cfapi_h$constants$36.GetMenuState$MH();
    }
    public static @C("UINT") int GetMenuState (@C("HMENU") Addressable hMenu, @C("UINT") int uId, @C("UINT") int uFlags) {
        try {
            return (int)cfapi_h$constants$36.GetMenuState$MH().invokeExact(hMenu.address(), uId, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawMenuBar$MH() {
        return cfapi_h$constants$36.DrawMenuBar$MH();
    }
    public static @C("BOOL") int DrawMenuBar (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$36.DrawMenuBar$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemMenu$MH() {
        return cfapi_h$constants$36.GetSystemMenu$MH();
    }
    public static @C("HMENU") MemoryAddress GetSystemMenu (@C("HWND") Addressable hWnd, @C("BOOL") int bRevert) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetSystemMenu$MH().invokeExact(hWnd.address(), bRevert);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMenu$MH() {
        return cfapi_h$constants$36.CreateMenu$MH();
    }
    public static @C("HMENU") MemoryAddress CreateMenu () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.CreateMenu$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePopupMenu$MH() {
        return cfapi_h$constants$36.CreatePopupMenu$MH();
    }
    public static @C("HMENU") MemoryAddress CreatePopupMenu () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.CreatePopupMenu$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroyMenu$MH() {
        return cfapi_h$constants$36.DestroyMenu$MH();
    }
    public static @C("BOOL") int DestroyMenu (@C("HMENU") Addressable hMenu) {
        try {
            return (int)cfapi_h$constants$36.DestroyMenu$MH().invokeExact(hMenu.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckMenuItem$MH() {
        return cfapi_h$constants$36.CheckMenuItem$MH();
    }
    public static @C("DWORD") int CheckMenuItem (@C("HMENU") Addressable hMenu, @C("UINT") int uIDCheckItem, @C("UINT") int uCheck) {
        try {
            return (int)cfapi_h$constants$36.CheckMenuItem$MH().invokeExact(hMenu.address(), uIDCheckItem, uCheck);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnableMenuItem$MH() {
        return cfapi_h$constants$36.EnableMenuItem$MH();
    }
    public static @C("BOOL") int EnableMenuItem (@C("HMENU") Addressable hMenu, @C("UINT") int uIDEnableItem, @C("UINT") int uEnable) {
        try {
            return (int)cfapi_h$constants$36.EnableMenuItem$MH().invokeExact(hMenu.address(), uIDEnableItem, uEnable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSubMenu$MH() {
        return cfapi_h$constants$36.GetSubMenu$MH();
    }
    public static @C("HMENU") MemoryAddress GetSubMenu (@C("HMENU") Addressable hMenu, @C("int") int nPos) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetSubMenu$MH().invokeExact(hMenu.address(), nPos);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuItemID$MH() {
        return cfapi_h$constants$36.GetMenuItemID$MH();
    }
    public static @C("UINT") int GetMenuItemID (@C("HMENU") Addressable hMenu, @C("int") int nPos) {
        try {
            return (int)cfapi_h$constants$36.GetMenuItemID$MH().invokeExact(hMenu.address(), nPos);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuItemCount$MH() {
        return cfapi_h$constants$36.GetMenuItemCount$MH();
    }
    public static @C("int") int GetMenuItemCount (@C("HMENU") Addressable hMenu) {
        try {
            return (int)cfapi_h$constants$36.GetMenuItemCount$MH().invokeExact(hMenu.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InsertMenuA$MH() {
        return cfapi_h$constants$36.InsertMenuA$MH();
    }
    public static @C("BOOL") int InsertMenuA (@C("HMENU") Addressable hMenu, @C("UINT") int uPosition, @C("UINT") int uFlags, @C("UINT_PTR") long uIDNewItem, @C("LPCSTR") Addressable lpNewItem) {
        try {
            return (int)cfapi_h$constants$36.InsertMenuA$MH().invokeExact(hMenu.address(), uPosition, uFlags, uIDNewItem, lpNewItem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InsertMenuW$MH() {
        return cfapi_h$constants$36.InsertMenuW$MH();
    }
    public static @C("BOOL") int InsertMenuW (@C("HMENU") Addressable hMenu, @C("UINT") int uPosition, @C("UINT") int uFlags, @C("UINT_PTR") long uIDNewItem, @C("LPCWSTR") Addressable lpNewItem) {
        try {
            return (int)cfapi_h$constants$36.InsertMenuW$MH().invokeExact(hMenu.address(), uPosition, uFlags, uIDNewItem, lpNewItem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AppendMenuA$MH() {
        return cfapi_h$constants$36.AppendMenuA$MH();
    }
    public static @C("BOOL") int AppendMenuA (@C("HMENU") Addressable hMenu, @C("UINT") int uFlags, @C("UINT_PTR") long uIDNewItem, @C("LPCSTR") Addressable lpNewItem) {
        try {
            return (int)cfapi_h$constants$36.AppendMenuA$MH().invokeExact(hMenu.address(), uFlags, uIDNewItem, lpNewItem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AppendMenuW$MH() {
        return cfapi_h$constants$36.AppendMenuW$MH();
    }
    public static @C("BOOL") int AppendMenuW (@C("HMENU") Addressable hMenu, @C("UINT") int uFlags, @C("UINT_PTR") long uIDNewItem, @C("LPCWSTR") Addressable lpNewItem) {
        try {
            return (int)cfapi_h$constants$36.AppendMenuW$MH().invokeExact(hMenu.address(), uFlags, uIDNewItem, lpNewItem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ModifyMenuA$MH() {
        return cfapi_h$constants$36.ModifyMenuA$MH();
    }
    public static @C("BOOL") int ModifyMenuA (@C("HMENU") Addressable hMnu, @C("UINT") int uPosition, @C("UINT") int uFlags, @C("UINT_PTR") long uIDNewItem, @C("LPCSTR") Addressable lpNewItem) {
        try {
            return (int)cfapi_h$constants$36.ModifyMenuA$MH().invokeExact(hMnu.address(), uPosition, uFlags, uIDNewItem, lpNewItem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ModifyMenuW$MH() {
        return cfapi_h$constants$36.ModifyMenuW$MH();
    }
    public static @C("BOOL") int ModifyMenuW (@C("HMENU") Addressable hMnu, @C("UINT") int uPosition, @C("UINT") int uFlags, @C("UINT_PTR") long uIDNewItem, @C("LPCWSTR") Addressable lpNewItem) {
        try {
            return (int)cfapi_h$constants$36.ModifyMenuW$MH().invokeExact(hMnu.address(), uPosition, uFlags, uIDNewItem, lpNewItem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveMenu$MH() {
        return cfapi_h$constants$36.RemoveMenu$MH();
    }
    public static @C("BOOL") int RemoveMenu (@C("HMENU") Addressable hMenu, @C("UINT") int uPosition, @C("UINT") int uFlags) {
        try {
            return (int)cfapi_h$constants$36.RemoveMenu$MH().invokeExact(hMenu.address(), uPosition, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteMenu$MH() {
        return cfapi_h$constants$36.DeleteMenu$MH();
    }
    public static @C("BOOL") int DeleteMenu (@C("HMENU") Addressable hMenu, @C("UINT") int uPosition, @C("UINT") int uFlags) {
        try {
            return (int)cfapi_h$constants$36.DeleteMenu$MH().invokeExact(hMenu.address(), uPosition, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMenuItemBitmaps$MH() {
        return cfapi_h$constants$36.SetMenuItemBitmaps$MH();
    }
    public static @C("BOOL") int SetMenuItemBitmaps (@C("HMENU") Addressable hMenu, @C("UINT") int uPosition, @C("UINT") int uFlags, @C("HBITMAP") Addressable hBitmapUnchecked, @C("HBITMAP") Addressable hBitmapChecked) {
        try {
            return (int)cfapi_h$constants$36.SetMenuItemBitmaps$MH().invokeExact(hMenu.address(), uPosition, uFlags, hBitmapUnchecked.address(), hBitmapChecked.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuCheckMarkDimensions$MH() {
        return cfapi_h$constants$36.GetMenuCheckMarkDimensions$MH();
    }
    public static @C("LONG") int GetMenuCheckMarkDimensions () {
        try {
            return (int)cfapi_h$constants$36.GetMenuCheckMarkDimensions$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TrackPopupMenu$MH() {
        return cfapi_h$constants$36.TrackPopupMenu$MH();
    }
    public static @C("BOOL") int TrackPopupMenu (@C("HMENU") Addressable hMenu, @C("UINT") int uFlags, @C("int") int x, @C("int") int y, @C("int") int nReserved, @C("HWND") Addressable hWnd, @C("const RECT*") Addressable prcRect) {
        try {
            return (int)cfapi_h$constants$36.TrackPopupMenu$MH().invokeExact(hMenu.address(), uFlags, x, y, nReserved, hWnd.address(), prcRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TrackPopupMenuEx$MH() {
        return cfapi_h$constants$36.TrackPopupMenuEx$MH();
    }
    public static @C("BOOL") int TrackPopupMenuEx (@C("HMENU") Addressable hMenu, @C("UINT") int uFlags, @C("int") int x, @C("int") int y, @C("HWND") Addressable hwnd, @C("LPTPMPARAMS") Addressable lptpm) {
        try {
            return (int)cfapi_h$constants$36.TrackPopupMenuEx$MH().invokeExact(hMenu.address(), uFlags, x, y, hwnd.address(), lptpm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CalculatePopupWindowPosition$MH() {
        return cfapi_h$constants$36.CalculatePopupWindowPosition$MH();
    }
    public static @C("BOOL") int CalculatePopupWindowPosition (@C("const POINT*") Addressable anchorPoint, @C("const SIZE*") Addressable windowSize, @C("UINT") int flags, @C("RECT*") Addressable excludeRect, @C("RECT*") Addressable popupWindowPosition) {
        try {
            return (int)cfapi_h$constants$36.CalculatePopupWindowPosition$MH().invokeExact(anchorPoint.address(), windowSize.address(), flags, excludeRect.address(), popupWindowPosition.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuInfo$MH() {
        return cfapi_h$constants$36.GetMenuInfo$MH();
    }
    public static @C("BOOL") int GetMenuInfo (@C("HMENU") Addressable x0, @C("LPMENUINFO") Addressable x1) {
        try {
            return (int)cfapi_h$constants$36.GetMenuInfo$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMenuInfo$MH() {
        return cfapi_h$constants$36.SetMenuInfo$MH();
    }
    public static @C("BOOL") int SetMenuInfo (@C("HMENU") Addressable x0, @C("LPCMENUINFO") Addressable x1) {
        try {
            return (int)cfapi_h$constants$36.SetMenuInfo$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndMenu$MH() {
        return cfapi_h$constants$36.EndMenu$MH();
    }
    public static @C("BOOL") int EndMenu () {
        try {
            return (int)cfapi_h$constants$36.EndMenu$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InsertMenuItemA$MH() {
        return cfapi_h$constants$36.InsertMenuItemA$MH();
    }
    public static @C("BOOL") int InsertMenuItemA (@C("HMENU") Addressable hmenu, @C("UINT") int item, @C("BOOL") int fByPosition, @C("LPCMENUITEMINFOA") Addressable lpmi) {
        try {
            return (int)cfapi_h$constants$36.InsertMenuItemA$MH().invokeExact(hmenu.address(), item, fByPosition, lpmi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InsertMenuItemW$MH() {
        return cfapi_h$constants$36.InsertMenuItemW$MH();
    }
    public static @C("BOOL") int InsertMenuItemW (@C("HMENU") Addressable hmenu, @C("UINT") int item, @C("BOOL") int fByPosition, @C("LPCMENUITEMINFOW") Addressable lpmi) {
        try {
            return (int)cfapi_h$constants$36.InsertMenuItemW$MH().invokeExact(hmenu.address(), item, fByPosition, lpmi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuItemInfoA$MH() {
        return cfapi_h$constants$36.GetMenuItemInfoA$MH();
    }
    public static @C("BOOL") int GetMenuItemInfoA (@C("HMENU") Addressable hmenu, @C("UINT") int item, @C("BOOL") int fByPosition, @C("LPMENUITEMINFOA") Addressable lpmii) {
        try {
            return (int)cfapi_h$constants$36.GetMenuItemInfoA$MH().invokeExact(hmenu.address(), item, fByPosition, lpmii.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuItemInfoW$MH() {
        return cfapi_h$constants$36.GetMenuItemInfoW$MH();
    }
    public static @C("BOOL") int GetMenuItemInfoW (@C("HMENU") Addressable hmenu, @C("UINT") int item, @C("BOOL") int fByPosition, @C("LPMENUITEMINFOW") Addressable lpmii) {
        try {
            return (int)cfapi_h$constants$36.GetMenuItemInfoW$MH().invokeExact(hmenu.address(), item, fByPosition, lpmii.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMenuItemInfoA$MH() {
        return cfapi_h$constants$36.SetMenuItemInfoA$MH();
    }
    public static @C("BOOL") int SetMenuItemInfoA (@C("HMENU") Addressable hmenu, @C("UINT") int item, @C("BOOL") int fByPositon, @C("LPCMENUITEMINFOA") Addressable lpmii) {
        try {
            return (int)cfapi_h$constants$36.SetMenuItemInfoA$MH().invokeExact(hmenu.address(), item, fByPositon, lpmii.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMenuItemInfoW$MH() {
        return cfapi_h$constants$36.SetMenuItemInfoW$MH();
    }
    public static @C("BOOL") int SetMenuItemInfoW (@C("HMENU") Addressable hmenu, @C("UINT") int item, @C("BOOL") int fByPositon, @C("LPCMENUITEMINFOW") Addressable lpmii) {
        try {
            return (int)cfapi_h$constants$36.SetMenuItemInfoW$MH().invokeExact(hmenu.address(), item, fByPositon, lpmii.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuDefaultItem$MH() {
        return cfapi_h$constants$36.GetMenuDefaultItem$MH();
    }
    public static @C("UINT") int GetMenuDefaultItem (@C("HMENU") Addressable hMenu, @C("UINT") int fByPos, @C("UINT") int gmdiFlags) {
        try {
            return (int)cfapi_h$constants$36.GetMenuDefaultItem$MH().invokeExact(hMenu.address(), fByPos, gmdiFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMenuDefaultItem$MH() {
        return cfapi_h$constants$36.SetMenuDefaultItem$MH();
    }
    public static @C("BOOL") int SetMenuDefaultItem (@C("HMENU") Addressable hMenu, @C("UINT") int uItem, @C("UINT") int fByPos) {
        try {
            return (int)cfapi_h$constants$36.SetMenuDefaultItem$MH().invokeExact(hMenu.address(), uItem, fByPos);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuItemRect$MH() {
        return cfapi_h$constants$36.GetMenuItemRect$MH();
    }
    public static @C("BOOL") int GetMenuItemRect (@C("HWND") Addressable hWnd, @C("HMENU") Addressable hMenu, @C("UINT") int uItem, @C("LPRECT") Addressable lprcItem) {
        try {
            return (int)cfapi_h$constants$36.GetMenuItemRect$MH().invokeExact(hWnd.address(), hMenu.address(), uItem, lprcItem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MenuItemFromPoint$MH() {
        return cfapi_h$constants$36.MenuItemFromPoint$MH();
    }
    public static @C("int") int MenuItemFromPoint (@C("HWND") Addressable hWnd, @C("HMENU") Addressable hMenu, @C("POINT") MemorySegment ptScreen) {
        try {
            return (int)cfapi_h$constants$36.MenuItemFromPoint$MH().invokeExact(hWnd.address(), hMenu.address(), ptScreen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DragObject$MH() {
        return cfapi_h$constants$36.DragObject$MH();
    }
    public static @C("DWORD") int DragObject (@C("HWND") Addressable hwndParent, @C("HWND") Addressable hwndFrom, @C("UINT") int fmt, @C("ULONG_PTR") long data, @C("HCURSOR") Addressable hcur) {
        try {
            return (int)cfapi_h$constants$36.DragObject$MH().invokeExact(hwndParent.address(), hwndFrom.address(), fmt, data, hcur.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DragDetect$MH() {
        return cfapi_h$constants$36.DragDetect$MH();
    }
    public static @C("BOOL") int DragDetect (@C("HWND") Addressable hwnd, @C("POINT") MemorySegment pt) {
        try {
            return (int)cfapi_h$constants$36.DragDetect$MH().invokeExact(hwnd.address(), pt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawIcon$MH() {
        return cfapi_h$constants$36.DrawIcon$MH();
    }
    public static @C("BOOL") int DrawIcon (@C("HDC") Addressable hDC, @C("int") int X, @C("int") int Y, @C("HICON") Addressable hIcon) {
        try {
            return (int)cfapi_h$constants$36.DrawIcon$MH().invokeExact(hDC.address(), X, Y, hIcon.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawTextA$MH() {
        return cfapi_h$constants$36.DrawTextA$MH();
    }
    public static @C("int") int DrawTextA (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpchText, @C("int") int cchText, @C("LPRECT") Addressable lprc, @C("UINT") int format) {
        try {
            return (int)cfapi_h$constants$36.DrawTextA$MH().invokeExact(hdc.address(), lpchText.address(), cchText, lprc.address(), format);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawTextW$MH() {
        return cfapi_h$constants$36.DrawTextW$MH();
    }
    public static @C("int") int DrawTextW (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpchText, @C("int") int cchText, @C("LPRECT") Addressable lprc, @C("UINT") int format) {
        try {
            return (int)cfapi_h$constants$36.DrawTextW$MH().invokeExact(hdc.address(), lpchText.address(), cchText, lprc.address(), format);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawTextExA$MH() {
        return cfapi_h$constants$36.DrawTextExA$MH();
    }
    public static @C("int") int DrawTextExA (@C("HDC") Addressable hdc, @C("LPSTR") Addressable lpchText, @C("int") int cchText, @C("LPRECT") Addressable lprc, @C("UINT") int format, @C("LPDRAWTEXTPARAMS") Addressable lpdtp) {
        try {
            return (int)cfapi_h$constants$36.DrawTextExA$MH().invokeExact(hdc.address(), lpchText.address(), cchText, lprc.address(), format, lpdtp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawTextExW$MH() {
        return cfapi_h$constants$36.DrawTextExW$MH();
    }
    public static @C("int") int DrawTextExW (@C("HDC") Addressable hdc, @C("LPWSTR") Addressable lpchText, @C("int") int cchText, @C("LPRECT") Addressable lprc, @C("UINT") int format, @C("LPDRAWTEXTPARAMS") Addressable lpdtp) {
        try {
            return (int)cfapi_h$constants$36.DrawTextExW$MH().invokeExact(hdc.address(), lpchText.address(), cchText, lprc.address(), format, lpdtp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GrayStringA$MH() {
        return cfapi_h$constants$36.GrayStringA$MH();
    }
    public static @C("BOOL") int GrayStringA (@C("HDC") Addressable hDC, @C("HBRUSH") Addressable hBrush, @C("GRAYSTRINGPROC") Addressable lpOutputFunc, @C("LPARAM") long lpData, @C("int") int nCount, @C("int") int X, @C("int") int Y, @C("int") int nWidth, @C("int") int nHeight) {
        try {
            return (int)cfapi_h$constants$36.GrayStringA$MH().invokeExact(hDC.address(), hBrush.address(), lpOutputFunc.address(), lpData, nCount, X, Y, nWidth, nHeight);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GrayStringW$MH() {
        return cfapi_h$constants$36.GrayStringW$MH();
    }
    public static @C("BOOL") int GrayStringW (@C("HDC") Addressable hDC, @C("HBRUSH") Addressable hBrush, @C("GRAYSTRINGPROC") Addressable lpOutputFunc, @C("LPARAM") long lpData, @C("int") int nCount, @C("int") int X, @C("int") int Y, @C("int") int nWidth, @C("int") int nHeight) {
        try {
            return (int)cfapi_h$constants$36.GrayStringW$MH().invokeExact(hDC.address(), hBrush.address(), lpOutputFunc.address(), lpData, nCount, X, Y, nWidth, nHeight);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawStateA$MH() {
        return cfapi_h$constants$36.DrawStateA$MH();
    }
    public static @C("BOOL") int DrawStateA (@C("HDC") Addressable hdc, @C("HBRUSH") Addressable hbrFore, @C("DRAWSTATEPROC") Addressable qfnCallBack, @C("LPARAM") long lData, @C("WPARAM") long wData, @C("int") int x, @C("int") int y, @C("int") int cx, @C("int") int cy, @C("UINT") int uFlags) {
        try {
            return (int)cfapi_h$constants$36.DrawStateA$MH().invokeExact(hdc.address(), hbrFore.address(), qfnCallBack.address(), lData, wData, x, y, cx, cy, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawStateW$MH() {
        return cfapi_h$constants$36.DrawStateW$MH();
    }
    public static @C("BOOL") int DrawStateW (@C("HDC") Addressable hdc, @C("HBRUSH") Addressable hbrFore, @C("DRAWSTATEPROC") Addressable qfnCallBack, @C("LPARAM") long lData, @C("WPARAM") long wData, @C("int") int x, @C("int") int y, @C("int") int cx, @C("int") int cy, @C("UINT") int uFlags) {
        try {
            return (int)cfapi_h$constants$36.DrawStateW$MH().invokeExact(hdc.address(), hbrFore.address(), qfnCallBack.address(), lData, wData, x, y, cx, cy, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TabbedTextOutA$MH() {
        return cfapi_h$constants$36.TabbedTextOutA$MH();
    }
    public static @C("LONG") int TabbedTextOutA (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPCSTR") Addressable lpString, @C("int") int chCount, @C("int") int nTabPositions, @C("const INT*") Addressable lpnTabStopPositions, @C("int") int nTabOrigin) {
        try {
            return (int)cfapi_h$constants$36.TabbedTextOutA$MH().invokeExact(hdc.address(), x, y, lpString.address(), chCount, nTabPositions, lpnTabStopPositions.address(), nTabOrigin);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TabbedTextOutW$MH() {
        return cfapi_h$constants$36.TabbedTextOutW$MH();
    }
    public static @C("LONG") int TabbedTextOutW (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPCWSTR") Addressable lpString, @C("int") int chCount, @C("int") int nTabPositions, @C("const INT*") Addressable lpnTabStopPositions, @C("int") int nTabOrigin) {
        try {
            return (int)cfapi_h$constants$36.TabbedTextOutW$MH().invokeExact(hdc.address(), x, y, lpString.address(), chCount, nTabPositions, lpnTabStopPositions.address(), nTabOrigin);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTabbedTextExtentA$MH() {
        return cfapi_h$constants$36.GetTabbedTextExtentA$MH();
    }
    public static @C("DWORD") int GetTabbedTextExtentA (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpString, @C("int") int chCount, @C("int") int nTabPositions, @C("const INT*") Addressable lpnTabStopPositions) {
        try {
            return (int)cfapi_h$constants$36.GetTabbedTextExtentA$MH().invokeExact(hdc.address(), lpString.address(), chCount, nTabPositions, lpnTabStopPositions.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTabbedTextExtentW$MH() {
        return cfapi_h$constants$36.GetTabbedTextExtentW$MH();
    }
    public static @C("DWORD") int GetTabbedTextExtentW (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpString, @C("int") int chCount, @C("int") int nTabPositions, @C("const INT*") Addressable lpnTabStopPositions) {
        try {
            return (int)cfapi_h$constants$36.GetTabbedTextExtentW$MH().invokeExact(hdc.address(), lpString.address(), chCount, nTabPositions, lpnTabStopPositions.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateWindow$MH() {
        return cfapi_h$constants$36.UpdateWindow$MH();
    }
    public static @C("BOOL") int UpdateWindow (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$36.UpdateWindow$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetActiveWindow$MH() {
        return cfapi_h$constants$36.SetActiveWindow$MH();
    }
    public static @C("HWND") MemoryAddress SetActiveWindow (@C("HWND") Addressable hWnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.SetActiveWindow$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetForegroundWindow$MH() {
        return cfapi_h$constants$36.GetForegroundWindow$MH();
    }
    public static @C("HWND") MemoryAddress GetForegroundWindow () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetForegroundWindow$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PaintDesktop$MH() {
        return cfapi_h$constants$36.PaintDesktop$MH();
    }
    public static @C("BOOL") int PaintDesktop (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$36.PaintDesktop$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SwitchToThisWindow$MH() {
        return cfapi_h$constants$36.SwitchToThisWindow$MH();
    }
    public static void SwitchToThisWindow (@C("HWND") Addressable hwnd, @C("BOOL") int fUnknown) {
        try {
            cfapi_h$constants$36.SwitchToThisWindow$MH().invokeExact(hwnd.address(), fUnknown);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetForegroundWindow$MH() {
        return cfapi_h$constants$36.SetForegroundWindow$MH();
    }
    public static @C("BOOL") int SetForegroundWindow (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$36.SetForegroundWindow$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AllowSetForegroundWindow$MH() {
        return cfapi_h$constants$36.AllowSetForegroundWindow$MH();
    }
    public static @C("BOOL") int AllowSetForegroundWindow (@C("DWORD") int dwProcessId) {
        try {
            return (int)cfapi_h$constants$36.AllowSetForegroundWindow$MH().invokeExact(dwProcessId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LockSetForegroundWindow$MH() {
        return cfapi_h$constants$36.LockSetForegroundWindow$MH();
    }
    public static @C("BOOL") int LockSetForegroundWindow (@C("UINT") int uLockCode) {
        try {
            return (int)cfapi_h$constants$36.LockSetForegroundWindow$MH().invokeExact(uLockCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WindowFromDC$MH() {
        return cfapi_h$constants$36.WindowFromDC$MH();
    }
    public static @C("HWND") MemoryAddress WindowFromDC (@C("HDC") Addressable hDC) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.WindowFromDC$MH().invokeExact(hDC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDC$MH() {
        return cfapi_h$constants$36.GetDC$MH();
    }
    public static @C("HDC") MemoryAddress GetDC (@C("HWND") Addressable hWnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetDC$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDCEx$MH() {
        return cfapi_h$constants$36.GetDCEx$MH();
    }
    public static @C("HDC") MemoryAddress GetDCEx (@C("HWND") Addressable hWnd, @C("HRGN") Addressable hrgnClip, @C("DWORD") int flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetDCEx$MH().invokeExact(hWnd.address(), hrgnClip.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowDC$MH() {
        return cfapi_h$constants$36.GetWindowDC$MH();
    }
    public static @C("HDC") MemoryAddress GetWindowDC (@C("HWND") Addressable hWnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetWindowDC$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseDC$MH() {
        return cfapi_h$constants$36.ReleaseDC$MH();
    }
    public static @C("int") int ReleaseDC (@C("HWND") Addressable hWnd, @C("HDC") Addressable hDC) {
        try {
            return (int)cfapi_h$constants$36.ReleaseDC$MH().invokeExact(hWnd.address(), hDC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BeginPaint$MH() {
        return cfapi_h$constants$36.BeginPaint$MH();
    }
    public static @C("HDC") MemoryAddress BeginPaint (@C("HWND") Addressable hWnd, @C("LPPAINTSTRUCT") Addressable lpPaint) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.BeginPaint$MH().invokeExact(hWnd.address(), lpPaint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndPaint$MH() {
        return cfapi_h$constants$36.EndPaint$MH();
    }
    public static @C("BOOL") int EndPaint (@C("HWND") Addressable hWnd, @C("const PAINTSTRUCT*") Addressable lpPaint) {
        try {
            return (int)cfapi_h$constants$36.EndPaint$MH().invokeExact(hWnd.address(), lpPaint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUpdateRect$MH() {
        return cfapi_h$constants$36.GetUpdateRect$MH();
    }
    public static @C("BOOL") int GetUpdateRect (@C("HWND") Addressable hWnd, @C("LPRECT") Addressable lpRect, @C("BOOL") int bErase) {
        try {
            return (int)cfapi_h$constants$36.GetUpdateRect$MH().invokeExact(hWnd.address(), lpRect.address(), bErase);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUpdateRgn$MH() {
        return cfapi_h$constants$36.GetUpdateRgn$MH();
    }
    public static @C("int") int GetUpdateRgn (@C("HWND") Addressable hWnd, @C("HRGN") Addressable hRgn, @C("BOOL") int bErase) {
        try {
            return (int)cfapi_h$constants$36.GetUpdateRgn$MH().invokeExact(hWnd.address(), hRgn.address(), bErase);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowRgn$MH() {
        return cfapi_h$constants$36.SetWindowRgn$MH();
    }
    public static @C("int") int SetWindowRgn (@C("HWND") Addressable hWnd, @C("HRGN") Addressable hRgn, @C("BOOL") int bRedraw) {
        try {
            return (int)cfapi_h$constants$36.SetWindowRgn$MH().invokeExact(hWnd.address(), hRgn.address(), bRedraw);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowRgn$MH() {
        return cfapi_h$constants$36.GetWindowRgn$MH();
    }
    public static @C("int") int GetWindowRgn (@C("HWND") Addressable hWnd, @C("HRGN") Addressable hRgn) {
        try {
            return (int)cfapi_h$constants$36.GetWindowRgn$MH().invokeExact(hWnd.address(), hRgn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowRgnBox$MH() {
        return cfapi_h$constants$36.GetWindowRgnBox$MH();
    }
    public static @C("int") int GetWindowRgnBox (@C("HWND") Addressable hWnd, @C("LPRECT") Addressable lprc) {
        try {
            return (int)cfapi_h$constants$36.GetWindowRgnBox$MH().invokeExact(hWnd.address(), lprc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExcludeUpdateRgn$MH() {
        return cfapi_h$constants$36.ExcludeUpdateRgn$MH();
    }
    public static @C("int") int ExcludeUpdateRgn (@C("HDC") Addressable hDC, @C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$36.ExcludeUpdateRgn$MH().invokeExact(hDC.address(), hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InvalidateRect$MH() {
        return cfapi_h$constants$36.InvalidateRect$MH();
    }
    public static @C("BOOL") int InvalidateRect (@C("HWND") Addressable hWnd, @C("const RECT*") Addressable lpRect, @C("BOOL") int bErase) {
        try {
            return (int)cfapi_h$constants$36.InvalidateRect$MH().invokeExact(hWnd.address(), lpRect.address(), bErase);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ValidateRect$MH() {
        return cfapi_h$constants$36.ValidateRect$MH();
    }
    public static @C("BOOL") int ValidateRect (@C("HWND") Addressable hWnd, @C("const RECT*") Addressable lpRect) {
        try {
            return (int)cfapi_h$constants$36.ValidateRect$MH().invokeExact(hWnd.address(), lpRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InvalidateRgn$MH() {
        return cfapi_h$constants$36.InvalidateRgn$MH();
    }
    public static @C("BOOL") int InvalidateRgn (@C("HWND") Addressable hWnd, @C("HRGN") Addressable hRgn, @C("BOOL") int bErase) {
        try {
            return (int)cfapi_h$constants$36.InvalidateRgn$MH().invokeExact(hWnd.address(), hRgn.address(), bErase);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ValidateRgn$MH() {
        return cfapi_h$constants$36.ValidateRgn$MH();
    }
    public static @C("BOOL") int ValidateRgn (@C("HWND") Addressable hWnd, @C("HRGN") Addressable hRgn) {
        try {
            return (int)cfapi_h$constants$36.ValidateRgn$MH().invokeExact(hWnd.address(), hRgn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RedrawWindow$MH() {
        return cfapi_h$constants$36.RedrawWindow$MH();
    }
    public static @C("BOOL") int RedrawWindow (@C("HWND") Addressable hWnd, @C("const RECT*") Addressable lprcUpdate, @C("HRGN") Addressable hrgnUpdate, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$36.RedrawWindow$MH().invokeExact(hWnd.address(), lprcUpdate.address(), hrgnUpdate.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LockWindowUpdate$MH() {
        return cfapi_h$constants$36.LockWindowUpdate$MH();
    }
    public static @C("BOOL") int LockWindowUpdate (@C("HWND") Addressable hWndLock) {
        try {
            return (int)cfapi_h$constants$36.LockWindowUpdate$MH().invokeExact(hWndLock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ScrollWindow$MH() {
        return cfapi_h$constants$36.ScrollWindow$MH();
    }
    public static @C("BOOL") int ScrollWindow (@C("HWND") Addressable hWnd, @C("int") int XAmount, @C("int") int YAmount, @C("const RECT*") Addressable lpRect, @C("const RECT*") Addressable lpClipRect) {
        try {
            return (int)cfapi_h$constants$36.ScrollWindow$MH().invokeExact(hWnd.address(), XAmount, YAmount, lpRect.address(), lpClipRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ScrollDC$MH() {
        return cfapi_h$constants$36.ScrollDC$MH();
    }
    public static @C("BOOL") int ScrollDC (@C("HDC") Addressable hDC, @C("int") int dx, @C("int") int dy, @C("const RECT*") Addressable lprcScroll, @C("const RECT*") Addressable lprcClip, @C("HRGN") Addressable hrgnUpdate, @C("LPRECT") Addressable lprcUpdate) {
        try {
            return (int)cfapi_h$constants$36.ScrollDC$MH().invokeExact(hDC.address(), dx, dy, lprcScroll.address(), lprcClip.address(), hrgnUpdate.address(), lprcUpdate.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ScrollWindowEx$MH() {
        return cfapi_h$constants$36.ScrollWindowEx$MH();
    }
    public static @C("int") int ScrollWindowEx (@C("HWND") Addressable hWnd, @C("int") int dx, @C("int") int dy, @C("const RECT*") Addressable prcScroll, @C("const RECT*") Addressable prcClip, @C("HRGN") Addressable hrgnUpdate, @C("LPRECT") Addressable prcUpdate, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$36.ScrollWindowEx$MH().invokeExact(hWnd.address(), dx, dy, prcScroll.address(), prcClip.address(), hrgnUpdate.address(), prcUpdate.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetScrollPos$MH() {
        return cfapi_h$constants$36.SetScrollPos$MH();
    }
    public static @C("int") int SetScrollPos (@C("HWND") Addressable hWnd, @C("int") int nBar, @C("int") int nPos, @C("BOOL") int bRedraw) {
        try {
            return (int)cfapi_h$constants$36.SetScrollPos$MH().invokeExact(hWnd.address(), nBar, nPos, bRedraw);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetScrollPos$MH() {
        return cfapi_h$constants$36.GetScrollPos$MH();
    }
    public static @C("int") int GetScrollPos (@C("HWND") Addressable hWnd, @C("int") int nBar) {
        try {
            return (int)cfapi_h$constants$36.GetScrollPos$MH().invokeExact(hWnd.address(), nBar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetScrollRange$MH() {
        return cfapi_h$constants$36.SetScrollRange$MH();
    }
    public static @C("BOOL") int SetScrollRange (@C("HWND") Addressable hWnd, @C("int") int nBar, @C("int") int nMinPos, @C("int") int nMaxPos, @C("BOOL") int bRedraw) {
        try {
            return (int)cfapi_h$constants$36.SetScrollRange$MH().invokeExact(hWnd.address(), nBar, nMinPos, nMaxPos, bRedraw);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetScrollRange$MH() {
        return cfapi_h$constants$36.GetScrollRange$MH();
    }
    public static @C("BOOL") int GetScrollRange (@C("HWND") Addressable hWnd, @C("int") int nBar, @C("LPINT") Addressable lpMinPos, @C("LPINT") Addressable lpMaxPos) {
        try {
            return (int)cfapi_h$constants$36.GetScrollRange$MH().invokeExact(hWnd.address(), nBar, lpMinPos.address(), lpMaxPos.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ShowScrollBar$MH() {
        return cfapi_h$constants$36.ShowScrollBar$MH();
    }
    public static @C("BOOL") int ShowScrollBar (@C("HWND") Addressable hWnd, @C("int") int wBar, @C("BOOL") int bShow) {
        try {
            return (int)cfapi_h$constants$36.ShowScrollBar$MH().invokeExact(hWnd.address(), wBar, bShow);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnableScrollBar$MH() {
        return cfapi_h$constants$36.EnableScrollBar$MH();
    }
    public static @C("BOOL") int EnableScrollBar (@C("HWND") Addressable hWnd, @C("UINT") int wSBflags, @C("UINT") int wArrows) {
        try {
            return (int)cfapi_h$constants$36.EnableScrollBar$MH().invokeExact(hWnd.address(), wSBflags, wArrows);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPropA$MH() {
        return cfapi_h$constants$36.SetPropA$MH();
    }
    public static @C("BOOL") int SetPropA (@C("HWND") Addressable hWnd, @C("LPCSTR") Addressable lpString, @C("HANDLE") Addressable hData) {
        try {
            return (int)cfapi_h$constants$36.SetPropA$MH().invokeExact(hWnd.address(), lpString.address(), hData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPropW$MH() {
        return cfapi_h$constants$36.SetPropW$MH();
    }
    public static @C("BOOL") int SetPropW (@C("HWND") Addressable hWnd, @C("LPCWSTR") Addressable lpString, @C("HANDLE") Addressable hData) {
        try {
            return (int)cfapi_h$constants$36.SetPropW$MH().invokeExact(hWnd.address(), lpString.address(), hData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPropA$MH() {
        return cfapi_h$constants$36.GetPropA$MH();
    }
    public static @C("HANDLE") MemoryAddress GetPropA (@C("HWND") Addressable hWnd, @C("LPCSTR") Addressable lpString) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetPropA$MH().invokeExact(hWnd.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPropW$MH() {
        return cfapi_h$constants$36.GetPropW$MH();
    }
    public static @C("HANDLE") MemoryAddress GetPropW (@C("HWND") Addressable hWnd, @C("LPCWSTR") Addressable lpString) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetPropW$MH().invokeExact(hWnd.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemovePropA$MH() {
        return cfapi_h$constants$36.RemovePropA$MH();
    }
    public static @C("HANDLE") MemoryAddress RemovePropA (@C("HWND") Addressable hWnd, @C("LPCSTR") Addressable lpString) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.RemovePropA$MH().invokeExact(hWnd.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemovePropW$MH() {
        return cfapi_h$constants$36.RemovePropW$MH();
    }
    public static @C("HANDLE") MemoryAddress RemovePropW (@C("HWND") Addressable hWnd, @C("LPCWSTR") Addressable lpString) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.RemovePropW$MH().invokeExact(hWnd.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumPropsExA$MH() {
        return cfapi_h$constants$36.EnumPropsExA$MH();
    }
    public static @C("int") int EnumPropsExA (@C("HWND") Addressable hWnd, @C("PROPENUMPROCEXA") Addressable lpEnumFunc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$36.EnumPropsExA$MH().invokeExact(hWnd.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumPropsExW$MH() {
        return cfapi_h$constants$36.EnumPropsExW$MH();
    }
    public static @C("int") int EnumPropsExW (@C("HWND") Addressable hWnd, @C("PROPENUMPROCEXW") Addressable lpEnumFunc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$36.EnumPropsExW$MH().invokeExact(hWnd.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumPropsA$MH() {
        return cfapi_h$constants$36.EnumPropsA$MH();
    }
    public static @C("int") int EnumPropsA (@C("HWND") Addressable hWnd, @C("PROPENUMPROCA") Addressable lpEnumFunc) {
        try {
            return (int)cfapi_h$constants$36.EnumPropsA$MH().invokeExact(hWnd.address(), lpEnumFunc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumPropsW$MH() {
        return cfapi_h$constants$36.EnumPropsW$MH();
    }
    public static @C("int") int EnumPropsW (@C("HWND") Addressable hWnd, @C("PROPENUMPROCW") Addressable lpEnumFunc) {
        try {
            return (int)cfapi_h$constants$36.EnumPropsW$MH().invokeExact(hWnd.address(), lpEnumFunc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowTextA$MH() {
        return cfapi_h$constants$37.SetWindowTextA$MH();
    }
    public static @C("BOOL") int SetWindowTextA (@C("HWND") Addressable hWnd, @C("LPCSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$37.SetWindowTextA$MH().invokeExact(hWnd.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowTextW$MH() {
        return cfapi_h$constants$37.SetWindowTextW$MH();
    }
    public static @C("BOOL") int SetWindowTextW (@C("HWND") Addressable hWnd, @C("LPCWSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$37.SetWindowTextW$MH().invokeExact(hWnd.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowTextA$MH() {
        return cfapi_h$constants$37.GetWindowTextA$MH();
    }
    public static @C("int") int GetWindowTextA (@C("HWND") Addressable hWnd, @C("LPSTR") Addressable lpString, @C("int") int nMaxCount) {
        try {
            return (int)cfapi_h$constants$37.GetWindowTextA$MH().invokeExact(hWnd.address(), lpString.address(), nMaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowTextW$MH() {
        return cfapi_h$constants$37.GetWindowTextW$MH();
    }
    public static @C("int") int GetWindowTextW (@C("HWND") Addressable hWnd, @C("LPWSTR") Addressable lpString, @C("int") int nMaxCount) {
        try {
            return (int)cfapi_h$constants$37.GetWindowTextW$MH().invokeExact(hWnd.address(), lpString.address(), nMaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowTextLengthA$MH() {
        return cfapi_h$constants$37.GetWindowTextLengthA$MH();
    }
    public static @C("int") int GetWindowTextLengthA (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$37.GetWindowTextLengthA$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowTextLengthW$MH() {
        return cfapi_h$constants$37.GetWindowTextLengthW$MH();
    }
    public static @C("int") int GetWindowTextLengthW (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$37.GetWindowTextLengthW$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClientRect$MH() {
        return cfapi_h$constants$37.GetClientRect$MH();
    }
    public static @C("BOOL") int GetClientRect (@C("HWND") Addressable hWnd, @C("LPRECT") Addressable lpRect) {
        try {
            return (int)cfapi_h$constants$37.GetClientRect$MH().invokeExact(hWnd.address(), lpRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowRect$MH() {
        return cfapi_h$constants$37.GetWindowRect$MH();
    }
    public static @C("BOOL") int GetWindowRect (@C("HWND") Addressable hWnd, @C("LPRECT") Addressable lpRect) {
        try {
            return (int)cfapi_h$constants$37.GetWindowRect$MH().invokeExact(hWnd.address(), lpRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AdjustWindowRect$MH() {
        return cfapi_h$constants$37.AdjustWindowRect$MH();
    }
    public static @C("BOOL") int AdjustWindowRect (@C("LPRECT") Addressable lpRect, @C("DWORD") int dwStyle, @C("BOOL") int bMenu) {
        try {
            return (int)cfapi_h$constants$37.AdjustWindowRect$MH().invokeExact(lpRect.address(), dwStyle, bMenu);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AdjustWindowRectEx$MH() {
        return cfapi_h$constants$37.AdjustWindowRectEx$MH();
    }
    public static @C("BOOL") int AdjustWindowRectEx (@C("LPRECT") Addressable lpRect, @C("DWORD") int dwStyle, @C("BOOL") int bMenu, @C("DWORD") int dwExStyle) {
        try {
            return (int)cfapi_h$constants$37.AdjustWindowRectEx$MH().invokeExact(lpRect.address(), dwStyle, bMenu, dwExStyle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AdjustWindowRectExForDpi$MH() {
        return cfapi_h$constants$37.AdjustWindowRectExForDpi$MH();
    }
    public static @C("BOOL") int AdjustWindowRectExForDpi (@C("LPRECT") Addressable lpRect, @C("DWORD") int dwStyle, @C("BOOL") int bMenu, @C("DWORD") int dwExStyle, @C("UINT") int dpi) {
        try {
            return (int)cfapi_h$constants$37.AdjustWindowRectExForDpi$MH().invokeExact(lpRect.address(), dwStyle, bMenu, dwExStyle, dpi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowContextHelpId$MH() {
        return cfapi_h$constants$37.SetWindowContextHelpId$MH();
    }
    public static @C("BOOL") int SetWindowContextHelpId (@C("HWND") Addressable x0, @C("DWORD") int x1) {
        try {
            return (int)cfapi_h$constants$37.SetWindowContextHelpId$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowContextHelpId$MH() {
        return cfapi_h$constants$37.GetWindowContextHelpId$MH();
    }
    public static @C("DWORD") int GetWindowContextHelpId (@C("HWND") Addressable x0) {
        try {
            return (int)cfapi_h$constants$37.GetWindowContextHelpId$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMenuContextHelpId$MH() {
        return cfapi_h$constants$37.SetMenuContextHelpId$MH();
    }
    public static @C("BOOL") int SetMenuContextHelpId (@C("HMENU") Addressable x0, @C("DWORD") int x1) {
        try {
            return (int)cfapi_h$constants$37.SetMenuContextHelpId$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuContextHelpId$MH() {
        return cfapi_h$constants$37.GetMenuContextHelpId$MH();
    }
    public static @C("DWORD") int GetMenuContextHelpId (@C("HMENU") Addressable x0) {
        try {
            return (int)cfapi_h$constants$37.GetMenuContextHelpId$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MessageBoxA$MH() {
        return cfapi_h$constants$37.MessageBoxA$MH();
    }
    public static @C("int") int MessageBoxA (@C("HWND") Addressable hWnd, @C("LPCSTR") Addressable lpText, @C("LPCSTR") Addressable lpCaption, @C("UINT") int uType) {
        try {
            return (int)cfapi_h$constants$37.MessageBoxA$MH().invokeExact(hWnd.address(), lpText.address(), lpCaption.address(), uType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MessageBoxW$MH() {
        return cfapi_h$constants$37.MessageBoxW$MH();
    }
    public static @C("int") int MessageBoxW (@C("HWND") Addressable hWnd, @C("LPCWSTR") Addressable lpText, @C("LPCWSTR") Addressable lpCaption, @C("UINT") int uType) {
        try {
            return (int)cfapi_h$constants$37.MessageBoxW$MH().invokeExact(hWnd.address(), lpText.address(), lpCaption.address(), uType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MessageBoxExA$MH() {
        return cfapi_h$constants$37.MessageBoxExA$MH();
    }
    public static @C("int") int MessageBoxExA (@C("HWND") Addressable hWnd, @C("LPCSTR") Addressable lpText, @C("LPCSTR") Addressable lpCaption, @C("UINT") int uType, @C("WORD") short wLanguageId) {
        try {
            return (int)cfapi_h$constants$37.MessageBoxExA$MH().invokeExact(hWnd.address(), lpText.address(), lpCaption.address(), uType, wLanguageId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MessageBoxExW$MH() {
        return cfapi_h$constants$37.MessageBoxExW$MH();
    }
    public static @C("int") int MessageBoxExW (@C("HWND") Addressable hWnd, @C("LPCWSTR") Addressable lpText, @C("LPCWSTR") Addressable lpCaption, @C("UINT") int uType, @C("WORD") short wLanguageId) {
        try {
            return (int)cfapi_h$constants$37.MessageBoxExW$MH().invokeExact(hWnd.address(), lpText.address(), lpCaption.address(), uType, wLanguageId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MessageBoxIndirectA$MH() {
        return cfapi_h$constants$37.MessageBoxIndirectA$MH();
    }
    public static @C("int") int MessageBoxIndirectA (@C("const MSGBOXPARAMSA*") Addressable lpmbp) {
        try {
            return (int)cfapi_h$constants$37.MessageBoxIndirectA$MH().invokeExact(lpmbp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MessageBoxIndirectW$MH() {
        return cfapi_h$constants$37.MessageBoxIndirectW$MH();
    }
    public static @C("int") int MessageBoxIndirectW (@C("const MSGBOXPARAMSW*") Addressable lpmbp) {
        try {
            return (int)cfapi_h$constants$37.MessageBoxIndirectW$MH().invokeExact(lpmbp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MessageBeep$MH() {
        return cfapi_h$constants$37.MessageBeep$MH();
    }
    public static @C("BOOL") int MessageBeep (@C("UINT") int uType) {
        try {
            return (int)cfapi_h$constants$37.MessageBeep$MH().invokeExact(uType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ShowCursor$MH() {
        return cfapi_h$constants$37.ShowCursor$MH();
    }
    public static @C("int") int ShowCursor (@C("BOOL") int bShow) {
        try {
            return (int)cfapi_h$constants$37.ShowCursor$MH().invokeExact(bShow);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCursorPos$MH() {
        return cfapi_h$constants$37.SetCursorPos$MH();
    }
    public static @C("BOOL") int SetCursorPos (@C("int") int X, @C("int") int Y) {
        try {
            return (int)cfapi_h$constants$37.SetCursorPos$MH().invokeExact(X, Y);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPhysicalCursorPos$MH() {
        return cfapi_h$constants$37.SetPhysicalCursorPos$MH();
    }
    public static @C("BOOL") int SetPhysicalCursorPos (@C("int") int X, @C("int") int Y) {
        try {
            return (int)cfapi_h$constants$37.SetPhysicalCursorPos$MH().invokeExact(X, Y);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCursor$MH() {
        return cfapi_h$constants$37.SetCursor$MH();
    }
    public static @C("HCURSOR") MemoryAddress SetCursor (@C("HCURSOR") Addressable hCursor) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.SetCursor$MH().invokeExact(hCursor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCursorPos$MH() {
        return cfapi_h$constants$37.GetCursorPos$MH();
    }
    public static @C("BOOL") int GetCursorPos (@C("LPPOINT") Addressable lpPoint) {
        try {
            return (int)cfapi_h$constants$37.GetCursorPos$MH().invokeExact(lpPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPhysicalCursorPos$MH() {
        return cfapi_h$constants$37.GetPhysicalCursorPos$MH();
    }
    public static @C("BOOL") int GetPhysicalCursorPos (@C("LPPOINT") Addressable lpPoint) {
        try {
            return (int)cfapi_h$constants$37.GetPhysicalCursorPos$MH().invokeExact(lpPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClipCursor$MH() {
        return cfapi_h$constants$37.GetClipCursor$MH();
    }
    public static @C("BOOL") int GetClipCursor (@C("LPRECT") Addressable lpRect) {
        try {
            return (int)cfapi_h$constants$37.GetClipCursor$MH().invokeExact(lpRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCursor$MH() {
        return cfapi_h$constants$37.GetCursor$MH();
    }
    public static @C("HCURSOR") MemoryAddress GetCursor () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.GetCursor$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateCaret$MH() {
        return cfapi_h$constants$37.CreateCaret$MH();
    }
    public static @C("BOOL") int CreateCaret (@C("HWND") Addressable hWnd, @C("HBITMAP") Addressable hBitmap, @C("int") int nWidth, @C("int") int nHeight) {
        try {
            return (int)cfapi_h$constants$37.CreateCaret$MH().invokeExact(hWnd.address(), hBitmap.address(), nWidth, nHeight);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCaretBlinkTime$MH() {
        return cfapi_h$constants$37.GetCaretBlinkTime$MH();
    }
    public static @C("UINT") int GetCaretBlinkTime () {
        try {
            return (int)cfapi_h$constants$37.GetCaretBlinkTime$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCaretBlinkTime$MH() {
        return cfapi_h$constants$37.SetCaretBlinkTime$MH();
    }
    public static @C("BOOL") int SetCaretBlinkTime (@C("UINT") int uMSeconds) {
        try {
            return (int)cfapi_h$constants$37.SetCaretBlinkTime$MH().invokeExact(uMSeconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroyCaret$MH() {
        return cfapi_h$constants$37.DestroyCaret$MH();
    }
    public static @C("BOOL") int DestroyCaret () {
        try {
            return (int)cfapi_h$constants$37.DestroyCaret$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HideCaret$MH() {
        return cfapi_h$constants$37.HideCaret$MH();
    }
    public static @C("BOOL") int HideCaret (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$37.HideCaret$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ShowCaret$MH() {
        return cfapi_h$constants$37.ShowCaret$MH();
    }
    public static @C("BOOL") int ShowCaret (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$37.ShowCaret$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCaretPos$MH() {
        return cfapi_h$constants$37.SetCaretPos$MH();
    }
    public static @C("BOOL") int SetCaretPos (@C("int") int X, @C("int") int Y) {
        try {
            return (int)cfapi_h$constants$37.SetCaretPos$MH().invokeExact(X, Y);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCaretPos$MH() {
        return cfapi_h$constants$37.GetCaretPos$MH();
    }
    public static @C("BOOL") int GetCaretPos (@C("LPPOINT") Addressable lpPoint) {
        try {
            return (int)cfapi_h$constants$37.GetCaretPos$MH().invokeExact(lpPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClientToScreen$MH() {
        return cfapi_h$constants$37.ClientToScreen$MH();
    }
    public static @C("BOOL") int ClientToScreen (@C("HWND") Addressable hWnd, @C("LPPOINT") Addressable lpPoint) {
        try {
            return (int)cfapi_h$constants$37.ClientToScreen$MH().invokeExact(hWnd.address(), lpPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ScreenToClient$MH() {
        return cfapi_h$constants$37.ScreenToClient$MH();
    }
    public static @C("BOOL") int ScreenToClient (@C("HWND") Addressable hWnd, @C("LPPOINT") Addressable lpPoint) {
        try {
            return (int)cfapi_h$constants$37.ScreenToClient$MH().invokeExact(hWnd.address(), lpPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogicalToPhysicalPoint$MH() {
        return cfapi_h$constants$37.LogicalToPhysicalPoint$MH();
    }
    public static @C("BOOL") int LogicalToPhysicalPoint (@C("HWND") Addressable hWnd, @C("LPPOINT") Addressable lpPoint) {
        try {
            return (int)cfapi_h$constants$37.LogicalToPhysicalPoint$MH().invokeExact(hWnd.address(), lpPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PhysicalToLogicalPoint$MH() {
        return cfapi_h$constants$37.PhysicalToLogicalPoint$MH();
    }
    public static @C("BOOL") int PhysicalToLogicalPoint (@C("HWND") Addressable hWnd, @C("LPPOINT") Addressable lpPoint) {
        try {
            return (int)cfapi_h$constants$37.PhysicalToLogicalPoint$MH().invokeExact(hWnd.address(), lpPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogicalToPhysicalPointForPerMonitorDPI$MH() {
        return cfapi_h$constants$37.LogicalToPhysicalPointForPerMonitorDPI$MH();
    }
    public static @C("BOOL") int LogicalToPhysicalPointForPerMonitorDPI (@C("HWND") Addressable hWnd, @C("LPPOINT") Addressable lpPoint) {
        try {
            return (int)cfapi_h$constants$37.LogicalToPhysicalPointForPerMonitorDPI$MH().invokeExact(hWnd.address(), lpPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PhysicalToLogicalPointForPerMonitorDPI$MH() {
        return cfapi_h$constants$37.PhysicalToLogicalPointForPerMonitorDPI$MH();
    }
    public static @C("BOOL") int PhysicalToLogicalPointForPerMonitorDPI (@C("HWND") Addressable hWnd, @C("LPPOINT") Addressable lpPoint) {
        try {
            return (int)cfapi_h$constants$37.PhysicalToLogicalPointForPerMonitorDPI$MH().invokeExact(hWnd.address(), lpPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapWindowPoints$MH() {
        return cfapi_h$constants$37.MapWindowPoints$MH();
    }
    public static @C("int") int MapWindowPoints (@C("HWND") Addressable hWndFrom, @C("HWND") Addressable hWndTo, @C("LPPOINT") Addressable lpPoints, @C("UINT") int cPoints) {
        try {
            return (int)cfapi_h$constants$37.MapWindowPoints$MH().invokeExact(hWndFrom.address(), hWndTo.address(), lpPoints.address(), cPoints);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WindowFromPoint$MH() {
        return cfapi_h$constants$37.WindowFromPoint$MH();
    }
    public static @C("HWND") MemoryAddress WindowFromPoint (@C("POINT") MemorySegment Point) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.WindowFromPoint$MH().invokeExact(Point);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WindowFromPhysicalPoint$MH() {
        return cfapi_h$constants$37.WindowFromPhysicalPoint$MH();
    }
    public static @C("HWND") MemoryAddress WindowFromPhysicalPoint (@C("POINT") MemorySegment Point) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.WindowFromPhysicalPoint$MH().invokeExact(Point);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChildWindowFromPoint$MH() {
        return cfapi_h$constants$37.ChildWindowFromPoint$MH();
    }
    public static @C("HWND") MemoryAddress ChildWindowFromPoint (@C("HWND") Addressable hWndParent, @C("POINT") MemorySegment Point) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.ChildWindowFromPoint$MH().invokeExact(hWndParent.address(), Point);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClipCursor$MH() {
        return cfapi_h$constants$37.ClipCursor$MH();
    }
    public static @C("BOOL") int ClipCursor (@C("const RECT*") Addressable lpRect) {
        try {
            return (int)cfapi_h$constants$37.ClipCursor$MH().invokeExact(lpRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChildWindowFromPointEx$MH() {
        return cfapi_h$constants$37.ChildWindowFromPointEx$MH();
    }
    public static @C("HWND") MemoryAddress ChildWindowFromPointEx (@C("HWND") Addressable hwnd, @C("POINT") MemorySegment pt, @C("UINT") int flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.ChildWindowFromPointEx$MH().invokeExact(hwnd.address(), pt, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSysColor$MH() {
        return cfapi_h$constants$37.GetSysColor$MH();
    }
    public static @C("DWORD") int GetSysColor (@C("int") int nIndex) {
        try {
            return (int)cfapi_h$constants$37.GetSysColor$MH().invokeExact(nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSysColorBrush$MH() {
        return cfapi_h$constants$37.GetSysColorBrush$MH();
    }
    public static @C("HBRUSH") MemoryAddress GetSysColorBrush (@C("int") int nIndex) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.GetSysColorBrush$MH().invokeExact(nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSysColors$MH() {
        return cfapi_h$constants$37.SetSysColors$MH();
    }
    public static @C("BOOL") int SetSysColors (@C("int") int cElements, @C("const INT*") Addressable lpaElements, @C("const COLORREF*") Addressable lpaRgbValues) {
        try {
            return (int)cfapi_h$constants$37.SetSysColors$MH().invokeExact(cElements, lpaElements.address(), lpaRgbValues.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawFocusRect$MH() {
        return cfapi_h$constants$37.DrawFocusRect$MH();
    }
    public static @C("BOOL") int DrawFocusRect (@C("HDC") Addressable hDC, @C("const RECT*") Addressable lprc) {
        try {
            return (int)cfapi_h$constants$37.DrawFocusRect$MH().invokeExact(hDC.address(), lprc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FillRect$MH() {
        return cfapi_h$constants$37.FillRect$MH();
    }
    public static @C("int") int FillRect (@C("HDC") Addressable hDC, @C("const RECT*") Addressable lprc, @C("HBRUSH") Addressable hbr) {
        try {
            return (int)cfapi_h$constants$37.FillRect$MH().invokeExact(hDC.address(), lprc.address(), hbr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FrameRect$MH() {
        return cfapi_h$constants$37.FrameRect$MH();
    }
    public static @C("int") int FrameRect (@C("HDC") Addressable hDC, @C("const RECT*") Addressable lprc, @C("HBRUSH") Addressable hbr) {
        try {
            return (int)cfapi_h$constants$37.FrameRect$MH().invokeExact(hDC.address(), lprc.address(), hbr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InvertRect$MH() {
        return cfapi_h$constants$37.InvertRect$MH();
    }
    public static @C("BOOL") int InvertRect (@C("HDC") Addressable hDC, @C("const RECT*") Addressable lprc) {
        try {
            return (int)cfapi_h$constants$37.InvertRect$MH().invokeExact(hDC.address(), lprc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetRect$MH() {
        return cfapi_h$constants$37.SetRect$MH();
    }
    public static @C("BOOL") int SetRect (@C("LPRECT") Addressable lprc, @C("int") int xLeft, @C("int") int yTop, @C("int") int xRight, @C("int") int yBottom) {
        try {
            return (int)cfapi_h$constants$37.SetRect$MH().invokeExact(lprc.address(), xLeft, yTop, xRight, yBottom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetRectEmpty$MH() {
        return cfapi_h$constants$37.SetRectEmpty$MH();
    }
    public static @C("BOOL") int SetRectEmpty (@C("LPRECT") Addressable lprc) {
        try {
            return (int)cfapi_h$constants$37.SetRectEmpty$MH().invokeExact(lprc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyRect$MH() {
        return cfapi_h$constants$37.CopyRect$MH();
    }
    public static @C("BOOL") int CopyRect (@C("LPRECT") Addressable lprcDst, @C("const RECT*") Addressable lprcSrc) {
        try {
            return (int)cfapi_h$constants$37.CopyRect$MH().invokeExact(lprcDst.address(), lprcSrc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InflateRect$MH() {
        return cfapi_h$constants$37.InflateRect$MH();
    }
    public static @C("BOOL") int InflateRect (@C("LPRECT") Addressable lprc, @C("int") int dx, @C("int") int dy) {
        try {
            return (int)cfapi_h$constants$37.InflateRect$MH().invokeExact(lprc.address(), dx, dy);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IntersectRect$MH() {
        return cfapi_h$constants$37.IntersectRect$MH();
    }
    public static @C("BOOL") int IntersectRect (@C("LPRECT") Addressable lprcDst, @C("const RECT*") Addressable lprcSrc1, @C("const RECT*") Addressable lprcSrc2) {
        try {
            return (int)cfapi_h$constants$37.IntersectRect$MH().invokeExact(lprcDst.address(), lprcSrc1.address(), lprcSrc2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnionRect$MH() {
        return cfapi_h$constants$37.UnionRect$MH();
    }
    public static @C("BOOL") int UnionRect (@C("LPRECT") Addressable lprcDst, @C("const RECT*") Addressable lprcSrc1, @C("const RECT*") Addressable lprcSrc2) {
        try {
            return (int)cfapi_h$constants$37.UnionRect$MH().invokeExact(lprcDst.address(), lprcSrc1.address(), lprcSrc2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SubtractRect$MH() {
        return cfapi_h$constants$37.SubtractRect$MH();
    }
    public static @C("BOOL") int SubtractRect (@C("LPRECT") Addressable lprcDst, @C("const RECT*") Addressable lprcSrc1, @C("const RECT*") Addressable lprcSrc2) {
        try {
            return (int)cfapi_h$constants$37.SubtractRect$MH().invokeExact(lprcDst.address(), lprcSrc1.address(), lprcSrc2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OffsetRect$MH() {
        return cfapi_h$constants$37.OffsetRect$MH();
    }
    public static @C("BOOL") int OffsetRect (@C("LPRECT") Addressable lprc, @C("int") int dx, @C("int") int dy) {
        try {
            return (int)cfapi_h$constants$37.OffsetRect$MH().invokeExact(lprc.address(), dx, dy);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsRectEmpty$MH() {
        return cfapi_h$constants$37.IsRectEmpty$MH();
    }
    public static @C("BOOL") int IsRectEmpty (@C("const RECT*") Addressable lprc) {
        try {
            return (int)cfapi_h$constants$37.IsRectEmpty$MH().invokeExact(lprc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EqualRect$MH() {
        return cfapi_h$constants$37.EqualRect$MH();
    }
    public static @C("BOOL") int EqualRect (@C("const RECT*") Addressable lprc1, @C("const RECT*") Addressable lprc2) {
        try {
            return (int)cfapi_h$constants$37.EqualRect$MH().invokeExact(lprc1.address(), lprc2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtInRect$MH() {
        return cfapi_h$constants$37.PtInRect$MH();
    }
    public static @C("BOOL") int PtInRect (@C("const RECT*") Addressable lprc, @C("POINT") MemorySegment pt) {
        try {
            return (int)cfapi_h$constants$37.PtInRect$MH().invokeExact(lprc.address(), pt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowWord$MH() {
        return cfapi_h$constants$37.GetWindowWord$MH();
    }
    public static @C("WORD") short GetWindowWord (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (short)cfapi_h$constants$37.GetWindowWord$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowWord$MH() {
        return cfapi_h$constants$37.SetWindowWord$MH();
    }
    public static @C("WORD") short SetWindowWord (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("WORD") short wNewWord) {
        try {
            return (short)cfapi_h$constants$37.SetWindowWord$MH().invokeExact(hWnd.address(), nIndex, wNewWord);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowLongA$MH() {
        return cfapi_h$constants$37.GetWindowLongA$MH();
    }
    public static @C("LONG") int GetWindowLongA (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (int)cfapi_h$constants$37.GetWindowLongA$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowLongW$MH() {
        return cfapi_h$constants$37.GetWindowLongW$MH();
    }
    public static @C("LONG") int GetWindowLongW (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (int)cfapi_h$constants$37.GetWindowLongW$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowLongA$MH() {
        return cfapi_h$constants$37.SetWindowLongA$MH();
    }
    public static @C("LONG") int SetWindowLongA (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("LONG") int dwNewLong) {
        try {
            return (int)cfapi_h$constants$37.SetWindowLongA$MH().invokeExact(hWnd.address(), nIndex, dwNewLong);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowLongW$MH() {
        return cfapi_h$constants$37.SetWindowLongW$MH();
    }
    public static @C("LONG") int SetWindowLongW (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("LONG") int dwNewLong) {
        try {
            return (int)cfapi_h$constants$37.SetWindowLongW$MH().invokeExact(hWnd.address(), nIndex, dwNewLong);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowLongPtrA$MH() {
        return cfapi_h$constants$37.GetWindowLongPtrA$MH();
    }
    public static @C("LONG_PTR") long GetWindowLongPtrA (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (long)cfapi_h$constants$37.GetWindowLongPtrA$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowLongPtrW$MH() {
        return cfapi_h$constants$37.GetWindowLongPtrW$MH();
    }
    public static @C("LONG_PTR") long GetWindowLongPtrW (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (long)cfapi_h$constants$37.GetWindowLongPtrW$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowLongPtrA$MH() {
        return cfapi_h$constants$37.SetWindowLongPtrA$MH();
    }
    public static @C("LONG_PTR") long SetWindowLongPtrA (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("LONG_PTR") long dwNewLong) {
        try {
            return (long)cfapi_h$constants$37.SetWindowLongPtrA$MH().invokeExact(hWnd.address(), nIndex, dwNewLong);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowLongPtrW$MH() {
        return cfapi_h$constants$37.SetWindowLongPtrW$MH();
    }
    public static @C("LONG_PTR") long SetWindowLongPtrW (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("LONG_PTR") long dwNewLong) {
        try {
            return (long)cfapi_h$constants$37.SetWindowLongPtrW$MH().invokeExact(hWnd.address(), nIndex, dwNewLong);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassWord$MH() {
        return cfapi_h$constants$37.GetClassWord$MH();
    }
    public static @C("WORD") short GetClassWord (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (short)cfapi_h$constants$37.GetClassWord$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetClassWord$MH() {
        return cfapi_h$constants$37.SetClassWord$MH();
    }
    public static @C("WORD") short SetClassWord (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("WORD") short wNewWord) {
        try {
            return (short)cfapi_h$constants$37.SetClassWord$MH().invokeExact(hWnd.address(), nIndex, wNewWord);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassLongA$MH() {
        return cfapi_h$constants$37.GetClassLongA$MH();
    }
    public static @C("DWORD") int GetClassLongA (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (int)cfapi_h$constants$37.GetClassLongA$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassLongW$MH() {
        return cfapi_h$constants$37.GetClassLongW$MH();
    }
    public static @C("DWORD") int GetClassLongW (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (int)cfapi_h$constants$37.GetClassLongW$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetClassLongA$MH() {
        return cfapi_h$constants$37.SetClassLongA$MH();
    }
    public static @C("DWORD") int SetClassLongA (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("LONG") int dwNewLong) {
        try {
            return (int)cfapi_h$constants$37.SetClassLongA$MH().invokeExact(hWnd.address(), nIndex, dwNewLong);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetClassLongW$MH() {
        return cfapi_h$constants$37.SetClassLongW$MH();
    }
    public static @C("DWORD") int SetClassLongW (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("LONG") int dwNewLong) {
        try {
            return (int)cfapi_h$constants$37.SetClassLongW$MH().invokeExact(hWnd.address(), nIndex, dwNewLong);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassLongPtrA$MH() {
        return cfapi_h$constants$37.GetClassLongPtrA$MH();
    }
    public static @C("ULONG_PTR") long GetClassLongPtrA (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (long)cfapi_h$constants$37.GetClassLongPtrA$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassLongPtrW$MH() {
        return cfapi_h$constants$37.GetClassLongPtrW$MH();
    }
    public static @C("ULONG_PTR") long GetClassLongPtrW (@C("HWND") Addressable hWnd, @C("int") int nIndex) {
        try {
            return (long)cfapi_h$constants$37.GetClassLongPtrW$MH().invokeExact(hWnd.address(), nIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetClassLongPtrA$MH() {
        return cfapi_h$constants$37.SetClassLongPtrA$MH();
    }
    public static @C("ULONG_PTR") long SetClassLongPtrA (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("LONG_PTR") long dwNewLong) {
        try {
            return (long)cfapi_h$constants$37.SetClassLongPtrA$MH().invokeExact(hWnd.address(), nIndex, dwNewLong);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetClassLongPtrW$MH() {
        return cfapi_h$constants$37.SetClassLongPtrW$MH();
    }
    public static @C("ULONG_PTR") long SetClassLongPtrW (@C("HWND") Addressable hWnd, @C("int") int nIndex, @C("LONG_PTR") long dwNewLong) {
        try {
            return (long)cfapi_h$constants$37.SetClassLongPtrW$MH().invokeExact(hWnd.address(), nIndex, dwNewLong);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessDefaultLayout$MH() {
        return cfapi_h$constants$37.GetProcessDefaultLayout$MH();
    }
    public static @C("BOOL") int GetProcessDefaultLayout (@C("DWORD*") Addressable pdwDefaultLayout) {
        try {
            return (int)cfapi_h$constants$37.GetProcessDefaultLayout$MH().invokeExact(pdwDefaultLayout.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessDefaultLayout$MH() {
        return cfapi_h$constants$37.SetProcessDefaultLayout$MH();
    }
    public static @C("BOOL") int SetProcessDefaultLayout (@C("DWORD") int dwDefaultLayout) {
        try {
            return (int)cfapi_h$constants$37.SetProcessDefaultLayout$MH().invokeExact(dwDefaultLayout);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDesktopWindow$MH() {
        return cfapi_h$constants$37.GetDesktopWindow$MH();
    }
    public static @C("HWND") MemoryAddress GetDesktopWindow () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.GetDesktopWindow$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetParent$MH() {
        return cfapi_h$constants$37.GetParent$MH();
    }
    public static @C("HWND") MemoryAddress GetParent (@C("HWND") Addressable hWnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.GetParent$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetParent$MH() {
        return cfapi_h$constants$37.SetParent$MH();
    }
    public static @C("HWND") MemoryAddress SetParent (@C("HWND") Addressable hWndChild, @C("HWND") Addressable hWndNewParent) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.SetParent$MH().invokeExact(hWndChild.address(), hWndNewParent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumChildWindows$MH() {
        return cfapi_h$constants$37.EnumChildWindows$MH();
    }
    public static @C("BOOL") int EnumChildWindows (@C("HWND") Addressable hWndParent, @C("WNDENUMPROC") Addressable lpEnumFunc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$37.EnumChildWindows$MH().invokeExact(hWndParent.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindWindowA$MH() {
        return cfapi_h$constants$37.FindWindowA$MH();
    }
    public static @C("HWND") MemoryAddress FindWindowA (@C("LPCSTR") Addressable lpClassName, @C("LPCSTR") Addressable lpWindowName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.FindWindowA$MH().invokeExact(lpClassName.address(), lpWindowName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindWindowW$MH() {
        return cfapi_h$constants$37.FindWindowW$MH();
    }
    public static @C("HWND") MemoryAddress FindWindowW (@C("LPCWSTR") Addressable lpClassName, @C("LPCWSTR") Addressable lpWindowName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.FindWindowW$MH().invokeExact(lpClassName.address(), lpWindowName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindWindowExA$MH() {
        return cfapi_h$constants$37.FindWindowExA$MH();
    }
    public static @C("HWND") MemoryAddress FindWindowExA (@C("HWND") Addressable hWndParent, @C("HWND") Addressable hWndChildAfter, @C("LPCSTR") Addressable lpszClass, @C("LPCSTR") Addressable lpszWindow) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.FindWindowExA$MH().invokeExact(hWndParent.address(), hWndChildAfter.address(), lpszClass.address(), lpszWindow.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindWindowExW$MH() {
        return cfapi_h$constants$37.FindWindowExW$MH();
    }
    public static @C("HWND") MemoryAddress FindWindowExW (@C("HWND") Addressable hWndParent, @C("HWND") Addressable hWndChildAfter, @C("LPCWSTR") Addressable lpszClass, @C("LPCWSTR") Addressable lpszWindow) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.FindWindowExW$MH().invokeExact(hWndParent.address(), hWndChildAfter.address(), lpszClass.address(), lpszWindow.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetShellWindow$MH() {
        return cfapi_h$constants$37.GetShellWindow$MH();
    }
    public static @C("HWND") MemoryAddress GetShellWindow () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.GetShellWindow$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterShellHookWindow$MH() {
        return cfapi_h$constants$37.RegisterShellHookWindow$MH();
    }
    public static @C("BOOL") int RegisterShellHookWindow (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$37.RegisterShellHookWindow$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeregisterShellHookWindow$MH() {
        return cfapi_h$constants$37.DeregisterShellHookWindow$MH();
    }
    public static @C("BOOL") int DeregisterShellHookWindow (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$37.DeregisterShellHookWindow$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumWindows$MH() {
        return cfapi_h$constants$37.EnumWindows$MH();
    }
    public static @C("BOOL") int EnumWindows (@C("WNDENUMPROC") Addressable lpEnumFunc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$37.EnumWindows$MH().invokeExact(lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumThreadWindows$MH() {
        return cfapi_h$constants$37.EnumThreadWindows$MH();
    }
    public static @C("BOOL") int EnumThreadWindows (@C("DWORD") int dwThreadId, @C("WNDENUMPROC") Addressable lpfn, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$37.EnumThreadWindows$MH().invokeExact(dwThreadId, lpfn.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassNameA$MH() {
        return cfapi_h$constants$37.GetClassNameA$MH();
    }
    public static @C("int") int GetClassNameA (@C("HWND") Addressable hWnd, @C("LPSTR") Addressable lpClassName, @C("int") int nMaxCount) {
        try {
            return (int)cfapi_h$constants$37.GetClassNameA$MH().invokeExact(hWnd.address(), lpClassName.address(), nMaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassNameW$MH() {
        return cfapi_h$constants$37.GetClassNameW$MH();
    }
    public static @C("int") int GetClassNameW (@C("HWND") Addressable hWnd, @C("LPWSTR") Addressable lpClassName, @C("int") int nMaxCount) {
        try {
            return (int)cfapi_h$constants$37.GetClassNameW$MH().invokeExact(hWnd.address(), lpClassName.address(), nMaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTopWindow$MH() {
        return cfapi_h$constants$37.GetTopWindow$MH();
    }
    public static @C("HWND") MemoryAddress GetTopWindow (@C("HWND") Addressable hWnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.GetTopWindow$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowThreadProcessId$MH() {
        return cfapi_h$constants$37.GetWindowThreadProcessId$MH();
    }
    public static @C("DWORD") int GetWindowThreadProcessId (@C("HWND") Addressable hWnd, @C("LPDWORD") Addressable lpdwProcessId) {
        try {
            return (int)cfapi_h$constants$37.GetWindowThreadProcessId$MH().invokeExact(hWnd.address(), lpdwProcessId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsGUIThread$MH() {
        return cfapi_h$constants$37.IsGUIThread$MH();
    }
    public static @C("BOOL") int IsGUIThread (@C("BOOL") int bConvert) {
        try {
            return (int)cfapi_h$constants$37.IsGUIThread$MH().invokeExact(bConvert);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLastActivePopup$MH() {
        return cfapi_h$constants$37.GetLastActivePopup$MH();
    }
    public static @C("HWND") MemoryAddress GetLastActivePopup (@C("HWND") Addressable hWnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.GetLastActivePopup$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindow$MH() {
        return cfapi_h$constants$37.GetWindow$MH();
    }
    public static @C("HWND") MemoryAddress GetWindow (@C("HWND") Addressable hWnd, @C("UINT") int uCmd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.GetWindow$MH().invokeExact(hWnd.address(), uCmd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowsHookA$MH() {
        return cfapi_h$constants$37.SetWindowsHookA$MH();
    }
    public static @C("HHOOK") MemoryAddress SetWindowsHookA (@C("int") int nFilterType, @C("HOOKPROC") Addressable pfnFilterProc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.SetWindowsHookA$MH().invokeExact(nFilterType, pfnFilterProc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowsHookW$MH() {
        return cfapi_h$constants$37.SetWindowsHookW$MH();
    }
    public static @C("HHOOK") MemoryAddress SetWindowsHookW (@C("int") int nFilterType, @C("HOOKPROC") Addressable pfnFilterProc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.SetWindowsHookW$MH().invokeExact(nFilterType, pfnFilterProc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnhookWindowsHook$MH() {
        return cfapi_h$constants$37.UnhookWindowsHook$MH();
    }
    public static @C("BOOL") int UnhookWindowsHook (@C("int") int nCode, @C("HOOKPROC") Addressable pfnFilterProc) {
        try {
            return (int)cfapi_h$constants$37.UnhookWindowsHook$MH().invokeExact(nCode, pfnFilterProc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowsHookExA$MH() {
        return cfapi_h$constants$37.SetWindowsHookExA$MH();
    }
    public static @C("HHOOK") MemoryAddress SetWindowsHookExA (@C("int") int idHook, @C("HOOKPROC") Addressable lpfn, @C("HINSTANCE") Addressable hmod, @C("DWORD") int dwThreadId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.SetWindowsHookExA$MH().invokeExact(idHook, lpfn.address(), hmod.address(), dwThreadId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowsHookExW$MH() {
        return cfapi_h$constants$37.SetWindowsHookExW$MH();
    }
    public static @C("HHOOK") MemoryAddress SetWindowsHookExW (@C("int") int idHook, @C("HOOKPROC") Addressable lpfn, @C("HINSTANCE") Addressable hmod, @C("DWORD") int dwThreadId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.SetWindowsHookExW$MH().invokeExact(idHook, lpfn.address(), hmod.address(), dwThreadId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnhookWindowsHookEx$MH() {
        return cfapi_h$constants$37.UnhookWindowsHookEx$MH();
    }
    public static @C("BOOL") int UnhookWindowsHookEx (@C("HHOOK") Addressable hhk) {
        try {
            return (int)cfapi_h$constants$37.UnhookWindowsHookEx$MH().invokeExact(hhk.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallNextHookEx$MH() {
        return cfapi_h$constants$37.CallNextHookEx$MH();
    }
    public static @C("LRESULT") long CallNextHookEx (@C("HHOOK") Addressable hhk, @C("int") int nCode, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$37.CallNextHookEx$MH().invokeExact(hhk.address(), nCode, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckMenuRadioItem$MH() {
        return cfapi_h$constants$37.CheckMenuRadioItem$MH();
    }
    public static @C("BOOL") int CheckMenuRadioItem (@C("HMENU") Addressable hmenu, @C("UINT") int first, @C("UINT") int last, @C("UINT") int check, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$37.CheckMenuRadioItem$MH().invokeExact(hmenu.address(), first, last, check, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadBitmapA$MH() {
        return cfapi_h$constants$37.LoadBitmapA$MH();
    }
    public static @C("HBITMAP") MemoryAddress LoadBitmapA (@C("HINSTANCE") Addressable hInstance, @C("LPCSTR") Addressable lpBitmapName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadBitmapA$MH().invokeExact(hInstance.address(), lpBitmapName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadBitmapW$MH() {
        return cfapi_h$constants$37.LoadBitmapW$MH();
    }
    public static @C("HBITMAP") MemoryAddress LoadBitmapW (@C("HINSTANCE") Addressable hInstance, @C("LPCWSTR") Addressable lpBitmapName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadBitmapW$MH().invokeExact(hInstance.address(), lpBitmapName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadCursorA$MH() {
        return cfapi_h$constants$37.LoadCursorA$MH();
    }
    public static @C("HCURSOR") MemoryAddress LoadCursorA (@C("HINSTANCE") Addressable hInstance, @C("LPCSTR") Addressable lpCursorName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadCursorA$MH().invokeExact(hInstance.address(), lpCursorName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadCursorW$MH() {
        return cfapi_h$constants$37.LoadCursorW$MH();
    }
    public static @C("HCURSOR") MemoryAddress LoadCursorW (@C("HINSTANCE") Addressable hInstance, @C("LPCWSTR") Addressable lpCursorName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadCursorW$MH().invokeExact(hInstance.address(), lpCursorName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadCursorFromFileA$MH() {
        return cfapi_h$constants$37.LoadCursorFromFileA$MH();
    }
    public static @C("HCURSOR") MemoryAddress LoadCursorFromFileA (@C("LPCSTR") Addressable lpFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadCursorFromFileA$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadCursorFromFileW$MH() {
        return cfapi_h$constants$37.LoadCursorFromFileW$MH();
    }
    public static @C("HCURSOR") MemoryAddress LoadCursorFromFileW (@C("LPCWSTR") Addressable lpFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadCursorFromFileW$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateCursor$MH() {
        return cfapi_h$constants$37.CreateCursor$MH();
    }
    public static @C("HCURSOR") MemoryAddress CreateCursor (@C("HINSTANCE") Addressable hInst, @C("int") int xHotSpot, @C("int") int yHotSpot, @C("int") int nWidth, @C("int") int nHeight, @C("void*") Addressable pvANDPlane, @C("void*") Addressable pvXORPlane) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.CreateCursor$MH().invokeExact(hInst.address(), xHotSpot, yHotSpot, nWidth, nHeight, pvANDPlane.address(), pvXORPlane.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroyCursor$MH() {
        return cfapi_h$constants$37.DestroyCursor$MH();
    }
    public static @C("BOOL") int DestroyCursor (@C("HCURSOR") Addressable hCursor) {
        try {
            return (int)cfapi_h$constants$37.DestroyCursor$MH().invokeExact(hCursor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSystemCursor$MH() {
        return cfapi_h$constants$37.SetSystemCursor$MH();
    }
    public static @C("BOOL") int SetSystemCursor (@C("HCURSOR") Addressable hcur, @C("DWORD") int id) {
        try {
            return (int)cfapi_h$constants$37.SetSystemCursor$MH().invokeExact(hcur.address(), id);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadIconA$MH() {
        return cfapi_h$constants$37.LoadIconA$MH();
    }
    public static @C("HICON") MemoryAddress LoadIconA (@C("HINSTANCE") Addressable hInstance, @C("LPCSTR") Addressable lpIconName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadIconA$MH().invokeExact(hInstance.address(), lpIconName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadIconW$MH() {
        return cfapi_h$constants$37.LoadIconW$MH();
    }
    public static @C("HICON") MemoryAddress LoadIconW (@C("HINSTANCE") Addressable hInstance, @C("LPCWSTR") Addressable lpIconName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadIconW$MH().invokeExact(hInstance.address(), lpIconName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrivateExtractIconsA$MH() {
        return cfapi_h$constants$37.PrivateExtractIconsA$MH();
    }
    public static @C("UINT") int PrivateExtractIconsA (@C("LPCSTR") Addressable szFileName, @C("int") int nIconIndex, @C("int") int cxIcon, @C("int") int cyIcon, @C("HICON*") Addressable phicon, @C("UINT*") Addressable piconid, @C("UINT") int nIcons, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$37.PrivateExtractIconsA$MH().invokeExact(szFileName.address(), nIconIndex, cxIcon, cyIcon, phicon.address(), piconid.address(), nIcons, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrivateExtractIconsW$MH() {
        return cfapi_h$constants$37.PrivateExtractIconsW$MH();
    }
    public static @C("UINT") int PrivateExtractIconsW (@C("LPCWSTR") Addressable szFileName, @C("int") int nIconIndex, @C("int") int cxIcon, @C("int") int cyIcon, @C("HICON*") Addressable phicon, @C("UINT*") Addressable piconid, @C("UINT") int nIcons, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$37.PrivateExtractIconsW$MH().invokeExact(szFileName.address(), nIconIndex, cxIcon, cyIcon, phicon.address(), piconid.address(), nIcons, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateIcon$MH() {
        return cfapi_h$constants$37.CreateIcon$MH();
    }
    public static @C("HICON") MemoryAddress CreateIcon (@C("HINSTANCE") Addressable hInstance, @C("int") int nWidth, @C("int") int nHeight, @C("BYTE") byte cPlanes, @C("BYTE") byte cBitsPixel, @C("const BYTE*") Addressable lpbANDbits, @C("const BYTE*") Addressable lpbXORbits) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.CreateIcon$MH().invokeExact(hInstance.address(), nWidth, nHeight, cPlanes, cBitsPixel, lpbANDbits.address(), lpbXORbits.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroyIcon$MH() {
        return cfapi_h$constants$37.DestroyIcon$MH();
    }
    public static @C("BOOL") int DestroyIcon (@C("HICON") Addressable hIcon) {
        try {
            return (int)cfapi_h$constants$37.DestroyIcon$MH().invokeExact(hIcon.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupIconIdFromDirectory$MH() {
        return cfapi_h$constants$37.LookupIconIdFromDirectory$MH();
    }
    public static @C("int") int LookupIconIdFromDirectory (@C("PBYTE") Addressable presbits, @C("BOOL") int fIcon) {
        try {
            return (int)cfapi_h$constants$37.LookupIconIdFromDirectory$MH().invokeExact(presbits.address(), fIcon);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupIconIdFromDirectoryEx$MH() {
        return cfapi_h$constants$37.LookupIconIdFromDirectoryEx$MH();
    }
    public static @C("int") int LookupIconIdFromDirectoryEx (@C("PBYTE") Addressable presbits, @C("BOOL") int fIcon, @C("int") int cxDesired, @C("int") int cyDesired, @C("UINT") int Flags) {
        try {
            return (int)cfapi_h$constants$37.LookupIconIdFromDirectoryEx$MH().invokeExact(presbits.address(), fIcon, cxDesired, cyDesired, Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateIconFromResource$MH() {
        return cfapi_h$constants$37.CreateIconFromResource$MH();
    }
    public static @C("HICON") MemoryAddress CreateIconFromResource (@C("PBYTE") Addressable presbits, @C("DWORD") int dwResSize, @C("BOOL") int fIcon, @C("DWORD") int dwVer) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.CreateIconFromResource$MH().invokeExact(presbits.address(), dwResSize, fIcon, dwVer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateIconFromResourceEx$MH() {
        return cfapi_h$constants$37.CreateIconFromResourceEx$MH();
    }
    public static @C("HICON") MemoryAddress CreateIconFromResourceEx (@C("PBYTE") Addressable presbits, @C("DWORD") int dwResSize, @C("BOOL") int fIcon, @C("DWORD") int dwVer, @C("int") int cxDesired, @C("int") int cyDesired, @C("UINT") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.CreateIconFromResourceEx$MH().invokeExact(presbits.address(), dwResSize, fIcon, dwVer, cxDesired, cyDesired, Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadImageA$MH() {
        return cfapi_h$constants$37.LoadImageA$MH();
    }
    public static @C("HANDLE") MemoryAddress LoadImageA (@C("HINSTANCE") Addressable hInst, @C("LPCSTR") Addressable name, @C("UINT") int type, @C("int") int cx, @C("int") int cy, @C("UINT") int fuLoad) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadImageA$MH().invokeExact(hInst.address(), name.address(), type, cx, cy, fuLoad);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadImageW$MH() {
        return cfapi_h$constants$37.LoadImageW$MH();
    }
    public static @C("HANDLE") MemoryAddress LoadImageW (@C("HINSTANCE") Addressable hInst, @C("LPCWSTR") Addressable name, @C("UINT") int type, @C("int") int cx, @C("int") int cy, @C("UINT") int fuLoad) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.LoadImageW$MH().invokeExact(hInst.address(), name.address(), type, cx, cy, fuLoad);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyImage$MH() {
        return cfapi_h$constants$37.CopyImage$MH();
    }
    public static @C("HANDLE") MemoryAddress CopyImage (@C("HANDLE") Addressable h, @C("UINT") int type, @C("int") int cx, @C("int") int cy, @C("UINT") int flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.CopyImage$MH().invokeExact(h.address(), type, cx, cy, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawIconEx$MH() {
        return cfapi_h$constants$37.DrawIconEx$MH();
    }
    public static @C("BOOL") int DrawIconEx (@C("HDC") Addressable hdc, @C("int") int xLeft, @C("int") int yTop, @C("HICON") Addressable hIcon, @C("int") int cxWidth, @C("int") int cyWidth, @C("UINT") int istepIfAniCur, @C("HBRUSH") Addressable hbrFlickerFreeDraw, @C("UINT") int diFlags) {
        try {
            return (int)cfapi_h$constants$37.DrawIconEx$MH().invokeExact(hdc.address(), xLeft, yTop, hIcon.address(), cxWidth, cyWidth, istepIfAniCur, hbrFlickerFreeDraw.address(), diFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateIconIndirect$MH() {
        return cfapi_h$constants$37.CreateIconIndirect$MH();
    }
    public static @C("HICON") MemoryAddress CreateIconIndirect (@C("PICONINFO") Addressable piconinfo) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.CreateIconIndirect$MH().invokeExact(piconinfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyIcon$MH() {
        return cfapi_h$constants$37.CopyIcon$MH();
    }
    public static @C("HICON") MemoryAddress CopyIcon (@C("HICON") Addressable hIcon) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.CopyIcon$MH().invokeExact(hIcon.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetIconInfo$MH() {
        return cfapi_h$constants$37.GetIconInfo$MH();
    }
    public static @C("BOOL") int GetIconInfo (@C("HICON") Addressable hIcon, @C("PICONINFO") Addressable piconinfo) {
        try {
            return (int)cfapi_h$constants$37.GetIconInfo$MH().invokeExact(hIcon.address(), piconinfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetIconInfoExA$MH() {
        return cfapi_h$constants$37.GetIconInfoExA$MH();
    }
    public static @C("BOOL") int GetIconInfoExA (@C("HICON") Addressable hicon, @C("PICONINFOEXA") Addressable piconinfo) {
        try {
            return (int)cfapi_h$constants$37.GetIconInfoExA$MH().invokeExact(hicon.address(), piconinfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetIconInfoExW$MH() {
        return cfapi_h$constants$37.GetIconInfoExW$MH();
    }
    public static @C("BOOL") int GetIconInfoExW (@C("HICON") Addressable hicon, @C("PICONINFOEXW") Addressable piconinfo) {
        try {
            return (int)cfapi_h$constants$37.GetIconInfoExW$MH().invokeExact(hicon.address(), piconinfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT() {
        return cfapi_h$constants$37.EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT();
    }
    public static @C("int") int EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS() {
        return cfapi_h$constants$37.EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS();
    }
    public static  MethodHandle IsDialogMessageA$MH() {
        return cfapi_h$constants$37.IsDialogMessageA$MH();
    }
    public static @C("BOOL") int IsDialogMessageA (@C("HWND") Addressable hDlg, @C("LPMSG") Addressable lpMsg) {
        try {
            return (int)cfapi_h$constants$37.IsDialogMessageA$MH().invokeExact(hDlg.address(), lpMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsDialogMessageW$MH() {
        return cfapi_h$constants$37.IsDialogMessageW$MH();
    }
    public static @C("BOOL") int IsDialogMessageW (@C("HWND") Addressable hDlg, @C("LPMSG") Addressable lpMsg) {
        try {
            return (int)cfapi_h$constants$37.IsDialogMessageW$MH().invokeExact(hDlg.address(), lpMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapDialogRect$MH() {
        return cfapi_h$constants$37.MapDialogRect$MH();
    }
    public static @C("BOOL") int MapDialogRect (@C("HWND") Addressable hDlg, @C("LPRECT") Addressable lpRect) {
        try {
            return (int)cfapi_h$constants$37.MapDialogRect$MH().invokeExact(hDlg.address(), lpRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DlgDirListA$MH() {
        return cfapi_h$constants$37.DlgDirListA$MH();
    }
    public static @C("int") int DlgDirListA (@C("HWND") Addressable hDlg, @C("LPSTR") Addressable lpPathSpec, @C("int") int nIDListBox, @C("int") int nIDStaticPath, @C("UINT") int uFileType) {
        try {
            return (int)cfapi_h$constants$37.DlgDirListA$MH().invokeExact(hDlg.address(), lpPathSpec.address(), nIDListBox, nIDStaticPath, uFileType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DlgDirListW$MH() {
        return cfapi_h$constants$37.DlgDirListW$MH();
    }
    public static @C("int") int DlgDirListW (@C("HWND") Addressable hDlg, @C("LPWSTR") Addressable lpPathSpec, @C("int") int nIDListBox, @C("int") int nIDStaticPath, @C("UINT") int uFileType) {
        try {
            return (int)cfapi_h$constants$37.DlgDirListW$MH().invokeExact(hDlg.address(), lpPathSpec.address(), nIDListBox, nIDStaticPath, uFileType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DlgDirSelectExA$MH() {
        return cfapi_h$constants$37.DlgDirSelectExA$MH();
    }
    public static @C("BOOL") int DlgDirSelectExA (@C("HWND") Addressable hwndDlg, @C("LPSTR") Addressable lpString, @C("int") int chCount, @C("int") int idListBox) {
        try {
            return (int)cfapi_h$constants$37.DlgDirSelectExA$MH().invokeExact(hwndDlg.address(), lpString.address(), chCount, idListBox);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DlgDirSelectExW$MH() {
        return cfapi_h$constants$37.DlgDirSelectExW$MH();
    }
    public static @C("BOOL") int DlgDirSelectExW (@C("HWND") Addressable hwndDlg, @C("LPWSTR") Addressable lpString, @C("int") int chCount, @C("int") int idListBox) {
        try {
            return (int)cfapi_h$constants$37.DlgDirSelectExW$MH().invokeExact(hwndDlg.address(), lpString.address(), chCount, idListBox);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DlgDirListComboBoxA$MH() {
        return cfapi_h$constants$37.DlgDirListComboBoxA$MH();
    }
    public static @C("int") int DlgDirListComboBoxA (@C("HWND") Addressable hDlg, @C("LPSTR") Addressable lpPathSpec, @C("int") int nIDComboBox, @C("int") int nIDStaticPath, @C("UINT") int uFiletype) {
        try {
            return (int)cfapi_h$constants$37.DlgDirListComboBoxA$MH().invokeExact(hDlg.address(), lpPathSpec.address(), nIDComboBox, nIDStaticPath, uFiletype);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DlgDirListComboBoxW$MH() {
        return cfapi_h$constants$37.DlgDirListComboBoxW$MH();
    }
    public static @C("int") int DlgDirListComboBoxW (@C("HWND") Addressable hDlg, @C("LPWSTR") Addressable lpPathSpec, @C("int") int nIDComboBox, @C("int") int nIDStaticPath, @C("UINT") int uFiletype) {
        try {
            return (int)cfapi_h$constants$37.DlgDirListComboBoxW$MH().invokeExact(hDlg.address(), lpPathSpec.address(), nIDComboBox, nIDStaticPath, uFiletype);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DlgDirSelectComboBoxExA$MH() {
        return cfapi_h$constants$37.DlgDirSelectComboBoxExA$MH();
    }
    public static @C("BOOL") int DlgDirSelectComboBoxExA (@C("HWND") Addressable hwndDlg, @C("LPSTR") Addressable lpString, @C("int") int cchOut, @C("int") int idComboBox) {
        try {
            return (int)cfapi_h$constants$37.DlgDirSelectComboBoxExA$MH().invokeExact(hwndDlg.address(), lpString.address(), cchOut, idComboBox);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DlgDirSelectComboBoxExW$MH() {
        return cfapi_h$constants$37.DlgDirSelectComboBoxExW$MH();
    }
    public static @C("BOOL") int DlgDirSelectComboBoxExW (@C("HWND") Addressable hwndDlg, @C("LPWSTR") Addressable lpString, @C("int") int cchOut, @C("int") int idComboBox) {
        try {
            return (int)cfapi_h$constants$37.DlgDirSelectComboBoxExW$MH().invokeExact(hwndDlg.address(), lpString.address(), cchOut, idComboBox);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetScrollInfo$MH() {
        return cfapi_h$constants$37.SetScrollInfo$MH();
    }
    public static @C("int") int SetScrollInfo (@C("HWND") Addressable hwnd, @C("int") int nBar, @C("LPCSCROLLINFO") Addressable lpsi, @C("BOOL") int redraw) {
        try {
            return (int)cfapi_h$constants$37.SetScrollInfo$MH().invokeExact(hwnd.address(), nBar, lpsi.address(), redraw);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetScrollInfo$MH() {
        return cfapi_h$constants$37.GetScrollInfo$MH();
    }
    public static @C("BOOL") int GetScrollInfo (@C("HWND") Addressable hwnd, @C("int") int nBar, @C("LPSCROLLINFO") Addressable lpsi) {
        try {
            return (int)cfapi_h$constants$37.GetScrollInfo$MH().invokeExact(hwnd.address(), nBar, lpsi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefFrameProcA$MH() {
        return cfapi_h$constants$37.DefFrameProcA$MH();
    }
    public static @C("LRESULT") long DefFrameProcA (@C("HWND") Addressable hWnd, @C("HWND") Addressable hWndMDIClient, @C("UINT") int uMsg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$37.DefFrameProcA$MH().invokeExact(hWnd.address(), hWndMDIClient.address(), uMsg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefFrameProcW$MH() {
        return cfapi_h$constants$37.DefFrameProcW$MH();
    }
    public static @C("LRESULT") long DefFrameProcW (@C("HWND") Addressable hWnd, @C("HWND") Addressable hWndMDIClient, @C("UINT") int uMsg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$37.DefFrameProcW$MH().invokeExact(hWnd.address(), hWndMDIClient.address(), uMsg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefMDIChildProcA$MH() {
        return cfapi_h$constants$37.DefMDIChildProcA$MH();
    }
    public static @C("LRESULT") long DefMDIChildProcA (@C("HWND") Addressable hWnd, @C("UINT") int uMsg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$37.DefMDIChildProcA$MH().invokeExact(hWnd.address(), uMsg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefMDIChildProcW$MH() {
        return cfapi_h$constants$37.DefMDIChildProcW$MH();
    }
    public static @C("LRESULT") long DefMDIChildProcW (@C("HWND") Addressable hWnd, @C("UINT") int uMsg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$37.DefMDIChildProcW$MH().invokeExact(hWnd.address(), uMsg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TranslateMDISysAccel$MH() {
        return cfapi_h$constants$37.TranslateMDISysAccel$MH();
    }
    public static @C("BOOL") int TranslateMDISysAccel (@C("HWND") Addressable hWndClient, @C("LPMSG") Addressable lpMsg) {
        try {
            return (int)cfapi_h$constants$37.TranslateMDISysAccel$MH().invokeExact(hWndClient.address(), lpMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ArrangeIconicWindows$MH() {
        return cfapi_h$constants$37.ArrangeIconicWindows$MH();
    }
    public static @C("UINT") int ArrangeIconicWindows (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$37.ArrangeIconicWindows$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMDIWindowA$MH() {
        return cfapi_h$constants$37.CreateMDIWindowA$MH();
    }
    public static @C("HWND") MemoryAddress CreateMDIWindowA (@C("LPCSTR") Addressable lpClassName, @C("LPCSTR") Addressable lpWindowName, @C("DWORD") int dwStyle, @C("int") int X, @C("int") int Y, @C("int") int nWidth, @C("int") int nHeight, @C("HWND") Addressable hWndParent, @C("HINSTANCE") Addressable hInstance, @C("LPARAM") long lParam) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.CreateMDIWindowA$MH().invokeExact(lpClassName.address(), lpWindowName.address(), dwStyle, X, Y, nWidth, nHeight, hWndParent.address(), hInstance.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMDIWindowW$MH() {
        return cfapi_h$constants$37.CreateMDIWindowW$MH();
    }
    public static @C("HWND") MemoryAddress CreateMDIWindowW (@C("LPCWSTR") Addressable lpClassName, @C("LPCWSTR") Addressable lpWindowName, @C("DWORD") int dwStyle, @C("int") int X, @C("int") int Y, @C("int") int nWidth, @C("int") int nHeight, @C("HWND") Addressable hWndParent, @C("HINSTANCE") Addressable hInstance, @C("LPARAM") long lParam) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$37.CreateMDIWindowW$MH().invokeExact(lpClassName.address(), lpWindowName.address(), dwStyle, X, Y, nWidth, nHeight, hWndParent.address(), hInstance.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TileWindows$MH() {
        return cfapi_h$constants$37.TileWindows$MH();
    }
    public static @C("WORD") short TileWindows (@C("HWND") Addressable hwndParent, @C("UINT") int wHow, @C("const RECT*") Addressable lpRect, @C("UINT") int cKids, @C("const HWND*") Addressable lpKids) {
        try {
            return (short)cfapi_h$constants$37.TileWindows$MH().invokeExact(hwndParent.address(), wHow, lpRect.address(), cKids, lpKids.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CascadeWindows$MH() {
        return cfapi_h$constants$37.CascadeWindows$MH();
    }
    public static @C("WORD") short CascadeWindows (@C("HWND") Addressable hwndParent, @C("UINT") int wHow, @C("const RECT*") Addressable lpRect, @C("UINT") int cKids, @C("const HWND*") Addressable lpKids) {
        try {
            return (short)cfapi_h$constants$37.CascadeWindows$MH().invokeExact(hwndParent.address(), wHow, lpRect.address(), cKids, lpKids.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WinHelpA$MH() {
        return cfapi_h$constants$37.WinHelpA$MH();
    }
    public static @C("BOOL") int WinHelpA (@C("HWND") Addressable hWndMain, @C("LPCSTR") Addressable lpszHelp, @C("UINT") int uCommand, @C("ULONG_PTR") long dwData) {
        try {
            return (int)cfapi_h$constants$37.WinHelpA$MH().invokeExact(hWndMain.address(), lpszHelp.address(), uCommand, dwData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WinHelpW$MH() {
        return cfapi_h$constants$37.WinHelpW$MH();
    }
    public static @C("BOOL") int WinHelpW (@C("HWND") Addressable hWndMain, @C("LPCWSTR") Addressable lpszHelp, @C("UINT") int uCommand, @C("ULONG_PTR") long dwData) {
        try {
            return (int)cfapi_h$constants$37.WinHelpW$MH().invokeExact(hWndMain.address(), lpszHelp.address(), uCommand, dwData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGuiResources$MH() {
        return cfapi_h$constants$37.GetGuiResources$MH();
    }
    public static @C("DWORD") int GetGuiResources (@C("HANDLE") Addressable hProcess, @C("DWORD") int uiFlags) {
        try {
            return (int)cfapi_h$constants$37.GetGuiResources$MH().invokeExact(hProcess.address(), uiFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int HANDEDNESS_LEFT() {
        return cfapi_h$constants$37.HANDEDNESS_LEFT();
    }
    public static @C("int") int HANDEDNESS_RIGHT() {
        return cfapi_h$constants$37.HANDEDNESS_RIGHT();
    }
    public static  MethodHandle ChangeDisplaySettingsA$MH() {
        return cfapi_h$constants$38.ChangeDisplaySettingsA$MH();
    }
    public static @C("LONG") int ChangeDisplaySettingsA (@C("DEVMODEA*") Addressable lpDevMode, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$38.ChangeDisplaySettingsA$MH().invokeExact(lpDevMode.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChangeDisplaySettingsW$MH() {
        return cfapi_h$constants$38.ChangeDisplaySettingsW$MH();
    }
    public static @C("LONG") int ChangeDisplaySettingsW (@C("DEVMODEW*") Addressable lpDevMode, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$38.ChangeDisplaySettingsW$MH().invokeExact(lpDevMode.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChangeDisplaySettingsExA$MH() {
        return cfapi_h$constants$38.ChangeDisplaySettingsExA$MH();
    }
    public static @C("LONG") int ChangeDisplaySettingsExA (@C("LPCSTR") Addressable lpszDeviceName, @C("DEVMODEA*") Addressable lpDevMode, @C("HWND") Addressable hwnd, @C("DWORD") int dwflags, @C("LPVOID") Addressable lParam) {
        try {
            return (int)cfapi_h$constants$38.ChangeDisplaySettingsExA$MH().invokeExact(lpszDeviceName.address(), lpDevMode.address(), hwnd.address(), dwflags, lParam.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChangeDisplaySettingsExW$MH() {
        return cfapi_h$constants$38.ChangeDisplaySettingsExW$MH();
    }
    public static @C("LONG") int ChangeDisplaySettingsExW (@C("LPCWSTR") Addressable lpszDeviceName, @C("DEVMODEW*") Addressable lpDevMode, @C("HWND") Addressable hwnd, @C("DWORD") int dwflags, @C("LPVOID") Addressable lParam) {
        try {
            return (int)cfapi_h$constants$38.ChangeDisplaySettingsExW$MH().invokeExact(lpszDeviceName.address(), lpDevMode.address(), hwnd.address(), dwflags, lParam.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDisplaySettingsA$MH() {
        return cfapi_h$constants$38.EnumDisplaySettingsA$MH();
    }
    public static @C("BOOL") int EnumDisplaySettingsA (@C("LPCSTR") Addressable lpszDeviceName, @C("DWORD") int iModeNum, @C("DEVMODEA*") Addressable lpDevMode) {
        try {
            return (int)cfapi_h$constants$38.EnumDisplaySettingsA$MH().invokeExact(lpszDeviceName.address(), iModeNum, lpDevMode.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDisplaySettingsW$MH() {
        return cfapi_h$constants$38.EnumDisplaySettingsW$MH();
    }
    public static @C("BOOL") int EnumDisplaySettingsW (@C("LPCWSTR") Addressable lpszDeviceName, @C("DWORD") int iModeNum, @C("DEVMODEW*") Addressable lpDevMode) {
        try {
            return (int)cfapi_h$constants$38.EnumDisplaySettingsW$MH().invokeExact(lpszDeviceName.address(), iModeNum, lpDevMode.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDisplaySettingsExA$MH() {
        return cfapi_h$constants$38.EnumDisplaySettingsExA$MH();
    }
    public static @C("BOOL") int EnumDisplaySettingsExA (@C("LPCSTR") Addressable lpszDeviceName, @C("DWORD") int iModeNum, @C("DEVMODEA*") Addressable lpDevMode, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$38.EnumDisplaySettingsExA$MH().invokeExact(lpszDeviceName.address(), iModeNum, lpDevMode.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDisplaySettingsExW$MH() {
        return cfapi_h$constants$38.EnumDisplaySettingsExW$MH();
    }
    public static @C("BOOL") int EnumDisplaySettingsExW (@C("LPCWSTR") Addressable lpszDeviceName, @C("DWORD") int iModeNum, @C("DEVMODEW*") Addressable lpDevMode, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$38.EnumDisplaySettingsExW$MH().invokeExact(lpszDeviceName.address(), iModeNum, lpDevMode.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDisplayDevicesA$MH() {
        return cfapi_h$constants$38.EnumDisplayDevicesA$MH();
    }
    public static @C("BOOL") int EnumDisplayDevicesA (@C("LPCSTR") Addressable lpDevice, @C("DWORD") int iDevNum, @C("PDISPLAY_DEVICEA") Addressable lpDisplayDevice, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$38.EnumDisplayDevicesA$MH().invokeExact(lpDevice.address(), iDevNum, lpDisplayDevice.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDisplayDevicesW$MH() {
        return cfapi_h$constants$38.EnumDisplayDevicesW$MH();
    }
    public static @C("BOOL") int EnumDisplayDevicesW (@C("LPCWSTR") Addressable lpDevice, @C("DWORD") int iDevNum, @C("PDISPLAY_DEVICEW") Addressable lpDisplayDevice, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$38.EnumDisplayDevicesW$MH().invokeExact(lpDevice.address(), iDevNum, lpDisplayDevice.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDisplayConfigBufferSizes$MH() {
        return cfapi_h$constants$38.GetDisplayConfigBufferSizes$MH();
    }
    public static @C("LONG") int GetDisplayConfigBufferSizes (@C("UINT32") int flags, @C("UINT32*") Addressable numPathArrayElements, @C("UINT32*") Addressable numModeInfoArrayElements) {
        try {
            return (int)cfapi_h$constants$38.GetDisplayConfigBufferSizes$MH().invokeExact(flags, numPathArrayElements.address(), numModeInfoArrayElements.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDisplayConfig$MH() {
        return cfapi_h$constants$38.SetDisplayConfig$MH();
    }
    public static @C("LONG") int SetDisplayConfig (@C("UINT32") int numPathArrayElements, @C("DISPLAYCONFIG_PATH_INFO*") Addressable pathArray, @C("UINT32") int numModeInfoArrayElements, @C("DISPLAYCONFIG_MODE_INFO*") Addressable modeInfoArray, @C("UINT32") int flags) {
        try {
            return (int)cfapi_h$constants$38.SetDisplayConfig$MH().invokeExact(numPathArrayElements, pathArray.address(), numModeInfoArrayElements, modeInfoArray.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryDisplayConfig$MH() {
        return cfapi_h$constants$38.QueryDisplayConfig$MH();
    }
    public static @C("LONG") int QueryDisplayConfig (@C("UINT32") int flags, @C("UINT32*") Addressable numPathArrayElements, @C("DISPLAYCONFIG_PATH_INFO*") Addressable pathArray, @C("UINT32*") Addressable numModeInfoArrayElements, @C("DISPLAYCONFIG_MODE_INFO*") Addressable modeInfoArray, @C("DISPLAYCONFIG_TOPOLOGY_ID*") Addressable currentTopologyId) {
        try {
            return (int)cfapi_h$constants$38.QueryDisplayConfig$MH().invokeExact(flags, numPathArrayElements.address(), pathArray.address(), numModeInfoArrayElements.address(), modeInfoArray.address(), currentTopologyId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DisplayConfigGetDeviceInfo$MH() {
        return cfapi_h$constants$38.DisplayConfigGetDeviceInfo$MH();
    }
    public static @C("LONG") int DisplayConfigGetDeviceInfo (@C("DISPLAYCONFIG_DEVICE_INFO_HEADER*") Addressable requestPacket) {
        try {
            return (int)cfapi_h$constants$38.DisplayConfigGetDeviceInfo$MH().invokeExact(requestPacket.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DisplayConfigSetDeviceInfo$MH() {
        return cfapi_h$constants$38.DisplayConfigSetDeviceInfo$MH();
    }
    public static @C("LONG") int DisplayConfigSetDeviceInfo (@C("DISPLAYCONFIG_DEVICE_INFO_HEADER*") Addressable setPacket) {
        try {
            return (int)cfapi_h$constants$38.DisplayConfigSetDeviceInfo$MH().invokeExact(setPacket.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SystemParametersInfoA$MH() {
        return cfapi_h$constants$38.SystemParametersInfoA$MH();
    }
    public static @C("BOOL") int SystemParametersInfoA (@C("UINT") int uiAction, @C("UINT") int uiParam, @C("PVOID") Addressable pvParam, @C("UINT") int fWinIni) {
        try {
            return (int)cfapi_h$constants$38.SystemParametersInfoA$MH().invokeExact(uiAction, uiParam, pvParam.address(), fWinIni);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SystemParametersInfoW$MH() {
        return cfapi_h$constants$38.SystemParametersInfoW$MH();
    }
    public static @C("BOOL") int SystemParametersInfoW (@C("UINT") int uiAction, @C("UINT") int uiParam, @C("PVOID") Addressable pvParam, @C("UINT") int fWinIni) {
        try {
            return (int)cfapi_h$constants$38.SystemParametersInfoW$MH().invokeExact(uiAction, uiParam, pvParam.address(), fWinIni);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SystemParametersInfoForDpi$MH() {
        return cfapi_h$constants$38.SystemParametersInfoForDpi$MH();
    }
    public static @C("BOOL") int SystemParametersInfoForDpi (@C("UINT") int uiAction, @C("UINT") int uiParam, @C("PVOID") Addressable pvParam, @C("UINT") int fWinIni, @C("UINT") int dpi) {
        try {
            return (int)cfapi_h$constants$38.SystemParametersInfoForDpi$MH().invokeExact(uiAction, uiParam, pvParam.address(), fWinIni, dpi);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SoundSentry$MH() {
        return cfapi_h$constants$38.SoundSentry$MH();
    }
    public static @C("BOOL") int SoundSentry () {
        try {
            return (int)cfapi_h$constants$38.SoundSentry$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDebugErrorLevel$MH() {
        return cfapi_h$constants$38.SetDebugErrorLevel$MH();
    }
    public static void SetDebugErrorLevel (@C("DWORD") int dwLevel) {
        try {
            cfapi_h$constants$38.SetDebugErrorLevel$MH().invokeExact(dwLevel);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetLastErrorEx$MH() {
        return cfapi_h$constants$38.SetLastErrorEx$MH();
    }
    public static void SetLastErrorEx (@C("DWORD") int dwErrCode, @C("DWORD") int dwType) {
        try {
            cfapi_h$constants$38.SetLastErrorEx$MH().invokeExact(dwErrCode, dwType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InternalGetWindowText$MH() {
        return cfapi_h$constants$38.InternalGetWindowText$MH();
    }
    public static @C("int") int InternalGetWindowText (@C("HWND") Addressable hWnd, @C("LPWSTR") Addressable pString, @C("int") int cchMaxCount) {
        try {
            return (int)cfapi_h$constants$38.InternalGetWindowText$MH().invokeExact(hWnd.address(), pString.address(), cchMaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelShutdown$MH() {
        return cfapi_h$constants$38.CancelShutdown$MH();
    }
    public static @C("BOOL") int CancelShutdown () {
        try {
            return (int)cfapi_h$constants$38.CancelShutdown$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MonitorFromPoint$MH() {
        return cfapi_h$constants$38.MonitorFromPoint$MH();
    }
    public static @C("HMONITOR") MemoryAddress MonitorFromPoint (@C("POINT") MemorySegment pt, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.MonitorFromPoint$MH().invokeExact(pt, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MonitorFromRect$MH() {
        return cfapi_h$constants$38.MonitorFromRect$MH();
    }
    public static @C("HMONITOR") MemoryAddress MonitorFromRect (@C("LPCRECT") Addressable lprc, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.MonitorFromRect$MH().invokeExact(lprc.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MonitorFromWindow$MH() {
        return cfapi_h$constants$38.MonitorFromWindow$MH();
    }
    public static @C("HMONITOR") MemoryAddress MonitorFromWindow (@C("HWND") Addressable hwnd, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.MonitorFromWindow$MH().invokeExact(hwnd.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMonitorInfoA$MH() {
        return cfapi_h$constants$38.GetMonitorInfoA$MH();
    }
    public static @C("BOOL") int GetMonitorInfoA (@C("HMONITOR") Addressable hMonitor, @C("LPMONITORINFO") Addressable lpmi) {
        try {
            return (int)cfapi_h$constants$38.GetMonitorInfoA$MH().invokeExact(hMonitor.address(), lpmi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMonitorInfoW$MH() {
        return cfapi_h$constants$38.GetMonitorInfoW$MH();
    }
    public static @C("BOOL") int GetMonitorInfoW (@C("HMONITOR") Addressable hMonitor, @C("LPMONITORINFO") Addressable lpmi) {
        try {
            return (int)cfapi_h$constants$38.GetMonitorInfoW$MH().invokeExact(hMonitor.address(), lpmi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDisplayMonitors$MH() {
        return cfapi_h$constants$38.EnumDisplayMonitors$MH();
    }
    public static @C("BOOL") int EnumDisplayMonitors (@C("HDC") Addressable hdc, @C("LPCRECT") Addressable lprcClip, @C("MONITORENUMPROC") Addressable lpfnEnum, @C("LPARAM") long dwData) {
        try {
            return (int)cfapi_h$constants$38.EnumDisplayMonitors$MH().invokeExact(hdc.address(), lprcClip.address(), lpfnEnum.address(), dwData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NotifyWinEvent$MH() {
        return cfapi_h$constants$38.NotifyWinEvent$MH();
    }
    public static void NotifyWinEvent (@C("DWORD") int event, @C("HWND") Addressable hwnd, @C("LONG") int idObject, @C("LONG") int idChild) {
        try {
            cfapi_h$constants$38.NotifyWinEvent$MH().invokeExact(event, hwnd.address(), idObject, idChild);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWinEventHook$MH() {
        return cfapi_h$constants$38.SetWinEventHook$MH();
    }
    public static @C("HWINEVENTHOOK") MemoryAddress SetWinEventHook (@C("DWORD") int eventMin, @C("DWORD") int eventMax, @C("HMODULE") Addressable hmodWinEventProc, @C("WINEVENTPROC") Addressable pfnWinEventProc, @C("DWORD") int idProcess, @C("DWORD") int idThread, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.SetWinEventHook$MH().invokeExact(eventMin, eventMax, hmodWinEventProc.address(), pfnWinEventProc.address(), idProcess, idThread, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWinEventHookInstalled$MH() {
        return cfapi_h$constants$38.IsWinEventHookInstalled$MH();
    }
    public static @C("BOOL") int IsWinEventHookInstalled (@C("DWORD") int event) {
        try {
            return (int)cfapi_h$constants$38.IsWinEventHookInstalled$MH().invokeExact(event);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnhookWinEvent$MH() {
        return cfapi_h$constants$38.UnhookWinEvent$MH();
    }
    public static @C("BOOL") int UnhookWinEvent (@C("HWINEVENTHOOK") Addressable hWinEventHook) {
        try {
            return (int)cfapi_h$constants$38.UnhookWinEvent$MH().invokeExact(hWinEventHook.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGUIThreadInfo$MH() {
        return cfapi_h$constants$38.GetGUIThreadInfo$MH();
    }
    public static @C("BOOL") int GetGUIThreadInfo (@C("DWORD") int idThread, @C("PGUITHREADINFO") Addressable pgui) {
        try {
            return (int)cfapi_h$constants$38.GetGUIThreadInfo$MH().invokeExact(idThread, pgui.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BlockInput$MH() {
        return cfapi_h$constants$38.BlockInput$MH();
    }
    public static @C("BOOL") int BlockInput (@C("BOOL") int fBlockIt) {
        try {
            return (int)cfapi_h$constants$38.BlockInput$MH().invokeExact(fBlockIt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessDPIAware$MH() {
        return cfapi_h$constants$38.SetProcessDPIAware$MH();
    }
    public static @C("BOOL") int SetProcessDPIAware () {
        try {
            return (int)cfapi_h$constants$38.SetProcessDPIAware$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsProcessDPIAware$MH() {
        return cfapi_h$constants$38.IsProcessDPIAware$MH();
    }
    public static @C("BOOL") int IsProcessDPIAware () {
        try {
            return (int)cfapi_h$constants$38.IsProcessDPIAware$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadDpiAwarenessContext$MH() {
        return cfapi_h$constants$38.SetThreadDpiAwarenessContext$MH();
    }
    public static @C("DPI_AWARENESS_CONTEXT") MemoryAddress SetThreadDpiAwarenessContext (@C("DPI_AWARENESS_CONTEXT") Addressable dpiContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.SetThreadDpiAwarenessContext$MH().invokeExact(dpiContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadDpiAwarenessContext$MH() {
        return cfapi_h$constants$38.GetThreadDpiAwarenessContext$MH();
    }
    public static @C("DPI_AWARENESS_CONTEXT") MemoryAddress GetThreadDpiAwarenessContext () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.GetThreadDpiAwarenessContext$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowDpiAwarenessContext$MH() {
        return cfapi_h$constants$38.GetWindowDpiAwarenessContext$MH();
    }
    public static @C("DPI_AWARENESS_CONTEXT") MemoryAddress GetWindowDpiAwarenessContext (@C("HWND") Addressable hwnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.GetWindowDpiAwarenessContext$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAwarenessFromDpiAwarenessContext$MH() {
        return cfapi_h$constants$38.GetAwarenessFromDpiAwarenessContext$MH();
    }
    public static @C("DPI_AWARENESS") int GetAwarenessFromDpiAwarenessContext (@C("DPI_AWARENESS_CONTEXT") Addressable value) {
        try {
            return (int)cfapi_h$constants$38.GetAwarenessFromDpiAwarenessContext$MH().invokeExact(value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDpiFromDpiAwarenessContext$MH() {
        return cfapi_h$constants$38.GetDpiFromDpiAwarenessContext$MH();
    }
    public static @C("UINT") int GetDpiFromDpiAwarenessContext (@C("DPI_AWARENESS_CONTEXT") Addressable value) {
        try {
            return (int)cfapi_h$constants$38.GetDpiFromDpiAwarenessContext$MH().invokeExact(value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AreDpiAwarenessContextsEqual$MH() {
        return cfapi_h$constants$38.AreDpiAwarenessContextsEqual$MH();
    }
    public static @C("BOOL") int AreDpiAwarenessContextsEqual (@C("DPI_AWARENESS_CONTEXT") Addressable dpiContextA, @C("DPI_AWARENESS_CONTEXT") Addressable dpiContextB) {
        try {
            return (int)cfapi_h$constants$38.AreDpiAwarenessContextsEqual$MH().invokeExact(dpiContextA.address(), dpiContextB.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsValidDpiAwarenessContext$MH() {
        return cfapi_h$constants$38.IsValidDpiAwarenessContext$MH();
    }
    public static @C("BOOL") int IsValidDpiAwarenessContext (@C("DPI_AWARENESS_CONTEXT") Addressable value) {
        try {
            return (int)cfapi_h$constants$38.IsValidDpiAwarenessContext$MH().invokeExact(value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDpiForWindow$MH() {
        return cfapi_h$constants$38.GetDpiForWindow$MH();
    }
    public static @C("UINT") int GetDpiForWindow (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$38.GetDpiForWindow$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDpiForSystem$MH() {
        return cfapi_h$constants$38.GetDpiForSystem$MH();
    }
    public static @C("UINT") int GetDpiForSystem () {
        try {
            return (int)cfapi_h$constants$38.GetDpiForSystem$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemDpiForProcess$MH() {
        return cfapi_h$constants$38.GetSystemDpiForProcess$MH();
    }
    public static @C("UINT") int GetSystemDpiForProcess (@C("HANDLE") Addressable hProcess) {
        try {
            return (int)cfapi_h$constants$38.GetSystemDpiForProcess$MH().invokeExact(hProcess.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnableNonClientDpiScaling$MH() {
        return cfapi_h$constants$38.EnableNonClientDpiScaling$MH();
    }
    public static @C("BOOL") int EnableNonClientDpiScaling (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$38.EnableNonClientDpiScaling$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InheritWindowMonitor$MH() {
        return cfapi_h$constants$38.InheritWindowMonitor$MH();
    }
    public static @C("BOOL") int InheritWindowMonitor (@C("HWND") Addressable hwnd, @C("HWND") Addressable hwndInherit) {
        try {
            return (int)cfapi_h$constants$38.InheritWindowMonitor$MH().invokeExact(hwnd.address(), hwndInherit.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessDpiAwarenessContext$MH() {
        return cfapi_h$constants$38.SetProcessDpiAwarenessContext$MH();
    }
    public static @C("BOOL") int SetProcessDpiAwarenessContext (@C("DPI_AWARENESS_CONTEXT") Addressable value) {
        try {
            return (int)cfapi_h$constants$38.SetProcessDpiAwarenessContext$MH().invokeExact(value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDpiAwarenessContextForProcess$MH() {
        return cfapi_h$constants$38.GetDpiAwarenessContextForProcess$MH();
    }
    public static @C("DPI_AWARENESS_CONTEXT") MemoryAddress GetDpiAwarenessContextForProcess (@C("HANDLE") Addressable hProcess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.GetDpiAwarenessContextForProcess$MH().invokeExact(hProcess.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadDpiHostingBehavior$MH() {
        return cfapi_h$constants$38.SetThreadDpiHostingBehavior$MH();
    }
    public static @C("DPI_HOSTING_BEHAVIOR") int SetThreadDpiHostingBehavior (@C("DPI_HOSTING_BEHAVIOR") int value) {
        try {
            return (int)cfapi_h$constants$38.SetThreadDpiHostingBehavior$MH().invokeExact(value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadDpiHostingBehavior$MH() {
        return cfapi_h$constants$38.GetThreadDpiHostingBehavior$MH();
    }
    public static @C("DPI_HOSTING_BEHAVIOR") int GetThreadDpiHostingBehavior () {
        try {
            return (int)cfapi_h$constants$38.GetThreadDpiHostingBehavior$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowDpiHostingBehavior$MH() {
        return cfapi_h$constants$38.GetWindowDpiHostingBehavior$MH();
    }
    public static @C("DPI_HOSTING_BEHAVIOR") int GetWindowDpiHostingBehavior (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$38.GetWindowDpiHostingBehavior$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowModuleFileNameA$MH() {
        return cfapi_h$constants$38.GetWindowModuleFileNameA$MH();
    }
    public static @C("UINT") int GetWindowModuleFileNameA (@C("HWND") Addressable hwnd, @C("LPSTR") Addressable pszFileName, @C("UINT") int cchFileNameMax) {
        try {
            return (int)cfapi_h$constants$38.GetWindowModuleFileNameA$MH().invokeExact(hwnd.address(), pszFileName.address(), cchFileNameMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowModuleFileNameW$MH() {
        return cfapi_h$constants$38.GetWindowModuleFileNameW$MH();
    }
    public static @C("UINT") int GetWindowModuleFileNameW (@C("HWND") Addressable hwnd, @C("LPWSTR") Addressable pszFileName, @C("UINT") int cchFileNameMax) {
        try {
            return (int)cfapi_h$constants$38.GetWindowModuleFileNameW$MH().invokeExact(hwnd.address(), pszFileName.address(), cchFileNameMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCursorInfo$MH() {
        return cfapi_h$constants$38.GetCursorInfo$MH();
    }
    public static @C("BOOL") int GetCursorInfo (@C("PCURSORINFO") Addressable pci) {
        try {
            return (int)cfapi_h$constants$38.GetCursorInfo$MH().invokeExact(pci.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowInfo$MH() {
        return cfapi_h$constants$38.GetWindowInfo$MH();
    }
    public static @C("BOOL") int GetWindowInfo (@C("HWND") Addressable hwnd, @C("PWINDOWINFO") Addressable pwi) {
        try {
            return (int)cfapi_h$constants$38.GetWindowInfo$MH().invokeExact(hwnd.address(), pwi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTitleBarInfo$MH() {
        return cfapi_h$constants$38.GetTitleBarInfo$MH();
    }
    public static @C("BOOL") int GetTitleBarInfo (@C("HWND") Addressable hwnd, @C("PTITLEBARINFO") Addressable pti) {
        try {
            return (int)cfapi_h$constants$38.GetTitleBarInfo$MH().invokeExact(hwnd.address(), pti.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMenuBarInfo$MH() {
        return cfapi_h$constants$38.GetMenuBarInfo$MH();
    }
    public static @C("BOOL") int GetMenuBarInfo (@C("HWND") Addressable hwnd, @C("LONG") int idObject, @C("LONG") int idItem, @C("PMENUBARINFO") Addressable pmbi) {
        try {
            return (int)cfapi_h$constants$38.GetMenuBarInfo$MH().invokeExact(hwnd.address(), idObject, idItem, pmbi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetScrollBarInfo$MH() {
        return cfapi_h$constants$38.GetScrollBarInfo$MH();
    }
    public static @C("BOOL") int GetScrollBarInfo (@C("HWND") Addressable hwnd, @C("LONG") int idObject, @C("PSCROLLBARINFO") Addressable psbi) {
        try {
            return (int)cfapi_h$constants$38.GetScrollBarInfo$MH().invokeExact(hwnd.address(), idObject, psbi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetComboBoxInfo$MH() {
        return cfapi_h$constants$38.GetComboBoxInfo$MH();
    }
    public static @C("BOOL") int GetComboBoxInfo (@C("HWND") Addressable hwndCombo, @C("PCOMBOBOXINFO") Addressable pcbi) {
        try {
            return (int)cfapi_h$constants$38.GetComboBoxInfo$MH().invokeExact(hwndCombo.address(), pcbi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAncestor$MH() {
        return cfapi_h$constants$38.GetAncestor$MH();
    }
    public static @C("HWND") MemoryAddress GetAncestor (@C("HWND") Addressable hwnd, @C("UINT") int gaFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.GetAncestor$MH().invokeExact(hwnd.address(), gaFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RealChildWindowFromPoint$MH() {
        return cfapi_h$constants$38.RealChildWindowFromPoint$MH();
    }
    public static @C("HWND") MemoryAddress RealChildWindowFromPoint (@C("HWND") Addressable hwndParent, @C("POINT") MemorySegment ptParentClientCoords) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$38.RealChildWindowFromPoint$MH().invokeExact(hwndParent.address(), ptParentClientCoords);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RealGetWindowClassA$MH() {
        return cfapi_h$constants$38.RealGetWindowClassA$MH();
    }
    public static @C("UINT") int RealGetWindowClassA (@C("HWND") Addressable hwnd, @C("LPSTR") Addressable ptszClassName, @C("UINT") int cchClassNameMax) {
        try {
            return (int)cfapi_h$constants$38.RealGetWindowClassA$MH().invokeExact(hwnd.address(), ptszClassName.address(), cchClassNameMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RealGetWindowClassW$MH() {
        return cfapi_h$constants$38.RealGetWindowClassW$MH();
    }
    public static @C("UINT") int RealGetWindowClassW (@C("HWND") Addressable hwnd, @C("LPWSTR") Addressable ptszClassName, @C("UINT") int cchClassNameMax) {
        try {
            return (int)cfapi_h$constants$38.RealGetWindowClassW$MH().invokeExact(hwnd.address(), ptszClassName.address(), cchClassNameMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAltTabInfoA$MH() {
        return cfapi_h$constants$38.GetAltTabInfoA$MH();
    }
    public static @C("BOOL") int GetAltTabInfoA (@C("HWND") Addressable hwnd, @C("int") int iItem, @C("PALTTABINFO") Addressable pati, @C("LPSTR") Addressable pszItemText, @C("UINT") int cchItemText) {
        try {
            return (int)cfapi_h$constants$38.GetAltTabInfoA$MH().invokeExact(hwnd.address(), iItem, pati.address(), pszItemText.address(), cchItemText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAltTabInfoW$MH() {
        return cfapi_h$constants$38.GetAltTabInfoW$MH();
    }
    public static @C("BOOL") int GetAltTabInfoW (@C("HWND") Addressable hwnd, @C("int") int iItem, @C("PALTTABINFO") Addressable pati, @C("LPWSTR") Addressable pszItemText, @C("UINT") int cchItemText) {
        try {
            return (int)cfapi_h$constants$38.GetAltTabInfoW$MH().invokeExact(hwnd.address(), iItem, pati.address(), pszItemText.address(), cchItemText);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetListBoxInfo$MH() {
        return cfapi_h$constants$38.GetListBoxInfo$MH();
    }
    public static @C("DWORD") int GetListBoxInfo (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$38.GetListBoxInfo$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LockWorkStation$MH() {
        return cfapi_h$constants$38.LockWorkStation$MH();
    }
    public static @C("BOOL") int LockWorkStation () {
        try {
            return (int)cfapi_h$constants$38.LockWorkStation$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UserHandleGrantAccess$MH() {
        return cfapi_h$constants$38.UserHandleGrantAccess$MH();
    }
    public static @C("BOOL") int UserHandleGrantAccess (@C("HANDLE") Addressable hUserHandle, @C("HANDLE") Addressable hJob, @C("BOOL") int bGrant) {
        try {
            return (int)cfapi_h$constants$38.UserHandleGrantAccess$MH().invokeExact(hUserHandle.address(), hJob.address(), bGrant);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRawInputData$MH() {
        return cfapi_h$constants$39.GetRawInputData$MH();
    }
    public static @C("UINT") int GetRawInputData (@C("HRAWINPUT") Addressable hRawInput, @C("UINT") int uiCommand, @C("LPVOID") Addressable pData, @C("PUINT") Addressable pcbSize, @C("UINT") int cbSizeHeader) {
        try {
            return (int)cfapi_h$constants$39.GetRawInputData$MH().invokeExact(hRawInput.address(), uiCommand, pData.address(), pcbSize.address(), cbSizeHeader);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRawInputDeviceInfoA$MH() {
        return cfapi_h$constants$39.GetRawInputDeviceInfoA$MH();
    }
    public static @C("UINT") int GetRawInputDeviceInfoA (@C("HANDLE") Addressable hDevice, @C("UINT") int uiCommand, @C("LPVOID") Addressable pData, @C("PUINT") Addressable pcbSize) {
        try {
            return (int)cfapi_h$constants$39.GetRawInputDeviceInfoA$MH().invokeExact(hDevice.address(), uiCommand, pData.address(), pcbSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRawInputDeviceInfoW$MH() {
        return cfapi_h$constants$39.GetRawInputDeviceInfoW$MH();
    }
    public static @C("UINT") int GetRawInputDeviceInfoW (@C("HANDLE") Addressable hDevice, @C("UINT") int uiCommand, @C("LPVOID") Addressable pData, @C("PUINT") Addressable pcbSize) {
        try {
            return (int)cfapi_h$constants$39.GetRawInputDeviceInfoW$MH().invokeExact(hDevice.address(), uiCommand, pData.address(), pcbSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRawInputBuffer$MH() {
        return cfapi_h$constants$39.GetRawInputBuffer$MH();
    }
    public static @C("UINT") int GetRawInputBuffer (@C("PRAWINPUT") Addressable pData, @C("PUINT") Addressable pcbSize, @C("UINT") int cbSizeHeader) {
        try {
            return (int)cfapi_h$constants$39.GetRawInputBuffer$MH().invokeExact(pData.address(), pcbSize.address(), cbSizeHeader);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterRawInputDevices$MH() {
        return cfapi_h$constants$39.RegisterRawInputDevices$MH();
    }
    public static @C("BOOL") int RegisterRawInputDevices (@C("PCRAWINPUTDEVICE") Addressable pRawInputDevices, @C("UINT") int uiNumDevices, @C("UINT") int cbSize) {
        try {
            return (int)cfapi_h$constants$39.RegisterRawInputDevices$MH().invokeExact(pRawInputDevices.address(), uiNumDevices, cbSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRegisteredRawInputDevices$MH() {
        return cfapi_h$constants$39.GetRegisteredRawInputDevices$MH();
    }
    public static @C("UINT") int GetRegisteredRawInputDevices (@C("PRAWINPUTDEVICE") Addressable pRawInputDevices, @C("PUINT") Addressable puiNumDevices, @C("UINT") int cbSize) {
        try {
            return (int)cfapi_h$constants$39.GetRegisteredRawInputDevices$MH().invokeExact(pRawInputDevices.address(), puiNumDevices.address(), cbSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRawInputDeviceList$MH() {
        return cfapi_h$constants$39.GetRawInputDeviceList$MH();
    }
    public static @C("UINT") int GetRawInputDeviceList (@C("PRAWINPUTDEVICELIST") Addressable pRawInputDeviceList, @C("PUINT") Addressable puiNumDevices, @C("UINT") int cbSize) {
        try {
            return (int)cfapi_h$constants$39.GetRawInputDeviceList$MH().invokeExact(pRawInputDeviceList.address(), puiNumDevices.address(), cbSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefRawInputProc$MH() {
        return cfapi_h$constants$39.DefRawInputProc$MH();
    }
    public static @C("LRESULT") long DefRawInputProc (@C("PRAWINPUT*") Addressable paRawInput, @C("INT") int nInput, @C("UINT") int cbSizeHeader) {
        try {
            return (long)cfapi_h$constants$39.DefRawInputProc$MH().invokeExact(paRawInput.address(), nInput, cbSizeHeader);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int POINTER_DEVICE_TYPE_INTEGRATED_PEN() {
        return cfapi_h$constants$39.POINTER_DEVICE_TYPE_INTEGRATED_PEN();
    }
    public static @C("int") int POINTER_DEVICE_TYPE_EXTERNAL_PEN() {
        return cfapi_h$constants$39.POINTER_DEVICE_TYPE_EXTERNAL_PEN();
    }
    public static @C("int") int POINTER_DEVICE_TYPE_TOUCH() {
        return cfapi_h$constants$39.POINTER_DEVICE_TYPE_TOUCH();
    }
    public static @C("int") int POINTER_DEVICE_TYPE_TOUCH_PAD() {
        return cfapi_h$constants$39.POINTER_DEVICE_TYPE_TOUCH_PAD();
    }
    public static @C("int") int POINTER_DEVICE_TYPE_MAX() {
        return cfapi_h$constants$39.POINTER_DEVICE_TYPE_MAX();
    }
    public static @C("int") int POINTER_DEVICE_CURSOR_TYPE_UNKNOWN() {
        return cfapi_h$constants$39.POINTER_DEVICE_CURSOR_TYPE_UNKNOWN();
    }
    public static @C("int") int POINTER_DEVICE_CURSOR_TYPE_TIP() {
        return cfapi_h$constants$39.POINTER_DEVICE_CURSOR_TYPE_TIP();
    }
    public static @C("int") int POINTER_DEVICE_CURSOR_TYPE_ERASER() {
        return cfapi_h$constants$39.POINTER_DEVICE_CURSOR_TYPE_ERASER();
    }
    public static @C("int") int POINTER_DEVICE_CURSOR_TYPE_MAX() {
        return cfapi_h$constants$39.POINTER_DEVICE_CURSOR_TYPE_MAX();
    }
    public static  MethodHandle GetPointerDevices$MH() {
        return cfapi_h$constants$39.GetPointerDevices$MH();
    }
    public static @C("BOOL") int GetPointerDevices (@C("UINT32*") Addressable deviceCount, @C("POINTER_DEVICE_INFO*") Addressable pointerDevices) {
        try {
            return (int)cfapi_h$constants$39.GetPointerDevices$MH().invokeExact(deviceCount.address(), pointerDevices.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerDevice$MH() {
        return cfapi_h$constants$39.GetPointerDevice$MH();
    }
    public static @C("BOOL") int GetPointerDevice (@C("HANDLE") Addressable device, @C("POINTER_DEVICE_INFO*") Addressable pointerDevice) {
        try {
            return (int)cfapi_h$constants$39.GetPointerDevice$MH().invokeExact(device.address(), pointerDevice.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerDeviceProperties$MH() {
        return cfapi_h$constants$39.GetPointerDeviceProperties$MH();
    }
    public static @C("BOOL") int GetPointerDeviceProperties (@C("HANDLE") Addressable device, @C("UINT32*") Addressable propertyCount, @C("POINTER_DEVICE_PROPERTY*") Addressable pointerProperties) {
        try {
            return (int)cfapi_h$constants$39.GetPointerDeviceProperties$MH().invokeExact(device.address(), propertyCount.address(), pointerProperties.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterPointerDeviceNotifications$MH() {
        return cfapi_h$constants$39.RegisterPointerDeviceNotifications$MH();
    }
    public static @C("BOOL") int RegisterPointerDeviceNotifications (@C("HWND") Addressable window, @C("BOOL") int notifyRange) {
        try {
            return (int)cfapi_h$constants$39.RegisterPointerDeviceNotifications$MH().invokeExact(window.address(), notifyRange);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerDeviceRects$MH() {
        return cfapi_h$constants$39.GetPointerDeviceRects$MH();
    }
    public static @C("BOOL") int GetPointerDeviceRects (@C("HANDLE") Addressable device, @C("RECT*") Addressable pointerDeviceRect, @C("RECT*") Addressable displayRect) {
        try {
            return (int)cfapi_h$constants$39.GetPointerDeviceRects$MH().invokeExact(device.address(), pointerDeviceRect.address(), displayRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerDeviceCursors$MH() {
        return cfapi_h$constants$39.GetPointerDeviceCursors$MH();
    }
    public static @C("BOOL") int GetPointerDeviceCursors (@C("HANDLE") Addressable device, @C("UINT32*") Addressable cursorCount, @C("POINTER_DEVICE_CURSOR_INFO*") Addressable deviceCursors) {
        try {
            return (int)cfapi_h$constants$39.GetPointerDeviceCursors$MH().invokeExact(device.address(), cursorCount.address(), deviceCursors.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRawPointerDeviceData$MH() {
        return cfapi_h$constants$39.GetRawPointerDeviceData$MH();
    }
    public static @C("BOOL") int GetRawPointerDeviceData (@C("UINT32") int pointerId, @C("UINT32") int historyCount, @C("UINT32") int propertiesCount, @C("POINTER_DEVICE_PROPERTY*") Addressable pProperties, @C("LONG*") Addressable pValues) {
        try {
            return (int)cfapi_h$constants$39.GetRawPointerDeviceData$MH().invokeExact(pointerId, historyCount, propertiesCount, pProperties.address(), pValues.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChangeWindowMessageFilter$MH() {
        return cfapi_h$constants$39.ChangeWindowMessageFilter$MH();
    }
    public static @C("BOOL") int ChangeWindowMessageFilter (@C("UINT") int message, @C("DWORD") int dwFlag) {
        try {
            return (int)cfapi_h$constants$39.ChangeWindowMessageFilter$MH().invokeExact(message, dwFlag);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChangeWindowMessageFilterEx$MH() {
        return cfapi_h$constants$39.ChangeWindowMessageFilterEx$MH();
    }
    public static @C("BOOL") int ChangeWindowMessageFilterEx (@C("HWND") Addressable hwnd, @C("UINT") int message, @C("DWORD") int action, @C("PCHANGEFILTERSTRUCT") Addressable pChangeFilterStruct) {
        try {
            return (int)cfapi_h$constants$39.ChangeWindowMessageFilterEx$MH().invokeExact(hwnd.address(), message, action, pChangeFilterStruct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGestureInfo$MH() {
        return cfapi_h$constants$39.GetGestureInfo$MH();
    }
    public static @C("BOOL") int GetGestureInfo (@C("HGESTUREINFO") Addressable hGestureInfo, @C("PGESTUREINFO") Addressable pGestureInfo) {
        try {
            return (int)cfapi_h$constants$39.GetGestureInfo$MH().invokeExact(hGestureInfo.address(), pGestureInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGestureExtraArgs$MH() {
        return cfapi_h$constants$39.GetGestureExtraArgs$MH();
    }
    public static @C("BOOL") int GetGestureExtraArgs (@C("HGESTUREINFO") Addressable hGestureInfo, @C("UINT") int cbExtraArgs, @C("PBYTE") Addressable pExtraArgs) {
        try {
            return (int)cfapi_h$constants$39.GetGestureExtraArgs$MH().invokeExact(hGestureInfo.address(), cbExtraArgs, pExtraArgs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseGestureInfoHandle$MH() {
        return cfapi_h$constants$39.CloseGestureInfoHandle$MH();
    }
    public static @C("BOOL") int CloseGestureInfoHandle (@C("HGESTUREINFO") Addressable hGestureInfo) {
        try {
            return (int)cfapi_h$constants$39.CloseGestureInfoHandle$MH().invokeExact(hGestureInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetGestureConfig$MH() {
        return cfapi_h$constants$39.SetGestureConfig$MH();
    }
    public static @C("BOOL") int SetGestureConfig (@C("HWND") Addressable hwnd, @C("DWORD") int dwReserved, @C("UINT") int cIDs, @C("PGESTURECONFIG") Addressable pGestureConfig, @C("UINT") int cbSize) {
        try {
            return (int)cfapi_h$constants$39.SetGestureConfig$MH().invokeExact(hwnd.address(), dwReserved, cIDs, pGestureConfig.address(), cbSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGestureConfig$MH() {
        return cfapi_h$constants$39.GetGestureConfig$MH();
    }
    public static @C("BOOL") int GetGestureConfig (@C("HWND") Addressable hwnd, @C("DWORD") int dwReserved, @C("DWORD") int dwFlags, @C("PUINT") Addressable pcIDs, @C("PGESTURECONFIG") Addressable pGestureConfig, @C("UINT") int cbSize) {
        try {
            return (int)cfapi_h$constants$39.GetGestureConfig$MH().invokeExact(hwnd.address(), dwReserved, dwFlags, pcIDs.address(), pGestureConfig.address(), cbSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ShutdownBlockReasonCreate$MH() {
        return cfapi_h$constants$39.ShutdownBlockReasonCreate$MH();
    }
    public static @C("BOOL") int ShutdownBlockReasonCreate (@C("HWND") Addressable hWnd, @C("LPCWSTR") Addressable pwszReason) {
        try {
            return (int)cfapi_h$constants$39.ShutdownBlockReasonCreate$MH().invokeExact(hWnd.address(), pwszReason.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ShutdownBlockReasonQuery$MH() {
        return cfapi_h$constants$39.ShutdownBlockReasonQuery$MH();
    }
    public static @C("BOOL") int ShutdownBlockReasonQuery (@C("HWND") Addressable hWnd, @C("LPWSTR") Addressable pwszBuff, @C("DWORD*") Addressable pcchBuff) {
        try {
            return (int)cfapi_h$constants$39.ShutdownBlockReasonQuery$MH().invokeExact(hWnd.address(), pwszBuff.address(), pcchBuff.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ShutdownBlockReasonDestroy$MH() {
        return cfapi_h$constants$39.ShutdownBlockReasonDestroy$MH();
    }
    public static @C("BOOL") int ShutdownBlockReasonDestroy (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$39.ShutdownBlockReasonDestroy$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int IMDT_UNAVAILABLE() {
        return cfapi_h$constants$39.IMDT_UNAVAILABLE();
    }
    public static @C("int") int IMDT_KEYBOARD() {
        return cfapi_h$constants$39.IMDT_KEYBOARD();
    }
    public static @C("int") int IMDT_MOUSE() {
        return cfapi_h$constants$39.IMDT_MOUSE();
    }
    public static @C("int") int IMDT_TOUCH() {
        return cfapi_h$constants$39.IMDT_TOUCH();
    }
    public static @C("int") int IMDT_PEN() {
        return cfapi_h$constants$39.IMDT_PEN();
    }
    public static @C("int") int IMDT_TOUCHPAD() {
        return cfapi_h$constants$39.IMDT_TOUCHPAD();
    }
    public static @C("int") int IMO_UNAVAILABLE() {
        return cfapi_h$constants$39.IMO_UNAVAILABLE();
    }
    public static @C("int") int IMO_HARDWARE() {
        return cfapi_h$constants$39.IMO_HARDWARE();
    }
    public static @C("int") int IMO_INJECTED() {
        return cfapi_h$constants$39.IMO_INJECTED();
    }
    public static @C("int") int IMO_SYSTEM() {
        return cfapi_h$constants$39.IMO_SYSTEM();
    }
    public static  MethodHandle GetCurrentInputMessageSource$MH() {
        return cfapi_h$constants$39.GetCurrentInputMessageSource$MH();
    }
    public static @C("BOOL") int GetCurrentInputMessageSource (@C("INPUT_MESSAGE_SOURCE*") Addressable inputMessageSource) {
        try {
            return (int)cfapi_h$constants$39.GetCurrentInputMessageSource$MH().invokeExact(inputMessageSource.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCIMSSM$MH() {
        return cfapi_h$constants$39.GetCIMSSM$MH();
    }
    public static @C("BOOL") int GetCIMSSM (@C("INPUT_MESSAGE_SOURCE*") Addressable inputMessageSource) {
        try {
            return (int)cfapi_h$constants$39.GetCIMSSM$MH().invokeExact(inputMessageSource.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int AR_ENABLED() {
        return cfapi_h$constants$39.AR_ENABLED();
    }
    public static @C("int") int AR_DISABLED() {
        return cfapi_h$constants$39.AR_DISABLED();
    }
    public static @C("int") int AR_SUPPRESSED() {
        return cfapi_h$constants$39.AR_SUPPRESSED();
    }
    public static @C("int") int AR_REMOTESESSION() {
        return cfapi_h$constants$39.AR_REMOTESESSION();
    }
    public static @C("int") int AR_MULTIMON() {
        return cfapi_h$constants$39.AR_MULTIMON();
    }
    public static @C("int") int AR_NOSENSOR() {
        return cfapi_h$constants$39.AR_NOSENSOR();
    }
    public static @C("int") int AR_NOT_SUPPORTED() {
        return cfapi_h$constants$39.AR_NOT_SUPPORTED();
    }
    public static @C("int") int AR_DOCKED() {
        return cfapi_h$constants$39.AR_DOCKED();
    }
    public static @C("int") int AR_LAPTOP() {
        return cfapi_h$constants$39.AR_LAPTOP();
    }
    public static @C("int") int ORIENTATION_PREFERENCE_NONE() {
        return cfapi_h$constants$39.ORIENTATION_PREFERENCE_NONE();
    }
    public static @C("int") int ORIENTATION_PREFERENCE_LANDSCAPE() {
        return cfapi_h$constants$39.ORIENTATION_PREFERENCE_LANDSCAPE();
    }
    public static @C("int") int ORIENTATION_PREFERENCE_PORTRAIT() {
        return cfapi_h$constants$39.ORIENTATION_PREFERENCE_PORTRAIT();
    }
    public static @C("int") int ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED() {
        return cfapi_h$constants$39.ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED();
    }
    public static @C("int") int ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED() {
        return cfapi_h$constants$39.ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED();
    }
    public static  MethodHandle GetAutoRotationState$MH() {
        return cfapi_h$constants$39.GetAutoRotationState$MH();
    }
    public static @C("BOOL") int GetAutoRotationState (@C("PAR_STATE") Addressable pState) {
        try {
            return (int)cfapi_h$constants$39.GetAutoRotationState$MH().invokeExact(pState.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDisplayAutoRotationPreferences$MH() {
        return cfapi_h$constants$39.GetDisplayAutoRotationPreferences$MH();
    }
    public static @C("BOOL") int GetDisplayAutoRotationPreferences (@C("ORIENTATION_PREFERENCE*") Addressable pOrientation) {
        try {
            return (int)cfapi_h$constants$39.GetDisplayAutoRotationPreferences$MH().invokeExact(pOrientation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDisplayAutoRotationPreferencesByProcessId$MH() {
        return cfapi_h$constants$39.GetDisplayAutoRotationPreferencesByProcessId$MH();
    }
    public static @C("BOOL") int GetDisplayAutoRotationPreferencesByProcessId (@C("DWORD") int dwProcessId, @C("ORIENTATION_PREFERENCE*") Addressable pOrientation, @C("BOOL*") Addressable fRotateScreen) {
        try {
            return (int)cfapi_h$constants$39.GetDisplayAutoRotationPreferencesByProcessId$MH().invokeExact(dwProcessId, pOrientation.address(), fRotateScreen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDisplayAutoRotationPreferences$MH() {
        return cfapi_h$constants$39.SetDisplayAutoRotationPreferences$MH();
    }
    public static @C("BOOL") int SetDisplayAutoRotationPreferences (@C("ORIENTATION_PREFERENCE") int orientation) {
        try {
            return (int)cfapi_h$constants$39.SetDisplayAutoRotationPreferences$MH().invokeExact(orientation);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsImmersiveProcess$MH() {
        return cfapi_h$constants$39.IsImmersiveProcess$MH();
    }
    public static @C("BOOL") int IsImmersiveProcess (@C("HANDLE") Addressable hProcess) {
        try {
            return (int)cfapi_h$constants$39.IsImmersiveProcess$MH().invokeExact(hProcess.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessRestrictionExemption$MH() {
        return cfapi_h$constants$39.SetProcessRestrictionExemption$MH();
    }
    public static @C("BOOL") int SetProcessRestrictionExemption (@C("BOOL") int fEnableExemption) {
        try {
            return (int)cfapi_h$constants$39.SetProcessRestrictionExemption$MH().invokeExact(fEnableExemption);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDateFormatA$MH() {
        return cfapi_h$constants$39.GetDateFormatA$MH();
    }
    public static @C("int") int GetDateFormatA (@C("LCID") int Locale, @C("DWORD") int dwFlags, @C("const SYSTEMTIME*") Addressable lpDate, @C("LPCSTR") Addressable lpFormat, @C("LPSTR") Addressable lpDateStr, @C("int") int cchDate) {
        try {
            return (int)cfapi_h$constants$39.GetDateFormatA$MH().invokeExact(Locale, dwFlags, lpDate.address(), lpFormat.address(), lpDateStr.address(), cchDate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDateFormatW$MH() {
        return cfapi_h$constants$39.GetDateFormatW$MH();
    }
    public static @C("int") int GetDateFormatW (@C("LCID") int Locale, @C("DWORD") int dwFlags, @C("const SYSTEMTIME*") Addressable lpDate, @C("LPCWSTR") Addressable lpFormat, @C("LPWSTR") Addressable lpDateStr, @C("int") int cchDate) {
        try {
            return (int)cfapi_h$constants$39.GetDateFormatW$MH().invokeExact(Locale, dwFlags, lpDate.address(), lpFormat.address(), lpDateStr.address(), cchDate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTimeFormatA$MH() {
        return cfapi_h$constants$39.GetTimeFormatA$MH();
    }
    public static @C("int") int GetTimeFormatA (@C("LCID") int Locale, @C("DWORD") int dwFlags, @C("const SYSTEMTIME*") Addressable lpTime, @C("LPCSTR") Addressable lpFormat, @C("LPSTR") Addressable lpTimeStr, @C("int") int cchTime) {
        try {
            return (int)cfapi_h$constants$39.GetTimeFormatA$MH().invokeExact(Locale, dwFlags, lpTime.address(), lpFormat.address(), lpTimeStr.address(), cchTime);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTimeFormatW$MH() {
        return cfapi_h$constants$39.GetTimeFormatW$MH();
    }
    public static @C("int") int GetTimeFormatW (@C("LCID") int Locale, @C("DWORD") int dwFlags, @C("const SYSTEMTIME*") Addressable lpTime, @C("LPCWSTR") Addressable lpFormat, @C("LPWSTR") Addressable lpTimeStr, @C("int") int cchTime) {
        try {
            return (int)cfapi_h$constants$39.GetTimeFormatW$MH().invokeExact(Locale, dwFlags, lpTime.address(), lpFormat.address(), lpTimeStr.address(), cchTime);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTimeFormatEx$MH() {
        return cfapi_h$constants$39.GetTimeFormatEx$MH();
    }
    public static @C("int") int GetTimeFormatEx (@C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwFlags, @C("const SYSTEMTIME*") Addressable lpTime, @C("LPCWSTR") Addressable lpFormat, @C("LPWSTR") Addressable lpTimeStr, @C("int") int cchTime) {
        try {
            return (int)cfapi_h$constants$39.GetTimeFormatEx$MH().invokeExact(lpLocaleName.address(), dwFlags, lpTime.address(), lpFormat.address(), lpTimeStr.address(), cchTime);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDateFormatEx$MH() {
        return cfapi_h$constants$39.GetDateFormatEx$MH();
    }
    public static @C("int") int GetDateFormatEx (@C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwFlags, @C("const SYSTEMTIME*") Addressable lpDate, @C("LPCWSTR") Addressable lpFormat, @C("LPWSTR") Addressable lpDateStr, @C("int") int cchDate, @C("LPCWSTR") Addressable lpCalendar) {
        try {
            return (int)cfapi_h$constants$39.GetDateFormatEx$MH().invokeExact(lpLocaleName.address(), dwFlags, lpDate.address(), lpFormat.address(), lpDateStr.address(), cchDate, lpCalendar.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDurationFormatEx$MH() {
        return cfapi_h$constants$39.GetDurationFormatEx$MH();
    }
    public static @C("int") int GetDurationFormatEx (@C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwFlags, @C("const SYSTEMTIME*") Addressable lpDuration, @C("ULONGLONG") long ullDuration, @C("LPCWSTR") Addressable lpFormat, @C("LPWSTR") Addressable lpDurationStr, @C("int") int cchDuration) {
        try {
            return (int)cfapi_h$constants$39.GetDurationFormatEx$MH().invokeExact(lpLocaleName.address(), dwFlags, lpDuration.address(), ullDuration, lpFormat.address(), lpDurationStr.address(), cchDuration);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("long") ValueLayout GEOID = C_LONG;
    public static @C("int") int COMPARE_STRING() {
        return cfapi_h$constants$39.COMPARE_STRING();
    }
    public static @C("int") int GEO_NATION() {
        return cfapi_h$constants$39.GEO_NATION();
    }
    public static @C("int") int GEO_LATITUDE() {
        return cfapi_h$constants$39.GEO_LATITUDE();
    }
    public static @C("int") int GEO_LONGITUDE() {
        return cfapi_h$constants$39.GEO_LONGITUDE();
    }
    public static @C("int") int GEO_ISO2() {
        return cfapi_h$constants$39.GEO_ISO2();
    }
    public static @C("int") int GEO_ISO3() {
        return cfapi_h$constants$39.GEO_ISO3();
    }
    public static @C("int") int GEO_RFC1766() {
        return cfapi_h$constants$39.GEO_RFC1766();
    }
    public static @C("int") int GEO_LCID() {
        return cfapi_h$constants$39.GEO_LCID();
    }
    public static @C("int") int GEO_FRIENDLYNAME() {
        return cfapi_h$constants$39.GEO_FRIENDLYNAME();
    }
    public static @C("int") int GEO_OFFICIALNAME() {
        return cfapi_h$constants$39.GEO_OFFICIALNAME();
    }
    public static @C("int") int GEO_TIMEZONES() {
        return cfapi_h$constants$39.GEO_TIMEZONES();
    }
    public static @C("int") int GEO_OFFICIALLANGUAGES() {
        return cfapi_h$constants$39.GEO_OFFICIALLANGUAGES();
    }
    public static @C("int") int GEO_ISO_UN_NUMBER() {
        return cfapi_h$constants$39.GEO_ISO_UN_NUMBER();
    }
    public static @C("int") int GEO_PARENT() {
        return cfapi_h$constants$39.GEO_PARENT();
    }
    public static @C("int") int GEO_DIALINGCODE() {
        return cfapi_h$constants$39.GEO_DIALINGCODE();
    }
    public static @C("int") int GEO_CURRENCYCODE() {
        return cfapi_h$constants$39.GEO_CURRENCYCODE();
    }
    public static @C("int") int GEO_CURRENCYSYMBOL() {
        return cfapi_h$constants$39.GEO_CURRENCYSYMBOL();
    }
    public static @C("int") int GEO_NAME() {
        return cfapi_h$constants$39.GEO_NAME();
    }
    public static @C("int") int GEO_ID() {
        return cfapi_h$constants$39.GEO_ID();
    }
    public static @C("int") int GEOCLASS_NATION() {
        return cfapi_h$constants$39.GEOCLASS_NATION();
    }
    public static @C("int") int GEOCLASS_REGION() {
        return cfapi_h$constants$39.GEOCLASS_REGION();
    }
    public static @C("int") int GEOCLASS_ALL() {
        return cfapi_h$constants$39.GEOCLASS_ALL();
    }
    public static @C("int") int NormalizationOther() {
        return cfapi_h$constants$39.NormalizationOther();
    }
    public static @C("int") int NormalizationC() {
        return cfapi_h$constants$39.NormalizationC();
    }
    public static @C("int") int NormalizationD() {
        return cfapi_h$constants$39.NormalizationD();
    }
    public static @C("int") int NormalizationKC() {
        return cfapi_h$constants$39.NormalizationKC();
    }
    public static @C("int") int NormalizationKD() {
        return cfapi_h$constants$39.NormalizationKD();
    }
    public static  MethodHandle CompareStringEx$MH() {
        return cfapi_h$constants$39.CompareStringEx$MH();
    }
    public static @C("int") int CompareStringEx (@C("LPCWSTR") Addressable lpLocaleName, @C("DWORD") int dwCmpFlags, @C("LPCWCH") Addressable lpString1, @C("int") int cchCount1, @C("LPCWCH") Addressable lpString2, @C("int") int cchCount2, @C("LPNLSVERSIONINFO") Addressable lpVersionInformation, @C("LPVOID") Addressable lpReserved, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$39.CompareStringEx$MH().invokeExact(lpLocaleName.address(), dwCmpFlags, lpString1.address(), cchCount1, lpString2.address(), cchCount2, lpVersionInformation.address(), lpReserved.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CompareStringOrdinal$MH() {
        return cfapi_h$constants$39.CompareStringOrdinal$MH();
    }
    public static @C("int") int CompareStringOrdinal (@C("LPCWCH") Addressable lpString1, @C("int") int cchCount1, @C("LPCWCH") Addressable lpString2, @C("int") int cchCount2, @C("BOOL") int bIgnoreCase) {
        try {
            return (int)cfapi_h$constants$39.CompareStringOrdinal$MH().invokeExact(lpString1.address(), cchCount1, lpString2.address(), cchCount2, bIgnoreCase);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CompareStringW$MH() {
        return cfapi_h$constants$39.CompareStringW$MH();
    }
    public static @C("int") int CompareStringW (@C("LCID") int Locale, @C("DWORD") int dwCmpFlags, @C("PCNZWCH") Addressable lpString1, @C("int") int cchCount1, @C("PCNZWCH") Addressable lpString2, @C("int") int cchCount2) {
        try {
            return (int)cfapi_h$constants$39.CompareStringW$MH().invokeExact(Locale, dwCmpFlags, lpString1.address(), cchCount1, lpString2.address(), cchCount2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FoldStringW$MH() {
        return cfapi_h$constants$39.FoldStringW$MH();
    }
    public static @C("int") int FoldStringW (@C("DWORD") int dwMapFlags, @C("LPCWCH") Addressable lpSrcStr, @C("int") int cchSrc, @C("LPWSTR") Addressable lpDestStr, @C("int") int cchDest) {
        try {
            return (int)cfapi_h$constants$39.FoldStringW$MH().invokeExact(dwMapFlags, lpSrcStr.address(), cchSrc, lpDestStr.address(), cchDest);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetStringTypeExW$MH() {
        return cfapi_h$constants$39.GetStringTypeExW$MH();
    }
    public static @C("BOOL") int GetStringTypeExW (@C("LCID") int Locale, @C("DWORD") int dwInfoType, @C("LPCWCH") Addressable lpSrcStr, @C("int") int cchSrc, @C("LPWORD") Addressable lpCharType) {
        try {
            return (int)cfapi_h$constants$39.GetStringTypeExW$MH().invokeExact(Locale, dwInfoType, lpSrcStr.address(), cchSrc, lpCharType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetStringTypeW$MH() {
        return cfapi_h$constants$39.GetStringTypeW$MH();
    }
    public static @C("BOOL") int GetStringTypeW (@C("DWORD") int dwInfoType, @C("LPCWCH") Addressable lpSrcStr, @C("int") int cchSrc, @C("LPWORD") Addressable lpCharType) {
        try {
            return (int)cfapi_h$constants$39.GetStringTypeW$MH().invokeExact(dwInfoType, lpSrcStr.address(), cchSrc, lpCharType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MultiByteToWideChar$MH() {
        return cfapi_h$constants$39.MultiByteToWideChar$MH();
    }
    public static @C("int") int MultiByteToWideChar (@C("UINT") int CodePage, @C("DWORD") int dwFlags, @C("LPCCH") Addressable lpMultiByteStr, @C("int") int cbMultiByte, @C("LPWSTR") Addressable lpWideCharStr, @C("int") int cchWideChar) {
        try {
            return (int)cfapi_h$constants$39.MultiByteToWideChar$MH().invokeExact(CodePage, dwFlags, lpMultiByteStr.address(), cbMultiByte, lpWideCharStr.address(), cchWideChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WideCharToMultiByte$MH() {
        return cfapi_h$constants$39.WideCharToMultiByte$MH();
    }
    public static @C("int") int WideCharToMultiByte (@C("UINT") int CodePage, @C("DWORD") int dwFlags, @C("LPCWCH") Addressable lpWideCharStr, @C("int") int cchWideChar, @C("LPSTR") Addressable lpMultiByteStr, @C("int") int cbMultiByte, @C("LPCCH") Addressable lpDefaultChar, @C("LPBOOL") Addressable lpUsedDefaultChar) {
        try {
            return (int)cfapi_h$constants$39.WideCharToMultiByte$MH().invokeExact(CodePage, dwFlags, lpWideCharStr.address(), cchWideChar, lpMultiByteStr.address(), cbMultiByte, lpDefaultChar.address(), lpUsedDefaultChar.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsValidCodePage$MH() {
        return cfapi_h$constants$39.IsValidCodePage$MH();
    }
    public static @C("BOOL") int IsValidCodePage (@C("UINT") int CodePage) {
        try {
            return (int)cfapi_h$constants$39.IsValidCodePage$MH().invokeExact(CodePage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetACP$MH() {
        return cfapi_h$constants$39.GetACP$MH();
    }
    public static @C("UINT") int GetACP () {
        try {
            return (int)cfapi_h$constants$39.GetACP$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOEMCP$MH() {
        return cfapi_h$constants$39.GetOEMCP$MH();
    }
    public static @C("UINT") int GetOEMCP () {
        try {
            return (int)cfapi_h$constants$39.GetOEMCP$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCPInfo$MH() {
        return cfapi_h$constants$39.GetCPInfo$MH();
    }
    public static @C("BOOL") int GetCPInfo (@C("UINT") int CodePage, @C("LPCPINFO") Addressable lpCPInfo) {
        try {
            return (int)cfapi_h$constants$39.GetCPInfo$MH().invokeExact(CodePage, lpCPInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCPInfoExA$MH() {
        return cfapi_h$constants$39.GetCPInfoExA$MH();
    }
    public static @C("BOOL") int GetCPInfoExA (@C("UINT") int CodePage, @C("DWORD") int dwFlags, @C("LPCPINFOEXA") Addressable lpCPInfoEx) {
        try {
            return (int)cfapi_h$constants$39.GetCPInfoExA$MH().invokeExact(CodePage, dwFlags, lpCPInfoEx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCPInfoExW$MH() {
        return cfapi_h$constants$39.GetCPInfoExW$MH();
    }
    public static @C("BOOL") int GetCPInfoExW (@C("UINT") int CodePage, @C("DWORD") int dwFlags, @C("LPCPINFOEXW") Addressable lpCPInfoEx) {
        try {
            return (int)cfapi_h$constants$39.GetCPInfoExW$MH().invokeExact(CodePage, dwFlags, lpCPInfoEx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CompareStringA$MH() {
        return cfapi_h$constants$39.CompareStringA$MH();
    }
    public static @C("int") int CompareStringA (@C("LCID") int Locale, @C("DWORD") int dwCmpFlags, @C("PCNZCH") Addressable lpString1, @C("int") int cchCount1, @C("PCNZCH") Addressable lpString2, @C("int") int cchCount2) {
        try {
            return (int)cfapi_h$constants$39.CompareStringA$MH().invokeExact(Locale, dwCmpFlags, lpString1.address(), cchCount1, lpString2.address(), cchCount2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNLSString$MH() {
        return cfapi_h$constants$39.FindNLSString$MH();
    }
    public static @C("int") int FindNLSString (@C("LCID") int Locale, @C("DWORD") int dwFindNLSStringFlags, @C("LPCWSTR") Addressable lpStringSource, @C("int") int cchSource, @C("LPCWSTR") Addressable lpStringValue, @C("int") int cchValue, @C("LPINT") Addressable pcchFound) {
        try {
            return (int)cfapi_h$constants$39.FindNLSString$MH().invokeExact(Locale, dwFindNLSStringFlags, lpStringSource.address(), cchSource, lpStringValue.address(), cchValue, pcchFound.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LCMapStringW$MH() {
        return cfapi_h$constants$39.LCMapStringW$MH();
    }
    public static @C("int") int LCMapStringW (@C("LCID") int Locale, @C("DWORD") int dwMapFlags, @C("LPCWSTR") Addressable lpSrcStr, @C("int") int cchSrc, @C("LPWSTR") Addressable lpDestStr, @C("int") int cchDest) {
        try {
            return (int)cfapi_h$constants$39.LCMapStringW$MH().invokeExact(Locale, dwMapFlags, lpSrcStr.address(), cchSrc, lpDestStr.address(), cchDest);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LCMapStringA$MH() {
        return cfapi_h$constants$39.LCMapStringA$MH();
    }
    public static @C("int") int LCMapStringA (@C("LCID") int Locale, @C("DWORD") int dwMapFlags, @C("LPCSTR") Addressable lpSrcStr, @C("int") int cchSrc, @C("LPSTR") Addressable lpDestStr, @C("int") int cchDest) {
        try {
            return (int)cfapi_h$constants$39.LCMapStringA$MH().invokeExact(Locale, dwMapFlags, lpSrcStr.address(), cchSrc, lpDestStr.address(), cchDest);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLocaleInfoW$MH() {
        return cfapi_h$constants$39.GetLocaleInfoW$MH();
    }
    public static @C("int") int GetLocaleInfoW (@C("LCID") int Locale, @C("LCTYPE") int LCType, @C("LPWSTR") Addressable lpLCData, @C("int") int cchData) {
        try {
            return (int)cfapi_h$constants$39.GetLocaleInfoW$MH().invokeExact(Locale, LCType, lpLCData.address(), cchData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLocaleInfoA$MH() {
        return cfapi_h$constants$39.GetLocaleInfoA$MH();
    }
    public static @C("int") int GetLocaleInfoA (@C("LCID") int Locale, @C("LCTYPE") int LCType, @C("LPSTR") Addressable lpLCData, @C("int") int cchData) {
        try {
            return (int)cfapi_h$constants$39.GetLocaleInfoA$MH().invokeExact(Locale, LCType, lpLCData.address(), cchData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetLocaleInfoA$MH() {
        return cfapi_h$constants$39.SetLocaleInfoA$MH();
    }
    public static @C("BOOL") int SetLocaleInfoA (@C("LCID") int Locale, @C("LCTYPE") int LCType, @C("LPCSTR") Addressable lpLCData) {
        try {
            return (int)cfapi_h$constants$39.SetLocaleInfoA$MH().invokeExact(Locale, LCType, lpLCData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetLocaleInfoW$MH() {
        return cfapi_h$constants$39.SetLocaleInfoW$MH();
    }
    public static @C("BOOL") int SetLocaleInfoW (@C("LCID") int Locale, @C("LCTYPE") int LCType, @C("LPCWSTR") Addressable lpLCData) {
        try {
            return (int)cfapi_h$constants$39.SetLocaleInfoW$MH().invokeExact(Locale, LCType, lpLCData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCalendarInfoA$MH() {
        return cfapi_h$constants$39.GetCalendarInfoA$MH();
    }
    public static @C("int") int GetCalendarInfoA (@C("LCID") int Locale, @C("CALID") int Calendar, @C("CALTYPE") int CalType, @C("LPSTR") Addressable lpCalData, @C("int") int cchData, @C("LPDWORD") Addressable lpValue) {
        try {
            return (int)cfapi_h$constants$39.GetCalendarInfoA$MH().invokeExact(Locale, Calendar, CalType, lpCalData.address(), cchData, lpValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCalendarInfoW$MH() {
        return cfapi_h$constants$39.GetCalendarInfoW$MH();
    }
    public static @C("int") int GetCalendarInfoW (@C("LCID") int Locale, @C("CALID") int Calendar, @C("CALTYPE") int CalType, @C("LPWSTR") Addressable lpCalData, @C("int") int cchData, @C("LPDWORD") Addressable lpValue) {
        try {
            return (int)cfapi_h$constants$39.GetCalendarInfoW$MH().invokeExact(Locale, Calendar, CalType, lpCalData.address(), cchData, lpValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCalendarInfoA$MH() {
        return cfapi_h$constants$39.SetCalendarInfoA$MH();
    }
    public static @C("BOOL") int SetCalendarInfoA (@C("LCID") int Locale, @C("CALID") int Calendar, @C("CALTYPE") int CalType, @C("LPCSTR") Addressable lpCalData) {
        try {
            return (int)cfapi_h$constants$39.SetCalendarInfoA$MH().invokeExact(Locale, Calendar, CalType, lpCalData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCalendarInfoW$MH() {
        return cfapi_h$constants$39.SetCalendarInfoW$MH();
    }
    public static @C("BOOL") int SetCalendarInfoW (@C("LCID") int Locale, @C("CALID") int Calendar, @C("CALTYPE") int CalType, @C("LPCWSTR") Addressable lpCalData) {
        try {
            return (int)cfapi_h$constants$39.SetCalendarInfoW$MH().invokeExact(Locale, Calendar, CalType, lpCalData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadStringByReference$MH() {
        return cfapi_h$constants$39.LoadStringByReference$MH();
    }
    public static @C("BOOL") int LoadStringByReference (@C("DWORD") int Flags, @C("PCWSTR") Addressable Language, @C("PCWSTR") Addressable SourceString, @C("PWSTR") Addressable Buffer, @C("ULONG") int cchBuffer, @C("PCWSTR") Addressable Directory, @C("PULONG") Addressable pcchBufferOut) {
        try {
            return (int)cfapi_h$constants$39.LoadStringByReference$MH().invokeExact(Flags, Language.address(), SourceString.address(), Buffer.address(), cchBuffer, Directory.address(), pcchBufferOut.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsDBCSLeadByte$MH() {
        return cfapi_h$constants$39.IsDBCSLeadByte$MH();
    }
    public static @C("BOOL") int IsDBCSLeadByte (@C("BYTE") byte TestChar) {
        try {
            return (int)cfapi_h$constants$39.IsDBCSLeadByte$MH().invokeExact(TestChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsDBCSLeadByteEx$MH() {
        return cfapi_h$constants$39.IsDBCSLeadByteEx$MH();
    }
    public static @C("BOOL") int IsDBCSLeadByteEx (@C("UINT") int CodePage, @C("BYTE") byte TestChar) {
        try {
            return (int)cfapi_h$constants$39.IsDBCSLeadByteEx$MH().invokeExact(CodePage, TestChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocaleNameToLCID$MH() {
        return cfapi_h$constants$39.LocaleNameToLCID$MH();
    }
    public static @C("LCID") int LocaleNameToLCID (@C("LPCWSTR") Addressable lpName, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.LocaleNameToLCID$MH().invokeExact(lpName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LCIDToLocaleName$MH() {
        return cfapi_h$constants$39.LCIDToLocaleName$MH();
    }
    public static @C("int") int LCIDToLocaleName (@C("LCID") int Locale, @C("LPWSTR") Addressable lpName, @C("int") int cchName, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.LCIDToLocaleName$MH().invokeExact(Locale, lpName.address(), cchName, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDurationFormat$MH() {
        return cfapi_h$constants$39.GetDurationFormat$MH();
    }
    public static @C("int") int GetDurationFormat (@C("LCID") int Locale, @C("DWORD") int dwFlags, @C("const SYSTEMTIME*") Addressable lpDuration, @C("ULONGLONG") long ullDuration, @C("LPCWSTR") Addressable lpFormat, @C("LPWSTR") Addressable lpDurationStr, @C("int") int cchDuration) {
        try {
            return (int)cfapi_h$constants$39.GetDurationFormat$MH().invokeExact(Locale, dwFlags, lpDuration.address(), ullDuration, lpFormat.address(), lpDurationStr.address(), cchDuration);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumberFormatA$MH() {
        return cfapi_h$constants$39.GetNumberFormatA$MH();
    }
    public static @C("int") int GetNumberFormatA (@C("LCID") int Locale, @C("DWORD") int dwFlags, @C("LPCSTR") Addressable lpValue, @C("const NUMBERFMTA*") Addressable lpFormat, @C("LPSTR") Addressable lpNumberStr, @C("int") int cchNumber) {
        try {
            return (int)cfapi_h$constants$39.GetNumberFormatA$MH().invokeExact(Locale, dwFlags, lpValue.address(), lpFormat.address(), lpNumberStr.address(), cchNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumberFormatW$MH() {
        return cfapi_h$constants$39.GetNumberFormatW$MH();
    }
    public static @C("int") int GetNumberFormatW (@C("LCID") int Locale, @C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpValue, @C("const NUMBERFMTW*") Addressable lpFormat, @C("LPWSTR") Addressable lpNumberStr, @C("int") int cchNumber) {
        try {
            return (int)cfapi_h$constants$39.GetNumberFormatW$MH().invokeExact(Locale, dwFlags, lpValue.address(), lpFormat.address(), lpNumberStr.address(), cchNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrencyFormatA$MH() {
        return cfapi_h$constants$39.GetCurrencyFormatA$MH();
    }
    public static @C("int") int GetCurrencyFormatA (@C("LCID") int Locale, @C("DWORD") int dwFlags, @C("LPCSTR") Addressable lpValue, @C("const CURRENCYFMTA*") Addressable lpFormat, @C("LPSTR") Addressable lpCurrencyStr, @C("int") int cchCurrency) {
        try {
            return (int)cfapi_h$constants$39.GetCurrencyFormatA$MH().invokeExact(Locale, dwFlags, lpValue.address(), lpFormat.address(), lpCurrencyStr.address(), cchCurrency);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrencyFormatW$MH() {
        return cfapi_h$constants$39.GetCurrencyFormatW$MH();
    }
    public static @C("int") int GetCurrencyFormatW (@C("LCID") int Locale, @C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpValue, @C("const CURRENCYFMTW*") Addressable lpFormat, @C("LPWSTR") Addressable lpCurrencyStr, @C("int") int cchCurrency) {
        try {
            return (int)cfapi_h$constants$39.GetCurrencyFormatW$MH().invokeExact(Locale, dwFlags, lpValue.address(), lpFormat.address(), lpCurrencyStr.address(), cchCurrency);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumCalendarInfoA$MH() {
        return cfapi_h$constants$39.EnumCalendarInfoA$MH();
    }
    public static @C("BOOL") int EnumCalendarInfoA (@C("CALINFO_ENUMPROCA") Addressable lpCalInfoEnumProc, @C("LCID") int Locale, @C("CALID") int Calendar, @C("CALTYPE") int CalType) {
        try {
            return (int)cfapi_h$constants$39.EnumCalendarInfoA$MH().invokeExact(lpCalInfoEnumProc.address(), Locale, Calendar, CalType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumCalendarInfoW$MH() {
        return cfapi_h$constants$39.EnumCalendarInfoW$MH();
    }
    public static @C("BOOL") int EnumCalendarInfoW (@C("CALINFO_ENUMPROCW") Addressable lpCalInfoEnumProc, @C("LCID") int Locale, @C("CALID") int Calendar, @C("CALTYPE") int CalType) {
        try {
            return (int)cfapi_h$constants$39.EnumCalendarInfoW$MH().invokeExact(lpCalInfoEnumProc.address(), Locale, Calendar, CalType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumCalendarInfoExA$MH() {
        return cfapi_h$constants$39.EnumCalendarInfoExA$MH();
    }
    public static @C("BOOL") int EnumCalendarInfoExA (@C("CALINFO_ENUMPROCEXA") Addressable lpCalInfoEnumProcEx, @C("LCID") int Locale, @C("CALID") int Calendar, @C("CALTYPE") int CalType) {
        try {
            return (int)cfapi_h$constants$39.EnumCalendarInfoExA$MH().invokeExact(lpCalInfoEnumProcEx.address(), Locale, Calendar, CalType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumCalendarInfoExW$MH() {
        return cfapi_h$constants$39.EnumCalendarInfoExW$MH();
    }
    public static @C("BOOL") int EnumCalendarInfoExW (@C("CALINFO_ENUMPROCEXW") Addressable lpCalInfoEnumProcEx, @C("LCID") int Locale, @C("CALID") int Calendar, @C("CALTYPE") int CalType) {
        try {
            return (int)cfapi_h$constants$39.EnumCalendarInfoExW$MH().invokeExact(lpCalInfoEnumProcEx.address(), Locale, Calendar, CalType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumTimeFormatsA$MH() {
        return cfapi_h$constants$39.EnumTimeFormatsA$MH();
    }
    public static @C("BOOL") int EnumTimeFormatsA (@C("TIMEFMT_ENUMPROCA") Addressable lpTimeFmtEnumProc, @C("LCID") int Locale, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumTimeFormatsA$MH().invokeExact(lpTimeFmtEnumProc.address(), Locale, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumTimeFormatsW$MH() {
        return cfapi_h$constants$39.EnumTimeFormatsW$MH();
    }
    public static @C("BOOL") int EnumTimeFormatsW (@C("TIMEFMT_ENUMPROCW") Addressable lpTimeFmtEnumProc, @C("LCID") int Locale, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumTimeFormatsW$MH().invokeExact(lpTimeFmtEnumProc.address(), Locale, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDateFormatsA$MH() {
        return cfapi_h$constants$39.EnumDateFormatsA$MH();
    }
    public static @C("BOOL") int EnumDateFormatsA (@C("DATEFMT_ENUMPROCA") Addressable lpDateFmtEnumProc, @C("LCID") int Locale, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumDateFormatsA$MH().invokeExact(lpDateFmtEnumProc.address(), Locale, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDateFormatsW$MH() {
        return cfapi_h$constants$39.EnumDateFormatsW$MH();
    }
    public static @C("BOOL") int EnumDateFormatsW (@C("DATEFMT_ENUMPROCW") Addressable lpDateFmtEnumProc, @C("LCID") int Locale, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumDateFormatsW$MH().invokeExact(lpDateFmtEnumProc.address(), Locale, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDateFormatsExA$MH() {
        return cfapi_h$constants$39.EnumDateFormatsExA$MH();
    }
    public static @C("BOOL") int EnumDateFormatsExA (@C("DATEFMT_ENUMPROCEXA") Addressable lpDateFmtEnumProcEx, @C("LCID") int Locale, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumDateFormatsExA$MH().invokeExact(lpDateFmtEnumProcEx.address(), Locale, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDateFormatsExW$MH() {
        return cfapi_h$constants$39.EnumDateFormatsExW$MH();
    }
    public static @C("BOOL") int EnumDateFormatsExW (@C("DATEFMT_ENUMPROCEXW") Addressable lpDateFmtEnumProcEx, @C("LCID") int Locale, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.EnumDateFormatsExW$MH().invokeExact(lpDateFmtEnumProcEx.address(), Locale, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsValidLanguageGroup$MH() {
        return cfapi_h$constants$39.IsValidLanguageGroup$MH();
    }
    public static @C("BOOL") int IsValidLanguageGroup (@C("LGRPID") int LanguageGroup, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.IsValidLanguageGroup$MH().invokeExact(LanguageGroup, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNLSVersion$MH() {
        return cfapi_h$constants$39.GetNLSVersion$MH();
    }
    public static @C("BOOL") int GetNLSVersion (@C("NLS_FUNCTION") int Function, @C("LCID") int Locale, @C("LPNLSVERSIONINFO") Addressable lpVersionInformation) {
        try {
            return (int)cfapi_h$constants$39.GetNLSVersion$MH().invokeExact(Function, Locale, lpVersionInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsValidLocale$MH() {
        return cfapi_h$constants$39.IsValidLocale$MH();
    }
    public static @C("BOOL") int IsValidLocale (@C("LCID") int Locale, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$39.IsValidLocale$MH().invokeExact(Locale, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGeoInfoA$MH() {
        return cfapi_h$constants$39.GetGeoInfoA$MH();
    }
    public static @C("int") int GetGeoInfoA (@C("GEOID") int Location, @C("GEOTYPE") int GeoType, @C("LPSTR") Addressable lpGeoData, @C("int") int cchData, @C("LANGID") short LangId) {
        try {
            return (int)cfapi_h$constants$39.GetGeoInfoA$MH().invokeExact(Location, GeoType, lpGeoData.address(), cchData, LangId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGeoInfoW$MH() {
        return cfapi_h$constants$39.GetGeoInfoW$MH();
    }
    public static @C("int") int GetGeoInfoW (@C("GEOID") int Location, @C("GEOTYPE") int GeoType, @C("LPWSTR") Addressable lpGeoData, @C("int") int cchData, @C("LANGID") short LangId) {
        try {
            return (int)cfapi_h$constants$39.GetGeoInfoW$MH().invokeExact(Location, GeoType, lpGeoData.address(), cchData, LangId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGeoInfoEx$MH() {
        return cfapi_h$constants$39.GetGeoInfoEx$MH();
    }
    public static @C("int") int GetGeoInfoEx (@C("PWSTR") Addressable location, @C("GEOTYPE") int geoType, @C("PWSTR") Addressable geoData, @C("int") int geoDataCount) {
        try {
            return (int)cfapi_h$constants$39.GetGeoInfoEx$MH().invokeExact(location.address(), geoType, geoData.address(), geoDataCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemGeoID$MH() {
        return cfapi_h$constants$39.EnumSystemGeoID$MH();
    }
    public static @C("BOOL") int EnumSystemGeoID (@C("GEOCLASS") int GeoClass, @C("GEOID") int ParentGeoId, @C("GEO_ENUMPROC") Addressable lpGeoEnumProc) {
        try {
            return (int)cfapi_h$constants$39.EnumSystemGeoID$MH().invokeExact(GeoClass, ParentGeoId, lpGeoEnumProc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemGeoNames$MH() {
        return cfapi_h$constants$39.EnumSystemGeoNames$MH();
    }
    public static @C("BOOL") int EnumSystemGeoNames (@C("GEOCLASS") int geoClass, @C("GEO_ENUMNAMEPROC") Addressable geoEnumProc, @C("LPARAM") long data) {
        try {
            return (int)cfapi_h$constants$39.EnumSystemGeoNames$MH().invokeExact(geoClass, geoEnumProc.address(), data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserGeoID$MH() {
        return cfapi_h$constants$39.GetUserGeoID$MH();
    }
    public static @C("GEOID") int GetUserGeoID (@C("GEOCLASS") int GeoClass) {
        try {
            return (int)cfapi_h$constants$39.GetUserGeoID$MH().invokeExact(GeoClass);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserDefaultGeoName$MH() {
        return cfapi_h$constants$39.GetUserDefaultGeoName$MH();
    }
    public static @C("int") int GetUserDefaultGeoName (@C("LPWSTR") Addressable geoName, @C("int") int geoNameCount) {
        try {
            return (int)cfapi_h$constants$39.GetUserDefaultGeoName$MH().invokeExact(geoName.address(), geoNameCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUserGeoID$MH() {
        return cfapi_h$constants$39.SetUserGeoID$MH();
    }
    public static @C("BOOL") int SetUserGeoID (@C("GEOID") int GeoId) {
        try {
            return (int)cfapi_h$constants$39.SetUserGeoID$MH().invokeExact(GeoId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUserGeoName$MH() {
        return cfapi_h$constants$39.SetUserGeoName$MH();
    }
    public static @C("BOOL") int SetUserGeoName (@C("PWSTR") Addressable geoName) {
        try {
            return (int)cfapi_h$constants$39.SetUserGeoName$MH().invokeExact(geoName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ConvertDefaultLocale$MH() {
        return cfapi_h$constants$39.ConvertDefaultLocale$MH();
    }
    public static @C("LCID") int ConvertDefaultLocale (@C("LCID") int Locale) {
        try {
            return (int)cfapi_h$constants$39.ConvertDefaultLocale$MH().invokeExact(Locale);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemDefaultUILanguage$MH() {
        return cfapi_h$constants$39.GetSystemDefaultUILanguage$MH();
    }
    public static @C("LANGID") short GetSystemDefaultUILanguage () {
        try {
            return (short)cfapi_h$constants$39.GetSystemDefaultUILanguage$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadLocale$MH() {
        return cfapi_h$constants$39.GetThreadLocale$MH();
    }
    public static @C("LCID") int GetThreadLocale () {
        try {
            return (int)cfapi_h$constants$39.GetThreadLocale$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadLocale$MH() {
        return cfapi_h$constants$39.SetThreadLocale$MH();
    }
}


