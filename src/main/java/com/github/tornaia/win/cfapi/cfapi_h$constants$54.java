// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$54 extends cfapi_h$constants$53 {

    /* package-private */ cfapi_h$constants$54() {}
    static final MemoryLayout _ROOT_INFO_LUID$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ROOT_INFO_LUID$LowPart$LAYOUT() { return _ROOT_INFO_LUID$LowPart$LAYOUT_; }

    static final VarHandle _ROOT_INFO_LUID$LowPart$VH_ = _ROOT_INFO_LUID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _ROOT_INFO_LUID$LowPart$VH() { return _ROOT_INFO_LUID$LowPart$VH_; }

    static final MemoryLayout _ROOT_INFO_LUID$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ROOT_INFO_LUID$HighPart$LAYOUT() { return _ROOT_INFO_LUID$HighPart$LAYOUT_; }

    static final VarHandle _ROOT_INFO_LUID$HighPart$VH_ = _ROOT_INFO_LUID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _ROOT_INFO_LUID$HighPart$VH() { return _ROOT_INFO_LUID$HighPart$VH_; }

    static final MemoryLayout _CRYPT_SMART_CARD_ROOT_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(16, C_CHAR).withName("rgbCardID"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("luid")
    ).withName("_CRYPT_SMART_CARD_ROOT_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SMART_CARD_ROOT_INFO$struct$LAYOUT() { return _CRYPT_SMART_CARD_ROOT_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hKeyBase"),
        C_POINTER.withName("pvBase"),
        C_POINTER.withName("pvSystemStore"),
        C_POINTER.withName("pszSystemStore"),
        C_POINTER.withName("pwszSystemStore")
    ).withName("_CERT_SYSTEM_STORE_RELOCATE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$struct$LAYOUT() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$hKeyBase$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$hKeyBase$LAYOUT() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$hKeyBase$LAYOUT_; }

    static final VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$hKeyBase$VH_ = MemoryHandles.asAddressVarHandle(_CERT_SYSTEM_STORE_RELOCATE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hKeyBase")));
    static final java.lang.invoke.VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$hKeyBase$VH() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$hKeyBase$VH_; }

    static final MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$pvBase$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$pvBase$LAYOUT() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$pvBase$LAYOUT_; }

    static final VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$pvBase$VH_ = MemoryHandles.asAddressVarHandle(_CERT_SYSTEM_STORE_RELOCATE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvBase")));
    static final java.lang.invoke.VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$pvBase$VH() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$pvBase$VH_; }

    static final MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$pvSystemStore$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$pvSystemStore$LAYOUT() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$pvSystemStore$LAYOUT_; }

    static final VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$pvSystemStore$VH_ = MemoryHandles.asAddressVarHandle(_CERT_SYSTEM_STORE_RELOCATE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvSystemStore")));
    static final java.lang.invoke.VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$pvSystemStore$VH() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$pvSystemStore$VH_; }

    static final MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$pszSystemStore$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$pszSystemStore$LAYOUT() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$pszSystemStore$LAYOUT_; }

    static final VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$pszSystemStore$VH_ = MemoryHandles.asAddressVarHandle(_CERT_SYSTEM_STORE_RELOCATE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszSystemStore")));
    static final java.lang.invoke.VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$pszSystemStore$VH() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$pszSystemStore$VH_; }

    static final MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$pwszSystemStore$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_SYSTEM_STORE_RELOCATE_PARA$pwszSystemStore$LAYOUT() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$pwszSystemStore$LAYOUT_; }

    static final VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$pwszSystemStore$VH_ = MemoryHandles.asAddressVarHandle(_CERT_SYSTEM_STORE_RELOCATE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszSystemStore")));
    static final java.lang.invoke.VarHandle _CERT_SYSTEM_STORE_RELOCATE_PARA$pwszSystemStore$VH() { return _CERT_SYSTEM_STORE_RELOCATE_PARA$pwszSystemStore$VH_; }

    static final MemoryLayout _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hKeyBase"),
        C_POINTER.withName("pwszRegPath")
    ).withName("_CERT_REGISTRY_STORE_CLIENT_GPT_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$struct$LAYOUT() { return _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$hKeyBase$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$hKeyBase$LAYOUT() { return _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$hKeyBase$LAYOUT_; }

    static final VarHandle _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$hKeyBase$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REGISTRY_STORE_CLIENT_GPT_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hKeyBase")));
    static final java.lang.invoke.VarHandle _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$hKeyBase$VH() { return _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$hKeyBase$VH_; }

    static final MemoryLayout _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$pwszRegPath$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$pwszRegPath$LAYOUT() { return _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$pwszRegPath$LAYOUT_; }

    static final VarHandle _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$pwszRegPath$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REGISTRY_STORE_CLIENT_GPT_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszRegPath")));
    static final java.lang.invoke.VarHandle _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$pwszRegPath$VH() { return _CERT_REGISTRY_STORE_CLIENT_GPT_PARA$pwszRegPath$VH_; }

    static final MemoryLayout _CERT_REGISTRY_STORE_ROAMING_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hKey"),
        C_POINTER.withName("pwszStoreDirectory")
    ).withName("_CERT_REGISTRY_STORE_ROAMING_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CERT_REGISTRY_STORE_ROAMING_PARA$struct$LAYOUT() { return _CERT_REGISTRY_STORE_ROAMING_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CERT_REGISTRY_STORE_ROAMING_PARA$hKey$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REGISTRY_STORE_ROAMING_PARA$hKey$LAYOUT() { return _CERT_REGISTRY_STORE_ROAMING_PARA$hKey$LAYOUT_; }

    static final VarHandle _CERT_REGISTRY_STORE_ROAMING_PARA$hKey$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REGISTRY_STORE_ROAMING_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hKey")));
    static final java.lang.invoke.VarHandle _CERT_REGISTRY_STORE_ROAMING_PARA$hKey$VH() { return _CERT_REGISTRY_STORE_ROAMING_PARA$hKey$VH_; }

    static final MemoryLayout _CERT_REGISTRY_STORE_ROAMING_PARA$pwszStoreDirectory$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REGISTRY_STORE_ROAMING_PARA$pwszStoreDirectory$LAYOUT() { return _CERT_REGISTRY_STORE_ROAMING_PARA$pwszStoreDirectory$LAYOUT_; }

    static final VarHandle _CERT_REGISTRY_STORE_ROAMING_PARA$pwszStoreDirectory$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REGISTRY_STORE_ROAMING_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszStoreDirectory")));
    static final java.lang.invoke.VarHandle _CERT_REGISTRY_STORE_ROAMING_PARA$pwszStoreDirectory$VH() { return _CERT_REGISTRY_STORE_ROAMING_PARA$pwszStoreDirectory$VH_; }

    static final MemoryLayout _CERT_LDAP_STORE_OPENED_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pvLdapSessionHandle"),
        C_POINTER.withName("pwszLdapUrl")
    ).withName("_CERT_LDAP_STORE_OPENED_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CERT_LDAP_STORE_OPENED_PARA$struct$LAYOUT() { return _CERT_LDAP_STORE_OPENED_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CERT_LDAP_STORE_OPENED_PARA$pvLdapSessionHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_LDAP_STORE_OPENED_PARA$pvLdapSessionHandle$LAYOUT() { return _CERT_LDAP_STORE_OPENED_PARA$pvLdapSessionHandle$LAYOUT_; }

    static final VarHandle _CERT_LDAP_STORE_OPENED_PARA$pvLdapSessionHandle$VH_ = MemoryHandles.asAddressVarHandle(_CERT_LDAP_STORE_OPENED_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvLdapSessionHandle")));
    static final java.lang.invoke.VarHandle _CERT_LDAP_STORE_OPENED_PARA$pvLdapSessionHandle$VH() { return _CERT_LDAP_STORE_OPENED_PARA$pvLdapSessionHandle$VH_; }

    static final MemoryLayout _CERT_LDAP_STORE_OPENED_PARA$pwszLdapUrl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_LDAP_STORE_OPENED_PARA$pwszLdapUrl$LAYOUT() { return _CERT_LDAP_STORE_OPENED_PARA$pwszLdapUrl$LAYOUT_; }

    static final VarHandle _CERT_LDAP_STORE_OPENED_PARA$pwszLdapUrl$VH_ = MemoryHandles.asAddressVarHandle(_CERT_LDAP_STORE_OPENED_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszLdapUrl")));
    static final java.lang.invoke.VarHandle _CERT_LDAP_STORE_OPENED_PARA$pwszLdapUrl$VH() { return _CERT_LDAP_STORE_OPENED_PARA$pwszLdapUrl$VH_; }

    static final FunctionDescriptor CertOpenStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONGLONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertOpenStore$FUNC() { return CertOpenStore$FUNC_; }

    static final MethodHandle CertOpenStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertOpenStore",
        "(Ljdk/incubator/foreign/MemoryAddress;IJILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertOpenStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertOpenStore$MH() { return CertOpenStore$MH_; }

    static final MemoryLayout _CERT_STORE_PROV_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("cStoreProvFunc"),
        C_POINTER.withName("rgpvStoreProvFunc"),
        C_POINTER.withName("hStoreProv"),
        C_LONG.withName("dwStoreProvFlags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hStoreProvFuncAddr2")
    ).withName("_CERT_STORE_PROV_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_INFO$struct$LAYOUT() { return _CERT_STORE_PROV_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_STORE_PROV_INFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_INFO$cbSize$LAYOUT() { return _CERT_STORE_PROV_INFO$cbSize$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_INFO$cbSize$VH_ = _CERT_STORE_PROV_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_INFO$cbSize$VH() { return _CERT_STORE_PROV_INFO$cbSize$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_INFO$cStoreProvFunc$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_INFO$cStoreProvFunc$LAYOUT() { return _CERT_STORE_PROV_INFO$cStoreProvFunc$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_INFO$cStoreProvFunc$VH_ = _CERT_STORE_PROV_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cStoreProvFunc"));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_INFO$cStoreProvFunc$VH() { return _CERT_STORE_PROV_INFO$cStoreProvFunc$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_INFO$rgpvStoreProvFunc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_INFO$rgpvStoreProvFunc$LAYOUT() { return _CERT_STORE_PROV_INFO$rgpvStoreProvFunc$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_INFO$rgpvStoreProvFunc$VH_ = MemoryHandles.asAddressVarHandle(_CERT_STORE_PROV_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpvStoreProvFunc")));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_INFO$rgpvStoreProvFunc$VH() { return _CERT_STORE_PROV_INFO$rgpvStoreProvFunc$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_INFO$hStoreProv$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_INFO$hStoreProv$LAYOUT() { return _CERT_STORE_PROV_INFO$hStoreProv$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_INFO$hStoreProv$VH_ = MemoryHandles.asAddressVarHandle(_CERT_STORE_PROV_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hStoreProv")));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_INFO$hStoreProv$VH() { return _CERT_STORE_PROV_INFO$hStoreProv$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_INFO$dwStoreProvFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_INFO$dwStoreProvFlags$LAYOUT() { return _CERT_STORE_PROV_INFO$dwStoreProvFlags$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_INFO$dwStoreProvFlags$VH_ = _CERT_STORE_PROV_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStoreProvFlags"));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_INFO$dwStoreProvFlags$VH() { return _CERT_STORE_PROV_INFO$dwStoreProvFlags$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_INFO$hStoreProvFuncAddr2$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_INFO$hStoreProvFuncAddr2$LAYOUT() { return _CERT_STORE_PROV_INFO$hStoreProvFuncAddr2$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_INFO$hStoreProvFuncAddr2$VH_ = MemoryHandles.asAddressVarHandle(_CERT_STORE_PROV_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hStoreProvFuncAddr2")));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_INFO$hStoreProvFuncAddr2$VH() { return _CERT_STORE_PROV_INFO$hStoreProvFuncAddr2$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_FIND_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwMsgAndCertEncodingType"),
        C_LONG.withName("dwFindFlags"),
        C_LONG.withName("dwFindType"),
        C_POINTER.withName("pvFindPara")
    ).withName("_CERT_STORE_PROV_FIND_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_FIND_INFO$struct$LAYOUT() { return _CERT_STORE_PROV_FIND_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_STORE_PROV_FIND_INFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_FIND_INFO$cbSize$LAYOUT() { return _CERT_STORE_PROV_FIND_INFO$cbSize$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_FIND_INFO$cbSize$VH_ = _CERT_STORE_PROV_FIND_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_FIND_INFO$cbSize$VH() { return _CERT_STORE_PROV_FIND_INFO$cbSize$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_FIND_INFO$dwMsgAndCertEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_FIND_INFO$dwMsgAndCertEncodingType$LAYOUT() { return _CERT_STORE_PROV_FIND_INFO$dwMsgAndCertEncodingType$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_FIND_INFO$dwMsgAndCertEncodingType$VH_ = _CERT_STORE_PROV_FIND_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMsgAndCertEncodingType"));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_FIND_INFO$dwMsgAndCertEncodingType$VH() { return _CERT_STORE_PROV_FIND_INFO$dwMsgAndCertEncodingType$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_FIND_INFO$dwFindFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_FIND_INFO$dwFindFlags$LAYOUT() { return _CERT_STORE_PROV_FIND_INFO$dwFindFlags$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_FIND_INFO$dwFindFlags$VH_ = _CERT_STORE_PROV_FIND_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFindFlags"));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_FIND_INFO$dwFindFlags$VH() { return _CERT_STORE_PROV_FIND_INFO$dwFindFlags$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_FIND_INFO$dwFindType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_FIND_INFO$dwFindType$LAYOUT() { return _CERT_STORE_PROV_FIND_INFO$dwFindType$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_FIND_INFO$dwFindType$VH_ = _CERT_STORE_PROV_FIND_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFindType"));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_FIND_INFO$dwFindType$VH() { return _CERT_STORE_PROV_FIND_INFO$dwFindType$VH_; }

    static final MemoryLayout _CERT_STORE_PROV_FIND_INFO$pvFindPara$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_STORE_PROV_FIND_INFO$pvFindPara$LAYOUT() { return _CERT_STORE_PROV_FIND_INFO$pvFindPara$LAYOUT_; }

    static final VarHandle _CERT_STORE_PROV_FIND_INFO$pvFindPara$VH_ = MemoryHandles.asAddressVarHandle(_CERT_STORE_PROV_FIND_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvFindPara")));
    static final java.lang.invoke.VarHandle _CERT_STORE_PROV_FIND_INFO$pvFindPara$VH() { return _CERT_STORE_PROV_FIND_INFO$pvFindPara$VH_; }

    static final FunctionDescriptor CertDuplicateStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertDuplicateStore$FUNC() { return CertDuplicateStore$FUNC_; }

    static final MethodHandle CertDuplicateStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertDuplicateStore",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertDuplicateStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertDuplicateStore$MH() { return CertDuplicateStore$MH_; }

    static final FunctionDescriptor CertSaveStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSaveStore$FUNC() { return CertSaveStore$FUNC_; }

    static final MethodHandle CertSaveStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSaveStore",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;I)I",
        CertSaveStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSaveStore$MH() { return CertSaveStore$MH_; }

    static final FunctionDescriptor CertCloseStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertCloseStore$FUNC() { return CertCloseStore$FUNC_; }

    static final MethodHandle CertCloseStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertCloseStore",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertCloseStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertCloseStore$MH() { return CertCloseStore$MH_; }

    static final FunctionDescriptor CertGetSubjectCertificateFromStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetSubjectCertificateFromStore$FUNC() { return CertGetSubjectCertificateFromStore$FUNC_; }

    static final MethodHandle CertGetSubjectCertificateFromStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetSubjectCertificateFromStore",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertGetSubjectCertificateFromStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetSubjectCertificateFromStore$MH() { return CertGetSubjectCertificateFromStore$MH_; }

    static final FunctionDescriptor CertEnumCertificatesInStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumCertificatesInStore$FUNC() { return CertEnumCertificatesInStore$FUNC_; }

    static final MethodHandle CertEnumCertificatesInStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumCertificatesInStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertEnumCertificatesInStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumCertificatesInStore$MH() { return CertEnumCertificatesInStore$MH_; }

    static final FunctionDescriptor CertFindCertificateInStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFindCertificateInStore$FUNC() { return CertFindCertificateInStore$FUNC_; }

    static final MethodHandle CertFindCertificateInStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFindCertificateInStore",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertFindCertificateInStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFindCertificateInStore$MH() { return CertFindCertificateInStore$MH_; }

    static final FunctionDescriptor CertGetIssuerCertificateFromStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetIssuerCertificateFromStore$FUNC() { return CertGetIssuerCertificateFromStore$FUNC_; }

    static final MethodHandle CertGetIssuerCertificateFromStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetIssuerCertificateFromStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertGetIssuerCertificateFromStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetIssuerCertificateFromStore$MH() { return CertGetIssuerCertificateFromStore$MH_; }

    static final FunctionDescriptor CertVerifySubjectCertificateContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertVerifySubjectCertificateContext$FUNC() { return CertVerifySubjectCertificateContext$FUNC_; }

    static final MethodHandle CertVerifySubjectCertificateContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertVerifySubjectCertificateContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertVerifySubjectCertificateContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertVerifySubjectCertificateContext$MH() { return CertVerifySubjectCertificateContext$MH_; }

    static final FunctionDescriptor CertDuplicateCertificateContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertDuplicateCertificateContext$FUNC() { return CertDuplicateCertificateContext$FUNC_; }

    static final MethodHandle CertDuplicateCertificateContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertDuplicateCertificateContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertDuplicateCertificateContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertDuplicateCertificateContext$MH() { return CertDuplicateCertificateContext$MH_; }

    static final FunctionDescriptor CertCreateCertificateContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertCreateCertificateContext$FUNC() { return CertCreateCertificateContext$FUNC_; }

    static final MethodHandle CertCreateCertificateContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertCreateCertificateContext",
        "(ILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CertCreateCertificateContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertCreateCertificateContext$MH() { return CertCreateCertificateContext$MH_; }

    static final FunctionDescriptor CertFreeCertificateContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFreeCertificateContext$FUNC() { return CertFreeCertificateContext$FUNC_; }

    static final MethodHandle CertFreeCertificateContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFreeCertificateContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CertFreeCertificateContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFreeCertificateContext$MH() { return CertFreeCertificateContext$MH_; }

    static final FunctionDescriptor CertSetCertificateContextProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSetCertificateContextProperty$FUNC() { return CertSetCertificateContextProperty$FUNC_; }

    static final MethodHandle CertSetCertificateContextProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSetCertificateContextProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CertSetCertificateContextProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSetCertificateContextProperty$MH() { return CertSetCertificateContextProperty$MH_; }

    static final FunctionDescriptor CertGetCertificateContextProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetCertificateContextProperty$FUNC() { return CertGetCertificateContextProperty$FUNC_; }

    static final MethodHandle CertGetCertificateContextProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetCertificateContextProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertGetCertificateContextProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetCertificateContextProperty$MH() { return CertGetCertificateContextProperty$MH_; }

    static final FunctionDescriptor CertEnumCertificateContextProperties$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumCertificateContextProperties$FUNC() { return CertEnumCertificateContextProperties$FUNC_; }

    static final MethodHandle CertEnumCertificateContextProperties$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumCertificateContextProperties",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertEnumCertificateContextProperties$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumCertificateContextProperties$MH() { return CertEnumCertificateContextProperties$MH_; }

    static final FunctionDescriptor CertCreateCTLEntryFromCertificateContextProperties$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertCreateCTLEntryFromCertificateContextProperties$FUNC() { return CertCreateCTLEntryFromCertificateContextProperties$FUNC_; }

    static final MethodHandle CertCreateCTLEntryFromCertificateContextProperties$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertCreateCTLEntryFromCertificateContextProperties",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertCreateCTLEntryFromCertificateContextProperties$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertCreateCTLEntryFromCertificateContextProperties$MH() { return CertCreateCTLEntryFromCertificateContextProperties$MH_; }

    static final FunctionDescriptor CertSetCertificateContextPropertiesFromCTLEntry$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSetCertificateContextPropertiesFromCTLEntry$FUNC() { return CertSetCertificateContextPropertiesFromCTLEntry$FUNC_; }

    static final MethodHandle CertSetCertificateContextPropertiesFromCTLEntry$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSetCertificateContextPropertiesFromCTLEntry",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertSetCertificateContextPropertiesFromCTLEntry$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSetCertificateContextPropertiesFromCTLEntry$MH() { return CertSetCertificateContextPropertiesFromCTLEntry$MH_; }

    static final FunctionDescriptor CertGetCRLFromStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetCRLFromStore$FUNC() { return CertGetCRLFromStore$FUNC_; }

    static final MethodHandle CertGetCRLFromStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetCRLFromStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertGetCRLFromStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetCRLFromStore$MH() { return CertGetCRLFromStore$MH_; }

    static final FunctionDescriptor CertEnumCRLsInStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumCRLsInStore$FUNC() { return CertEnumCRLsInStore$FUNC_; }

    static final MethodHandle CertEnumCRLsInStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumCRLsInStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertEnumCRLsInStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumCRLsInStore$MH() { return CertEnumCRLsInStore$MH_; }

    static final FunctionDescriptor CertFindCRLInStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFindCRLInStore$FUNC() { return CertFindCRLInStore$FUNC_; }

    static final MethodHandle CertFindCRLInStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFindCRLInStore",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertFindCRLInStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFindCRLInStore$MH() { return CertFindCRLInStore$MH_; }

    static final MemoryLayout _CRL_FIND_ISSUED_FOR_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pSubjectCert"),
        C_POINTER.withName("pIssuerCert")
    ).withName("_CRL_FIND_ISSUED_FOR_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRL_FIND_ISSUED_FOR_PARA$struct$LAYOUT() { return _CRL_FIND_ISSUED_FOR_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRL_FIND_ISSUED_FOR_PARA$pSubjectCert$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRL_FIND_ISSUED_FOR_PARA$pSubjectCert$LAYOUT() { return _CRL_FIND_ISSUED_FOR_PARA$pSubjectCert$LAYOUT_; }

    static final VarHandle _CRL_FIND_ISSUED_FOR_PARA$pSubjectCert$VH_ = MemoryHandles.asAddressVarHandle(_CRL_FIND_ISSUED_FOR_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pSubjectCert")));
    static final java.lang.invoke.VarHandle _CRL_FIND_ISSUED_FOR_PARA$pSubjectCert$VH() { return _CRL_FIND_ISSUED_FOR_PARA$pSubjectCert$VH_; }

    static final MemoryLayout _CRL_FIND_ISSUED_FOR_PARA$pIssuerCert$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRL_FIND_ISSUED_FOR_PARA$pIssuerCert$LAYOUT() { return _CRL_FIND_ISSUED_FOR_PARA$pIssuerCert$LAYOUT_; }

    static final VarHandle _CRL_FIND_ISSUED_FOR_PARA$pIssuerCert$VH_ = MemoryHandles.asAddressVarHandle(_CRL_FIND_ISSUED_FOR_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pIssuerCert")));
    static final java.lang.invoke.VarHandle _CRL_FIND_ISSUED_FOR_PARA$pIssuerCert$VH() { return _CRL_FIND_ISSUED_FOR_PARA$pIssuerCert$VH_; }

    static final FunctionDescriptor CertDuplicateCRLContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertDuplicateCRLContext$FUNC() { return CertDuplicateCRLContext$FUNC_; }

    static final MethodHandle CertDuplicateCRLContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertDuplicateCRLContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertDuplicateCRLContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertDuplicateCRLContext$MH() { return CertDuplicateCRLContext$MH_; }

    static final FunctionDescriptor CertCreateCRLContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertCreateCRLContext$FUNC() { return CertCreateCRLContext$FUNC_; }

    static final MethodHandle CertCreateCRLContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertCreateCRLContext",
        "(ILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CertCreateCRLContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertCreateCRLContext$MH() { return CertCreateCRLContext$MH_; }

    static final FunctionDescriptor CertFreeCRLContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFreeCRLContext$FUNC() { return CertFreeCRLContext$FUNC_; }

    static final MethodHandle CertFreeCRLContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFreeCRLContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CertFreeCRLContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFreeCRLContext$MH() { return CertFreeCRLContext$MH_; }

    static final FunctionDescriptor CertSetCRLContextProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSetCRLContextProperty$FUNC() { return CertSetCRLContextProperty$FUNC_; }

    static final MethodHandle CertSetCRLContextProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSetCRLContextProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CertSetCRLContextProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSetCRLContextProperty$MH() { return CertSetCRLContextProperty$MH_; }

    static final FunctionDescriptor CertGetCRLContextProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetCRLContextProperty$FUNC() { return CertGetCRLContextProperty$FUNC_; }

    static final MethodHandle CertGetCRLContextProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetCRLContextProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertGetCRLContextProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetCRLContextProperty$MH() { return CertGetCRLContextProperty$MH_; }

    static final FunctionDescriptor CertEnumCRLContextProperties$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumCRLContextProperties$FUNC() { return CertEnumCRLContextProperties$FUNC_; }

    static final MethodHandle CertEnumCRLContextProperties$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumCRLContextProperties",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertEnumCRLContextProperties$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumCRLContextProperties$MH() { return CertEnumCRLContextProperties$MH_; }

    static final FunctionDescriptor CertFindCertificateInCRL$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFindCertificateInCRL$FUNC() { return CertFindCertificateInCRL$FUNC_; }

    static final MethodHandle CertFindCertificateInCRL$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFindCertificateInCRL",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertFindCertificateInCRL$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFindCertificateInCRL$MH() { return CertFindCertificateInCRL$MH_; }

    static final FunctionDescriptor CertIsValidCRLForCertificate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertIsValidCRLForCertificate$FUNC() { return CertIsValidCRLForCertificate$FUNC_; }

    static final MethodHandle CertIsValidCRLForCertificate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertIsValidCRLForCertificate",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CertIsValidCRLForCertificate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertIsValidCRLForCertificate$MH() { return CertIsValidCRLForCertificate$MH_; }

    static final FunctionDescriptor CertAddEncodedCertificateToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddEncodedCertificateToStore$FUNC() { return CertAddEncodedCertificateToStore$FUNC_; }

    static final MethodHandle CertAddEncodedCertificateToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddEncodedCertificateToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CertAddEncodedCertificateToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddEncodedCertificateToStore$MH() { return CertAddEncodedCertificateToStore$MH_; }

    static final FunctionDescriptor CertAddCertificateContextToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddCertificateContextToStore$FUNC() { return CertAddCertificateContextToStore$FUNC_; }

    static final MethodHandle CertAddCertificateContextToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddCertificateContextToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CertAddCertificateContextToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddCertificateContextToStore$MH() { return CertAddCertificateContextToStore$MH_; }

    static final FunctionDescriptor CertAddSerializedElementToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddSerializedElementToStore$FUNC() { return CertAddSerializedElementToStore$FUNC_; }

    static final MethodHandle CertAddSerializedElementToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddSerializedElementToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertAddSerializedElementToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddSerializedElementToStore$MH() { return CertAddSerializedElementToStore$MH_; }

    static final FunctionDescriptor CertDeleteCertificateFromStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertDeleteCertificateFromStore$FUNC() { return CertDeleteCertificateFromStore$FUNC_; }

    static final MethodHandle CertDeleteCertificateFromStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertDeleteCertificateFromStore",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CertDeleteCertificateFromStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertDeleteCertificateFromStore$MH() { return CertDeleteCertificateFromStore$MH_; }

    static final FunctionDescriptor CertAddEncodedCRLToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddEncodedCRLToStore$FUNC() { return CertAddEncodedCRLToStore$FUNC_; }

    static final MethodHandle CertAddEncodedCRLToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddEncodedCRLToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CertAddEncodedCRLToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddEncodedCRLToStore$MH() { return CertAddEncodedCRLToStore$MH_; }

    static final FunctionDescriptor CertAddCRLContextToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddCRLContextToStore$FUNC() { return CertAddCRLContextToStore$FUNC_; }

    static final MethodHandle CertAddCRLContextToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddCRLContextToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CertAddCRLContextToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddCRLContextToStore$MH() { return CertAddCRLContextToStore$MH_; }

    static final FunctionDescriptor CertDeleteCRLFromStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertDeleteCRLFromStore$FUNC() { return CertDeleteCRLFromStore$FUNC_; }

    static final MethodHandle CertDeleteCRLFromStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertDeleteCRLFromStore",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CertDeleteCRLFromStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertDeleteCRLFromStore$MH() { return CertDeleteCRLFromStore$MH_; }

    static final FunctionDescriptor CertSerializeCertificateStoreElement$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSerializeCertificateStoreElement$FUNC() { return CertSerializeCertificateStoreElement$FUNC_; }

    static final MethodHandle CertSerializeCertificateStoreElement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSerializeCertificateStoreElement",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertSerializeCertificateStoreElement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSerializeCertificateStoreElement$MH() { return CertSerializeCertificateStoreElement$MH_; }

    static final FunctionDescriptor CertSerializeCRLStoreElement$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSerializeCRLStoreElement$FUNC() { return CertSerializeCRLStoreElement$FUNC_; }

    static final MethodHandle CertSerializeCRLStoreElement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSerializeCRLStoreElement",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertSerializeCRLStoreElement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSerializeCRLStoreElement$MH() { return CertSerializeCRLStoreElement$MH_; }

    static final FunctionDescriptor CertDuplicateCTLContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertDuplicateCTLContext$FUNC() { return CertDuplicateCTLContext$FUNC_; }

    static final MethodHandle CertDuplicateCTLContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertDuplicateCTLContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertDuplicateCTLContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertDuplicateCTLContext$MH() { return CertDuplicateCTLContext$MH_; }

    static final FunctionDescriptor CertCreateCTLContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertCreateCTLContext$FUNC() { return CertCreateCTLContext$FUNC_; }

    static final MethodHandle CertCreateCTLContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertCreateCTLContext",
        "(ILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CertCreateCTLContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertCreateCTLContext$MH() { return CertCreateCTLContext$MH_; }

    static final FunctionDescriptor CertFreeCTLContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFreeCTLContext$FUNC() { return CertFreeCTLContext$FUNC_; }

    static final MethodHandle CertFreeCTLContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFreeCTLContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CertFreeCTLContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFreeCTLContext$MH() { return CertFreeCTLContext$MH_; }

    static final FunctionDescriptor CertSetCTLContextProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSetCTLContextProperty$FUNC() { return CertSetCTLContextProperty$FUNC_; }

    static final MethodHandle CertSetCTLContextProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSetCTLContextProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CertSetCTLContextProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSetCTLContextProperty$MH() { return CertSetCTLContextProperty$MH_; }

    static final FunctionDescriptor CertGetCTLContextProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetCTLContextProperty$FUNC() { return CertGetCTLContextProperty$FUNC_; }

    static final MethodHandle CertGetCTLContextProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetCTLContextProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertGetCTLContextProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetCTLContextProperty$MH() { return CertGetCTLContextProperty$MH_; }

    static final FunctionDescriptor CertEnumCTLContextProperties$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumCTLContextProperties$FUNC() { return CertEnumCTLContextProperties$FUNC_; }

    static final MethodHandle CertEnumCTLContextProperties$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumCTLContextProperties",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertEnumCTLContextProperties$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumCTLContextProperties$MH() { return CertEnumCTLContextProperties$MH_; }

    static final FunctionDescriptor CertEnumCTLsInStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumCTLsInStore$FUNC() { return CertEnumCTLsInStore$FUNC_; }

    static final MethodHandle CertEnumCTLsInStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumCTLsInStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertEnumCTLsInStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumCTLsInStore$MH() { return CertEnumCTLsInStore$MH_; }

    static final FunctionDescriptor CertFindSubjectInCTL$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFindSubjectInCTL$FUNC() { return CertFindSubjectInCTL$FUNC_; }

    static final MethodHandle CertFindSubjectInCTL$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFindSubjectInCTL",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CertFindSubjectInCTL$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFindSubjectInCTL$MH() { return CertFindSubjectInCTL$MH_; }

    static final MemoryLayout _CTL_ANY_SUBJECT_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("SubjectAlgorithm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("SubjectIdentifier")
    ).withName("_CTL_ANY_SUBJECT_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CTL_ANY_SUBJECT_INFO$struct$LAYOUT() { return _CTL_ANY_SUBJECT_INFO$struct$LAYOUT_; }

    static final FunctionDescriptor CertFindCTLInStore$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFindCTLInStore$FUNC() { return CertFindCTLInStore$FUNC_; }

    static final MethodHandle CertFindCTLInStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFindCTLInStore",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertFindCTLInStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFindCTLInStore$MH() { return CertFindCTLInStore$MH_; }

    static final MemoryLayout _CTL_FIND_USAGE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cUsageIdentifier"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("rgpszUsageIdentifier")
        ).withName("SubjectUsage"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("ListIdentifier"),
        C_POINTER.withName("pSigner")
    ).withName("_CTL_FIND_USAGE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CTL_FIND_USAGE_PARA$struct$LAYOUT() { return _CTL_FIND_USAGE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CTL_FIND_USAGE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_FIND_USAGE_PARA$cbSize$LAYOUT() { return _CTL_FIND_USAGE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CTL_FIND_USAGE_PARA$cbSize$VH_ = _CTL_FIND_USAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CTL_FIND_USAGE_PARA$cbSize$VH() { return _CTL_FIND_USAGE_PARA$cbSize$VH_; }

    static final MemoryLayout _CTL_FIND_USAGE_PARA$pSigner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_FIND_USAGE_PARA$pSigner$LAYOUT() { return _CTL_FIND_USAGE_PARA$pSigner$LAYOUT_; }

    static final VarHandle _CTL_FIND_USAGE_PARA$pSigner$VH_ = MemoryHandles.asAddressVarHandle(_CTL_FIND_USAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pSigner")));
    static final java.lang.invoke.VarHandle _CTL_FIND_USAGE_PARA$pSigner$VH() { return _CTL_FIND_USAGE_PARA$pSigner$VH_; }

    static final MemoryLayout _CTL_FIND_SUBJECT_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pUsagePara"),
        C_LONG.withName("dwSubjectType"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pvSubject")
    ).withName("_CTL_FIND_SUBJECT_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CTL_FIND_SUBJECT_PARA$struct$LAYOUT() { return _CTL_FIND_SUBJECT_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CTL_FIND_SUBJECT_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_FIND_SUBJECT_PARA$cbSize$LAYOUT() { return _CTL_FIND_SUBJECT_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CTL_FIND_SUBJECT_PARA$cbSize$VH_ = _CTL_FIND_SUBJECT_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CTL_FIND_SUBJECT_PARA$cbSize$VH() { return _CTL_FIND_SUBJECT_PARA$cbSize$VH_; }

    static final MemoryLayout _CTL_FIND_SUBJECT_PARA$pUsagePara$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_FIND_SUBJECT_PARA$pUsagePara$LAYOUT() { return _CTL_FIND_SUBJECT_PARA$pUsagePara$LAYOUT_; }

    static final VarHandle _CTL_FIND_SUBJECT_PARA$pUsagePara$VH_ = MemoryHandles.asAddressVarHandle(_CTL_FIND_SUBJECT_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUsagePara")));
    static final java.lang.invoke.VarHandle _CTL_FIND_SUBJECT_PARA$pUsagePara$VH() { return _CTL_FIND_SUBJECT_PARA$pUsagePara$VH_; }

    static final MemoryLayout _CTL_FIND_SUBJECT_PARA$dwSubjectType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_FIND_SUBJECT_PARA$dwSubjectType$LAYOUT() { return _CTL_FIND_SUBJECT_PARA$dwSubjectType$LAYOUT_; }

    static final VarHandle _CTL_FIND_SUBJECT_PARA$dwSubjectType$VH_ = _CTL_FIND_SUBJECT_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSubjectType"));
    static final java.lang.invoke.VarHandle _CTL_FIND_SUBJECT_PARA$dwSubjectType$VH() { return _CTL_FIND_SUBJECT_PARA$dwSubjectType$VH_; }

    static final MemoryLayout _CTL_FIND_SUBJECT_PARA$pvSubject$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_FIND_SUBJECT_PARA$pvSubject$LAYOUT() { return _CTL_FIND_SUBJECT_PARA$pvSubject$LAYOUT_; }

    static final VarHandle _CTL_FIND_SUBJECT_PARA$pvSubject$VH_ = MemoryHandles.asAddressVarHandle(_CTL_FIND_SUBJECT_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvSubject")));
    static final java.lang.invoke.VarHandle _CTL_FIND_SUBJECT_PARA$pvSubject$VH() { return _CTL_FIND_SUBJECT_PARA$pvSubject$VH_; }

    static final FunctionDescriptor CertAddEncodedCTLToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddEncodedCTLToStore$FUNC() { return CertAddEncodedCTLToStore$FUNC_; }

    static final MethodHandle CertAddEncodedCTLToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddEncodedCTLToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CertAddEncodedCTLToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddEncodedCTLToStore$MH() { return CertAddEncodedCTLToStore$MH_; }

    static final FunctionDescriptor CertAddCTLContextToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddCTLContextToStore$FUNC() { return CertAddCTLContextToStore$FUNC_; }

    static final MethodHandle CertAddCTLContextToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddCTLContextToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CertAddCTLContextToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddCTLContextToStore$MH() { return CertAddCTLContextToStore$MH_; }

    static final FunctionDescriptor CertSerializeCTLStoreElement$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSerializeCTLStoreElement$FUNC() { return CertSerializeCTLStoreElement$FUNC_; }

    static final MethodHandle CertSerializeCTLStoreElement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSerializeCTLStoreElement",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertSerializeCTLStoreElement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSerializeCTLStoreElement$MH() { return CertSerializeCTLStoreElement$MH_; }

    static final FunctionDescriptor CertDeleteCTLFromStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertDeleteCTLFromStore$FUNC() { return CertDeleteCTLFromStore$FUNC_; }

    static final MethodHandle CertDeleteCTLFromStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertDeleteCTLFromStore",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CertDeleteCTLFromStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertDeleteCTLFromStore$MH() { return CertDeleteCTLFromStore$MH_; }

    static final FunctionDescriptor CertAddCertificateLinkToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddCertificateLinkToStore$FUNC() { return CertAddCertificateLinkToStore$FUNC_; }

    static final MethodHandle CertAddCertificateLinkToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddCertificateLinkToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CertAddCertificateLinkToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddCertificateLinkToStore$MH() { return CertAddCertificateLinkToStore$MH_; }

    static final FunctionDescriptor CertAddCRLLinkToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddCRLLinkToStore$FUNC() { return CertAddCRLLinkToStore$FUNC_; }

    static final MethodHandle CertAddCRLLinkToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddCRLLinkToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CertAddCRLLinkToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddCRLLinkToStore$MH() { return CertAddCRLLinkToStore$MH_; }

    static final FunctionDescriptor CertAddCTLLinkToStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddCTLLinkToStore$FUNC() { return CertAddCTLLinkToStore$FUNC_; }

    static final MethodHandle CertAddCTLLinkToStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddCTLLinkToStore",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CertAddCTLLinkToStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddCTLLinkToStore$MH() { return CertAddCTLLinkToStore$MH_; }

    static final FunctionDescriptor CertAddStoreToCollection$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddStoreToCollection$FUNC() { return CertAddStoreToCollection$FUNC_; }

    static final MethodHandle CertAddStoreToCollection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddStoreToCollection",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        CertAddStoreToCollection$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddStoreToCollection$MH() { return CertAddStoreToCollection$MH_; }

    static final FunctionDescriptor CertRemoveStoreFromCollection$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertRemoveStoreFromCollection$FUNC() { return CertRemoveStoreFromCollection$FUNC_; }

    static final MethodHandle CertRemoveStoreFromCollection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertRemoveStoreFromCollection",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        CertRemoveStoreFromCollection$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertRemoveStoreFromCollection$MH() { return CertRemoveStoreFromCollection$MH_; }

    static final FunctionDescriptor CertControlStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertControlStore$FUNC() { return CertControlStore$FUNC_; }

    static final MethodHandle CertControlStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertControlStore",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CertControlStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertControlStore$MH() { return CertControlStore$MH_; }

    static final FunctionDescriptor CertSetStoreProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSetStoreProperty$FUNC() { return CertSetStoreProperty$FUNC_; }

    static final MethodHandle CertSetStoreProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSetStoreProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CertSetStoreProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSetStoreProperty$MH() { return CertSetStoreProperty$MH_; }

    static final FunctionDescriptor CertGetStoreProperty$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetStoreProperty$FUNC() { return CertGetStoreProperty$FUNC_; }

    static final MethodHandle CertGetStoreProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetStoreProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertGetStoreProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetStoreProperty$MH() { return CertGetStoreProperty$MH_; }

    static final MemoryLayout _CERT_CREATE_CONTEXT_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pfnFree"),
        C_POINTER.withName("pvFree"),
        C_POINTER.withName("pfnSort"),
        C_POINTER.withName("pvSort")
    ).withName("_CERT_CREATE_CONTEXT_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CERT_CREATE_CONTEXT_PARA$struct$LAYOUT() { return _CERT_CREATE_CONTEXT_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CERT_CREATE_CONTEXT_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_CREATE_CONTEXT_PARA$cbSize$LAYOUT() { return _CERT_CREATE_CONTEXT_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CERT_CREATE_CONTEXT_PARA$cbSize$VH_ = _CERT_CREATE_CONTEXT_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CERT_CREATE_CONTEXT_PARA$cbSize$VH() { return _CERT_CREATE_CONTEXT_PARA$cbSize$VH_; }

    static final MemoryLayout _CERT_CREATE_CONTEXT_PARA$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_CREATE_CONTEXT_PARA$pfnFree$LAYOUT() { return _CERT_CREATE_CONTEXT_PARA$pfnFree$LAYOUT_; }

    static final VarHandle _CERT_CREATE_CONTEXT_PARA$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(_CERT_CREATE_CONTEXT_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle _CERT_CREATE_CONTEXT_PARA$pfnFree$VH() { return _CERT_CREATE_CONTEXT_PARA$pfnFree$VH_; }

    static final MemoryLayout _CERT_CREATE_CONTEXT_PARA$pvFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_CREATE_CONTEXT_PARA$pvFree$LAYOUT() { return _CERT_CREATE_CONTEXT_PARA$pvFree$LAYOUT_; }

    static final VarHandle _CERT_CREATE_CONTEXT_PARA$pvFree$VH_ = MemoryHandles.asAddressVarHandle(_CERT_CREATE_CONTEXT_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvFree")));
    static final java.lang.invoke.VarHandle _CERT_CREATE_CONTEXT_PARA$pvFree$VH() { return _CERT_CREATE_CONTEXT_PARA$pvFree$VH_; }

    static final MemoryLayout _CERT_CREATE_CONTEXT_PARA$pfnSort$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_CREATE_CONTEXT_PARA$pfnSort$LAYOUT() { return _CERT_CREATE_CONTEXT_PARA$pfnSort$LAYOUT_; }

    static final VarHandle _CERT_CREATE_CONTEXT_PARA$pfnSort$VH_ = MemoryHandles.asAddressVarHandle(_CERT_CREATE_CONTEXT_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnSort")));
    static final java.lang.invoke.VarHandle _CERT_CREATE_CONTEXT_PARA$pfnSort$VH() { return _CERT_CREATE_CONTEXT_PARA$pfnSort$VH_; }

    static final MemoryLayout _CERT_CREATE_CONTEXT_PARA$pvSort$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_CREATE_CONTEXT_PARA$pvSort$LAYOUT() { return _CERT_CREATE_CONTEXT_PARA$pvSort$LAYOUT_; }

    static final VarHandle _CERT_CREATE_CONTEXT_PARA$pvSort$VH_ = MemoryHandles.asAddressVarHandle(_CERT_CREATE_CONTEXT_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvSort")));
    static final java.lang.invoke.VarHandle _CERT_CREATE_CONTEXT_PARA$pvSort$VH() { return _CERT_CREATE_CONTEXT_PARA$pvSort$VH_; }

    static final FunctionDescriptor CertCreateContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertCreateContext$FUNC() { return CertCreateContext$FUNC_; }

    static final MethodHandle CertCreateContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertCreateContext",
        "(IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertCreateContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertCreateContext$MH() { return CertCreateContext$MH_; }

    static final MemoryLayout _CERT_SYSTEM_STORE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize")
    ).withName("_CERT_SYSTEM_STORE_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_SYSTEM_STORE_INFO$struct$LAYOUT() { return _CERT_SYSTEM_STORE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_SYSTEM_STORE_INFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_SYSTEM_STORE_INFO$cbSize$LAYOUT() { return _CERT_SYSTEM_STORE_INFO$cbSize$LAYOUT_; }

    static final VarHandle _CERT_SYSTEM_STORE_INFO$cbSize$VH_ = _CERT_SYSTEM_STORE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CERT_SYSTEM_STORE_INFO$cbSize$VH() { return _CERT_SYSTEM_STORE_INFO$cbSize$VH_; }

    static final MemoryLayout _CERT_PHYSICAL_STORE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pszOpenStoreProvider"),
        C_LONG.withName("dwOpenEncodingType"),
        C_LONG.withName("dwOpenFlags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("OpenParameters"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwPriority")
    ).withName("_CERT_PHYSICAL_STORE_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_PHYSICAL_STORE_INFO$struct$LAYOUT() { return _CERT_PHYSICAL_STORE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_PHYSICAL_STORE_INFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_PHYSICAL_STORE_INFO$cbSize$LAYOUT() { return _CERT_PHYSICAL_STORE_INFO$cbSize$LAYOUT_; }

    static final VarHandle _CERT_PHYSICAL_STORE_INFO$cbSize$VH_ = _CERT_PHYSICAL_STORE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CERT_PHYSICAL_STORE_INFO$cbSize$VH() { return _CERT_PHYSICAL_STORE_INFO$cbSize$VH_; }

    static final MemoryLayout _CERT_PHYSICAL_STORE_INFO$pszOpenStoreProvider$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_PHYSICAL_STORE_INFO$pszOpenStoreProvider$LAYOUT() { return _CERT_PHYSICAL_STORE_INFO$pszOpenStoreProvider$LAYOUT_; }

    static final VarHandle _CERT_PHYSICAL_STORE_INFO$pszOpenStoreProvider$VH_ = MemoryHandles.asAddressVarHandle(_CERT_PHYSICAL_STORE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszOpenStoreProvider")));
    static final java.lang.invoke.VarHandle _CERT_PHYSICAL_STORE_INFO$pszOpenStoreProvider$VH() { return _CERT_PHYSICAL_STORE_INFO$pszOpenStoreProvider$VH_; }

    static final MemoryLayout _CERT_PHYSICAL_STORE_INFO$dwOpenEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_PHYSICAL_STORE_INFO$dwOpenEncodingType$LAYOUT() { return _CERT_PHYSICAL_STORE_INFO$dwOpenEncodingType$LAYOUT_; }

    static final VarHandle _CERT_PHYSICAL_STORE_INFO$dwOpenEncodingType$VH_ = _CERT_PHYSICAL_STORE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOpenEncodingType"));
    static final java.lang.invoke.VarHandle _CERT_PHYSICAL_STORE_INFO$dwOpenEncodingType$VH() { return _CERT_PHYSICAL_STORE_INFO$dwOpenEncodingType$VH_; }

    static final MemoryLayout _CERT_PHYSICAL_STORE_INFO$dwOpenFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_PHYSICAL_STORE_INFO$dwOpenFlags$LAYOUT() { return _CERT_PHYSICAL_STORE_INFO$dwOpenFlags$LAYOUT_; }

    static final VarHandle _CERT_PHYSICAL_STORE_INFO$dwOpenFlags$VH_ = _CERT_PHYSICAL_STORE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOpenFlags"));
    static final java.lang.invoke.VarHandle _CERT_PHYSICAL_STORE_INFO$dwOpenFlags$VH() { return _CERT_PHYSICAL_STORE_INFO$dwOpenFlags$VH_; }

    static final MemoryLayout _CERT_PHYSICAL_STORE_INFO$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_PHYSICAL_STORE_INFO$dwFlags$LAYOUT() { return _CERT_PHYSICAL_STORE_INFO$dwFlags$LAYOUT_; }

    static final VarHandle _CERT_PHYSICAL_STORE_INFO$dwFlags$VH_ = _CERT_PHYSICAL_STORE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CERT_PHYSICAL_STORE_INFO$dwFlags$VH() { return _CERT_PHYSICAL_STORE_INFO$dwFlags$VH_; }

    static final MemoryLayout _CERT_PHYSICAL_STORE_INFO$dwPriority$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_PHYSICAL_STORE_INFO$dwPriority$LAYOUT() { return _CERT_PHYSICAL_STORE_INFO$dwPriority$LAYOUT_; }

    static final VarHandle _CERT_PHYSICAL_STORE_INFO$dwPriority$VH_ = _CERT_PHYSICAL_STORE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPriority"));
    static final java.lang.invoke.VarHandle _CERT_PHYSICAL_STORE_INFO$dwPriority$VH() { return _CERT_PHYSICAL_STORE_INFO$dwPriority$VH_; }

    static final FunctionDescriptor CertRegisterSystemStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertRegisterSystemStore$FUNC() { return CertRegisterSystemStore$FUNC_; }

    static final MethodHandle CertRegisterSystemStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertRegisterSystemStore",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertRegisterSystemStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertRegisterSystemStore$MH() { return CertRegisterSystemStore$MH_; }

    static final FunctionDescriptor CertRegisterPhysicalStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertRegisterPhysicalStore$FUNC() { return CertRegisterPhysicalStore$FUNC_; }

    static final MethodHandle CertRegisterPhysicalStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertRegisterPhysicalStore",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertRegisterPhysicalStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertRegisterPhysicalStore$MH() { return CertRegisterPhysicalStore$MH_; }

    static final FunctionDescriptor CertUnregisterSystemStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertUnregisterSystemStore$FUNC() { return CertUnregisterSystemStore$FUNC_; }

    static final MethodHandle CertUnregisterSystemStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertUnregisterSystemStore",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertUnregisterSystemStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertUnregisterSystemStore$MH() { return CertUnregisterSystemStore$MH_; }

    static final FunctionDescriptor CertUnregisterPhysicalStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertUnregisterPhysicalStore$FUNC() { return CertUnregisterPhysicalStore$FUNC_; }

    static final MethodHandle CertUnregisterPhysicalStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertUnregisterPhysicalStore",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CertUnregisterPhysicalStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertUnregisterPhysicalStore$MH() { return CertUnregisterPhysicalStore$MH_; }

    static final FunctionDescriptor CertEnumSystemStoreLocation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumSystemStoreLocation$FUNC() { return CertEnumSystemStoreLocation$FUNC_; }

    static final MethodHandle CertEnumSystemStoreLocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumSystemStoreLocation",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertEnumSystemStoreLocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumSystemStoreLocation$MH() { return CertEnumSystemStoreLocation$MH_; }

    static final FunctionDescriptor CertEnumSystemStoreLocation$pfnEnum$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumSystemStoreLocation$pfnEnum$FUNC() { return CertEnumSystemStoreLocation$pfnEnum$FUNC_; }

    static final FunctionDescriptor CertEnumSystemStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumSystemStore$FUNC() { return CertEnumSystemStore$FUNC_; }

    static final MethodHandle CertEnumSystemStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumSystemStore",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertEnumSystemStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumSystemStore$MH() { return CertEnumSystemStore$MH_; }

    static final FunctionDescriptor CertEnumSystemStore$pfnEnum$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumSystemStore$pfnEnum$FUNC() { return CertEnumSystemStore$pfnEnum$FUNC_; }

    static final FunctionDescriptor CertEnumPhysicalStore$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumPhysicalStore$FUNC() { return CertEnumPhysicalStore$FUNC_; }

    static final MethodHandle CertEnumPhysicalStore$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumPhysicalStore",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertEnumPhysicalStore$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumPhysicalStore$MH() { return CertEnumPhysicalStore$MH_; }

    static final FunctionDescriptor CertEnumPhysicalStore$pfnEnum$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumPhysicalStore$pfnEnum$FUNC() { return CertEnumPhysicalStore$pfnEnum$FUNC_; }

    static final FunctionDescriptor CertGetEnhancedKeyUsage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetEnhancedKeyUsage$FUNC() { return CertGetEnhancedKeyUsage$FUNC_; }

    static final MethodHandle CertGetEnhancedKeyUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetEnhancedKeyUsage",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertGetEnhancedKeyUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetEnhancedKeyUsage$MH() { return CertGetEnhancedKeyUsage$MH_; }

    static final FunctionDescriptor CertSetEnhancedKeyUsage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertSetEnhancedKeyUsage$FUNC() { return CertSetEnhancedKeyUsage$FUNC_; }

    static final MethodHandle CertSetEnhancedKeyUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertSetEnhancedKeyUsage",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertSetEnhancedKeyUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertSetEnhancedKeyUsage$MH() { return CertSetEnhancedKeyUsage$MH_; }

    static final FunctionDescriptor CertAddEnhancedKeyUsageIdentifier$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddEnhancedKeyUsageIdentifier$FUNC() { return CertAddEnhancedKeyUsageIdentifier$FUNC_; }

    static final MethodHandle CertAddEnhancedKeyUsageIdentifier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddEnhancedKeyUsageIdentifier",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertAddEnhancedKeyUsageIdentifier$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddEnhancedKeyUsageIdentifier$MH() { return CertAddEnhancedKeyUsageIdentifier$MH_; }

    static final FunctionDescriptor CertRemoveEnhancedKeyUsageIdentifier$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertRemoveEnhancedKeyUsageIdentifier$FUNC() { return CertRemoveEnhancedKeyUsageIdentifier$FUNC_; }

    static final MethodHandle CertRemoveEnhancedKeyUsageIdentifier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertRemoveEnhancedKeyUsageIdentifier",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertRemoveEnhancedKeyUsageIdentifier$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertRemoveEnhancedKeyUsageIdentifier$MH() { return CertRemoveEnhancedKeyUsageIdentifier$MH_; }

    static final FunctionDescriptor CertGetValidUsages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetValidUsages$FUNC() { return CertGetValidUsages$FUNC_; }

    static final MethodHandle CertGetValidUsages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetValidUsages",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertGetValidUsages$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetValidUsages$MH() { return CertGetValidUsages$MH_; }

    static final FunctionDescriptor CryptMsgGetAndVerifySigner$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptMsgGetAndVerifySigner$FUNC() { return CryptMsgGetAndVerifySigner$FUNC_; }

    static final MethodHandle CryptMsgGetAndVerifySigner$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptMsgGetAndVerifySigner",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptMsgGetAndVerifySigner$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptMsgGetAndVerifySigner$MH() { return CryptMsgGetAndVerifySigner$MH_; }

    static final FunctionDescriptor CryptMsgSignCTL$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptMsgSignCTL$FUNC() { return CryptMsgSignCTL$FUNC_; }

    static final MethodHandle CryptMsgSignCTL$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptMsgSignCTL",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptMsgSignCTL$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptMsgSignCTL$MH() { return CryptMsgSignCTL$MH_; }

    static final FunctionDescriptor CryptMsgEncodeAndSignCTL$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptMsgEncodeAndSignCTL$FUNC() { return CryptMsgEncodeAndSignCTL$FUNC_; }

    static final MethodHandle CryptMsgEncodeAndSignCTL$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptMsgEncodeAndSignCTL",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptMsgEncodeAndSignCTL$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptMsgEncodeAndSignCTL$MH() { return CryptMsgEncodeAndSignCTL$MH_; }

    static final FunctionDescriptor CertFindSubjectInSortedCTL$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFindSubjectInSortedCTL$FUNC() { return CertFindSubjectInSortedCTL$FUNC_; }

    static final MethodHandle CertFindSubjectInSortedCTL$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFindSubjectInSortedCTL",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertFindSubjectInSortedCTL$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFindSubjectInSortedCTL$MH() { return CertFindSubjectInSortedCTL$MH_; }

    static final FunctionDescriptor CertEnumSubjectInSortedCTL$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertEnumSubjectInSortedCTL$FUNC() { return CertEnumSubjectInSortedCTL$FUNC_; }

    static final MethodHandle CertEnumSubjectInSortedCTL$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertEnumSubjectInSortedCTL",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertEnumSubjectInSortedCTL$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertEnumSubjectInSortedCTL$MH() { return CertEnumSubjectInSortedCTL$MH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("ListIdentifier"),
        C_LONG.withName("cCtlStore"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rghCtlStore"),
        C_LONG.withName("cSignerStore"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rghSignerStore")
    ).withName("_CTL_VERIFY_USAGE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_PARA$struct$LAYOUT() { return _CTL_VERIFY_USAGE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_PARA$cbSize$LAYOUT() { return _CTL_VERIFY_USAGE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_PARA$cbSize$VH_ = _CTL_VERIFY_USAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_PARA$cbSize$VH() { return _CTL_VERIFY_USAGE_PARA$cbSize$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_PARA$cCtlStore$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_PARA$cCtlStore$LAYOUT() { return _CTL_VERIFY_USAGE_PARA$cCtlStore$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_PARA$cCtlStore$VH_ = _CTL_VERIFY_USAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cCtlStore"));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_PARA$cCtlStore$VH() { return _CTL_VERIFY_USAGE_PARA$cCtlStore$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_PARA$rghCtlStore$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_PARA$rghCtlStore$LAYOUT() { return _CTL_VERIFY_USAGE_PARA$rghCtlStore$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_PARA$rghCtlStore$VH_ = MemoryHandles.asAddressVarHandle(_CTL_VERIFY_USAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rghCtlStore")));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_PARA$rghCtlStore$VH() { return _CTL_VERIFY_USAGE_PARA$rghCtlStore$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_PARA$cSignerStore$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_PARA$cSignerStore$LAYOUT() { return _CTL_VERIFY_USAGE_PARA$cSignerStore$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_PARA$cSignerStore$VH_ = _CTL_VERIFY_USAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cSignerStore"));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_PARA$cSignerStore$VH() { return _CTL_VERIFY_USAGE_PARA$cSignerStore$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_PARA$rghSignerStore$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_PARA$rghSignerStore$LAYOUT() { return _CTL_VERIFY_USAGE_PARA$rghSignerStore$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_PARA$rghSignerStore$VH_ = MemoryHandles.asAddressVarHandle(_CTL_VERIFY_USAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rghSignerStore")));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_PARA$rghSignerStore$VH() { return _CTL_VERIFY_USAGE_PARA$rghSignerStore$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_STATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwError"),
        C_LONG.withName("dwFlags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ppCtl"),
        C_LONG.withName("dwCtlEntryIndex"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ppSigner"),
        C_LONG.withName("dwSignerIndex"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CTL_VERIFY_USAGE_STATUS");
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_STATUS$struct$LAYOUT() { return _CTL_VERIFY_USAGE_STATUS$struct$LAYOUT_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_STATUS$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_STATUS$cbSize$LAYOUT() { return _CTL_VERIFY_USAGE_STATUS$cbSize$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_STATUS$cbSize$VH_ = _CTL_VERIFY_USAGE_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_STATUS$cbSize$VH() { return _CTL_VERIFY_USAGE_STATUS$cbSize$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_STATUS$dwError$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_STATUS$dwError$LAYOUT() { return _CTL_VERIFY_USAGE_STATUS$dwError$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_STATUS$dwError$VH_ = _CTL_VERIFY_USAGE_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwError"));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_STATUS$dwError$VH() { return _CTL_VERIFY_USAGE_STATUS$dwError$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_STATUS$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_STATUS$dwFlags$LAYOUT() { return _CTL_VERIFY_USAGE_STATUS$dwFlags$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_STATUS$dwFlags$VH_ = _CTL_VERIFY_USAGE_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_STATUS$dwFlags$VH() { return _CTL_VERIFY_USAGE_STATUS$dwFlags$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_STATUS$ppCtl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_STATUS$ppCtl$LAYOUT() { return _CTL_VERIFY_USAGE_STATUS$ppCtl$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_STATUS$ppCtl$VH_ = MemoryHandles.asAddressVarHandle(_CTL_VERIFY_USAGE_STATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ppCtl")));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_STATUS$ppCtl$VH() { return _CTL_VERIFY_USAGE_STATUS$ppCtl$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_STATUS$dwCtlEntryIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_STATUS$dwCtlEntryIndex$LAYOUT() { return _CTL_VERIFY_USAGE_STATUS$dwCtlEntryIndex$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_STATUS$dwCtlEntryIndex$VH_ = _CTL_VERIFY_USAGE_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCtlEntryIndex"));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_STATUS$dwCtlEntryIndex$VH() { return _CTL_VERIFY_USAGE_STATUS$dwCtlEntryIndex$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_STATUS$ppSigner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_STATUS$ppSigner$LAYOUT() { return _CTL_VERIFY_USAGE_STATUS$ppSigner$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_STATUS$ppSigner$VH_ = MemoryHandles.asAddressVarHandle(_CTL_VERIFY_USAGE_STATUS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ppSigner")));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_STATUS$ppSigner$VH() { return _CTL_VERIFY_USAGE_STATUS$ppSigner$VH_; }

    static final MemoryLayout _CTL_VERIFY_USAGE_STATUS$dwSignerIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CTL_VERIFY_USAGE_STATUS$dwSignerIndex$LAYOUT() { return _CTL_VERIFY_USAGE_STATUS$dwSignerIndex$LAYOUT_; }

    static final VarHandle _CTL_VERIFY_USAGE_STATUS$dwSignerIndex$VH_ = _CTL_VERIFY_USAGE_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSignerIndex"));
    static final java.lang.invoke.VarHandle _CTL_VERIFY_USAGE_STATUS$dwSignerIndex$VH() { return _CTL_VERIFY_USAGE_STATUS$dwSignerIndex$VH_; }

    static final FunctionDescriptor CertVerifyCTLUsage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertVerifyCTLUsage$FUNC() { return CertVerifyCTLUsage$FUNC_; }

    static final MethodHandle CertVerifyCTLUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertVerifyCTLUsage",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertVerifyCTLUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertVerifyCTLUsage$MH() { return CertVerifyCTLUsage$MH_; }

    static final MemoryLayout _CERT_REVOCATION_CRL_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pBaseCrlContext"),
        C_POINTER.withName("pDeltaCrlContext"),
        C_POINTER.withName("pCrlEntry"),
        C_INT.withName("fDeltaCrlEntry"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CERT_REVOCATION_CRL_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_CRL_INFO$struct$LAYOUT() { return _CERT_REVOCATION_CRL_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CERT_REVOCATION_CRL_INFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_CRL_INFO$cbSize$LAYOUT() { return _CERT_REVOCATION_CRL_INFO$cbSize$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_CRL_INFO$cbSize$VH_ = _CERT_REVOCATION_CRL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_CRL_INFO$cbSize$VH() { return _CERT_REVOCATION_CRL_INFO$cbSize$VH_; }

    static final MemoryLayout _CERT_REVOCATION_CRL_INFO$pBaseCrlContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_CRL_INFO$pBaseCrlContext$LAYOUT() { return _CERT_REVOCATION_CRL_INFO$pBaseCrlContext$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_CRL_INFO$pBaseCrlContext$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REVOCATION_CRL_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pBaseCrlContext")));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_CRL_INFO$pBaseCrlContext$VH() { return _CERT_REVOCATION_CRL_INFO$pBaseCrlContext$VH_; }

    static final MemoryLayout _CERT_REVOCATION_CRL_INFO$pDeltaCrlContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_CRL_INFO$pDeltaCrlContext$LAYOUT() { return _CERT_REVOCATION_CRL_INFO$pDeltaCrlContext$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_CRL_INFO$pDeltaCrlContext$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REVOCATION_CRL_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pDeltaCrlContext")));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_CRL_INFO$pDeltaCrlContext$VH() { return _CERT_REVOCATION_CRL_INFO$pDeltaCrlContext$VH_; }

    static final MemoryLayout _CERT_REVOCATION_CRL_INFO$pCrlEntry$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_CRL_INFO$pCrlEntry$LAYOUT() { return _CERT_REVOCATION_CRL_INFO$pCrlEntry$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_CRL_INFO$pCrlEntry$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REVOCATION_CRL_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pCrlEntry")));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_CRL_INFO$pCrlEntry$VH() { return _CERT_REVOCATION_CRL_INFO$pCrlEntry$VH_; }

    static final MemoryLayout _CERT_REVOCATION_CRL_INFO$fDeltaCrlEntry$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_CRL_INFO$fDeltaCrlEntry$LAYOUT() { return _CERT_REVOCATION_CRL_INFO$fDeltaCrlEntry$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_CRL_INFO$fDeltaCrlEntry$VH_ = _CERT_REVOCATION_CRL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fDeltaCrlEntry"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_CRL_INFO$fDeltaCrlEntry$VH() { return _CERT_REVOCATION_CRL_INFO$fDeltaCrlEntry$VH_; }

    static final MemoryLayout _CERT_REVOCATION_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pIssuerCert"),
        C_LONG.withName("cCertStore"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgCertStore"),
        C_POINTER.withName("hCrlStore"),
        C_POINTER.withName("pftTimeToUse")
    ).withName("_CERT_REVOCATION_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_PARA$struct$LAYOUT() { return _CERT_REVOCATION_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CERT_REVOCATION_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_PARA$cbSize$LAYOUT() { return _CERT_REVOCATION_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_PARA$cbSize$VH_ = _CERT_REVOCATION_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_PARA$cbSize$VH() { return _CERT_REVOCATION_PARA$cbSize$VH_; }

    static final MemoryLayout _CERT_REVOCATION_PARA$pIssuerCert$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_PARA$pIssuerCert$LAYOUT() { return _CERT_REVOCATION_PARA$pIssuerCert$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_PARA$pIssuerCert$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REVOCATION_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pIssuerCert")));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_PARA$pIssuerCert$VH() { return _CERT_REVOCATION_PARA$pIssuerCert$VH_; }

    static final MemoryLayout _CERT_REVOCATION_PARA$cCertStore$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_PARA$cCertStore$LAYOUT() { return _CERT_REVOCATION_PARA$cCertStore$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_PARA$cCertStore$VH_ = _CERT_REVOCATION_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cCertStore"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_PARA$cCertStore$VH() { return _CERT_REVOCATION_PARA$cCertStore$VH_; }

    static final MemoryLayout _CERT_REVOCATION_PARA$rgCertStore$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_PARA$rgCertStore$LAYOUT() { return _CERT_REVOCATION_PARA$rgCertStore$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_PARA$rgCertStore$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REVOCATION_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgCertStore")));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_PARA$rgCertStore$VH() { return _CERT_REVOCATION_PARA$rgCertStore$VH_; }

    static final MemoryLayout _CERT_REVOCATION_PARA$hCrlStore$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_PARA$hCrlStore$LAYOUT() { return _CERT_REVOCATION_PARA$hCrlStore$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_PARA$hCrlStore$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REVOCATION_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCrlStore")));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_PARA$hCrlStore$VH() { return _CERT_REVOCATION_PARA$hCrlStore$VH_; }

    static final MemoryLayout _CERT_REVOCATION_PARA$pftTimeToUse$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_PARA$pftTimeToUse$LAYOUT() { return _CERT_REVOCATION_PARA$pftTimeToUse$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_PARA$pftTimeToUse$VH_ = MemoryHandles.asAddressVarHandle(_CERT_REVOCATION_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pftTimeToUse")));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_PARA$pftTimeToUse$VH() { return _CERT_REVOCATION_PARA$pftTimeToUse$VH_; }

    static final MemoryLayout _CERT_REVOCATION_STATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwIndex"),
        C_LONG.withName("dwError"),
        C_LONG.withName("dwReason"),
        C_INT.withName("fHasFreshnessTime"),
        C_LONG.withName("dwFreshnessTime")
    ).withName("_CERT_REVOCATION_STATUS");
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_STATUS$struct$LAYOUT() { return _CERT_REVOCATION_STATUS$struct$LAYOUT_; }

    static final MemoryLayout _CERT_REVOCATION_STATUS$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_STATUS$cbSize$LAYOUT() { return _CERT_REVOCATION_STATUS$cbSize$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_STATUS$cbSize$VH_ = _CERT_REVOCATION_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_STATUS$cbSize$VH() { return _CERT_REVOCATION_STATUS$cbSize$VH_; }

    static final MemoryLayout _CERT_REVOCATION_STATUS$dwIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_STATUS$dwIndex$LAYOUT() { return _CERT_REVOCATION_STATUS$dwIndex$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_STATUS$dwIndex$VH_ = _CERT_REVOCATION_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwIndex"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_STATUS$dwIndex$VH() { return _CERT_REVOCATION_STATUS$dwIndex$VH_; }

    static final MemoryLayout _CERT_REVOCATION_STATUS$dwError$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_STATUS$dwError$LAYOUT() { return _CERT_REVOCATION_STATUS$dwError$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_STATUS$dwError$VH_ = _CERT_REVOCATION_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwError"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_STATUS$dwError$VH() { return _CERT_REVOCATION_STATUS$dwError$VH_; }

    static final MemoryLayout _CERT_REVOCATION_STATUS$dwReason$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_STATUS$dwReason$LAYOUT() { return _CERT_REVOCATION_STATUS$dwReason$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_STATUS$dwReason$VH_ = _CERT_REVOCATION_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReason"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_STATUS$dwReason$VH() { return _CERT_REVOCATION_STATUS$dwReason$VH_; }

    static final MemoryLayout _CERT_REVOCATION_STATUS$fHasFreshnessTime$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_STATUS$fHasFreshnessTime$LAYOUT() { return _CERT_REVOCATION_STATUS$fHasFreshnessTime$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_STATUS$fHasFreshnessTime$VH_ = _CERT_REVOCATION_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fHasFreshnessTime"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_STATUS$fHasFreshnessTime$VH() { return _CERT_REVOCATION_STATUS$fHasFreshnessTime$VH_; }

    static final MemoryLayout _CERT_REVOCATION_STATUS$dwFreshnessTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_REVOCATION_STATUS$dwFreshnessTime$LAYOUT() { return _CERT_REVOCATION_STATUS$dwFreshnessTime$LAYOUT_; }

    static final VarHandle _CERT_REVOCATION_STATUS$dwFreshnessTime$VH_ = _CERT_REVOCATION_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFreshnessTime"));
    static final java.lang.invoke.VarHandle _CERT_REVOCATION_STATUS$dwFreshnessTime$VH() { return _CERT_REVOCATION_STATUS$dwFreshnessTime$VH_; }

    static final FunctionDescriptor CertVerifyRevocation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertVerifyRevocation$FUNC() { return CertVerifyRevocation$FUNC_; }

    static final MethodHandle CertVerifyRevocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertVerifyRevocation",
        "(IIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertVerifyRevocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertVerifyRevocation$MH() { return CertVerifyRevocation$MH_; }

    static final FunctionDescriptor CertCompareIntegerBlob$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertCompareIntegerBlob$FUNC() { return CertCompareIntegerBlob$FUNC_; }

    static final MethodHandle CertCompareIntegerBlob$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertCompareIntegerBlob",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertCompareIntegerBlob$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertCompareIntegerBlob$MH() { return CertCompareIntegerBlob$MH_; }

    static final FunctionDescriptor CertCompareCertificate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertCompareCertificate$FUNC() { return CertCompareCertificate$FUNC_; }

    static final MethodHandle CertCompareCertificate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertCompareCertificate",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertCompareCertificate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertCompareCertificate$MH() { return CertCompareCertificate$MH_; }

    static final FunctionDescriptor CertCompareCertificateName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertCompareCertificateName$FUNC() { return CertCompareCertificateName$FUNC_; }

    static final MethodHandle CertCompareCertificateName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertCompareCertificateName",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertCompareCertificateName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertCompareCertificateName$MH() { return CertCompareCertificateName$MH_; }

    static final FunctionDescriptor CertIsRDNAttrsInCertificateName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertIsRDNAttrsInCertificateName$FUNC() { return CertIsRDNAttrsInCertificateName$FUNC_; }

    static final MethodHandle CertIsRDNAttrsInCertificateName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertIsRDNAttrsInCertificateName",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertIsRDNAttrsInCertificateName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertIsRDNAttrsInCertificateName$MH() { return CertIsRDNAttrsInCertificateName$MH_; }

    static final FunctionDescriptor CertComparePublicKeyInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertComparePublicKeyInfo$FUNC() { return CertComparePublicKeyInfo$FUNC_; }

    static final MethodHandle CertComparePublicKeyInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertComparePublicKeyInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertComparePublicKeyInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertComparePublicKeyInfo$MH() { return CertComparePublicKeyInfo$MH_; }

    static final FunctionDescriptor CertGetPublicKeyLength$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetPublicKeyLength$FUNC() { return CertGetPublicKeyLength$FUNC_; }

    static final MethodHandle CertGetPublicKeyLength$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetPublicKeyLength",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        CertGetPublicKeyLength$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetPublicKeyLength$MH() { return CertGetPublicKeyLength$MH_; }

    static final FunctionDescriptor CryptVerifyCertificateSignature$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifyCertificateSignature$FUNC() { return CryptVerifyCertificateSignature$FUNC_; }

    static final MethodHandle CryptVerifyCertificateSignature$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifyCertificateSignature",
        "(JILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptVerifyCertificateSignature$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifyCertificateSignature$MH() { return CryptVerifyCertificateSignature$MH_; }

    static final FunctionDescriptor CryptVerifyCertificateSignatureEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifyCertificateSignatureEx$FUNC() { return CryptVerifyCertificateSignatureEx$FUNC_; }

    static final MethodHandle CryptVerifyCertificateSignatureEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifyCertificateSignatureEx",
        "(JIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptVerifyCertificateSignatureEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifyCertificateSignatureEx$MH() { return CryptVerifyCertificateSignatureEx$MH_; }

    static final MemoryLayout _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("CertSignHashCNGAlgPropData"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("CertIssuerPubKeyBitLengthPropData")
    ).withName("_CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO$struct$LAYOUT() { return _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cCNGHashAlgid"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpwszCNGHashAlgid"),
        C_LONG.withName("dwWeakIndex"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$struct$LAYOUT() { return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$cCNGHashAlgid$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$cCNGHashAlgid$LAYOUT() { return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$cCNGHashAlgid$LAYOUT_; }

    static final VarHandle _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$cCNGHashAlgid$VH_ = _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cCNGHashAlgid"));
    static final java.lang.invoke.VarHandle _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$cCNGHashAlgid$VH() { return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$cCNGHashAlgid$VH_; }

    static final MemoryLayout _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$rgpwszCNGHashAlgid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$rgpwszCNGHashAlgid$LAYOUT() { return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$rgpwszCNGHashAlgid$LAYOUT_; }

    static final VarHandle _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$rgpwszCNGHashAlgid$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpwszCNGHashAlgid")));
    static final java.lang.invoke.VarHandle _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$rgpwszCNGHashAlgid$VH() { return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$rgpwszCNGHashAlgid$VH_; }

    static final MemoryLayout _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$dwWeakIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$dwWeakIndex$LAYOUT() { return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$dwWeakIndex$LAYOUT_; }

    static final VarHandle _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$dwWeakIndex$VH_ = _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwWeakIndex"));
    static final java.lang.invoke.VarHandle _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$dwWeakIndex$VH() { return _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO$dwWeakIndex$VH_; }

    static final FunctionDescriptor CertIsStrongHashToSign$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertIsStrongHashToSign$FUNC() { return CertIsStrongHashToSign$FUNC_; }

    static final MethodHandle CertIsStrongHashToSign$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertIsStrongHashToSign",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertIsStrongHashToSign$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertIsStrongHashToSign$MH() { return CertIsStrongHashToSign$MH_; }

    static final FunctionDescriptor CryptHashToBeSigned$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptHashToBeSigned$FUNC() { return CryptHashToBeSigned$FUNC_; }

    static final MethodHandle CryptHashToBeSigned$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptHashToBeSigned",
        "(JILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptHashToBeSigned$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptHashToBeSigned$MH() { return CryptHashToBeSigned$MH_; }

    static final FunctionDescriptor CryptHashCertificate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptHashCertificate$FUNC() { return CryptHashCertificate$FUNC_; }

    static final MethodHandle CryptHashCertificate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptHashCertificate",
        "(JIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptHashCertificate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptHashCertificate$MH() { return CryptHashCertificate$MH_; }

    static final FunctionDescriptor CryptHashCertificate2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptHashCertificate2$FUNC() { return CryptHashCertificate2$FUNC_; }

    static final MethodHandle CryptHashCertificate2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptHashCertificate2",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptHashCertificate2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptHashCertificate2$MH() { return CryptHashCertificate2$MH_; }

    static final FunctionDescriptor CryptSignCertificate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSignCertificate$FUNC() { return CryptSignCertificate$FUNC_; }

    static final MethodHandle CryptSignCertificate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSignCertificate",
        "(JIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptSignCertificate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSignCertificate$MH() { return CryptSignCertificate$MH_; }

    static final FunctionDescriptor CryptSignAndEncodeCertificate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSignAndEncodeCertificate$FUNC() { return CryptSignAndEncodeCertificate$FUNC_; }

    static final MethodHandle CryptSignAndEncodeCertificate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSignAndEncodeCertificate",
        "(JIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptSignAndEncodeCertificate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSignAndEncodeCertificate$MH() { return CryptSignAndEncodeCertificate$MH_; }

    static final FunctionDescriptor CertVerifyTimeValidity$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertVerifyTimeValidity$FUNC() { return CertVerifyTimeValidity$FUNC_; }

    static final MethodHandle CertVerifyTimeValidity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertVerifyTimeValidity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertVerifyTimeValidity$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertVerifyTimeValidity$MH() { return CertVerifyTimeValidity$MH_; }

    static final FunctionDescriptor CertVerifyCRLTimeValidity$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertVerifyCRLTimeValidity$FUNC() { return CertVerifyCRLTimeValidity$FUNC_; }

    static final MethodHandle CertVerifyCRLTimeValidity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertVerifyCRLTimeValidity",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertVerifyCRLTimeValidity$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertVerifyCRLTimeValidity$MH() { return CertVerifyCRLTimeValidity$MH_; }

    static final FunctionDescriptor CertVerifyValidityNesting$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertVerifyValidityNesting$FUNC() { return CertVerifyValidityNesting$FUNC_; }

    static final MethodHandle CertVerifyValidityNesting$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertVerifyValidityNesting",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertVerifyValidityNesting$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertVerifyValidityNesting$MH() { return CertVerifyValidityNesting$MH_; }

    static final FunctionDescriptor CertVerifyCRLRevocation$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertVerifyCRLRevocation$FUNC() { return CertVerifyCRLRevocation$FUNC_; }

    static final MethodHandle CertVerifyCRLRevocation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertVerifyCRLRevocation",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CertVerifyCRLRevocation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertVerifyCRLRevocation$MH() { return CertVerifyCRLRevocation$MH_; }

    static final FunctionDescriptor CertAlgIdToOID$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAlgIdToOID$FUNC() { return CertAlgIdToOID$FUNC_; }

    static final MethodHandle CertAlgIdToOID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAlgIdToOID",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        CertAlgIdToOID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAlgIdToOID$MH() { return CertAlgIdToOID$MH_; }

    static final FunctionDescriptor CertOIDToAlgId$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertOIDToAlgId$FUNC() { return CertOIDToAlgId$FUNC_; }

    static final MethodHandle CertOIDToAlgId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertOIDToAlgId",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CertOIDToAlgId$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertOIDToAlgId$MH() { return CertOIDToAlgId$MH_; }

    static final FunctionDescriptor CertFindExtension$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFindExtension$FUNC() { return CertFindExtension$FUNC_; }

    static final MethodHandle CertFindExtension$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFindExtension",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertFindExtension$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFindExtension$MH() { return CertFindExtension$MH_; }

    static final FunctionDescriptor CertFindAttribute$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFindAttribute$FUNC() { return CertFindAttribute$FUNC_; }

    static final MethodHandle CertFindAttribute$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFindAttribute",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertFindAttribute$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFindAttribute$MH() { return CertFindAttribute$MH_; }

    static final FunctionDescriptor CertFindRDNAttr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertFindRDNAttr$FUNC() { return CertFindRDNAttr$FUNC_; }

    static final MethodHandle CertFindRDNAttr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertFindRDNAttr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertFindRDNAttr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertFindRDNAttr$MH() { return CertFindRDNAttr$MH_; }

    static final FunctionDescriptor CertGetIntendedKeyUsage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetIntendedKeyUsage$FUNC() { return CertGetIntendedKeyUsage$FUNC_; }

    static final MethodHandle CertGetIntendedKeyUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetIntendedKeyUsage",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertGetIntendedKeyUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetIntendedKeyUsage$MH() { return CertGetIntendedKeyUsage$MH_; }

    static final FunctionDescriptor CryptInstallDefaultContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptInstallDefaultContext$FUNC() { return CryptInstallDefaultContext$FUNC_; }

    static final MethodHandle CryptInstallDefaultContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptInstallDefaultContext",
        "(JILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptInstallDefaultContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptInstallDefaultContext$MH() { return CryptInstallDefaultContext$MH_; }

    static final MemoryLayout _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cOID"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpszOID")
    ).withName("_CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$struct$LAYOUT() { return _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$cOID$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$cOID$LAYOUT() { return _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$cOID$LAYOUT_; }

    static final VarHandle _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$cOID$VH_ = _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cOID"));
    static final java.lang.invoke.VarHandle _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$cOID$VH() { return _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$cOID$VH_; }

    static final MemoryLayout _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$rgpszOID$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$rgpszOID$LAYOUT() { return _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$rgpszOID$LAYOUT_; }

    static final VarHandle _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$rgpszOID$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpszOID")));
    static final java.lang.invoke.VarHandle _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$rgpszOID$VH() { return _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA$rgpszOID$VH_; }

    static final FunctionDescriptor CryptUninstallDefaultContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptUninstallDefaultContext$FUNC() { return CryptUninstallDefaultContext$FUNC_; }

    static final MethodHandle CryptUninstallDefaultContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptUninstallDefaultContext",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptUninstallDefaultContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptUninstallDefaultContext$MH() { return CryptUninstallDefaultContext$MH_; }

    static final FunctionDescriptor CryptExportPublicKeyInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptExportPublicKeyInfo$FUNC() { return CryptExportPublicKeyInfo$FUNC_; }

    static final MethodHandle CryptExportPublicKeyInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptExportPublicKeyInfo",
        "(JIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptExportPublicKeyInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptExportPublicKeyInfo$MH() { return CryptExportPublicKeyInfo$MH_; }

    static final FunctionDescriptor CryptExportPublicKeyInfoEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptExportPublicKeyInfoEx$FUNC() { return CryptExportPublicKeyInfoEx$FUNC_; }

    static final MethodHandle CryptExportPublicKeyInfoEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptExportPublicKeyInfoEx",
        "(JIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptExportPublicKeyInfoEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptExportPublicKeyInfoEx$MH() { return CryptExportPublicKeyInfoEx$MH_; }

    static final FunctionDescriptor CryptExportPublicKeyInfoFromBCryptKeyHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptExportPublicKeyInfoFromBCryptKeyHandle$FUNC() { return CryptExportPublicKeyInfoFromBCryptKeyHandle$FUNC_; }

    static final MethodHandle CryptExportPublicKeyInfoFromBCryptKeyHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptExportPublicKeyInfoFromBCryptKeyHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptExportPublicKeyInfoFromBCryptKeyHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptExportPublicKeyInfoFromBCryptKeyHandle$MH() { return CryptExportPublicKeyInfoFromBCryptKeyHandle$MH_; }

    static final FunctionDescriptor CryptImportPublicKeyInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptImportPublicKeyInfo$FUNC() { return CryptImportPublicKeyInfo$FUNC_; }

    static final MethodHandle CryptImportPublicKeyInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptImportPublicKeyInfo",
        "(JILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptImportPublicKeyInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptImportPublicKeyInfo$MH() { return CryptImportPublicKeyInfo$MH_; }

    static final FunctionDescriptor CryptImportPublicKeyInfoEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptImportPublicKeyInfoEx$FUNC() { return CryptImportPublicKeyInfoEx$FUNC_; }

    static final MethodHandle CryptImportPublicKeyInfoEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptImportPublicKeyInfoEx",
        "(JILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptImportPublicKeyInfoEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptImportPublicKeyInfoEx$MH() { return CryptImportPublicKeyInfoEx$MH_; }

    static final FunctionDescriptor CryptImportPublicKeyInfoEx2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptImportPublicKeyInfoEx2$FUNC() { return CryptImportPublicKeyInfoEx2$FUNC_; }

    static final MethodHandle CryptImportPublicKeyInfoEx2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptImportPublicKeyInfoEx2",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptImportPublicKeyInfoEx2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptImportPublicKeyInfoEx2$MH() { return CryptImportPublicKeyInfoEx2$MH_; }

    static final FunctionDescriptor CryptAcquireCertificatePrivateKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptAcquireCertificatePrivateKey$FUNC() { return CryptAcquireCertificatePrivateKey$FUNC_; }

    static final MethodHandle CryptAcquireCertificatePrivateKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptAcquireCertificatePrivateKey",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptAcquireCertificatePrivateKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptAcquireCertificatePrivateKey$MH() { return CryptAcquireCertificatePrivateKey$MH_; }

    static final FunctionDescriptor CryptFindCertificateKeyProvInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptFindCertificateKeyProvInfo$FUNC() { return CryptFindCertificateKeyProvInfo$FUNC_; }

    static final MethodHandle CryptFindCertificateKeyProvInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptFindCertificateKeyProvInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptFindCertificateKeyProvInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptFindCertificateKeyProvInfo$MH() { return CryptFindCertificateKeyProvInfo$MH_; }

    static final FunctionDescriptor CryptImportPKCS8$FUNC_ = FunctionDescriptor.of(C_INT,
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("PrivateKey"),
            C_POINTER.withName("pResolvehCryptProvFunc"),
            C_POINTER.withName("pVoidResolveFunc"),
            C_POINTER.withName("pDecryptPrivateKeyFunc"),
            C_POINTER.withName("pVoidDecryptFunc")
        ).withName("_CRYPT_PKCS8_IMPORT_PARAMS"),
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptImportPKCS8$FUNC() { return CryptImportPKCS8$FUNC_; }

    static final MethodHandle CryptImportPKCS8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptImportPKCS8",
        "(Ljdk/incubator/foreign/MemorySegment;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptImportPKCS8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptImportPKCS8$MH() { return CryptImportPKCS8$MH_; }

    static final FunctionDescriptor CryptExportPKCS8$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptExportPKCS8$FUNC() { return CryptExportPKCS8$FUNC_; }

    static final MethodHandle CryptExportPKCS8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptExportPKCS8",
        "(JILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptExportPKCS8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptExportPKCS8$MH() { return CryptExportPKCS8$MH_; }

    static final FunctionDescriptor CryptExportPKCS8Ex$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptExportPKCS8Ex$FUNC() { return CryptExportPKCS8Ex$FUNC_; }

    static final MethodHandle CryptExportPKCS8Ex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptExportPKCS8Ex",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptExportPKCS8Ex$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptExportPKCS8Ex$MH() { return CryptExportPKCS8Ex$MH_; }

    static final FunctionDescriptor CryptHashPublicKeyInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_INT,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptHashPublicKeyInfo$FUNC() { return CryptHashPublicKeyInfo$FUNC_; }

    static final MethodHandle CryptHashPublicKeyInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptHashPublicKeyInfo",
        "(JIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptHashPublicKeyInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptHashPublicKeyInfo$MH() { return CryptHashPublicKeyInfo$MH_; }

    static final FunctionDescriptor CertRDNValueToStrA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertRDNValueToStrA$FUNC() { return CertRDNValueToStrA$FUNC_; }

    static final MethodHandle CertRDNValueToStrA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertRDNValueToStrA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertRDNValueToStrA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertRDNValueToStrA$MH() { return CertRDNValueToStrA$MH_; }

    static final FunctionDescriptor CertRDNValueToStrW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertRDNValueToStrW$FUNC() { return CertRDNValueToStrW$FUNC_; }

    static final MethodHandle CertRDNValueToStrW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertRDNValueToStrW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertRDNValueToStrW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertRDNValueToStrW$MH() { return CertRDNValueToStrW$MH_; }

    static final FunctionDescriptor CertNameToStrA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertNameToStrA$FUNC() { return CertNameToStrA$FUNC_; }

    static final MethodHandle CertNameToStrA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertNameToStrA",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CertNameToStrA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertNameToStrA$MH() { return CertNameToStrA$MH_; }

    static final FunctionDescriptor CertNameToStrW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertNameToStrW$FUNC() { return CertNameToStrW$FUNC_; }

    static final MethodHandle CertNameToStrW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertNameToStrW",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CertNameToStrW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertNameToStrW$MH() { return CertNameToStrW$MH_; }

    static final FunctionDescriptor CertStrToNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertStrToNameA$FUNC() { return CertStrToNameA$FUNC_; }

    static final MethodHandle CertStrToNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertStrToNameA",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertStrToNameA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertStrToNameA$MH() { return CertStrToNameA$MH_; }

    static final FunctionDescriptor CertStrToNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertStrToNameW$FUNC() { return CertStrToNameW$FUNC_; }

    static final MethodHandle CertStrToNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertStrToNameW",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertStrToNameW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertStrToNameW$MH() { return CertStrToNameW$MH_; }

    static final FunctionDescriptor CertGetNameStringA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetNameStringA$FUNC() { return CertGetNameStringA$FUNC_; }

    static final MethodHandle CertGetNameStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetNameStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertGetNameStringA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetNameStringA$MH() { return CertGetNameStringA$MH_; }

    static final FunctionDescriptor CertGetNameStringW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertGetNameStringW$FUNC() { return CertGetNameStringW$FUNC_; }

    static final MethodHandle CertGetNameStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertGetNameStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertGetNameStringW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertGetNameStringW$MH() { return CertGetNameStringW$MH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwMsgEncodingType"),
        C_POINTER.withName("pSigningCert"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("HashAlgorithm"),
        C_POINTER.withName("pvHashAuxInfo"),
        C_LONG.withName("cMsgCert"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpMsgCert"),
        C_LONG.withName("cMsgCrl"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpMsgCrl"),
        C_LONG.withName("cAuthAttr"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgAuthAttr"),
        C_LONG.withName("cUnauthAttr"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgUnauthAttr"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwInnerContentType")
    ).withName("_CRYPT_SIGN_MESSAGE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cbSize$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$cbSize$VH_ = _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$cbSize$VH() { return _CRYPT_SIGN_MESSAGE_PARA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$dwMsgEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$dwMsgEncodingType$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$dwMsgEncodingType$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$dwMsgEncodingType$VH_ = _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMsgEncodingType"));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$dwMsgEncodingType$VH() { return _CRYPT_SIGN_MESSAGE_PARA$dwMsgEncodingType$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$pSigningCert$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$pSigningCert$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$pSigningCert$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$pSigningCert$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pSigningCert")));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$pSigningCert$VH() { return _CRYPT_SIGN_MESSAGE_PARA$pSigningCert$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$pvHashAuxInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$pvHashAuxInfo$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$pvHashAuxInfo$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$pvHashAuxInfo$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvHashAuxInfo")));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$pvHashAuxInfo$VH() { return _CRYPT_SIGN_MESSAGE_PARA$pvHashAuxInfo$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cMsgCert$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cMsgCert$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$cMsgCert$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$cMsgCert$VH_ = _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cMsgCert"));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$cMsgCert$VH() { return _CRYPT_SIGN_MESSAGE_PARA$cMsgCert$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCert$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCert$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCert$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCert$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpMsgCert")));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCert$VH() { return _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCert$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cMsgCrl$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cMsgCrl$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$cMsgCrl$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$cMsgCrl$VH_ = _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cMsgCrl"));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$cMsgCrl$VH() { return _CRYPT_SIGN_MESSAGE_PARA$cMsgCrl$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCrl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCrl$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCrl$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCrl$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpMsgCrl")));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCrl$VH() { return _CRYPT_SIGN_MESSAGE_PARA$rgpMsgCrl$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cAuthAttr$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cAuthAttr$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$cAuthAttr$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$cAuthAttr$VH_ = _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cAuthAttr"));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$cAuthAttr$VH() { return _CRYPT_SIGN_MESSAGE_PARA$cAuthAttr$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$rgAuthAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$rgAuthAttr$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$rgAuthAttr$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$rgAuthAttr$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgAuthAttr")));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$rgAuthAttr$VH() { return _CRYPT_SIGN_MESSAGE_PARA$rgAuthAttr$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cUnauthAttr$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$cUnauthAttr$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$cUnauthAttr$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$cUnauthAttr$VH_ = _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cUnauthAttr"));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$cUnauthAttr$VH() { return _CRYPT_SIGN_MESSAGE_PARA$cUnauthAttr$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$rgUnauthAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$rgUnauthAttr$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$rgUnauthAttr$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$rgUnauthAttr$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgUnauthAttr")));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$rgUnauthAttr$VH() { return _CRYPT_SIGN_MESSAGE_PARA$rgUnauthAttr$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$dwFlags$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$dwFlags$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$dwFlags$VH_ = _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$dwFlags$VH() { return _CRYPT_SIGN_MESSAGE_PARA$dwFlags$VH_; }

    static final MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$dwInnerContentType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_SIGN_MESSAGE_PARA$dwInnerContentType$LAYOUT() { return _CRYPT_SIGN_MESSAGE_PARA$dwInnerContentType$LAYOUT_; }

    static final VarHandle _CRYPT_SIGN_MESSAGE_PARA$dwInnerContentType$VH_ = _CRYPT_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwInnerContentType"));
    static final java.lang.invoke.VarHandle _CRYPT_SIGN_MESSAGE_PARA$dwInnerContentType$VH() { return _CRYPT_SIGN_MESSAGE_PARA$dwInnerContentType$VH_; }

    static final MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwMsgAndCertEncodingType"),
        C_LONGLONG.withName("hCryptProv"),
        C_POINTER.withName("pfnGetSignerCertificate"),
        C_POINTER.withName("pvGetArg")
    ).withName("_CRYPT_VERIFY_MESSAGE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$struct$LAYOUT() { return _CRYPT_VERIFY_MESSAGE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$cbSize$LAYOUT() { return _CRYPT_VERIFY_MESSAGE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_VERIFY_MESSAGE_PARA$cbSize$VH_ = _CRYPT_VERIFY_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_VERIFY_MESSAGE_PARA$cbSize$VH() { return _CRYPT_VERIFY_MESSAGE_PARA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$dwMsgAndCertEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$dwMsgAndCertEncodingType$LAYOUT() { return _CRYPT_VERIFY_MESSAGE_PARA$dwMsgAndCertEncodingType$LAYOUT_; }

    static final VarHandle _CRYPT_VERIFY_MESSAGE_PARA$dwMsgAndCertEncodingType$VH_ = _CRYPT_VERIFY_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMsgAndCertEncodingType"));
    static final java.lang.invoke.VarHandle _CRYPT_VERIFY_MESSAGE_PARA$dwMsgAndCertEncodingType$VH() { return _CRYPT_VERIFY_MESSAGE_PARA$dwMsgAndCertEncodingType$VH_; }

    static final MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$hCryptProv$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$hCryptProv$LAYOUT() { return _CRYPT_VERIFY_MESSAGE_PARA$hCryptProv$LAYOUT_; }

    static final VarHandle _CRYPT_VERIFY_MESSAGE_PARA$hCryptProv$VH_ = _CRYPT_VERIFY_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCryptProv"));
    static final java.lang.invoke.VarHandle _CRYPT_VERIFY_MESSAGE_PARA$hCryptProv$VH() { return _CRYPT_VERIFY_MESSAGE_PARA$hCryptProv$VH_; }

    static final MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$pfnGetSignerCertificate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$pfnGetSignerCertificate$LAYOUT() { return _CRYPT_VERIFY_MESSAGE_PARA$pfnGetSignerCertificate$LAYOUT_; }

    static final VarHandle _CRYPT_VERIFY_MESSAGE_PARA$pfnGetSignerCertificate$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_VERIFY_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnGetSignerCertificate")));
    static final java.lang.invoke.VarHandle _CRYPT_VERIFY_MESSAGE_PARA$pfnGetSignerCertificate$VH() { return _CRYPT_VERIFY_MESSAGE_PARA$pfnGetSignerCertificate$VH_; }

    static final MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$pvGetArg$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_VERIFY_MESSAGE_PARA$pvGetArg$LAYOUT() { return _CRYPT_VERIFY_MESSAGE_PARA$pvGetArg$LAYOUT_; }

    static final VarHandle _CRYPT_VERIFY_MESSAGE_PARA$pvGetArg$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_VERIFY_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvGetArg")));
    static final java.lang.invoke.VarHandle _CRYPT_VERIFY_MESSAGE_PARA$pvGetArg$VH() { return _CRYPT_VERIFY_MESSAGE_PARA$pvGetArg$VH_; }

    static final MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwMsgEncodingType"),
        C_LONGLONG.withName("hCryptProv"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("ContentEncryptionAlgorithm"),
        C_POINTER.withName("pvEncryptionAuxInfo"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwInnerContentType")
    ).withName("_CRYPT_ENCRYPT_MESSAGE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$struct$LAYOUT() { return _CRYPT_ENCRYPT_MESSAGE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$cbSize$LAYOUT() { return _CRYPT_ENCRYPT_MESSAGE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$cbSize$VH_ = _CRYPT_ENCRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$cbSize$VH() { return _CRYPT_ENCRYPT_MESSAGE_PARA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$dwMsgEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$dwMsgEncodingType$LAYOUT() { return _CRYPT_ENCRYPT_MESSAGE_PARA$dwMsgEncodingType$LAYOUT_; }

    static final VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$dwMsgEncodingType$VH_ = _CRYPT_ENCRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMsgEncodingType"));
    static final java.lang.invoke.VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$dwMsgEncodingType$VH() { return _CRYPT_ENCRYPT_MESSAGE_PARA$dwMsgEncodingType$VH_; }

    static final MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$hCryptProv$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$hCryptProv$LAYOUT() { return _CRYPT_ENCRYPT_MESSAGE_PARA$hCryptProv$LAYOUT_; }

    static final VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$hCryptProv$VH_ = _CRYPT_ENCRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCryptProv"));
    static final java.lang.invoke.VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$hCryptProv$VH() { return _CRYPT_ENCRYPT_MESSAGE_PARA$hCryptProv$VH_; }

    static final MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$pvEncryptionAuxInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$pvEncryptionAuxInfo$LAYOUT() { return _CRYPT_ENCRYPT_MESSAGE_PARA$pvEncryptionAuxInfo$LAYOUT_; }

    static final VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$pvEncryptionAuxInfo$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_ENCRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvEncryptionAuxInfo")));
    static final java.lang.invoke.VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$pvEncryptionAuxInfo$VH() { return _CRYPT_ENCRYPT_MESSAGE_PARA$pvEncryptionAuxInfo$VH_; }

    static final MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$dwFlags$LAYOUT() { return _CRYPT_ENCRYPT_MESSAGE_PARA$dwFlags$LAYOUT_; }

    static final VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$dwFlags$VH_ = _CRYPT_ENCRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$dwFlags$VH() { return _CRYPT_ENCRYPT_MESSAGE_PARA$dwFlags$VH_; }

    static final MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$dwInnerContentType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_ENCRYPT_MESSAGE_PARA$dwInnerContentType$LAYOUT() { return _CRYPT_ENCRYPT_MESSAGE_PARA$dwInnerContentType$LAYOUT_; }

    static final VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$dwInnerContentType$VH_ = _CRYPT_ENCRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwInnerContentType"));
    static final java.lang.invoke.VarHandle _CRYPT_ENCRYPT_MESSAGE_PARA$dwInnerContentType$VH() { return _CRYPT_ENCRYPT_MESSAGE_PARA$dwInnerContentType$VH_; }

    static final MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwMsgAndCertEncodingType"),
        C_LONG.withName("cCertStore"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rghCertStore")
    ).withName("_CRYPT_DECRYPT_MESSAGE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$struct$LAYOUT() { return _CRYPT_DECRYPT_MESSAGE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$cbSize$LAYOUT() { return _CRYPT_DECRYPT_MESSAGE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_DECRYPT_MESSAGE_PARA$cbSize$VH_ = _CRYPT_DECRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_DECRYPT_MESSAGE_PARA$cbSize$VH() { return _CRYPT_DECRYPT_MESSAGE_PARA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$dwMsgAndCertEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$dwMsgAndCertEncodingType$LAYOUT() { return _CRYPT_DECRYPT_MESSAGE_PARA$dwMsgAndCertEncodingType$LAYOUT_; }

    static final VarHandle _CRYPT_DECRYPT_MESSAGE_PARA$dwMsgAndCertEncodingType$VH_ = _CRYPT_DECRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMsgAndCertEncodingType"));
    static final java.lang.invoke.VarHandle _CRYPT_DECRYPT_MESSAGE_PARA$dwMsgAndCertEncodingType$VH() { return _CRYPT_DECRYPT_MESSAGE_PARA$dwMsgAndCertEncodingType$VH_; }

    static final MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$cCertStore$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$cCertStore$LAYOUT() { return _CRYPT_DECRYPT_MESSAGE_PARA$cCertStore$LAYOUT_; }

    static final VarHandle _CRYPT_DECRYPT_MESSAGE_PARA$cCertStore$VH_ = _CRYPT_DECRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cCertStore"));
    static final java.lang.invoke.VarHandle _CRYPT_DECRYPT_MESSAGE_PARA$cCertStore$VH() { return _CRYPT_DECRYPT_MESSAGE_PARA$cCertStore$VH_; }

    static final MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$rghCertStore$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_DECRYPT_MESSAGE_PARA$rghCertStore$LAYOUT() { return _CRYPT_DECRYPT_MESSAGE_PARA$rghCertStore$LAYOUT_; }

    static final VarHandle _CRYPT_DECRYPT_MESSAGE_PARA$rghCertStore$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_DECRYPT_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rghCertStore")));
    static final java.lang.invoke.VarHandle _CRYPT_DECRYPT_MESSAGE_PARA$rghCertStore$VH() { return _CRYPT_DECRYPT_MESSAGE_PARA$rghCertStore$VH_; }

    static final MemoryLayout _CRYPT_HASH_MESSAGE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwMsgEncodingType"),
        C_LONGLONG.withName("hCryptProv"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("HashAlgorithm"),
        C_POINTER.withName("pvHashAuxInfo")
    ).withName("_CRYPT_HASH_MESSAGE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_HASH_MESSAGE_PARA$struct$LAYOUT() { return _CRYPT_HASH_MESSAGE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_HASH_MESSAGE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_HASH_MESSAGE_PARA$cbSize$LAYOUT() { return _CRYPT_HASH_MESSAGE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_HASH_MESSAGE_PARA$cbSize$VH_ = _CRYPT_HASH_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_HASH_MESSAGE_PARA$cbSize$VH() { return _CRYPT_HASH_MESSAGE_PARA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_HASH_MESSAGE_PARA$dwMsgEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_HASH_MESSAGE_PARA$dwMsgEncodingType$LAYOUT() { return _CRYPT_HASH_MESSAGE_PARA$dwMsgEncodingType$LAYOUT_; }

    static final VarHandle _CRYPT_HASH_MESSAGE_PARA$dwMsgEncodingType$VH_ = _CRYPT_HASH_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMsgEncodingType"));
    static final java.lang.invoke.VarHandle _CRYPT_HASH_MESSAGE_PARA$dwMsgEncodingType$VH() { return _CRYPT_HASH_MESSAGE_PARA$dwMsgEncodingType$VH_; }

    static final MemoryLayout _CRYPT_HASH_MESSAGE_PARA$hCryptProv$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_HASH_MESSAGE_PARA$hCryptProv$LAYOUT() { return _CRYPT_HASH_MESSAGE_PARA$hCryptProv$LAYOUT_; }

    static final VarHandle _CRYPT_HASH_MESSAGE_PARA$hCryptProv$VH_ = _CRYPT_HASH_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCryptProv"));
    static final java.lang.invoke.VarHandle _CRYPT_HASH_MESSAGE_PARA$hCryptProv$VH() { return _CRYPT_HASH_MESSAGE_PARA$hCryptProv$VH_; }

    static final MemoryLayout _CRYPT_HASH_MESSAGE_PARA$pvHashAuxInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_HASH_MESSAGE_PARA$pvHashAuxInfo$LAYOUT() { return _CRYPT_HASH_MESSAGE_PARA$pvHashAuxInfo$LAYOUT_; }

    static final VarHandle _CRYPT_HASH_MESSAGE_PARA$pvHashAuxInfo$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_HASH_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvHashAuxInfo")));
    static final java.lang.invoke.VarHandle _CRYPT_HASH_MESSAGE_PARA$pvHashAuxInfo$VH() { return _CRYPT_HASH_MESSAGE_PARA$pvHashAuxInfo$VH_; }

    static final MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwMsgAndCertEncodingType"),
        C_LONGLONG.withName("hCryptProv"),
        C_LONGLONG.withName("hNCryptKey"),
        C_LONG.withName("dwKeySpec"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("HashAlgorithm"),
        C_POINTER.withName("pvHashAuxInfo"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("PubKeyAlgorithm")
    ).withName("_CRYPT_KEY_SIGN_MESSAGE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$struct$LAYOUT() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$cbSize$LAYOUT() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$cbSize$VH_ = _CRYPT_KEY_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$cbSize$VH() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$dwMsgAndCertEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$dwMsgAndCertEncodingType$LAYOUT() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$dwMsgAndCertEncodingType$LAYOUT_; }

    static final VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$dwMsgAndCertEncodingType$VH_ = _CRYPT_KEY_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMsgAndCertEncodingType"));
    static final java.lang.invoke.VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$dwMsgAndCertEncodingType$VH() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$dwMsgAndCertEncodingType$VH_; }

    static final MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$hCryptProv$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$hCryptProv$LAYOUT() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$hCryptProv$LAYOUT_; }

    static final VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$hCryptProv$VH_ = _CRYPT_KEY_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCryptProv"));
    static final java.lang.invoke.VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$hCryptProv$VH() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$hCryptProv$VH_; }

    static final MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$hNCryptKey$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$hNCryptKey$LAYOUT() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$hNCryptKey$LAYOUT_; }

    static final VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$hNCryptKey$VH_ = _CRYPT_KEY_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hNCryptKey"));
    static final java.lang.invoke.VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$hNCryptKey$VH() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$hNCryptKey$VH_; }

    static final MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$dwKeySpec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$dwKeySpec$LAYOUT() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$dwKeySpec$LAYOUT_; }

    static final VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$dwKeySpec$VH_ = _CRYPT_KEY_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwKeySpec"));
    static final java.lang.invoke.VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$dwKeySpec$VH() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$dwKeySpec$VH_; }

    static final MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$pvHashAuxInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_SIGN_MESSAGE_PARA$pvHashAuxInfo$LAYOUT() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$pvHashAuxInfo$LAYOUT_; }

    static final VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$pvHashAuxInfo$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_KEY_SIGN_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvHashAuxInfo")));
    static final java.lang.invoke.VarHandle _CRYPT_KEY_SIGN_MESSAGE_PARA$pvHashAuxInfo$VH() { return _CRYPT_KEY_SIGN_MESSAGE_PARA$pvHashAuxInfo$VH_; }

    static final MemoryLayout _CRYPT_KEY_VERIFY_MESSAGE_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwMsgEncodingType"),
        C_LONGLONG.withName("hCryptProv")
    ).withName("_CRYPT_KEY_VERIFY_MESSAGE_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_VERIFY_MESSAGE_PARA$struct$LAYOUT() { return _CRYPT_KEY_VERIFY_MESSAGE_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_KEY_VERIFY_MESSAGE_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_VERIFY_MESSAGE_PARA$cbSize$LAYOUT() { return _CRYPT_KEY_VERIFY_MESSAGE_PARA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_KEY_VERIFY_MESSAGE_PARA$cbSize$VH_ = _CRYPT_KEY_VERIFY_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_KEY_VERIFY_MESSAGE_PARA$cbSize$VH() { return _CRYPT_KEY_VERIFY_MESSAGE_PARA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_KEY_VERIFY_MESSAGE_PARA$dwMsgEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_VERIFY_MESSAGE_PARA$dwMsgEncodingType$LAYOUT() { return _CRYPT_KEY_VERIFY_MESSAGE_PARA$dwMsgEncodingType$LAYOUT_; }

    static final VarHandle _CRYPT_KEY_VERIFY_MESSAGE_PARA$dwMsgEncodingType$VH_ = _CRYPT_KEY_VERIFY_MESSAGE_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMsgEncodingType"));
    static final java.lang.invoke.VarHandle _CRYPT_KEY_VERIFY_MESSAGE_PARA$dwMsgEncodingType$VH() { return _CRYPT_KEY_VERIFY_MESSAGE_PARA$dwMsgEncodingType$VH_; }

    static final MemoryLayout _CRYPT_KEY_VERIFY_MESSAGE_PARA$hCryptProv$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_KEY_VERIFY_MESSAGE_PARA$hCryptProv$LAYOUT() { return _CRYPT_KEY_VERIFY_MESSAGE_PARA$hCryptProv$LAYOUT_; }

    static final VarHandle _CRYPT_KEY_VERIFY_MESSAGE_PARA$hCryptProv$VH_ = _CRYPT_KEY_VERIFY_MESSAGE_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCryptProv"));
    static final java.lang.invoke.VarHandle _CRYPT_KEY_VERIFY_MESSAGE_PARA$hCryptProv$VH() { return _CRYPT_KEY_VERIFY_MESSAGE_PARA$hCryptProv$VH_; }

    static final FunctionDescriptor CryptSignMessage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSignMessage$FUNC() { return CryptSignMessage$FUNC_; }

    static final MethodHandle CryptSignMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSignMessage",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptSignMessage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSignMessage$MH() { return CryptSignMessage$MH_; }

    static final FunctionDescriptor CryptVerifyMessageSignature$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifyMessageSignature$FUNC() { return CryptVerifyMessageSignature$FUNC_; }

    static final MethodHandle CryptVerifyMessageSignature$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifyMessageSignature",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptVerifyMessageSignature$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifyMessageSignature$MH() { return CryptVerifyMessageSignature$MH_; }

    static final FunctionDescriptor CryptGetMessageSignerCount$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptGetMessageSignerCount$FUNC() { return CryptGetMessageSignerCount$FUNC_; }

    static final MethodHandle CryptGetMessageSignerCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptGetMessageSignerCount",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        CryptGetMessageSignerCount$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptGetMessageSignerCount$MH() { return CryptGetMessageSignerCount$MH_; }

    static final FunctionDescriptor CryptGetMessageCertificates$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptGetMessageCertificates$FUNC() { return CryptGetMessageCertificates$FUNC_; }

    static final MethodHandle CryptGetMessageCertificates$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptGetMessageCertificates",
        "(IJILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CryptGetMessageCertificates$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptGetMessageCertificates$MH() { return CryptGetMessageCertificates$MH_; }

    static final FunctionDescriptor CryptVerifyDetachedMessageSignature$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifyDetachedMessageSignature$FUNC() { return CryptVerifyDetachedMessageSignature$FUNC_; }

    static final MethodHandle CryptVerifyDetachedMessageSignature$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifyDetachedMessageSignature",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptVerifyDetachedMessageSignature$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifyDetachedMessageSignature$MH() { return CryptVerifyDetachedMessageSignature$MH_; }

    static final FunctionDescriptor CryptEncryptMessage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptEncryptMessage$FUNC() { return CryptEncryptMessage$FUNC_; }

    static final MethodHandle CryptEncryptMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptEncryptMessage",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptEncryptMessage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptEncryptMessage$MH() { return CryptEncryptMessage$MH_; }

    static final FunctionDescriptor CryptDecryptMessage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptDecryptMessage$FUNC() { return CryptDecryptMessage$FUNC_; }

    static final MethodHandle CryptDecryptMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptDecryptMessage",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptDecryptMessage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptDecryptMessage$MH() { return CryptDecryptMessage$MH_; }

    static final FunctionDescriptor CryptSignAndEncryptMessage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSignAndEncryptMessage$FUNC() { return CryptSignAndEncryptMessage$FUNC_; }

    static final MethodHandle CryptSignAndEncryptMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSignAndEncryptMessage",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptSignAndEncryptMessage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSignAndEncryptMessage$MH() { return CryptSignAndEncryptMessage$MH_; }

    static final FunctionDescriptor CryptDecryptAndVerifyMessageSignature$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptDecryptAndVerifyMessageSignature$FUNC() { return CryptDecryptAndVerifyMessageSignature$FUNC_; }

    static final MethodHandle CryptDecryptAndVerifyMessageSignature$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptDecryptAndVerifyMessageSignature",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptDecryptAndVerifyMessageSignature$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptDecryptAndVerifyMessageSignature$MH() { return CryptDecryptAndVerifyMessageSignature$MH_; }

    static final FunctionDescriptor CryptDecodeMessage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptDecodeMessage$FUNC() { return CryptDecodeMessage$FUNC_; }

    static final MethodHandle CryptDecodeMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptDecodeMessage",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptDecodeMessage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptDecodeMessage$MH() { return CryptDecodeMessage$MH_; }

    static final FunctionDescriptor CryptHashMessage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptHashMessage$FUNC() { return CryptHashMessage$FUNC_; }

    static final MethodHandle CryptHashMessage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptHashMessage",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptHashMessage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptHashMessage$MH() { return CryptHashMessage$MH_; }

    static final FunctionDescriptor CryptVerifyMessageHash$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifyMessageHash$FUNC() { return CryptVerifyMessageHash$FUNC_; }

    static final MethodHandle CryptVerifyMessageHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifyMessageHash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptVerifyMessageHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifyMessageHash$MH() { return CryptVerifyMessageHash$MH_; }

    static final FunctionDescriptor CryptVerifyDetachedMessageHash$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifyDetachedMessageHash$FUNC() { return CryptVerifyDetachedMessageHash$FUNC_; }

    static final MethodHandle CryptVerifyDetachedMessageHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifyDetachedMessageHash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptVerifyDetachedMessageHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifyDetachedMessageHash$MH() { return CryptVerifyDetachedMessageHash$MH_; }

    static final FunctionDescriptor CryptSignMessageWithKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSignMessageWithKey$FUNC() { return CryptSignMessageWithKey$FUNC_; }

    static final MethodHandle CryptSignMessageWithKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSignMessageWithKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptSignMessageWithKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSignMessageWithKey$MH() { return CryptSignMessageWithKey$MH_; }

    static final FunctionDescriptor CryptVerifyMessageSignatureWithKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifyMessageSignatureWithKey$FUNC() { return CryptVerifyMessageSignatureWithKey$FUNC_; }

    static final MethodHandle CryptVerifyMessageSignatureWithKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifyMessageSignatureWithKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptVerifyMessageSignatureWithKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifyMessageSignatureWithKey$MH() { return CryptVerifyMessageSignatureWithKey$MH_; }

    static final FunctionDescriptor CertOpenSystemStoreA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertOpenSystemStoreA$FUNC() { return CertOpenSystemStoreA$FUNC_; }

    static final MethodHandle CertOpenSystemStoreA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertOpenSystemStoreA",
        "(JLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertOpenSystemStoreA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertOpenSystemStoreA$MH() { return CertOpenSystemStoreA$MH_; }

    static final FunctionDescriptor CertOpenSystemStoreW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertOpenSystemStoreW$FUNC() { return CertOpenSystemStoreW$FUNC_; }

    static final MethodHandle CertOpenSystemStoreW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertOpenSystemStoreW",
        "(JLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CertOpenSystemStoreW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertOpenSystemStoreW$MH() { return CertOpenSystemStoreW$MH_; }

    static final FunctionDescriptor CertAddEncodedCertificateToSystemStoreA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddEncodedCertificateToSystemStoreA$FUNC() { return CertAddEncodedCertificateToSystemStoreA$FUNC_; }

    static final MethodHandle CertAddEncodedCertificateToSystemStoreA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddEncodedCertificateToSystemStoreA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertAddEncodedCertificateToSystemStoreA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddEncodedCertificateToSystemStoreA$MH() { return CertAddEncodedCertificateToSystemStoreA$MH_; }

    static final FunctionDescriptor CertAddEncodedCertificateToSystemStoreW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertAddEncodedCertificateToSystemStoreW$FUNC() { return CertAddEncodedCertificateToSystemStoreW$FUNC_; }

    static final MethodHandle CertAddEncodedCertificateToSystemStoreW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertAddEncodedCertificateToSystemStoreW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CertAddEncodedCertificateToSystemStoreW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertAddEncodedCertificateToSystemStoreW$MH() { return CertAddEncodedCertificateToSystemStoreW$MH_; }

    static final MemoryLayout _CERT_CHAIN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cCerts"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("certs"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pwszContainerName"),
            C_POINTER.withName("pwszProvName"),
            C_LONG.withName("dwProvType"),
            C_LONG.withName("dwFlags"),
            C_LONG.withName("cProvParam"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("rgProvParam"),
            C_LONG.withName("dwKeySpec"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("keyLocatorInfo")
    ).withName("_CERT_CHAIN");
    static final jdk.incubator.foreign.MemoryLayout _CERT_CHAIN$struct$LAYOUT() { return _CERT_CHAIN$struct$LAYOUT_; }

    static final MemoryLayout _CERT_CHAIN$cCerts$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERT_CHAIN$cCerts$LAYOUT() { return _CERT_CHAIN$cCerts$LAYOUT_; }

    static final VarHandle _CERT_CHAIN$cCerts$VH_ = _CERT_CHAIN$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cCerts"));
    static final java.lang.invoke.VarHandle _CERT_CHAIN$cCerts$VH() { return _CERT_CHAIN$cCerts$VH_; }

    static final MemoryLayout _CERT_CHAIN$certs$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERT_CHAIN$certs$LAYOUT() { return _CERT_CHAIN$certs$LAYOUT_; }

    static final VarHandle _CERT_CHAIN$certs$VH_ = MemoryHandles.asAddressVarHandle(_CERT_CHAIN$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("certs")));
    static final java.lang.invoke.VarHandle _CERT_CHAIN$certs$VH() { return _CERT_CHAIN$certs$VH_; }

    static final FunctionDescriptor FindCertsByIssuer$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor FindCertsByIssuer$FUNC() { return FindCertsByIssuer$FUNC_; }

    static final MethodHandle FindCertsByIssuer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FindCertsByIssuer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        FindCertsByIssuer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FindCertsByIssuer$MH() { return FindCertsByIssuer$MH_; }

    static final FunctionDescriptor CryptQueryObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptQueryObject$FUNC() { return CryptQueryObject$FUNC_; }

    static final MethodHandle CryptQueryObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptQueryObject",
        "(ILjdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptQueryObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptQueryObject$MH() { return CryptQueryObject$MH_; }

    static final FunctionDescriptor CryptMemAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptMemAlloc$FUNC() { return CryptMemAlloc$FUNC_; }

    static final MethodHandle CryptMemAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptMemAlloc",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        CryptMemAlloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptMemAlloc$MH() { return CryptMemAlloc$MH_; }

    static final FunctionDescriptor CryptMemRealloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptMemRealloc$FUNC() { return CryptMemRealloc$FUNC_; }

    static final MethodHandle CryptMemRealloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptMemRealloc",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CryptMemRealloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptMemRealloc$MH() { return CryptMemRealloc$MH_; }

    static final FunctionDescriptor CryptMemFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptMemFree$FUNC() { return CryptMemFree$FUNC_; }

    static final MethodHandle CryptMemFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptMemFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CryptMemFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptMemFree$MH() { return CryptMemFree$MH_; }

    static final FunctionDescriptor CryptCreateAsyncHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptCreateAsyncHandle$FUNC() { return CryptCreateAsyncHandle$FUNC_; }

    static final MethodHandle CryptCreateAsyncHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptCreateAsyncHandle",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptCreateAsyncHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptCreateAsyncHandle$MH() { return CryptCreateAsyncHandle$MH_; }

    static final FunctionDescriptor CryptSetAsyncParam$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSetAsyncParam$FUNC() { return CryptSetAsyncParam$FUNC_; }

    static final MethodHandle CryptSetAsyncParam$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSetAsyncParam",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptSetAsyncParam$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSetAsyncParam$MH() { return CryptSetAsyncParam$MH_; }

    static final FunctionDescriptor CryptSetAsyncParam$pfnFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSetAsyncParam$pfnFree$FUNC() { return CryptSetAsyncParam$pfnFree$FUNC_; }

    static final FunctionDescriptor CryptGetAsyncParam$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptGetAsyncParam$FUNC() { return CryptGetAsyncParam$FUNC_; }

    static final MethodHandle CryptGetAsyncParam$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptGetAsyncParam",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptGetAsyncParam$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptGetAsyncParam$MH() { return CryptGetAsyncParam$MH_; }

    static final FunctionDescriptor CryptCloseAsyncHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptCloseAsyncHandle$FUNC() { return CryptCloseAsyncHandle$FUNC_; }

    static final MethodHandle CryptCloseAsyncHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptCloseAsyncHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptCloseAsyncHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptCloseAsyncHandle$MH() { return CryptCloseAsyncHandle$MH_; }

    static final MemoryLayout _CRYPT_BLOB_ARRAY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cBlob"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgBlob")
    ).withName("_CRYPT_BLOB_ARRAY");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_BLOB_ARRAY$struct$LAYOUT() { return _CRYPT_BLOB_ARRAY$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_BLOB_ARRAY$cBlob$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_BLOB_ARRAY$cBlob$LAYOUT() { return _CRYPT_BLOB_ARRAY$cBlob$LAYOUT_; }

    static final VarHandle _CRYPT_BLOB_ARRAY$cBlob$VH_ = _CRYPT_BLOB_ARRAY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cBlob"));
    static final java.lang.invoke.VarHandle _CRYPT_BLOB_ARRAY$cBlob$VH() { return _CRYPT_BLOB_ARRAY$cBlob$VH_; }

    static final MemoryLayout _CRYPT_BLOB_ARRAY$rgBlob$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_BLOB_ARRAY$rgBlob$LAYOUT() { return _CRYPT_BLOB_ARRAY$rgBlob$LAYOUT_; }

    static final VarHandle _CRYPT_BLOB_ARRAY$rgBlob$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_BLOB_ARRAY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgBlob")));
    static final java.lang.invoke.VarHandle _CRYPT_BLOB_ARRAY$rgBlob$VH() { return _CRYPT_BLOB_ARRAY$rgBlob$VH_; }

    static final MemoryLayout _CRYPT_CREDENTIALS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pszCredentialsOid"),
        C_POINTER.withName("pvCredentials")
    ).withName("_CRYPT_CREDENTIALS");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CREDENTIALS$struct$LAYOUT() { return _CRYPT_CREDENTIALS$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_CREDENTIALS$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CREDENTIALS$cbSize$LAYOUT() { return _CRYPT_CREDENTIALS$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_CREDENTIALS$cbSize$VH_ = _CRYPT_CREDENTIALS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_CREDENTIALS$cbSize$VH() { return _CRYPT_CREDENTIALS$cbSize$VH_; }

    static final MemoryLayout _CRYPT_CREDENTIALS$pszCredentialsOid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CREDENTIALS$pszCredentialsOid$LAYOUT() { return _CRYPT_CREDENTIALS$pszCredentialsOid$LAYOUT_; }

    static final VarHandle _CRYPT_CREDENTIALS$pszCredentialsOid$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_CREDENTIALS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszCredentialsOid")));
    static final java.lang.invoke.VarHandle _CRYPT_CREDENTIALS$pszCredentialsOid$VH() { return _CRYPT_CREDENTIALS$pszCredentialsOid$VH_; }

    static final MemoryLayout _CRYPT_CREDENTIALS$pvCredentials$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CREDENTIALS$pvCredentials$LAYOUT() { return _CRYPT_CREDENTIALS$pvCredentials$LAYOUT_; }

    static final VarHandle _CRYPT_CREDENTIALS$pvCredentials$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_CREDENTIALS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvCredentials")));
    static final java.lang.invoke.VarHandle _CRYPT_CREDENTIALS$pvCredentials$VH() { return _CRYPT_CREDENTIALS$pvCredentials$VH_; }

    static final MemoryLayout _CRYPT_PASSWORD_CREDENTIALSA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pszUsername"),
        C_POINTER.withName("pszPassword")
    ).withName("_CRYPT_PASSWORD_CREDENTIALSA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PASSWORD_CREDENTIALSA$struct$LAYOUT() { return _CRYPT_PASSWORD_CREDENTIALSA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PASSWORD_CREDENTIALSA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PASSWORD_CREDENTIALSA$cbSize$LAYOUT() { return _CRYPT_PASSWORD_CREDENTIALSA$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_PASSWORD_CREDENTIALSA$cbSize$VH_ = _CRYPT_PASSWORD_CREDENTIALSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_PASSWORD_CREDENTIALSA$cbSize$VH() { return _CRYPT_PASSWORD_CREDENTIALSA$cbSize$VH_; }

    static final MemoryLayout _CRYPT_PASSWORD_CREDENTIALSA$pszUsername$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PASSWORD_CREDENTIALSA$pszUsername$LAYOUT() { return _CRYPT_PASSWORD_CREDENTIALSA$pszUsername$LAYOUT_; }

    static final VarHandle _CRYPT_PASSWORD_CREDENTIALSA$pszUsername$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PASSWORD_CREDENTIALSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszUsername")));
    static final java.lang.invoke.VarHandle _CRYPT_PASSWORD_CREDENTIALSA$pszUsername$VH() { return _CRYPT_PASSWORD_CREDENTIALSA$pszUsername$VH_; }

    static final MemoryLayout _CRYPT_PASSWORD_CREDENTIALSA$pszPassword$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PASSWORD_CREDENTIALSA$pszPassword$LAYOUT() { return _CRYPT_PASSWORD_CREDENTIALSA$pszPassword$LAYOUT_; }

    static final VarHandle _CRYPT_PASSWORD_CREDENTIALSA$pszPassword$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PASSWORD_CREDENTIALSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszPassword")));
    static final java.lang.invoke.VarHandle _CRYPT_PASSWORD_CREDENTIALSA$pszPassword$VH() { return _CRYPT_PASSWORD_CREDENTIALSA$pszPassword$VH_; }

    static final MemoryLayout _CRYPT_PASSWORD_CREDENTIALSW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pszUsername"),
        C_POINTER.withName("pszPassword")
    ).withName("_CRYPT_PASSWORD_CREDENTIALSW");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PASSWORD_CREDENTIALSW$struct$LAYOUT() { return _CRYPT_PASSWORD_CREDENTIALSW$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PASSWORD_CREDENTIALSW$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PASSWORD_CREDENTIALSW$cbSize$LAYOUT() { return _CRYPT_PASSWORD_CREDENTIALSW$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_PASSWORD_CREDENTIALSW$cbSize$VH_ = _CRYPT_PASSWORD_CREDENTIALSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_PASSWORD_CREDENTIALSW$cbSize$VH() { return _CRYPT_PASSWORD_CREDENTIALSW$cbSize$VH_; }

    static final MemoryLayout _CRYPT_PASSWORD_CREDENTIALSW$pszUsername$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PASSWORD_CREDENTIALSW$pszUsername$LAYOUT() { return _CRYPT_PASSWORD_CREDENTIALSW$pszUsername$LAYOUT_; }

    static final VarHandle _CRYPT_PASSWORD_CREDENTIALSW$pszUsername$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PASSWORD_CREDENTIALSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszUsername")));
    static final java.lang.invoke.VarHandle _CRYPT_PASSWORD_CREDENTIALSW$pszUsername$VH() { return _CRYPT_PASSWORD_CREDENTIALSW$pszUsername$VH_; }

}

