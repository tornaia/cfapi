// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$13 extends cfapi_h$12 {

    /* package-private */ cfapi_h$13() {}
    public static @C("int") int FindExSearchNameMatch() {
        return cfapi_h$constants$24.FindExSearchNameMatch();
    }
    public static @C("int") int FindExSearchLimitToDirectories() {
        return cfapi_h$constants$24.FindExSearchLimitToDirectories();
    }
    public static @C("int") int FindExSearchLimitToDevices() {
        return cfapi_h$constants$24.FindExSearchLimitToDevices();
    }
    public static @C("int") int FindExSearchMaxSearchOp() {
        return cfapi_h$constants$24.FindExSearchMaxSearchOp();
    }
    public static @C("int") int ReadDirectoryNotifyInformation() {
        return cfapi_h$constants$24.ReadDirectoryNotifyInformation();
    }
    public static @C("int") int ReadDirectoryNotifyExtendedInformation() {
        return cfapi_h$constants$24.ReadDirectoryNotifyExtendedInformation();
    }
    public static @C("int") int GetFileExInfoStandard() {
        return cfapi_h$constants$24.GetFileExInfoStandard();
    }
    public static @C("int") int GetFileExMaxInfoLevel() {
        return cfapi_h$constants$24.GetFileExMaxInfoLevel();
    }
    public static @C("int") int FileBasicInfo() {
        return cfapi_h$constants$24.FileBasicInfo();
    }
    public static @C("int") int FileStandardInfo() {
        return cfapi_h$constants$24.FileStandardInfo();
    }
    public static @C("int") int FileNameInfo() {
        return cfapi_h$constants$24.FileNameInfo();
    }
    public static @C("int") int FileRenameInfo() {
        return cfapi_h$constants$24.FileRenameInfo();
    }
    public static @C("int") int FileDispositionInfo() {
        return cfapi_h$constants$24.FileDispositionInfo();
    }
    public static @C("int") int FileAllocationInfo() {
        return cfapi_h$constants$24.FileAllocationInfo();
    }
    public static @C("int") int FileEndOfFileInfo() {
        return cfapi_h$constants$24.FileEndOfFileInfo();
    }
    public static @C("int") int FileStreamInfo() {
        return cfapi_h$constants$24.FileStreamInfo();
    }
    public static @C("int") int FileCompressionInfo() {
        return cfapi_h$constants$24.FileCompressionInfo();
    }
    public static @C("int") int FileAttributeTagInfo() {
        return cfapi_h$constants$24.FileAttributeTagInfo();
    }
    public static @C("int") int FileIdBothDirectoryInfo() {
        return cfapi_h$constants$24.FileIdBothDirectoryInfo();
    }
    public static @C("int") int FileIdBothDirectoryRestartInfo() {
        return cfapi_h$constants$24.FileIdBothDirectoryRestartInfo();
    }
    public static @C("int") int FileIoPriorityHintInfo() {
        return cfapi_h$constants$24.FileIoPriorityHintInfo();
    }
    public static @C("int") int FileRemoteProtocolInfo() {
        return cfapi_h$constants$24.FileRemoteProtocolInfo();
    }
    public static @C("int") int FileFullDirectoryInfo() {
        return cfapi_h$constants$24.FileFullDirectoryInfo();
    }
    public static @C("int") int FileFullDirectoryRestartInfo() {
        return cfapi_h$constants$24.FileFullDirectoryRestartInfo();
    }
    public static @C("int") int FileStorageInfo() {
        return cfapi_h$constants$24.FileStorageInfo();
    }
    public static @C("int") int FileAlignmentInfo() {
        return cfapi_h$constants$24.FileAlignmentInfo();
    }
    public static @C("int") int FileIdInfo() {
        return cfapi_h$constants$24.FileIdInfo();
    }
    public static @C("int") int FileIdExtdDirectoryInfo() {
        return cfapi_h$constants$24.FileIdExtdDirectoryInfo();
    }
    public static @C("int") int FileIdExtdDirectoryRestartInfo() {
        return cfapi_h$constants$24.FileIdExtdDirectoryRestartInfo();
    }
    public static @C("int") int FileDispositionInfoEx() {
        return cfapi_h$constants$24.FileDispositionInfoEx();
    }
    public static @C("int") int FileRenameInfoEx() {
        return cfapi_h$constants$24.FileRenameInfoEx();
    }
    public static @C("int") int FileCaseSensitiveInfo() {
        return cfapi_h$constants$24.FileCaseSensitiveInfo();
    }
    public static @C("int") int FileNormalizedNameInfo() {
        return cfapi_h$constants$24.FileNormalizedNameInfo();
    }
    public static @C("int") int MaximumFileInfoByHandleClass() {
        return cfapi_h$constants$24.MaximumFileInfoByHandleClass();
    }
    public static  MethodHandle IsApiSetImplemented$MH() {
        return cfapi_h$constants$24.IsApiSetImplemented$MH();
    }
    public static @C("BOOL") int IsApiSetImplemented (@C("PCSTR") Addressable Contract) {
        try {
            return (int)cfapi_h$constants$24.IsApiSetImplemented$MH().invokeExact(Contract.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEnvironmentStringsW$MH() {
        return cfapi_h$constants$24.SetEnvironmentStringsW$MH();
    }
    public static @C("BOOL") int SetEnvironmentStringsW (@C("LPWCH") Addressable NewEnvironment) {
        try {
            return (int)cfapi_h$constants$24.SetEnvironmentStringsW$MH().invokeExact(NewEnvironment.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetStdHandle$MH() {
        return cfapi_h$constants$24.GetStdHandle$MH();
    }
    public static @C("HANDLE") MemoryAddress GetStdHandle (@C("DWORD") int nStdHandle) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.GetStdHandle$MH().invokeExact(nStdHandle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetStdHandle$MH() {
        return cfapi_h$constants$24.SetStdHandle$MH();
    }
    public static @C("BOOL") int SetStdHandle (@C("DWORD") int nStdHandle, @C("HANDLE") Addressable hHandle) {
        try {
            return (int)cfapi_h$constants$24.SetStdHandle$MH().invokeExact(nStdHandle, hHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetStdHandleEx$MH() {
        return cfapi_h$constants$24.SetStdHandleEx$MH();
    }
    public static @C("BOOL") int SetStdHandleEx (@C("DWORD") int nStdHandle, @C("HANDLE") Addressable hHandle, @C("PHANDLE") Addressable phPrevValue) {
        try {
            return (int)cfapi_h$constants$24.SetStdHandleEx$MH().invokeExact(nStdHandle, hHandle.address(), phPrevValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommandLineA$MH() {
        return cfapi_h$constants$24.GetCommandLineA$MH();
    }
    public static @C("LPSTR") MemoryAddress GetCommandLineA () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.GetCommandLineA$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommandLineW$MH() {
        return cfapi_h$constants$24.GetCommandLineW$MH();
    }
    public static @C("LPWSTR") MemoryAddress GetCommandLineW () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.GetCommandLineW$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnvironmentStrings$MH() {
        return cfapi_h$constants$24.GetEnvironmentStrings$MH();
    }
    public static @C("LPCH") MemoryAddress GetEnvironmentStrings () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.GetEnvironmentStrings$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnvironmentStringsW$MH() {
        return cfapi_h$constants$24.GetEnvironmentStringsW$MH();
    }
    public static @C("LPWCH") MemoryAddress GetEnvironmentStringsW () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.GetEnvironmentStringsW$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeEnvironmentStringsA$MH() {
        return cfapi_h$constants$24.FreeEnvironmentStringsA$MH();
    }
    public static @C("BOOL") int FreeEnvironmentStringsA (@C("LPCH") Addressable penv) {
        try {
            return (int)cfapi_h$constants$24.FreeEnvironmentStringsA$MH().invokeExact(penv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeEnvironmentStringsW$MH() {
        return cfapi_h$constants$24.FreeEnvironmentStringsW$MH();
    }
    public static @C("BOOL") int FreeEnvironmentStringsW (@C("LPWCH") Addressable penv) {
        try {
            return (int)cfapi_h$constants$24.FreeEnvironmentStringsW$MH().invokeExact(penv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnvironmentVariableA$MH() {
        return cfapi_h$constants$24.GetEnvironmentVariableA$MH();
    }
    public static @C("DWORD") int GetEnvironmentVariableA (@C("LPCSTR") Addressable lpName, @C("LPSTR") Addressable lpBuffer, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$24.GetEnvironmentVariableA$MH().invokeExact(lpName.address(), lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnvironmentVariableW$MH() {
        return cfapi_h$constants$24.GetEnvironmentVariableW$MH();
    }
    public static @C("DWORD") int GetEnvironmentVariableW (@C("LPCWSTR") Addressable lpName, @C("LPWSTR") Addressable lpBuffer, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$24.GetEnvironmentVariableW$MH().invokeExact(lpName.address(), lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEnvironmentVariableA$MH() {
        return cfapi_h$constants$24.SetEnvironmentVariableA$MH();
    }
    public static @C("BOOL") int SetEnvironmentVariableA (@C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpValue) {
        try {
            return (int)cfapi_h$constants$24.SetEnvironmentVariableA$MH().invokeExact(lpName.address(), lpValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEnvironmentVariableW$MH() {
        return cfapi_h$constants$24.SetEnvironmentVariableW$MH();
    }
    public static @C("BOOL") int SetEnvironmentVariableW (@C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpValue) {
        try {
            return (int)cfapi_h$constants$24.SetEnvironmentVariableW$MH().invokeExact(lpName.address(), lpValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExpandEnvironmentStringsA$MH() {
        return cfapi_h$constants$24.ExpandEnvironmentStringsA$MH();
    }
    public static @C("DWORD") int ExpandEnvironmentStringsA (@C("LPCSTR") Addressable lpSrc, @C("LPSTR") Addressable lpDst, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$24.ExpandEnvironmentStringsA$MH().invokeExact(lpSrc.address(), lpDst.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExpandEnvironmentStringsW$MH() {
        return cfapi_h$constants$24.ExpandEnvironmentStringsW$MH();
    }
    public static @C("DWORD") int ExpandEnvironmentStringsW (@C("LPCWSTR") Addressable lpSrc, @C("LPWSTR") Addressable lpDst, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$24.ExpandEnvironmentStringsW$MH().invokeExact(lpSrc.address(), lpDst.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCurrentDirectoryA$MH() {
        return cfapi_h$constants$24.SetCurrentDirectoryA$MH();
    }
    public static @C("BOOL") int SetCurrentDirectoryA (@C("LPCSTR") Addressable lpPathName) {
        try {
            return (int)cfapi_h$constants$24.SetCurrentDirectoryA$MH().invokeExact(lpPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCurrentDirectoryW$MH() {
        return cfapi_h$constants$24.SetCurrentDirectoryW$MH();
    }
    public static @C("BOOL") int SetCurrentDirectoryW (@C("LPCWSTR") Addressable lpPathName) {
        try {
            return (int)cfapi_h$constants$24.SetCurrentDirectoryW$MH().invokeExact(lpPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentDirectoryA$MH() {
        return cfapi_h$constants$24.GetCurrentDirectoryA$MH();
    }
    public static @C("DWORD") int GetCurrentDirectoryA (@C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$24.GetCurrentDirectoryA$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentDirectoryW$MH() {
        return cfapi_h$constants$24.GetCurrentDirectoryW$MH();
    }
    public static @C("DWORD") int GetCurrentDirectoryW (@C("DWORD") int nBufferLength, @C("LPWSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$24.GetCurrentDirectoryW$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SearchPathW$MH() {
        return cfapi_h$constants$24.SearchPathW$MH();
    }
    public static @C("DWORD") int SearchPathW (@C("LPCWSTR") Addressable lpPath, @C("LPCWSTR") Addressable lpFileName, @C("LPCWSTR") Addressable lpExtension, @C("DWORD") int nBufferLength, @C("LPWSTR") Addressable lpBuffer, @C("LPWSTR*") Addressable lpFilePart) {
        try {
            return (int)cfapi_h$constants$24.SearchPathW$MH().invokeExact(lpPath.address(), lpFileName.address(), lpExtension.address(), nBufferLength, lpBuffer.address(), lpFilePart.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SearchPathA$MH() {
        return cfapi_h$constants$24.SearchPathA$MH();
    }
    public static @C("DWORD") int SearchPathA (@C("LPCSTR") Addressable lpPath, @C("LPCSTR") Addressable lpFileName, @C("LPCSTR") Addressable lpExtension, @C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer, @C("LPSTR*") Addressable lpFilePart) {
        try {
            return (int)cfapi_h$constants$24.SearchPathA$MH().invokeExact(lpPath.address(), lpFileName.address(), lpExtension.address(), nBufferLength, lpBuffer.address(), lpFilePart.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NeedCurrentDirectoryForExePathA$MH() {
        return cfapi_h$constants$24.NeedCurrentDirectoryForExePathA$MH();
    }
    public static @C("BOOL") int NeedCurrentDirectoryForExePathA (@C("LPCSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$24.NeedCurrentDirectoryForExePathA$MH().invokeExact(ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NeedCurrentDirectoryForExePathW$MH() {
        return cfapi_h$constants$24.NeedCurrentDirectoryForExePathW$MH();
    }
    public static @C("BOOL") int NeedCurrentDirectoryForExePathW (@C("LPCWSTR") Addressable ExeName) {
        try {
            return (int)cfapi_h$constants$24.NeedCurrentDirectoryForExePathW$MH().invokeExact(ExeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CompareFileTime$MH() {
        return cfapi_h$constants$24.CompareFileTime$MH();
    }
    public static @C("LONG") int CompareFileTime (@C("const FILETIME*") Addressable lpFileTime1, @C("const FILETIME*") Addressable lpFileTime2) {
        try {
            return (int)cfapi_h$constants$24.CompareFileTime$MH().invokeExact(lpFileTime1.address(), lpFileTime2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryA$MH() {
        return cfapi_h$constants$24.CreateDirectoryA$MH();
    }
    public static @C("BOOL") int CreateDirectoryA (@C("LPCSTR") Addressable lpPathName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$24.CreateDirectoryA$MH().invokeExact(lpPathName.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryW$MH() {
        return cfapi_h$constants$24.CreateDirectoryW$MH();
    }
    public static @C("BOOL") int CreateDirectoryW (@C("LPCWSTR") Addressable lpPathName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$24.CreateDirectoryW$MH().invokeExact(lpPathName.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileA$MH() {
        return cfapi_h$constants$24.CreateFileA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int dwCreationDisposition, @C("DWORD") int dwFlagsAndAttributes, @C("HANDLE") Addressable hTemplateFile) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.CreateFileA$MH().invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileW$MH() {
        return cfapi_h$constants$24.CreateFileW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int dwCreationDisposition, @C("DWORD") int dwFlagsAndAttributes, @C("HANDLE") Addressable hTemplateFile) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.CreateFileW$MH().invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefineDosDeviceW$MH() {
        return cfapi_h$constants$24.DefineDosDeviceW$MH();
    }
    public static @C("BOOL") int DefineDosDeviceW (@C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpDeviceName, @C("LPCWSTR") Addressable lpTargetPath) {
        try {
            return (int)cfapi_h$constants$24.DefineDosDeviceW$MH().invokeExact(dwFlags, lpDeviceName.address(), lpTargetPath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteFileA$MH() {
        return cfapi_h$constants$24.DeleteFileA$MH();
    }
    public static @C("BOOL") int DeleteFileA (@C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$24.DeleteFileA$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteFileW$MH() {
        return cfapi_h$constants$24.DeleteFileW$MH();
    }
    public static @C("BOOL") int DeleteFileW (@C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$24.DeleteFileW$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteVolumeMountPointW$MH() {
        return cfapi_h$constants$24.DeleteVolumeMountPointW$MH();
    }
    public static @C("BOOL") int DeleteVolumeMountPointW (@C("LPCWSTR") Addressable lpszVolumeMountPoint) {
        try {
            return (int)cfapi_h$constants$24.DeleteVolumeMountPointW$MH().invokeExact(lpszVolumeMountPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FileTimeToLocalFileTime$MH() {
        return cfapi_h$constants$24.FileTimeToLocalFileTime$MH();
    }
    public static @C("BOOL") int FileTimeToLocalFileTime (@C("const FILETIME*") Addressable lpFileTime, @C("LPFILETIME") Addressable lpLocalFileTime) {
        try {
            return (int)cfapi_h$constants$24.FileTimeToLocalFileTime$MH().invokeExact(lpFileTime.address(), lpLocalFileTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindClose$MH() {
        return cfapi_h$constants$24.FindClose$MH();
    }
    public static @C("BOOL") int FindClose (@C("HANDLE") Addressable hFindFile) {
        try {
            return (int)cfapi_h$constants$24.FindClose$MH().invokeExact(hFindFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindCloseChangeNotification$MH() {
        return cfapi_h$constants$24.FindCloseChangeNotification$MH();
    }
    public static @C("BOOL") int FindCloseChangeNotification (@C("HANDLE") Addressable hChangeHandle) {
        try {
            return (int)cfapi_h$constants$24.FindCloseChangeNotification$MH().invokeExact(hChangeHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstChangeNotificationA$MH() {
        return cfapi_h$constants$24.FindFirstChangeNotificationA$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstChangeNotificationA (@C("LPCSTR") Addressable lpPathName, @C("BOOL") int bWatchSubtree, @C("DWORD") int dwNotifyFilter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstChangeNotificationA$MH().invokeExact(lpPathName.address(), bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstChangeNotificationW$MH() {
        return cfapi_h$constants$24.FindFirstChangeNotificationW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstChangeNotificationW (@C("LPCWSTR") Addressable lpPathName, @C("BOOL") int bWatchSubtree, @C("DWORD") int dwNotifyFilter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstChangeNotificationW$MH().invokeExact(lpPathName.address(), bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileA$MH() {
        return cfapi_h$constants$24.FindFirstFileA$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileA (@C("LPCSTR") Addressable lpFileName, @C("LPWIN32_FIND_DATAA") Addressable lpFindFileData) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstFileA$MH().invokeExact(lpFileName.address(), lpFindFileData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileW$MH() {
        return cfapi_h$constants$24.FindFirstFileW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileW (@C("LPCWSTR") Addressable lpFileName, @C("LPWIN32_FIND_DATAW") Addressable lpFindFileData) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstFileW$MH().invokeExact(lpFileName.address(), lpFindFileData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileExA$MH() {
        return cfapi_h$constants$24.FindFirstFileExA$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileExA (@C("LPCSTR") Addressable lpFileName, @C("FINDEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFindFileData, @C("FINDEX_SEARCH_OPS") int fSearchOp, @C("LPVOID") Addressable lpSearchFilter, @C("DWORD") int dwAdditionalFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstFileExA$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFindFileData.address(), fSearchOp, lpSearchFilter.address(), dwAdditionalFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileExW$MH() {
        return cfapi_h$constants$24.FindFirstFileExW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileExW (@C("LPCWSTR") Addressable lpFileName, @C("FINDEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFindFileData, @C("FINDEX_SEARCH_OPS") int fSearchOp, @C("LPVOID") Addressable lpSearchFilter, @C("DWORD") int dwAdditionalFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstFileExW$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFindFileData.address(), fSearchOp, lpSearchFilter.address(), dwAdditionalFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstVolumeW$MH() {
        return cfapi_h$constants$24.FindFirstVolumeW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstVolumeW (@C("LPWSTR") Addressable lpszVolumeName, @C("DWORD") int cchBufferLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstVolumeW$MH().invokeExact(lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextChangeNotification$MH() {
        return cfapi_h$constants$24.FindNextChangeNotification$MH();
    }
    public static @C("BOOL") int FindNextChangeNotification (@C("HANDLE") Addressable hChangeHandle) {
        try {
            return (int)cfapi_h$constants$24.FindNextChangeNotification$MH().invokeExact(hChangeHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextFileA$MH() {
        return cfapi_h$constants$24.FindNextFileA$MH();
    }
    public static @C("BOOL") int FindNextFileA (@C("HANDLE") Addressable hFindFile, @C("LPWIN32_FIND_DATAA") Addressable lpFindFileData) {
        try {
            return (int)cfapi_h$constants$24.FindNextFileA$MH().invokeExact(hFindFile.address(), lpFindFileData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextFileW$MH() {
        return cfapi_h$constants$24.FindNextFileW$MH();
    }
    public static @C("BOOL") int FindNextFileW (@C("HANDLE") Addressable hFindFile, @C("LPWIN32_FIND_DATAW") Addressable lpFindFileData) {
        try {
            return (int)cfapi_h$constants$24.FindNextFileW$MH().invokeExact(hFindFile.address(), lpFindFileData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextVolumeW$MH() {
        return cfapi_h$constants$24.FindNextVolumeW$MH();
    }
    public static @C("BOOL") int FindNextVolumeW (@C("HANDLE") Addressable hFindVolume, @C("LPWSTR") Addressable lpszVolumeName, @C("DWORD") int cchBufferLength) {
        try {
            return (int)cfapi_h$constants$24.FindNextVolumeW$MH().invokeExact(hFindVolume.address(), lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindVolumeClose$MH() {
        return cfapi_h$constants$24.FindVolumeClose$MH();
    }
    public static @C("BOOL") int FindVolumeClose (@C("HANDLE") Addressable hFindVolume) {
        try {
            return (int)cfapi_h$constants$24.FindVolumeClose$MH().invokeExact(hFindVolume.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlushFileBuffers$MH() {
        return cfapi_h$constants$24.FlushFileBuffers$MH();
    }
    public static @C("BOOL") int FlushFileBuffers (@C("HANDLE") Addressable hFile) {
        try {
            return (int)cfapi_h$constants$24.FlushFileBuffers$MH().invokeExact(hFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDiskFreeSpaceA$MH() {
        return cfapi_h$constants$24.GetDiskFreeSpaceA$MH();
    }
    public static @C("BOOL") int GetDiskFreeSpaceA (@C("LPCSTR") Addressable lpRootPathName, @C("LPDWORD") Addressable lpSectorsPerCluster, @C("LPDWORD") Addressable lpBytesPerSector, @C("LPDWORD") Addressable lpNumberOfFreeClusters, @C("LPDWORD") Addressable lpTotalNumberOfClusters) {
        try {
            return (int)cfapi_h$constants$24.GetDiskFreeSpaceA$MH().invokeExact(lpRootPathName.address(), lpSectorsPerCluster.address(), lpBytesPerSector.address(), lpNumberOfFreeClusters.address(), lpTotalNumberOfClusters.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDiskFreeSpaceW$MH() {
        return cfapi_h$constants$24.GetDiskFreeSpaceW$MH();
    }
    public static @C("BOOL") int GetDiskFreeSpaceW (@C("LPCWSTR") Addressable lpRootPathName, @C("LPDWORD") Addressable lpSectorsPerCluster, @C("LPDWORD") Addressable lpBytesPerSector, @C("LPDWORD") Addressable lpNumberOfFreeClusters, @C("LPDWORD") Addressable lpTotalNumberOfClusters) {
        try {
            return (int)cfapi_h$constants$24.GetDiskFreeSpaceW$MH().invokeExact(lpRootPathName.address(), lpSectorsPerCluster.address(), lpBytesPerSector.address(), lpNumberOfFreeClusters.address(), lpTotalNumberOfClusters.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDiskFreeSpaceExA$MH() {
        return cfapi_h$constants$24.GetDiskFreeSpaceExA$MH();
    }
    public static @C("BOOL") int GetDiskFreeSpaceExA (@C("LPCSTR") Addressable lpDirectoryName, @C("PULARGE_INTEGER") Addressable lpFreeBytesAvailableToCaller, @C("PULARGE_INTEGER") Addressable lpTotalNumberOfBytes, @C("PULARGE_INTEGER") Addressable lpTotalNumberOfFreeBytes) {
        try {
            return (int)cfapi_h$constants$24.GetDiskFreeSpaceExA$MH().invokeExact(lpDirectoryName.address(), lpFreeBytesAvailableToCaller.address(), lpTotalNumberOfBytes.address(), lpTotalNumberOfFreeBytes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDiskFreeSpaceExW$MH() {
        return cfapi_h$constants$24.GetDiskFreeSpaceExW$MH();
    }
    public static @C("BOOL") int GetDiskFreeSpaceExW (@C("LPCWSTR") Addressable lpDirectoryName, @C("PULARGE_INTEGER") Addressable lpFreeBytesAvailableToCaller, @C("PULARGE_INTEGER") Addressable lpTotalNumberOfBytes, @C("PULARGE_INTEGER") Addressable lpTotalNumberOfFreeBytes) {
        try {
            return (int)cfapi_h$constants$24.GetDiskFreeSpaceExW$MH().invokeExact(lpDirectoryName.address(), lpFreeBytesAvailableToCaller.address(), lpTotalNumberOfBytes.address(), lpTotalNumberOfFreeBytes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDiskSpaceInformationA$MH() {
        return cfapi_h$constants$24.GetDiskSpaceInformationA$MH();
    }
    public static @C("HRESULT") int GetDiskSpaceInformationA (@C("LPCSTR") Addressable rootPath, @C("DISK_SPACE_INFORMATION*") Addressable diskSpaceInfo) {
        try {
            return (int)cfapi_h$constants$24.GetDiskSpaceInformationA$MH().invokeExact(rootPath.address(), diskSpaceInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDiskSpaceInformationW$MH() {
        return cfapi_h$constants$24.GetDiskSpaceInformationW$MH();
    }
    public static @C("HRESULT") int GetDiskSpaceInformationW (@C("LPCWSTR") Addressable rootPath, @C("DISK_SPACE_INFORMATION*") Addressable diskSpaceInfo) {
        try {
            return (int)cfapi_h$constants$24.GetDiskSpaceInformationW$MH().invokeExact(rootPath.address(), diskSpaceInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDriveTypeA$MH() {
        return cfapi_h$constants$24.GetDriveTypeA$MH();
    }
    public static @C("UINT") int GetDriveTypeA (@C("LPCSTR") Addressable lpRootPathName) {
        try {
            return (int)cfapi_h$constants$24.GetDriveTypeA$MH().invokeExact(lpRootPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDriveTypeW$MH() {
        return cfapi_h$constants$24.GetDriveTypeW$MH();
    }
    public static @C("UINT") int GetDriveTypeW (@C("LPCWSTR") Addressable lpRootPathName) {
        try {
            return (int)cfapi_h$constants$24.GetDriveTypeW$MH().invokeExact(lpRootPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileAttributesA$MH() {
        return cfapi_h$constants$24.GetFileAttributesA$MH();
    }
    public static @C("DWORD") int GetFileAttributesA (@C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$24.GetFileAttributesA$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileAttributesW$MH() {
        return cfapi_h$constants$24.GetFileAttributesW$MH();
    }
    public static @C("DWORD") int GetFileAttributesW (@C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$24.GetFileAttributesW$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileAttributesExA$MH() {
        return cfapi_h$constants$24.GetFileAttributesExA$MH();
    }
    public static @C("BOOL") int GetFileAttributesExA (@C("LPCSTR") Addressable lpFileName, @C("GET_FILEEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFileInformation) {
        try {
            return (int)cfapi_h$constants$24.GetFileAttributesExA$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFileInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileAttributesExW$MH() {
        return cfapi_h$constants$24.GetFileAttributesExW$MH();
    }
    public static @C("BOOL") int GetFileAttributesExW (@C("LPCWSTR") Addressable lpFileName, @C("GET_FILEEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFileInformation) {
        try {
            return (int)cfapi_h$constants$24.GetFileAttributesExW$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFileInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileInformationByHandle$MH() {
        return cfapi_h$constants$24.GetFileInformationByHandle$MH();
    }
    public static @C("BOOL") int GetFileInformationByHandle (@C("HANDLE") Addressable hFile, @C("LPBY_HANDLE_FILE_INFORMATION") Addressable lpFileInformation) {
        try {
            return (int)cfapi_h$constants$24.GetFileInformationByHandle$MH().invokeExact(hFile.address(), lpFileInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileSize$MH() {
        return cfapi_h$constants$24.GetFileSize$MH();
    }
    public static @C("DWORD") int GetFileSize (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpFileSizeHigh) {
        try {
            return (int)cfapi_h$constants$24.GetFileSize$MH().invokeExact(hFile.address(), lpFileSizeHigh.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileSizeEx$MH() {
        return cfapi_h$constants$24.GetFileSizeEx$MH();
    }
    public static @C("BOOL") int GetFileSizeEx (@C("HANDLE") Addressable hFile, @C("PLARGE_INTEGER") Addressable lpFileSize) {
        try {
            return (int)cfapi_h$constants$24.GetFileSizeEx$MH().invokeExact(hFile.address(), lpFileSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileType$MH() {
        return cfapi_h$constants$24.GetFileType$MH();
    }
    public static @C("DWORD") int GetFileType (@C("HANDLE") Addressable hFile) {
        try {
            return (int)cfapi_h$constants$24.GetFileType$MH().invokeExact(hFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFinalPathNameByHandleA$MH() {
        return cfapi_h$constants$24.GetFinalPathNameByHandleA$MH();
    }
    public static @C("DWORD") int GetFinalPathNameByHandleA (@C("HANDLE") Addressable hFile, @C("LPSTR") Addressable lpszFilePath, @C("DWORD") int cchFilePath, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$24.GetFinalPathNameByHandleA$MH().invokeExact(hFile.address(), lpszFilePath.address(), cchFilePath, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFinalPathNameByHandleW$MH() {
        return cfapi_h$constants$24.GetFinalPathNameByHandleW$MH();
    }
    public static @C("DWORD") int GetFinalPathNameByHandleW (@C("HANDLE") Addressable hFile, @C("LPWSTR") Addressable lpszFilePath, @C("DWORD") int cchFilePath, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$24.GetFinalPathNameByHandleW$MH().invokeExact(hFile.address(), lpszFilePath.address(), cchFilePath, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileTime$MH() {
        return cfapi_h$constants$24.GetFileTime$MH();
    }
    public static @C("BOOL") int GetFileTime (@C("HANDLE") Addressable hFile, @C("LPFILETIME") Addressable lpCreationTime, @C("LPFILETIME") Addressable lpLastAccessTime, @C("LPFILETIME") Addressable lpLastWriteTime) {
        try {
            return (int)cfapi_h$constants$24.GetFileTime$MH().invokeExact(hFile.address(), lpCreationTime.address(), lpLastAccessTime.address(), lpLastWriteTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFullPathNameW$MH() {
        return cfapi_h$constants$24.GetFullPathNameW$MH();
    }
    public static @C("DWORD") int GetFullPathNameW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int nBufferLength, @C("LPWSTR") Addressable lpBuffer, @C("LPWSTR*") Addressable lpFilePart) {
        try {
            return (int)cfapi_h$constants$24.GetFullPathNameW$MH().invokeExact(lpFileName.address(), nBufferLength, lpBuffer.address(), lpFilePart.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFullPathNameA$MH() {
        return cfapi_h$constants$24.GetFullPathNameA$MH();
    }
    public static @C("DWORD") int GetFullPathNameA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer, @C("LPSTR*") Addressable lpFilePart) {
        try {
            return (int)cfapi_h$constants$24.GetFullPathNameA$MH().invokeExact(lpFileName.address(), nBufferLength, lpBuffer.address(), lpFilePart.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLogicalDrives$MH() {
        return cfapi_h$constants$24.GetLogicalDrives$MH();
    }
    public static @C("DWORD") int GetLogicalDrives () {
        try {
            return (int)cfapi_h$constants$24.GetLogicalDrives$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLogicalDriveStringsW$MH() {
        return cfapi_h$constants$24.GetLogicalDriveStringsW$MH();
    }
    public static @C("DWORD") int GetLogicalDriveStringsW (@C("DWORD") int nBufferLength, @C("LPWSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$24.GetLogicalDriveStringsW$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLongPathNameA$MH() {
        return cfapi_h$constants$24.GetLongPathNameA$MH();
    }
    public static @C("DWORD") int GetLongPathNameA (@C("LPCSTR") Addressable lpszShortPath, @C("LPSTR") Addressable lpszLongPath, @C("DWORD") int cchBuffer) {
        try {
            return (int)cfapi_h$constants$24.GetLongPathNameA$MH().invokeExact(lpszShortPath.address(), lpszLongPath.address(), cchBuffer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLongPathNameW$MH() {
        return cfapi_h$constants$24.GetLongPathNameW$MH();
    }
    public static @C("DWORD") int GetLongPathNameW (@C("LPCWSTR") Addressable lpszShortPath, @C("LPWSTR") Addressable lpszLongPath, @C("DWORD") int cchBuffer) {
        try {
            return (int)cfapi_h$constants$24.GetLongPathNameW$MH().invokeExact(lpszShortPath.address(), lpszLongPath.address(), cchBuffer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetShortPathNameW$MH() {
        return cfapi_h$constants$24.GetShortPathNameW$MH();
    }
    public static @C("DWORD") int GetShortPathNameW (@C("LPCWSTR") Addressable lpszLongPath, @C("LPWSTR") Addressable lpszShortPath, @C("DWORD") int cchBuffer) {
        try {
            return (int)cfapi_h$constants$24.GetShortPathNameW$MH().invokeExact(lpszLongPath.address(), lpszShortPath.address(), cchBuffer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTempFileNameW$MH() {
        return cfapi_h$constants$24.GetTempFileNameW$MH();
    }
    public static @C("UINT") int GetTempFileNameW (@C("LPCWSTR") Addressable lpPathName, @C("LPCWSTR") Addressable lpPrefixString, @C("UINT") int uUnique, @C("LPWSTR") Addressable lpTempFileName) {
        try {
            return (int)cfapi_h$constants$24.GetTempFileNameW$MH().invokeExact(lpPathName.address(), lpPrefixString.address(), uUnique, lpTempFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumeInformationByHandleW$MH() {
        return cfapi_h$constants$24.GetVolumeInformationByHandleW$MH();
    }
    public static @C("BOOL") int GetVolumeInformationByHandleW (@C("HANDLE") Addressable hFile, @C("LPWSTR") Addressable lpVolumeNameBuffer, @C("DWORD") int nVolumeNameSize, @C("LPDWORD") Addressable lpVolumeSerialNumber, @C("LPDWORD") Addressable lpMaximumComponentLength, @C("LPDWORD") Addressable lpFileSystemFlags, @C("LPWSTR") Addressable lpFileSystemNameBuffer, @C("DWORD") int nFileSystemNameSize) {
        try {
            return (int)cfapi_h$constants$24.GetVolumeInformationByHandleW$MH().invokeExact(hFile.address(), lpVolumeNameBuffer.address(), nVolumeNameSize, lpVolumeSerialNumber.address(), lpMaximumComponentLength.address(), lpFileSystemFlags.address(), lpFileSystemNameBuffer.address(), nFileSystemNameSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumeInformationW$MH() {
        return cfapi_h$constants$24.GetVolumeInformationW$MH();
    }
    public static @C("BOOL") int GetVolumeInformationW (@C("LPCWSTR") Addressable lpRootPathName, @C("LPWSTR") Addressable lpVolumeNameBuffer, @C("DWORD") int nVolumeNameSize, @C("LPDWORD") Addressable lpVolumeSerialNumber, @C("LPDWORD") Addressable lpMaximumComponentLength, @C("LPDWORD") Addressable lpFileSystemFlags, @C("LPWSTR") Addressable lpFileSystemNameBuffer, @C("DWORD") int nFileSystemNameSize) {
        try {
            return (int)cfapi_h$constants$24.GetVolumeInformationW$MH().invokeExact(lpRootPathName.address(), lpVolumeNameBuffer.address(), nVolumeNameSize, lpVolumeSerialNumber.address(), lpMaximumComponentLength.address(), lpFileSystemFlags.address(), lpFileSystemNameBuffer.address(), nFileSystemNameSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumePathNameW$MH() {
        return cfapi_h$constants$24.GetVolumePathNameW$MH();
    }
    public static @C("BOOL") int GetVolumePathNameW (@C("LPCWSTR") Addressable lpszFileName, @C("LPWSTR") Addressable lpszVolumePathName, @C("DWORD") int cchBufferLength) {
        try {
            return (int)cfapi_h$constants$24.GetVolumePathNameW$MH().invokeExact(lpszFileName.address(), lpszVolumePathName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalFileTimeToFileTime$MH() {
        return cfapi_h$constants$24.LocalFileTimeToFileTime$MH();
    }
    public static @C("BOOL") int LocalFileTimeToFileTime (@C("const FILETIME*") Addressable lpLocalFileTime, @C("LPFILETIME") Addressable lpFileTime) {
        try {
            return (int)cfapi_h$constants$24.LocalFileTimeToFileTime$MH().invokeExact(lpLocalFileTime.address(), lpFileTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LockFile$MH() {
        return cfapi_h$constants$24.LockFile$MH();
    }
    public static @C("BOOL") int LockFile (@C("HANDLE") Addressable hFile, @C("DWORD") int dwFileOffsetLow, @C("DWORD") int dwFileOffsetHigh, @C("DWORD") int nNumberOfBytesToLockLow, @C("DWORD") int nNumberOfBytesToLockHigh) {
        try {
            return (int)cfapi_h$constants$24.LockFile$MH().invokeExact(hFile.address(), dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LockFileEx$MH() {
        return cfapi_h$constants$24.LockFileEx$MH();
    }
    public static @C("BOOL") int LockFileEx (@C("HANDLE") Addressable hFile, @C("DWORD") int dwFlags, @C("DWORD") int dwReserved, @C("DWORD") int nNumberOfBytesToLockLow, @C("DWORD") int nNumberOfBytesToLockHigh, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$24.LockFileEx$MH().invokeExact(hFile.address(), dwFlags, dwReserved, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh, lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryDosDeviceW$MH() {
        return cfapi_h$constants$24.QueryDosDeviceW$MH();
    }
    public static @C("DWORD") int QueryDosDeviceW (@C("LPCWSTR") Addressable lpDeviceName, @C("LPWSTR") Addressable lpTargetPath, @C("DWORD") int ucchMax) {
        try {
            return (int)cfapi_h$constants$24.QueryDosDeviceW$MH().invokeExact(lpDeviceName.address(), lpTargetPath.address(), ucchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadFile$MH() {
        return cfapi_h$constants$24.ReadFile$MH();
    }
    public static @C("BOOL") int ReadFile (@C("HANDLE") Addressable hFile, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToRead, @C("LPDWORD") Addressable lpNumberOfBytesRead, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$24.ReadFile$MH().invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToRead, lpNumberOfBytesRead.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadFileEx$MH() {
        return cfapi_h$constants$24.ReadFileEx$MH();
    }
    public static @C("BOOL") int ReadFileEx (@C("HANDLE") Addressable hFile, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToRead, @C("LPOVERLAPPED") Addressable lpOverlapped, @C("LPOVERLAPPED_COMPLETION_ROUTINE") Addressable lpCompletionRoutine) {
        try {
            return (int)cfapi_h$constants$24.ReadFileEx$MH().invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToRead, lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadFileScatter$MH() {
        return cfapi_h$constants$24.ReadFileScatter$MH();
    }
    public static @C("BOOL") int ReadFileScatter (@C("HANDLE") Addressable hFile, @C("FILE_SEGMENT_ELEMENT[]") Addressable aSegmentArray, @C("DWORD") int nNumberOfBytesToRead, @C("LPDWORD") Addressable lpReserved, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$24.ReadFileScatter$MH().invokeExact(hFile.address(), aSegmentArray.address(), nNumberOfBytesToRead, lpReserved.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveDirectoryA$MH() {
        return cfapi_h$constants$24.RemoveDirectoryA$MH();
    }
    public static @C("BOOL") int RemoveDirectoryA (@C("LPCSTR") Addressable lpPathName) {
        try {
            return (int)cfapi_h$constants$24.RemoveDirectoryA$MH().invokeExact(lpPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveDirectoryW$MH() {
        return cfapi_h$constants$24.RemoveDirectoryW$MH();
    }
    public static @C("BOOL") int RemoveDirectoryW (@C("LPCWSTR") Addressable lpPathName) {
        try {
            return (int)cfapi_h$constants$24.RemoveDirectoryW$MH().invokeExact(lpPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEndOfFile$MH() {
        return cfapi_h$constants$24.SetEndOfFile$MH();
    }
    public static @C("BOOL") int SetEndOfFile (@C("HANDLE") Addressable hFile) {
        try {
            return (int)cfapi_h$constants$24.SetEndOfFile$MH().invokeExact(hFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileAttributesA$MH() {
        return cfapi_h$constants$24.SetFileAttributesA$MH();
    }
    public static @C("BOOL") int SetFileAttributesA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int dwFileAttributes) {
        try {
            return (int)cfapi_h$constants$24.SetFileAttributesA$MH().invokeExact(lpFileName.address(), dwFileAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileAttributesW$MH() {
        return cfapi_h$constants$24.SetFileAttributesW$MH();
    }
    public static @C("BOOL") int SetFileAttributesW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwFileAttributes) {
        try {
            return (int)cfapi_h$constants$24.SetFileAttributesW$MH().invokeExact(lpFileName.address(), dwFileAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileInformationByHandle$MH() {
        return cfapi_h$constants$24.SetFileInformationByHandle$MH();
    }
    public static @C("BOOL") int SetFileInformationByHandle (@C("HANDLE") Addressable hFile, @C("FILE_INFO_BY_HANDLE_CLASS") int FileInformationClass, @C("LPVOID") Addressable lpFileInformation, @C("DWORD") int dwBufferSize) {
        try {
            return (int)cfapi_h$constants$24.SetFileInformationByHandle$MH().invokeExact(hFile.address(), FileInformationClass, lpFileInformation.address(), dwBufferSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFilePointer$MH() {
        return cfapi_h$constants$24.SetFilePointer$MH();
    }
    public static @C("DWORD") int SetFilePointer (@C("HANDLE") Addressable hFile, @C("LONG") int lDistanceToMove, @C("PLONG") Addressable lpDistanceToMoveHigh, @C("DWORD") int dwMoveMethod) {
        try {
            return (int)cfapi_h$constants$24.SetFilePointer$MH().invokeExact(hFile.address(), lDistanceToMove, lpDistanceToMoveHigh.address(), dwMoveMethod);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFilePointerEx$MH() {
        return cfapi_h$constants$24.SetFilePointerEx$MH();
    }
    public static @C("BOOL") int SetFilePointerEx (@C("HANDLE") Addressable hFile, @C("LARGE_INTEGER") MemorySegment liDistanceToMove, @C("PLARGE_INTEGER") Addressable lpNewFilePointer, @C("DWORD") int dwMoveMethod) {
        try {
            return (int)cfapi_h$constants$24.SetFilePointerEx$MH().invokeExact(hFile.address(), liDistanceToMove, lpNewFilePointer.address(), dwMoveMethod);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileTime$MH() {
        return cfapi_h$constants$24.SetFileTime$MH();
    }
    public static @C("BOOL") int SetFileTime (@C("HANDLE") Addressable hFile, @C("const FILETIME*") Addressable lpCreationTime, @C("const FILETIME*") Addressable lpLastAccessTime, @C("const FILETIME*") Addressable lpLastWriteTime) {
        try {
            return (int)cfapi_h$constants$24.SetFileTime$MH().invokeExact(hFile.address(), lpCreationTime.address(), lpLastAccessTime.address(), lpLastWriteTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileValidData$MH() {
        return cfapi_h$constants$24.SetFileValidData$MH();
    }
    public static @C("BOOL") int SetFileValidData (@C("HANDLE") Addressable hFile, @C("LONGLONG") long ValidDataLength) {
        try {
            return (int)cfapi_h$constants$24.SetFileValidData$MH().invokeExact(hFile.address(), ValidDataLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnlockFile$MH() {
        return cfapi_h$constants$24.UnlockFile$MH();
    }
    public static @C("BOOL") int UnlockFile (@C("HANDLE") Addressable hFile, @C("DWORD") int dwFileOffsetLow, @C("DWORD") int dwFileOffsetHigh, @C("DWORD") int nNumberOfBytesToUnlockLow, @C("DWORD") int nNumberOfBytesToUnlockHigh) {
        try {
            return (int)cfapi_h$constants$24.UnlockFile$MH().invokeExact(hFile.address(), dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnlockFileEx$MH() {
        return cfapi_h$constants$24.UnlockFileEx$MH();
    }
    public static @C("BOOL") int UnlockFileEx (@C("HANDLE") Addressable hFile, @C("DWORD") int dwReserved, @C("DWORD") int nNumberOfBytesToUnlockLow, @C("DWORD") int nNumberOfBytesToUnlockHigh, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$24.UnlockFileEx$MH().invokeExact(hFile.address(), dwReserved, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh, lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteFile$MH() {
        return cfapi_h$constants$24.WriteFile$MH();
    }
    public static @C("BOOL") int WriteFile (@C("HANDLE") Addressable hFile, @C("LPCVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToWrite, @C("LPDWORD") Addressable lpNumberOfBytesWritten, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$24.WriteFile$MH().invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToWrite, lpNumberOfBytesWritten.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteFileEx$MH() {
        return cfapi_h$constants$24.WriteFileEx$MH();
    }
    public static @C("BOOL") int WriteFileEx (@C("HANDLE") Addressable hFile, @C("LPCVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToWrite, @C("LPOVERLAPPED") Addressable lpOverlapped, @C("LPOVERLAPPED_COMPLETION_ROUTINE") Addressable lpCompletionRoutine) {
        try {
            return (int)cfapi_h$constants$24.WriteFileEx$MH().invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToWrite, lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteFileGather$MH() {
        return cfapi_h$constants$24.WriteFileGather$MH();
    }
    public static @C("BOOL") int WriteFileGather (@C("HANDLE") Addressable hFile, @C("FILE_SEGMENT_ELEMENT[]") Addressable aSegmentArray, @C("DWORD") int nNumberOfBytesToWrite, @C("LPDWORD") Addressable lpReserved, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$24.WriteFileGather$MH().invokeExact(hFile.address(), aSegmentArray.address(), nNumberOfBytesToWrite, lpReserved.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTempPathW$MH() {
        return cfapi_h$constants$24.GetTempPathW$MH();
    }
    public static @C("DWORD") int GetTempPathW (@C("DWORD") int nBufferLength, @C("LPWSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$24.GetTempPathW$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumeNameForVolumeMountPointW$MH() {
        return cfapi_h$constants$24.GetVolumeNameForVolumeMountPointW$MH();
    }
    public static @C("BOOL") int GetVolumeNameForVolumeMountPointW (@C("LPCWSTR") Addressable lpszVolumeMountPoint, @C("LPWSTR") Addressable lpszVolumeName, @C("DWORD") int cchBufferLength) {
        try {
            return (int)cfapi_h$constants$24.GetVolumeNameForVolumeMountPointW$MH().invokeExact(lpszVolumeMountPoint.address(), lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumePathNamesForVolumeNameW$MH() {
        return cfapi_h$constants$24.GetVolumePathNamesForVolumeNameW$MH();
    }
    public static @C("BOOL") int GetVolumePathNamesForVolumeNameW (@C("LPCWSTR") Addressable lpszVolumeName, @C("LPWCH") Addressable lpszVolumePathNames, @C("DWORD") int cchBufferLength, @C("PDWORD") Addressable lpcchReturnLength) {
        try {
            return (int)cfapi_h$constants$24.GetVolumePathNamesForVolumeNameW$MH().invokeExact(lpszVolumeName.address(), lpszVolumePathNames.address(), cchBufferLength, lpcchReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFile2$MH() {
        return cfapi_h$constants$24.CreateFile2$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFile2 (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("DWORD") int dwCreationDisposition, @C("LPCREATEFILE2_EXTENDED_PARAMETERS") Addressable pCreateExParams) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.CreateFile2$MH().invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileIoOverlappedRange$MH() {
        return cfapi_h$constants$24.SetFileIoOverlappedRange$MH();
    }
    public static @C("BOOL") int SetFileIoOverlappedRange (@C("HANDLE") Addressable FileHandle, @C("PUCHAR") Addressable OverlappedRangeStart, @C("ULONG") int Length) {
        try {
            return (int)cfapi_h$constants$24.SetFileIoOverlappedRange$MH().invokeExact(FileHandle.address(), OverlappedRangeStart.address(), Length);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCompressedFileSizeA$MH() {
        return cfapi_h$constants$24.GetCompressedFileSizeA$MH();
    }
    public static @C("DWORD") int GetCompressedFileSizeA (@C("LPCSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpFileSizeHigh) {
        try {
            return (int)cfapi_h$constants$24.GetCompressedFileSizeA$MH().invokeExact(lpFileName.address(), lpFileSizeHigh.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCompressedFileSizeW$MH() {
        return cfapi_h$constants$24.GetCompressedFileSizeW$MH();
    }
    public static @C("DWORD") int GetCompressedFileSizeW (@C("LPCWSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpFileSizeHigh) {
        try {
            return (int)cfapi_h$constants$24.GetCompressedFileSizeW$MH().invokeExact(lpFileName.address(), lpFileSizeHigh.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int FindStreamInfoStandard() {
        return cfapi_h$constants$24.FindStreamInfoStandard();
    }
    public static @C("int") int FindStreamInfoMaxInfoLevel() {
        return cfapi_h$constants$24.FindStreamInfoMaxInfoLevel();
    }
    public static  MethodHandle FindFirstStreamW$MH() {
        return cfapi_h$constants$24.FindFirstStreamW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstStreamW (@C("LPCWSTR") Addressable lpFileName, @C("STREAM_INFO_LEVELS") int InfoLevel, @C("LPVOID") Addressable lpFindStreamData, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstStreamW$MH().invokeExact(lpFileName.address(), InfoLevel, lpFindStreamData.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextStreamW$MH() {
        return cfapi_h$constants$24.FindNextStreamW$MH();
    }
    public static @C("BOOL") int FindNextStreamW (@C("HANDLE") Addressable hFindStream, @C("LPVOID") Addressable lpFindStreamData) {
        try {
            return (int)cfapi_h$constants$24.FindNextStreamW$MH().invokeExact(hFindStream.address(), lpFindStreamData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AreFileApisANSI$MH() {
        return cfapi_h$constants$24.AreFileApisANSI$MH();
    }
    public static @C("BOOL") int AreFileApisANSI () {
        try {
            return (int)cfapi_h$constants$24.AreFileApisANSI$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTempPathA$MH() {
        return cfapi_h$constants$24.GetTempPathA$MH();
    }
    public static @C("DWORD") int GetTempPathA (@C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$24.GetTempPathA$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileNameW$MH() {
        return cfapi_h$constants$24.FindFirstFileNameW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileNameW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwFlags, @C("LPDWORD") Addressable StringLength, @C("PWSTR") Addressable LinkName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstFileNameW$MH().invokeExact(lpFileName.address(), dwFlags, StringLength.address(), LinkName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextFileNameW$MH() {
        return cfapi_h$constants$24.FindNextFileNameW$MH();
    }
    public static @C("BOOL") int FindNextFileNameW (@C("HANDLE") Addressable hFindStream, @C("LPDWORD") Addressable StringLength, @C("PWSTR") Addressable LinkName) {
        try {
            return (int)cfapi_h$constants$24.FindNextFileNameW$MH().invokeExact(hFindStream.address(), StringLength.address(), LinkName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumeInformationA$MH() {
        return cfapi_h$constants$24.GetVolumeInformationA$MH();
    }
    public static @C("BOOL") int GetVolumeInformationA (@C("LPCSTR") Addressable lpRootPathName, @C("LPSTR") Addressable lpVolumeNameBuffer, @C("DWORD") int nVolumeNameSize, @C("LPDWORD") Addressable lpVolumeSerialNumber, @C("LPDWORD") Addressable lpMaximumComponentLength, @C("LPDWORD") Addressable lpFileSystemFlags, @C("LPSTR") Addressable lpFileSystemNameBuffer, @C("DWORD") int nFileSystemNameSize) {
        try {
            return (int)cfapi_h$constants$24.GetVolumeInformationA$MH().invokeExact(lpRootPathName.address(), lpVolumeNameBuffer.address(), nVolumeNameSize, lpVolumeSerialNumber.address(), lpMaximumComponentLength.address(), lpFileSystemFlags.address(), lpFileSystemNameBuffer.address(), nFileSystemNameSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTempFileNameA$MH() {
        return cfapi_h$constants$24.GetTempFileNameA$MH();
    }
    public static @C("UINT") int GetTempFileNameA (@C("LPCSTR") Addressable lpPathName, @C("LPCSTR") Addressable lpPrefixString, @C("UINT") int uUnique, @C("LPSTR") Addressable lpTempFileName) {
        try {
            return (int)cfapi_h$constants$24.GetTempFileNameA$MH().invokeExact(lpPathName.address(), lpPrefixString.address(), uUnique, lpTempFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileApisToOEM$MH() {
        return cfapi_h$constants$24.SetFileApisToOEM$MH();
    }
    public static void SetFileApisToOEM () {
        try {
            cfapi_h$constants$24.SetFileApisToOEM$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileApisToANSI$MH() {
        return cfapi_h$constants$24.SetFileApisToANSI$MH();
    }
    public static void SetFileApisToANSI () {
        try {
            cfapi_h$constants$24.SetFileApisToANSI$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileFromAppW$MH() {
        return cfapi_h$constants$24.CopyFileFromAppW$MH();
    }
    public static @C("BOOL") int CopyFileFromAppW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("BOOL") int bFailIfExists) {
        try {
            return (int)cfapi_h$constants$24.CopyFileFromAppW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), bFailIfExists);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryFromAppW$MH() {
        return cfapi_h$constants$24.CreateDirectoryFromAppW$MH();
    }
    public static @C("BOOL") int CreateDirectoryFromAppW (@C("LPCWSTR") Addressable lpPathName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$24.CreateDirectoryFromAppW$MH().invokeExact(lpPathName.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileFromAppW$MH() {
        return cfapi_h$constants$24.CreateFileFromAppW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileFromAppW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int dwCreationDisposition, @C("DWORD") int dwFlagsAndAttributes, @C("HANDLE") Addressable hTemplateFile) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.CreateFileFromAppW$MH().invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFile2FromAppW$MH() {
        return cfapi_h$constants$24.CreateFile2FromAppW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFile2FromAppW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("DWORD") int dwCreationDisposition, @C("LPCREATEFILE2_EXTENDED_PARAMETERS") Addressable pCreateExParams) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.CreateFile2FromAppW$MH().invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteFileFromAppW$MH() {
        return cfapi_h$constants$24.DeleteFileFromAppW$MH();
    }
    public static @C("BOOL") int DeleteFileFromAppW (@C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$24.DeleteFileFromAppW$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileExFromAppW$MH() {
        return cfapi_h$constants$24.FindFirstFileExFromAppW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileExFromAppW (@C("LPCWSTR") Addressable lpFileName, @C("FINDEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFindFileData, @C("FINDEX_SEARCH_OPS") int fSearchOp, @C("LPVOID") Addressable lpSearchFilter, @C("DWORD") int dwAdditionalFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FindFirstFileExFromAppW$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFindFileData.address(), fSearchOp, lpSearchFilter.address(), dwAdditionalFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileAttributesExFromAppW$MH() {
        return cfapi_h$constants$24.GetFileAttributesExFromAppW$MH();
    }
    public static @C("BOOL") int GetFileAttributesExFromAppW (@C("LPCWSTR") Addressable lpFileName, @C("GET_FILEEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFileInformation) {
        try {
            return (int)cfapi_h$constants$24.GetFileAttributesExFromAppW$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFileInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileFromAppW$MH() {
        return cfapi_h$constants$24.MoveFileFromAppW$MH();
    }
    public static @C("BOOL") int MoveFileFromAppW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName) {
        try {
            return (int)cfapi_h$constants$24.MoveFileFromAppW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveDirectoryFromAppW$MH() {
        return cfapi_h$constants$24.RemoveDirectoryFromAppW$MH();
    }
    public static @C("BOOL") int RemoveDirectoryFromAppW (@C("LPCWSTR") Addressable lpPathName) {
        try {
            return (int)cfapi_h$constants$24.RemoveDirectoryFromAppW$MH().invokeExact(lpPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReplaceFileFromAppW$MH() {
        return cfapi_h$constants$24.ReplaceFileFromAppW$MH();
    }
    public static @C("BOOL") int ReplaceFileFromAppW (@C("LPCWSTR") Addressable lpReplacedFileName, @C("LPCWSTR") Addressable lpReplacementFileName, @C("LPCWSTR") Addressable lpBackupFileName, @C("DWORD") int dwReplaceFlags, @C("LPVOID") Addressable lpExclude, @C("LPVOID") Addressable lpReserved) {
        try {
            return (int)cfapi_h$constants$24.ReplaceFileFromAppW$MH().invokeExact(lpReplacedFileName.address(), lpReplacementFileName.address(), lpBackupFileName.address(), dwReplaceFlags, lpExclude.address(), lpReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileAttributesFromAppW$MH() {
        return cfapi_h$constants$24.SetFileAttributesFromAppW$MH();
    }
    public static @C("BOOL") int SetFileAttributesFromAppW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwFileAttributes) {
        try {
            return (int)cfapi_h$constants$24.SetFileAttributesFromAppW$MH().invokeExact(lpFileName.address(), dwFileAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsDebuggerPresent$MH() {
        return cfapi_h$constants$24.IsDebuggerPresent$MH();
    }
    public static @C("BOOL") int IsDebuggerPresent () {
        try {
            return (int)cfapi_h$constants$24.IsDebuggerPresent$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DebugBreak$MH() {
        return cfapi_h$constants$24.DebugBreak$MH();
    }
    public static void DebugBreak () {
        try {
            cfapi_h$constants$24.DebugBreak$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OutputDebugStringA$MH() {
        return cfapi_h$constants$24.OutputDebugStringA$MH();
    }
    public static void OutputDebugStringA (@C("LPCSTR") Addressable lpOutputString) {
        try {
            cfapi_h$constants$24.OutputDebugStringA$MH().invokeExact(lpOutputString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OutputDebugStringW$MH() {
        return cfapi_h$constants$24.OutputDebugStringW$MH();
    }
    public static void OutputDebugStringW (@C("LPCWSTR") Addressable lpOutputString) {
        try {
            cfapi_h$constants$24.OutputDebugStringW$MH().invokeExact(lpOutputString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ContinueDebugEvent$MH() {
        return cfapi_h$constants$24.ContinueDebugEvent$MH();
    }
    public static @C("BOOL") int ContinueDebugEvent (@C("DWORD") int dwProcessId, @C("DWORD") int dwThreadId, @C("DWORD") int dwContinueStatus) {
        try {
            return (int)cfapi_h$constants$24.ContinueDebugEvent$MH().invokeExact(dwProcessId, dwThreadId, dwContinueStatus);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForDebugEvent$MH() {
        return cfapi_h$constants$24.WaitForDebugEvent$MH();
    }
    public static @C("BOOL") int WaitForDebugEvent (@C("LPDEBUG_EVENT") Addressable lpDebugEvent, @C("DWORD") int dwMilliseconds) {
        try {
            return (int)cfapi_h$constants$24.WaitForDebugEvent$MH().invokeExact(lpDebugEvent.address(), dwMilliseconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DebugActiveProcess$MH() {
        return cfapi_h$constants$24.DebugActiveProcess$MH();
    }
    public static @C("BOOL") int DebugActiveProcess (@C("DWORD") int dwProcessId) {
        try {
            return (int)cfapi_h$constants$24.DebugActiveProcess$MH().invokeExact(dwProcessId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DebugActiveProcessStop$MH() {
        return cfapi_h$constants$24.DebugActiveProcessStop$MH();
    }
    public static @C("BOOL") int DebugActiveProcessStop (@C("DWORD") int dwProcessId) {
        try {
            return (int)cfapi_h$constants$24.DebugActiveProcessStop$MH().invokeExact(dwProcessId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckRemoteDebuggerPresent$MH() {
        return cfapi_h$constants$24.CheckRemoteDebuggerPresent$MH();
    }
    public static @C("BOOL") int CheckRemoteDebuggerPresent (@C("HANDLE") Addressable hProcess, @C("PBOOL") Addressable pbDebuggerPresent) {
        try {
            return (int)cfapi_h$constants$24.CheckRemoteDebuggerPresent$MH().invokeExact(hProcess.address(), pbDebuggerPresent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForDebugEventEx$MH() {
        return cfapi_h$constants$24.WaitForDebugEventEx$MH();
    }
    public static @C("BOOL") int WaitForDebugEventEx (@C("LPDEBUG_EVENT") Addressable lpDebugEvent, @C("DWORD") int dwMilliseconds) {
        try {
            return (int)cfapi_h$constants$24.WaitForDebugEventEx$MH().invokeExact(lpDebugEvent.address(), dwMilliseconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EncodePointer$MH() {
        return cfapi_h$constants$24.EncodePointer$MH();
    }
    public static @C("PVOID") MemoryAddress EncodePointer (@C("PVOID") Addressable Ptr) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.EncodePointer$MH().invokeExact(Ptr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DecodePointer$MH() {
        return cfapi_h$constants$24.DecodePointer$MH();
    }
    public static @C("PVOID") MemoryAddress DecodePointer (@C("PVOID") Addressable Ptr) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.DecodePointer$MH().invokeExact(Ptr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EncodeSystemPointer$MH() {
        return cfapi_h$constants$24.EncodeSystemPointer$MH();
    }
    public static @C("PVOID") MemoryAddress EncodeSystemPointer (@C("PVOID") Addressable Ptr) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.EncodeSystemPointer$MH().invokeExact(Ptr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DecodeSystemPointer$MH() {
        return cfapi_h$constants$24.DecodeSystemPointer$MH();
    }
    public static @C("PVOID") MemoryAddress DecodeSystemPointer (@C("PVOID") Addressable Ptr) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.DecodeSystemPointer$MH().invokeExact(Ptr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EncodeRemotePointer$MH() {
        return cfapi_h$constants$24.EncodeRemotePointer$MH();
    }
    public static @C("HRESULT") int EncodeRemotePointer (@C("HANDLE") Addressable ProcessHandle, @C("PVOID") Addressable Ptr, @C("PVOID*") Addressable EncodedPtr) {
        try {
            return (int)cfapi_h$constants$24.EncodeRemotePointer$MH().invokeExact(ProcessHandle.address(), Ptr.address(), EncodedPtr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DecodeRemotePointer$MH() {
        return cfapi_h$constants$24.DecodeRemotePointer$MH();
    }
    public static @C("HRESULT") int DecodeRemotePointer (@C("HANDLE") Addressable ProcessHandle, @C("PVOID") Addressable Ptr, @C("PVOID*") Addressable DecodedPtr) {
        try {
            return (int)cfapi_h$constants$24.DecodeRemotePointer$MH().invokeExact(ProcessHandle.address(), Ptr.address(), DecodedPtr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Beep$MH() {
        return cfapi_h$constants$24.Beep$MH();
    }
    public static @C("BOOL") int Beep (@C("DWORD") int dwFreq, @C("DWORD") int dwDuration) {
        try {
            return (int)cfapi_h$constants$24.Beep$MH().invokeExact(dwFreq, dwDuration);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseHandle$MH() {
        return cfapi_h$constants$24.CloseHandle$MH();
    }
    public static @C("BOOL") int CloseHandle (@C("HANDLE") Addressable hObject) {
        try {
            return (int)cfapi_h$constants$24.CloseHandle$MH().invokeExact(hObject.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DuplicateHandle$MH() {
        return cfapi_h$constants$24.DuplicateHandle$MH();
    }
    public static @C("BOOL") int DuplicateHandle (@C("HANDLE") Addressable hSourceProcessHandle, @C("HANDLE") Addressable hSourceHandle, @C("HANDLE") Addressable hTargetProcessHandle, @C("LPHANDLE") Addressable lpTargetHandle, @C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("DWORD") int dwOptions) {
        try {
            return (int)cfapi_h$constants$24.DuplicateHandle$MH().invokeExact(hSourceProcessHandle.address(), hSourceHandle.address(), hTargetProcessHandle.address(), lpTargetHandle.address(), dwDesiredAccess, bInheritHandle, dwOptions);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CompareObjectHandles$MH() {
        return cfapi_h$constants$24.CompareObjectHandles$MH();
    }
    public static @C("BOOL") int CompareObjectHandles (@C("HANDLE") Addressable hFirstObjectHandle, @C("HANDLE") Addressable hSecondObjectHandle) {
        try {
            return (int)cfapi_h$constants$24.CompareObjectHandles$MH().invokeExact(hFirstObjectHandle.address(), hSecondObjectHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetHandleInformation$MH() {
        return cfapi_h$constants$24.GetHandleInformation$MH();
    }
    public static @C("BOOL") int GetHandleInformation (@C("HANDLE") Addressable hObject, @C("LPDWORD") Addressable lpdwFlags) {
        try {
            return (int)cfapi_h$constants$24.GetHandleInformation$MH().invokeExact(hObject.address(), lpdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetHandleInformation$MH() {
        return cfapi_h$constants$24.SetHandleInformation$MH();
    }
    public static @C("BOOL") int SetHandleInformation (@C("HANDLE") Addressable hObject, @C("DWORD") int dwMask, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$24.SetHandleInformation$MH().invokeExact(hObject.address(), dwMask, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RaiseException$MH() {
        return cfapi_h$constants$24.RaiseException$MH();
    }
    public static void RaiseException (@C("DWORD") int dwExceptionCode, @C("DWORD") int dwExceptionFlags, @C("DWORD") int nNumberOfArguments, @C("const ULONG_PTR*") Addressable lpArguments) {
        try {
            cfapi_h$constants$24.RaiseException$MH().invokeExact(dwExceptionCode, dwExceptionFlags, nNumberOfArguments, lpArguments.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnhandledExceptionFilter$MH() {
        return cfapi_h$constants$24.UnhandledExceptionFilter$MH();
    }
    public static @C("LONG") int UnhandledExceptionFilter (@C("struct _EXCEPTION_POINTERS*") Addressable ExceptionInfo) {
        try {
            return (int)cfapi_h$constants$24.UnhandledExceptionFilter$MH().invokeExact(ExceptionInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUnhandledExceptionFilter$MH() {
        return cfapi_h$constants$24.SetUnhandledExceptionFilter$MH();
    }
    public static @C("LPTOP_LEVEL_EXCEPTION_FILTER") MemoryAddress SetUnhandledExceptionFilter (@C("LPTOP_LEVEL_EXCEPTION_FILTER") Addressable lpTopLevelExceptionFilter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.SetUnhandledExceptionFilter$MH().invokeExact(lpTopLevelExceptionFilter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLastError$MH() {
        return cfapi_h$constants$24.GetLastError$MH();
    }
    public static @C("DWORD") int GetLastError () {
        try {
            return (int)cfapi_h$constants$24.GetLastError$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetLastError$MH() {
        return cfapi_h$constants$24.SetLastError$MH();
    }
    public static void SetLastError (@C("DWORD") int dwErrCode) {
        try {
            cfapi_h$constants$24.SetLastError$MH().invokeExact(dwErrCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetErrorMode$MH() {
        return cfapi_h$constants$24.GetErrorMode$MH();
    }
    public static @C("UINT") int GetErrorMode () {
        try {
            return (int)cfapi_h$constants$24.GetErrorMode$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetErrorMode$MH() {
        return cfapi_h$constants$24.SetErrorMode$MH();
    }
    public static @C("UINT") int SetErrorMode (@C("UINT") int uMode) {
        try {
            return (int)cfapi_h$constants$24.SetErrorMode$MH().invokeExact(uMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddVectoredExceptionHandler$MH() {
        return cfapi_h$constants$24.AddVectoredExceptionHandler$MH();
    }
    public static @C("PVOID") MemoryAddress AddVectoredExceptionHandler (@C("ULONG") int First, @C("PVECTORED_EXCEPTION_HANDLER") Addressable Handler) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.AddVectoredExceptionHandler$MH().invokeExact(First, Handler.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveVectoredExceptionHandler$MH() {
        return cfapi_h$constants$24.RemoveVectoredExceptionHandler$MH();
    }
    public static @C("ULONG") int RemoveVectoredExceptionHandler (@C("PVOID") Addressable Handle) {
        try {
            return (int)cfapi_h$constants$24.RemoveVectoredExceptionHandler$MH().invokeExact(Handle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddVectoredContinueHandler$MH() {
        return cfapi_h$constants$24.AddVectoredContinueHandler$MH();
    }
    public static @C("PVOID") MemoryAddress AddVectoredContinueHandler (@C("ULONG") int First, @C("PVECTORED_EXCEPTION_HANDLER") Addressable Handler) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.AddVectoredContinueHandler$MH().invokeExact(First, Handler.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveVectoredContinueHandler$MH() {
        return cfapi_h$constants$24.RemoveVectoredContinueHandler$MH();
    }
    public static @C("ULONG") int RemoveVectoredContinueHandler (@C("PVOID") Addressable Handle) {
        try {
            return (int)cfapi_h$constants$24.RemoveVectoredContinueHandler$MH().invokeExact(Handle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RaiseFailFastException$MH() {
        return cfapi_h$constants$24.RaiseFailFastException$MH();
    }
    public static void RaiseFailFastException (@C("PEXCEPTION_RECORD") Addressable pExceptionRecord, @C("PCONTEXT") Addressable pContextRecord, @C("DWORD") int dwFlags) {
        try {
            cfapi_h$constants$24.RaiseFailFastException$MH().invokeExact(pExceptionRecord.address(), pContextRecord.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FatalAppExitA$MH() {
        return cfapi_h$constants$24.FatalAppExitA$MH();
    }
    public static void FatalAppExitA (@C("UINT") int uAction, @C("LPCSTR") Addressable lpMessageText) {
        try {
            cfapi_h$constants$24.FatalAppExitA$MH().invokeExact(uAction, lpMessageText.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FatalAppExitW$MH() {
        return cfapi_h$constants$24.FatalAppExitW$MH();
    }
    public static void FatalAppExitW (@C("UINT") int uAction, @C("LPCWSTR") Addressable lpMessageText) {
        try {
            cfapi_h$constants$24.FatalAppExitW$MH().invokeExact(uAction, lpMessageText.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadErrorMode$MH() {
        return cfapi_h$constants$24.GetThreadErrorMode$MH();
    }
    public static @C("DWORD") int GetThreadErrorMode () {
        try {
            return (int)cfapi_h$constants$24.GetThreadErrorMode$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadErrorMode$MH() {
        return cfapi_h$constants$24.SetThreadErrorMode$MH();
    }
    public static @C("BOOL") int SetThreadErrorMode (@C("DWORD") int dwNewMode, @C("LPDWORD") Addressable lpOldMode) {
        try {
            return (int)cfapi_h$constants$24.SetThreadErrorMode$MH().invokeExact(dwNewMode, lpOldMode.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TerminateProcessOnMemoryExhaustion$MH() {
        return cfapi_h$constants$24.TerminateProcessOnMemoryExhaustion$MH();
    }
    public static void TerminateProcessOnMemoryExhaustion (@C("SIZE_T") long FailedAllocationSize) {
        try {
            cfapi_h$constants$24.TerminateProcessOnMemoryExhaustion$MH().invokeExact(FailedAllocationSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlsAlloc$MH() {
        return cfapi_h$constants$24.FlsAlloc$MH();
    }
    public static @C("DWORD") int FlsAlloc (@C("PFLS_CALLBACK_FUNCTION") Addressable lpCallback) {
        try {
            return (int)cfapi_h$constants$24.FlsAlloc$MH().invokeExact(lpCallback.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlsGetValue$MH() {
        return cfapi_h$constants$24.FlsGetValue$MH();
    }
    public static @C("PVOID") MemoryAddress FlsGetValue (@C("DWORD") int dwFlsIndex) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.FlsGetValue$MH().invokeExact(dwFlsIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlsSetValue$MH() {
        return cfapi_h$constants$24.FlsSetValue$MH();
    }
    public static @C("BOOL") int FlsSetValue (@C("DWORD") int dwFlsIndex, @C("PVOID") Addressable lpFlsData) {
        try {
            return (int)cfapi_h$constants$24.FlsSetValue$MH().invokeExact(dwFlsIndex, lpFlsData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlsFree$MH() {
        return cfapi_h$constants$24.FlsFree$MH();
    }
    public static @C("BOOL") int FlsFree (@C("DWORD") int dwFlsIndex) {
        try {
            return (int)cfapi_h$constants$24.FlsFree$MH().invokeExact(dwFlsIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsThreadAFiber$MH() {
        return cfapi_h$constants$24.IsThreadAFiber$MH();
    }
    public static @C("BOOL") int IsThreadAFiber () {
        try {
            return (int)cfapi_h$constants$24.IsThreadAFiber$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePipe$MH() {
        return cfapi_h$constants$24.CreatePipe$MH();
    }
    public static @C("BOOL") int CreatePipe (@C("PHANDLE") Addressable hReadPipe, @C("PHANDLE") Addressable hWritePipe, @C("LPSECURITY_ATTRIBUTES") Addressable lpPipeAttributes, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$24.CreatePipe$MH().invokeExact(hReadPipe.address(), hWritePipe.address(), lpPipeAttributes.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ConnectNamedPipe$MH() {
        return cfapi_h$constants$24.ConnectNamedPipe$MH();
    }
    public static @C("BOOL") int ConnectNamedPipe (@C("HANDLE") Addressable hNamedPipe, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$24.ConnectNamedPipe$MH().invokeExact(hNamedPipe.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DisconnectNamedPipe$MH() {
        return cfapi_h$constants$24.DisconnectNamedPipe$MH();
    }
    public static @C("BOOL") int DisconnectNamedPipe (@C("HANDLE") Addressable hNamedPipe) {
        try {
            return (int)cfapi_h$constants$24.DisconnectNamedPipe$MH().invokeExact(hNamedPipe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetNamedPipeHandleState$MH() {
        return cfapi_h$constants$24.SetNamedPipeHandleState$MH();
    }
    public static @C("BOOL") int SetNamedPipeHandleState (@C("HANDLE") Addressable hNamedPipe, @C("LPDWORD") Addressable lpMode, @C("LPDWORD") Addressable lpMaxCollectionCount, @C("LPDWORD") Addressable lpCollectDataTimeout) {
        try {
            return (int)cfapi_h$constants$24.SetNamedPipeHandleState$MH().invokeExact(hNamedPipe.address(), lpMode.address(), lpMaxCollectionCount.address(), lpCollectDataTimeout.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PeekNamedPipe$MH() {
        return cfapi_h$constants$24.PeekNamedPipe$MH();
    }
    public static @C("BOOL") int PeekNamedPipe (@C("HANDLE") Addressable hNamedPipe, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nBufferSize, @C("LPDWORD") Addressable lpBytesRead, @C("LPDWORD") Addressable lpTotalBytesAvail, @C("LPDWORD") Addressable lpBytesLeftThisMessage) {
        try {
            return (int)cfapi_h$constants$24.PeekNamedPipe$MH().invokeExact(hNamedPipe.address(), lpBuffer.address(), nBufferSize, lpBytesRead.address(), lpTotalBytesAvail.address(), lpBytesLeftThisMessage.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TransactNamedPipe$MH() {
        return cfapi_h$constants$24.TransactNamedPipe$MH();
    }
    public static @C("BOOL") int TransactNamedPipe (@C("HANDLE") Addressable hNamedPipe, @C("LPVOID") Addressable lpInBuffer, @C("DWORD") int nInBufferSize, @C("LPVOID") Addressable lpOutBuffer, @C("DWORD") int nOutBufferSize, @C("LPDWORD") Addressable lpBytesRead, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$24.TransactNamedPipe$MH().invokeExact(hNamedPipe.address(), lpInBuffer.address(), nInBufferSize, lpOutBuffer.address(), nOutBufferSize, lpBytesRead.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateNamedPipeW$MH() {
        return cfapi_h$constants$24.CreateNamedPipeW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateNamedPipeW (@C("LPCWSTR") Addressable lpName, @C("DWORD") int dwOpenMode, @C("DWORD") int dwPipeMode, @C("DWORD") int nMaxInstances, @C("DWORD") int nOutBufferSize, @C("DWORD") int nInBufferSize, @C("DWORD") int nDefaultTimeOut, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.CreateNamedPipeW$MH().invokeExact(lpName.address(), dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitNamedPipeW$MH() {
        return cfapi_h$constants$24.WaitNamedPipeW$MH();
    }
    public static @C("BOOL") int WaitNamedPipeW (@C("LPCWSTR") Addressable lpNamedPipeName, @C("DWORD") int nTimeOut) {
        try {
            return (int)cfapi_h$constants$24.WaitNamedPipeW$MH().invokeExact(lpNamedPipeName.address(), nTimeOut);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeClientComputerNameW$MH() {
        return cfapi_h$constants$24.GetNamedPipeClientComputerNameW$MH();
    }
    public static @C("BOOL") int GetNamedPipeClientComputerNameW (@C("HANDLE") Addressable Pipe, @C("LPWSTR") Addressable ClientComputerName, @C("ULONG") int ClientComputerNameLength) {
        try {
            return (int)cfapi_h$constants$24.GetNamedPipeClientComputerNameW$MH().invokeExact(Pipe.address(), ClientComputerName.address(), ClientComputerNameLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ImpersonateNamedPipeClient$MH() {
        return cfapi_h$constants$24.ImpersonateNamedPipeClient$MH();
    }
    public static @C("BOOL") int ImpersonateNamedPipeClient (@C("HANDLE") Addressable hNamedPipe) {
        try {
            return (int)cfapi_h$constants$24.ImpersonateNamedPipeClient$MH().invokeExact(hNamedPipe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeInfo$MH() {
        return cfapi_h$constants$24.GetNamedPipeInfo$MH();
    }
    public static @C("BOOL") int GetNamedPipeInfo (@C("HANDLE") Addressable hNamedPipe, @C("LPDWORD") Addressable lpFlags, @C("LPDWORD") Addressable lpOutBufferSize, @C("LPDWORD") Addressable lpInBufferSize, @C("LPDWORD") Addressable lpMaxInstances) {
        try {
            return (int)cfapi_h$constants$24.GetNamedPipeInfo$MH().invokeExact(hNamedPipe.address(), lpFlags.address(), lpOutBufferSize.address(), lpInBufferSize.address(), lpMaxInstances.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeHandleStateW$MH() {
        return cfapi_h$constants$24.GetNamedPipeHandleStateW$MH();
    }
    public static @C("BOOL") int GetNamedPipeHandleStateW (@C("HANDLE") Addressable hNamedPipe, @C("LPDWORD") Addressable lpState, @C("LPDWORD") Addressable lpCurInstances, @C("LPDWORD") Addressable lpMaxCollectionCount, @C("LPDWORD") Addressable lpCollectDataTimeout, @C("LPWSTR") Addressable lpUserName, @C("DWORD") int nMaxUserNameSize) {
        try {
            return (int)cfapi_h$constants$24.GetNamedPipeHandleStateW$MH().invokeExact(hNamedPipe.address(), lpState.address(), lpCurInstances.address(), lpMaxCollectionCount.address(), lpCollectDataTimeout.address(), lpUserName.address(), nMaxUserNameSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallNamedPipeW$MH() {
        return cfapi_h$constants$24.CallNamedPipeW$MH();
    }
    public static @C("BOOL") int CallNamedPipeW (@C("LPCWSTR") Addressable lpNamedPipeName, @C("LPVOID") Addressable lpInBuffer, @C("DWORD") int nInBufferSize, @C("LPVOID") Addressable lpOutBuffer, @C("DWORD") int nOutBufferSize, @C("LPDWORD") Addressable lpBytesRead, @C("DWORD") int nTimeOut) {
        try {
            return (int)cfapi_h$constants$24.CallNamedPipeW$MH().invokeExact(lpNamedPipeName.address(), lpInBuffer.address(), nInBufferSize, lpOutBuffer.address(), nOutBufferSize, lpBytesRead.address(), nTimeOut);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryPerformanceCounter$MH() {
        return cfapi_h$constants$24.QueryPerformanceCounter$MH();
    }
    public static @C("BOOL") int QueryPerformanceCounter (@C("LARGE_INTEGER*") Addressable lpPerformanceCount) {
        try {
            return (int)cfapi_h$constants$24.QueryPerformanceCounter$MH().invokeExact(lpPerformanceCount.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryPerformanceFrequency$MH() {
        return cfapi_h$constants$24.QueryPerformanceFrequency$MH();
    }
    public static @C("BOOL") int QueryPerformanceFrequency (@C("LARGE_INTEGER*") Addressable lpFrequency) {
        try {
            return (int)cfapi_h$constants$24.QueryPerformanceFrequency$MH().invokeExact(lpFrequency.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapCreate$MH() {
        return cfapi_h$constants$24.HeapCreate$MH();
    }
    public static @C("HANDLE") MemoryAddress HeapCreate (@C("DWORD") int flOptions, @C("SIZE_T") long dwInitialSize, @C("SIZE_T") long dwMaximumSize) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.HeapCreate$MH().invokeExact(flOptions, dwInitialSize, dwMaximumSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapDestroy$MH() {
        return cfapi_h$constants$24.HeapDestroy$MH();
    }
    public static @C("BOOL") int HeapDestroy (@C("HANDLE") Addressable hHeap) {
        try {
            return (int)cfapi_h$constants$24.HeapDestroy$MH().invokeExact(hHeap.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapAlloc$MH() {
        return cfapi_h$constants$24.HeapAlloc$MH();
    }
    public static @C("LPVOID") MemoryAddress HeapAlloc (@C("HANDLE") Addressable hHeap, @C("DWORD") int dwFlags, @C("SIZE_T") long dwBytes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.HeapAlloc$MH().invokeExact(hHeap.address(), dwFlags, dwBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapReAlloc$MH() {
        return cfapi_h$constants$24.HeapReAlloc$MH();
    }
    public static @C("LPVOID") MemoryAddress HeapReAlloc (@C("HANDLE") Addressable hHeap, @C("DWORD") int dwFlags, @C("LPVOID") Addressable lpMem, @C("SIZE_T") long dwBytes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.HeapReAlloc$MH().invokeExact(hHeap.address(), dwFlags, lpMem.address(), dwBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapFree$MH() {
        return cfapi_h$constants$24.HeapFree$MH();
    }
    public static @C("BOOL") int HeapFree (@C("HANDLE") Addressable hHeap, @C("DWORD") int dwFlags, @C("LPVOID") Addressable lpMem) {
        try {
            return (int)cfapi_h$constants$24.HeapFree$MH().invokeExact(hHeap.address(), dwFlags, lpMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapSize$MH() {
        return cfapi_h$constants$24.HeapSize$MH();
    }
    public static @C("SIZE_T") long HeapSize (@C("HANDLE") Addressable hHeap, @C("DWORD") int dwFlags, @C("LPCVOID") Addressable lpMem) {
        try {
            return (long)cfapi_h$constants$24.HeapSize$MH().invokeExact(hHeap.address(), dwFlags, lpMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessHeap$MH() {
        return cfapi_h$constants$24.GetProcessHeap$MH();
    }
    public static @C("HANDLE") MemoryAddress GetProcessHeap () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$24.GetProcessHeap$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapCompact$MH() {
        return cfapi_h$constants$24.HeapCompact$MH();
    }
    public static @C("SIZE_T") long HeapCompact (@C("HANDLE") Addressable hHeap, @C("DWORD") int dwFlags) {
        try {
            return (long)cfapi_h$constants$24.HeapCompact$MH().invokeExact(hHeap.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapSetInformation$MH() {
        return cfapi_h$constants$24.HeapSetInformation$MH();
    }
    public static @C("BOOL") int HeapSetInformation (@C("HANDLE") Addressable HeapHandle, @C("HEAP_INFORMATION_CLASS") int HeapInformationClass, @C("PVOID") Addressable HeapInformation, @C("SIZE_T") long HeapInformationLength) {
        try {
            return (int)cfapi_h$constants$24.HeapSetInformation$MH().invokeExact(HeapHandle.address(), HeapInformationClass, HeapInformation.address(), HeapInformationLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapValidate$MH() {
        return cfapi_h$constants$24.HeapValidate$MH();
    }
    public static @C("BOOL") int HeapValidate (@C("HANDLE") Addressable hHeap, @C("DWORD") int dwFlags, @C("LPCVOID") Addressable lpMem) {
        try {
            return (int)cfapi_h$constants$24.HeapValidate$MH().invokeExact(hHeap.address(), dwFlags, lpMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapSummary$MH() {
        return cfapi_h$constants$24.HeapSummary$MH();
    }
    public static @C("BOOL") int HeapSummary (@C("HANDLE") Addressable hHeap, @C("DWORD") int dwFlags, @C("LPHEAP_SUMMARY") Addressable lpSummary) {
        try {
            return (int)cfapi_h$constants$24.HeapSummary$MH().invokeExact(hHeap.address(), dwFlags, lpSummary.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessHeaps$MH() {
        return cfapi_h$constants$24.GetProcessHeaps$MH();
    }
    public static @C("DWORD") int GetProcessHeaps (@C("DWORD") int NumberOfHeaps, @C("PHANDLE") Addressable ProcessHeaps) {
        try {
            return (int)cfapi_h$constants$24.GetProcessHeaps$MH().invokeExact(NumberOfHeaps, ProcessHeaps.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapLock$MH() {
        return cfapi_h$constants$24.HeapLock$MH();
    }
    public static @C("BOOL") int HeapLock (@C("HANDLE") Addressable hHeap) {
        try {
            return (int)cfapi_h$constants$24.HeapLock$MH().invokeExact(hHeap.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapUnlock$MH() {
        return cfapi_h$constants$25.HeapUnlock$MH();
    }
    public static @C("BOOL") int HeapUnlock (@C("HANDLE") Addressable hHeap) {
        try {
            return (int)cfapi_h$constants$25.HeapUnlock$MH().invokeExact(hHeap.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapWalk$MH() {
        return cfapi_h$constants$25.HeapWalk$MH();
    }
    public static @C("BOOL") int HeapWalk (@C("HANDLE") Addressable hHeap, @C("LPPROCESS_HEAP_ENTRY") Addressable lpEntry) {
        try {
            return (int)cfapi_h$constants$25.HeapWalk$MH().invokeExact(hHeap.address(), lpEntry.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HeapQueryInformation$MH() {
        return cfapi_h$constants$25.HeapQueryInformation$MH();
    }
    public static @C("BOOL") int HeapQueryInformation (@C("HANDLE") Addressable HeapHandle, @C("HEAP_INFORMATION_CLASS") int HeapInformationClass, @C("PVOID") Addressable HeapInformation, @C("SIZE_T") long HeapInformationLength, @C("PSIZE_T") Addressable ReturnLength) {
        try {
            return (int)cfapi_h$constants$25.HeapQueryInformation$MH().invokeExact(HeapHandle.address(), HeapInformationClass, HeapInformation.address(), HeapInformationLength, ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateIoCompletionPort$MH() {
        return cfapi_h$constants$25.CreateIoCompletionPort$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateIoCompletionPort (@C("HANDLE") Addressable FileHandle, @C("HANDLE") Addressable ExistingCompletionPort, @C("ULONG_PTR") long CompletionKey, @C("DWORD") int NumberOfConcurrentThreads) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateIoCompletionPort$MH().invokeExact(FileHandle.address(), ExistingCompletionPort.address(), CompletionKey, NumberOfConcurrentThreads);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetQueuedCompletionStatus$MH() {
        return cfapi_h$constants$25.GetQueuedCompletionStatus$MH();
    }
    public static @C("BOOL") int GetQueuedCompletionStatus (@C("HANDLE") Addressable CompletionPort, @C("LPDWORD") Addressable lpNumberOfBytesTransferred, @C("PULONG_PTR") Addressable lpCompletionKey, @C("LPOVERLAPPED*") Addressable lpOverlapped, @C("DWORD") int dwMilliseconds) {
        try {
            return (int)cfapi_h$constants$25.GetQueuedCompletionStatus$MH().invokeExact(CompletionPort.address(), lpNumberOfBytesTransferred.address(), lpCompletionKey.address(), lpOverlapped.address(), dwMilliseconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetQueuedCompletionStatusEx$MH() {
        return cfapi_h$constants$25.GetQueuedCompletionStatusEx$MH();
    }
    public static @C("BOOL") int GetQueuedCompletionStatusEx (@C("HANDLE") Addressable CompletionPort, @C("LPOVERLAPPED_ENTRY") Addressable lpCompletionPortEntries, @C("ULONG") int ulCount, @C("PULONG") Addressable ulNumEntriesRemoved, @C("DWORD") int dwMilliseconds, @C("BOOL") int fAlertable) {
        try {
            return (int)cfapi_h$constants$25.GetQueuedCompletionStatusEx$MH().invokeExact(CompletionPort.address(), lpCompletionPortEntries.address(), ulCount, ulNumEntriesRemoved.address(), dwMilliseconds, fAlertable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PostQueuedCompletionStatus$MH() {
        return cfapi_h$constants$25.PostQueuedCompletionStatus$MH();
    }
    public static @C("BOOL") int PostQueuedCompletionStatus (@C("HANDLE") Addressable CompletionPort, @C("DWORD") int dwNumberOfBytesTransferred, @C("ULONG_PTR") long dwCompletionKey, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$25.PostQueuedCompletionStatus$MH().invokeExact(CompletionPort.address(), dwNumberOfBytesTransferred, dwCompletionKey, lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeviceIoControl$MH() {
        return cfapi_h$constants$25.DeviceIoControl$MH();
    }
    public static @C("BOOL") int DeviceIoControl (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwIoControlCode, @C("LPVOID") Addressable lpInBuffer, @C("DWORD") int nInBufferSize, @C("LPVOID") Addressable lpOutBuffer, @C("DWORD") int nOutBufferSize, @C("LPDWORD") Addressable lpBytesReturned, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$25.DeviceIoControl$MH().invokeExact(hDevice.address(), dwIoControlCode, lpInBuffer.address(), nInBufferSize, lpOutBuffer.address(), nOutBufferSize, lpBytesReturned.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOverlappedResult$MH() {
        return cfapi_h$constants$25.GetOverlappedResult$MH();
    }
    public static @C("BOOL") int GetOverlappedResult (@C("HANDLE") Addressable hFile, @C("LPOVERLAPPED") Addressable lpOverlapped, @C("LPDWORD") Addressable lpNumberOfBytesTransferred, @C("BOOL") int bWait) {
        try {
            return (int)cfapi_h$constants$25.GetOverlappedResult$MH().invokeExact(hFile.address(), lpOverlapped.address(), lpNumberOfBytesTransferred.address(), bWait);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelIoEx$MH() {
        return cfapi_h$constants$25.CancelIoEx$MH();
    }
    public static @C("BOOL") int CancelIoEx (@C("HANDLE") Addressable hFile, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$25.CancelIoEx$MH().invokeExact(hFile.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelIo$MH() {
        return cfapi_h$constants$25.CancelIo$MH();
    }
    public static @C("BOOL") int CancelIo (@C("HANDLE") Addressable hFile) {
        try {
            return (int)cfapi_h$constants$25.CancelIo$MH().invokeExact(hFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOverlappedResultEx$MH() {
        return cfapi_h$constants$25.GetOverlappedResultEx$MH();
    }
    public static @C("BOOL") int GetOverlappedResultEx (@C("HANDLE") Addressable hFile, @C("LPOVERLAPPED") Addressable lpOverlapped, @C("LPDWORD") Addressable lpNumberOfBytesTransferred, @C("DWORD") int dwMilliseconds, @C("BOOL") int bAlertable) {
        try {
            return (int)cfapi_h$constants$25.GetOverlappedResultEx$MH().invokeExact(hFile.address(), lpOverlapped.address(), lpNumberOfBytesTransferred.address(), dwMilliseconds, bAlertable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelSynchronousIo$MH() {
        return cfapi_h$constants$25.CancelSynchronousIo$MH();
    }
    public static @C("BOOL") int CancelSynchronousIo (@C("HANDLE") Addressable hThread) {
        try {
            return (int)cfapi_h$constants$25.CancelSynchronousIo$MH().invokeExact(hThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeSRWLock$MH() {
        return cfapi_h$constants$25.InitializeSRWLock$MH();
    }
    public static void InitializeSRWLock (@C("PSRWLOCK") Addressable SRWLock) {
        try {
            cfapi_h$constants$25.InitializeSRWLock$MH().invokeExact(SRWLock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseSRWLockExclusive$MH() {
        return cfapi_h$constants$25.ReleaseSRWLockExclusive$MH();
    }
    public static void ReleaseSRWLockExclusive (@C("PSRWLOCK") Addressable SRWLock) {
        try {
            cfapi_h$constants$25.ReleaseSRWLockExclusive$MH().invokeExact(SRWLock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseSRWLockShared$MH() {
        return cfapi_h$constants$25.ReleaseSRWLockShared$MH();
    }
    public static void ReleaseSRWLockShared (@C("PSRWLOCK") Addressable SRWLock) {
        try {
            cfapi_h$constants$25.ReleaseSRWLockShared$MH().invokeExact(SRWLock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AcquireSRWLockExclusive$MH() {
        return cfapi_h$constants$25.AcquireSRWLockExclusive$MH();
    }
    public static void AcquireSRWLockExclusive (@C("PSRWLOCK") Addressable SRWLock) {
        try {
            cfapi_h$constants$25.AcquireSRWLockExclusive$MH().invokeExact(SRWLock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AcquireSRWLockShared$MH() {
        return cfapi_h$constants$25.AcquireSRWLockShared$MH();
    }
    public static void AcquireSRWLockShared (@C("PSRWLOCK") Addressable SRWLock) {
        try {
            cfapi_h$constants$25.AcquireSRWLockShared$MH().invokeExact(SRWLock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TryAcquireSRWLockExclusive$MH() {
        return cfapi_h$constants$25.TryAcquireSRWLockExclusive$MH();
    }
    public static @C("BOOLEAN") byte TryAcquireSRWLockExclusive (@C("PSRWLOCK") Addressable SRWLock) {
        try {
            return (byte)cfapi_h$constants$25.TryAcquireSRWLockExclusive$MH().invokeExact(SRWLock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TryAcquireSRWLockShared$MH() {
        return cfapi_h$constants$25.TryAcquireSRWLockShared$MH();
    }
    public static @C("BOOLEAN") byte TryAcquireSRWLockShared (@C("PSRWLOCK") Addressable SRWLock) {
        try {
            return (byte)cfapi_h$constants$25.TryAcquireSRWLockShared$MH().invokeExact(SRWLock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeCriticalSection$MH() {
        return cfapi_h$constants$25.InitializeCriticalSection$MH();
    }
    public static void InitializeCriticalSection (@C("LPCRITICAL_SECTION") Addressable lpCriticalSection) {
        try {
            cfapi_h$constants$25.InitializeCriticalSection$MH().invokeExact(lpCriticalSection.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnterCriticalSection$MH() {
        return cfapi_h$constants$25.EnterCriticalSection$MH();
    }
    public static void EnterCriticalSection (@C("LPCRITICAL_SECTION") Addressable lpCriticalSection) {
        try {
            cfapi_h$constants$25.EnterCriticalSection$MH().invokeExact(lpCriticalSection.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LeaveCriticalSection$MH() {
        return cfapi_h$constants$25.LeaveCriticalSection$MH();
    }
    public static void LeaveCriticalSection (@C("LPCRITICAL_SECTION") Addressable lpCriticalSection) {
        try {
            cfapi_h$constants$25.LeaveCriticalSection$MH().invokeExact(lpCriticalSection.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeCriticalSectionAndSpinCount$MH() {
        return cfapi_h$constants$25.InitializeCriticalSectionAndSpinCount$MH();
    }
    public static @C("BOOL") int InitializeCriticalSectionAndSpinCount (@C("LPCRITICAL_SECTION") Addressable lpCriticalSection, @C("DWORD") int dwSpinCount) {
        try {
            return (int)cfapi_h$constants$25.InitializeCriticalSectionAndSpinCount$MH().invokeExact(lpCriticalSection.address(), dwSpinCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeCriticalSectionEx$MH() {
        return cfapi_h$constants$25.InitializeCriticalSectionEx$MH();
    }
    public static @C("BOOL") int InitializeCriticalSectionEx (@C("LPCRITICAL_SECTION") Addressable lpCriticalSection, @C("DWORD") int dwSpinCount, @C("DWORD") int Flags) {
        try {
            return (int)cfapi_h$constants$25.InitializeCriticalSectionEx$MH().invokeExact(lpCriticalSection.address(), dwSpinCount, Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCriticalSectionSpinCount$MH() {
        return cfapi_h$constants$25.SetCriticalSectionSpinCount$MH();
    }
    public static @C("DWORD") int SetCriticalSectionSpinCount (@C("LPCRITICAL_SECTION") Addressable lpCriticalSection, @C("DWORD") int dwSpinCount) {
        try {
            return (int)cfapi_h$constants$25.SetCriticalSectionSpinCount$MH().invokeExact(lpCriticalSection.address(), dwSpinCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TryEnterCriticalSection$MH() {
        return cfapi_h$constants$25.TryEnterCriticalSection$MH();
    }
    public static @C("BOOL") int TryEnterCriticalSection (@C("LPCRITICAL_SECTION") Addressable lpCriticalSection) {
        try {
            return (int)cfapi_h$constants$25.TryEnterCriticalSection$MH().invokeExact(lpCriticalSection.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteCriticalSection$MH() {
        return cfapi_h$constants$25.DeleteCriticalSection$MH();
    }
    public static void DeleteCriticalSection (@C("LPCRITICAL_SECTION") Addressable lpCriticalSection) {
        try {
            cfapi_h$constants$25.DeleteCriticalSection$MH().invokeExact(lpCriticalSection.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitOnceInitialize$MH() {
        return cfapi_h$constants$25.InitOnceInitialize$MH();
    }
    public static void InitOnceInitialize (@C("PINIT_ONCE") Addressable InitOnce) {
        try {
            cfapi_h$constants$25.InitOnceInitialize$MH().invokeExact(InitOnce.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitOnceExecuteOnce$MH() {
        return cfapi_h$constants$25.InitOnceExecuteOnce$MH();
    }
    public static @C("BOOL") int InitOnceExecuteOnce (@C("PINIT_ONCE") Addressable InitOnce, @C("PINIT_ONCE_FN") Addressable InitFn, @C("PVOID") Addressable Parameter, @C("LPVOID*") Addressable Context) {
        try {
            return (int)cfapi_h$constants$25.InitOnceExecuteOnce$MH().invokeExact(InitOnce.address(), InitFn.address(), Parameter.address(), Context.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitOnceBeginInitialize$MH() {
        return cfapi_h$constants$25.InitOnceBeginInitialize$MH();
    }
    public static @C("BOOL") int InitOnceBeginInitialize (@C("LPINIT_ONCE") Addressable lpInitOnce, @C("DWORD") int dwFlags, @C("PBOOL") Addressable fPending, @C("LPVOID*") Addressable lpContext) {
        try {
            return (int)cfapi_h$constants$25.InitOnceBeginInitialize$MH().invokeExact(lpInitOnce.address(), dwFlags, fPending.address(), lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitOnceComplete$MH() {
        return cfapi_h$constants$25.InitOnceComplete$MH();
    }
    public static @C("BOOL") int InitOnceComplete (@C("LPINIT_ONCE") Addressable lpInitOnce, @C("DWORD") int dwFlags, @C("LPVOID") Addressable lpContext) {
        try {
            return (int)cfapi_h$constants$25.InitOnceComplete$MH().invokeExact(lpInitOnce.address(), dwFlags, lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeConditionVariable$MH() {
        return cfapi_h$constants$25.InitializeConditionVariable$MH();
    }
    public static void InitializeConditionVariable (@C("PCONDITION_VARIABLE") Addressable ConditionVariable) {
        try {
            cfapi_h$constants$25.InitializeConditionVariable$MH().invokeExact(ConditionVariable.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WakeConditionVariable$MH() {
        return cfapi_h$constants$25.WakeConditionVariable$MH();
    }
    public static void WakeConditionVariable (@C("PCONDITION_VARIABLE") Addressable ConditionVariable) {
        try {
            cfapi_h$constants$25.WakeConditionVariable$MH().invokeExact(ConditionVariable.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WakeAllConditionVariable$MH() {
        return cfapi_h$constants$25.WakeAllConditionVariable$MH();
    }
    public static void WakeAllConditionVariable (@C("PCONDITION_VARIABLE") Addressable ConditionVariable) {
        try {
            cfapi_h$constants$25.WakeAllConditionVariable$MH().invokeExact(ConditionVariable.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SleepConditionVariableCS$MH() {
        return cfapi_h$constants$25.SleepConditionVariableCS$MH();
    }
    public static @C("BOOL") int SleepConditionVariableCS (@C("PCONDITION_VARIABLE") Addressable ConditionVariable, @C("PCRITICAL_SECTION") Addressable CriticalSection, @C("DWORD") int dwMilliseconds) {
        try {
            return (int)cfapi_h$constants$25.SleepConditionVariableCS$MH().invokeExact(ConditionVariable.address(), CriticalSection.address(), dwMilliseconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SleepConditionVariableSRW$MH() {
        return cfapi_h$constants$25.SleepConditionVariableSRW$MH();
    }
    public static @C("BOOL") int SleepConditionVariableSRW (@C("PCONDITION_VARIABLE") Addressable ConditionVariable, @C("PSRWLOCK") Addressable SRWLock, @C("DWORD") int dwMilliseconds, @C("ULONG") int Flags) {
        try {
            return (int)cfapi_h$constants$25.SleepConditionVariableSRW$MH().invokeExact(ConditionVariable.address(), SRWLock.address(), dwMilliseconds, Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEvent$MH() {
        return cfapi_h$constants$25.SetEvent$MH();
    }
    public static @C("BOOL") int SetEvent (@C("HANDLE") Addressable hEvent) {
        try {
            return (int)cfapi_h$constants$25.SetEvent$MH().invokeExact(hEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ResetEvent$MH() {
        return cfapi_h$constants$25.ResetEvent$MH();
    }
    public static @C("BOOL") int ResetEvent (@C("HANDLE") Addressable hEvent) {
        try {
            return (int)cfapi_h$constants$25.ResetEvent$MH().invokeExact(hEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseSemaphore$MH() {
        return cfapi_h$constants$25.ReleaseSemaphore$MH();
    }
    public static @C("BOOL") int ReleaseSemaphore (@C("HANDLE") Addressable hSemaphore, @C("LONG") int lReleaseCount, @C("LPLONG") Addressable lpPreviousCount) {
        try {
            return (int)cfapi_h$constants$25.ReleaseSemaphore$MH().invokeExact(hSemaphore.address(), lReleaseCount, lpPreviousCount.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseMutex$MH() {
        return cfapi_h$constants$25.ReleaseMutex$MH();
    }
    public static @C("BOOL") int ReleaseMutex (@C("HANDLE") Addressable hMutex) {
        try {
            return (int)cfapi_h$constants$25.ReleaseMutex$MH().invokeExact(hMutex.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForSingleObject$MH() {
        return cfapi_h$constants$25.WaitForSingleObject$MH();
    }
    public static @C("DWORD") int WaitForSingleObject (@C("HANDLE") Addressable hHandle, @C("DWORD") int dwMilliseconds) {
        try {
            return (int)cfapi_h$constants$25.WaitForSingleObject$MH().invokeExact(hHandle.address(), dwMilliseconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SleepEx$MH() {
        return cfapi_h$constants$25.SleepEx$MH();
    }
    public static @C("DWORD") int SleepEx (@C("DWORD") int dwMilliseconds, @C("BOOL") int bAlertable) {
        try {
            return (int)cfapi_h$constants$25.SleepEx$MH().invokeExact(dwMilliseconds, bAlertable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForSingleObjectEx$MH() {
        return cfapi_h$constants$25.WaitForSingleObjectEx$MH();
    }
    public static @C("DWORD") int WaitForSingleObjectEx (@C("HANDLE") Addressable hHandle, @C("DWORD") int dwMilliseconds, @C("BOOL") int bAlertable) {
        try {
            return (int)cfapi_h$constants$25.WaitForSingleObjectEx$MH().invokeExact(hHandle.address(), dwMilliseconds, bAlertable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForMultipleObjectsEx$MH() {
        return cfapi_h$constants$25.WaitForMultipleObjectsEx$MH();
    }
    public static @C("DWORD") int WaitForMultipleObjectsEx (@C("DWORD") int nCount, @C("const HANDLE*") Addressable lpHandles, @C("BOOL") int bWaitAll, @C("DWORD") int dwMilliseconds, @C("BOOL") int bAlertable) {
        try {
            return (int)cfapi_h$constants$25.WaitForMultipleObjectsEx$MH().invokeExact(nCount, lpHandles.address(), bWaitAll, dwMilliseconds, bAlertable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMutexA$MH() {
        return cfapi_h$constants$25.CreateMutexA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateMutexA (@C("LPSECURITY_ATTRIBUTES") Addressable lpMutexAttributes, @C("BOOL") int bInitialOwner, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateMutexA$MH().invokeExact(lpMutexAttributes.address(), bInitialOwner, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMutexW$MH() {
        return cfapi_h$constants$25.CreateMutexW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateMutexW (@C("LPSECURITY_ATTRIBUTES") Addressable lpMutexAttributes, @C("BOOL") int bInitialOwner, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateMutexW$MH().invokeExact(lpMutexAttributes.address(), bInitialOwner, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenMutexW$MH() {
        return cfapi_h$constants$25.OpenMutexW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenMutexW (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.OpenMutexW$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateEventA$MH() {
        return cfapi_h$constants$25.CreateEventA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateEventA (@C("LPSECURITY_ATTRIBUTES") Addressable lpEventAttributes, @C("BOOL") int bManualReset, @C("BOOL") int bInitialState, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateEventA$MH().invokeExact(lpEventAttributes.address(), bManualReset, bInitialState, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateEventW$MH() {
        return cfapi_h$constants$25.CreateEventW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateEventW (@C("LPSECURITY_ATTRIBUTES") Addressable lpEventAttributes, @C("BOOL") int bManualReset, @C("BOOL") int bInitialState, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateEventW$MH().invokeExact(lpEventAttributes.address(), bManualReset, bInitialState, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEventA$MH() {
        return cfapi_h$constants$25.OpenEventA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenEventA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.OpenEventA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEventW$MH() {
        return cfapi_h$constants$25.OpenEventW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenEventW (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.OpenEventW$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenSemaphoreW$MH() {
        return cfapi_h$constants$25.OpenSemaphoreW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenSemaphoreW (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.OpenSemaphoreW$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenWaitableTimerW$MH() {
        return cfapi_h$constants$25.OpenWaitableTimerW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenWaitableTimerW (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCWSTR") Addressable lpTimerName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.OpenWaitableTimerW$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpTimerName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWaitableTimerEx$MH() {
        return cfapi_h$constants$25.SetWaitableTimerEx$MH();
    }
    public static @C("BOOL") int SetWaitableTimerEx (@C("HANDLE") Addressable hTimer, @C("const LARGE_INTEGER*") Addressable lpDueTime, @C("LONG") int lPeriod, @C("PTIMERAPCROUTINE") Addressable pfnCompletionRoutine, @C("LPVOID") Addressable lpArgToCompletionRoutine, @C("PREASON_CONTEXT") Addressable WakeContext, @C("ULONG") int TolerableDelay) {
        try {
            return (int)cfapi_h$constants$25.SetWaitableTimerEx$MH().invokeExact(hTimer.address(), lpDueTime.address(), lPeriod, pfnCompletionRoutine.address(), lpArgToCompletionRoutine.address(), WakeContext.address(), TolerableDelay);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWaitableTimer$MH() {
        return cfapi_h$constants$25.SetWaitableTimer$MH();
    }
    public static @C("BOOL") int SetWaitableTimer (@C("HANDLE") Addressable hTimer, @C("const LARGE_INTEGER*") Addressable lpDueTime, @C("LONG") int lPeriod, @C("PTIMERAPCROUTINE") Addressable pfnCompletionRoutine, @C("LPVOID") Addressable lpArgToCompletionRoutine, @C("BOOL") int fResume) {
        try {
            return (int)cfapi_h$constants$25.SetWaitableTimer$MH().invokeExact(hTimer.address(), lpDueTime.address(), lPeriod, pfnCompletionRoutine.address(), lpArgToCompletionRoutine.address(), fResume);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelWaitableTimer$MH() {
        return cfapi_h$constants$25.CancelWaitableTimer$MH();
    }
    public static @C("BOOL") int CancelWaitableTimer (@C("HANDLE") Addressable hTimer) {
        try {
            return (int)cfapi_h$constants$25.CancelWaitableTimer$MH().invokeExact(hTimer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMutexExA$MH() {
        return cfapi_h$constants$25.CreateMutexExA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateMutexExA (@C("LPSECURITY_ATTRIBUTES") Addressable lpMutexAttributes, @C("LPCSTR") Addressable lpName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateMutexExA$MH().invokeExact(lpMutexAttributes.address(), lpName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMutexExW$MH() {
        return cfapi_h$constants$25.CreateMutexExW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateMutexExW (@C("LPSECURITY_ATTRIBUTES") Addressable lpMutexAttributes, @C("LPCWSTR") Addressable lpName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateMutexExW$MH().invokeExact(lpMutexAttributes.address(), lpName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateEventExA$MH() {
        return cfapi_h$constants$25.CreateEventExA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateEventExA (@C("LPSECURITY_ATTRIBUTES") Addressable lpEventAttributes, @C("LPCSTR") Addressable lpName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateEventExA$MH().invokeExact(lpEventAttributes.address(), lpName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateEventExW$MH() {
        return cfapi_h$constants$25.CreateEventExW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateEventExW (@C("LPSECURITY_ATTRIBUTES") Addressable lpEventAttributes, @C("LPCWSTR") Addressable lpName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateEventExW$MH().invokeExact(lpEventAttributes.address(), lpName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSemaphoreExW$MH() {
        return cfapi_h$constants$25.CreateSemaphoreExW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateSemaphoreExW (@C("LPSECURITY_ATTRIBUTES") Addressable lpSemaphoreAttributes, @C("LONG") int lInitialCount, @C("LONG") int lMaximumCount, @C("LPCWSTR") Addressable lpName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateSemaphoreExW$MH().invokeExact(lpSemaphoreAttributes.address(), lInitialCount, lMaximumCount, lpName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWaitableTimerExW$MH() {
        return cfapi_h$constants$25.CreateWaitableTimerExW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateWaitableTimerExW (@C("LPSECURITY_ATTRIBUTES") Addressable lpTimerAttributes, @C("LPCWSTR") Addressable lpTimerName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateWaitableTimerExW$MH().invokeExact(lpTimerAttributes.address(), lpTimerName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnterSynchronizationBarrier$MH() {
        return cfapi_h$constants$25.EnterSynchronizationBarrier$MH();
    }
    public static @C("BOOL") int EnterSynchronizationBarrier (@C("LPSYNCHRONIZATION_BARRIER") Addressable lpBarrier, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$25.EnterSynchronizationBarrier$MH().invokeExact(lpBarrier.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeSynchronizationBarrier$MH() {
        return cfapi_h$constants$25.InitializeSynchronizationBarrier$MH();
    }
    public static @C("BOOL") int InitializeSynchronizationBarrier (@C("LPSYNCHRONIZATION_BARRIER") Addressable lpBarrier, @C("LONG") int lTotalThreads, @C("LONG") int lSpinCount) {
        try {
            return (int)cfapi_h$constants$25.InitializeSynchronizationBarrier$MH().invokeExact(lpBarrier.address(), lTotalThreads, lSpinCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteSynchronizationBarrier$MH() {
        return cfapi_h$constants$25.DeleteSynchronizationBarrier$MH();
    }
    public static @C("BOOL") int DeleteSynchronizationBarrier (@C("LPSYNCHRONIZATION_BARRIER") Addressable lpBarrier) {
        try {
            return (int)cfapi_h$constants$25.DeleteSynchronizationBarrier$MH().invokeExact(lpBarrier.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Sleep$MH() {
        return cfapi_h$constants$25.Sleep$MH();
    }
    public static void Sleep (@C("DWORD") int dwMilliseconds) {
        try {
            cfapi_h$constants$25.Sleep$MH().invokeExact(dwMilliseconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitOnAddress$MH() {
        return cfapi_h$constants$25.WaitOnAddress$MH();
    }
    public static @C("BOOL") int WaitOnAddress (@C("void*") Addressable Address, @C("PVOID") Addressable CompareAddress, @C("SIZE_T") long AddressSize, @C("DWORD") int dwMilliseconds) {
        try {
            return (int)cfapi_h$constants$25.WaitOnAddress$MH().invokeExact(Address.address(), CompareAddress.address(), AddressSize, dwMilliseconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WakeByAddressSingle$MH() {
        return cfapi_h$constants$25.WakeByAddressSingle$MH();
    }
    public static void WakeByAddressSingle (@C("PVOID") Addressable Address) {
        try {
            cfapi_h$constants$25.WakeByAddressSingle$MH().invokeExact(Address.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WakeByAddressAll$MH() {
        return cfapi_h$constants$25.WakeByAddressAll$MH();
    }
    public static void WakeByAddressAll (@C("PVOID") Addressable Address) {
        try {
            cfapi_h$constants$25.WakeByAddressAll$MH().invokeExact(Address.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SignalObjectAndWait$MH() {
        return cfapi_h$constants$25.SignalObjectAndWait$MH();
    }
    public static @C("DWORD") int SignalObjectAndWait (@C("HANDLE") Addressable hObjectToSignal, @C("HANDLE") Addressable hObjectToWaitOn, @C("DWORD") int dwMilliseconds, @C("BOOL") int bAlertable) {
        try {
            return (int)cfapi_h$constants$25.SignalObjectAndWait$MH().invokeExact(hObjectToSignal.address(), hObjectToWaitOn.address(), dwMilliseconds, bAlertable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForMultipleObjects$MH() {
        return cfapi_h$constants$25.WaitForMultipleObjects$MH();
    }
    public static @C("DWORD") int WaitForMultipleObjects (@C("DWORD") int nCount, @C("const HANDLE*") Addressable lpHandles, @C("BOOL") int bWaitAll, @C("DWORD") int dwMilliseconds) {
        try {
            return (int)cfapi_h$constants$25.WaitForMultipleObjects$MH().invokeExact(nCount, lpHandles.address(), bWaitAll, dwMilliseconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSemaphoreW$MH() {
        return cfapi_h$constants$25.CreateSemaphoreW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateSemaphoreW (@C("LPSECURITY_ATTRIBUTES") Addressable lpSemaphoreAttributes, @C("LONG") int lInitialCount, @C("LONG") int lMaximumCount, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateSemaphoreW$MH().invokeExact(lpSemaphoreAttributes.address(), lInitialCount, lMaximumCount, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWaitableTimerW$MH() {
        return cfapi_h$constants$25.CreateWaitableTimerW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateWaitableTimerW (@C("LPSECURITY_ATTRIBUTES") Addressable lpTimerAttributes, @C("BOOL") int bManualReset, @C("LPCWSTR") Addressable lpTimerName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateWaitableTimerW$MH().invokeExact(lpTimerAttributes.address(), bManualReset, lpTimerName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeSListHead$MH() {
        return cfapi_h$constants$25.InitializeSListHead$MH();
    }
    public static void InitializeSListHead (@C("PSLIST_HEADER") Addressable ListHead) {
        try {
            cfapi_h$constants$25.InitializeSListHead$MH().invokeExact(ListHead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InterlockedPopEntrySList$MH() {
        return cfapi_h$constants$25.InterlockedPopEntrySList$MH();
    }
    public static @C("PSLIST_ENTRY") MemoryAddress InterlockedPopEntrySList (@C("PSLIST_HEADER") Addressable ListHead) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.InterlockedPopEntrySList$MH().invokeExact(ListHead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InterlockedPushEntrySList$MH() {
        return cfapi_h$constants$25.InterlockedPushEntrySList$MH();
    }
    public static @C("PSLIST_ENTRY") MemoryAddress InterlockedPushEntrySList (@C("PSLIST_HEADER") Addressable ListHead, @C("PSLIST_ENTRY") Addressable ListEntry) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.InterlockedPushEntrySList$MH().invokeExact(ListHead.address(), ListEntry.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InterlockedPushListSListEx$MH() {
        return cfapi_h$constants$25.InterlockedPushListSListEx$MH();
    }
    public static @C("PSLIST_ENTRY") MemoryAddress InterlockedPushListSListEx (@C("PSLIST_HEADER") Addressable ListHead, @C("PSLIST_ENTRY") Addressable List, @C("PSLIST_ENTRY") Addressable ListEnd, @C("ULONG") int Count) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.InterlockedPushListSListEx$MH().invokeExact(ListHead.address(), List.address(), ListEnd.address(), Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InterlockedFlushSList$MH() {
        return cfapi_h$constants$25.InterlockedFlushSList$MH();
    }
    public static @C("PSLIST_ENTRY") MemoryAddress InterlockedFlushSList (@C("PSLIST_HEADER") Addressable ListHead) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.InterlockedFlushSList$MH().invokeExact(ListHead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryDepthSList$MH() {
        return cfapi_h$constants$25.QueryDepthSList$MH();
    }
    public static @C("USHORT") short QueryDepthSList (@C("PSLIST_HEADER") Addressable ListHead) {
        try {
            return (short)cfapi_h$constants$25.QueryDepthSList$MH().invokeExact(ListHead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueueUserAPC$MH() {
        return cfapi_h$constants$25.QueueUserAPC$MH();
    }
    public static @C("DWORD") int QueueUserAPC (@C("PAPCFUNC") Addressable pfnAPC, @C("HANDLE") Addressable hThread, @C("ULONG_PTR") long dwData) {
        try {
            return (int)cfapi_h$constants$25.QueueUserAPC$MH().invokeExact(pfnAPC.address(), hThread.address(), dwData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessTimes$MH() {
        return cfapi_h$constants$25.GetProcessTimes$MH();
    }
    public static @C("BOOL") int GetProcessTimes (@C("HANDLE") Addressable hProcess, @C("LPFILETIME") Addressable lpCreationTime, @C("LPFILETIME") Addressable lpExitTime, @C("LPFILETIME") Addressable lpKernelTime, @C("LPFILETIME") Addressable lpUserTime) {
        try {
            return (int)cfapi_h$constants$25.GetProcessTimes$MH().invokeExact(hProcess.address(), lpCreationTime.address(), lpExitTime.address(), lpKernelTime.address(), lpUserTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentProcess$MH() {
        return cfapi_h$constants$25.GetCurrentProcess$MH();
    }
    public static @C("HANDLE") MemoryAddress GetCurrentProcess () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.GetCurrentProcess$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentProcessId$MH() {
        return cfapi_h$constants$25.GetCurrentProcessId$MH();
    }
    public static @C("DWORD") int GetCurrentProcessId () {
        try {
            return (int)cfapi_h$constants$25.GetCurrentProcessId$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExitProcess$MH() {
        return cfapi_h$constants$25.ExitProcess$MH();
    }
    public static void ExitProcess (@C("UINT") int uExitCode) {
        try {
            cfapi_h$constants$25.ExitProcess$MH().invokeExact(uExitCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TerminateProcess$MH() {
        return cfapi_h$constants$25.TerminateProcess$MH();
    }
    public static @C("BOOL") int TerminateProcess (@C("HANDLE") Addressable hProcess, @C("UINT") int uExitCode) {
        try {
            return (int)cfapi_h$constants$25.TerminateProcess$MH().invokeExact(hProcess.address(), uExitCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetExitCodeProcess$MH() {
        return cfapi_h$constants$25.GetExitCodeProcess$MH();
    }
    public static @C("BOOL") int GetExitCodeProcess (@C("HANDLE") Addressable hProcess, @C("LPDWORD") Addressable lpExitCode) {
        try {
            return (int)cfapi_h$constants$25.GetExitCodeProcess$MH().invokeExact(hProcess.address(), lpExitCode.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SwitchToThread$MH() {
        return cfapi_h$constants$25.SwitchToThread$MH();
    }
    public static @C("BOOL") int SwitchToThread () {
        try {
            return (int)cfapi_h$constants$25.SwitchToThread$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateThread$MH() {
        return cfapi_h$constants$25.CreateThread$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateThread (@C("LPSECURITY_ATTRIBUTES") Addressable lpThreadAttributes, @C("SIZE_T") long dwStackSize, @C("LPTHREAD_START_ROUTINE") Addressable lpStartAddress, @C("LPVOID") Addressable lpParameter, @C("DWORD") int dwCreationFlags, @C("LPDWORD") Addressable lpThreadId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateThread$MH().invokeExact(lpThreadAttributes.address(), dwStackSize, lpStartAddress.address(), lpParameter.address(), dwCreationFlags, lpThreadId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateRemoteThread$MH() {
        return cfapi_h$constants$25.CreateRemoteThread$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateRemoteThread (@C("HANDLE") Addressable hProcess, @C("LPSECURITY_ATTRIBUTES") Addressable lpThreadAttributes, @C("SIZE_T") long dwStackSize, @C("LPTHREAD_START_ROUTINE") Addressable lpStartAddress, @C("LPVOID") Addressable lpParameter, @C("DWORD") int dwCreationFlags, @C("LPDWORD") Addressable lpThreadId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateRemoteThread$MH().invokeExact(hProcess.address(), lpThreadAttributes.address(), dwStackSize, lpStartAddress.address(), lpParameter.address(), dwCreationFlags, lpThreadId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentThread$MH() {
        return cfapi_h$constants$25.GetCurrentThread$MH();
    }
    public static @C("HANDLE") MemoryAddress GetCurrentThread () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.GetCurrentThread$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentThreadId$MH() {
        return cfapi_h$constants$25.GetCurrentThreadId$MH();
    }
    public static @C("DWORD") int GetCurrentThreadId () {
        try {
            return (int)cfapi_h$constants$25.GetCurrentThreadId$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenThread$MH() {
        return cfapi_h$constants$25.OpenThread$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenThread (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("DWORD") int dwThreadId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.OpenThread$MH().invokeExact(dwDesiredAccess, bInheritHandle, dwThreadId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadPriority$MH() {
        return cfapi_h$constants$25.SetThreadPriority$MH();
    }
    public static @C("BOOL") int SetThreadPriority (@C("HANDLE") Addressable hThread, @C("int") int nPriority) {
        try {
            return (int)cfapi_h$constants$25.SetThreadPriority$MH().invokeExact(hThread.address(), nPriority);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadPriorityBoost$MH() {
        return cfapi_h$constants$25.SetThreadPriorityBoost$MH();
    }
    public static @C("BOOL") int SetThreadPriorityBoost (@C("HANDLE") Addressable hThread, @C("BOOL") int bDisablePriorityBoost) {
        try {
            return (int)cfapi_h$constants$25.SetThreadPriorityBoost$MH().invokeExact(hThread.address(), bDisablePriorityBoost);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadPriorityBoost$MH() {
        return cfapi_h$constants$25.GetThreadPriorityBoost$MH();
    }
    public static @C("BOOL") int GetThreadPriorityBoost (@C("HANDLE") Addressable hThread, @C("PBOOL") Addressable pDisablePriorityBoost) {
        try {
            return (int)cfapi_h$constants$25.GetThreadPriorityBoost$MH().invokeExact(hThread.address(), pDisablePriorityBoost.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadPriority$MH() {
        return cfapi_h$constants$25.GetThreadPriority$MH();
    }
    public static @C("int") int GetThreadPriority (@C("HANDLE") Addressable hThread) {
        try {
            return (int)cfapi_h$constants$25.GetThreadPriority$MH().invokeExact(hThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExitThread$MH() {
        return cfapi_h$constants$25.ExitThread$MH();
    }
    public static void ExitThread (@C("DWORD") int dwExitCode) {
        try {
            cfapi_h$constants$25.ExitThread$MH().invokeExact(dwExitCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TerminateThread$MH() {
        return cfapi_h$constants$25.TerminateThread$MH();
    }
    public static @C("BOOL") int TerminateThread (@C("HANDLE") Addressable hThread, @C("DWORD") int dwExitCode) {
        try {
            return (int)cfapi_h$constants$25.TerminateThread$MH().invokeExact(hThread.address(), dwExitCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetExitCodeThread$MH() {
        return cfapi_h$constants$25.GetExitCodeThread$MH();
    }
    public static @C("BOOL") int GetExitCodeThread (@C("HANDLE") Addressable hThread, @C("LPDWORD") Addressable lpExitCode) {
        try {
            return (int)cfapi_h$constants$25.GetExitCodeThread$MH().invokeExact(hThread.address(), lpExitCode.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SuspendThread$MH() {
        return cfapi_h$constants$25.SuspendThread$MH();
    }
    public static @C("DWORD") int SuspendThread (@C("HANDLE") Addressable hThread) {
        try {
            return (int)cfapi_h$constants$25.SuspendThread$MH().invokeExact(hThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ResumeThread$MH() {
        return cfapi_h$constants$25.ResumeThread$MH();
    }
    public static @C("DWORD") int ResumeThread (@C("HANDLE") Addressable hThread) {
        try {
            return (int)cfapi_h$constants$25.ResumeThread$MH().invokeExact(hThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TlsAlloc$MH() {
        return cfapi_h$constants$25.TlsAlloc$MH();
    }
    public static @C("DWORD") int TlsAlloc () {
        try {
            return (int)cfapi_h$constants$25.TlsAlloc$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TlsGetValue$MH() {
        return cfapi_h$constants$25.TlsGetValue$MH();
    }
    public static @C("LPVOID") MemoryAddress TlsGetValue (@C("DWORD") int dwTlsIndex) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.TlsGetValue$MH().invokeExact(dwTlsIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TlsSetValue$MH() {
        return cfapi_h$constants$25.TlsSetValue$MH();
    }
    public static @C("BOOL") int TlsSetValue (@C("DWORD") int dwTlsIndex, @C("LPVOID") Addressable lpTlsValue) {
        try {
            return (int)cfapi_h$constants$25.TlsSetValue$MH().invokeExact(dwTlsIndex, lpTlsValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TlsFree$MH() {
        return cfapi_h$constants$25.TlsFree$MH();
    }
    public static @C("BOOL") int TlsFree (@C("DWORD") int dwTlsIndex) {
        try {
            return (int)cfapi_h$constants$25.TlsFree$MH().invokeExact(dwTlsIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateProcessA$MH() {
        return cfapi_h$constants$25.CreateProcessA$MH();
    }
    public static @C("BOOL") int CreateProcessA (@C("LPCSTR") Addressable lpApplicationName, @C("LPSTR") Addressable lpCommandLine, @C("LPSECURITY_ATTRIBUTES") Addressable lpProcessAttributes, @C("LPSECURITY_ATTRIBUTES") Addressable lpThreadAttributes, @C("BOOL") int bInheritHandles, @C("DWORD") int dwCreationFlags, @C("LPVOID") Addressable lpEnvironment, @C("LPCSTR") Addressable lpCurrentDirectory, @C("LPSTARTUPINFOA") Addressable lpStartupInfo, @C("LPPROCESS_INFORMATION") Addressable lpProcessInformation) {
        try {
            return (int)cfapi_h$constants$25.CreateProcessA$MH().invokeExact(lpApplicationName.address(), lpCommandLine.address(), lpProcessAttributes.address(), lpThreadAttributes.address(), bInheritHandles, dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateProcessW$MH() {
        return cfapi_h$constants$25.CreateProcessW$MH();
    }
    public static @C("BOOL") int CreateProcessW (@C("LPCWSTR") Addressable lpApplicationName, @C("LPWSTR") Addressable lpCommandLine, @C("LPSECURITY_ATTRIBUTES") Addressable lpProcessAttributes, @C("LPSECURITY_ATTRIBUTES") Addressable lpThreadAttributes, @C("BOOL") int bInheritHandles, @C("DWORD") int dwCreationFlags, @C("LPVOID") Addressable lpEnvironment, @C("LPCWSTR") Addressable lpCurrentDirectory, @C("LPSTARTUPINFOW") Addressable lpStartupInfo, @C("LPPROCESS_INFORMATION") Addressable lpProcessInformation) {
        try {
            return (int)cfapi_h$constants$25.CreateProcessW$MH().invokeExact(lpApplicationName.address(), lpCommandLine.address(), lpProcessAttributes.address(), lpThreadAttributes.address(), bInheritHandles, dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessShutdownParameters$MH() {
        return cfapi_h$constants$25.SetProcessShutdownParameters$MH();
    }
    public static @C("BOOL") int SetProcessShutdownParameters (@C("DWORD") int dwLevel, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$25.SetProcessShutdownParameters$MH().invokeExact(dwLevel, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessVersion$MH() {
        return cfapi_h$constants$25.GetProcessVersion$MH();
    }
    public static @C("DWORD") int GetProcessVersion (@C("DWORD") int ProcessId) {
        try {
            return (int)cfapi_h$constants$25.GetProcessVersion$MH().invokeExact(ProcessId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetStartupInfoW$MH() {
        return cfapi_h$constants$25.GetStartupInfoW$MH();
    }
    public static void GetStartupInfoW (@C("LPSTARTUPINFOW") Addressable lpStartupInfo) {
        try {
            cfapi_h$constants$25.GetStartupInfoW$MH().invokeExact(lpStartupInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateProcessAsUserW$MH() {
        return cfapi_h$constants$25.CreateProcessAsUserW$MH();
    }
    public static @C("BOOL") int CreateProcessAsUserW (@C("HANDLE") Addressable hToken, @C("LPCWSTR") Addressable lpApplicationName, @C("LPWSTR") Addressable lpCommandLine, @C("LPSECURITY_ATTRIBUTES") Addressable lpProcessAttributes, @C("LPSECURITY_ATTRIBUTES") Addressable lpThreadAttributes, @C("BOOL") int bInheritHandles, @C("DWORD") int dwCreationFlags, @C("LPVOID") Addressable lpEnvironment, @C("LPCWSTR") Addressable lpCurrentDirectory, @C("LPSTARTUPINFOW") Addressable lpStartupInfo, @C("LPPROCESS_INFORMATION") Addressable lpProcessInformation) {
        try {
            return (int)cfapi_h$constants$25.CreateProcessAsUserW$MH().invokeExact(hToken.address(), lpApplicationName.address(), lpCommandLine.address(), lpProcessAttributes.address(), lpThreadAttributes.address(), bInheritHandles, dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentProcessToken$MH() {
        return cfapi_h$constants$25.GetCurrentProcessToken$MH();
    }
    public static @C("HANDLE") MemoryAddress GetCurrentProcessToken () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.GetCurrentProcessToken$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentThreadToken$MH() {
        return cfapi_h$constants$25.GetCurrentThreadToken$MH();
    }
    public static @C("HANDLE") MemoryAddress GetCurrentThreadToken () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.GetCurrentThreadToken$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentThreadEffectiveToken$MH() {
        return cfapi_h$constants$25.GetCurrentThreadEffectiveToken$MH();
    }
    public static @C("HANDLE") MemoryAddress GetCurrentThreadEffectiveToken () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.GetCurrentThreadEffectiveToken$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadToken$MH() {
        return cfapi_h$constants$25.SetThreadToken$MH();
    }
    public static @C("BOOL") int SetThreadToken (@C("PHANDLE") Addressable Thread, @C("HANDLE") Addressable Token) {
        try {
            return (int)cfapi_h$constants$25.SetThreadToken$MH().invokeExact(Thread.address(), Token.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenProcessToken$MH() {
        return cfapi_h$constants$25.OpenProcessToken$MH();
    }
    public static @C("BOOL") int OpenProcessToken (@C("HANDLE") Addressable ProcessHandle, @C("DWORD") int DesiredAccess, @C("PHANDLE") Addressable TokenHandle) {
        try {
            return (int)cfapi_h$constants$25.OpenProcessToken$MH().invokeExact(ProcessHandle.address(), DesiredAccess, TokenHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenThreadToken$MH() {
        return cfapi_h$constants$25.OpenThreadToken$MH();
    }
    public static @C("BOOL") int OpenThreadToken (@C("HANDLE") Addressable ThreadHandle, @C("DWORD") int DesiredAccess, @C("BOOL") int OpenAsSelf, @C("PHANDLE") Addressable TokenHandle) {
        try {
            return (int)cfapi_h$constants$25.OpenThreadToken$MH().invokeExact(ThreadHandle.address(), DesiredAccess, OpenAsSelf, TokenHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPriorityClass$MH() {
        return cfapi_h$constants$25.SetPriorityClass$MH();
    }
    public static @C("BOOL") int SetPriorityClass (@C("HANDLE") Addressable hProcess, @C("DWORD") int dwPriorityClass) {
        try {
            return (int)cfapi_h$constants$25.SetPriorityClass$MH().invokeExact(hProcess.address(), dwPriorityClass);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPriorityClass$MH() {
        return cfapi_h$constants$25.GetPriorityClass$MH();
    }
    public static @C("DWORD") int GetPriorityClass (@C("HANDLE") Addressable hProcess) {
        try {
            return (int)cfapi_h$constants$25.GetPriorityClass$MH().invokeExact(hProcess.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadStackGuarantee$MH() {
        return cfapi_h$constants$25.SetThreadStackGuarantee$MH();
    }
    public static @C("BOOL") int SetThreadStackGuarantee (@C("PULONG") Addressable StackSizeInBytes) {
        try {
            return (int)cfapi_h$constants$25.SetThreadStackGuarantee$MH().invokeExact(StackSizeInBytes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ProcessIdToSessionId$MH() {
        return cfapi_h$constants$25.ProcessIdToSessionId$MH();
    }
    public static @C("BOOL") int ProcessIdToSessionId (@C("DWORD") int dwProcessId, @C("DWORD*") Addressable pSessionId) {
        try {
            return (int)cfapi_h$constants$25.ProcessIdToSessionId$MH().invokeExact(dwProcessId, pSessionId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessId$MH() {
        return cfapi_h$constants$25.GetProcessId$MH();
    }
    public static @C("DWORD") int GetProcessId (@C("HANDLE") Addressable Process) {
        try {
            return (int)cfapi_h$constants$25.GetProcessId$MH().invokeExact(Process.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadId$MH() {
        return cfapi_h$constants$25.GetThreadId$MH();
    }
    public static @C("DWORD") int GetThreadId (@C("HANDLE") Addressable Thread) {
        try {
            return (int)cfapi_h$constants$25.GetThreadId$MH().invokeExact(Thread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlushProcessWriteBuffers$MH() {
        return cfapi_h$constants$25.FlushProcessWriteBuffers$MH();
    }
    public static void FlushProcessWriteBuffers () {
        try {
            cfapi_h$constants$25.FlushProcessWriteBuffers$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessIdOfThread$MH() {
        return cfapi_h$constants$25.GetProcessIdOfThread$MH();
    }
    public static @C("DWORD") int GetProcessIdOfThread (@C("HANDLE") Addressable Thread) {
        try {
            return (int)cfapi_h$constants$25.GetProcessIdOfThread$MH().invokeExact(Thread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeProcThreadAttributeList$MH() {
        return cfapi_h$constants$25.InitializeProcThreadAttributeList$MH();
    }
    public static @C("BOOL") int InitializeProcThreadAttributeList (@C("LPPROC_THREAD_ATTRIBUTE_LIST") Addressable lpAttributeList, @C("DWORD") int dwAttributeCount, @C("DWORD") int dwFlags, @C("PSIZE_T") Addressable lpSize) {
        try {
            return (int)cfapi_h$constants$25.InitializeProcThreadAttributeList$MH().invokeExact(lpAttributeList.address(), dwAttributeCount, dwFlags, lpSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteProcThreadAttributeList$MH() {
        return cfapi_h$constants$25.DeleteProcThreadAttributeList$MH();
    }
    public static void DeleteProcThreadAttributeList (@C("LPPROC_THREAD_ATTRIBUTE_LIST") Addressable lpAttributeList) {
        try {
            cfapi_h$constants$25.DeleteProcThreadAttributeList$MH().invokeExact(lpAttributeList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateProcThreadAttribute$MH() {
        return cfapi_h$constants$25.UpdateProcThreadAttribute$MH();
    }
    public static @C("BOOL") int UpdateProcThreadAttribute (@C("LPPROC_THREAD_ATTRIBUTE_LIST") Addressable lpAttributeList, @C("DWORD") int dwFlags, @C("DWORD_PTR") long Attribute, @C("PVOID") Addressable lpValue, @C("SIZE_T") long cbSize, @C("PVOID") Addressable lpPreviousValue, @C("PSIZE_T") Addressable lpReturnSize) {
        try {
            return (int)cfapi_h$constants$25.UpdateProcThreadAttribute$MH().invokeExact(lpAttributeList.address(), dwFlags, Attribute, lpValue.address(), cbSize, lpPreviousValue.address(), lpReturnSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessDynamicEHContinuationTargets$MH() {
        return cfapi_h$constants$25.SetProcessDynamicEHContinuationTargets$MH();
    }
    public static @C("BOOL") int SetProcessDynamicEHContinuationTargets (@C("HANDLE") Addressable Process, @C("USHORT") short NumberOfTargets, @C("PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET") Addressable Targets) {
        try {
            return (int)cfapi_h$constants$25.SetProcessDynamicEHContinuationTargets$MH().invokeExact(Process.address(), NumberOfTargets, Targets.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessAffinityUpdateMode$MH() {
        return cfapi_h$constants$25.SetProcessAffinityUpdateMode$MH();
    }
    public static @C("BOOL") int SetProcessAffinityUpdateMode (@C("HANDLE") Addressable hProcess, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$25.SetProcessAffinityUpdateMode$MH().invokeExact(hProcess.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryProcessAffinityUpdateMode$MH() {
        return cfapi_h$constants$25.QueryProcessAffinityUpdateMode$MH();
    }
    public static @C("BOOL") int QueryProcessAffinityUpdateMode (@C("HANDLE") Addressable hProcess, @C("LPDWORD") Addressable lpdwFlags) {
        try {
            return (int)cfapi_h$constants$25.QueryProcessAffinityUpdateMode$MH().invokeExact(hProcess.address(), lpdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateRemoteThreadEx$MH() {
        return cfapi_h$constants$25.CreateRemoteThreadEx$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateRemoteThreadEx (@C("HANDLE") Addressable hProcess, @C("LPSECURITY_ATTRIBUTES") Addressable lpThreadAttributes, @C("SIZE_T") long dwStackSize, @C("LPTHREAD_START_ROUTINE") Addressable lpStartAddress, @C("LPVOID") Addressable lpParameter, @C("DWORD") int dwCreationFlags, @C("LPPROC_THREAD_ATTRIBUTE_LIST") Addressable lpAttributeList, @C("LPDWORD") Addressable lpThreadId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateRemoteThreadEx$MH().invokeExact(hProcess.address(), lpThreadAttributes.address(), dwStackSize, lpStartAddress.address(), lpParameter.address(), dwCreationFlags, lpAttributeList.address(), lpThreadId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentThreadStackLimits$MH() {
        return cfapi_h$constants$25.GetCurrentThreadStackLimits$MH();
    }
    public static void GetCurrentThreadStackLimits (@C("PULONG_PTR") Addressable LowLimit, @C("PULONG_PTR") Addressable HighLimit) {
        try {
            cfapi_h$constants$25.GetCurrentThreadStackLimits$MH().invokeExact(LowLimit.address(), HighLimit.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadContext$MH() {
        return cfapi_h$constants$25.GetThreadContext$MH();
    }
    public static @C("BOOL") int GetThreadContext (@C("HANDLE") Addressable hThread, @C("LPCONTEXT") Addressable lpContext) {
        try {
            return (int)cfapi_h$constants$25.GetThreadContext$MH().invokeExact(hThread.address(), lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessMitigationPolicy$MH() {
        return cfapi_h$constants$25.GetProcessMitigationPolicy$MH();
    }
    public static @C("BOOL") int GetProcessMitigationPolicy (@C("HANDLE") Addressable hProcess, @C("PROCESS_MITIGATION_POLICY") int MitigationPolicy, @C("PVOID") Addressable lpBuffer, @C("SIZE_T") long dwLength) {
        try {
            return (int)cfapi_h$constants$25.GetProcessMitigationPolicy$MH().invokeExact(hProcess.address(), MitigationPolicy, lpBuffer.address(), dwLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadContext$MH() {
        return cfapi_h$constants$25.SetThreadContext$MH();
    }
    public static @C("BOOL") int SetThreadContext (@C("HANDLE") Addressable hThread, @C("const CONTEXT*") Addressable lpContext) {
        try {
            return (int)cfapi_h$constants$25.SetThreadContext$MH().invokeExact(hThread.address(), lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessMitigationPolicy$MH() {
        return cfapi_h$constants$25.SetProcessMitigationPolicy$MH();
    }
    public static @C("BOOL") int SetProcessMitigationPolicy (@C("PROCESS_MITIGATION_POLICY") int MitigationPolicy, @C("PVOID") Addressable lpBuffer, @C("SIZE_T") long dwLength) {
        try {
            return (int)cfapi_h$constants$25.SetProcessMitigationPolicy$MH().invokeExact(MitigationPolicy, lpBuffer.address(), dwLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlushInstructionCache$MH() {
        return cfapi_h$constants$25.FlushInstructionCache$MH();
    }
    public static @C("BOOL") int FlushInstructionCache (@C("HANDLE") Addressable hProcess, @C("LPCVOID") Addressable lpBaseAddress, @C("SIZE_T") long dwSize) {
        try {
            return (int)cfapi_h$constants$25.FlushInstructionCache$MH().invokeExact(hProcess.address(), lpBaseAddress.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadTimes$MH() {
        return cfapi_h$constants$25.GetThreadTimes$MH();
    }
    public static @C("BOOL") int GetThreadTimes (@C("HANDLE") Addressable hThread, @C("LPFILETIME") Addressable lpCreationTime, @C("LPFILETIME") Addressable lpExitTime, @C("LPFILETIME") Addressable lpKernelTime, @C("LPFILETIME") Addressable lpUserTime) {
        try {
            return (int)cfapi_h$constants$25.GetThreadTimes$MH().invokeExact(hThread.address(), lpCreationTime.address(), lpExitTime.address(), lpKernelTime.address(), lpUserTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenProcess$MH() {
        return cfapi_h$constants$25.OpenProcess$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenProcess (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("DWORD") int dwProcessId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.OpenProcess$MH().invokeExact(dwDesiredAccess, bInheritHandle, dwProcessId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsProcessorFeaturePresent$MH() {
        return cfapi_h$constants$25.IsProcessorFeaturePresent$MH();
    }
    public static @C("BOOL") int IsProcessorFeaturePresent (@C("DWORD") int ProcessorFeature) {
        try {
            return (int)cfapi_h$constants$25.IsProcessorFeaturePresent$MH().invokeExact(ProcessorFeature);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessHandleCount$MH() {
        return cfapi_h$constants$25.GetProcessHandleCount$MH();
    }
    public static @C("BOOL") int GetProcessHandleCount (@C("HANDLE") Addressable hProcess, @C("PDWORD") Addressable pdwHandleCount) {
        try {
            return (int)cfapi_h$constants$25.GetProcessHandleCount$MH().invokeExact(hProcess.address(), pdwHandleCount.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentProcessorNumber$MH() {
        return cfapi_h$constants$25.GetCurrentProcessorNumber$MH();
    }
    public static @C("DWORD") int GetCurrentProcessorNumber () {
        try {
            return (int)cfapi_h$constants$25.GetCurrentProcessorNumber$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadIdealProcessorEx$MH() {
        return cfapi_h$constants$25.SetThreadIdealProcessorEx$MH();
    }
    public static @C("BOOL") int SetThreadIdealProcessorEx (@C("HANDLE") Addressable hThread, @C("PPROCESSOR_NUMBER") Addressable lpIdealProcessor, @C("PPROCESSOR_NUMBER") Addressable lpPreviousIdealProcessor) {
        try {
            return (int)cfapi_h$constants$25.SetThreadIdealProcessorEx$MH().invokeExact(hThread.address(), lpIdealProcessor.address(), lpPreviousIdealProcessor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadIdealProcessorEx$MH() {
        return cfapi_h$constants$25.GetThreadIdealProcessorEx$MH();
    }
    public static @C("BOOL") int GetThreadIdealProcessorEx (@C("HANDLE") Addressable hThread, @C("PPROCESSOR_NUMBER") Addressable lpIdealProcessor) {
        try {
            return (int)cfapi_h$constants$25.GetThreadIdealProcessorEx$MH().invokeExact(hThread.address(), lpIdealProcessor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentProcessorNumberEx$MH() {
        return cfapi_h$constants$25.GetCurrentProcessorNumberEx$MH();
    }
    public static void GetCurrentProcessorNumberEx (@C("PPROCESSOR_NUMBER") Addressable ProcNumber) {
        try {
            cfapi_h$constants$25.GetCurrentProcessorNumberEx$MH().invokeExact(ProcNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessPriorityBoost$MH() {
        return cfapi_h$constants$25.GetProcessPriorityBoost$MH();
    }
    public static @C("BOOL") int GetProcessPriorityBoost (@C("HANDLE") Addressable hProcess, @C("PBOOL") Addressable pDisablePriorityBoost) {
        try {
            return (int)cfapi_h$constants$25.GetProcessPriorityBoost$MH().invokeExact(hProcess.address(), pDisablePriorityBoost.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessPriorityBoost$MH() {
        return cfapi_h$constants$25.SetProcessPriorityBoost$MH();
    }
    public static @C("BOOL") int SetProcessPriorityBoost (@C("HANDLE") Addressable hProcess, @C("BOOL") int bDisablePriorityBoost) {
        try {
            return (int)cfapi_h$constants$25.SetProcessPriorityBoost$MH().invokeExact(hProcess.address(), bDisablePriorityBoost);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadIOPendingFlag$MH() {
        return cfapi_h$constants$25.GetThreadIOPendingFlag$MH();
    }
    public static @C("BOOL") int GetThreadIOPendingFlag (@C("HANDLE") Addressable hThread, @C("PBOOL") Addressable lpIOIsPending) {
        try {
            return (int)cfapi_h$constants$25.GetThreadIOPendingFlag$MH().invokeExact(hThread.address(), lpIOIsPending.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemTimes$MH() {
        return cfapi_h$constants$25.GetSystemTimes$MH();
    }
    public static @C("BOOL") int GetSystemTimes (@C("PFILETIME") Addressable lpIdleTime, @C("PFILETIME") Addressable lpKernelTime, @C("PFILETIME") Addressable lpUserTime) {
        try {
            return (int)cfapi_h$constants$25.GetSystemTimes$MH().invokeExact(lpIdleTime.address(), lpKernelTime.address(), lpUserTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int ThreadMemoryPriority() {
        return cfapi_h$constants$25.ThreadMemoryPriority();
    }
    public static @C("int") int ThreadAbsoluteCpuPriority() {
        return cfapi_h$constants$25.ThreadAbsoluteCpuPriority();
    }
    public static @C("int") int ThreadDynamicCodePolicy() {
        return cfapi_h$constants$25.ThreadDynamicCodePolicy();
    }
    public static @C("int") int ThreadPowerThrottling() {
        return cfapi_h$constants$25.ThreadPowerThrottling();
    }
    public static @C("int") int ThreadInformationClassMax() {
        return cfapi_h$constants$25.ThreadInformationClassMax();
    }
    public static  MethodHandle GetThreadInformation$MH() {
        return cfapi_h$constants$25.GetThreadInformation$MH();
    }
    public static @C("BOOL") int GetThreadInformation (@C("HANDLE") Addressable hThread, @C("THREAD_INFORMATION_CLASS") int ThreadInformationClass, @C("LPVOID") Addressable ThreadInformation, @C("DWORD") int ThreadInformationSize) {
        try {
            return (int)cfapi_h$constants$25.GetThreadInformation$MH().invokeExact(hThread.address(), ThreadInformationClass, ThreadInformation.address(), ThreadInformationSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadInformation$MH() {
        return cfapi_h$constants$25.SetThreadInformation$MH();
    }
    public static @C("BOOL") int SetThreadInformation (@C("HANDLE") Addressable hThread, @C("THREAD_INFORMATION_CLASS") int ThreadInformationClass, @C("LPVOID") Addressable ThreadInformation, @C("DWORD") int ThreadInformationSize) {
        try {
            return (int)cfapi_h$constants$25.SetThreadInformation$MH().invokeExact(hThread.address(), ThreadInformationClass, ThreadInformation.address(), ThreadInformationSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsProcessCritical$MH() {
        return cfapi_h$constants$25.IsProcessCritical$MH();
    }
    public static @C("BOOL") int IsProcessCritical (@C("HANDLE") Addressable hProcess, @C("PBOOL") Addressable Critical) {
        try {
            return (int)cfapi_h$constants$25.IsProcessCritical$MH().invokeExact(hProcess.address(), Critical.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProtectedPolicy$MH() {
        return cfapi_h$constants$25.SetProtectedPolicy$MH();
    }
    public static @C("BOOL") int SetProtectedPolicy (@C("LPCGUID") Addressable PolicyGuid, @C("ULONG_PTR") long PolicyValue, @C("PULONG_PTR") Addressable OldPolicyValue) {
        try {
            return (int)cfapi_h$constants$25.SetProtectedPolicy$MH().invokeExact(PolicyGuid.address(), PolicyValue, OldPolicyValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryProtectedPolicy$MH() {
        return cfapi_h$constants$25.QueryProtectedPolicy$MH();
    }
    public static @C("BOOL") int QueryProtectedPolicy (@C("LPCGUID") Addressable PolicyGuid, @C("PULONG_PTR") Addressable PolicyValue) {
        try {
            return (int)cfapi_h$constants$25.QueryProtectedPolicy$MH().invokeExact(PolicyGuid.address(), PolicyValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadIdealProcessor$MH() {
        return cfapi_h$constants$25.SetThreadIdealProcessor$MH();
    }
    public static @C("DWORD") int SetThreadIdealProcessor (@C("HANDLE") Addressable hThread, @C("DWORD") int dwIdealProcessor) {
        try {
            return (int)cfapi_h$constants$25.SetThreadIdealProcessor$MH().invokeExact(hThread.address(), dwIdealProcessor);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int ProcessMemoryPriority() {
        return cfapi_h$constants$25.ProcessMemoryPriority();
    }
    public static @C("int") int ProcessMemoryExhaustionInfo() {
        return cfapi_h$constants$25.ProcessMemoryExhaustionInfo();
    }
    public static @C("int") int ProcessAppMemoryInfo() {
        return cfapi_h$constants$25.ProcessAppMemoryInfo();
    }
    public static @C("int") int ProcessInPrivateInfo() {
        return cfapi_h$constants$25.ProcessInPrivateInfo();
    }
    public static @C("int") int ProcessPowerThrottling() {
        return cfapi_h$constants$25.ProcessPowerThrottling();
    }
    public static @C("int") int ProcessReservedValue1() {
        return cfapi_h$constants$25.ProcessReservedValue1();
    }
    public static @C("int") int ProcessTelemetryCoverageInfo() {
        return cfapi_h$constants$25.ProcessTelemetryCoverageInfo();
    }
    public static @C("int") int ProcessProtectionLevelInfo() {
        return cfapi_h$constants$25.ProcessProtectionLevelInfo();
    }
    public static @C("int") int ProcessLeapSecondInfo() {
        return cfapi_h$constants$25.ProcessLeapSecondInfo();
    }
    public static @C("int") int ProcessInformationClassMax() {
        return cfapi_h$constants$25.ProcessInformationClassMax();
    }
    public static @C("int") int PMETypeFailFastOnCommitFailure() {
        return cfapi_h$constants$25.PMETypeFailFastOnCommitFailure();
    }
    public static @C("int") int PMETypeMax() {
        return cfapi_h$constants$25.PMETypeMax();
    }
    public static  MethodHandle SetProcessInformation$MH() {
        return cfapi_h$constants$25.SetProcessInformation$MH();
    }
    public static @C("BOOL") int SetProcessInformation (@C("HANDLE") Addressable hProcess, @C("PROCESS_INFORMATION_CLASS") int ProcessInformationClass, @C("LPVOID") Addressable ProcessInformation, @C("DWORD") int ProcessInformationSize) {
        try {
            return (int)cfapi_h$constants$25.SetProcessInformation$MH().invokeExact(hProcess.address(), ProcessInformationClass, ProcessInformation.address(), ProcessInformationSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessInformation$MH() {
        return cfapi_h$constants$25.GetProcessInformation$MH();
    }
    public static @C("BOOL") int GetProcessInformation (@C("HANDLE") Addressable hProcess, @C("PROCESS_INFORMATION_CLASS") int ProcessInformationClass, @C("LPVOID") Addressable ProcessInformation, @C("DWORD") int ProcessInformationSize) {
        try {
            return (int)cfapi_h$constants$25.GetProcessInformation$MH().invokeExact(hProcess.address(), ProcessInformationClass, ProcessInformation.address(), ProcessInformationSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemCpuSetInformation$MH() {
        return cfapi_h$constants$25.GetSystemCpuSetInformation$MH();
    }
    public static @C("BOOL") int GetSystemCpuSetInformation (@C("PSYSTEM_CPU_SET_INFORMATION") Addressable Information, @C("ULONG") int BufferLength, @C("PULONG") Addressable ReturnedLength, @C("HANDLE") Addressable Process, @C("ULONG") int Flags) {
        try {
            return (int)cfapi_h$constants$25.GetSystemCpuSetInformation$MH().invokeExact(Information.address(), BufferLength, ReturnedLength.address(), Process.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessDefaultCpuSets$MH() {
        return cfapi_h$constants$25.GetProcessDefaultCpuSets$MH();
    }
    public static @C("BOOL") int GetProcessDefaultCpuSets (@C("HANDLE") Addressable Process, @C("PULONG") Addressable CpuSetIds, @C("ULONG") int CpuSetIdCount, @C("PULONG") Addressable RequiredIdCount) {
        try {
            return (int)cfapi_h$constants$25.GetProcessDefaultCpuSets$MH().invokeExact(Process.address(), CpuSetIds.address(), CpuSetIdCount, RequiredIdCount.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessDefaultCpuSets$MH() {
        return cfapi_h$constants$25.SetProcessDefaultCpuSets$MH();
    }
    public static @C("BOOL") int SetProcessDefaultCpuSets (@C("HANDLE") Addressable Process, @C("const ULONG*") Addressable CpuSetIds, @C("ULONG") int CpuSetIdCount) {
        try {
            return (int)cfapi_h$constants$25.SetProcessDefaultCpuSets$MH().invokeExact(Process.address(), CpuSetIds.address(), CpuSetIdCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadSelectedCpuSets$MH() {
        return cfapi_h$constants$25.GetThreadSelectedCpuSets$MH();
    }
    public static @C("BOOL") int GetThreadSelectedCpuSets (@C("HANDLE") Addressable Thread, @C("PULONG") Addressable CpuSetIds, @C("ULONG") int CpuSetIdCount, @C("PULONG") Addressable RequiredIdCount) {
        try {
            return (int)cfapi_h$constants$25.GetThreadSelectedCpuSets$MH().invokeExact(Thread.address(), CpuSetIds.address(), CpuSetIdCount, RequiredIdCount.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadSelectedCpuSets$MH() {
        return cfapi_h$constants$25.SetThreadSelectedCpuSets$MH();
    }
    public static @C("BOOL") int SetThreadSelectedCpuSets (@C("HANDLE") Addressable Thread, @C("const ULONG*") Addressable CpuSetIds, @C("ULONG") int CpuSetIdCount) {
        try {
            return (int)cfapi_h$constants$25.SetThreadSelectedCpuSets$MH().invokeExact(Thread.address(), CpuSetIds.address(), CpuSetIdCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateProcessAsUserA$MH() {
        return cfapi_h$constants$25.CreateProcessAsUserA$MH();
    }
    public static @C("BOOL") int CreateProcessAsUserA (@C("HANDLE") Addressable hToken, @C("LPCSTR") Addressable lpApplicationName, @C("LPSTR") Addressable lpCommandLine, @C("LPSECURITY_ATTRIBUTES") Addressable lpProcessAttributes, @C("LPSECURITY_ATTRIBUTES") Addressable lpThreadAttributes, @C("BOOL") int bInheritHandles, @C("DWORD") int dwCreationFlags, @C("LPVOID") Addressable lpEnvironment, @C("LPCSTR") Addressable lpCurrentDirectory, @C("LPSTARTUPINFOA") Addressable lpStartupInfo, @C("LPPROCESS_INFORMATION") Addressable lpProcessInformation) {
        try {
            return (int)cfapi_h$constants$25.CreateProcessAsUserA$MH().invokeExact(hToken.address(), lpApplicationName.address(), lpCommandLine.address(), lpProcessAttributes.address(), lpThreadAttributes.address(), bInheritHandles, dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessShutdownParameters$MH() {
        return cfapi_h$constants$25.GetProcessShutdownParameters$MH();
    }
    public static @C("BOOL") int GetProcessShutdownParameters (@C("LPDWORD") Addressable lpdwLevel, @C("LPDWORD") Addressable lpdwFlags) {
        try {
            return (int)cfapi_h$constants$25.GetProcessShutdownParameters$MH().invokeExact(lpdwLevel.address(), lpdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadDescription$MH() {
        return cfapi_h$constants$25.SetThreadDescription$MH();
    }
    public static @C("HRESULT") int SetThreadDescription (@C("HANDLE") Addressable hThread, @C("PCWSTR") Addressable lpThreadDescription) {
        try {
            return (int)cfapi_h$constants$25.SetThreadDescription$MH().invokeExact(hThread.address(), lpThreadDescription.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadDescription$MH() {
        return cfapi_h$constants$25.GetThreadDescription$MH();
    }
    public static @C("HRESULT") int GetThreadDescription (@C("HANDLE") Addressable hThread, @C("PWSTR*") Addressable ppszThreadDescription) {
        try {
            return (int)cfapi_h$constants$25.GetThreadDescription$MH().invokeExact(hThread.address(), ppszThreadDescription.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalMemoryStatusEx$MH() {
        return cfapi_h$constants$25.GlobalMemoryStatusEx$MH();
    }
    public static @C("BOOL") int GlobalMemoryStatusEx (@C("LPMEMORYSTATUSEX") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$25.GlobalMemoryStatusEx$MH().invokeExact(lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemInfo$MH() {
        return cfapi_h$constants$25.GetSystemInfo$MH();
    }
    public static void GetSystemInfo (@C("LPSYSTEM_INFO") Addressable lpSystemInfo) {
        try {
            cfapi_h$constants$25.GetSystemInfo$MH().invokeExact(lpSystemInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemTime$MH() {
        return cfapi_h$constants$25.GetSystemTime$MH();
    }
    public static void GetSystemTime (@C("LPSYSTEMTIME") Addressable lpSystemTime) {
        try {
            cfapi_h$constants$25.GetSystemTime$MH().invokeExact(lpSystemTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemTimeAsFileTime$MH() {
        return cfapi_h$constants$25.GetSystemTimeAsFileTime$MH();
    }
    public static void GetSystemTimeAsFileTime (@C("LPFILETIME") Addressable lpSystemTimeAsFileTime) {
        try {
            cfapi_h$constants$25.GetSystemTimeAsFileTime$MH().invokeExact(lpSystemTimeAsFileTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLocalTime$MH() {
        return cfapi_h$constants$25.GetLocalTime$MH();
    }
    public static void GetLocalTime (@C("LPSYSTEMTIME") Addressable lpSystemTime) {
        try {
            cfapi_h$constants$25.GetLocalTime$MH().invokeExact(lpSystemTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsUserCetAvailableInEnvironment$MH() {
        return cfapi_h$constants$25.IsUserCetAvailableInEnvironment$MH();
    }
    public static @C("BOOL") int IsUserCetAvailableInEnvironment (@C("DWORD") int UserCetEnvironment) {
        try {
            return (int)cfapi_h$constants$25.IsUserCetAvailableInEnvironment$MH().invokeExact(UserCetEnvironment);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemLeapSecondInformation$MH() {
        return cfapi_h$constants$25.GetSystemLeapSecondInformation$MH();
    }
    public static @C("BOOL") int GetSystemLeapSecondInformation (@C("PBOOL") Addressable Enabled, @C("PDWORD") Addressable Flags) {
        try {
            return (int)cfapi_h$constants$25.GetSystemLeapSecondInformation$MH().invokeExact(Enabled.address(), Flags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVersion$MH() {
        return cfapi_h$constants$25.GetVersion$MH();
    }
    public static @C("DWORD") int GetVersion () {
        try {
            return (int)cfapi_h$constants$25.GetVersion$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetLocalTime$MH() {
        return cfapi_h$constants$25.SetLocalTime$MH();
    }
    public static @C("BOOL") int SetLocalTime (@C("const SYSTEMTIME*") Addressable lpSystemTime) {
        try {
            return (int)cfapi_h$constants$25.SetLocalTime$MH().invokeExact(lpSystemTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTickCount$MH() {
        return cfapi_h$constants$25.GetTickCount$MH();
    }
    public static @C("DWORD") int GetTickCount () {
        try {
            return (int)cfapi_h$constants$25.GetTickCount$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTickCount64$MH() {
        return cfapi_h$constants$25.GetTickCount64$MH();
    }
    public static @C("ULONGLONG") long GetTickCount64 () {
        try {
            return (long)cfapi_h$constants$25.GetTickCount64$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemTimeAdjustment$MH() {
        return cfapi_h$constants$25.GetSystemTimeAdjustment$MH();
    }
    public static @C("BOOL") int GetSystemTimeAdjustment (@C("PDWORD") Addressable lpTimeAdjustment, @C("PDWORD") Addressable lpTimeIncrement, @C("PBOOL") Addressable lpTimeAdjustmentDisabled) {
        try {
            return (int)cfapi_h$constants$25.GetSystemTimeAdjustment$MH().invokeExact(lpTimeAdjustment.address(), lpTimeIncrement.address(), lpTimeAdjustmentDisabled.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemTimeAdjustmentPrecise$MH() {
        return cfapi_h$constants$25.GetSystemTimeAdjustmentPrecise$MH();
    }
    public static @C("BOOL") int GetSystemTimeAdjustmentPrecise (@C("PDWORD64") Addressable lpTimeAdjustment, @C("PDWORD64") Addressable lpTimeIncrement, @C("PBOOL") Addressable lpTimeAdjustmentDisabled) {
        try {
            return (int)cfapi_h$constants$25.GetSystemTimeAdjustmentPrecise$MH().invokeExact(lpTimeAdjustment.address(), lpTimeIncrement.address(), lpTimeAdjustmentDisabled.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemDirectoryA$MH() {
        return cfapi_h$constants$25.GetSystemDirectoryA$MH();
    }
    public static @C("UINT") int GetSystemDirectoryA (@C("LPSTR") Addressable lpBuffer, @C("UINT") int uSize) {
        try {
            return (int)cfapi_h$constants$25.GetSystemDirectoryA$MH().invokeExact(lpBuffer.address(), uSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemDirectoryW$MH() {
        return cfapi_h$constants$25.GetSystemDirectoryW$MH();
    }
    public static @C("UINT") int GetSystemDirectoryW (@C("LPWSTR") Addressable lpBuffer, @C("UINT") int uSize) {
        try {
            return (int)cfapi_h$constants$25.GetSystemDirectoryW$MH().invokeExact(lpBuffer.address(), uSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowsDirectoryA$MH() {
        return cfapi_h$constants$25.GetWindowsDirectoryA$MH();
    }
    public static @C("UINT") int GetWindowsDirectoryA (@C("LPSTR") Addressable lpBuffer, @C("UINT") int uSize) {
        try {
            return (int)cfapi_h$constants$25.GetWindowsDirectoryA$MH().invokeExact(lpBuffer.address(), uSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowsDirectoryW$MH() {
        return cfapi_h$constants$25.GetWindowsDirectoryW$MH();
    }
    public static @C("UINT") int GetWindowsDirectoryW (@C("LPWSTR") Addressable lpBuffer, @C("UINT") int uSize) {
        try {
            return (int)cfapi_h$constants$25.GetWindowsDirectoryW$MH().invokeExact(lpBuffer.address(), uSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemWindowsDirectoryA$MH() {
        return cfapi_h$constants$25.GetSystemWindowsDirectoryA$MH();
    }
    public static @C("UINT") int GetSystemWindowsDirectoryA (@C("LPSTR") Addressable lpBuffer, @C("UINT") int uSize) {
        try {
            return (int)cfapi_h$constants$25.GetSystemWindowsDirectoryA$MH().invokeExact(lpBuffer.address(), uSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemWindowsDirectoryW$MH() {
        return cfapi_h$constants$25.GetSystemWindowsDirectoryW$MH();
    }
    public static @C("UINT") int GetSystemWindowsDirectoryW (@C("LPWSTR") Addressable lpBuffer, @C("UINT") int uSize) {
        try {
            return (int)cfapi_h$constants$25.GetSystemWindowsDirectoryW$MH().invokeExact(lpBuffer.address(), uSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int ComputerNameNetBIOS() {
        return cfapi_h$constants$25.ComputerNameNetBIOS();
    }
    public static @C("int") int ComputerNameDnsHostname() {
        return cfapi_h$constants$25.ComputerNameDnsHostname();
    }
    public static @C("int") int ComputerNameDnsDomain() {
        return cfapi_h$constants$25.ComputerNameDnsDomain();
    }
    public static @C("int") int ComputerNameDnsFullyQualified() {
        return cfapi_h$constants$25.ComputerNameDnsFullyQualified();
    }
    public static @C("int") int ComputerNamePhysicalNetBIOS() {
        return cfapi_h$constants$25.ComputerNamePhysicalNetBIOS();
    }
    public static @C("int") int ComputerNamePhysicalDnsHostname() {
        return cfapi_h$constants$25.ComputerNamePhysicalDnsHostname();
    }
    public static @C("int") int ComputerNamePhysicalDnsDomain() {
        return cfapi_h$constants$25.ComputerNamePhysicalDnsDomain();
    }
    public static @C("int") int ComputerNamePhysicalDnsFullyQualified() {
        return cfapi_h$constants$25.ComputerNamePhysicalDnsFullyQualified();
    }
    public static @C("int") int ComputerNameMax() {
        return cfapi_h$constants$25.ComputerNameMax();
    }
    public static  MethodHandle GetComputerNameExA$MH() {
        return cfapi_h$constants$25.GetComputerNameExA$MH();
    }
    public static @C("BOOL") int GetComputerNameExA (@C("COMPUTER_NAME_FORMAT") int NameType, @C("LPSTR") Addressable lpBuffer, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)cfapi_h$constants$25.GetComputerNameExA$MH().invokeExact(NameType, lpBuffer.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetComputerNameExW$MH() {
        return cfapi_h$constants$25.GetComputerNameExW$MH();
    }
    public static @C("BOOL") int GetComputerNameExW (@C("COMPUTER_NAME_FORMAT") int NameType, @C("LPWSTR") Addressable lpBuffer, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)cfapi_h$constants$25.GetComputerNameExW$MH().invokeExact(NameType, lpBuffer.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetComputerNameExW$MH() {
        return cfapi_h$constants$25.SetComputerNameExW$MH();
    }
    public static @C("BOOL") int SetComputerNameExW (@C("COMPUTER_NAME_FORMAT") int NameType, @C("LPCWSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$25.SetComputerNameExW$MH().invokeExact(NameType, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSystemTime$MH() {
        return cfapi_h$constants$25.SetSystemTime$MH();
    }
    public static @C("BOOL") int SetSystemTime (@C("const SYSTEMTIME*") Addressable lpSystemTime) {
        try {
            return (int)cfapi_h$constants$25.SetSystemTime$MH().invokeExact(lpSystemTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVersionExA$MH() {
        return cfapi_h$constants$25.GetVersionExA$MH();
    }
    public static @C("BOOL") int GetVersionExA (@C("LPOSVERSIONINFOA") Addressable lpVersionInformation) {
        try {
            return (int)cfapi_h$constants$25.GetVersionExA$MH().invokeExact(lpVersionInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVersionExW$MH() {
        return cfapi_h$constants$25.GetVersionExW$MH();
    }
    public static @C("BOOL") int GetVersionExW (@C("LPOSVERSIONINFOW") Addressable lpVersionInformation) {
        try {
            return (int)cfapi_h$constants$25.GetVersionExW$MH().invokeExact(lpVersionInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLogicalProcessorInformation$MH() {
        return cfapi_h$constants$25.GetLogicalProcessorInformation$MH();
    }
    public static @C("BOOL") int GetLogicalProcessorInformation (@C("PSYSTEM_LOGICAL_PROCESSOR_INFORMATION") Addressable Buffer, @C("PDWORD") Addressable ReturnedLength) {
        try {
            return (int)cfapi_h$constants$25.GetLogicalProcessorInformation$MH().invokeExact(Buffer.address(), ReturnedLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLogicalProcessorInformationEx$MH() {
        return cfapi_h$constants$25.GetLogicalProcessorInformationEx$MH();
    }
    public static @C("BOOL") int GetLogicalProcessorInformationEx (@C("LOGICAL_PROCESSOR_RELATIONSHIP") int RelationshipType, @C("PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX") Addressable Buffer, @C("PDWORD") Addressable ReturnedLength) {
        try {
            return (int)cfapi_h$constants$25.GetLogicalProcessorInformationEx$MH().invokeExact(RelationshipType, Buffer.address(), ReturnedLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNativeSystemInfo$MH() {
        return cfapi_h$constants$25.GetNativeSystemInfo$MH();
    }
    public static void GetNativeSystemInfo (@C("LPSYSTEM_INFO") Addressable lpSystemInfo) {
        try {
            cfapi_h$constants$25.GetNativeSystemInfo$MH().invokeExact(lpSystemInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemTimePreciseAsFileTime$MH() {
        return cfapi_h$constants$25.GetSystemTimePreciseAsFileTime$MH();
    }
    public static void GetSystemTimePreciseAsFileTime (@C("LPFILETIME") Addressable lpSystemTimeAsFileTime) {
        try {
            cfapi_h$constants$25.GetSystemTimePreciseAsFileTime$MH().invokeExact(lpSystemTimeAsFileTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProductInfo$MH() {
        return cfapi_h$constants$25.GetProductInfo$MH();
    }
    public static @C("BOOL") int GetProductInfo (@C("DWORD") int dwOSMajorVersion, @C("DWORD") int dwOSMinorVersion, @C("DWORD") int dwSpMajorVersion, @C("DWORD") int dwSpMinorVersion, @C("PDWORD") Addressable pdwReturnedProductType) {
        try {
            return (int)cfapi_h$constants$25.GetProductInfo$MH().invokeExact(dwOSMajorVersion, dwOSMinorVersion, dwSpMajorVersion, dwSpMinorVersion, pdwReturnedProductType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOsSafeBootMode$MH() {
        return cfapi_h$constants$25.GetOsSafeBootMode$MH();
    }
    public static @C("BOOL") int GetOsSafeBootMode (@C("PDWORD") Addressable Flags) {
        try {
            return (int)cfapi_h$constants$25.GetOsSafeBootMode$MH().invokeExact(Flags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumSystemFirmwareTables$MH() {
        return cfapi_h$constants$25.EnumSystemFirmwareTables$MH();
    }
    public static @C("UINT") int EnumSystemFirmwareTables (@C("DWORD") int FirmwareTableProviderSignature, @C("PVOID") Addressable pFirmwareTableEnumBuffer, @C("DWORD") int BufferSize) {
        try {
            return (int)cfapi_h$constants$25.EnumSystemFirmwareTables$MH().invokeExact(FirmwareTableProviderSignature, pFirmwareTableEnumBuffer.address(), BufferSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemFirmwareTable$MH() {
        return cfapi_h$constants$25.GetSystemFirmwareTable$MH();
    }
    public static @C("UINT") int GetSystemFirmwareTable (@C("DWORD") int FirmwareTableProviderSignature, @C("DWORD") int FirmwareTableID, @C("PVOID") Addressable pFirmwareTableBuffer, @C("DWORD") int BufferSize) {
        try {
            return (int)cfapi_h$constants$25.GetSystemFirmwareTable$MH().invokeExact(FirmwareTableProviderSignature, FirmwareTableID, pFirmwareTableBuffer.address(), BufferSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DnsHostnameToComputerNameExW$MH() {
        return cfapi_h$constants$25.DnsHostnameToComputerNameExW$MH();
    }
    public static @C("BOOL") int DnsHostnameToComputerNameExW (@C("LPCWSTR") Addressable Hostname, @C("LPWSTR") Addressable ComputerName, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)cfapi_h$constants$25.DnsHostnameToComputerNameExW$MH().invokeExact(Hostname.address(), ComputerName.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPhysicallyInstalledSystemMemory$MH() {
        return cfapi_h$constants$25.GetPhysicallyInstalledSystemMemory$MH();
    }
    public static @C("BOOL") int GetPhysicallyInstalledSystemMemory (@C("PULONGLONG") Addressable TotalMemoryInKilobytes) {
        try {
            return (int)cfapi_h$constants$25.GetPhysicallyInstalledSystemMemory$MH().invokeExact(TotalMemoryInKilobytes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetComputerNameEx2W$MH() {
        return cfapi_h$constants$25.SetComputerNameEx2W$MH();
    }
    public static @C("BOOL") int SetComputerNameEx2W (@C("COMPUTER_NAME_FORMAT") int NameType, @C("DWORD") int Flags, @C("LPCWSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$25.SetComputerNameEx2W$MH().invokeExact(NameType, Flags, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSystemTimeAdjustment$MH() {
        return cfapi_h$constants$25.SetSystemTimeAdjustment$MH();
    }
    public static @C("BOOL") int SetSystemTimeAdjustment (@C("DWORD") int dwTimeAdjustment, @C("BOOL") int bTimeAdjustmentDisabled) {
        try {
            return (int)cfapi_h$constants$25.SetSystemTimeAdjustment$MH().invokeExact(dwTimeAdjustment, bTimeAdjustmentDisabled);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSystemTimeAdjustmentPrecise$MH() {
        return cfapi_h$constants$25.SetSystemTimeAdjustmentPrecise$MH();
    }
    public static @C("BOOL") int SetSystemTimeAdjustmentPrecise (@C("DWORD64") long dwTimeAdjustment, @C("BOOL") int bTimeAdjustmentDisabled) {
        try {
            return (int)cfapi_h$constants$25.SetSystemTimeAdjustmentPrecise$MH().invokeExact(dwTimeAdjustment, bTimeAdjustmentDisabled);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InstallELAMCertificateInfo$MH() {
        return cfapi_h$constants$25.InstallELAMCertificateInfo$MH();
    }
    public static @C("BOOL") int InstallELAMCertificateInfo (@C("HANDLE") Addressable ELAMFile) {
        try {
            return (int)cfapi_h$constants$25.InstallELAMCertificateInfo$MH().invokeExact(ELAMFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessorSystemCycleTime$MH() {
        return cfapi_h$constants$25.GetProcessorSystemCycleTime$MH();
    }
    public static @C("BOOL") int GetProcessorSystemCycleTime (@C("USHORT") short Group, @C("PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION") Addressable Buffer, @C("PDWORD") Addressable ReturnedLength) {
        try {
            return (int)cfapi_h$constants$25.GetProcessorSystemCycleTime$MH().invokeExact(Group, Buffer.address(), ReturnedLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOsManufacturingMode$MH() {
        return cfapi_h$constants$25.GetOsManufacturingMode$MH();
    }
    public static @C("BOOL") int GetOsManufacturingMode (@C("PBOOL") Addressable pbEnabled) {
        try {
            return (int)cfapi_h$constants$25.GetOsManufacturingMode$MH().invokeExact(pbEnabled.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetIntegratedDisplaySize$MH() {
        return cfapi_h$constants$25.GetIntegratedDisplaySize$MH();
    }
    public static @C("HRESULT") int GetIntegratedDisplaySize (@C("double*") Addressable sizeInInches) {
        try {
            return (int)cfapi_h$constants$25.GetIntegratedDisplaySize$MH().invokeExact(sizeInInches.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetComputerNameA$MH() {
        return cfapi_h$constants$25.SetComputerNameA$MH();
    }
    public static @C("BOOL") int SetComputerNameA (@C("LPCSTR") Addressable lpComputerName) {
        try {
            return (int)cfapi_h$constants$25.SetComputerNameA$MH().invokeExact(lpComputerName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetComputerNameW$MH() {
        return cfapi_h$constants$25.SetComputerNameW$MH();
    }
    public static @C("BOOL") int SetComputerNameW (@C("LPCWSTR") Addressable lpComputerName) {
        try {
            return (int)cfapi_h$constants$25.SetComputerNameW$MH().invokeExact(lpComputerName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetComputerNameExA$MH() {
        return cfapi_h$constants$25.SetComputerNameExA$MH();
    }
    public static @C("BOOL") int SetComputerNameExA (@C("COMPUTER_NAME_FORMAT") int NameType, @C("LPCSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$25.SetComputerNameExA$MH().invokeExact(NameType, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualAlloc$MH() {
        return cfapi_h$constants$25.VirtualAlloc$MH();
    }
    public static @C("LPVOID") MemoryAddress VirtualAlloc (@C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize, @C("DWORD") int flAllocationType, @C("DWORD") int flProtect) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.VirtualAlloc$MH().invokeExact(lpAddress.address(), dwSize, flAllocationType, flProtect);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualProtect$MH() {
        return cfapi_h$constants$25.VirtualProtect$MH();
    }
    public static @C("BOOL") int VirtualProtect (@C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize, @C("DWORD") int flNewProtect, @C("PDWORD") Addressable lpflOldProtect) {
        try {
            return (int)cfapi_h$constants$25.VirtualProtect$MH().invokeExact(lpAddress.address(), dwSize, flNewProtect, lpflOldProtect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualFree$MH() {
        return cfapi_h$constants$25.VirtualFree$MH();
    }
    public static @C("BOOL") int VirtualFree (@C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize, @C("DWORD") int dwFreeType) {
        try {
            return (int)cfapi_h$constants$25.VirtualFree$MH().invokeExact(lpAddress.address(), dwSize, dwFreeType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualQuery$MH() {
        return cfapi_h$constants$25.VirtualQuery$MH();
    }
    public static @C("SIZE_T") long VirtualQuery (@C("LPCVOID") Addressable lpAddress, @C("PMEMORY_BASIC_INFORMATION") Addressable lpBuffer, @C("SIZE_T") long dwLength) {
        try {
            return (long)cfapi_h$constants$25.VirtualQuery$MH().invokeExact(lpAddress.address(), lpBuffer.address(), dwLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualAllocEx$MH() {
        return cfapi_h$constants$25.VirtualAllocEx$MH();
    }
    public static @C("LPVOID") MemoryAddress VirtualAllocEx (@C("HANDLE") Addressable hProcess, @C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize, @C("DWORD") int flAllocationType, @C("DWORD") int flProtect) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.VirtualAllocEx$MH().invokeExact(hProcess.address(), lpAddress.address(), dwSize, flAllocationType, flProtect);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualProtectEx$MH() {
        return cfapi_h$constants$25.VirtualProtectEx$MH();
    }
    public static @C("BOOL") int VirtualProtectEx (@C("HANDLE") Addressable hProcess, @C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize, @C("DWORD") int flNewProtect, @C("PDWORD") Addressable lpflOldProtect) {
        try {
            return (int)cfapi_h$constants$25.VirtualProtectEx$MH().invokeExact(hProcess.address(), lpAddress.address(), dwSize, flNewProtect, lpflOldProtect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualQueryEx$MH() {
        return cfapi_h$constants$25.VirtualQueryEx$MH();
    }
    public static @C("SIZE_T") long VirtualQueryEx (@C("HANDLE") Addressable hProcess, @C("LPCVOID") Addressable lpAddress, @C("PMEMORY_BASIC_INFORMATION") Addressable lpBuffer, @C("SIZE_T") long dwLength) {
        try {
            return (long)cfapi_h$constants$25.VirtualQueryEx$MH().invokeExact(hProcess.address(), lpAddress.address(), lpBuffer.address(), dwLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadProcessMemory$MH() {
        return cfapi_h$constants$25.ReadProcessMemory$MH();
    }
    public static @C("BOOL") int ReadProcessMemory (@C("HANDLE") Addressable hProcess, @C("LPCVOID") Addressable lpBaseAddress, @C("LPVOID") Addressable lpBuffer, @C("SIZE_T") long nSize, @C("SIZE_T*") Addressable lpNumberOfBytesRead) {
        try {
            return (int)cfapi_h$constants$25.ReadProcessMemory$MH().invokeExact(hProcess.address(), lpBaseAddress.address(), lpBuffer.address(), nSize, lpNumberOfBytesRead.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteProcessMemory$MH() {
        return cfapi_h$constants$25.WriteProcessMemory$MH();
    }
    public static @C("BOOL") int WriteProcessMemory (@C("HANDLE") Addressable hProcess, @C("LPVOID") Addressable lpBaseAddress, @C("LPCVOID") Addressable lpBuffer, @C("SIZE_T") long nSize, @C("SIZE_T*") Addressable lpNumberOfBytesWritten) {
        try {
            return (int)cfapi_h$constants$25.WriteProcessMemory$MH().invokeExact(hProcess.address(), lpBaseAddress.address(), lpBuffer.address(), nSize, lpNumberOfBytesWritten.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileMappingW$MH() {
        return cfapi_h$constants$25.CreateFileMappingW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileMappingW (@C("HANDLE") Addressable hFile, @C("LPSECURITY_ATTRIBUTES") Addressable lpFileMappingAttributes, @C("DWORD") int flProtect, @C("DWORD") int dwMaximumSizeHigh, @C("DWORD") int dwMaximumSizeLow, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateFileMappingW$MH().invokeExact(hFile.address(), lpFileMappingAttributes.address(), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenFileMappingW$MH() {
        return cfapi_h$constants$25.OpenFileMappingW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenFileMappingW (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.OpenFileMappingW$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapViewOfFile$MH() {
        return cfapi_h$constants$25.MapViewOfFile$MH();
    }
    public static @C("LPVOID") MemoryAddress MapViewOfFile (@C("HANDLE") Addressable hFileMappingObject, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwFileOffsetHigh, @C("DWORD") int dwFileOffsetLow, @C("SIZE_T") long dwNumberOfBytesToMap) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.MapViewOfFile$MH().invokeExact(hFileMappingObject.address(), dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapViewOfFileEx$MH() {
        return cfapi_h$constants$25.MapViewOfFileEx$MH();
    }
    public static @C("LPVOID") MemoryAddress MapViewOfFileEx (@C("HANDLE") Addressable hFileMappingObject, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwFileOffsetHigh, @C("DWORD") int dwFileOffsetLow, @C("SIZE_T") long dwNumberOfBytesToMap, @C("LPVOID") Addressable lpBaseAddress) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.MapViewOfFileEx$MH().invokeExact(hFileMappingObject.address(), dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualFreeEx$MH() {
        return cfapi_h$constants$25.VirtualFreeEx$MH();
    }
    public static @C("BOOL") int VirtualFreeEx (@C("HANDLE") Addressable hProcess, @C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize, @C("DWORD") int dwFreeType) {
        try {
            return (int)cfapi_h$constants$25.VirtualFreeEx$MH().invokeExact(hProcess.address(), lpAddress.address(), dwSize, dwFreeType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlushViewOfFile$MH() {
        return cfapi_h$constants$25.FlushViewOfFile$MH();
    }
    public static @C("BOOL") int FlushViewOfFile (@C("LPCVOID") Addressable lpBaseAddress, @C("SIZE_T") long dwNumberOfBytesToFlush) {
        try {
            return (int)cfapi_h$constants$25.FlushViewOfFile$MH().invokeExact(lpBaseAddress.address(), dwNumberOfBytesToFlush);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnmapViewOfFile$MH() {
        return cfapi_h$constants$25.UnmapViewOfFile$MH();
    }
    public static @C("BOOL") int UnmapViewOfFile (@C("LPCVOID") Addressable lpBaseAddress) {
        try {
            return (int)cfapi_h$constants$25.UnmapViewOfFile$MH().invokeExact(lpBaseAddress.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLargePageMinimum$MH() {
        return cfapi_h$constants$25.GetLargePageMinimum$MH();
    }
    public static @C("SIZE_T") long GetLargePageMinimum () {
        try {
            return (long)cfapi_h$constants$25.GetLargePageMinimum$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessWorkingSetSizeEx$MH() {
        return cfapi_h$constants$25.GetProcessWorkingSetSizeEx$MH();
    }
    public static @C("BOOL") int GetProcessWorkingSetSizeEx (@C("HANDLE") Addressable hProcess, @C("PSIZE_T") Addressable lpMinimumWorkingSetSize, @C("PSIZE_T") Addressable lpMaximumWorkingSetSize, @C("PDWORD") Addressable Flags) {
        try {
            return (int)cfapi_h$constants$25.GetProcessWorkingSetSizeEx$MH().invokeExact(hProcess.address(), lpMinimumWorkingSetSize.address(), lpMaximumWorkingSetSize.address(), Flags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessWorkingSetSizeEx$MH() {
        return cfapi_h$constants$25.SetProcessWorkingSetSizeEx$MH();
    }
    public static @C("BOOL") int SetProcessWorkingSetSizeEx (@C("HANDLE") Addressable hProcess, @C("SIZE_T") long dwMinimumWorkingSetSize, @C("SIZE_T") long dwMaximumWorkingSetSize, @C("DWORD") int Flags) {
        try {
            return (int)cfapi_h$constants$25.SetProcessWorkingSetSizeEx$MH().invokeExact(hProcess.address(), dwMinimumWorkingSetSize, dwMaximumWorkingSetSize, Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualLock$MH() {
        return cfapi_h$constants$25.VirtualLock$MH();
    }
    public static @C("BOOL") int VirtualLock (@C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize) {
        try {
            return (int)cfapi_h$constants$25.VirtualLock$MH().invokeExact(lpAddress.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualUnlock$MH() {
        return cfapi_h$constants$25.VirtualUnlock$MH();
    }
    public static @C("BOOL") int VirtualUnlock (@C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize) {
        try {
            return (int)cfapi_h$constants$25.VirtualUnlock$MH().invokeExact(lpAddress.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWriteWatch$MH() {
        return cfapi_h$constants$25.GetWriteWatch$MH();
    }
    public static @C("UINT") int GetWriteWatch (@C("DWORD") int dwFlags, @C("PVOID") Addressable lpBaseAddress, @C("SIZE_T") long dwRegionSize, @C("PVOID*") Addressable lpAddresses, @C("ULONG_PTR*") Addressable lpdwCount, @C("LPDWORD") Addressable lpdwGranularity) {
        try {
            return (int)cfapi_h$constants$25.GetWriteWatch$MH().invokeExact(dwFlags, lpBaseAddress.address(), dwRegionSize, lpAddresses.address(), lpdwCount.address(), lpdwGranularity.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ResetWriteWatch$MH() {
        return cfapi_h$constants$25.ResetWriteWatch$MH();
    }
    public static @C("UINT") int ResetWriteWatch (@C("LPVOID") Addressable lpBaseAddress, @C("SIZE_T") long dwRegionSize) {
        try {
            return (int)cfapi_h$constants$25.ResetWriteWatch$MH().invokeExact(lpBaseAddress.address(), dwRegionSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int LowMemoryResourceNotification() {
        return cfapi_h$constants$25.LowMemoryResourceNotification();
    }
    public static @C("int") int HighMemoryResourceNotification() {
        return cfapi_h$constants$25.HighMemoryResourceNotification();
    }
    public static  MethodHandle CreateMemoryResourceNotification$MH() {
        return cfapi_h$constants$25.CreateMemoryResourceNotification$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateMemoryResourceNotification (@C("MEMORY_RESOURCE_NOTIFICATION_TYPE") int NotificationType) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateMemoryResourceNotification$MH().invokeExact(NotificationType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryMemoryResourceNotification$MH() {
        return cfapi_h$constants$25.QueryMemoryResourceNotification$MH();
    }
    public static @C("BOOL") int QueryMemoryResourceNotification (@C("HANDLE") Addressable ResourceNotificationHandle, @C("PBOOL") Addressable ResourceState) {
        try {
            return (int)cfapi_h$constants$25.QueryMemoryResourceNotification$MH().invokeExact(ResourceNotificationHandle.address(), ResourceState.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemFileCacheSize$MH() {
        return cfapi_h$constants$25.GetSystemFileCacheSize$MH();
    }
    public static @C("BOOL") int GetSystemFileCacheSize (@C("PSIZE_T") Addressable lpMinimumFileCacheSize, @C("PSIZE_T") Addressable lpMaximumFileCacheSize, @C("PDWORD") Addressable lpFlags) {
        try {
            return (int)cfapi_h$constants$25.GetSystemFileCacheSize$MH().invokeExact(lpMinimumFileCacheSize.address(), lpMaximumFileCacheSize.address(), lpFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSystemFileCacheSize$MH() {
        return cfapi_h$constants$25.SetSystemFileCacheSize$MH();
    }
    public static @C("BOOL") int SetSystemFileCacheSize (@C("SIZE_T") long MinimumFileCacheSize, @C("SIZE_T") long MaximumFileCacheSize, @C("DWORD") int Flags) {
        try {
            return (int)cfapi_h$constants$25.SetSystemFileCacheSize$MH().invokeExact(MinimumFileCacheSize, MaximumFileCacheSize, Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileMappingNumaW$MH() {
        return cfapi_h$constants$25.CreateFileMappingNumaW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileMappingNumaW (@C("HANDLE") Addressable hFile, @C("LPSECURITY_ATTRIBUTES") Addressable lpFileMappingAttributes, @C("DWORD") int flProtect, @C("DWORD") int dwMaximumSizeHigh, @C("DWORD") int dwMaximumSizeLow, @C("LPCWSTR") Addressable lpName, @C("DWORD") int nndPreferred) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateFileMappingNumaW$MH().invokeExact(hFile.address(), lpFileMappingAttributes.address(), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName.address(), nndPreferred);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrefetchVirtualMemory$MH() {
        return cfapi_h$constants$25.PrefetchVirtualMemory$MH();
    }
    public static @C("BOOL") int PrefetchVirtualMemory (@C("HANDLE") Addressable hProcess, @C("ULONG_PTR") long NumberOfEntries, @C("PWIN32_MEMORY_RANGE_ENTRY") Addressable VirtualAddresses, @C("ULONG") int Flags) {
        try {
            return (int)cfapi_h$constants$25.PrefetchVirtualMemory$MH().invokeExact(hProcess.address(), NumberOfEntries, VirtualAddresses.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileMappingFromApp$MH() {
        return cfapi_h$constants$25.CreateFileMappingFromApp$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileMappingFromApp (@C("HANDLE") Addressable hFile, @C("PSECURITY_ATTRIBUTES") Addressable SecurityAttributes, @C("ULONG") int PageProtection, @C("ULONG64") long MaximumSize, @C("PCWSTR") Addressable Name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.CreateFileMappingFromApp$MH().invokeExact(hFile.address(), SecurityAttributes.address(), PageProtection, MaximumSize, Name.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapViewOfFileFromApp$MH() {
        return cfapi_h$constants$25.MapViewOfFileFromApp$MH();
    }
    public static @C("PVOID") MemoryAddress MapViewOfFileFromApp (@C("HANDLE") Addressable hFileMappingObject, @C("ULONG") int DesiredAccess, @C("ULONG64") long FileOffset, @C("SIZE_T") long NumberOfBytesToMap) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.MapViewOfFileFromApp$MH().invokeExact(hFileMappingObject.address(), DesiredAccess, FileOffset, NumberOfBytesToMap);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnmapViewOfFileEx$MH() {
        return cfapi_h$constants$25.UnmapViewOfFileEx$MH();
    }
    public static @C("BOOL") int UnmapViewOfFileEx (@C("PVOID") Addressable BaseAddress, @C("ULONG") int UnmapFlags) {
        try {
            return (int)cfapi_h$constants$25.UnmapViewOfFileEx$MH().invokeExact(BaseAddress.address(), UnmapFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AllocateUserPhysicalPages$MH() {
        return cfapi_h$constants$25.AllocateUserPhysicalPages$MH();
    }
    public static @C("BOOL") int AllocateUserPhysicalPages (@C("HANDLE") Addressable hProcess, @C("PULONG_PTR") Addressable NumberOfPages, @C("PULONG_PTR") Addressable PageArray) {
        try {
            return (int)cfapi_h$constants$25.AllocateUserPhysicalPages$MH().invokeExact(hProcess.address(), NumberOfPages.address(), PageArray.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeUserPhysicalPages$MH() {
        return cfapi_h$constants$25.FreeUserPhysicalPages$MH();
    }
    public static @C("BOOL") int FreeUserPhysicalPages (@C("HANDLE") Addressable hProcess, @C("PULONG_PTR") Addressable NumberOfPages, @C("PULONG_PTR") Addressable PageArray) {
        try {
            return (int)cfapi_h$constants$25.FreeUserPhysicalPages$MH().invokeExact(hProcess.address(), NumberOfPages.address(), PageArray.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapUserPhysicalPages$MH() {
        return cfapi_h$constants$25.MapUserPhysicalPages$MH();
    }
    public static @C("BOOL") int MapUserPhysicalPages (@C("PVOID") Addressable VirtualAddress, @C("ULONG_PTR") long NumberOfPages, @C("PULONG_PTR") Addressable PageArray) {
        try {
            return (int)cfapi_h$constants$25.MapUserPhysicalPages$MH().invokeExact(VirtualAddress.address(), NumberOfPages, PageArray.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AllocateUserPhysicalPagesNuma$MH() {
        return cfapi_h$constants$25.AllocateUserPhysicalPagesNuma$MH();
    }
    public static @C("BOOL") int AllocateUserPhysicalPagesNuma (@C("HANDLE") Addressable hProcess, @C("PULONG_PTR") Addressable NumberOfPages, @C("PULONG_PTR") Addressable PageArray, @C("DWORD") int nndPreferred) {
        try {
            return (int)cfapi_h$constants$25.AllocateUserPhysicalPagesNuma$MH().invokeExact(hProcess.address(), NumberOfPages.address(), PageArray.address(), nndPreferred);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualAllocExNuma$MH() {
        return cfapi_h$constants$25.VirtualAllocExNuma$MH();
    }
    public static @C("LPVOID") MemoryAddress VirtualAllocExNuma (@C("HANDLE") Addressable hProcess, @C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize, @C("DWORD") int flAllocationType, @C("DWORD") int flProtect, @C("DWORD") int nndPreferred) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.VirtualAllocExNuma$MH().invokeExact(hProcess.address(), lpAddress.address(), dwSize, flAllocationType, flProtect, nndPreferred);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMemoryErrorHandlingCapabilities$MH() {
        return cfapi_h$constants$25.GetMemoryErrorHandlingCapabilities$MH();
    }
    public static @C("BOOL") int GetMemoryErrorHandlingCapabilities (@C("PULONG") Addressable Capabilities) {
        try {
            return (int)cfapi_h$constants$25.GetMemoryErrorHandlingCapabilities$MH().invokeExact(Capabilities.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterBadMemoryNotification$MH() {
        return cfapi_h$constants$25.RegisterBadMemoryNotification$MH();
    }
    public static @C("PVOID") MemoryAddress RegisterBadMemoryNotification (@C("PBAD_MEMORY_CALLBACK_ROUTINE") Addressable Callback) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.RegisterBadMemoryNotification$MH().invokeExact(Callback.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterBadMemoryNotification$MH() {
        return cfapi_h$constants$25.UnregisterBadMemoryNotification$MH();
    }
    public static @C("BOOL") int UnregisterBadMemoryNotification (@C("PVOID") Addressable RegistrationHandle) {
        try {
            return (int)cfapi_h$constants$25.UnregisterBadMemoryNotification$MH().invokeExact(RegistrationHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int VmOfferPriorityVeryLow() {
        return cfapi_h$constants$25.VmOfferPriorityVeryLow();
    }
    public static @C("int") int VmOfferPriorityLow() {
        return cfapi_h$constants$25.VmOfferPriorityLow();
    }
    public static @C("int") int VmOfferPriorityBelowNormal() {
        return cfapi_h$constants$25.VmOfferPriorityBelowNormal();
    }
    public static @C("int") int VmOfferPriorityNormal() {
        return cfapi_h$constants$25.VmOfferPriorityNormal();
    }
    public static  MethodHandle OfferVirtualMemory$MH() {
        return cfapi_h$constants$25.OfferVirtualMemory$MH();
    }
    public static @C("DWORD") int OfferVirtualMemory (@C("PVOID") Addressable VirtualAddress, @C("SIZE_T") long Size, @C("OFFER_PRIORITY") int Priority) {
        try {
            return (int)cfapi_h$constants$25.OfferVirtualMemory$MH().invokeExact(VirtualAddress.address(), Size, Priority);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReclaimVirtualMemory$MH() {
        return cfapi_h$constants$25.ReclaimVirtualMemory$MH();
    }
    public static @C("DWORD") int ReclaimVirtualMemory (@C("void*") Addressable VirtualAddress, @C("SIZE_T") long Size) {
        try {
            return (int)cfapi_h$constants$25.ReclaimVirtualMemory$MH().invokeExact(VirtualAddress.address(), Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DiscardVirtualMemory$MH() {
        return cfapi_h$constants$25.DiscardVirtualMemory$MH();
    }
    public static @C("DWORD") int DiscardVirtualMemory (@C("PVOID") Addressable VirtualAddress, @C("SIZE_T") long Size) {
        try {
            return (int)cfapi_h$constants$25.DiscardVirtualMemory$MH().invokeExact(VirtualAddress.address(), Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessValidCallTargets$MH() {
        return cfapi_h$constants$25.SetProcessValidCallTargets$MH();
    }
    public static @C("BOOL") int SetProcessValidCallTargets (@C("HANDLE") Addressable hProcess, @C("PVOID") Addressable VirtualAddress, @C("SIZE_T") long RegionSize, @C("ULONG") int NumberOfOffsets, @C("PCFG_CALL_TARGET_INFO") Addressable OffsetInformation) {
        try {
            return (int)cfapi_h$constants$25.SetProcessValidCallTargets$MH().invokeExact(hProcess.address(), VirtualAddress.address(), RegionSize, NumberOfOffsets, OffsetInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessValidCallTargetsForMappedView$MH() {
        return cfapi_h$constants$25.SetProcessValidCallTargetsForMappedView$MH();
    }
    public static @C("BOOL") int SetProcessValidCallTargetsForMappedView (@C("HANDLE") Addressable Process, @C("PVOID") Addressable VirtualAddress, @C("SIZE_T") long RegionSize, @C("ULONG") int NumberOfOffsets, @C("PCFG_CALL_TARGET_INFO") Addressable OffsetInformation, @C("HANDLE") Addressable Section, @C("ULONG64") long ExpectedFileOffset) {
        try {
            return (int)cfapi_h$constants$25.SetProcessValidCallTargetsForMappedView$MH().invokeExact(Process.address(), VirtualAddress.address(), RegionSize, NumberOfOffsets, OffsetInformation.address(), Section.address(), ExpectedFileOffset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualAllocFromApp$MH() {
        return cfapi_h$constants$25.VirtualAllocFromApp$MH();
    }
    public static @C("PVOID") MemoryAddress VirtualAllocFromApp (@C("PVOID") Addressable BaseAddress, @C("SIZE_T") long Size, @C("ULONG") int AllocationType, @C("ULONG") int Protection) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.VirtualAllocFromApp$MH().invokeExact(BaseAddress.address(), Size, AllocationType, Protection);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualProtectFromApp$MH() {
        return cfapi_h$constants$25.VirtualProtectFromApp$MH();
    }
    public static @C("BOOL") int VirtualProtectFromApp (@C("PVOID") Addressable Address, @C("SIZE_T") long Size, @C("ULONG") int NewProtection, @C("PULONG") Addressable OldProtection) {
        try {
            return (int)cfapi_h$constants$25.VirtualProtectFromApp$MH().invokeExact(Address.address(), Size, NewProtection, OldProtection.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenFileMappingFromApp$MH() {
        return cfapi_h$constants$25.OpenFileMappingFromApp$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenFileMappingFromApp (@C("ULONG") int DesiredAccess, @C("BOOL") int InheritHandle, @C("PCWSTR") Addressable Name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$25.OpenFileMappingFromApp$MH().invokeExact(DesiredAccess, InheritHandle, Name.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int MemoryRegionInfo() {
        return cfapi_h$constants$25.MemoryRegionInfo();
    }
    public static  MethodHandle QueryVirtualMemoryInformation$MH() {
        return cfapi_h$constants$26.QueryVirtualMemoryInformation$MH();
    }
    public static @C("BOOL") int QueryVirtualMemoryInformation (@C("HANDLE") Addressable Process, @C("void*") Addressable VirtualAddress, @C("WIN32_MEMORY_INFORMATION_CLASS") int MemoryInformationClass, @C("PVOID") Addressable MemoryInformation, @C("SIZE_T") long MemoryInformationSize, @C("PSIZE_T") Addressable ReturnSize) {
        try {
            return (int)cfapi_h$constants$26.QueryVirtualMemoryInformation$MH().invokeExact(Process.address(), VirtualAddress.address(), MemoryInformationClass, MemoryInformation.address(), MemoryInformationSize, ReturnSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapViewOfFileNuma2$MH() {
        return cfapi_h$constants$26.MapViewOfFileNuma2$MH();
    }
    public static @C("PVOID") MemoryAddress MapViewOfFileNuma2 (@C("HANDLE") Addressable FileMappingHandle, @C("HANDLE") Addressable ProcessHandle, @C("ULONG64") long Offset, @C("PVOID") Addressable BaseAddress, @C("SIZE_T") long ViewSize, @C("ULONG") int AllocationType, @C("ULONG") int PageProtection, @C("ULONG") int PreferredNode) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.MapViewOfFileNuma2$MH().invokeExact(FileMappingHandle.address(), ProcessHandle.address(), Offset, BaseAddress.address(), ViewSize, AllocationType, PageProtection, PreferredNode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapViewOfFile2$MH() {
        return cfapi_h$constants$26.MapViewOfFile2$MH();
    }
    public static @C("PVOID") MemoryAddress MapViewOfFile2 (@C("HANDLE") Addressable FileMappingHandle, @C("HANDLE") Addressable ProcessHandle, @C("ULONG64") long Offset, @C("PVOID") Addressable BaseAddress, @C("SIZE_T") long ViewSize, @C("ULONG") int AllocationType, @C("ULONG") int PageProtection) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.MapViewOfFile2$MH().invokeExact(FileMappingHandle.address(), ProcessHandle.address(), Offset, BaseAddress.address(), ViewSize, AllocationType, PageProtection);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
}


