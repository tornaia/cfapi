// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$57 extends cfapi_h$constants$56 {

    /* package-private */ cfapi_h$constants$57() {}
    static final MemoryLayout _MIDL_STUB_DESC$pfnAllocate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$pfnAllocate$LAYOUT() { return _MIDL_STUB_DESC$pfnAllocate$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$pfnAllocate$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnAllocate")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$pfnAllocate$VH() { return _MIDL_STUB_DESC$pfnAllocate$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$pfnFree$LAYOUT() { return _MIDL_STUB_DESC$pfnFree$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$pfnFree$VH() { return _MIDL_STUB_DESC$pfnFree$VH_; }

    static final MemoryLayout IMPLICIT_HANDLE_INFO$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("pAutoHandle"),
        C_POINTER.withName("pPrimitiveHandle"),
        C_POINTER.withName("pGenericBindingInfo")
    );
    static final jdk.incubator.foreign.MemoryLayout IMPLICIT_HANDLE_INFO$struct$LAYOUT() { return IMPLICIT_HANDLE_INFO$struct$LAYOUT_; }

    static final MemoryLayout IMPLICIT_HANDLE_INFO$pAutoHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMPLICIT_HANDLE_INFO$pAutoHandle$LAYOUT() { return IMPLICIT_HANDLE_INFO$pAutoHandle$LAYOUT_; }

    static final VarHandle IMPLICIT_HANDLE_INFO$pAutoHandle$VH_ = MemoryHandles.asAddressVarHandle(IMPLICIT_HANDLE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAutoHandle")));
    static final java.lang.invoke.VarHandle IMPLICIT_HANDLE_INFO$pAutoHandle$VH() { return IMPLICIT_HANDLE_INFO$pAutoHandle$VH_; }

    static final MemoryLayout IMPLICIT_HANDLE_INFO$pPrimitiveHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMPLICIT_HANDLE_INFO$pPrimitiveHandle$LAYOUT() { return IMPLICIT_HANDLE_INFO$pPrimitiveHandle$LAYOUT_; }

    static final VarHandle IMPLICIT_HANDLE_INFO$pPrimitiveHandle$VH_ = MemoryHandles.asAddressVarHandle(IMPLICIT_HANDLE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pPrimitiveHandle")));
    static final java.lang.invoke.VarHandle IMPLICIT_HANDLE_INFO$pPrimitiveHandle$VH() { return IMPLICIT_HANDLE_INFO$pPrimitiveHandle$VH_; }

    static final MemoryLayout IMPLICIT_HANDLE_INFO$pGenericBindingInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMPLICIT_HANDLE_INFO$pGenericBindingInfo$LAYOUT() { return IMPLICIT_HANDLE_INFO$pGenericBindingInfo$LAYOUT_; }

    static final VarHandle IMPLICIT_HANDLE_INFO$pGenericBindingInfo$VH_ = MemoryHandles.asAddressVarHandle(IMPLICIT_HANDLE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pGenericBindingInfo")));
    static final java.lang.invoke.VarHandle IMPLICIT_HANDLE_INFO$pGenericBindingInfo$VH() { return IMPLICIT_HANDLE_INFO$pGenericBindingInfo$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$apfnNdrRundownRoutines$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$apfnNdrRundownRoutines$LAYOUT() { return _MIDL_STUB_DESC$apfnNdrRundownRoutines$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$apfnNdrRundownRoutines$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("apfnNdrRundownRoutines")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$apfnNdrRundownRoutines$VH() { return _MIDL_STUB_DESC$apfnNdrRundownRoutines$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$aGenericBindingRoutinePairs$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$aGenericBindingRoutinePairs$LAYOUT() { return _MIDL_STUB_DESC$aGenericBindingRoutinePairs$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$aGenericBindingRoutinePairs$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("aGenericBindingRoutinePairs")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$aGenericBindingRoutinePairs$VH() { return _MIDL_STUB_DESC$aGenericBindingRoutinePairs$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$apfnExprEval$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$apfnExprEval$LAYOUT() { return _MIDL_STUB_DESC$apfnExprEval$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$apfnExprEval$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("apfnExprEval")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$apfnExprEval$VH() { return _MIDL_STUB_DESC$apfnExprEval$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$aXmitQuintuple$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$aXmitQuintuple$LAYOUT() { return _MIDL_STUB_DESC$aXmitQuintuple$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$aXmitQuintuple$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("aXmitQuintuple")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$aXmitQuintuple$VH() { return _MIDL_STUB_DESC$aXmitQuintuple$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$pFormatTypes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$pFormatTypes$LAYOUT() { return _MIDL_STUB_DESC$pFormatTypes$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$pFormatTypes$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pFormatTypes")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$pFormatTypes$VH() { return _MIDL_STUB_DESC$pFormatTypes$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$fCheckBounds$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$fCheckBounds$LAYOUT() { return _MIDL_STUB_DESC$fCheckBounds$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$fCheckBounds$VH_ = _MIDL_STUB_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fCheckBounds"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$fCheckBounds$VH() { return _MIDL_STUB_DESC$fCheckBounds$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$Version$LAYOUT() { return _MIDL_STUB_DESC$Version$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$Version$VH_ = _MIDL_STUB_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$Version$VH() { return _MIDL_STUB_DESC$Version$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$pMallocFreeStruct$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$pMallocFreeStruct$LAYOUT() { return _MIDL_STUB_DESC$pMallocFreeStruct$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$pMallocFreeStruct$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pMallocFreeStruct")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$pMallocFreeStruct$VH() { return _MIDL_STUB_DESC$pMallocFreeStruct$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$MIDLVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$MIDLVersion$LAYOUT() { return _MIDL_STUB_DESC$MIDLVersion$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$MIDLVersion$VH_ = _MIDL_STUB_DESC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MIDLVersion"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$MIDLVersion$VH() { return _MIDL_STUB_DESC$MIDLVersion$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$CommFaultOffsets$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$CommFaultOffsets$LAYOUT() { return _MIDL_STUB_DESC$CommFaultOffsets$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$CommFaultOffsets$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CommFaultOffsets")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$CommFaultOffsets$VH() { return _MIDL_STUB_DESC$CommFaultOffsets$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$aUserMarshalQuadruple$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$aUserMarshalQuadruple$LAYOUT() { return _MIDL_STUB_DESC$aUserMarshalQuadruple$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$aUserMarshalQuadruple$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("aUserMarshalQuadruple")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$aUserMarshalQuadruple$VH() { return _MIDL_STUB_DESC$aUserMarshalQuadruple$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$NotifyRoutineTable$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$NotifyRoutineTable$LAYOUT() { return _MIDL_STUB_DESC$NotifyRoutineTable$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$NotifyRoutineTable$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NotifyRoutineTable")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$NotifyRoutineTable$VH() { return _MIDL_STUB_DESC$NotifyRoutineTable$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$mFlags$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$mFlags$LAYOUT() { return _MIDL_STUB_DESC$mFlags$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$mFlags$VH_ = _MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("mFlags"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$mFlags$VH() { return _MIDL_STUB_DESC$mFlags$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$CsRoutineTables$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$CsRoutineTables$LAYOUT() { return _MIDL_STUB_DESC$CsRoutineTables$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$CsRoutineTables$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CsRoutineTables")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$CsRoutineTables$VH() { return _MIDL_STUB_DESC$CsRoutineTables$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$ProxyServerInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$ProxyServerInfo$LAYOUT() { return _MIDL_STUB_DESC$ProxyServerInfo$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$ProxyServerInfo$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProxyServerInfo")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$ProxyServerInfo$VH() { return _MIDL_STUB_DESC$ProxyServerInfo$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$pExprInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$pExprInfo$LAYOUT() { return _MIDL_STUB_DESC$pExprInfo$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$pExprInfo$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pExprInfo")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$pExprInfo$VH() { return _MIDL_STUB_DESC$pExprInfo$VH_; }

    static final MemoryLayout _MIDL_FORMAT_STRING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Pad"),
        MemoryLayout.ofSequence(C_CHAR).withName("Format")
    ).withName("_MIDL_FORMAT_STRING");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_FORMAT_STRING$struct$LAYOUT() { return _MIDL_FORMAT_STRING$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_FORMAT_STRING$Pad$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_FORMAT_STRING$Pad$LAYOUT() { return _MIDL_FORMAT_STRING$Pad$LAYOUT_; }

    static final VarHandle _MIDL_FORMAT_STRING$Pad$VH_ = _MIDL_FORMAT_STRING$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Pad"));
    static final java.lang.invoke.VarHandle _MIDL_FORMAT_STRING$Pad$VH() { return _MIDL_FORMAT_STRING$Pad$VH_; }

    static final MemoryLayout _MIDL_METHOD_PROPERTY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Id"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Value")
    ).withName("_MIDL_METHOD_PROPERTY");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_METHOD_PROPERTY$struct$LAYOUT() { return _MIDL_METHOD_PROPERTY$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_METHOD_PROPERTY$Id$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_METHOD_PROPERTY$Id$LAYOUT() { return _MIDL_METHOD_PROPERTY$Id$LAYOUT_; }

    static final VarHandle _MIDL_METHOD_PROPERTY$Id$VH_ = _MIDL_METHOD_PROPERTY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Id"));
    static final java.lang.invoke.VarHandle _MIDL_METHOD_PROPERTY$Id$VH() { return _MIDL_METHOD_PROPERTY$Id$VH_; }

    static final MemoryLayout _MIDL_METHOD_PROPERTY$Value$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_METHOD_PROPERTY$Value$LAYOUT() { return _MIDL_METHOD_PROPERTY$Value$LAYOUT_; }

    static final VarHandle _MIDL_METHOD_PROPERTY$Value$VH_ = _MIDL_METHOD_PROPERTY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Value"));
    static final java.lang.invoke.VarHandle _MIDL_METHOD_PROPERTY$Value$VH() { return _MIDL_METHOD_PROPERTY$Value$VH_; }

    static final MemoryLayout _MIDL_METHOD_PROPERTY_MAP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Count"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("Properties")
    ).withName("_MIDL_METHOD_PROPERTY_MAP");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_METHOD_PROPERTY_MAP$struct$LAYOUT() { return _MIDL_METHOD_PROPERTY_MAP$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_METHOD_PROPERTY_MAP$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_METHOD_PROPERTY_MAP$Count$LAYOUT() { return _MIDL_METHOD_PROPERTY_MAP$Count$LAYOUT_; }

    static final VarHandle _MIDL_METHOD_PROPERTY_MAP$Count$VH_ = _MIDL_METHOD_PROPERTY_MAP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _MIDL_METHOD_PROPERTY_MAP$Count$VH() { return _MIDL_METHOD_PROPERTY_MAP$Count$VH_; }

    static final MemoryLayout _MIDL_METHOD_PROPERTY_MAP$Properties$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_METHOD_PROPERTY_MAP$Properties$LAYOUT() { return _MIDL_METHOD_PROPERTY_MAP$Properties$LAYOUT_; }

    static final VarHandle _MIDL_METHOD_PROPERTY_MAP$Properties$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_METHOD_PROPERTY_MAP$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Properties")));
    static final java.lang.invoke.VarHandle _MIDL_METHOD_PROPERTY_MAP$Properties$VH() { return _MIDL_METHOD_PROPERTY_MAP$Properties$VH_; }

    static final MemoryLayout _MIDL_INTERFACE_METHOD_PROPERTIES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("MethodCount"),
        MemoryLayout.ofPaddingBits(48),
        C_POINTER.withName("MethodProperties")
    ).withName("_MIDL_INTERFACE_METHOD_PROPERTIES");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_INTERFACE_METHOD_PROPERTIES$struct$LAYOUT() { return _MIDL_INTERFACE_METHOD_PROPERTIES$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_INTERFACE_METHOD_PROPERTIES$MethodCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_INTERFACE_METHOD_PROPERTIES$MethodCount$LAYOUT() { return _MIDL_INTERFACE_METHOD_PROPERTIES$MethodCount$LAYOUT_; }

    static final VarHandle _MIDL_INTERFACE_METHOD_PROPERTIES$MethodCount$VH_ = _MIDL_INTERFACE_METHOD_PROPERTIES$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MethodCount"));
    static final java.lang.invoke.VarHandle _MIDL_INTERFACE_METHOD_PROPERTIES$MethodCount$VH() { return _MIDL_INTERFACE_METHOD_PROPERTIES$MethodCount$VH_; }

    static final MemoryLayout _MIDL_INTERFACE_METHOD_PROPERTIES$MethodProperties$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_INTERFACE_METHOD_PROPERTIES$MethodProperties$LAYOUT() { return _MIDL_INTERFACE_METHOD_PROPERTIES$MethodProperties$LAYOUT_; }

    static final VarHandle _MIDL_INTERFACE_METHOD_PROPERTIES$MethodProperties$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_INTERFACE_METHOD_PROPERTIES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MethodProperties")));
    static final java.lang.invoke.VarHandle _MIDL_INTERFACE_METHOD_PROPERTIES$MethodProperties$VH() { return _MIDL_INTERFACE_METHOD_PROPERTIES$MethodProperties$VH_; }

    static final MemoryLayout _MIDL_SERVER_INFO_$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pStubDesc"),
        C_POINTER.withName("DispatchTable"),
        C_POINTER.withName("ProcString"),
        C_POINTER.withName("FmtStringOffset"),
        C_POINTER.withName("ThunkTable"),
        C_POINTER.withName("pTransferSyntax"),
        C_LONGLONG.withName("nCount"),
        C_POINTER.withName("pSyntaxInfo")
    ).withName("_MIDL_SERVER_INFO_");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SERVER_INFO_$struct$LAYOUT() { return _MIDL_SERVER_INFO_$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_SERVER_INFO_$pStubDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SERVER_INFO_$pStubDesc$LAYOUT() { return _MIDL_SERVER_INFO_$pStubDesc$LAYOUT_; }

    static final VarHandle _MIDL_SERVER_INFO_$pStubDesc$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SERVER_INFO_$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pStubDesc")));
    static final java.lang.invoke.VarHandle _MIDL_SERVER_INFO_$pStubDesc$VH() { return _MIDL_SERVER_INFO_$pStubDesc$VH_; }

    static final MemoryLayout _MIDL_SERVER_INFO_$DispatchTable$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SERVER_INFO_$DispatchTable$LAYOUT() { return _MIDL_SERVER_INFO_$DispatchTable$LAYOUT_; }

    static final VarHandle _MIDL_SERVER_INFO_$DispatchTable$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SERVER_INFO_$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DispatchTable")));
    static final java.lang.invoke.VarHandle _MIDL_SERVER_INFO_$DispatchTable$VH() { return _MIDL_SERVER_INFO_$DispatchTable$VH_; }

    static final MemoryLayout _MIDL_SERVER_INFO_$ProcString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SERVER_INFO_$ProcString$LAYOUT() { return _MIDL_SERVER_INFO_$ProcString$LAYOUT_; }

    static final VarHandle _MIDL_SERVER_INFO_$ProcString$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SERVER_INFO_$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcString")));
    static final java.lang.invoke.VarHandle _MIDL_SERVER_INFO_$ProcString$VH() { return _MIDL_SERVER_INFO_$ProcString$VH_; }

    static final MemoryLayout _MIDL_SERVER_INFO_$FmtStringOffset$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SERVER_INFO_$FmtStringOffset$LAYOUT() { return _MIDL_SERVER_INFO_$FmtStringOffset$LAYOUT_; }

    static final VarHandle _MIDL_SERVER_INFO_$FmtStringOffset$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SERVER_INFO_$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FmtStringOffset")));
    static final java.lang.invoke.VarHandle _MIDL_SERVER_INFO_$FmtStringOffset$VH() { return _MIDL_SERVER_INFO_$FmtStringOffset$VH_; }

    static final MemoryLayout _MIDL_SERVER_INFO_$ThunkTable$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SERVER_INFO_$ThunkTable$LAYOUT() { return _MIDL_SERVER_INFO_$ThunkTable$LAYOUT_; }

    static final VarHandle _MIDL_SERVER_INFO_$ThunkTable$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SERVER_INFO_$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ThunkTable")));
    static final java.lang.invoke.VarHandle _MIDL_SERVER_INFO_$ThunkTable$VH() { return _MIDL_SERVER_INFO_$ThunkTable$VH_; }

    static final MemoryLayout _MIDL_SERVER_INFO_$pTransferSyntax$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SERVER_INFO_$pTransferSyntax$LAYOUT() { return _MIDL_SERVER_INFO_$pTransferSyntax$LAYOUT_; }

    static final VarHandle _MIDL_SERVER_INFO_$pTransferSyntax$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SERVER_INFO_$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pTransferSyntax")));
    static final java.lang.invoke.VarHandle _MIDL_SERVER_INFO_$pTransferSyntax$VH() { return _MIDL_SERVER_INFO_$pTransferSyntax$VH_; }

    static final MemoryLayout _MIDL_SERVER_INFO_$nCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SERVER_INFO_$nCount$LAYOUT() { return _MIDL_SERVER_INFO_$nCount$LAYOUT_; }

    static final VarHandle _MIDL_SERVER_INFO_$nCount$VH_ = _MIDL_SERVER_INFO_$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nCount"));
    static final java.lang.invoke.VarHandle _MIDL_SERVER_INFO_$nCount$VH() { return _MIDL_SERVER_INFO_$nCount$VH_; }

    static final MemoryLayout _MIDL_SERVER_INFO_$pSyntaxInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SERVER_INFO_$pSyntaxInfo$LAYOUT() { return _MIDL_SERVER_INFO_$pSyntaxInfo$LAYOUT_; }

    static final VarHandle _MIDL_SERVER_INFO_$pSyntaxInfo$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SERVER_INFO_$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pSyntaxInfo")));
    static final java.lang.invoke.VarHandle _MIDL_SERVER_INFO_$pSyntaxInfo$VH() { return _MIDL_SERVER_INFO_$pSyntaxInfo$VH_; }

    static final MemoryLayout _MIDL_STUBLESS_PROXY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pStubDesc"),
        C_POINTER.withName("ProcFormatString"),
        C_POINTER.withName("FormatStringOffset"),
        C_POINTER.withName("pTransferSyntax"),
        C_LONGLONG.withName("nCount"),
        C_POINTER.withName("pSyntaxInfo")
    ).withName("_MIDL_STUBLESS_PROXY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUBLESS_PROXY_INFO$struct$LAYOUT() { return _MIDL_STUBLESS_PROXY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_STUBLESS_PROXY_INFO$pStubDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUBLESS_PROXY_INFO$pStubDesc$LAYOUT() { return _MIDL_STUBLESS_PROXY_INFO$pStubDesc$LAYOUT_; }

    static final VarHandle _MIDL_STUBLESS_PROXY_INFO$pStubDesc$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUBLESS_PROXY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pStubDesc")));
    static final java.lang.invoke.VarHandle _MIDL_STUBLESS_PROXY_INFO$pStubDesc$VH() { return _MIDL_STUBLESS_PROXY_INFO$pStubDesc$VH_; }

    static final MemoryLayout _MIDL_STUBLESS_PROXY_INFO$ProcFormatString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUBLESS_PROXY_INFO$ProcFormatString$LAYOUT() { return _MIDL_STUBLESS_PROXY_INFO$ProcFormatString$LAYOUT_; }

    static final VarHandle _MIDL_STUBLESS_PROXY_INFO$ProcFormatString$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUBLESS_PROXY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcFormatString")));
    static final java.lang.invoke.VarHandle _MIDL_STUBLESS_PROXY_INFO$ProcFormatString$VH() { return _MIDL_STUBLESS_PROXY_INFO$ProcFormatString$VH_; }

    static final MemoryLayout _MIDL_STUBLESS_PROXY_INFO$FormatStringOffset$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUBLESS_PROXY_INFO$FormatStringOffset$LAYOUT() { return _MIDL_STUBLESS_PROXY_INFO$FormatStringOffset$LAYOUT_; }

    static final VarHandle _MIDL_STUBLESS_PROXY_INFO$FormatStringOffset$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUBLESS_PROXY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FormatStringOffset")));
    static final java.lang.invoke.VarHandle _MIDL_STUBLESS_PROXY_INFO$FormatStringOffset$VH() { return _MIDL_STUBLESS_PROXY_INFO$FormatStringOffset$VH_; }

    static final MemoryLayout _MIDL_STUBLESS_PROXY_INFO$pTransferSyntax$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUBLESS_PROXY_INFO$pTransferSyntax$LAYOUT() { return _MIDL_STUBLESS_PROXY_INFO$pTransferSyntax$LAYOUT_; }

    static final VarHandle _MIDL_STUBLESS_PROXY_INFO$pTransferSyntax$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUBLESS_PROXY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pTransferSyntax")));
    static final java.lang.invoke.VarHandle _MIDL_STUBLESS_PROXY_INFO$pTransferSyntax$VH() { return _MIDL_STUBLESS_PROXY_INFO$pTransferSyntax$VH_; }

    static final MemoryLayout _MIDL_STUBLESS_PROXY_INFO$nCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUBLESS_PROXY_INFO$nCount$LAYOUT() { return _MIDL_STUBLESS_PROXY_INFO$nCount$LAYOUT_; }

    static final VarHandle _MIDL_STUBLESS_PROXY_INFO$nCount$VH_ = _MIDL_STUBLESS_PROXY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("nCount"));
    static final java.lang.invoke.VarHandle _MIDL_STUBLESS_PROXY_INFO$nCount$VH() { return _MIDL_STUBLESS_PROXY_INFO$nCount$VH_; }

    static final MemoryLayout _MIDL_STUBLESS_PROXY_INFO$pSyntaxInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUBLESS_PROXY_INFO$pSyntaxInfo$LAYOUT() { return _MIDL_STUBLESS_PROXY_INFO$pSyntaxInfo$LAYOUT_; }

    static final VarHandle _MIDL_STUBLESS_PROXY_INFO$pSyntaxInfo$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUBLESS_PROXY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pSyntaxInfo")));
    static final java.lang.invoke.VarHandle _MIDL_STUBLESS_PROXY_INFO$pSyntaxInfo$VH() { return _MIDL_STUBLESS_PROXY_INFO$pSyntaxInfo$VH_; }

    static final MemoryLayout _MIDL_SYNTAX_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("SyntaxGUID"),
            MemoryLayout.ofStruct(
                C_SHORT.withName("MajorVersion"),
                C_SHORT.withName("MinorVersion")
            ).withName("SyntaxVersion")
        ).withName("TransferSyntax"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("DispatchTable"),
        C_POINTER.withName("ProcString"),
        C_POINTER.withName("FmtStringOffset"),
        C_POINTER.withName("TypeString"),
        C_POINTER.withName("aUserMarshalQuadruple"),
        C_POINTER.withName("pMethodProperties"),
        C_LONGLONG.withName("pReserved2")
    ).withName("_MIDL_SYNTAX_INFO");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SYNTAX_INFO$struct$LAYOUT() { return _MIDL_SYNTAX_INFO$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_SYNTAX_INFO$DispatchTable$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SYNTAX_INFO$DispatchTable$LAYOUT() { return _MIDL_SYNTAX_INFO$DispatchTable$LAYOUT_; }

    static final VarHandle _MIDL_SYNTAX_INFO$DispatchTable$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SYNTAX_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DispatchTable")));
    static final java.lang.invoke.VarHandle _MIDL_SYNTAX_INFO$DispatchTable$VH() { return _MIDL_SYNTAX_INFO$DispatchTable$VH_; }

    static final MemoryLayout _MIDL_SYNTAX_INFO$ProcString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SYNTAX_INFO$ProcString$LAYOUT() { return _MIDL_SYNTAX_INFO$ProcString$LAYOUT_; }

    static final VarHandle _MIDL_SYNTAX_INFO$ProcString$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SYNTAX_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcString")));
    static final java.lang.invoke.VarHandle _MIDL_SYNTAX_INFO$ProcString$VH() { return _MIDL_SYNTAX_INFO$ProcString$VH_; }

    static final MemoryLayout _MIDL_SYNTAX_INFO$FmtStringOffset$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SYNTAX_INFO$FmtStringOffset$LAYOUT() { return _MIDL_SYNTAX_INFO$FmtStringOffset$LAYOUT_; }

    static final VarHandle _MIDL_SYNTAX_INFO$FmtStringOffset$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SYNTAX_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FmtStringOffset")));
    static final java.lang.invoke.VarHandle _MIDL_SYNTAX_INFO$FmtStringOffset$VH() { return _MIDL_SYNTAX_INFO$FmtStringOffset$VH_; }

    static final MemoryLayout _MIDL_SYNTAX_INFO$TypeString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SYNTAX_INFO$TypeString$LAYOUT() { return _MIDL_SYNTAX_INFO$TypeString$LAYOUT_; }

    static final VarHandle _MIDL_SYNTAX_INFO$TypeString$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SYNTAX_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TypeString")));
    static final java.lang.invoke.VarHandle _MIDL_SYNTAX_INFO$TypeString$VH() { return _MIDL_SYNTAX_INFO$TypeString$VH_; }

    static final MemoryLayout _MIDL_SYNTAX_INFO$aUserMarshalQuadruple$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SYNTAX_INFO$aUserMarshalQuadruple$LAYOUT() { return _MIDL_SYNTAX_INFO$aUserMarshalQuadruple$LAYOUT_; }

    static final VarHandle _MIDL_SYNTAX_INFO$aUserMarshalQuadruple$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SYNTAX_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("aUserMarshalQuadruple")));
    static final java.lang.invoke.VarHandle _MIDL_SYNTAX_INFO$aUserMarshalQuadruple$VH() { return _MIDL_SYNTAX_INFO$aUserMarshalQuadruple$VH_; }

    static final MemoryLayout _MIDL_SYNTAX_INFO$pMethodProperties$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SYNTAX_INFO$pMethodProperties$LAYOUT() { return _MIDL_SYNTAX_INFO$pMethodProperties$LAYOUT_; }

    static final VarHandle _MIDL_SYNTAX_INFO$pMethodProperties$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_SYNTAX_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pMethodProperties")));
    static final java.lang.invoke.VarHandle _MIDL_SYNTAX_INFO$pMethodProperties$VH() { return _MIDL_SYNTAX_INFO$pMethodProperties$VH_; }

    static final MemoryLayout _MIDL_SYNTAX_INFO$pReserved2$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_SYNTAX_INFO$pReserved2$LAYOUT() { return _MIDL_SYNTAX_INFO$pReserved2$LAYOUT_; }

    static final VarHandle _MIDL_SYNTAX_INFO$pReserved2$VH_ = _MIDL_SYNTAX_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pReserved2"));
    static final java.lang.invoke.VarHandle _MIDL_SYNTAX_INFO$pReserved2$VH() { return _MIDL_SYNTAX_INFO$pReserved2$VH_; }

    static final MemoryLayout _CLIENT_CALL_RETURN$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Simple")
    ).withName("_CLIENT_CALL_RETURN");
    static final jdk.incubator.foreign.MemoryLayout _CLIENT_CALL_RETURN$struct$LAYOUT() { return _CLIENT_CALL_RETURN$struct$LAYOUT_; }

    static final MemoryLayout _CLIENT_CALL_RETURN$Pointer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLIENT_CALL_RETURN$Pointer$LAYOUT() { return _CLIENT_CALL_RETURN$Pointer$LAYOUT_; }

    static final VarHandle _CLIENT_CALL_RETURN$Pointer$VH_ = MemoryHandles.asAddressVarHandle(_CLIENT_CALL_RETURN$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Pointer")));
    static final java.lang.invoke.VarHandle _CLIENT_CALL_RETURN$Pointer$VH() { return _CLIENT_CALL_RETURN$Pointer$VH_; }

    static final MemoryLayout _CLIENT_CALL_RETURN$Simple$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CLIENT_CALL_RETURN$Simple$LAYOUT() { return _CLIENT_CALL_RETURN$Simple$LAYOUT_; }

    static final VarHandle _CLIENT_CALL_RETURN$Simple$VH_ = _CLIENT_CALL_RETURN$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Simple"));
    static final java.lang.invoke.VarHandle _CLIENT_CALL_RETURN$Simple$VH() { return _CLIENT_CALL_RETURN$Simple$VH_; }

    static final int XLAT_SERVER() { return (int)1L; }

    static final int XLAT_CLIENT() { return (int)2L; }

    static final MemoryLayout _FULL_PTR_XLAT_TABLES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("RefIdToPointer"),
        C_POINTER.withName("PointerToRefId"),
        C_LONG.withName("NextRefId"),
        C_INT.withName("XlatSide")
    ).withName("_FULL_PTR_XLAT_TABLES");
    static final jdk.incubator.foreign.MemoryLayout _FULL_PTR_XLAT_TABLES$struct$LAYOUT() { return _FULL_PTR_XLAT_TABLES$struct$LAYOUT_; }

    static final MemoryLayout _FULL_PTR_XLAT_TABLES$RefIdToPointer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _FULL_PTR_XLAT_TABLES$RefIdToPointer$LAYOUT() { return _FULL_PTR_XLAT_TABLES$RefIdToPointer$LAYOUT_; }

    static final VarHandle _FULL_PTR_XLAT_TABLES$RefIdToPointer$VH_ = MemoryHandles.asAddressVarHandle(_FULL_PTR_XLAT_TABLES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RefIdToPointer")));
    static final java.lang.invoke.VarHandle _FULL_PTR_XLAT_TABLES$RefIdToPointer$VH() { return _FULL_PTR_XLAT_TABLES$RefIdToPointer$VH_; }

    static final MemoryLayout _FULL_PTR_XLAT_TABLES$PointerToRefId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _FULL_PTR_XLAT_TABLES$PointerToRefId$LAYOUT() { return _FULL_PTR_XLAT_TABLES$PointerToRefId$LAYOUT_; }

    static final VarHandle _FULL_PTR_XLAT_TABLES$PointerToRefId$VH_ = MemoryHandles.asAddressVarHandle(_FULL_PTR_XLAT_TABLES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PointerToRefId")));
    static final java.lang.invoke.VarHandle _FULL_PTR_XLAT_TABLES$PointerToRefId$VH() { return _FULL_PTR_XLAT_TABLES$PointerToRefId$VH_; }

    static final MemoryLayout _FULL_PTR_XLAT_TABLES$NextRefId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FULL_PTR_XLAT_TABLES$NextRefId$LAYOUT() { return _FULL_PTR_XLAT_TABLES$NextRefId$LAYOUT_; }

    static final VarHandle _FULL_PTR_XLAT_TABLES$NextRefId$VH_ = _FULL_PTR_XLAT_TABLES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextRefId"));
    static final java.lang.invoke.VarHandle _FULL_PTR_XLAT_TABLES$NextRefId$VH() { return _FULL_PTR_XLAT_TABLES$NextRefId$VH_; }

    static final MemoryLayout _FULL_PTR_XLAT_TABLES$XlatSide$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _FULL_PTR_XLAT_TABLES$XlatSide$LAYOUT() { return _FULL_PTR_XLAT_TABLES$XlatSide$LAYOUT_; }

    static final VarHandle _FULL_PTR_XLAT_TABLES$XlatSide$VH_ = _FULL_PTR_XLAT_TABLES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("XlatSide"));
    static final java.lang.invoke.VarHandle _FULL_PTR_XLAT_TABLES$XlatSide$VH() { return _FULL_PTR_XLAT_TABLES$XlatSide$VH_; }

    static final int SYSTEM_HANDLE_FILE() { return (int)0L; }

    static final int SYSTEM_HANDLE_SEMAPHORE() { return (int)1L; }

    static final int SYSTEM_HANDLE_EVENT() { return (int)2L; }

    static final int SYSTEM_HANDLE_MUTEX() { return (int)3L; }

    static final int SYSTEM_HANDLE_PROCESS() { return (int)4L; }

    static final int SYSTEM_HANDLE_TOKEN() { return (int)5L; }

    static final int SYSTEM_HANDLE_SECTION() { return (int)6L; }

    static final int SYSTEM_HANDLE_REG_KEY() { return (int)7L; }

    static final int SYSTEM_HANDLE_THREAD() { return (int)8L; }

    static final int SYSTEM_HANDLE_COMPOSITION_OBJECT() { return (int)9L; }

    static final int SYSTEM_HANDLE_SOCKET() { return (int)10L; }

    static final int SYSTEM_HANDLE_JOB() { return (int)11L; }

    static final int SYSTEM_HANDLE_PIPE() { return (int)12L; }

    static final int SYSTEM_HANDLE_MAX() { return (int)12L; }

    static final int SYSTEM_HANDLE_INVALID() { return (int)255L; }

    static final int MidlInterceptionInfoVersionOne() { return (int)1L; }

    static final int MidlWinrtTypeSerializationInfoVersionOne() { return (int)1L; }

    static final MemoryLayout _MIDL_INTERCEPTION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ProcString"),
        C_POINTER.withName("ProcFormatOffsetTable"),
        C_LONG.withName("ProcCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("TypeString")
    ).withName("_MIDL_INTERCEPTION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_INTERCEPTION_INFO$struct$LAYOUT() { return _MIDL_INTERCEPTION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_INTERCEPTION_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_INTERCEPTION_INFO$Version$LAYOUT() { return _MIDL_INTERCEPTION_INFO$Version$LAYOUT_; }

    static final VarHandle _MIDL_INTERCEPTION_INFO$Version$VH_ = _MIDL_INTERCEPTION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _MIDL_INTERCEPTION_INFO$Version$VH() { return _MIDL_INTERCEPTION_INFO$Version$VH_; }

    static final MemoryLayout _MIDL_INTERCEPTION_INFO$ProcString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_INTERCEPTION_INFO$ProcString$LAYOUT() { return _MIDL_INTERCEPTION_INFO$ProcString$LAYOUT_; }

    static final VarHandle _MIDL_INTERCEPTION_INFO$ProcString$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_INTERCEPTION_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcString")));
    static final java.lang.invoke.VarHandle _MIDL_INTERCEPTION_INFO$ProcString$VH() { return _MIDL_INTERCEPTION_INFO$ProcString$VH_; }

    static final MemoryLayout _MIDL_INTERCEPTION_INFO$ProcFormatOffsetTable$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_INTERCEPTION_INFO$ProcFormatOffsetTable$LAYOUT() { return _MIDL_INTERCEPTION_INFO$ProcFormatOffsetTable$LAYOUT_; }

    static final VarHandle _MIDL_INTERCEPTION_INFO$ProcFormatOffsetTable$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_INTERCEPTION_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcFormatOffsetTable")));
    static final java.lang.invoke.VarHandle _MIDL_INTERCEPTION_INFO$ProcFormatOffsetTable$VH() { return _MIDL_INTERCEPTION_INFO$ProcFormatOffsetTable$VH_; }

    static final MemoryLayout _MIDL_INTERCEPTION_INFO$ProcCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_INTERCEPTION_INFO$ProcCount$LAYOUT() { return _MIDL_INTERCEPTION_INFO$ProcCount$LAYOUT_; }

    static final VarHandle _MIDL_INTERCEPTION_INFO$ProcCount$VH_ = _MIDL_INTERCEPTION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProcCount"));
    static final java.lang.invoke.VarHandle _MIDL_INTERCEPTION_INFO$ProcCount$VH() { return _MIDL_INTERCEPTION_INFO$ProcCount$VH_; }

    static final MemoryLayout _MIDL_INTERCEPTION_INFO$TypeString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_INTERCEPTION_INFO$TypeString$LAYOUT() { return _MIDL_INTERCEPTION_INFO$TypeString$LAYOUT_; }

    static final VarHandle _MIDL_INTERCEPTION_INFO$TypeString$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_INTERCEPTION_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TypeString")));
    static final java.lang.invoke.VarHandle _MIDL_INTERCEPTION_INFO$TypeString$VH() { return _MIDL_INTERCEPTION_INFO$TypeString$VH_; }

    static final MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("TypeFormatString"),
        C_SHORT.withName("FormatStringSize"),
        C_SHORT.withName("TypeOffset"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("StubDesc")
    ).withName("_MIDL_WINRT_TYPE_SERIALIZATION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$struct$LAYOUT() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$Version$LAYOUT() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$Version$LAYOUT_; }

    static final VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$Version$VH_ = _MIDL_WINRT_TYPE_SERIALIZATION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$Version$VH() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$Version$VH_; }

    static final MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeFormatString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeFormatString$LAYOUT() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeFormatString$LAYOUT_; }

    static final VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeFormatString$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_WINRT_TYPE_SERIALIZATION_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TypeFormatString")));
    static final java.lang.invoke.VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeFormatString$VH() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeFormatString$VH_; }

    static final MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$FormatStringSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$FormatStringSize$LAYOUT() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$FormatStringSize$LAYOUT_; }

    static final VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$FormatStringSize$VH_ = _MIDL_WINRT_TYPE_SERIALIZATION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FormatStringSize"));
    static final java.lang.invoke.VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$FormatStringSize$VH() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$FormatStringSize$VH_; }

    static final MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeOffset$LAYOUT() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeOffset$LAYOUT_; }

    static final VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeOffset$VH_ = _MIDL_WINRT_TYPE_SERIALIZATION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("TypeOffset"));
    static final java.lang.invoke.VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeOffset$VH() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$TypeOffset$VH_; }

    static final MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$StubDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_WINRT_TYPE_SERIALIZATION_INFO$StubDesc$LAYOUT() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$StubDesc$LAYOUT_; }

    static final VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$StubDesc$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_WINRT_TYPE_SERIALIZATION_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StubDesc")));
    static final java.lang.invoke.VarHandle _MIDL_WINRT_TYPE_SERIALIZATION_INFO$StubDesc$VH() { return _MIDL_WINRT_TYPE_SERIALIZATION_INFO$StubDesc$VH_; }

    static final FunctionDescriptor NdrClientGetSupportedSyntaxes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrClientGetSupportedSyntaxes$FUNC() { return NdrClientGetSupportedSyntaxes$FUNC_; }

    static final MethodHandle NdrClientGetSupportedSyntaxes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrClientGetSupportedSyntaxes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrClientGetSupportedSyntaxes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrClientGetSupportedSyntaxes$MH() { return NdrClientGetSupportedSyntaxes$MH_; }

    static final FunctionDescriptor NdrServerGetSupportedSyntaxes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerGetSupportedSyntaxes$FUNC() { return NdrServerGetSupportedSyntaxes$FUNC_; }

    static final MethodHandle NdrServerGetSupportedSyntaxes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerGetSupportedSyntaxes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrServerGetSupportedSyntaxes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerGetSupportedSyntaxes$MH() { return NdrServerGetSupportedSyntaxes$MH_; }

    static final FunctionDescriptor NdrSimpleTypeMarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrSimpleTypeMarshall$FUNC() { return NdrSimpleTypeMarshall$FUNC_; }

    static final MethodHandle NdrSimpleTypeMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrSimpleTypeMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)V",
        NdrSimpleTypeMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrSimpleTypeMarshall$MH() { return NdrSimpleTypeMarshall$MH_; }

    static final FunctionDescriptor NdrPointerMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrPointerMarshall$FUNC() { return NdrPointerMarshall$FUNC_; }

    static final MethodHandle NdrPointerMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrPointerMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrPointerMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrPointerMarshall$MH() { return NdrPointerMarshall$MH_; }

    static final FunctionDescriptor NdrCsArrayMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCsArrayMarshall$FUNC() { return NdrCsArrayMarshall$FUNC_; }

    static final MethodHandle NdrCsArrayMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCsArrayMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrCsArrayMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCsArrayMarshall$MH() { return NdrCsArrayMarshall$MH_; }

    static final FunctionDescriptor NdrCsTagMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCsTagMarshall$FUNC() { return NdrCsTagMarshall$FUNC_; }

    static final MethodHandle NdrCsTagMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCsTagMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrCsTagMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCsTagMarshall$MH() { return NdrCsTagMarshall$MH_; }

    static final FunctionDescriptor NdrSimpleStructMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrSimpleStructMarshall$FUNC() { return NdrSimpleStructMarshall$FUNC_; }

    static final MethodHandle NdrSimpleStructMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrSimpleStructMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrSimpleStructMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrSimpleStructMarshall$MH() { return NdrSimpleStructMarshall$MH_; }

    static final FunctionDescriptor NdrConformantStructMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantStructMarshall$FUNC() { return NdrConformantStructMarshall$FUNC_; }

    static final MethodHandle NdrConformantStructMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantStructMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantStructMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantStructMarshall$MH() { return NdrConformantStructMarshall$MH_; }

    static final FunctionDescriptor NdrConformantVaryingStructMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingStructMarshall$FUNC() { return NdrConformantVaryingStructMarshall$FUNC_; }

    static final MethodHandle NdrConformantVaryingStructMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingStructMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantVaryingStructMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingStructMarshall$MH() { return NdrConformantVaryingStructMarshall$MH_; }

    static final FunctionDescriptor NdrComplexStructMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexStructMarshall$FUNC() { return NdrComplexStructMarshall$FUNC_; }

    static final MethodHandle NdrComplexStructMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexStructMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrComplexStructMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexStructMarshall$MH() { return NdrComplexStructMarshall$MH_; }

    static final FunctionDescriptor NdrFixedArrayMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrFixedArrayMarshall$FUNC() { return NdrFixedArrayMarshall$FUNC_; }

    static final MethodHandle NdrFixedArrayMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrFixedArrayMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrFixedArrayMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrFixedArrayMarshall$MH() { return NdrFixedArrayMarshall$MH_; }

    static final FunctionDescriptor NdrConformantArrayMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantArrayMarshall$FUNC() { return NdrConformantArrayMarshall$FUNC_; }

    static final MethodHandle NdrConformantArrayMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantArrayMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantArrayMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantArrayMarshall$MH() { return NdrConformantArrayMarshall$MH_; }

    static final FunctionDescriptor NdrConformantVaryingArrayMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingArrayMarshall$FUNC() { return NdrConformantVaryingArrayMarshall$FUNC_; }

    static final MethodHandle NdrConformantVaryingArrayMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingArrayMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantVaryingArrayMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingArrayMarshall$MH() { return NdrConformantVaryingArrayMarshall$MH_; }

    static final FunctionDescriptor NdrVaryingArrayMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrVaryingArrayMarshall$FUNC() { return NdrVaryingArrayMarshall$FUNC_; }

    static final MethodHandle NdrVaryingArrayMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrVaryingArrayMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrVaryingArrayMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrVaryingArrayMarshall$MH() { return NdrVaryingArrayMarshall$MH_; }

    static final FunctionDescriptor NdrComplexArrayMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexArrayMarshall$FUNC() { return NdrComplexArrayMarshall$FUNC_; }

    static final MethodHandle NdrComplexArrayMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexArrayMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrComplexArrayMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexArrayMarshall$MH() { return NdrComplexArrayMarshall$MH_; }

    static final FunctionDescriptor NdrNonConformantStringMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNonConformantStringMarshall$FUNC() { return NdrNonConformantStringMarshall$FUNC_; }

    static final MethodHandle NdrNonConformantStringMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNonConformantStringMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrNonConformantStringMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNonConformantStringMarshall$MH() { return NdrNonConformantStringMarshall$MH_; }

    static final FunctionDescriptor NdrConformantStringMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantStringMarshall$FUNC() { return NdrConformantStringMarshall$FUNC_; }

    static final MethodHandle NdrConformantStringMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantStringMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantStringMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantStringMarshall$MH() { return NdrConformantStringMarshall$MH_; }

    static final FunctionDescriptor NdrEncapsulatedUnionMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrEncapsulatedUnionMarshall$FUNC() { return NdrEncapsulatedUnionMarshall$FUNC_; }

    static final MethodHandle NdrEncapsulatedUnionMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrEncapsulatedUnionMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrEncapsulatedUnionMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrEncapsulatedUnionMarshall$MH() { return NdrEncapsulatedUnionMarshall$MH_; }

    static final FunctionDescriptor NdrNonEncapsulatedUnionMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNonEncapsulatedUnionMarshall$FUNC() { return NdrNonEncapsulatedUnionMarshall$FUNC_; }

    static final MethodHandle NdrNonEncapsulatedUnionMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNonEncapsulatedUnionMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrNonEncapsulatedUnionMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNonEncapsulatedUnionMarshall$MH() { return NdrNonEncapsulatedUnionMarshall$MH_; }

    static final FunctionDescriptor NdrByteCountPointerMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrByteCountPointerMarshall$FUNC() { return NdrByteCountPointerMarshall$FUNC_; }

    static final MethodHandle NdrByteCountPointerMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrByteCountPointerMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrByteCountPointerMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrByteCountPointerMarshall$MH() { return NdrByteCountPointerMarshall$MH_; }

    static final FunctionDescriptor NdrXmitOrRepAsMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrXmitOrRepAsMarshall$FUNC() { return NdrXmitOrRepAsMarshall$FUNC_; }

    static final MethodHandle NdrXmitOrRepAsMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrXmitOrRepAsMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrXmitOrRepAsMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrXmitOrRepAsMarshall$MH() { return NdrXmitOrRepAsMarshall$MH_; }

    static final FunctionDescriptor NdrUserMarshalMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrUserMarshalMarshall$FUNC() { return NdrUserMarshalMarshall$FUNC_; }

    static final MethodHandle NdrUserMarshalMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrUserMarshalMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrUserMarshalMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrUserMarshalMarshall$MH() { return NdrUserMarshalMarshall$MH_; }

    static final FunctionDescriptor NdrInterfacePointerMarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrInterfacePointerMarshall$FUNC() { return NdrInterfacePointerMarshall$FUNC_; }

    static final MethodHandle NdrInterfacePointerMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrInterfacePointerMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrInterfacePointerMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrInterfacePointerMarshall$MH() { return NdrInterfacePointerMarshall$MH_; }

    static final FunctionDescriptor NdrClientContextMarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrClientContextMarshall$FUNC() { return NdrClientContextMarshall$FUNC_; }

    static final MethodHandle NdrClientContextMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrClientContextMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        NdrClientContextMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrClientContextMarshall$MH() { return NdrClientContextMarshall$MH_; }

    static final FunctionDescriptor NdrServerContextMarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerContextMarshall$FUNC() { return NdrServerContextMarshall$FUNC_; }

    static final MethodHandle NdrServerContextMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerContextMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrServerContextMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerContextMarshall$MH() { return NdrServerContextMarshall$MH_; }

    static final FunctionDescriptor NdrServerContextMarshall$RundownRoutine$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerContextMarshall$RundownRoutine$FUNC() { return NdrServerContextMarshall$RundownRoutine$FUNC_; }

    static final FunctionDescriptor NdrServerContextNewMarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerContextNewMarshall$FUNC() { return NdrServerContextNewMarshall$FUNC_; }

    static final MethodHandle NdrServerContextNewMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerContextNewMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrServerContextNewMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerContextNewMarshall$MH() { return NdrServerContextNewMarshall$MH_; }

    static final FunctionDescriptor NdrServerContextNewMarshall$RundownRoutine$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerContextNewMarshall$RundownRoutine$FUNC() { return NdrServerContextNewMarshall$RundownRoutine$FUNC_; }

    static final FunctionDescriptor NdrSimpleTypeUnmarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrSimpleTypeUnmarshall$FUNC() { return NdrSimpleTypeUnmarshall$FUNC_; }

    static final MethodHandle NdrSimpleTypeUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrSimpleTypeUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)V",
        NdrSimpleTypeUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrSimpleTypeUnmarshall$MH() { return NdrSimpleTypeUnmarshall$MH_; }

    static final FunctionDescriptor NdrCsArrayUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCsArrayUnmarshall$FUNC() { return NdrCsArrayUnmarshall$FUNC_; }

    static final MethodHandle NdrCsArrayUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCsArrayUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrCsArrayUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCsArrayUnmarshall$MH() { return NdrCsArrayUnmarshall$MH_; }

    static final FunctionDescriptor NdrCsTagUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCsTagUnmarshall$FUNC() { return NdrCsTagUnmarshall$FUNC_; }

    static final MethodHandle NdrCsTagUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCsTagUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrCsTagUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCsTagUnmarshall$MH() { return NdrCsTagUnmarshall$MH_; }

    static final FunctionDescriptor NdrRangeUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrRangeUnmarshall$FUNC() { return NdrRangeUnmarshall$FUNC_; }

    static final MethodHandle NdrRangeUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrRangeUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrRangeUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrRangeUnmarshall$MH() { return NdrRangeUnmarshall$MH_; }

    static final FunctionDescriptor NdrCorrelationInitialize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCorrelationInitialize$FUNC() { return NdrCorrelationInitialize$FUNC_; }

    static final MethodHandle NdrCorrelationInitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCorrelationInitialize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)V",
        NdrCorrelationInitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCorrelationInitialize$MH() { return NdrCorrelationInitialize$MH_; }

    static final FunctionDescriptor NdrCorrelationPass$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCorrelationPass$FUNC() { return NdrCorrelationPass$FUNC_; }

    static final MethodHandle NdrCorrelationPass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCorrelationPass",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrCorrelationPass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCorrelationPass$MH() { return NdrCorrelationPass$MH_; }

    static final FunctionDescriptor NdrCorrelationFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCorrelationFree$FUNC() { return NdrCorrelationFree$FUNC_; }

    static final MethodHandle NdrCorrelationFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCorrelationFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrCorrelationFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCorrelationFree$MH() { return NdrCorrelationFree$MH_; }

    static final FunctionDescriptor NdrPointerUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrPointerUnmarshall$FUNC() { return NdrPointerUnmarshall$FUNC_; }

    static final MethodHandle NdrPointerUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrPointerUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrPointerUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrPointerUnmarshall$MH() { return NdrPointerUnmarshall$MH_; }

    static final FunctionDescriptor NdrSimpleStructUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrSimpleStructUnmarshall$FUNC() { return NdrSimpleStructUnmarshall$FUNC_; }

    static final MethodHandle NdrSimpleStructUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrSimpleStructUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrSimpleStructUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrSimpleStructUnmarshall$MH() { return NdrSimpleStructUnmarshall$MH_; }

    static final FunctionDescriptor NdrConformantStructUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantStructUnmarshall$FUNC() { return NdrConformantStructUnmarshall$FUNC_; }

    static final MethodHandle NdrConformantStructUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantStructUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantStructUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantStructUnmarshall$MH() { return NdrConformantStructUnmarshall$MH_; }

    static final FunctionDescriptor NdrConformantVaryingStructUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingStructUnmarshall$FUNC() { return NdrConformantVaryingStructUnmarshall$FUNC_; }

    static final MethodHandle NdrConformantVaryingStructUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingStructUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantVaryingStructUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingStructUnmarshall$MH() { return NdrConformantVaryingStructUnmarshall$MH_; }

    static final FunctionDescriptor NdrComplexStructUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexStructUnmarshall$FUNC() { return NdrComplexStructUnmarshall$FUNC_; }

    static final MethodHandle NdrComplexStructUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexStructUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrComplexStructUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexStructUnmarshall$MH() { return NdrComplexStructUnmarshall$MH_; }

    static final FunctionDescriptor NdrFixedArrayUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrFixedArrayUnmarshall$FUNC() { return NdrFixedArrayUnmarshall$FUNC_; }

    static final MethodHandle NdrFixedArrayUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrFixedArrayUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrFixedArrayUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrFixedArrayUnmarshall$MH() { return NdrFixedArrayUnmarshall$MH_; }

    static final FunctionDescriptor NdrConformantArrayUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantArrayUnmarshall$FUNC() { return NdrConformantArrayUnmarshall$FUNC_; }

    static final MethodHandle NdrConformantArrayUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantArrayUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantArrayUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantArrayUnmarshall$MH() { return NdrConformantArrayUnmarshall$MH_; }

    static final FunctionDescriptor NdrConformantVaryingArrayUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingArrayUnmarshall$FUNC() { return NdrConformantVaryingArrayUnmarshall$FUNC_; }

    static final MethodHandle NdrConformantVaryingArrayUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingArrayUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantVaryingArrayUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingArrayUnmarshall$MH() { return NdrConformantVaryingArrayUnmarshall$MH_; }

    static final FunctionDescriptor NdrVaryingArrayUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrVaryingArrayUnmarshall$FUNC() { return NdrVaryingArrayUnmarshall$FUNC_; }

    static final MethodHandle NdrVaryingArrayUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrVaryingArrayUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrVaryingArrayUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrVaryingArrayUnmarshall$MH() { return NdrVaryingArrayUnmarshall$MH_; }

    static final FunctionDescriptor NdrComplexArrayUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexArrayUnmarshall$FUNC() { return NdrComplexArrayUnmarshall$FUNC_; }

    static final MethodHandle NdrComplexArrayUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexArrayUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrComplexArrayUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexArrayUnmarshall$MH() { return NdrComplexArrayUnmarshall$MH_; }

    static final FunctionDescriptor NdrNonConformantStringUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNonConformantStringUnmarshall$FUNC() { return NdrNonConformantStringUnmarshall$FUNC_; }

    static final MethodHandle NdrNonConformantStringUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNonConformantStringUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrNonConformantStringUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNonConformantStringUnmarshall$MH() { return NdrNonConformantStringUnmarshall$MH_; }

    static final FunctionDescriptor NdrConformantStringUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantStringUnmarshall$FUNC() { return NdrConformantStringUnmarshall$FUNC_; }

    static final MethodHandle NdrConformantStringUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantStringUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrConformantStringUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantStringUnmarshall$MH() { return NdrConformantStringUnmarshall$MH_; }

    static final FunctionDescriptor NdrEncapsulatedUnionUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrEncapsulatedUnionUnmarshall$FUNC() { return NdrEncapsulatedUnionUnmarshall$FUNC_; }

    static final MethodHandle NdrEncapsulatedUnionUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrEncapsulatedUnionUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrEncapsulatedUnionUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrEncapsulatedUnionUnmarshall$MH() { return NdrEncapsulatedUnionUnmarshall$MH_; }

    static final FunctionDescriptor NdrNonEncapsulatedUnionUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNonEncapsulatedUnionUnmarshall$FUNC() { return NdrNonEncapsulatedUnionUnmarshall$FUNC_; }

    static final MethodHandle NdrNonEncapsulatedUnionUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNonEncapsulatedUnionUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrNonEncapsulatedUnionUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNonEncapsulatedUnionUnmarshall$MH() { return NdrNonEncapsulatedUnionUnmarshall$MH_; }

    static final FunctionDescriptor NdrByteCountPointerUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrByteCountPointerUnmarshall$FUNC() { return NdrByteCountPointerUnmarshall$FUNC_; }

    static final MethodHandle NdrByteCountPointerUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrByteCountPointerUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrByteCountPointerUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrByteCountPointerUnmarshall$MH() { return NdrByteCountPointerUnmarshall$MH_; }

    static final FunctionDescriptor NdrXmitOrRepAsUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrXmitOrRepAsUnmarshall$FUNC() { return NdrXmitOrRepAsUnmarshall$FUNC_; }

    static final MethodHandle NdrXmitOrRepAsUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrXmitOrRepAsUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrXmitOrRepAsUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrXmitOrRepAsUnmarshall$MH() { return NdrXmitOrRepAsUnmarshall$MH_; }

    static final FunctionDescriptor NdrUserMarshalUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrUserMarshalUnmarshall$FUNC() { return NdrUserMarshalUnmarshall$FUNC_; }

    static final MethodHandle NdrUserMarshalUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrUserMarshalUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrUserMarshalUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrUserMarshalUnmarshall$MH() { return NdrUserMarshalUnmarshall$MH_; }

    static final FunctionDescriptor NdrInterfacePointerUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrInterfacePointerUnmarshall$FUNC() { return NdrInterfacePointerUnmarshall$FUNC_; }

    static final MethodHandle NdrInterfacePointerUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrInterfacePointerUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrInterfacePointerUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrInterfacePointerUnmarshall$MH() { return NdrInterfacePointerUnmarshall$MH_; }

    static final FunctionDescriptor NdrClientContextUnmarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrClientContextUnmarshall$FUNC() { return NdrClientContextUnmarshall$FUNC_; }

    static final MethodHandle NdrClientContextUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrClientContextUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrClientContextUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrClientContextUnmarshall$MH() { return NdrClientContextUnmarshall$MH_; }

    static final FunctionDescriptor NdrServerContextUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerContextUnmarshall$FUNC() { return NdrServerContextUnmarshall$FUNC_; }

    static final MethodHandle NdrServerContextUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerContextUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrServerContextUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerContextUnmarshall$MH() { return NdrServerContextUnmarshall$MH_; }

    static final FunctionDescriptor NdrContextHandleInitialize$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrContextHandleInitialize$FUNC() { return NdrContextHandleInitialize$FUNC_; }

    static final MethodHandle NdrContextHandleInitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrContextHandleInitialize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrContextHandleInitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrContextHandleInitialize$MH() { return NdrContextHandleInitialize$MH_; }

    static final FunctionDescriptor NdrServerContextNewUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerContextNewUnmarshall$FUNC() { return NdrServerContextNewUnmarshall$FUNC_; }

    static final MethodHandle NdrServerContextNewUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerContextNewUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrServerContextNewUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerContextNewUnmarshall$MH() { return NdrServerContextNewUnmarshall$MH_; }

    static final FunctionDescriptor NdrPointerBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrPointerBufferSize$FUNC() { return NdrPointerBufferSize$FUNC_; }

    static final MethodHandle NdrPointerBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrPointerBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrPointerBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrPointerBufferSize$MH() { return NdrPointerBufferSize$MH_; }

    static final FunctionDescriptor NdrCsArrayBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCsArrayBufferSize$FUNC() { return NdrCsArrayBufferSize$FUNC_; }

    static final MethodHandle NdrCsArrayBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCsArrayBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrCsArrayBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCsArrayBufferSize$MH() { return NdrCsArrayBufferSize$MH_; }

    static final FunctionDescriptor NdrCsTagBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCsTagBufferSize$FUNC() { return NdrCsTagBufferSize$FUNC_; }

    static final MethodHandle NdrCsTagBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCsTagBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrCsTagBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCsTagBufferSize$MH() { return NdrCsTagBufferSize$MH_; }

    static final FunctionDescriptor NdrSimpleStructBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrSimpleStructBufferSize$FUNC() { return NdrSimpleStructBufferSize$FUNC_; }

    static final MethodHandle NdrSimpleStructBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrSimpleStructBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrSimpleStructBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrSimpleStructBufferSize$MH() { return NdrSimpleStructBufferSize$MH_; }

    static final FunctionDescriptor NdrConformantStructBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantStructBufferSize$FUNC() { return NdrConformantStructBufferSize$FUNC_; }

    static final MethodHandle NdrConformantStructBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantStructBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConformantStructBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantStructBufferSize$MH() { return NdrConformantStructBufferSize$MH_; }

    static final FunctionDescriptor NdrConformantVaryingStructBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingStructBufferSize$FUNC() { return NdrConformantVaryingStructBufferSize$FUNC_; }

    static final MethodHandle NdrConformantVaryingStructBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingStructBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConformantVaryingStructBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingStructBufferSize$MH() { return NdrConformantVaryingStructBufferSize$MH_; }

    static final FunctionDescriptor NdrComplexStructBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexStructBufferSize$FUNC() { return NdrComplexStructBufferSize$FUNC_; }

    static final MethodHandle NdrComplexStructBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexStructBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrComplexStructBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexStructBufferSize$MH() { return NdrComplexStructBufferSize$MH_; }

    static final FunctionDescriptor NdrFixedArrayBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrFixedArrayBufferSize$FUNC() { return NdrFixedArrayBufferSize$FUNC_; }

    static final MethodHandle NdrFixedArrayBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrFixedArrayBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrFixedArrayBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrFixedArrayBufferSize$MH() { return NdrFixedArrayBufferSize$MH_; }

    static final FunctionDescriptor NdrConformantArrayBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantArrayBufferSize$FUNC() { return NdrConformantArrayBufferSize$FUNC_; }

    static final MethodHandle NdrConformantArrayBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantArrayBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConformantArrayBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantArrayBufferSize$MH() { return NdrConformantArrayBufferSize$MH_; }

    static final FunctionDescriptor NdrConformantVaryingArrayBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingArrayBufferSize$FUNC() { return NdrConformantVaryingArrayBufferSize$FUNC_; }

    static final MethodHandle NdrConformantVaryingArrayBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingArrayBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConformantVaryingArrayBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingArrayBufferSize$MH() { return NdrConformantVaryingArrayBufferSize$MH_; }

    static final FunctionDescriptor NdrVaryingArrayBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrVaryingArrayBufferSize$FUNC() { return NdrVaryingArrayBufferSize$FUNC_; }

    static final MethodHandle NdrVaryingArrayBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrVaryingArrayBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrVaryingArrayBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrVaryingArrayBufferSize$MH() { return NdrVaryingArrayBufferSize$MH_; }

    static final FunctionDescriptor NdrComplexArrayBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexArrayBufferSize$FUNC() { return NdrComplexArrayBufferSize$FUNC_; }

    static final MethodHandle NdrComplexArrayBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexArrayBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrComplexArrayBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexArrayBufferSize$MH() { return NdrComplexArrayBufferSize$MH_; }

    static final FunctionDescriptor NdrConformantStringBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantStringBufferSize$FUNC() { return NdrConformantStringBufferSize$FUNC_; }

    static final MethodHandle NdrConformantStringBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantStringBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConformantStringBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantStringBufferSize$MH() { return NdrConformantStringBufferSize$MH_; }

    static final FunctionDescriptor NdrNonConformantStringBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNonConformantStringBufferSize$FUNC() { return NdrNonConformantStringBufferSize$FUNC_; }

    static final MethodHandle NdrNonConformantStringBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNonConformantStringBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrNonConformantStringBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNonConformantStringBufferSize$MH() { return NdrNonConformantStringBufferSize$MH_; }

    static final FunctionDescriptor NdrEncapsulatedUnionBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrEncapsulatedUnionBufferSize$FUNC() { return NdrEncapsulatedUnionBufferSize$FUNC_; }

    static final MethodHandle NdrEncapsulatedUnionBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrEncapsulatedUnionBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrEncapsulatedUnionBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrEncapsulatedUnionBufferSize$MH() { return NdrEncapsulatedUnionBufferSize$MH_; }

    static final FunctionDescriptor NdrNonEncapsulatedUnionBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNonEncapsulatedUnionBufferSize$FUNC() { return NdrNonEncapsulatedUnionBufferSize$FUNC_; }

    static final MethodHandle NdrNonEncapsulatedUnionBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNonEncapsulatedUnionBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrNonEncapsulatedUnionBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNonEncapsulatedUnionBufferSize$MH() { return NdrNonEncapsulatedUnionBufferSize$MH_; }

    static final FunctionDescriptor NdrByteCountPointerBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrByteCountPointerBufferSize$FUNC() { return NdrByteCountPointerBufferSize$FUNC_; }

    static final MethodHandle NdrByteCountPointerBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrByteCountPointerBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrByteCountPointerBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrByteCountPointerBufferSize$MH() { return NdrByteCountPointerBufferSize$MH_; }

    static final FunctionDescriptor NdrXmitOrRepAsBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrXmitOrRepAsBufferSize$FUNC() { return NdrXmitOrRepAsBufferSize$FUNC_; }

    static final MethodHandle NdrXmitOrRepAsBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrXmitOrRepAsBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrXmitOrRepAsBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrXmitOrRepAsBufferSize$MH() { return NdrXmitOrRepAsBufferSize$MH_; }

    static final FunctionDescriptor NdrUserMarshalBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrUserMarshalBufferSize$FUNC() { return NdrUserMarshalBufferSize$FUNC_; }

    static final MethodHandle NdrUserMarshalBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrUserMarshalBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrUserMarshalBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrUserMarshalBufferSize$MH() { return NdrUserMarshalBufferSize$MH_; }

    static final FunctionDescriptor NdrInterfacePointerBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrInterfacePointerBufferSize$FUNC() { return NdrInterfacePointerBufferSize$FUNC_; }

    static final MethodHandle NdrInterfacePointerBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrInterfacePointerBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrInterfacePointerBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrInterfacePointerBufferSize$MH() { return NdrInterfacePointerBufferSize$MH_; }

    static final FunctionDescriptor NdrContextHandleSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrContextHandleSize$FUNC() { return NdrContextHandleSize$FUNC_; }

    static final MethodHandle NdrContextHandleSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrContextHandleSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrContextHandleSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrContextHandleSize$MH() { return NdrContextHandleSize$MH_; }

    static final FunctionDescriptor NdrPointerMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrPointerMemorySize$FUNC() { return NdrPointerMemorySize$FUNC_; }

    static final MethodHandle NdrPointerMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrPointerMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrPointerMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrPointerMemorySize$MH() { return NdrPointerMemorySize$MH_; }

    static final FunctionDescriptor NdrContextHandleMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrContextHandleMemorySize$FUNC() { return NdrContextHandleMemorySize$FUNC_; }

    static final MethodHandle NdrContextHandleMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrContextHandleMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrContextHandleMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrContextHandleMemorySize$MH() { return NdrContextHandleMemorySize$MH_; }

    static final FunctionDescriptor NdrCsArrayMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCsArrayMemorySize$FUNC() { return NdrCsArrayMemorySize$FUNC_; }

    static final MethodHandle NdrCsArrayMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCsArrayMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrCsArrayMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCsArrayMemorySize$MH() { return NdrCsArrayMemorySize$MH_; }

    static final FunctionDescriptor NdrCsTagMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCsTagMemorySize$FUNC() { return NdrCsTagMemorySize$FUNC_; }

    static final MethodHandle NdrCsTagMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCsTagMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrCsTagMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCsTagMemorySize$MH() { return NdrCsTagMemorySize$MH_; }

    static final FunctionDescriptor NdrSimpleStructMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrSimpleStructMemorySize$FUNC() { return NdrSimpleStructMemorySize$FUNC_; }

    static final MethodHandle NdrSimpleStructMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrSimpleStructMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrSimpleStructMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrSimpleStructMemorySize$MH() { return NdrSimpleStructMemorySize$MH_; }

    static final FunctionDescriptor NdrConformantStructMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantStructMemorySize$FUNC() { return NdrConformantStructMemorySize$FUNC_; }

    static final MethodHandle NdrConformantStructMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantStructMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrConformantStructMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantStructMemorySize$MH() { return NdrConformantStructMemorySize$MH_; }

    static final FunctionDescriptor NdrConformantVaryingStructMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingStructMemorySize$FUNC() { return NdrConformantVaryingStructMemorySize$FUNC_; }

    static final MethodHandle NdrConformantVaryingStructMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingStructMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrConformantVaryingStructMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingStructMemorySize$MH() { return NdrConformantVaryingStructMemorySize$MH_; }

    static final FunctionDescriptor NdrComplexStructMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexStructMemorySize$FUNC() { return NdrComplexStructMemorySize$FUNC_; }

    static final MethodHandle NdrComplexStructMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexStructMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrComplexStructMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexStructMemorySize$MH() { return NdrComplexStructMemorySize$MH_; }

    static final FunctionDescriptor NdrFixedArrayMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrFixedArrayMemorySize$FUNC() { return NdrFixedArrayMemorySize$FUNC_; }

    static final MethodHandle NdrFixedArrayMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrFixedArrayMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrFixedArrayMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrFixedArrayMemorySize$MH() { return NdrFixedArrayMemorySize$MH_; }

    static final FunctionDescriptor NdrConformantArrayMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantArrayMemorySize$FUNC() { return NdrConformantArrayMemorySize$FUNC_; }

    static final MethodHandle NdrConformantArrayMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantArrayMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrConformantArrayMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantArrayMemorySize$MH() { return NdrConformantArrayMemorySize$MH_; }

    static final FunctionDescriptor NdrConformantVaryingArrayMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingArrayMemorySize$FUNC() { return NdrConformantVaryingArrayMemorySize$FUNC_; }

    static final MethodHandle NdrConformantVaryingArrayMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingArrayMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrConformantVaryingArrayMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingArrayMemorySize$MH() { return NdrConformantVaryingArrayMemorySize$MH_; }

    static final FunctionDescriptor NdrVaryingArrayMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrVaryingArrayMemorySize$FUNC() { return NdrVaryingArrayMemorySize$FUNC_; }

    static final MethodHandle NdrVaryingArrayMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrVaryingArrayMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrVaryingArrayMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrVaryingArrayMemorySize$MH() { return NdrVaryingArrayMemorySize$MH_; }

    static final FunctionDescriptor NdrComplexArrayMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexArrayMemorySize$FUNC() { return NdrComplexArrayMemorySize$FUNC_; }

    static final MethodHandle NdrComplexArrayMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexArrayMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrComplexArrayMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexArrayMemorySize$MH() { return NdrComplexArrayMemorySize$MH_; }

    static final FunctionDescriptor NdrConformantStringMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantStringMemorySize$FUNC() { return NdrConformantStringMemorySize$FUNC_; }

    static final MethodHandle NdrConformantStringMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantStringMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrConformantStringMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantStringMemorySize$MH() { return NdrConformantStringMemorySize$MH_; }

    static final FunctionDescriptor NdrNonConformantStringMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNonConformantStringMemorySize$FUNC() { return NdrNonConformantStringMemorySize$FUNC_; }

    static final MethodHandle NdrNonConformantStringMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNonConformantStringMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrNonConformantStringMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNonConformantStringMemorySize$MH() { return NdrNonConformantStringMemorySize$MH_; }

    static final FunctionDescriptor NdrEncapsulatedUnionMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrEncapsulatedUnionMemorySize$FUNC() { return NdrEncapsulatedUnionMemorySize$FUNC_; }

    static final MethodHandle NdrEncapsulatedUnionMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrEncapsulatedUnionMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrEncapsulatedUnionMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrEncapsulatedUnionMemorySize$MH() { return NdrEncapsulatedUnionMemorySize$MH_; }

    static final FunctionDescriptor NdrNonEncapsulatedUnionMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNonEncapsulatedUnionMemorySize$FUNC() { return NdrNonEncapsulatedUnionMemorySize$FUNC_; }

    static final MethodHandle NdrNonEncapsulatedUnionMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNonEncapsulatedUnionMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrNonEncapsulatedUnionMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNonEncapsulatedUnionMemorySize$MH() { return NdrNonEncapsulatedUnionMemorySize$MH_; }

    static final FunctionDescriptor NdrXmitOrRepAsMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrXmitOrRepAsMemorySize$FUNC() { return NdrXmitOrRepAsMemorySize$FUNC_; }

    static final MethodHandle NdrXmitOrRepAsMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrXmitOrRepAsMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrXmitOrRepAsMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrXmitOrRepAsMemorySize$MH() { return NdrXmitOrRepAsMemorySize$MH_; }

    static final FunctionDescriptor NdrUserMarshalMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrUserMarshalMemorySize$FUNC() { return NdrUserMarshalMemorySize$FUNC_; }

    static final MethodHandle NdrUserMarshalMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrUserMarshalMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrUserMarshalMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrUserMarshalMemorySize$MH() { return NdrUserMarshalMemorySize$MH_; }

    static final FunctionDescriptor NdrInterfacePointerMemorySize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrInterfacePointerMemorySize$FUNC() { return NdrInterfacePointerMemorySize$FUNC_; }

    static final MethodHandle NdrInterfacePointerMemorySize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrInterfacePointerMemorySize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrInterfacePointerMemorySize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrInterfacePointerMemorySize$MH() { return NdrInterfacePointerMemorySize$MH_; }

    static final FunctionDescriptor NdrPointerFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrPointerFree$FUNC() { return NdrPointerFree$FUNC_; }

    static final MethodHandle NdrPointerFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrPointerFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrPointerFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrPointerFree$MH() { return NdrPointerFree$MH_; }

    static final FunctionDescriptor NdrCsArrayFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCsArrayFree$FUNC() { return NdrCsArrayFree$FUNC_; }

    static final MethodHandle NdrCsArrayFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCsArrayFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrCsArrayFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCsArrayFree$MH() { return NdrCsArrayFree$MH_; }

    static final FunctionDescriptor NdrSimpleStructFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrSimpleStructFree$FUNC() { return NdrSimpleStructFree$FUNC_; }

    static final MethodHandle NdrSimpleStructFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrSimpleStructFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrSimpleStructFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrSimpleStructFree$MH() { return NdrSimpleStructFree$MH_; }

    static final FunctionDescriptor NdrConformantStructFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantStructFree$FUNC() { return NdrConformantStructFree$FUNC_; }

    static final MethodHandle NdrConformantStructFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantStructFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConformantStructFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantStructFree$MH() { return NdrConformantStructFree$MH_; }

    static final FunctionDescriptor NdrConformantVaryingStructFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingStructFree$FUNC() { return NdrConformantVaryingStructFree$FUNC_; }

    static final MethodHandle NdrConformantVaryingStructFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingStructFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConformantVaryingStructFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingStructFree$MH() { return NdrConformantVaryingStructFree$MH_; }

    static final FunctionDescriptor NdrComplexStructFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexStructFree$FUNC() { return NdrComplexStructFree$FUNC_; }

    static final MethodHandle NdrComplexStructFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexStructFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrComplexStructFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexStructFree$MH() { return NdrComplexStructFree$MH_; }

    static final FunctionDescriptor NdrFixedArrayFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrFixedArrayFree$FUNC() { return NdrFixedArrayFree$FUNC_; }

    static final MethodHandle NdrFixedArrayFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrFixedArrayFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrFixedArrayFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrFixedArrayFree$MH() { return NdrFixedArrayFree$MH_; }

    static final FunctionDescriptor NdrConformantArrayFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantArrayFree$FUNC() { return NdrConformantArrayFree$FUNC_; }

    static final MethodHandle NdrConformantArrayFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantArrayFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConformantArrayFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantArrayFree$MH() { return NdrConformantArrayFree$MH_; }

    static final FunctionDescriptor NdrConformantVaryingArrayFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConformantVaryingArrayFree$FUNC() { return NdrConformantVaryingArrayFree$FUNC_; }

    static final MethodHandle NdrConformantVaryingArrayFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConformantVaryingArrayFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConformantVaryingArrayFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConformantVaryingArrayFree$MH() { return NdrConformantVaryingArrayFree$MH_; }

    static final FunctionDescriptor NdrVaryingArrayFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrVaryingArrayFree$FUNC() { return NdrVaryingArrayFree$FUNC_; }

    static final MethodHandle NdrVaryingArrayFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrVaryingArrayFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrVaryingArrayFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrVaryingArrayFree$MH() { return NdrVaryingArrayFree$MH_; }

    static final FunctionDescriptor NdrComplexArrayFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrComplexArrayFree$FUNC() { return NdrComplexArrayFree$FUNC_; }

    static final MethodHandle NdrComplexArrayFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrComplexArrayFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrComplexArrayFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrComplexArrayFree$MH() { return NdrComplexArrayFree$MH_; }

    static final FunctionDescriptor NdrEncapsulatedUnionFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrEncapsulatedUnionFree$FUNC() { return NdrEncapsulatedUnionFree$FUNC_; }

    static final MethodHandle NdrEncapsulatedUnionFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrEncapsulatedUnionFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrEncapsulatedUnionFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrEncapsulatedUnionFree$MH() { return NdrEncapsulatedUnionFree$MH_; }

    static final FunctionDescriptor NdrNonEncapsulatedUnionFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNonEncapsulatedUnionFree$FUNC() { return NdrNonEncapsulatedUnionFree$FUNC_; }

    static final MethodHandle NdrNonEncapsulatedUnionFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNonEncapsulatedUnionFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrNonEncapsulatedUnionFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNonEncapsulatedUnionFree$MH() { return NdrNonEncapsulatedUnionFree$MH_; }

    static final FunctionDescriptor NdrByteCountPointerFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrByteCountPointerFree$FUNC() { return NdrByteCountPointerFree$FUNC_; }

    static final MethodHandle NdrByteCountPointerFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrByteCountPointerFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrByteCountPointerFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrByteCountPointerFree$MH() { return NdrByteCountPointerFree$MH_; }

    static final FunctionDescriptor NdrXmitOrRepAsFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrXmitOrRepAsFree$FUNC() { return NdrXmitOrRepAsFree$FUNC_; }

    static final MethodHandle NdrXmitOrRepAsFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrXmitOrRepAsFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrXmitOrRepAsFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrXmitOrRepAsFree$MH() { return NdrXmitOrRepAsFree$MH_; }

    static final FunctionDescriptor NdrUserMarshalFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrUserMarshalFree$FUNC() { return NdrUserMarshalFree$FUNC_; }

    static final MethodHandle NdrUserMarshalFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrUserMarshalFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrUserMarshalFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrUserMarshalFree$MH() { return NdrUserMarshalFree$MH_; }

    static final FunctionDescriptor NdrInterfacePointerFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrInterfacePointerFree$FUNC() { return NdrInterfacePointerFree$FUNC_; }

    static final MethodHandle NdrInterfacePointerFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrInterfacePointerFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrInterfacePointerFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrInterfacePointerFree$MH() { return NdrInterfacePointerFree$MH_; }

    static final FunctionDescriptor NdrConvert2$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConvert2$FUNC() { return NdrConvert2$FUNC_; }

    static final MethodHandle NdrConvert2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConvert2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        NdrConvert2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConvert2$MH() { return NdrConvert2$MH_; }

    static final FunctionDescriptor NdrConvert$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrConvert$FUNC() { return NdrConvert$FUNC_; }

    static final MethodHandle NdrConvert$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrConvert",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrConvert$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrConvert$MH() { return NdrConvert$MH_; }

    static final FunctionDescriptor NdrUserMarshalSimpleTypeConvert$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrUserMarshalSimpleTypeConvert$FUNC() { return NdrUserMarshalSimpleTypeConvert$FUNC_; }

    static final MethodHandle NdrUserMarshalSimpleTypeConvert$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrUserMarshalSimpleTypeConvert",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)Ljdk/incubator/foreign/MemoryAddress;",
        NdrUserMarshalSimpleTypeConvert$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrUserMarshalSimpleTypeConvert$MH() { return NdrUserMarshalSimpleTypeConvert$MH_; }

    static final FunctionDescriptor NdrClientInitializeNew$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrClientInitializeNew$FUNC() { return NdrClientInitializeNew$FUNC_; }

    static final MethodHandle NdrClientInitializeNew$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrClientInitializeNew",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        NdrClientInitializeNew$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrClientInitializeNew$MH() { return NdrClientInitializeNew$MH_; }

    static final FunctionDescriptor NdrServerInitializeNew$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerInitializeNew$FUNC() { return NdrServerInitializeNew$FUNC_; }

    static final MethodHandle NdrServerInitializeNew$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerInitializeNew",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrServerInitializeNew$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerInitializeNew$MH() { return NdrServerInitializeNew$MH_; }

    static final FunctionDescriptor NdrServerInitializePartial$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerInitializePartial$FUNC() { return NdrServerInitializePartial$FUNC_; }

    static final MethodHandle NdrServerInitializePartial$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerInitializePartial",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        NdrServerInitializePartial$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerInitializePartial$MH() { return NdrServerInitializePartial$MH_; }

    static final FunctionDescriptor NdrClientInitialize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrClientInitialize$FUNC() { return NdrClientInitialize$FUNC_; }

    static final MethodHandle NdrClientInitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrClientInitialize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        NdrClientInitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrClientInitialize$MH() { return NdrClientInitialize$MH_; }

    static final FunctionDescriptor NdrServerInitialize$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerInitialize$FUNC() { return NdrServerInitialize$FUNC_; }

    static final MethodHandle NdrServerInitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerInitialize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrServerInitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerInitialize$MH() { return NdrServerInitialize$MH_; }

    static final FunctionDescriptor NdrServerInitializeUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerInitializeUnmarshall$FUNC() { return NdrServerInitializeUnmarshall$FUNC_; }

    static final MethodHandle NdrServerInitializeUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerInitializeUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrServerInitializeUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerInitializeUnmarshall$MH() { return NdrServerInitializeUnmarshall$MH_; }

    static final FunctionDescriptor NdrServerInitializeMarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerInitializeMarshall$FUNC() { return NdrServerInitializeMarshall$FUNC_; }

    static final MethodHandle NdrServerInitializeMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerInitializeMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrServerInitializeMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerInitializeMarshall$MH() { return NdrServerInitializeMarshall$MH_; }

    static final FunctionDescriptor NdrGetBuffer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrGetBuffer$FUNC() { return NdrGetBuffer$FUNC_; }

    static final MethodHandle NdrGetBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrGetBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrGetBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrGetBuffer$MH() { return NdrGetBuffer$MH_; }

    static final FunctionDescriptor NdrNsGetBuffer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNsGetBuffer$FUNC() { return NdrNsGetBuffer$FUNC_; }

    static final MethodHandle NdrNsGetBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNsGetBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrNsGetBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNsGetBuffer$MH() { return NdrNsGetBuffer$MH_; }

    static final FunctionDescriptor NdrSendReceive$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrSendReceive$FUNC() { return NdrSendReceive$FUNC_; }

    static final MethodHandle NdrSendReceive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrSendReceive",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrSendReceive$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrSendReceive$MH() { return NdrSendReceive$MH_; }

    static final FunctionDescriptor NdrNsSendReceive$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrNsSendReceive$FUNC() { return NdrNsSendReceive$FUNC_; }

    static final MethodHandle NdrNsSendReceive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrNsSendReceive",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NdrNsSendReceive$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrNsSendReceive$MH() { return NdrNsSendReceive$MH_; }

    static final FunctionDescriptor NdrFreeBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrFreeBuffer$FUNC() { return NdrFreeBuffer$FUNC_; }

    static final MethodHandle NdrFreeBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrFreeBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrFreeBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrFreeBuffer$MH() { return NdrFreeBuffer$MH_; }

    static final FunctionDescriptor NdrGetDcomProtocolVersion$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrGetDcomProtocolVersion$FUNC() { return NdrGetDcomProtocolVersion$FUNC_; }

    static final MethodHandle NdrGetDcomProtocolVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrGetDcomProtocolVersion",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrGetDcomProtocolVersion$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrGetDcomProtocolVersion$MH() { return NdrGetDcomProtocolVersion$MH_; }

    static final FunctionDescriptor NdrClientCall2$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofUnion(
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Simple")
    ).withName("_CLIENT_CALL_RETURN"),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrClientCall2$FUNC() { return NdrClientCall2$FUNC_; }

    static final MethodHandle NdrClientCall2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrClientCall2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)Ljdk/incubator/foreign/MemorySegment;",
        NdrClientCall2$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle NdrClientCall2$MH() { return NdrClientCall2$MH_; }

    static final FunctionDescriptor NdrClientCall$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofUnion(
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Simple")
    ).withName("_CLIENT_CALL_RETURN"),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrClientCall$FUNC() { return NdrClientCall$FUNC_; }

    static final MethodHandle NdrClientCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrClientCall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)Ljdk/incubator/foreign/MemorySegment;",
        NdrClientCall$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle NdrClientCall$MH() { return NdrClientCall$MH_; }

    static final FunctionDescriptor NdrAsyncClientCall$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofUnion(
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Simple")
    ).withName("_CLIENT_CALL_RETURN"),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrAsyncClientCall$FUNC() { return NdrAsyncClientCall$FUNC_; }

    static final MethodHandle NdrAsyncClientCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrAsyncClientCall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)Ljdk/incubator/foreign/MemorySegment;",
        NdrAsyncClientCall$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle NdrAsyncClientCall$MH() { return NdrAsyncClientCall$MH_; }

    static final FunctionDescriptor NdrDcomAsyncClientCall$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofUnion(
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Simple")
    ).withName("_CLIENT_CALL_RETURN"),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrDcomAsyncClientCall$FUNC() { return NdrDcomAsyncClientCall$FUNC_; }

    static final MethodHandle NdrDcomAsyncClientCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrDcomAsyncClientCall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)Ljdk/incubator/foreign/MemorySegment;",
        NdrDcomAsyncClientCall$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle NdrDcomAsyncClientCall$MH() { return NdrDcomAsyncClientCall$MH_; }

    static final int STUB_UNMARSHAL() { return (int)0L; }

    static final int STUB_CALL_SERVER() { return (int)1L; }

    static final int STUB_MARSHAL() { return (int)2L; }

    static final int STUB_CALL_SERVER_NO_HRESULT() { return (int)3L; }

    static final int PROXY_CALCSIZE() { return (int)0L; }

    static final int PROXY_GETBUFFER() { return (int)1L; }

    static final int PROXY_MARSHAL() { return (int)2L; }

    static final int PROXY_SENDRECEIVE() { return (int)3L; }

    static final int PROXY_UNMARSHAL() { return (int)4L; }

    static final FunctionDescriptor NdrAsyncServerCall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrAsyncServerCall$FUNC() { return NdrAsyncServerCall$FUNC_; }

    static final MethodHandle NdrAsyncServerCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrAsyncServerCall",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrAsyncServerCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrAsyncServerCall$MH() { return NdrAsyncServerCall$MH_; }

    static final FunctionDescriptor NdrAsyncStubCall$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrAsyncStubCall$FUNC() { return NdrAsyncStubCall$FUNC_; }

    static final MethodHandle NdrAsyncStubCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrAsyncStubCall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrAsyncStubCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrAsyncStubCall$MH() { return NdrAsyncStubCall$MH_; }

    static final FunctionDescriptor NdrDcomAsyncStubCall$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrDcomAsyncStubCall$FUNC() { return NdrDcomAsyncStubCall$FUNC_; }

    static final MethodHandle NdrDcomAsyncStubCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrDcomAsyncStubCall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrDcomAsyncStubCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrDcomAsyncStubCall$MH() { return NdrDcomAsyncStubCall$MH_; }

    static final FunctionDescriptor NdrStubCall2$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrStubCall2$FUNC() { return NdrStubCall2$FUNC_; }

    static final MethodHandle NdrStubCall2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrStubCall2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrStubCall2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrStubCall2$MH() { return NdrStubCall2$MH_; }

    static final FunctionDescriptor NdrServerCall2$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerCall2$FUNC() { return NdrServerCall2$FUNC_; }

    static final MethodHandle NdrServerCall2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerCall2",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrServerCall2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerCall2$MH() { return NdrServerCall2$MH_; }

    static final FunctionDescriptor NdrStubCall$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrStubCall$FUNC() { return NdrStubCall$FUNC_; }

    static final MethodHandle NdrStubCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrStubCall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrStubCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrStubCall$MH() { return NdrStubCall$MH_; }

    static final FunctionDescriptor NdrServerCall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerCall$FUNC() { return NdrServerCall$FUNC_; }

    static final MethodHandle NdrServerCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerCall",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrServerCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerCall$MH() { return NdrServerCall$MH_; }

    static final FunctionDescriptor NdrServerUnmarshall$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerUnmarshall$FUNC() { return NdrServerUnmarshall$FUNC_; }

    static final MethodHandle NdrServerUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrServerUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerUnmarshall$MH() { return NdrServerUnmarshall$MH_; }

    static final FunctionDescriptor NdrServerMarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerMarshall$FUNC() { return NdrServerMarshall$FUNC_; }

    static final MethodHandle NdrServerMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrServerMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerMarshall$MH() { return NdrServerMarshall$MH_; }

    static final FunctionDescriptor NdrMapCommAndFaultStatus$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrMapCommAndFaultStatus$FUNC() { return NdrMapCommAndFaultStatus$FUNC_; }

    static final MethodHandle NdrMapCommAndFaultStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrMapCommAndFaultStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        NdrMapCommAndFaultStatus$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrMapCommAndFaultStatus$MH() { return NdrMapCommAndFaultStatus$MH_; }

    static final FunctionDescriptor RpcSsAllocate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsAllocate$FUNC() { return RpcSsAllocate$FUNC_; }

    static final MethodHandle RpcSsAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSsAllocate",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        RpcSsAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSsAllocate$MH() { return RpcSsAllocate$MH_; }

    static final FunctionDescriptor RpcSsDisableAllocate$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsDisableAllocate$FUNC() { return RpcSsDisableAllocate$FUNC_; }

    static final MethodHandle RpcSsDisableAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSsDisableAllocate",
        "()V",
        RpcSsDisableAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSsDisableAllocate$MH() { return RpcSsDisableAllocate$MH_; }

    static final FunctionDescriptor RpcSsEnableAllocate$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsEnableAllocate$FUNC() { return RpcSsEnableAllocate$FUNC_; }

    static final MethodHandle RpcSsEnableAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSsEnableAllocate",
        "()V",
        RpcSsEnableAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSsEnableAllocate$MH() { return RpcSsEnableAllocate$MH_; }

    static final FunctionDescriptor RpcSsFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsFree$FUNC() { return RpcSsFree$FUNC_; }

    static final MethodHandle RpcSsFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSsFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RpcSsFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSsFree$MH() { return RpcSsFree$MH_; }

    static final FunctionDescriptor RpcSsGetThreadHandle$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsGetThreadHandle$FUNC() { return RpcSsGetThreadHandle$FUNC_; }

    static final MethodHandle RpcSsGetThreadHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSsGetThreadHandle",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        RpcSsGetThreadHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSsGetThreadHandle$MH() { return RpcSsGetThreadHandle$MH_; }

    static final FunctionDescriptor RpcSsSetClientAllocFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsSetClientAllocFree$FUNC() { return RpcSsSetClientAllocFree$FUNC_; }

    static final MethodHandle RpcSsSetClientAllocFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSsSetClientAllocFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RpcSsSetClientAllocFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSsSetClientAllocFree$MH() { return RpcSsSetClientAllocFree$MH_; }

    static final FunctionDescriptor RpcSsSetClientAllocFree$ClientAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsSetClientAllocFree$ClientAlloc$FUNC() { return RpcSsSetClientAllocFree$ClientAlloc$FUNC_; }

    static final FunctionDescriptor RpcSsSetClientAllocFree$ClientFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsSetClientAllocFree$ClientFree$FUNC() { return RpcSsSetClientAllocFree$ClientFree$FUNC_; }

    static final FunctionDescriptor RpcSsSetThreadHandle$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsSetThreadHandle$FUNC() { return RpcSsSetThreadHandle$FUNC_; }

    static final MethodHandle RpcSsSetThreadHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSsSetThreadHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RpcSsSetThreadHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSsSetThreadHandle$MH() { return RpcSsSetThreadHandle$MH_; }

    static final FunctionDescriptor RpcSsSwapClientAllocFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsSwapClientAllocFree$FUNC() { return RpcSsSwapClientAllocFree$FUNC_; }

    static final MethodHandle RpcSsSwapClientAllocFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSsSwapClientAllocFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RpcSsSwapClientAllocFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSsSwapClientAllocFree$MH() { return RpcSsSwapClientAllocFree$MH_; }

    static final FunctionDescriptor RpcSsSwapClientAllocFree$ClientAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsSwapClientAllocFree$ClientAlloc$FUNC() { return RpcSsSwapClientAllocFree$ClientAlloc$FUNC_; }

    static final FunctionDescriptor RpcSsSwapClientAllocFree$ClientFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsSwapClientAllocFree$ClientFree$FUNC() { return RpcSsSwapClientAllocFree$ClientFree$FUNC_; }

    static final FunctionDescriptor RpcSmAllocate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmAllocate$FUNC() { return RpcSmAllocate$FUNC_; }

    static final MethodHandle RpcSmAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmAllocate",
        "(JLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RpcSmAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmAllocate$MH() { return RpcSmAllocate$MH_; }

    static final FunctionDescriptor RpcSmClientFree$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmClientFree$FUNC() { return RpcSmClientFree$FUNC_; }

    static final MethodHandle RpcSmClientFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmClientFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RpcSmClientFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmClientFree$MH() { return RpcSmClientFree$MH_; }

    static final FunctionDescriptor RpcSmDestroyClientContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmDestroyClientContext$FUNC() { return RpcSmDestroyClientContext$FUNC_; }

    static final MethodHandle RpcSmDestroyClientContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmDestroyClientContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RpcSmDestroyClientContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmDestroyClientContext$MH() { return RpcSmDestroyClientContext$MH_; }

    static final FunctionDescriptor RpcSmDisableAllocate$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmDisableAllocate$FUNC() { return RpcSmDisableAllocate$FUNC_; }

    static final MethodHandle RpcSmDisableAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmDisableAllocate",
        "()I",
        RpcSmDisableAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmDisableAllocate$MH() { return RpcSmDisableAllocate$MH_; }

    static final FunctionDescriptor RpcSmEnableAllocate$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmEnableAllocate$FUNC() { return RpcSmEnableAllocate$FUNC_; }

    static final MethodHandle RpcSmEnableAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmEnableAllocate",
        "()I",
        RpcSmEnableAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmEnableAllocate$MH() { return RpcSmEnableAllocate$MH_; }

    static final FunctionDescriptor RpcSmFree$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmFree$FUNC() { return RpcSmFree$FUNC_; }

    static final MethodHandle RpcSmFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RpcSmFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmFree$MH() { return RpcSmFree$MH_; }

    static final FunctionDescriptor RpcSmGetThreadHandle$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmGetThreadHandle$FUNC() { return RpcSmGetThreadHandle$FUNC_; }

    static final MethodHandle RpcSmGetThreadHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmGetThreadHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RpcSmGetThreadHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmGetThreadHandle$MH() { return RpcSmGetThreadHandle$MH_; }

    static final FunctionDescriptor RpcSmSetClientAllocFree$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmSetClientAllocFree$FUNC() { return RpcSmSetClientAllocFree$FUNC_; }

    static final MethodHandle RpcSmSetClientAllocFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmSetClientAllocFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RpcSmSetClientAllocFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmSetClientAllocFree$MH() { return RpcSmSetClientAllocFree$MH_; }

    static final FunctionDescriptor RpcSmSetClientAllocFree$ClientAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmSetClientAllocFree$ClientAlloc$FUNC() { return RpcSmSetClientAllocFree$ClientAlloc$FUNC_; }

    static final FunctionDescriptor RpcSmSetClientAllocFree$ClientFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmSetClientAllocFree$ClientFree$FUNC() { return RpcSmSetClientAllocFree$ClientFree$FUNC_; }

    static final FunctionDescriptor RpcSmSetThreadHandle$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmSetThreadHandle$FUNC() { return RpcSmSetThreadHandle$FUNC_; }

    static final MethodHandle RpcSmSetThreadHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmSetThreadHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RpcSmSetThreadHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmSetThreadHandle$MH() { return RpcSmSetThreadHandle$MH_; }

    static final FunctionDescriptor RpcSmSwapClientAllocFree$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmSwapClientAllocFree$FUNC() { return RpcSmSwapClientAllocFree$FUNC_; }

    static final MethodHandle RpcSmSwapClientAllocFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSmSwapClientAllocFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RpcSmSwapClientAllocFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSmSwapClientAllocFree$MH() { return RpcSmSwapClientAllocFree$MH_; }

    static final FunctionDescriptor RpcSmSwapClientAllocFree$ClientAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmSwapClientAllocFree$ClientAlloc$FUNC() { return RpcSmSwapClientAllocFree$ClientAlloc$FUNC_; }

    static final FunctionDescriptor RpcSmSwapClientAllocFree$ClientFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSmSwapClientAllocFree$ClientFree$FUNC() { return RpcSmSwapClientAllocFree$ClientFree$FUNC_; }

    static final FunctionDescriptor NdrRpcSsEnableAllocate$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrRpcSsEnableAllocate$FUNC() { return NdrRpcSsEnableAllocate$FUNC_; }

    static final MethodHandle NdrRpcSsEnableAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrRpcSsEnableAllocate",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrRpcSsEnableAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrRpcSsEnableAllocate$MH() { return NdrRpcSsEnableAllocate$MH_; }

    static final FunctionDescriptor NdrRpcSsDisableAllocate$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrRpcSsDisableAllocate$FUNC() { return NdrRpcSsDisableAllocate$FUNC_; }

    static final MethodHandle NdrRpcSsDisableAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrRpcSsDisableAllocate",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrRpcSsDisableAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrRpcSsDisableAllocate$MH() { return NdrRpcSsDisableAllocate$MH_; }

    static final FunctionDescriptor NdrRpcSmSetClientToOsf$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrRpcSmSetClientToOsf$FUNC() { return NdrRpcSmSetClientToOsf$FUNC_; }

    static final MethodHandle NdrRpcSmSetClientToOsf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrRpcSmSetClientToOsf",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrRpcSmSetClientToOsf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrRpcSmSetClientToOsf$MH() { return NdrRpcSmSetClientToOsf$MH_; }

    static final FunctionDescriptor NdrRpcSmClientAllocate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrRpcSmClientAllocate$FUNC() { return NdrRpcSmClientAllocate$FUNC_; }

    static final MethodHandle NdrRpcSmClientAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrRpcSmClientAllocate",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        NdrRpcSmClientAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrRpcSmClientAllocate$MH() { return NdrRpcSmClientAllocate$MH_; }

    static final FunctionDescriptor NdrRpcSmClientFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrRpcSmClientFree$FUNC() { return NdrRpcSmClientFree$FUNC_; }

    static final MethodHandle NdrRpcSmClientFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrRpcSmClientFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrRpcSmClientFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrRpcSmClientFree$MH() { return NdrRpcSmClientFree$MH_; }

    static final FunctionDescriptor NdrRpcSsDefaultAllocate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrRpcSsDefaultAllocate$FUNC() { return NdrRpcSsDefaultAllocate$FUNC_; }

    static final MethodHandle NdrRpcSsDefaultAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrRpcSsDefaultAllocate",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        NdrRpcSsDefaultAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrRpcSsDefaultAllocate$MH() { return NdrRpcSsDefaultAllocate$MH_; }

    static final FunctionDescriptor NdrRpcSsDefaultFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrRpcSsDefaultFree$FUNC() { return NdrRpcSsDefaultFree$FUNC_; }

    static final MethodHandle NdrRpcSsDefaultFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrRpcSsDefaultFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrRpcSsDefaultFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrRpcSsDefaultFree$MH() { return NdrRpcSsDefaultFree$MH_; }

    static final FunctionDescriptor NdrFullPointerXlatInit$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrFullPointerXlatInit$FUNC() { return NdrFullPointerXlatInit$FUNC_; }

    static final MethodHandle NdrFullPointerXlatInit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrFullPointerXlatInit",
        "(II)Ljdk/incubator/foreign/MemoryAddress;",
        NdrFullPointerXlatInit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrFullPointerXlatInit$MH() { return NdrFullPointerXlatInit$MH_; }

    static final FunctionDescriptor NdrFullPointerXlatFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrFullPointerXlatFree$FUNC() { return NdrFullPointerXlatFree$FUNC_; }

    static final MethodHandle NdrFullPointerXlatFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrFullPointerXlatFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrFullPointerXlatFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrFullPointerXlatFree$MH() { return NdrFullPointerXlatFree$MH_; }

    static final FunctionDescriptor NdrAllocate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrAllocate$FUNC() { return NdrAllocate$FUNC_; }

    static final MethodHandle NdrAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrAllocate",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        NdrAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrAllocate$MH() { return NdrAllocate$MH_; }

    static final FunctionDescriptor NdrClearOutParameters$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrClearOutParameters$FUNC() { return NdrClearOutParameters$FUNC_; }

    static final MethodHandle NdrClearOutParameters$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrClearOutParameters",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrClearOutParameters$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrClearOutParameters$MH() { return NdrClearOutParameters$MH_; }

    static final FunctionDescriptor NdrOleAllocate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrOleAllocate$FUNC() { return NdrOleAllocate$FUNC_; }

    static final MethodHandle NdrOleAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrOleAllocate",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        NdrOleAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrOleAllocate$MH() { return NdrOleAllocate$MH_; }

    static final FunctionDescriptor NdrOleFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrOleFree$FUNC() { return NdrOleFree$FUNC_; }

    static final MethodHandle NdrOleFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrOleFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrOleFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrOleFree$MH() { return NdrOleFree$MH_; }

    static final MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Buffer"),
        C_LONG.withName("BufferSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pfnAllocate"),
        C_POINTER.withName("pfnFree"),
        C_POINTER.withName("pRpcChannelBuffer"),
        MemoryLayout.ofSequence(5, C_LONGLONG).withName("Reserved")
    ).withName("_NDR_USER_MARSHAL_INFO_LEVEL1");
    static final jdk.incubator.foreign.MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$struct$LAYOUT() { return _NDR_USER_MARSHAL_INFO_LEVEL1$struct$LAYOUT_; }

    static final MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$Buffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$Buffer$LAYOUT() { return _NDR_USER_MARSHAL_INFO_LEVEL1$Buffer$LAYOUT_; }

    static final VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$Buffer$VH_ = MemoryHandles.asAddressVarHandle(_NDR_USER_MARSHAL_INFO_LEVEL1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Buffer")));
    static final java.lang.invoke.VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$Buffer$VH() { return _NDR_USER_MARSHAL_INFO_LEVEL1$Buffer$VH_; }

    static final MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$BufferSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$BufferSize$LAYOUT() { return _NDR_USER_MARSHAL_INFO_LEVEL1$BufferSize$LAYOUT_; }

    static final VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$BufferSize$VH_ = _NDR_USER_MARSHAL_INFO_LEVEL1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferSize"));
    static final java.lang.invoke.VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$BufferSize$VH() { return _NDR_USER_MARSHAL_INFO_LEVEL1$BufferSize$VH_; }

    static final MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$pfnAllocate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$pfnAllocate$LAYOUT() { return _NDR_USER_MARSHAL_INFO_LEVEL1$pfnAllocate$LAYOUT_; }

    static final VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$pfnAllocate$VH_ = MemoryHandles.asAddressVarHandle(_NDR_USER_MARSHAL_INFO_LEVEL1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnAllocate")));
    static final java.lang.invoke.VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$pfnAllocate$VH() { return _NDR_USER_MARSHAL_INFO_LEVEL1$pfnAllocate$VH_; }

    static final MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$pfnFree$LAYOUT() { return _NDR_USER_MARSHAL_INFO_LEVEL1$pfnFree$LAYOUT_; }

    static final VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(_NDR_USER_MARSHAL_INFO_LEVEL1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$pfnFree$VH() { return _NDR_USER_MARSHAL_INFO_LEVEL1$pfnFree$VH_; }

    static final MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$pRpcChannelBuffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_USER_MARSHAL_INFO_LEVEL1$pRpcChannelBuffer$LAYOUT() { return _NDR_USER_MARSHAL_INFO_LEVEL1$pRpcChannelBuffer$LAYOUT_; }

    static final VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$pRpcChannelBuffer$VH_ = MemoryHandles.asAddressVarHandle(_NDR_USER_MARSHAL_INFO_LEVEL1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pRpcChannelBuffer")));
    static final java.lang.invoke.VarHandle _NDR_USER_MARSHAL_INFO_LEVEL1$pRpcChannelBuffer$VH() { return _NDR_USER_MARSHAL_INFO_LEVEL1$pRpcChannelBuffer$VH_; }

    static final MemoryLayout _NDR_USER_MARSHAL_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("InformationLevel"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_POINTER.withName("Buffer"),
            C_LONG.withName("BufferSize"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pfnAllocate"),
            C_POINTER.withName("pfnFree"),
            C_POINTER.withName("pRpcChannelBuffer"),
            MemoryLayout.ofSequence(5, C_LONGLONG).withName("Reserved")
        ).withName("Level1")
    ).withName("_NDR_USER_MARSHAL_INFO");
    static final jdk.incubator.foreign.MemoryLayout _NDR_USER_MARSHAL_INFO$struct$LAYOUT() { return _NDR_USER_MARSHAL_INFO$struct$LAYOUT_; }

    static final MemoryLayout _NDR_USER_MARSHAL_INFO$InformationLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NDR_USER_MARSHAL_INFO$InformationLevel$LAYOUT() { return _NDR_USER_MARSHAL_INFO$InformationLevel$LAYOUT_; }

    static final VarHandle _NDR_USER_MARSHAL_INFO$InformationLevel$VH_ = _NDR_USER_MARSHAL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InformationLevel"));
    static final java.lang.invoke.VarHandle _NDR_USER_MARSHAL_INFO$InformationLevel$VH() { return _NDR_USER_MARSHAL_INFO$InformationLevel$VH_; }

    static final FunctionDescriptor NdrGetUserMarshalInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrGetUserMarshalInfo$FUNC() { return NdrGetUserMarshalInfo$FUNC_; }

    static final MethodHandle NdrGetUserMarshalInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrGetUserMarshalInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        NdrGetUserMarshalInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrGetUserMarshalInfo$MH() { return NdrGetUserMarshalInfo$MH_; }

    static final FunctionDescriptor NdrCreateServerInterfaceFromStub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrCreateServerInterfaceFromStub$FUNC() { return NdrCreateServerInterfaceFromStub$FUNC_; }

    static final MethodHandle NdrCreateServerInterfaceFromStub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrCreateServerInterfaceFromStub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrCreateServerInterfaceFromStub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrCreateServerInterfaceFromStub$MH() { return NdrCreateServerInterfaceFromStub$MH_; }

    static final FunctionDescriptor NdrClientCall3$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofUnion(
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Simple")
    ).withName("_CLIENT_CALL_RETURN"),
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrClientCall3$FUNC() { return NdrClientCall3$FUNC_; }

    static final MethodHandle NdrClientCall3$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrClientCall3",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)Ljdk/incubator/foreign/MemorySegment;",
        NdrClientCall3$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle NdrClientCall3$MH() { return NdrClientCall3$MH_; }

    static final FunctionDescriptor Ndr64AsyncClientCall$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofUnion(
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Simple")
    ).withName("_CLIENT_CALL_RETURN"),
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Ndr64AsyncClientCall$FUNC() { return Ndr64AsyncClientCall$FUNC_; }

    static final MethodHandle Ndr64AsyncClientCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Ndr64AsyncClientCall",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)Ljdk/incubator/foreign/MemorySegment;",
        Ndr64AsyncClientCall$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle Ndr64AsyncClientCall$MH() { return Ndr64AsyncClientCall$MH_; }

    static final FunctionDescriptor Ndr64DcomAsyncClientCall$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofUnion(
        C_POINTER.withName("Pointer"),
        C_LONGLONG.withName("Simple")
    ).withName("_CLIENT_CALL_RETURN"),
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Ndr64DcomAsyncClientCall$FUNC() { return Ndr64DcomAsyncClientCall$FUNC_; }

    static final MethodHandle Ndr64DcomAsyncClientCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Ndr64DcomAsyncClientCall",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)Ljdk/incubator/foreign/MemorySegment;",
        Ndr64DcomAsyncClientCall$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle Ndr64DcomAsyncClientCall$MH() { return Ndr64DcomAsyncClientCall$MH_; }

    static final FunctionDescriptor Ndr64AsyncServerCall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Ndr64AsyncServerCall$FUNC() { return Ndr64AsyncServerCall$FUNC_; }

    static final MethodHandle Ndr64AsyncServerCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Ndr64AsyncServerCall",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        Ndr64AsyncServerCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Ndr64AsyncServerCall$MH() { return Ndr64AsyncServerCall$MH_; }

    static final FunctionDescriptor Ndr64AsyncServerCall64$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Ndr64AsyncServerCall64$FUNC() { return Ndr64AsyncServerCall64$FUNC_; }

    static final MethodHandle Ndr64AsyncServerCall64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Ndr64AsyncServerCall64",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        Ndr64AsyncServerCall64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Ndr64AsyncServerCall64$MH() { return Ndr64AsyncServerCall64$MH_; }

    static final FunctionDescriptor Ndr64AsyncServerCallAll$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Ndr64AsyncServerCallAll$FUNC() { return Ndr64AsyncServerCallAll$FUNC_; }

    static final MethodHandle Ndr64AsyncServerCallAll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Ndr64AsyncServerCallAll",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        Ndr64AsyncServerCallAll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Ndr64AsyncServerCallAll$MH() { return Ndr64AsyncServerCallAll$MH_; }

    static final FunctionDescriptor Ndr64AsyncStubCall$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Ndr64AsyncStubCall$FUNC() { return Ndr64AsyncStubCall$FUNC_; }

    static final MethodHandle Ndr64AsyncStubCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Ndr64AsyncStubCall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        Ndr64AsyncStubCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Ndr64AsyncStubCall$MH() { return Ndr64AsyncStubCall$MH_; }

    static final FunctionDescriptor Ndr64DcomAsyncStubCall$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Ndr64DcomAsyncStubCall$FUNC() { return Ndr64DcomAsyncStubCall$FUNC_; }

    static final MethodHandle Ndr64DcomAsyncStubCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Ndr64DcomAsyncStubCall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        Ndr64DcomAsyncStubCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Ndr64DcomAsyncStubCall$MH() { return Ndr64DcomAsyncStubCall$MH_; }

    static final FunctionDescriptor NdrStubCall3$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrStubCall3$FUNC() { return NdrStubCall3$FUNC_; }

    static final MethodHandle NdrStubCall3$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrStubCall3",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        NdrStubCall3$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrStubCall3$MH() { return NdrStubCall3$MH_; }

    static final FunctionDescriptor NdrServerCallAll$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerCallAll$FUNC() { return NdrServerCallAll$FUNC_; }

    static final MethodHandle NdrServerCallAll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerCallAll",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrServerCallAll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerCallAll$MH() { return NdrServerCallAll$MH_; }

    static final FunctionDescriptor NdrServerCallNdr64$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerCallNdr64$FUNC() { return NdrServerCallNdr64$FUNC_; }

    static final MethodHandle NdrServerCallNdr64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerCallNdr64",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrServerCallNdr64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerCallNdr64$MH() { return NdrServerCallNdr64$MH_; }

    static final FunctionDescriptor NdrServerCall3$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrServerCall3$FUNC() { return NdrServerCall3$FUNC_; }

    static final MethodHandle NdrServerCall3$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrServerCall3",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrServerCall3$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrServerCall3$MH() { return NdrServerCall3$MH_; }

    static final FunctionDescriptor NdrPartialIgnoreClientMarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrPartialIgnoreClientMarshall$FUNC() { return NdrPartialIgnoreClientMarshall$FUNC_; }

    static final MethodHandle NdrPartialIgnoreClientMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrPartialIgnoreClientMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrPartialIgnoreClientMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrPartialIgnoreClientMarshall$MH() { return NdrPartialIgnoreClientMarshall$MH_; }

    static final FunctionDescriptor NdrPartialIgnoreServerUnmarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrPartialIgnoreServerUnmarshall$FUNC() { return NdrPartialIgnoreServerUnmarshall$FUNC_; }

    static final MethodHandle NdrPartialIgnoreServerUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrPartialIgnoreServerUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrPartialIgnoreServerUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrPartialIgnoreServerUnmarshall$MH() { return NdrPartialIgnoreServerUnmarshall$MH_; }

    static final FunctionDescriptor NdrPartialIgnoreClientBufferSize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrPartialIgnoreClientBufferSize$FUNC() { return NdrPartialIgnoreClientBufferSize$FUNC_; }

    static final MethodHandle NdrPartialIgnoreClientBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrPartialIgnoreClientBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrPartialIgnoreClientBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrPartialIgnoreClientBufferSize$MH() { return NdrPartialIgnoreClientBufferSize$MH_; }

    static final FunctionDescriptor NdrPartialIgnoreServerInitialize$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NdrPartialIgnoreServerInitialize$FUNC() { return NdrPartialIgnoreServerInitialize$FUNC_; }

    static final MethodHandle NdrPartialIgnoreServerInitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NdrPartialIgnoreServerInitialize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NdrPartialIgnoreServerInitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NdrPartialIgnoreServerInitialize$MH() { return NdrPartialIgnoreServerInitialize$MH_; }

    static final FunctionDescriptor RpcUserFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcUserFree$FUNC() { return RpcUserFree$FUNC_; }

    static final MethodHandle RpcUserFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcUserFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RpcUserFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcUserFree$MH() { return RpcUserFree$MH_; }

    static final MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH() { return __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec", __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH() { return __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec", __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout _COAUTHIDENTITY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("User"),
        C_LONG.withName("UserLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("Domain"),
        C_LONG.withName("DomainLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("Password"),
        C_LONG.withName("PasswordLength"),
        C_LONG.withName("Flags")
    ).withName("_COAUTHIDENTITY");
    static final jdk.incubator.foreign.MemoryLayout _COAUTHIDENTITY$struct$LAYOUT() { return _COAUTHIDENTITY$struct$LAYOUT_; }

    static final MemoryLayout _COAUTHIDENTITY$User$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHIDENTITY$User$LAYOUT() { return _COAUTHIDENTITY$User$LAYOUT_; }

    static final VarHandle _COAUTHIDENTITY$User$VH_ = MemoryHandles.asAddressVarHandle(_COAUTHIDENTITY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("User")));
    static final java.lang.invoke.VarHandle _COAUTHIDENTITY$User$VH() { return _COAUTHIDENTITY$User$VH_; }

    static final MemoryLayout _COAUTHIDENTITY$UserLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHIDENTITY$UserLength$LAYOUT() { return _COAUTHIDENTITY$UserLength$LAYOUT_; }

    static final VarHandle _COAUTHIDENTITY$UserLength$VH_ = _COAUTHIDENTITY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserLength"));
    static final java.lang.invoke.VarHandle _COAUTHIDENTITY$UserLength$VH() { return _COAUTHIDENTITY$UserLength$VH_; }

    static final MemoryLayout _COAUTHIDENTITY$Domain$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHIDENTITY$Domain$LAYOUT() { return _COAUTHIDENTITY$Domain$LAYOUT_; }

    static final VarHandle _COAUTHIDENTITY$Domain$VH_ = MemoryHandles.asAddressVarHandle(_COAUTHIDENTITY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Domain")));
    static final java.lang.invoke.VarHandle _COAUTHIDENTITY$Domain$VH() { return _COAUTHIDENTITY$Domain$VH_; }

    static final MemoryLayout _COAUTHIDENTITY$DomainLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHIDENTITY$DomainLength$LAYOUT() { return _COAUTHIDENTITY$DomainLength$LAYOUT_; }

    static final VarHandle _COAUTHIDENTITY$DomainLength$VH_ = _COAUTHIDENTITY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DomainLength"));
    static final java.lang.invoke.VarHandle _COAUTHIDENTITY$DomainLength$VH() { return _COAUTHIDENTITY$DomainLength$VH_; }

    static final MemoryLayout _COAUTHIDENTITY$Password$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHIDENTITY$Password$LAYOUT() { return _COAUTHIDENTITY$Password$LAYOUT_; }

    static final VarHandle _COAUTHIDENTITY$Password$VH_ = MemoryHandles.asAddressVarHandle(_COAUTHIDENTITY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Password")));
    static final java.lang.invoke.VarHandle _COAUTHIDENTITY$Password$VH() { return _COAUTHIDENTITY$Password$VH_; }

    static final MemoryLayout _COAUTHIDENTITY$PasswordLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHIDENTITY$PasswordLength$LAYOUT() { return _COAUTHIDENTITY$PasswordLength$LAYOUT_; }

    static final VarHandle _COAUTHIDENTITY$PasswordLength$VH_ = _COAUTHIDENTITY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PasswordLength"));
    static final java.lang.invoke.VarHandle _COAUTHIDENTITY$PasswordLength$VH() { return _COAUTHIDENTITY$PasswordLength$VH_; }

    static final MemoryLayout _COAUTHIDENTITY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHIDENTITY$Flags$LAYOUT() { return _COAUTHIDENTITY$Flags$LAYOUT_; }

    static final VarHandle _COAUTHIDENTITY$Flags$VH_ = _COAUTHIDENTITY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _COAUTHIDENTITY$Flags$VH() { return _COAUTHIDENTITY$Flags$VH_; }

    static final MemoryLayout _COAUTHINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwAuthnSvc"),
        C_LONG.withName("dwAuthzSvc"),
        C_POINTER.withName("pwszServerPrincName"),
        C_LONG.withName("dwAuthnLevel"),
        C_LONG.withName("dwImpersonationLevel"),
        C_POINTER.withName("pAuthIdentityData"),
        C_LONG.withName("dwCapabilities"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_COAUTHINFO");
    static final jdk.incubator.foreign.MemoryLayout _COAUTHINFO$struct$LAYOUT() { return _COAUTHINFO$struct$LAYOUT_; }

    static final MemoryLayout _COAUTHINFO$dwAuthnSvc$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHINFO$dwAuthnSvc$LAYOUT() { return _COAUTHINFO$dwAuthnSvc$LAYOUT_; }

    static final VarHandle _COAUTHINFO$dwAuthnSvc$VH_ = _COAUTHINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAuthnSvc"));
    static final java.lang.invoke.VarHandle _COAUTHINFO$dwAuthnSvc$VH() { return _COAUTHINFO$dwAuthnSvc$VH_; }

    static final MemoryLayout _COAUTHINFO$dwAuthzSvc$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHINFO$dwAuthzSvc$LAYOUT() { return _COAUTHINFO$dwAuthzSvc$LAYOUT_; }

    static final VarHandle _COAUTHINFO$dwAuthzSvc$VH_ = _COAUTHINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAuthzSvc"));
    static final java.lang.invoke.VarHandle _COAUTHINFO$dwAuthzSvc$VH() { return _COAUTHINFO$dwAuthzSvc$VH_; }

    static final MemoryLayout _COAUTHINFO$pwszServerPrincName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHINFO$pwszServerPrincName$LAYOUT() { return _COAUTHINFO$pwszServerPrincName$LAYOUT_; }

    static final VarHandle _COAUTHINFO$pwszServerPrincName$VH_ = MemoryHandles.asAddressVarHandle(_COAUTHINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwszServerPrincName")));
    static final java.lang.invoke.VarHandle _COAUTHINFO$pwszServerPrincName$VH() { return _COAUTHINFO$pwszServerPrincName$VH_; }

    static final MemoryLayout _COAUTHINFO$dwAuthnLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHINFO$dwAuthnLevel$LAYOUT() { return _COAUTHINFO$dwAuthnLevel$LAYOUT_; }

    static final VarHandle _COAUTHINFO$dwAuthnLevel$VH_ = _COAUTHINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAuthnLevel"));
    static final java.lang.invoke.VarHandle _COAUTHINFO$dwAuthnLevel$VH() { return _COAUTHINFO$dwAuthnLevel$VH_; }

    static final MemoryLayout _COAUTHINFO$dwImpersonationLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHINFO$dwImpersonationLevel$LAYOUT() { return _COAUTHINFO$dwImpersonationLevel$LAYOUT_; }

    static final VarHandle _COAUTHINFO$dwImpersonationLevel$VH_ = _COAUTHINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwImpersonationLevel"));
    static final java.lang.invoke.VarHandle _COAUTHINFO$dwImpersonationLevel$VH() { return _COAUTHINFO$dwImpersonationLevel$VH_; }

    static final MemoryLayout _COAUTHINFO$pAuthIdentityData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHINFO$pAuthIdentityData$LAYOUT() { return _COAUTHINFO$pAuthIdentityData$LAYOUT_; }

    static final VarHandle _COAUTHINFO$pAuthIdentityData$VH_ = MemoryHandles.asAddressVarHandle(_COAUTHINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAuthIdentityData")));
    static final java.lang.invoke.VarHandle _COAUTHINFO$pAuthIdentityData$VH() { return _COAUTHINFO$pAuthIdentityData$VH_; }

    static final MemoryLayout _COAUTHINFO$dwCapabilities$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _COAUTHINFO$dwCapabilities$LAYOUT() { return _COAUTHINFO$dwCapabilities$LAYOUT_; }

    static final VarHandle _COAUTHINFO$dwCapabilities$VH_ = _COAUTHINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCapabilities"));
    static final java.lang.invoke.VarHandle _COAUTHINFO$dwCapabilities$VH() { return _COAUTHINFO$dwCapabilities$VH_; }

    static final int MEMCTX_TASK() { return (int)1L; }

    static final int MEMCTX_SHARED() { return (int)2L; }

    static final int MEMCTX_MACSYSTEM() { return (int)3L; }

    static final int MEMCTX_UNKNOWN() { return (int)-1L; }

    static final int MEMCTX_SAME() { return (int)-2L; }

    static final int CLSCTX_INPROC_SERVER() { return (int)1L; }

    static final int CLSCTX_INPROC_HANDLER() { return (int)2L; }

    static final int CLSCTX_LOCAL_SERVER() { return (int)4L; }

    static final int CLSCTX_INPROC_SERVER16() { return (int)8L; }

    static final int CLSCTX_REMOTE_SERVER() { return (int)16L; }

    static final int CLSCTX_INPROC_HANDLER16() { return (int)32L; }

    static final int CLSCTX_RESERVED1() { return (int)64L; }

    static final int CLSCTX_RESERVED2() { return (int)128L; }

    static final int CLSCTX_RESERVED3() { return (int)256L; }

    static final int CLSCTX_RESERVED4() { return (int)512L; }

    static final int CLSCTX_NO_CODE_DOWNLOAD() { return (int)1024L; }

    static final int CLSCTX_RESERVED5() { return (int)2048L; }

    static final int CLSCTX_NO_CUSTOM_MARSHAL() { return (int)4096L; }

    static final int CLSCTX_ENABLE_CODE_DOWNLOAD() { return (int)8192L; }

    static final int CLSCTX_NO_FAILURE_LOG() { return (int)16384L; }

    static final int CLSCTX_DISABLE_AAA() { return (int)32768L; }

    static final int CLSCTX_ENABLE_AAA() { return (int)65536L; }

    static final int CLSCTX_FROM_DEFAULT_CONTEXT() { return (int)131072L; }

    static final int CLSCTX_ACTIVATE_X86_SERVER() { return (int)262144L; }

    static final int CLSCTX_ACTIVATE_32_BIT_SERVER() { return (int)262144L; }

    static final int CLSCTX_ACTIVATE_64_BIT_SERVER() { return (int)524288L; }

    static final int CLSCTX_ENABLE_CLOAKING() { return (int)1048576L; }

    static final int CLSCTX_APPCONTAINER() { return (int)4194304L; }

    static final int CLSCTX_ACTIVATE_AAA_AS_IU() { return (int)8388608L; }

    static final int CLSCTX_RESERVED6() { return (int)16777216L; }

    static final int CLSCTX_ACTIVATE_ARM32_SERVER() { return (int)33554432L; }

    static final int CLSCTX_PS_DLL() { return (int)-2147483648L; }

    static final int MSHLFLAGS_NORMAL() { return (int)0L; }

    static final int MSHLFLAGS_TABLESTRONG() { return (int)1L; }

    static final int MSHLFLAGS_TABLEWEAK() { return (int)2L; }

    static final int MSHLFLAGS_NOPING() { return (int)4L; }

    static final int MSHLFLAGS_RESERVED1() { return (int)8L; }

    static final int MSHLFLAGS_RESERVED2() { return (int)16L; }

    static final int MSHLFLAGS_RESERVED3() { return (int)32L; }

    static final int MSHLFLAGS_RESERVED4() { return (int)64L; }

    static final int MSHCTX_LOCAL() { return (int)0L; }

    static final int MSHCTX_NOSHAREDMEM() { return (int)1L; }

    static final int MSHCTX_DIFFERENTMACHINE() { return (int)2L; }

    static final int MSHCTX_INPROC() { return (int)3L; }

    static final int MSHCTX_CROSSCTX() { return (int)4L; }

    static final int MSHCTX_RESERVED1() { return (int)5L; }

    static final MemoryLayout _BYTE_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("clSize"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("abData"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_BYTE_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _BYTE_BLOB$struct$LAYOUT() { return _BYTE_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _BYTE_BLOB$clSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BYTE_BLOB$clSize$LAYOUT() { return _BYTE_BLOB$clSize$LAYOUT_; }

    static final VarHandle _BYTE_BLOB$clSize$VH_ = _BYTE_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clSize"));
    static final java.lang.invoke.VarHandle _BYTE_BLOB$clSize$VH() { return _BYTE_BLOB$clSize$VH_; }

    static final MemoryLayout _WORD_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("clSize"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("asData"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_WORD_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _WORD_BLOB$struct$LAYOUT() { return _WORD_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _WORD_BLOB$clSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WORD_BLOB$clSize$LAYOUT() { return _WORD_BLOB$clSize$LAYOUT_; }

    static final VarHandle _WORD_BLOB$clSize$VH_ = _WORD_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clSize"));
    static final java.lang.invoke.VarHandle _WORD_BLOB$clSize$VH() { return _WORD_BLOB$clSize$VH_; }

    static final MemoryLayout _DWORD_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("clSize"),
        MemoryLayout.ofSequence(1, C_LONG).withName("alData")
    ).withName("_DWORD_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _DWORD_BLOB$struct$LAYOUT() { return _DWORD_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _DWORD_BLOB$clSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DWORD_BLOB$clSize$LAYOUT() { return _DWORD_BLOB$clSize$LAYOUT_; }

    static final VarHandle _DWORD_BLOB$clSize$VH_ = _DWORD_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clSize"));
    static final java.lang.invoke.VarHandle _DWORD_BLOB$clSize$VH() { return _DWORD_BLOB$clSize$VH_; }

    static final MemoryLayout _FLAGGED_BYTE_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("fFlags"),
        C_LONG.withName("clSize"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("abData"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_FLAGGED_BYTE_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _FLAGGED_BYTE_BLOB$struct$LAYOUT() { return _FLAGGED_BYTE_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _FLAGGED_BYTE_BLOB$fFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FLAGGED_BYTE_BLOB$fFlags$LAYOUT() { return _FLAGGED_BYTE_BLOB$fFlags$LAYOUT_; }

    static final VarHandle _FLAGGED_BYTE_BLOB$fFlags$VH_ = _FLAGGED_BYTE_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fFlags"));
    static final java.lang.invoke.VarHandle _FLAGGED_BYTE_BLOB$fFlags$VH() { return _FLAGGED_BYTE_BLOB$fFlags$VH_; }

    static final MemoryLayout _FLAGGED_BYTE_BLOB$clSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FLAGGED_BYTE_BLOB$clSize$LAYOUT() { return _FLAGGED_BYTE_BLOB$clSize$LAYOUT_; }

    static final VarHandle _FLAGGED_BYTE_BLOB$clSize$VH_ = _FLAGGED_BYTE_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clSize"));
    static final java.lang.invoke.VarHandle _FLAGGED_BYTE_BLOB$clSize$VH() { return _FLAGGED_BYTE_BLOB$clSize$VH_; }

    static final MemoryLayout _FLAGGED_WORD_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("fFlags"),
        C_LONG.withName("clSize"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("asData"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_FLAGGED_WORD_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _FLAGGED_WORD_BLOB$struct$LAYOUT() { return _FLAGGED_WORD_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _FLAGGED_WORD_BLOB$fFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FLAGGED_WORD_BLOB$fFlags$LAYOUT() { return _FLAGGED_WORD_BLOB$fFlags$LAYOUT_; }

    static final VarHandle _FLAGGED_WORD_BLOB$fFlags$VH_ = _FLAGGED_WORD_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fFlags"));
    static final java.lang.invoke.VarHandle _FLAGGED_WORD_BLOB$fFlags$VH() { return _FLAGGED_WORD_BLOB$fFlags$VH_; }

    static final MemoryLayout _FLAGGED_WORD_BLOB$clSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FLAGGED_WORD_BLOB$clSize$LAYOUT() { return _FLAGGED_WORD_BLOB$clSize$LAYOUT_; }

    static final VarHandle _FLAGGED_WORD_BLOB$clSize$VH_ = _FLAGGED_WORD_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clSize"));
    static final java.lang.invoke.VarHandle _FLAGGED_WORD_BLOB$clSize$VH() { return _FLAGGED_WORD_BLOB$clSize$VH_; }

    static final MemoryLayout _BYTE_SIZEDARR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("clSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pData")
    ).withName("_BYTE_SIZEDARR");
    static final jdk.incubator.foreign.MemoryLayout _BYTE_SIZEDARR$struct$LAYOUT() { return _BYTE_SIZEDARR$struct$LAYOUT_; }

    static final MemoryLayout _BYTE_SIZEDARR$clSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BYTE_SIZEDARR$clSize$LAYOUT() { return _BYTE_SIZEDARR$clSize$LAYOUT_; }

    static final VarHandle _BYTE_SIZEDARR$clSize$VH_ = _BYTE_SIZEDARR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clSize"));
    static final java.lang.invoke.VarHandle _BYTE_SIZEDARR$clSize$VH() { return _BYTE_SIZEDARR$clSize$VH_; }

    static final MemoryLayout _BYTE_SIZEDARR$pData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BYTE_SIZEDARR$pData$LAYOUT() { return _BYTE_SIZEDARR$pData$LAYOUT_; }

    static final VarHandle _BYTE_SIZEDARR$pData$VH_ = MemoryHandles.asAddressVarHandle(_BYTE_SIZEDARR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pData")));
    static final java.lang.invoke.VarHandle _BYTE_SIZEDARR$pData$VH() { return _BYTE_SIZEDARR$pData$VH_; }

    static final MemoryLayout _SHORT_SIZEDARR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("clSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pData")
    ).withName("_SHORT_SIZEDARR");
    static final jdk.incubator.foreign.MemoryLayout _SHORT_SIZEDARR$struct$LAYOUT() { return _SHORT_SIZEDARR$struct$LAYOUT_; }

    static final MemoryLayout _SHORT_SIZEDARR$clSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SHORT_SIZEDARR$clSize$LAYOUT() { return _SHORT_SIZEDARR$clSize$LAYOUT_; }

    static final VarHandle _SHORT_SIZEDARR$clSize$VH_ = _SHORT_SIZEDARR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clSize"));
    static final java.lang.invoke.VarHandle _SHORT_SIZEDARR$clSize$VH() { return _SHORT_SIZEDARR$clSize$VH_; }

    static final MemoryLayout _SHORT_SIZEDARR$pData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SHORT_SIZEDARR$pData$LAYOUT() { return _SHORT_SIZEDARR$pData$LAYOUT_; }

    static final VarHandle _SHORT_SIZEDARR$pData$VH_ = MemoryHandles.asAddressVarHandle(_SHORT_SIZEDARR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pData")));
    static final java.lang.invoke.VarHandle _SHORT_SIZEDARR$pData$VH() { return _SHORT_SIZEDARR$pData$VH_; }

    static final MemoryLayout _LONG_SIZEDARR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("clSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pData")
    ).withName("_LONG_SIZEDARR");
    static final jdk.incubator.foreign.MemoryLayout _LONG_SIZEDARR$struct$LAYOUT() { return _LONG_SIZEDARR$struct$LAYOUT_; }

    static final MemoryLayout _LONG_SIZEDARR$clSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LONG_SIZEDARR$clSize$LAYOUT() { return _LONG_SIZEDARR$clSize$LAYOUT_; }

    static final VarHandle _LONG_SIZEDARR$clSize$VH_ = _LONG_SIZEDARR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clSize"));
    static final java.lang.invoke.VarHandle _LONG_SIZEDARR$clSize$VH() { return _LONG_SIZEDARR$clSize$VH_; }

    static final MemoryLayout _LONG_SIZEDARR$pData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _LONG_SIZEDARR$pData$LAYOUT() { return _LONG_SIZEDARR$pData$LAYOUT_; }

    static final VarHandle _LONG_SIZEDARR$pData$VH_ = MemoryHandles.asAddressVarHandle(_LONG_SIZEDARR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pData")));
    static final java.lang.invoke.VarHandle _LONG_SIZEDARR$pData$VH() { return _LONG_SIZEDARR$pData$VH_; }

    static final MemoryLayout _HYPER_SIZEDARR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("clSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pData")
    ).withName("_HYPER_SIZEDARR");
    static final jdk.incubator.foreign.MemoryLayout _HYPER_SIZEDARR$struct$LAYOUT() { return _HYPER_SIZEDARR$struct$LAYOUT_; }

    static final MemoryLayout _HYPER_SIZEDARR$clSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _HYPER_SIZEDARR$clSize$LAYOUT() { return _HYPER_SIZEDARR$clSize$LAYOUT_; }

    static final VarHandle _HYPER_SIZEDARR$clSize$VH_ = _HYPER_SIZEDARR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("clSize"));
    static final java.lang.invoke.VarHandle _HYPER_SIZEDARR$clSize$VH() { return _HYPER_SIZEDARR$clSize$VH_; }

}

