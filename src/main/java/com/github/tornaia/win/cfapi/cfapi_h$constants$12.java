// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$12 extends cfapi_h$constants$11 {

    /* package-private */ cfapi_h$constants$12() {}
    static final int IME_ESC_AUTOMATA() { return (int)4105L; }

    static final int IME_ESC_PRIVATE_HOTKEY() { return (int)4106L; }

    static final int IME_ESC_GETHELPFILENAME() { return (int)4107L; }

    static final int IME_REGWORD_STYLE_EUDC() { return (int)1L; }

    static final int IACE_CHILDREN() { return (int)1L; }

    static final int IACE_DEFAULT() { return (int)16L; }

    static final int IACE_IGNORENOCONTEXT() { return (int)32L; }

    static final int IGIMIF_RIGHTMENU() { return (int)1L; }

    static final int IGIMII_CMODE() { return (int)1L; }

    static final int IGIMII_SMODE() { return (int)2L; }

    static final int IGIMII_CONFIGURE() { return (int)4L; }

    static final int IGIMII_TOOLS() { return (int)8L; }

    static final int IGIMII_HELP() { return (int)16L; }

    static final int IGIMII_OTHER() { return (int)32L; }

    static final int IGIMII_INPUTTOOLS() { return (int)64L; }

    static final int IMFT_RADIOCHECK() { return (int)1L; }

    static final int IMFT_SEPARATOR() { return (int)2L; }

    static final int IMFT_SUBMENU() { return (int)4L; }

    static final int SOFTKEYBOARD_TYPE_T1() { return (int)1L; }

    static final int SOFTKEYBOARD_TYPE_C1() { return (int)2L; }

    static final int CF_PLACEHOLDER_MAX_FILE_IDENTITY_LENGTH() { return (int)4096L; }

    static final int CF_MAX_PRIORITY_HINT() { return (int)15L; }

    static final int CF_MAX_PROVIDER_NAME_LENGTH() { return (int)255L; }

    static final int CF_MAX_PROVIDER_VERSION_LENGTH() { return (int)255L; }

    static final FunctionDescriptor __va_start$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __va_start$FUNC() { return __va_start$FUNC_; }

    static final MethodHandle __va_start$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__va_start",
        "(Ljdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)V",
        __va_start$FUNC_, true
    );
    static final java.lang.invoke.MethodHandle __va_start$MH() { return __va_start$MH_; }

    static final FunctionDescriptor __security_init_cookie$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor __security_init_cookie$FUNC() { return __security_init_cookie$FUNC_; }

    static final MethodHandle __security_init_cookie$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__security_init_cookie",
        "()V",
        __security_init_cookie$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __security_init_cookie$MH() { return __security_init_cookie$MH_; }

    static final FunctionDescriptor __security_check_cookie$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __security_check_cookie$FUNC() { return __security_check_cookie$FUNC_; }

    static final MethodHandle __security_check_cookie$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__security_check_cookie",
        "(J)V",
        __security_check_cookie$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __security_check_cookie$MH() { return __security_check_cookie$MH_; }

    static final FunctionDescriptor __report_gsfailure$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __report_gsfailure$FUNC() { return __report_gsfailure$FUNC_; }

    static final MethodHandle __report_gsfailure$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__report_gsfailure",
        "(J)V",
        __report_gsfailure$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __report_gsfailure$MH() { return __report_gsfailure$MH_; }

    static final MemoryLayout __security_cookie$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout __security_cookie$LAYOUT() { return __security_cookie$LAYOUT_; }

    static final VarHandle __security_cookie$VH_ = __security_cookie$LAYOUT_.varHandle(long.class);
    static final java.lang.invoke.VarHandle __security_cookie$VH() { return __security_cookie$VH_; }

    static final MemorySegment __security_cookie$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__security_cookie", __security_cookie$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __security_cookie$SEGMENT() { return __security_cookie$SEGMENT_; }

    static final int ExceptionContinueExecution() { return (int)0L; }

    static final int ExceptionContinueSearch() { return (int)1L; }

    static final int ExceptionNestedException() { return (int)2L; }

    static final int ExceptionCollidedUnwind() { return (int)3L; }

    static final FunctionDescriptor __C_specific_handler$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __C_specific_handler$FUNC() { return __C_specific_handler$FUNC_; }

    static final MethodHandle __C_specific_handler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__C_specific_handler",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        __C_specific_handler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __C_specific_handler$MH() { return __C_specific_handler$MH_; }

    static final FunctionDescriptor _exception_code$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor _exception_code$FUNC() { return _exception_code$FUNC_; }

    static final MethodHandle _exception_code$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_exception_code",
        "()I",
        _exception_code$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _exception_code$MH() { return _exception_code$MH_; }

    static final FunctionDescriptor _exception_info$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor _exception_info$FUNC() { return _exception_info$FUNC_; }

    static final MethodHandle _exception_info$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_exception_info",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        _exception_info$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _exception_info$MH() { return _exception_info$MH_; }

    static final FunctionDescriptor _abnormal_termination$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor _abnormal_termination$FUNC() { return _abnormal_termination$FUNC_; }

    static final MethodHandle _abnormal_termination$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_abnormal_termination",
        "()I",
        _abnormal_termination$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _abnormal_termination$MH() { return _abnormal_termination$MH_; }

    static final FunctionDescriptor _invalid_parameter_noinfo$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor _invalid_parameter_noinfo$FUNC() { return _invalid_parameter_noinfo$FUNC_; }

    static final MethodHandle _invalid_parameter_noinfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_invalid_parameter_noinfo",
        "()V",
        _invalid_parameter_noinfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _invalid_parameter_noinfo$MH() { return _invalid_parameter_noinfo$MH_; }

    static final FunctionDescriptor _invalid_parameter_noinfo_noreturn$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor _invalid_parameter_noinfo_noreturn$FUNC() { return _invalid_parameter_noinfo_noreturn$FUNC_; }

    static final MethodHandle _invalid_parameter_noinfo_noreturn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_invalid_parameter_noinfo_noreturn",
        "()V",
        _invalid_parameter_noinfo_noreturn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _invalid_parameter_noinfo_noreturn$MH() { return _invalid_parameter_noinfo_noreturn$MH_; }

    static final FunctionDescriptor _invoke_watson$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _invoke_watson$FUNC() { return _invoke_watson$FUNC_; }

    static final MethodHandle _invoke_watson$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_invoke_watson",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)V",
        _invoke_watson$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _invoke_watson$MH() { return _invoke_watson$MH_; }

    static final MemoryLayout __crt_locale_data_public$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("_locale_pctype"),
        C_INT.withName("_locale_mb_cur_max"),
        C_INT.withName("_locale_lc_codepage")
    ).withName("__crt_locale_data_public");
    static final jdk.incubator.foreign.MemoryLayout __crt_locale_data_public$struct$LAYOUT() { return __crt_locale_data_public$struct$LAYOUT_; }

    static final MemoryLayout __crt_locale_data_public$_locale_pctype$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __crt_locale_data_public$_locale_pctype$LAYOUT() { return __crt_locale_data_public$_locale_pctype$LAYOUT_; }

    static final VarHandle __crt_locale_data_public$_locale_pctype$VH_ = MemoryHandles.asAddressVarHandle(__crt_locale_data_public$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("_locale_pctype")));
    static final java.lang.invoke.VarHandle __crt_locale_data_public$_locale_pctype$VH() { return __crt_locale_data_public$_locale_pctype$VH_; }

    static final MemoryLayout __crt_locale_data_public$_locale_mb_cur_max$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __crt_locale_data_public$_locale_mb_cur_max$LAYOUT() { return __crt_locale_data_public$_locale_mb_cur_max$LAYOUT_; }

    static final VarHandle __crt_locale_data_public$_locale_mb_cur_max$VH_ = __crt_locale_data_public$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("_locale_mb_cur_max"));
    static final java.lang.invoke.VarHandle __crt_locale_data_public$_locale_mb_cur_max$VH() { return __crt_locale_data_public$_locale_mb_cur_max$VH_; }

    static final MemoryLayout __crt_locale_data_public$_locale_lc_codepage$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __crt_locale_data_public$_locale_lc_codepage$LAYOUT() { return __crt_locale_data_public$_locale_lc_codepage$LAYOUT_; }

    static final VarHandle __crt_locale_data_public$_locale_lc_codepage$VH_ = __crt_locale_data_public$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("_locale_lc_codepage"));
    static final java.lang.invoke.VarHandle __crt_locale_data_public$_locale_lc_codepage$VH() { return __crt_locale_data_public$_locale_lc_codepage$VH_; }

    static final MemoryLayout __crt_locale_pointers$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("locinfo"),
        C_POINTER.withName("mbcinfo")
    ).withName("__crt_locale_pointers");
    static final jdk.incubator.foreign.MemoryLayout __crt_locale_pointers$struct$LAYOUT() { return __crt_locale_pointers$struct$LAYOUT_; }

    static final MemoryLayout __crt_locale_pointers$locinfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __crt_locale_pointers$locinfo$LAYOUT() { return __crt_locale_pointers$locinfo$LAYOUT_; }

    static final VarHandle __crt_locale_pointers$locinfo$VH_ = MemoryHandles.asAddressVarHandle(__crt_locale_pointers$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("locinfo")));
    static final java.lang.invoke.VarHandle __crt_locale_pointers$locinfo$VH() { return __crt_locale_pointers$locinfo$VH_; }

    static final MemoryLayout __crt_locale_pointers$mbcinfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __crt_locale_pointers$mbcinfo$LAYOUT() { return __crt_locale_pointers$mbcinfo$LAYOUT_; }

    static final VarHandle __crt_locale_pointers$mbcinfo$VH_ = MemoryHandles.asAddressVarHandle(__crt_locale_pointers$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("mbcinfo")));
    static final java.lang.invoke.VarHandle __crt_locale_pointers$mbcinfo$VH() { return __crt_locale_pointers$mbcinfo$VH_; }

    static final MemoryLayout _Mbstatet$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("_Wchar"),
        C_SHORT.withName("_Byte"),
        C_SHORT.withName("_State")
    ).withName("_Mbstatet");
    static final jdk.incubator.foreign.MemoryLayout _Mbstatet$struct$LAYOUT() { return _Mbstatet$struct$LAYOUT_; }

    static final MemoryLayout _Mbstatet$_Wchar$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _Mbstatet$_Wchar$LAYOUT() { return _Mbstatet$_Wchar$LAYOUT_; }

    static final VarHandle _Mbstatet$_Wchar$VH_ = _Mbstatet$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("_Wchar"));
    static final java.lang.invoke.VarHandle _Mbstatet$_Wchar$VH() { return _Mbstatet$_Wchar$VH_; }

    static final MemoryLayout _Mbstatet$_Byte$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _Mbstatet$_Byte$LAYOUT() { return _Mbstatet$_Byte$LAYOUT_; }

    static final VarHandle _Mbstatet$_Byte$VH_ = _Mbstatet$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("_Byte"));
    static final java.lang.invoke.VarHandle _Mbstatet$_Byte$VH() { return _Mbstatet$_Byte$VH_; }

    static final MemoryLayout _Mbstatet$_State$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _Mbstatet$_State$LAYOUT() { return _Mbstatet$_State$LAYOUT_; }

    static final VarHandle _Mbstatet$_State$VH_ = _Mbstatet$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("_State"));
    static final java.lang.invoke.VarHandle _Mbstatet$_State$VH() { return _Mbstatet$_State$VH_; }

    static final FunctionDescriptor __pctype_func$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor __pctype_func$FUNC() { return __pctype_func$FUNC_; }

    static final MethodHandle __pctype_func$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__pctype_func",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        __pctype_func$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __pctype_func$MH() { return __pctype_func$MH_; }

    static final FunctionDescriptor __pwctype_func$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor __pwctype_func$FUNC() { return __pwctype_func$FUNC_; }

    static final MethodHandle __pwctype_func$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__pwctype_func",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        __pwctype_func$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __pwctype_func$MH() { return __pwctype_func$MH_; }

    static final FunctionDescriptor iswalnum$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswalnum$FUNC() { return iswalnum$FUNC_; }

    static final MethodHandle iswalnum$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswalnum",
        "(S)I",
        iswalnum$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswalnum$MH() { return iswalnum$MH_; }

    static final FunctionDescriptor iswalpha$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswalpha$FUNC() { return iswalpha$FUNC_; }

    static final MethodHandle iswalpha$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswalpha",
        "(S)I",
        iswalpha$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswalpha$MH() { return iswalpha$MH_; }

    static final FunctionDescriptor iswascii$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswascii$FUNC() { return iswascii$FUNC_; }

    static final MethodHandle iswascii$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswascii",
        "(S)I",
        iswascii$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswascii$MH() { return iswascii$MH_; }

    static final FunctionDescriptor iswblank$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswblank$FUNC() { return iswblank$FUNC_; }

    static final MethodHandle iswblank$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswblank",
        "(S)I",
        iswblank$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswblank$MH() { return iswblank$MH_; }

    static final FunctionDescriptor iswcntrl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswcntrl$FUNC() { return iswcntrl$FUNC_; }

    static final MethodHandle iswcntrl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswcntrl",
        "(S)I",
        iswcntrl$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswcntrl$MH() { return iswcntrl$MH_; }

    static final FunctionDescriptor iswdigit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswdigit$FUNC() { return iswdigit$FUNC_; }

    static final MethodHandle iswdigit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswdigit",
        "(S)I",
        iswdigit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswdigit$MH() { return iswdigit$MH_; }

    static final FunctionDescriptor iswgraph$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswgraph$FUNC() { return iswgraph$FUNC_; }

    static final MethodHandle iswgraph$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswgraph",
        "(S)I",
        iswgraph$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswgraph$MH() { return iswgraph$MH_; }

    static final FunctionDescriptor iswlower$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswlower$FUNC() { return iswlower$FUNC_; }

    static final MethodHandle iswlower$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswlower",
        "(S)I",
        iswlower$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswlower$MH() { return iswlower$MH_; }

    static final FunctionDescriptor iswprint$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswprint$FUNC() { return iswprint$FUNC_; }

    static final MethodHandle iswprint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswprint",
        "(S)I",
        iswprint$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswprint$MH() { return iswprint$MH_; }

    static final FunctionDescriptor iswpunct$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswpunct$FUNC() { return iswpunct$FUNC_; }

    static final MethodHandle iswpunct$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswpunct",
        "(S)I",
        iswpunct$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswpunct$MH() { return iswpunct$MH_; }

    static final FunctionDescriptor iswspace$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswspace$FUNC() { return iswspace$FUNC_; }

    static final MethodHandle iswspace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswspace",
        "(S)I",
        iswspace$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswspace$MH() { return iswspace$MH_; }

    static final FunctionDescriptor iswupper$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswupper$FUNC() { return iswupper$FUNC_; }

    static final MethodHandle iswupper$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswupper",
        "(S)I",
        iswupper$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswupper$MH() { return iswupper$MH_; }

    static final FunctionDescriptor iswxdigit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswxdigit$FUNC() { return iswxdigit$FUNC_; }

    static final MethodHandle iswxdigit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswxdigit",
        "(S)I",
        iswxdigit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswxdigit$MH() { return iswxdigit$MH_; }

    static final FunctionDescriptor __iswcsymf$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __iswcsymf$FUNC() { return __iswcsymf$FUNC_; }

    static final MethodHandle __iswcsymf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__iswcsymf",
        "(S)I",
        __iswcsymf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __iswcsymf$MH() { return __iswcsymf$MH_; }

    static final FunctionDescriptor __iswcsym$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __iswcsym$FUNC() { return __iswcsym$FUNC_; }

    static final MethodHandle __iswcsym$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__iswcsym",
        "(S)I",
        __iswcsym$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __iswcsym$MH() { return __iswcsym$MH_; }

    static final FunctionDescriptor _iswalnum_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswalnum_l$FUNC() { return _iswalnum_l$FUNC_; }

    static final MethodHandle _iswalnum_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswalnum_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswalnum_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswalnum_l$MH() { return _iswalnum_l$MH_; }

    static final FunctionDescriptor _iswalpha_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswalpha_l$FUNC() { return _iswalpha_l$FUNC_; }

    static final MethodHandle _iswalpha_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswalpha_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswalpha_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswalpha_l$MH() { return _iswalpha_l$MH_; }

    static final FunctionDescriptor _iswblank_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswblank_l$FUNC() { return _iswblank_l$FUNC_; }

    static final MethodHandle _iswblank_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswblank_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswblank_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswblank_l$MH() { return _iswblank_l$MH_; }

    static final FunctionDescriptor _iswcntrl_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswcntrl_l$FUNC() { return _iswcntrl_l$FUNC_; }

    static final MethodHandle _iswcntrl_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswcntrl_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswcntrl_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswcntrl_l$MH() { return _iswcntrl_l$MH_; }

    static final FunctionDescriptor _iswdigit_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswdigit_l$FUNC() { return _iswdigit_l$FUNC_; }

    static final MethodHandle _iswdigit_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswdigit_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswdigit_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswdigit_l$MH() { return _iswdigit_l$MH_; }

    static final FunctionDescriptor _iswgraph_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswgraph_l$FUNC() { return _iswgraph_l$FUNC_; }

    static final MethodHandle _iswgraph_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswgraph_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswgraph_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswgraph_l$MH() { return _iswgraph_l$MH_; }

    static final FunctionDescriptor _iswlower_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswlower_l$FUNC() { return _iswlower_l$FUNC_; }

    static final MethodHandle _iswlower_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswlower_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswlower_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswlower_l$MH() { return _iswlower_l$MH_; }

    static final FunctionDescriptor _iswprint_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswprint_l$FUNC() { return _iswprint_l$FUNC_; }

    static final MethodHandle _iswprint_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswprint_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswprint_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswprint_l$MH() { return _iswprint_l$MH_; }

    static final FunctionDescriptor _iswpunct_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswpunct_l$FUNC() { return _iswpunct_l$FUNC_; }

    static final MethodHandle _iswpunct_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswpunct_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswpunct_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswpunct_l$MH() { return _iswpunct_l$MH_; }

    static final FunctionDescriptor _iswspace_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswspace_l$FUNC() { return _iswspace_l$FUNC_; }

    static final MethodHandle _iswspace_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswspace_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswspace_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswspace_l$MH() { return _iswspace_l$MH_; }

    static final FunctionDescriptor _iswupper_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswupper_l$FUNC() { return _iswupper_l$FUNC_; }

    static final MethodHandle _iswupper_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswupper_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswupper_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswupper_l$MH() { return _iswupper_l$MH_; }

    static final FunctionDescriptor _iswxdigit_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswxdigit_l$FUNC() { return _iswxdigit_l$FUNC_; }

    static final MethodHandle _iswxdigit_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswxdigit_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswxdigit_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswxdigit_l$MH() { return _iswxdigit_l$MH_; }

    static final FunctionDescriptor _iswcsymf_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswcsymf_l$FUNC() { return _iswcsymf_l$FUNC_; }

    static final MethodHandle _iswcsymf_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswcsymf_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswcsymf_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswcsymf_l$MH() { return _iswcsymf_l$MH_; }

    static final FunctionDescriptor _iswcsym_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswcsym_l$FUNC() { return _iswcsym_l$FUNC_; }

    static final MethodHandle _iswcsym_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswcsym_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)I",
        _iswcsym_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswcsym_l$MH() { return _iswcsym_l$MH_; }

    static final FunctionDescriptor towupper$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor towupper$FUNC() { return towupper$FUNC_; }

    static final MethodHandle towupper$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "towupper",
        "(S)S",
        towupper$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle towupper$MH() { return towupper$MH_; }

    static final FunctionDescriptor towlower$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor towlower$FUNC() { return towlower$FUNC_; }

    static final MethodHandle towlower$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "towlower",
        "(S)S",
        towlower$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle towlower$MH() { return towlower$MH_; }

    static final FunctionDescriptor iswctype$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iswctype$FUNC() { return iswctype$FUNC_; }

    static final MethodHandle iswctype$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iswctype",
        "(SS)I",
        iswctype$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iswctype$MH() { return iswctype$MH_; }

    static final FunctionDescriptor _towupper_l$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _towupper_l$FUNC() { return _towupper_l$FUNC_; }

    static final MethodHandle _towupper_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_towupper_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)S",
        _towupper_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _towupper_l$MH() { return _towupper_l$MH_; }

    static final FunctionDescriptor _towlower_l$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _towlower_l$FUNC() { return _towlower_l$FUNC_; }

    static final MethodHandle _towlower_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_towlower_l",
        "(SLjdk/incubator/foreign/MemoryAddress;)S",
        _towlower_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _towlower_l$MH() { return _towlower_l$MH_; }

    static final FunctionDescriptor _iswctype_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iswctype_l$FUNC() { return _iswctype_l$FUNC_; }

    static final MethodHandle _iswctype_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iswctype_l",
        "(SSLjdk/incubator/foreign/MemoryAddress;)I",
        _iswctype_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iswctype_l$MH() { return _iswctype_l$MH_; }

    static final FunctionDescriptor isleadbyte$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isleadbyte$FUNC() { return isleadbyte$FUNC_; }

    static final MethodHandle isleadbyte$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isleadbyte",
        "(I)I",
        isleadbyte$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isleadbyte$MH() { return isleadbyte$MH_; }

    static final FunctionDescriptor _isleadbyte_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isleadbyte_l$FUNC() { return _isleadbyte_l$FUNC_; }

    static final MethodHandle _isleadbyte_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isleadbyte_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isleadbyte_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isleadbyte_l$MH() { return _isleadbyte_l$MH_; }

    static final FunctionDescriptor is_wctype$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor is_wctype$FUNC() { return is_wctype$FUNC_; }

    static final MethodHandle is_wctype$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "is_wctype",
        "(SS)I",
        is_wctype$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle is_wctype$MH() { return is_wctype$MH_; }

    static final FunctionDescriptor _isctype$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isctype$FUNC() { return _isctype$FUNC_; }

    static final MethodHandle _isctype$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isctype",
        "(II)I",
        _isctype$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isctype$MH() { return _isctype$MH_; }

    static final FunctionDescriptor _isctype_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isctype_l$FUNC() { return _isctype_l$FUNC_; }

    static final MethodHandle _isctype_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isctype_l",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        _isctype_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isctype_l$MH() { return _isctype_l$MH_; }

    static final FunctionDescriptor isalpha$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isalpha$FUNC() { return isalpha$FUNC_; }

    static final MethodHandle isalpha$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isalpha",
        "(I)I",
        isalpha$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isalpha$MH() { return isalpha$MH_; }

    static final FunctionDescriptor _isalpha_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isalpha_l$FUNC() { return _isalpha_l$FUNC_; }

    static final MethodHandle _isalpha_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isalpha_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isalpha_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isalpha_l$MH() { return _isalpha_l$MH_; }

    static final FunctionDescriptor isupper$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isupper$FUNC() { return isupper$FUNC_; }

    static final MethodHandle isupper$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isupper",
        "(I)I",
        isupper$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isupper$MH() { return isupper$MH_; }

    static final FunctionDescriptor _isupper_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isupper_l$FUNC() { return _isupper_l$FUNC_; }

    static final MethodHandle _isupper_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isupper_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isupper_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isupper_l$MH() { return _isupper_l$MH_; }

    static final FunctionDescriptor islower$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor islower$FUNC() { return islower$FUNC_; }

    static final MethodHandle islower$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "islower",
        "(I)I",
        islower$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle islower$MH() { return islower$MH_; }

    static final FunctionDescriptor _islower_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _islower_l$FUNC() { return _islower_l$FUNC_; }

    static final MethodHandle _islower_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_islower_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _islower_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _islower_l$MH() { return _islower_l$MH_; }

    static final FunctionDescriptor isdigit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isdigit$FUNC() { return isdigit$FUNC_; }

    static final MethodHandle isdigit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isdigit",
        "(I)I",
        isdigit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isdigit$MH() { return isdigit$MH_; }

    static final FunctionDescriptor _isdigit_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isdigit_l$FUNC() { return _isdigit_l$FUNC_; }

    static final MethodHandle _isdigit_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isdigit_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isdigit_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isdigit_l$MH() { return _isdigit_l$MH_; }

    static final FunctionDescriptor isxdigit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isxdigit$FUNC() { return isxdigit$FUNC_; }

    static final MethodHandle isxdigit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isxdigit",
        "(I)I",
        isxdigit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isxdigit$MH() { return isxdigit$MH_; }

    static final FunctionDescriptor _isxdigit_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isxdigit_l$FUNC() { return _isxdigit_l$FUNC_; }

    static final MethodHandle _isxdigit_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isxdigit_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isxdigit_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isxdigit_l$MH() { return _isxdigit_l$MH_; }

    static final FunctionDescriptor isspace$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isspace$FUNC() { return isspace$FUNC_; }

    static final MethodHandle isspace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isspace",
        "(I)I",
        isspace$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isspace$MH() { return isspace$MH_; }

    static final FunctionDescriptor _isspace_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isspace_l$FUNC() { return _isspace_l$FUNC_; }

    static final MethodHandle _isspace_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isspace_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isspace_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isspace_l$MH() { return _isspace_l$MH_; }

    static final FunctionDescriptor ispunct$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor ispunct$FUNC() { return ispunct$FUNC_; }

    static final MethodHandle ispunct$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ispunct",
        "(I)I",
        ispunct$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ispunct$MH() { return ispunct$MH_; }

    static final FunctionDescriptor _ispunct_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _ispunct_l$FUNC() { return _ispunct_l$FUNC_; }

    static final MethodHandle _ispunct_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_ispunct_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _ispunct_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _ispunct_l$MH() { return _ispunct_l$MH_; }

    static final FunctionDescriptor isblank$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isblank$FUNC() { return isblank$FUNC_; }

    static final MethodHandle isblank$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isblank",
        "(I)I",
        isblank$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isblank$MH() { return isblank$MH_; }

    static final FunctionDescriptor _isblank_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isblank_l$FUNC() { return _isblank_l$FUNC_; }

    static final MethodHandle _isblank_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isblank_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isblank_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isblank_l$MH() { return _isblank_l$MH_; }

    static final FunctionDescriptor isalnum$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isalnum$FUNC() { return isalnum$FUNC_; }

    static final MethodHandle isalnum$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isalnum",
        "(I)I",
        isalnum$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isalnum$MH() { return isalnum$MH_; }

    static final FunctionDescriptor _isalnum_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isalnum_l$FUNC() { return _isalnum_l$FUNC_; }

    static final MethodHandle _isalnum_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isalnum_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isalnum_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isalnum_l$MH() { return _isalnum_l$MH_; }

    static final FunctionDescriptor isprint$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isprint$FUNC() { return isprint$FUNC_; }

    static final MethodHandle isprint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isprint",
        "(I)I",
        isprint$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isprint$MH() { return isprint$MH_; }

    static final FunctionDescriptor _isprint_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isprint_l$FUNC() { return _isprint_l$FUNC_; }

    static final MethodHandle _isprint_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isprint_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isprint_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isprint_l$MH() { return _isprint_l$MH_; }

    static final FunctionDescriptor isgraph$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor isgraph$FUNC() { return isgraph$FUNC_; }

    static final MethodHandle isgraph$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "isgraph",
        "(I)I",
        isgraph$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle isgraph$MH() { return isgraph$MH_; }

    static final FunctionDescriptor _isgraph_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _isgraph_l$FUNC() { return _isgraph_l$FUNC_; }

    static final MethodHandle _isgraph_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_isgraph_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _isgraph_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _isgraph_l$MH() { return _isgraph_l$MH_; }

    static final FunctionDescriptor iscntrl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor iscntrl$FUNC() { return iscntrl$FUNC_; }

    static final MethodHandle iscntrl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "iscntrl",
        "(I)I",
        iscntrl$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle iscntrl$MH() { return iscntrl$MH_; }

    static final FunctionDescriptor _iscntrl_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _iscntrl_l$FUNC() { return _iscntrl_l$FUNC_; }

    static final MethodHandle _iscntrl_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_iscntrl_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _iscntrl_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _iscntrl_l$MH() { return _iscntrl_l$MH_; }

    static final FunctionDescriptor toupper$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor toupper$FUNC() { return toupper$FUNC_; }

    static final MethodHandle toupper$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "toupper",
        "(I)I",
        toupper$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle toupper$MH() { return toupper$MH_; }

    static final FunctionDescriptor tolower$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor tolower$FUNC() { return tolower$FUNC_; }

    static final MethodHandle tolower$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "tolower",
        "(I)I",
        tolower$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle tolower$MH() { return tolower$MH_; }

    static final FunctionDescriptor _tolower$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _tolower$FUNC() { return _tolower$FUNC_; }

    static final MethodHandle _tolower$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_tolower",
        "(I)I",
        _tolower$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _tolower$MH() { return _tolower$MH_; }

    static final FunctionDescriptor _tolower_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _tolower_l$FUNC() { return _tolower_l$FUNC_; }

    static final MethodHandle _tolower_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_tolower_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _tolower_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _tolower_l$MH() { return _tolower_l$MH_; }

    static final FunctionDescriptor _toupper$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _toupper$FUNC() { return _toupper$FUNC_; }

    static final MethodHandle _toupper$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_toupper",
        "(I)I",
        _toupper$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _toupper$MH() { return _toupper$MH_; }

    static final FunctionDescriptor _toupper_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _toupper_l$FUNC() { return _toupper_l$FUNC_; }

    static final MethodHandle _toupper_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_toupper_l",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        _toupper_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _toupper_l$MH() { return _toupper_l$MH_; }

    static final FunctionDescriptor __isascii$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __isascii$FUNC() { return __isascii$FUNC_; }

    static final MethodHandle __isascii$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__isascii",
        "(I)I",
        __isascii$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __isascii$MH() { return __isascii$MH_; }

    static final FunctionDescriptor __toascii$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __toascii$FUNC() { return __toascii$FUNC_; }

    static final MethodHandle __toascii$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__toascii",
        "(I)I",
        __toascii$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __toascii$MH() { return __toascii$MH_; }

    static final FunctionDescriptor __iscsymf$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __iscsymf$FUNC() { return __iscsymf$FUNC_; }

    static final MethodHandle __iscsymf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__iscsymf",
        "(I)I",
        __iscsymf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __iscsymf$MH() { return __iscsymf$MH_; }

    static final FunctionDescriptor __iscsym$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __iscsym$FUNC() { return __iscsym$FUNC_; }

    static final MethodHandle __iscsym$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__iscsym",
        "(I)I",
        __iscsym$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __iscsym$MH() { return __iscsym$MH_; }

    static final FunctionDescriptor __acrt_locale_get_ctype_array_value$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __acrt_locale_get_ctype_array_value$FUNC() { return __acrt_locale_get_ctype_array_value$FUNC_; }

    static final MethodHandle __acrt_locale_get_ctype_array_value$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__acrt_locale_get_ctype_array_value",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        __acrt_locale_get_ctype_array_value$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __acrt_locale_get_ctype_array_value$MH() { return __acrt_locale_get_ctype_array_value$MH_; }

    static final FunctionDescriptor ___mb_cur_max_func$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor ___mb_cur_max_func$FUNC() { return ___mb_cur_max_func$FUNC_; }

    static final MethodHandle ___mb_cur_max_func$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "___mb_cur_max_func",
        "()I",
        ___mb_cur_max_func$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ___mb_cur_max_func$MH() { return ___mb_cur_max_func$MH_; }

    static final FunctionDescriptor ___mb_cur_max_l_func$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ___mb_cur_max_l_func$FUNC() { return ___mb_cur_max_l_func$FUNC_; }

    static final MethodHandle ___mb_cur_max_l_func$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "___mb_cur_max_l_func",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ___mb_cur_max_l_func$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ___mb_cur_max_l_func$MH() { return ___mb_cur_max_l_func$MH_; }

    static final FunctionDescriptor __ascii_tolower$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __ascii_tolower$FUNC() { return __ascii_tolower$FUNC_; }

    static final MethodHandle __ascii_tolower$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__ascii_tolower",
        "(I)I",
        __ascii_tolower$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __ascii_tolower$MH() { return __ascii_tolower$MH_; }

    static final FunctionDescriptor __ascii_toupper$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __ascii_toupper$FUNC() { return __ascii_toupper$FUNC_; }

    static final MethodHandle __ascii_toupper$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__ascii_toupper",
        "(I)I",
        __ascii_toupper$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __ascii_toupper$MH() { return __ascii_toupper$MH_; }

    static final FunctionDescriptor __ascii_iswalpha$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __ascii_iswalpha$FUNC() { return __ascii_iswalpha$FUNC_; }

    static final MethodHandle __ascii_iswalpha$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__ascii_iswalpha",
        "(I)I",
        __ascii_iswalpha$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __ascii_iswalpha$MH() { return __ascii_iswalpha$MH_; }

    static final FunctionDescriptor __ascii_iswdigit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __ascii_iswdigit$FUNC() { return __ascii_iswdigit$FUNC_; }

    static final MethodHandle __ascii_iswdigit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__ascii_iswdigit",
        "(I)I",
        __ascii_iswdigit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __ascii_iswdigit$MH() { return __ascii_iswdigit$MH_; }

    static final FunctionDescriptor __ascii_towlower$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __ascii_towlower$FUNC() { return __ascii_towlower$FUNC_; }

    static final MethodHandle __ascii_towlower$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__ascii_towlower",
        "(I)I",
        __ascii_towlower$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __ascii_towlower$MH() { return __ascii_towlower$MH_; }

    static final FunctionDescriptor __ascii_towupper$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __ascii_towupper$FUNC() { return __ascii_towupper$FUNC_; }

    static final MethodHandle __ascii_towupper$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__ascii_towupper",
        "(I)I",
        __ascii_towupper$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __ascii_towupper$MH() { return __ascii_towupper$MH_; }

    static final FunctionDescriptor __acrt_get_locale_data_prefix$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __acrt_get_locale_data_prefix$FUNC() { return __acrt_get_locale_data_prefix$FUNC_; }

    static final MethodHandle __acrt_get_locale_data_prefix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__acrt_get_locale_data_prefix",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        __acrt_get_locale_data_prefix$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __acrt_get_locale_data_prefix$MH() { return __acrt_get_locale_data_prefix$MH_; }

    static final FunctionDescriptor _chvalidchk_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _chvalidchk_l$FUNC() { return _chvalidchk_l$FUNC_; }

    static final MethodHandle _chvalidchk_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_chvalidchk_l",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        _chvalidchk_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _chvalidchk_l$MH() { return _chvalidchk_l$MH_; }

    static final FunctionDescriptor _ischartype_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _ischartype_l$FUNC() { return _ischartype_l$FUNC_; }

    static final MethodHandle _ischartype_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_ischartype_l",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        _ischartype_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _ischartype_l$MH() { return _ischartype_l$MH_; }

    static final FunctionDescriptor HandleToULong$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor HandleToULong$FUNC() { return HandleToULong$FUNC_; }

    static final MethodHandle HandleToULong$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HandleToULong",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        HandleToULong$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle HandleToULong$MH() { return HandleToULong$MH_; }

    static final FunctionDescriptor HandleToLong$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor HandleToLong$FUNC() { return HandleToLong$FUNC_; }

    static final MethodHandle HandleToLong$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HandleToLong",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        HandleToLong$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle HandleToLong$MH() { return HandleToLong$MH_; }

    static final FunctionDescriptor ULongToHandle$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor ULongToHandle$FUNC() { return ULongToHandle$FUNC_; }

    static final MethodHandle ULongToHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ULongToHandle",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        ULongToHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ULongToHandle$MH() { return ULongToHandle$MH_; }

    static final FunctionDescriptor LongToHandle$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor LongToHandle$FUNC() { return LongToHandle$FUNC_; }

    static final MethodHandle LongToHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LongToHandle",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        LongToHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LongToHandle$MH() { return LongToHandle$MH_; }

    static final FunctionDescriptor PtrToUlong$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PtrToUlong$FUNC() { return PtrToUlong$FUNC_; }

    static final MethodHandle PtrToUlong$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtrToUlong",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        PtrToUlong$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PtrToUlong$MH() { return PtrToUlong$MH_; }

    static final FunctionDescriptor PtrToUint$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PtrToUint$FUNC() { return PtrToUint$FUNC_; }

    static final MethodHandle PtrToUint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtrToUint",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        PtrToUint$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PtrToUint$MH() { return PtrToUint$MH_; }

    static final FunctionDescriptor PtrToUshort$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PtrToUshort$FUNC() { return PtrToUshort$FUNC_; }

    static final MethodHandle PtrToUshort$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtrToUshort",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        PtrToUshort$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PtrToUshort$MH() { return PtrToUshort$MH_; }

    static final FunctionDescriptor PtrToLong$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PtrToLong$FUNC() { return PtrToLong$FUNC_; }

    static final MethodHandle PtrToLong$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtrToLong",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        PtrToLong$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PtrToLong$MH() { return PtrToLong$MH_; }

    static final FunctionDescriptor PtrToInt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PtrToInt$FUNC() { return PtrToInt$FUNC_; }

    static final MethodHandle PtrToInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtrToInt",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        PtrToInt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PtrToInt$MH() { return PtrToInt$MH_; }

    static final FunctionDescriptor PtrToShort$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PtrToShort$FUNC() { return PtrToShort$FUNC_; }

    static final MethodHandle PtrToShort$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtrToShort",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        PtrToShort$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PtrToShort$MH() { return PtrToShort$MH_; }

    static final FunctionDescriptor IntToPtr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor IntToPtr$FUNC() { return IntToPtr$FUNC_; }

    static final MethodHandle IntToPtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IntToPtr",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        IntToPtr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IntToPtr$MH() { return IntToPtr$MH_; }

    static final FunctionDescriptor UIntToPtr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor UIntToPtr$FUNC() { return UIntToPtr$FUNC_; }

    static final MethodHandle UIntToPtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UIntToPtr",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        UIntToPtr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UIntToPtr$MH() { return UIntToPtr$MH_; }

    static final FunctionDescriptor LongToPtr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor LongToPtr$FUNC() { return LongToPtr$FUNC_; }

    static final MethodHandle LongToPtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LongToPtr",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        LongToPtr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LongToPtr$MH() { return LongToPtr$MH_; }

    static final FunctionDescriptor ULongToPtr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor ULongToPtr$FUNC() { return ULongToPtr$FUNC_; }

    static final MethodHandle ULongToPtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ULongToPtr",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        ULongToPtr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ULongToPtr$MH() { return ULongToPtr$MH_; }

    static final FunctionDescriptor Ptr32ToPtr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Ptr32ToPtr$FUNC() { return Ptr32ToPtr$FUNC_; }

    static final MethodHandle Ptr32ToPtr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Ptr32ToPtr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        Ptr32ToPtr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Ptr32ToPtr$MH() { return Ptr32ToPtr$MH_; }

    static final FunctionDescriptor Handle32ToHandle$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor Handle32ToHandle$FUNC() { return Handle32ToHandle$FUNC_; }

    static final MethodHandle Handle32ToHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Handle32ToHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        Handle32ToHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Handle32ToHandle$MH() { return Handle32ToHandle$MH_; }

    static final FunctionDescriptor PtrToPtr32$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PtrToPtr32$FUNC() { return PtrToPtr32$FUNC_; }

    static final MethodHandle PtrToPtr32$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtrToPtr32",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        PtrToPtr32$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PtrToPtr32$MH() { return PtrToPtr32$MH_; }

    static final MemoryLayout _PROCESSOR_NUMBER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Group"),
        C_CHAR.withName("Number"),
        C_CHAR.withName("Reserved")
    ).withName("_PROCESSOR_NUMBER");
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_NUMBER$struct$LAYOUT() { return _PROCESSOR_NUMBER$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_NUMBER$Group$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_NUMBER$Group$LAYOUT() { return _PROCESSOR_NUMBER$Group$LAYOUT_; }

    static final VarHandle _PROCESSOR_NUMBER$Group$VH_ = _PROCESSOR_NUMBER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Group"));
    static final java.lang.invoke.VarHandle _PROCESSOR_NUMBER$Group$VH() { return _PROCESSOR_NUMBER$Group$VH_; }

    static final MemoryLayout _PROCESSOR_NUMBER$Number$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_NUMBER$Number$LAYOUT() { return _PROCESSOR_NUMBER$Number$LAYOUT_; }

    static final VarHandle _PROCESSOR_NUMBER$Number$VH_ = _PROCESSOR_NUMBER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Number"));
    static final java.lang.invoke.VarHandle _PROCESSOR_NUMBER$Number$VH() { return _PROCESSOR_NUMBER$Number$VH_; }

    static final MemoryLayout _PROCESSOR_NUMBER$Reserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_NUMBER$Reserved$LAYOUT() { return _PROCESSOR_NUMBER$Reserved$LAYOUT_; }

    static final VarHandle _PROCESSOR_NUMBER$Reserved$VH_ = _PROCESSOR_NUMBER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _PROCESSOR_NUMBER$Reserved$VH() { return _PROCESSOR_NUMBER$Reserved$VH_; }

    static final MemoryLayout _GROUP_AFFINITY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Mask"),
        C_SHORT.withName("Group"),
        MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
    ).withName("_GROUP_AFFINITY");
    static final jdk.incubator.foreign.MemoryLayout _GROUP_AFFINITY$struct$LAYOUT() { return _GROUP_AFFINITY$struct$LAYOUT_; }

    static final MemoryLayout _GROUP_AFFINITY$Mask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _GROUP_AFFINITY$Mask$LAYOUT() { return _GROUP_AFFINITY$Mask$LAYOUT_; }

    static final VarHandle _GROUP_AFFINITY$Mask$VH_ = _GROUP_AFFINITY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _GROUP_AFFINITY$Mask$VH() { return _GROUP_AFFINITY$Mask$VH_; }

    static final MemoryLayout _GROUP_AFFINITY$Group$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GROUP_AFFINITY$Group$LAYOUT() { return _GROUP_AFFINITY$Group$LAYOUT_; }

    static final VarHandle _GROUP_AFFINITY$Group$VH_ = _GROUP_AFFINITY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Group"));
    static final java.lang.invoke.VarHandle _GROUP_AFFINITY$Group$VH() { return _GROUP_AFFINITY$Group$VH_; }

    static final int UNSPECIFIED_COMPARTMENT_ID() { return (int)0L; }

    static final int DEFAULT_COMPARTMENT_ID() { return (int)1L; }

    static final MemoryLayout _FLOAT128$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("LowPart"),
        C_LONGLONG.withName("HighPart")
    ).withName("_FLOAT128");
    static final jdk.incubator.foreign.MemoryLayout _FLOAT128$struct$LAYOUT() { return _FLOAT128$struct$LAYOUT_; }

    static final MemoryLayout _FLOAT128$LowPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FLOAT128$LowPart$LAYOUT() { return _FLOAT128$LowPart$LAYOUT_; }

    static final VarHandle _FLOAT128$LowPart$VH_ = _FLOAT128$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _FLOAT128$LowPart$VH() { return _FLOAT128$LowPart$VH_; }

    static final MemoryLayout _FLOAT128$HighPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FLOAT128$HighPart$LAYOUT() { return _FLOAT128$HighPart$LAYOUT_; }

    static final VarHandle _FLOAT128$HighPart$VH_ = _FLOAT128$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _FLOAT128$HighPart$VH() { return _FLOAT128$HighPart$VH_; }

    static final MemoryLayout _LARGE_INTEGER$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONG.withName("LowPart"),
        C_LONG.withName("HighPart"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("u"),
        C_LONGLONG.withName("QuadPart")
    ).withName("_LARGE_INTEGER");
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$struct$LAYOUT() { return _LARGE_INTEGER$struct$LAYOUT_; }

    static final MemoryLayout _LARGE_INTEGER$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$LowPart$LAYOUT() { return _LARGE_INTEGER$LowPart$LAYOUT_; }

    static final VarHandle _LARGE_INTEGER$LowPart$VH_ = _LARGE_INTEGER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _LARGE_INTEGER$LowPart$VH() { return _LARGE_INTEGER$LowPart$VH_; }

    static final MemoryLayout _LARGE_INTEGER$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$HighPart$LAYOUT() { return _LARGE_INTEGER$HighPart$LAYOUT_; }

    static final VarHandle _LARGE_INTEGER$HighPart$VH_ = _LARGE_INTEGER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _LARGE_INTEGER$HighPart$VH() { return _LARGE_INTEGER$HighPart$VH_; }

    static final MemoryLayout u$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LowPart"),
        C_LONG.withName("HighPart")
    );
    static final jdk.incubator.foreign.MemoryLayout u$struct$LAYOUT() { return u$struct$LAYOUT_; }

    static final MemoryLayout u$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout u$LowPart$LAYOUT() { return u$LowPart$LAYOUT_; }

    static final VarHandle u$LowPart$VH_ = u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle u$LowPart$VH() { return u$LowPart$VH_; }

    static final MemoryLayout u$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout u$HighPart$LAYOUT() { return u$HighPart$LAYOUT_; }

    static final VarHandle u$HighPart$VH_ = u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle u$HighPart$VH() { return u$HighPart$VH_; }

    static final MemoryLayout _LARGE_INTEGER$QuadPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _LARGE_INTEGER$QuadPart$LAYOUT() { return _LARGE_INTEGER$QuadPart$LAYOUT_; }

    static final VarHandle _LARGE_INTEGER$QuadPart$VH_ = _LARGE_INTEGER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QuadPart"));
    static final java.lang.invoke.VarHandle _LARGE_INTEGER$QuadPart$VH() { return _LARGE_INTEGER$QuadPart$VH_; }

    static final MemoryLayout _ULARGE_INTEGER$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONG.withName("LowPart"),
        C_LONG.withName("HighPart"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("u"),
        C_LONGLONG.withName("QuadPart")
    ).withName("_ULARGE_INTEGER");
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$struct$LAYOUT() { return _ULARGE_INTEGER$struct$LAYOUT_; }

    static final MemoryLayout _ULARGE_INTEGER$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$LowPart$LAYOUT() { return _ULARGE_INTEGER$LowPart$LAYOUT_; }

    static final VarHandle _ULARGE_INTEGER$LowPart$VH_ = _ULARGE_INTEGER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _ULARGE_INTEGER$LowPart$VH() { return _ULARGE_INTEGER$LowPart$VH_; }

    static final MemoryLayout _ULARGE_INTEGER$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$HighPart$LAYOUT() { return _ULARGE_INTEGER$HighPart$LAYOUT_; }

    static final VarHandle _ULARGE_INTEGER$HighPart$VH_ = _ULARGE_INTEGER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _ULARGE_INTEGER$HighPart$VH() { return _ULARGE_INTEGER$HighPart$VH_; }

    static final MemoryLayout _ULARGE_INTEGER$QuadPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _ULARGE_INTEGER$QuadPart$LAYOUT() { return _ULARGE_INTEGER$QuadPart$LAYOUT_; }

    static final VarHandle _ULARGE_INTEGER$QuadPart$VH_ = _ULARGE_INTEGER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QuadPart"));
    static final java.lang.invoke.VarHandle _ULARGE_INTEGER$QuadPart$VH() { return _ULARGE_INTEGER$QuadPart$VH_; }

    static final MemoryLayout _LUID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LowPart"),
        C_LONG.withName("HighPart")
    ).withName("_LUID");
    static final jdk.incubator.foreign.MemoryLayout _LUID$struct$LAYOUT() { return _LUID$struct$LAYOUT_; }

    static final MemoryLayout _LUID$LowPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LUID$LowPart$LAYOUT() { return _LUID$LowPart$LAYOUT_; }

    static final VarHandle _LUID$LowPart$VH_ = _LUID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _LUID$LowPart$VH() { return _LUID$LowPart$VH_; }

    static final MemoryLayout _LUID$HighPart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LUID$HighPart$LAYOUT() { return _LUID$HighPart$LAYOUT_; }

    static final VarHandle _LUID$HighPart$VH_ = _LUID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _LUID$HighPart$VH() { return _LUID$HighPart$VH_; }

    static final FunctionDescriptor _rotl8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_CHAR,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotl8$FUNC() { return _rotl8$FUNC_; }

    static final MethodHandle _rotl8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotl8",
        "(BB)B",
        _rotl8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotl8$MH() { return _rotl8$MH_; }

    static final FunctionDescriptor _rotl16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotl16$FUNC() { return _rotl16$FUNC_; }

    static final MethodHandle _rotl16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotl16",
        "(SB)S",
        _rotl16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotl16$MH() { return _rotl16$MH_; }

    static final FunctionDescriptor _rotr8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_CHAR,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotr8$FUNC() { return _rotr8$FUNC_; }

    static final MethodHandle _rotr8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotr8",
        "(BB)B",
        _rotr8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotr8$MH() { return _rotr8$MH_; }

    static final FunctionDescriptor _rotr16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_SHORT,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotr16$FUNC() { return _rotr16$FUNC_; }

    static final MethodHandle _rotr16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotr16",
        "(SB)S",
        _rotr16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotr16$MH() { return _rotr16$MH_; }

    static final FunctionDescriptor _rotl$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotl$FUNC() { return _rotl$FUNC_; }

    static final MethodHandle _rotl$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotl",
        "(II)I",
        _rotl$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotl$MH() { return _rotl$MH_; }

    static final FunctionDescriptor _rotl64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotl64$FUNC() { return _rotl64$FUNC_; }

    static final MethodHandle _rotl64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotl64",
        "(JI)J",
        _rotl64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotl64$MH() { return _rotl64$MH_; }

    static final FunctionDescriptor _rotr$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotr$FUNC() { return _rotr$FUNC_; }

    static final MethodHandle _rotr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotr",
        "(II)I",
        _rotr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotr$MH() { return _rotr$MH_; }

    static final FunctionDescriptor _rotr64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _rotr64$FUNC() { return _rotr64$FUNC_; }

    static final MethodHandle _rotr64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_rotr64",
        "(JI)J",
        _rotr64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _rotr64$MH() { return _rotr64$MH_; }

    static final MemoryLayout _LIST_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Flink"),
        C_POINTER.withName("Blink")
    ).withName("_LIST_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _LIST_ENTRY$struct$LAYOUT() { return _LIST_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _LIST_ENTRY$Flink$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _LIST_ENTRY$Flink$LAYOUT() { return _LIST_ENTRY$Flink$LAYOUT_; }

    static final VarHandle _LIST_ENTRY$Flink$VH_ = MemoryHandles.asAddressVarHandle(_LIST_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flink")));
    static final java.lang.invoke.VarHandle _LIST_ENTRY$Flink$VH() { return _LIST_ENTRY$Flink$VH_; }

    static final MemoryLayout _LIST_ENTRY$Blink$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _LIST_ENTRY$Blink$LAYOUT() { return _LIST_ENTRY$Blink$LAYOUT_; }

    static final VarHandle _LIST_ENTRY$Blink$VH_ = MemoryHandles.asAddressVarHandle(_LIST_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Blink")));
    static final java.lang.invoke.VarHandle _LIST_ENTRY$Blink$VH() { return _LIST_ENTRY$Blink$VH_; }

    static final MemoryLayout _SINGLE_LIST_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Next")
    ).withName("_SINGLE_LIST_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _SINGLE_LIST_ENTRY$struct$LAYOUT() { return _SINGLE_LIST_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _SINGLE_LIST_ENTRY$Next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SINGLE_LIST_ENTRY$Next$LAYOUT() { return _SINGLE_LIST_ENTRY$Next$LAYOUT_; }

    static final VarHandle _SINGLE_LIST_ENTRY$Next$VH_ = MemoryHandles.asAddressVarHandle(_SINGLE_LIST_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    static final java.lang.invoke.VarHandle _SINGLE_LIST_ENTRY$Next$VH() { return _SINGLE_LIST_ENTRY$Next$VH_; }

    static final MemoryLayout LIST_ENTRY32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flink"),
        C_LONG.withName("Blink")
    ).withName("LIST_ENTRY32");
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY32$struct$LAYOUT() { return LIST_ENTRY32$struct$LAYOUT_; }

    static final MemoryLayout LIST_ENTRY32$Flink$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY32$Flink$LAYOUT() { return LIST_ENTRY32$Flink$LAYOUT_; }

    static final VarHandle LIST_ENTRY32$Flink$VH_ = LIST_ENTRY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flink"));
    static final java.lang.invoke.VarHandle LIST_ENTRY32$Flink$VH() { return LIST_ENTRY32$Flink$VH_; }

    static final MemoryLayout LIST_ENTRY32$Blink$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY32$Blink$LAYOUT() { return LIST_ENTRY32$Blink$LAYOUT_; }

    static final VarHandle LIST_ENTRY32$Blink$VH_ = LIST_ENTRY32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Blink"));
    static final java.lang.invoke.VarHandle LIST_ENTRY32$Blink$VH() { return LIST_ENTRY32$Blink$VH_; }

    static final MemoryLayout LIST_ENTRY64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Flink"),
        C_LONGLONG.withName("Blink")
    ).withName("LIST_ENTRY64");
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY64$struct$LAYOUT() { return LIST_ENTRY64$struct$LAYOUT_; }

    static final MemoryLayout LIST_ENTRY64$Flink$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY64$Flink$LAYOUT() { return LIST_ENTRY64$Flink$LAYOUT_; }

    static final VarHandle LIST_ENTRY64$Flink$VH_ = LIST_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flink"));
    static final java.lang.invoke.VarHandle LIST_ENTRY64$Flink$VH() { return LIST_ENTRY64$Flink$VH_; }

    static final MemoryLayout LIST_ENTRY64$Blink$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout LIST_ENTRY64$Blink$LAYOUT() { return LIST_ENTRY64$Blink$LAYOUT_; }

    static final VarHandle LIST_ENTRY64$Blink$VH_ = LIST_ENTRY64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Blink"));
    static final java.lang.invoke.VarHandle LIST_ENTRY64$Blink$VH() { return LIST_ENTRY64$Blink$VH_; }

    static final MemoryLayout _GUID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout _GUID$struct$LAYOUT() { return _GUID$struct$LAYOUT_; }

    static final MemoryLayout _GUID$Data1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GUID$Data1$LAYOUT() { return _GUID$Data1$LAYOUT_; }

    static final VarHandle _GUID$Data1$VH_ = _GUID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Data1"));
    static final java.lang.invoke.VarHandle _GUID$Data1$VH() { return _GUID$Data1$VH_; }

    static final MemoryLayout _GUID$Data2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GUID$Data2$LAYOUT() { return _GUID$Data2$LAYOUT_; }

    static final VarHandle _GUID$Data2$VH_ = _GUID$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Data2"));
    static final java.lang.invoke.VarHandle _GUID$Data2$VH() { return _GUID$Data2$VH_; }

    static final MemoryLayout _GUID$Data3$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GUID$Data3$LAYOUT() { return _GUID$Data3$LAYOUT_; }

    static final VarHandle _GUID$Data3$VH_ = _GUID$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Data3"));
    static final java.lang.invoke.VarHandle _GUID$Data3$VH() { return _GUID$Data3$VH_; }

    static final FunctionDescriptor _errno$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor _errno$FUNC() { return _errno$FUNC_; }

    static final MethodHandle _errno$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_errno",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        _errno$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _errno$MH() { return _errno$MH_; }

    static final FunctionDescriptor _set_errno$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _set_errno$FUNC() { return _set_errno$FUNC_; }

    static final MethodHandle _set_errno$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_set_errno",
        "(I)I",
        _set_errno$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _set_errno$MH() { return _set_errno$MH_; }

    static final FunctionDescriptor _get_errno$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _get_errno$FUNC() { return _get_errno$FUNC_; }

    static final MethodHandle _get_errno$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_get_errno",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        _get_errno$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _get_errno$MH() { return _get_errno$MH_; }

    static final FunctionDescriptor __doserrno$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor __doserrno$FUNC() { return __doserrno$FUNC_; }

    static final MethodHandle __doserrno$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__doserrno",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        __doserrno$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __doserrno$MH() { return __doserrno$MH_; }

    static final FunctionDescriptor _set_doserrno$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _set_doserrno$FUNC() { return _set_doserrno$FUNC_; }

    static final MethodHandle _set_doserrno$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_set_doserrno",
        "(I)I",
        _set_doserrno$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _set_doserrno$MH() { return _set_doserrno$MH_; }

    static final FunctionDescriptor _get_doserrno$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _get_doserrno$FUNC() { return _get_doserrno$FUNC_; }

    static final MethodHandle _get_doserrno$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_get_doserrno",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        _get_doserrno$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _get_doserrno$MH() { return _get_doserrno$MH_; }

    static final FunctionDescriptor memchr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor memchr$FUNC() { return memchr$FUNC_; }

    static final MethodHandle memchr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "memchr",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)Ljdk/incubator/foreign/MemoryAddress;",
        memchr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle memchr$MH() { return memchr$MH_; }

    static final FunctionDescriptor memcmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor memcmp$FUNC() { return memcmp$FUNC_; }

    static final MethodHandle memcmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "memcmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        memcmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle memcmp$MH() { return memcmp$MH_; }

    static final FunctionDescriptor memcpy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor memcpy$FUNC() { return memcpy$FUNC_; }

    static final MethodHandle memcpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "memcpy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        memcpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle memcpy$MH() { return memcpy$MH_; }

    static final FunctionDescriptor memmove$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor memmove$FUNC() { return memmove$FUNC_; }

    static final MethodHandle memmove$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "memmove",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        memmove$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle memmove$MH() { return memmove$MH_; }

    static final FunctionDescriptor memset$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor memset$FUNC() { return memset$FUNC_; }

    static final MethodHandle memset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "memset",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)Ljdk/incubator/foreign/MemoryAddress;",
        memset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle memset$MH() { return memset$MH_; }

    static final FunctionDescriptor strchr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor strchr$FUNC() { return strchr$FUNC_; }

    static final MethodHandle strchr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strchr",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        strchr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strchr$MH() { return strchr$MH_; }

    static final FunctionDescriptor strrchr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor strrchr$FUNC() { return strrchr$FUNC_; }

    static final MethodHandle strrchr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strrchr",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        strrchr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strrchr$MH() { return strrchr$MH_; }

    static final FunctionDescriptor strstr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strstr$FUNC() { return strstr$FUNC_; }

    static final MethodHandle strstr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strstr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strstr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strstr$MH() { return strstr$MH_; }

    static final FunctionDescriptor wcschr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcschr$FUNC() { return wcschr$FUNC_; }

    static final MethodHandle wcschr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcschr",
        "(Ljdk/incubator/foreign/MemoryAddress;S)Ljdk/incubator/foreign/MemoryAddress;",
        wcschr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcschr$MH() { return wcschr$MH_; }

    static final FunctionDescriptor wcsrchr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsrchr$FUNC() { return wcsrchr$FUNC_; }

    static final MethodHandle wcsrchr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsrchr",
        "(Ljdk/incubator/foreign/MemoryAddress;S)Ljdk/incubator/foreign/MemoryAddress;",
        wcsrchr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsrchr$MH() { return wcsrchr$MH_; }

    static final FunctionDescriptor wcsstr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsstr$FUNC() { return wcsstr$FUNC_; }

    static final MethodHandle wcsstr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsstr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcsstr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsstr$MH() { return wcsstr$MH_; }

    static final FunctionDescriptor memcpy_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor memcpy_s$FUNC() { return memcpy_s$FUNC_; }

    static final MethodHandle memcpy_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "memcpy_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)I",
        memcpy_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle memcpy_s$MH() { return memcpy_s$MH_; }

    static final FunctionDescriptor memmove_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor memmove_s$FUNC() { return memmove_s$FUNC_; }

    static final MethodHandle memmove_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "memmove_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)I",
        memmove_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle memmove_s$MH() { return memmove_s$MH_; }

    static final FunctionDescriptor _memicmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _memicmp$FUNC() { return _memicmp$FUNC_; }

    static final MethodHandle _memicmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_memicmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        _memicmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _memicmp$MH() { return _memicmp$MH_; }

    static final FunctionDescriptor _memicmp_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _memicmp_l$FUNC() { return _memicmp_l$FUNC_; }

    static final MethodHandle _memicmp_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_memicmp_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _memicmp_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _memicmp_l$MH() { return _memicmp_l$MH_; }

    static final FunctionDescriptor memccpy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor memccpy$FUNC() { return memccpy$FUNC_; }

    static final MethodHandle memccpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "memccpy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)Ljdk/incubator/foreign/MemoryAddress;",
        memccpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle memccpy$MH() { return memccpy$MH_; }

    static final FunctionDescriptor memicmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor memicmp$FUNC() { return memicmp$FUNC_; }

    static final MethodHandle memicmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "memicmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        memicmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle memicmp$MH() { return memicmp$MH_; }

    static final FunctionDescriptor wcscat_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcscat_s$FUNC() { return wcscat_s$FUNC_; }

    static final MethodHandle wcscat_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcscat_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        wcscat_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcscat_s$MH() { return wcscat_s$MH_; }

    static final FunctionDescriptor wcscpy_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcscpy_s$FUNC() { return wcscpy_s$FUNC_; }

    static final MethodHandle wcscpy_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcscpy_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        wcscpy_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcscpy_s$MH() { return wcscpy_s$MH_; }

    static final FunctionDescriptor wcsncat_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsncat_s$FUNC() { return wcsncat_s$FUNC_; }

    static final MethodHandle wcsncat_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsncat_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)I",
        wcsncat_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsncat_s$MH() { return wcsncat_s$MH_; }

    static final FunctionDescriptor wcsncpy_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsncpy_s$FUNC() { return wcsncpy_s$FUNC_; }

    static final MethodHandle wcsncpy_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsncpy_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)I",
        wcsncpy_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsncpy_s$MH() { return wcsncpy_s$MH_; }

    static final FunctionDescriptor wcstok_s$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcstok_s$FUNC() { return wcstok_s$FUNC_; }

    static final MethodHandle wcstok_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcstok_s",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcstok_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcstok_s$MH() { return wcstok_s$MH_; }

    static final FunctionDescriptor _wcsdup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsdup$FUNC() { return _wcsdup$FUNC_; }

    static final MethodHandle _wcsdup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsdup",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _wcsdup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsdup$MH() { return _wcsdup$MH_; }

    static final FunctionDescriptor wcscat$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcscat$FUNC() { return wcscat$FUNC_; }

    static final MethodHandle wcscat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcscat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcscat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcscat$MH() { return wcscat$MH_; }

    static final FunctionDescriptor wcscmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcscmp$FUNC() { return wcscmp$FUNC_; }

    static final MethodHandle wcscmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcscmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        wcscmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcscmp$MH() { return wcscmp$MH_; }

    static final FunctionDescriptor wcscpy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcscpy$FUNC() { return wcscpy$FUNC_; }

    static final MethodHandle wcscpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcscpy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcscpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcscpy$MH() { return wcscpy$MH_; }

    static final FunctionDescriptor wcscspn$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcscspn$FUNC() { return wcscspn$FUNC_; }

    static final MethodHandle wcscspn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcscspn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J",
        wcscspn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcscspn$MH() { return wcscspn$MH_; }

    static final FunctionDescriptor wcslen$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcslen$FUNC() { return wcslen$FUNC_; }

    static final MethodHandle wcslen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcslen",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        wcslen$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcslen$MH() { return wcslen$MH_; }

    static final FunctionDescriptor wcsnlen$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsnlen$FUNC() { return wcsnlen$FUNC_; }

    static final MethodHandle wcsnlen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsnlen",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        wcsnlen$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsnlen$MH() { return wcsnlen$MH_; }

    static final FunctionDescriptor wcsnlen_s$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsnlen_s$FUNC() { return wcsnlen_s$FUNC_; }

    static final MethodHandle wcsnlen_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsnlen_s",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        wcsnlen_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsnlen_s$MH() { return wcsnlen_s$MH_; }

    static final FunctionDescriptor wcsncat$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsncat$FUNC() { return wcsncat$FUNC_; }

    static final MethodHandle wcsncat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsncat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        wcsncat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsncat$MH() { return wcsncat$MH_; }

    static final FunctionDescriptor wcsncmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsncmp$FUNC() { return wcsncmp$FUNC_; }

    static final MethodHandle wcsncmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsncmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        wcsncmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsncmp$MH() { return wcsncmp$MH_; }

    static final FunctionDescriptor wcsncpy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsncpy$FUNC() { return wcsncpy$FUNC_; }

    static final MethodHandle wcsncpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsncpy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        wcsncpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsncpy$MH() { return wcsncpy$MH_; }

    static final FunctionDescriptor wcspbrk$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcspbrk$FUNC() { return wcspbrk$FUNC_; }

    static final MethodHandle wcspbrk$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcspbrk",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcspbrk$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcspbrk$MH() { return wcspbrk$MH_; }

    static final FunctionDescriptor wcsspn$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsspn$FUNC() { return wcsspn$FUNC_; }

    static final MethodHandle wcsspn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsspn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J",
        wcsspn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsspn$MH() { return wcsspn$MH_; }

    static final FunctionDescriptor wcstok$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcstok$FUNC() { return wcstok$FUNC_; }

    static final MethodHandle wcstok$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcstok",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcstok$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcstok$MH() { return wcstok$MH_; }

    static final FunctionDescriptor _wcstok$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcstok$FUNC() { return _wcstok$FUNC_; }

    static final MethodHandle _wcstok$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcstok",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _wcstok$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcstok$MH() { return _wcstok$MH_; }

    static final FunctionDescriptor _wcserror$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcserror$FUNC() { return _wcserror$FUNC_; }

    static final MethodHandle _wcserror$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcserror",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        _wcserror$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcserror$MH() { return _wcserror$MH_; }

    static final FunctionDescriptor _wcserror_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcserror_s$FUNC() { return _wcserror_s$FUNC_; }

    static final MethodHandle _wcserror_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcserror_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)I",
        _wcserror_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcserror_s$MH() { return _wcserror_s$MH_; }

    static final FunctionDescriptor __wcserror$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __wcserror$FUNC() { return __wcserror$FUNC_; }

    static final MethodHandle __wcserror$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__wcserror",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        __wcserror$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __wcserror$MH() { return __wcserror$MH_; }

    static final FunctionDescriptor __wcserror_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor __wcserror_s$FUNC() { return __wcserror_s$FUNC_; }

    static final MethodHandle __wcserror_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__wcserror_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        __wcserror_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __wcserror_s$MH() { return __wcserror_s$MH_; }

    static final FunctionDescriptor _wcsicmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsicmp$FUNC() { return _wcsicmp$FUNC_; }

    static final MethodHandle _wcsicmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsicmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _wcsicmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsicmp$MH() { return _wcsicmp$MH_; }

    static final FunctionDescriptor _wcsicmp_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsicmp_l$FUNC() { return _wcsicmp_l$FUNC_; }

    static final MethodHandle _wcsicmp_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsicmp_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _wcsicmp_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsicmp_l$MH() { return _wcsicmp_l$MH_; }

    static final FunctionDescriptor _wcsnicmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsnicmp$FUNC() { return _wcsnicmp$FUNC_; }

    static final MethodHandle _wcsnicmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsnicmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        _wcsnicmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsnicmp$MH() { return _wcsnicmp$MH_; }

    static final FunctionDescriptor _wcsnicmp_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsnicmp_l$FUNC() { return _wcsnicmp_l$FUNC_; }

    static final MethodHandle _wcsnicmp_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsnicmp_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _wcsnicmp_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsnicmp_l$MH() { return _wcsnicmp_l$MH_; }

    static final FunctionDescriptor _wcsnset_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_SHORT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsnset_s$FUNC() { return _wcsnset_s$FUNC_; }

    static final MethodHandle _wcsnset_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsnset_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JSJ)I",
        _wcsnset_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsnset_s$MH() { return _wcsnset_s$MH_; }

    static final FunctionDescriptor _wcsnset$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_SHORT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsnset$FUNC() { return _wcsnset$FUNC_; }

    static final MethodHandle _wcsnset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsnset",
        "(Ljdk/incubator/foreign/MemoryAddress;SJ)Ljdk/incubator/foreign/MemoryAddress;",
        _wcsnset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsnset$MH() { return _wcsnset$MH_; }

    static final FunctionDescriptor _wcsrev$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsrev$FUNC() { return _wcsrev$FUNC_; }

    static final MethodHandle _wcsrev$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsrev",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _wcsrev$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsrev$MH() { return _wcsrev$MH_; }

    static final FunctionDescriptor _wcsset_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsset_s$FUNC() { return _wcsset_s$FUNC_; }

    static final MethodHandle _wcsset_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsset_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JS)I",
        _wcsset_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsset_s$MH() { return _wcsset_s$MH_; }

    static final FunctionDescriptor _wcsset$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsset$FUNC() { return _wcsset$FUNC_; }

    static final MethodHandle _wcsset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsset",
        "(Ljdk/incubator/foreign/MemoryAddress;S)Ljdk/incubator/foreign/MemoryAddress;",
        _wcsset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsset$MH() { return _wcsset$MH_; }

    static final FunctionDescriptor _wcslwr_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcslwr_s$FUNC() { return _wcslwr_s$FUNC_; }

    static final MethodHandle _wcslwr_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcslwr_s",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        _wcslwr_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcslwr_s$MH() { return _wcslwr_s$MH_; }

    static final FunctionDescriptor _wcslwr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcslwr$FUNC() { return _wcslwr$FUNC_; }

    static final MethodHandle _wcslwr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcslwr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _wcslwr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcslwr$MH() { return _wcslwr$MH_; }

    static final FunctionDescriptor _wcslwr_s_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcslwr_s_l$FUNC() { return _wcslwr_s_l$FUNC_; }

    static final MethodHandle _wcslwr_s_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcslwr_s_l",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _wcslwr_s_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcslwr_s_l$MH() { return _wcslwr_s_l$MH_; }

    static final FunctionDescriptor _wcslwr_l$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcslwr_l$FUNC() { return _wcslwr_l$FUNC_; }

    static final MethodHandle _wcslwr_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcslwr_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _wcslwr_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcslwr_l$MH() { return _wcslwr_l$MH_; }

    static final FunctionDescriptor _wcsupr_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsupr_s$FUNC() { return _wcsupr_s$FUNC_; }

    static final MethodHandle _wcsupr_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsupr_s",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        _wcsupr_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsupr_s$MH() { return _wcsupr_s$MH_; }

    static final FunctionDescriptor _wcsupr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsupr$FUNC() { return _wcsupr$FUNC_; }

    static final MethodHandle _wcsupr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsupr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _wcsupr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsupr$MH() { return _wcsupr$MH_; }

    static final FunctionDescriptor _wcsupr_s_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsupr_s_l$FUNC() { return _wcsupr_s_l$FUNC_; }

    static final MethodHandle _wcsupr_s_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsupr_s_l",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _wcsupr_s_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsupr_s_l$MH() { return _wcsupr_s_l$MH_; }

    static final FunctionDescriptor _wcsupr_l$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsupr_l$FUNC() { return _wcsupr_l$FUNC_; }

    static final MethodHandle _wcsupr_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsupr_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _wcsupr_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsupr_l$MH() { return _wcsupr_l$MH_; }

    static final FunctionDescriptor wcsxfrm$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsxfrm$FUNC() { return wcsxfrm$FUNC_; }

    static final MethodHandle wcsxfrm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsxfrm",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        wcsxfrm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsxfrm$MH() { return wcsxfrm$MH_; }

    static final FunctionDescriptor _wcsxfrm_l$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsxfrm_l$FUNC() { return _wcsxfrm_l$FUNC_; }

    static final MethodHandle _wcsxfrm_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsxfrm_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)J",
        _wcsxfrm_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsxfrm_l$MH() { return _wcsxfrm_l$MH_; }

    static final FunctionDescriptor wcscoll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcscoll$FUNC() { return wcscoll$FUNC_; }

    static final MethodHandle wcscoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcscoll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        wcscoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcscoll$MH() { return wcscoll$MH_; }

    static final FunctionDescriptor _wcscoll_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcscoll_l$FUNC() { return _wcscoll_l$FUNC_; }

    static final MethodHandle _wcscoll_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcscoll_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _wcscoll_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcscoll_l$MH() { return _wcscoll_l$MH_; }

    static final FunctionDescriptor _wcsicoll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsicoll$FUNC() { return _wcsicoll$FUNC_; }

    static final MethodHandle _wcsicoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsicoll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _wcsicoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsicoll$MH() { return _wcsicoll$MH_; }

    static final FunctionDescriptor _wcsicoll_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsicoll_l$FUNC() { return _wcsicoll_l$FUNC_; }

    static final MethodHandle _wcsicoll_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsicoll_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _wcsicoll_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsicoll_l$MH() { return _wcsicoll_l$MH_; }

    static final FunctionDescriptor _wcsncoll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsncoll$FUNC() { return _wcsncoll$FUNC_; }

    static final MethodHandle _wcsncoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsncoll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        _wcsncoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsncoll$MH() { return _wcsncoll$MH_; }

    static final FunctionDescriptor _wcsncoll_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsncoll_l$FUNC() { return _wcsncoll_l$FUNC_; }

    static final MethodHandle _wcsncoll_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsncoll_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _wcsncoll_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsncoll_l$MH() { return _wcsncoll_l$MH_; }

    static final FunctionDescriptor _wcsnicoll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsnicoll$FUNC() { return _wcsnicoll$FUNC_; }

    static final MethodHandle _wcsnicoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsnicoll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        _wcsnicoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsnicoll$MH() { return _wcsnicoll$MH_; }

    static final FunctionDescriptor _wcsnicoll_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _wcsnicoll_l$FUNC() { return _wcsnicoll_l$FUNC_; }

    static final MethodHandle _wcsnicoll_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_wcsnicoll_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _wcsnicoll_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _wcsnicoll_l$MH() { return _wcsnicoll_l$MH_; }

    static final FunctionDescriptor wcsdup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsdup$FUNC() { return wcsdup$FUNC_; }

    static final MethodHandle wcsdup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsdup",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcsdup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsdup$MH() { return wcsdup$MH_; }

    static final FunctionDescriptor wcsicmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsicmp$FUNC() { return wcsicmp$FUNC_; }

    static final MethodHandle wcsicmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsicmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        wcsicmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsicmp$MH() { return wcsicmp$MH_; }

    static final FunctionDescriptor wcsnicmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsnicmp$FUNC() { return wcsnicmp$FUNC_; }

    static final MethodHandle wcsnicmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsnicmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        wcsnicmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsnicmp$MH() { return wcsnicmp$MH_; }

    static final FunctionDescriptor wcsnset$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_SHORT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsnset$FUNC() { return wcsnset$FUNC_; }

    static final MethodHandle wcsnset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsnset",
        "(Ljdk/incubator/foreign/MemoryAddress;SJ)Ljdk/incubator/foreign/MemoryAddress;",
        wcsnset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsnset$MH() { return wcsnset$MH_; }

    static final FunctionDescriptor wcsrev$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsrev$FUNC() { return wcsrev$FUNC_; }

    static final MethodHandle wcsrev$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsrev",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcsrev$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsrev$MH() { return wcsrev$MH_; }

    static final FunctionDescriptor wcsset$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsset$FUNC() { return wcsset$FUNC_; }

    static final MethodHandle wcsset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsset",
        "(Ljdk/incubator/foreign/MemoryAddress;S)Ljdk/incubator/foreign/MemoryAddress;",
        wcsset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsset$MH() { return wcsset$MH_; }

    static final FunctionDescriptor wcslwr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcslwr$FUNC() { return wcslwr$FUNC_; }

    static final MethodHandle wcslwr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcslwr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcslwr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcslwr$MH() { return wcslwr$MH_; }

    static final FunctionDescriptor wcsupr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsupr$FUNC() { return wcsupr$FUNC_; }

    static final MethodHandle wcsupr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsupr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        wcsupr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsupr$MH() { return wcsupr$MH_; }

    static final FunctionDescriptor wcsicoll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor wcsicoll$FUNC() { return wcsicoll$FUNC_; }

    static final MethodHandle wcsicoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "wcsicoll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        wcsicoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle wcsicoll$MH() { return wcsicoll$MH_; }

    static final FunctionDescriptor strcpy_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strcpy_s$FUNC() { return strcpy_s$FUNC_; }

    static final MethodHandle strcpy_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strcpy_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        strcpy_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strcpy_s$MH() { return strcpy_s$MH_; }

    static final FunctionDescriptor strcat_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strcat_s$FUNC() { return strcat_s$FUNC_; }

    static final MethodHandle strcat_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strcat_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        strcat_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strcat_s$MH() { return strcat_s$MH_; }

    static final FunctionDescriptor strerror_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor strerror_s$FUNC() { return strerror_s$FUNC_; }

    static final MethodHandle strerror_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strerror_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)I",
        strerror_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strerror_s$MH() { return strerror_s$MH_; }

    static final FunctionDescriptor strncat_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strncat_s$FUNC() { return strncat_s$FUNC_; }

    static final MethodHandle strncat_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strncat_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)I",
        strncat_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strncat_s$MH() { return strncat_s$MH_; }

    static final FunctionDescriptor strncpy_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strncpy_s$FUNC() { return strncpy_s$FUNC_; }

    static final MethodHandle strncpy_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strncpy_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)I",
        strncpy_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strncpy_s$MH() { return strncpy_s$MH_; }

    static final FunctionDescriptor strtok_s$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strtok_s$FUNC() { return strtok_s$FUNC_; }

    static final MethodHandle strtok_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strtok_s",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strtok_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strtok_s$MH() { return strtok_s$MH_; }

    static final FunctionDescriptor _memccpy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _memccpy$FUNC() { return _memccpy$FUNC_; }

    static final MethodHandle _memccpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_memccpy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)Ljdk/incubator/foreign/MemoryAddress;",
        _memccpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _memccpy$MH() { return _memccpy$MH_; }

    static final FunctionDescriptor strcat$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strcat$FUNC() { return strcat$FUNC_; }

    static final MethodHandle strcat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strcat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strcat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strcat$MH() { return strcat$MH_; }

    static final FunctionDescriptor strcmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strcmp$FUNC() { return strcmp$FUNC_; }

    static final MethodHandle strcmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strcmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        strcmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strcmp$MH() { return strcmp$MH_; }

    static final FunctionDescriptor _strcmpi$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strcmpi$FUNC() { return _strcmpi$FUNC_; }

    static final MethodHandle _strcmpi$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strcmpi",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _strcmpi$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strcmpi$MH() { return _strcmpi$MH_; }

    static final FunctionDescriptor strcoll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strcoll$FUNC() { return strcoll$FUNC_; }

    static final MethodHandle strcoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strcoll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        strcoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strcoll$MH() { return strcoll$MH_; }

    static final FunctionDescriptor _strcoll_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strcoll_l$FUNC() { return _strcoll_l$FUNC_; }

    static final MethodHandle _strcoll_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strcoll_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _strcoll_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strcoll_l$MH() { return _strcoll_l$MH_; }

    static final FunctionDescriptor strcpy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strcpy$FUNC() { return strcpy$FUNC_; }

    static final MethodHandle strcpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strcpy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strcpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strcpy$MH() { return strcpy$MH_; }

    static final FunctionDescriptor strcspn$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strcspn$FUNC() { return strcspn$FUNC_; }

    static final MethodHandle strcspn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strcspn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J",
        strcspn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strcspn$MH() { return strcspn$MH_; }

    static final FunctionDescriptor _strdup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strdup$FUNC() { return _strdup$FUNC_; }

    static final MethodHandle _strdup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strdup",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _strdup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strdup$MH() { return _strdup$MH_; }

    static final FunctionDescriptor _strerror$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strerror$FUNC() { return _strerror$FUNC_; }

    static final MethodHandle _strerror$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strerror",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _strerror$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strerror$MH() { return _strerror$MH_; }

    static final FunctionDescriptor _strerror_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strerror_s$FUNC() { return _strerror_s$FUNC_; }

    static final MethodHandle _strerror_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strerror_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _strerror_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strerror_s$MH() { return _strerror_s$MH_; }

    static final FunctionDescriptor strerror$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor strerror$FUNC() { return strerror$FUNC_; }

    static final MethodHandle strerror$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strerror",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        strerror$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strerror$MH() { return strerror$MH_; }

    static final FunctionDescriptor _stricmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _stricmp$FUNC() { return _stricmp$FUNC_; }

    static final MethodHandle _stricmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_stricmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _stricmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _stricmp$MH() { return _stricmp$MH_; }

    static final FunctionDescriptor _stricoll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _stricoll$FUNC() { return _stricoll$FUNC_; }

    static final MethodHandle _stricoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_stricoll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _stricoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _stricoll$MH() { return _stricoll$MH_; }

    static final FunctionDescriptor _stricoll_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _stricoll_l$FUNC() { return _stricoll_l$FUNC_; }

    static final MethodHandle _stricoll_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_stricoll_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _stricoll_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _stricoll_l$MH() { return _stricoll_l$MH_; }

    static final FunctionDescriptor _stricmp_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _stricmp_l$FUNC() { return _stricmp_l$FUNC_; }

    static final MethodHandle _stricmp_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_stricmp_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        _stricmp_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _stricmp_l$MH() { return _stricmp_l$MH_; }

    static final FunctionDescriptor strlen$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strlen$FUNC() { return strlen$FUNC_; }

    static final MethodHandle strlen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strlen",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        strlen$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strlen$MH() { return strlen$MH_; }

    static final FunctionDescriptor _strlwr_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strlwr_s$FUNC() { return _strlwr_s$FUNC_; }

    static final MethodHandle _strlwr_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strlwr_s",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        _strlwr_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strlwr_s$MH() { return _strlwr_s$MH_; }

    static final FunctionDescriptor _strlwr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strlwr$FUNC() { return _strlwr$FUNC_; }

    static final MethodHandle _strlwr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strlwr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _strlwr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strlwr$MH() { return _strlwr$MH_; }

    static final FunctionDescriptor _strlwr_s_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strlwr_s_l$FUNC() { return _strlwr_s_l$FUNC_; }

    static final MethodHandle _strlwr_s_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strlwr_s_l",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _strlwr_s_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strlwr_s_l$MH() { return _strlwr_s_l$MH_; }

    static final FunctionDescriptor _strlwr_l$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strlwr_l$FUNC() { return _strlwr_l$FUNC_; }

    static final MethodHandle _strlwr_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strlwr_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _strlwr_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strlwr_l$MH() { return _strlwr_l$MH_; }

    static final FunctionDescriptor strncat$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strncat$FUNC() { return strncat$FUNC_; }

    static final MethodHandle strncat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strncat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        strncat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strncat$MH() { return strncat$MH_; }

    static final FunctionDescriptor strncmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strncmp$FUNC() { return strncmp$FUNC_; }

    static final MethodHandle strncmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strncmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        strncmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strncmp$MH() { return strncmp$MH_; }

    static final FunctionDescriptor _strnicmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strnicmp$FUNC() { return _strnicmp$FUNC_; }

    static final MethodHandle _strnicmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strnicmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        _strnicmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strnicmp$MH() { return _strnicmp$MH_; }

    static final FunctionDescriptor _strnicmp_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strnicmp_l$FUNC() { return _strnicmp_l$FUNC_; }

    static final MethodHandle _strnicmp_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strnicmp_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _strnicmp_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strnicmp_l$MH() { return _strnicmp_l$MH_; }

    static final FunctionDescriptor _strnicoll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strnicoll$FUNC() { return _strnicoll$FUNC_; }

    static final MethodHandle _strnicoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strnicoll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        _strnicoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strnicoll$MH() { return _strnicoll$MH_; }

    static final FunctionDescriptor _strnicoll_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strnicoll_l$FUNC() { return _strnicoll_l$FUNC_; }

    static final MethodHandle _strnicoll_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strnicoll_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _strnicoll_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strnicoll_l$MH() { return _strnicoll_l$MH_; }

    static final FunctionDescriptor _strncoll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strncoll$FUNC() { return _strncoll$FUNC_; }

    static final MethodHandle _strncoll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strncoll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        _strncoll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strncoll$MH() { return _strncoll$MH_; }

    static final FunctionDescriptor _strncoll_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strncoll_l$FUNC() { return _strncoll_l$FUNC_; }

    static final MethodHandle _strncoll_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strncoll_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _strncoll_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strncoll_l$MH() { return _strncoll_l$MH_; }

    static final FunctionDescriptor __strncnt$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor __strncnt$FUNC() { return __strncnt$FUNC_; }

    static final MethodHandle __strncnt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__strncnt",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        __strncnt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __strncnt$MH() { return __strncnt$MH_; }

    static final FunctionDescriptor strncpy$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strncpy$FUNC() { return strncpy$FUNC_; }

    static final MethodHandle strncpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strncpy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        strncpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strncpy$MH() { return strncpy$MH_; }

    static final FunctionDescriptor strnlen$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strnlen$FUNC() { return strnlen$FUNC_; }

    static final MethodHandle strnlen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strnlen",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        strnlen$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strnlen$MH() { return strnlen$MH_; }

    static final FunctionDescriptor strnlen_s$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strnlen_s$FUNC() { return strnlen_s$FUNC_; }

    static final MethodHandle strnlen_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strnlen_s",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        strnlen_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strnlen_s$MH() { return strnlen_s$MH_; }

    static final FunctionDescriptor _strnset_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strnset_s$FUNC() { return _strnset_s$FUNC_; }

    static final MethodHandle _strnset_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strnset_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JIJ)I",
        _strnset_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strnset_s$MH() { return _strnset_s$MH_; }

    static final FunctionDescriptor _strnset$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strnset$FUNC() { return _strnset$FUNC_; }

    static final MethodHandle _strnset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strnset",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)Ljdk/incubator/foreign/MemoryAddress;",
        _strnset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strnset$MH() { return _strnset$MH_; }

    static final FunctionDescriptor strpbrk$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strpbrk$FUNC() { return strpbrk$FUNC_; }

    static final MethodHandle strpbrk$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strpbrk",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strpbrk$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strpbrk$MH() { return strpbrk$MH_; }

    static final FunctionDescriptor _strrev$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strrev$FUNC() { return _strrev$FUNC_; }

    static final MethodHandle _strrev$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strrev",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _strrev$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strrev$MH() { return _strrev$MH_; }

    static final FunctionDescriptor _strset_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strset_s$FUNC() { return _strset_s$FUNC_; }

    static final MethodHandle _strset_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strset_s",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)I",
        _strset_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strset_s$MH() { return _strset_s$MH_; }

    static final FunctionDescriptor _strset$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strset$FUNC() { return _strset$FUNC_; }

    static final MethodHandle _strset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        _strset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strset$MH() { return _strset$MH_; }

    static final FunctionDescriptor strspn$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strspn$FUNC() { return strspn$FUNC_; }

    static final MethodHandle strspn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strspn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J",
        strspn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strspn$MH() { return strspn$MH_; }

    static final FunctionDescriptor strtok$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strtok$FUNC() { return strtok$FUNC_; }

    static final MethodHandle strtok$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strtok",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strtok$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strtok$MH() { return strtok$MH_; }

    static final FunctionDescriptor _strupr_s$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strupr_s$FUNC() { return _strupr_s$FUNC_; }

    static final MethodHandle _strupr_s$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strupr_s",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        _strupr_s$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strupr_s$MH() { return _strupr_s$MH_; }

    static final FunctionDescriptor _strupr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strupr$FUNC() { return _strupr$FUNC_; }

    static final MethodHandle _strupr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strupr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _strupr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strupr$MH() { return _strupr$MH_; }

    static final FunctionDescriptor _strupr_s_l$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strupr_s_l$FUNC() { return _strupr_s_l$FUNC_; }

    static final MethodHandle _strupr_s_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strupr_s_l",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        _strupr_s_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strupr_s_l$MH() { return _strupr_s_l$MH_; }

    static final FunctionDescriptor _strupr_l$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strupr_l$FUNC() { return _strupr_l$FUNC_; }

    static final MethodHandle _strupr_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strupr_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _strupr_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strupr_l$MH() { return _strupr_l$MH_; }

    static final FunctionDescriptor strxfrm$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strxfrm$FUNC() { return strxfrm$FUNC_; }

    static final MethodHandle strxfrm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strxfrm",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        strxfrm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strxfrm$MH() { return strxfrm$MH_; }

    static final FunctionDescriptor _strxfrm_l$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _strxfrm_l$FUNC() { return _strxfrm_l$FUNC_; }

    static final MethodHandle _strxfrm_l$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_strxfrm_l",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)J",
        _strxfrm_l$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _strxfrm_l$MH() { return _strxfrm_l$MH_; }

    static final FunctionDescriptor strdup$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strdup$FUNC() { return strdup$FUNC_; }

    static final MethodHandle strdup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strdup",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strdup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strdup$MH() { return strdup$MH_; }

    static final FunctionDescriptor strcmpi$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strcmpi$FUNC() { return strcmpi$FUNC_; }

    static final MethodHandle strcmpi$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strcmpi",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        strcmpi$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strcmpi$MH() { return strcmpi$MH_; }

    static final FunctionDescriptor stricmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor stricmp$FUNC() { return stricmp$FUNC_; }

    static final MethodHandle stricmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "stricmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        stricmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle stricmp$MH() { return stricmp$MH_; }

    static final FunctionDescriptor strlwr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strlwr$FUNC() { return strlwr$FUNC_; }

    static final MethodHandle strlwr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strlwr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strlwr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strlwr$MH() { return strlwr$MH_; }

    static final FunctionDescriptor strnicmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strnicmp$FUNC() { return strnicmp$FUNC_; }

    static final MethodHandle strnicmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strnicmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        strnicmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strnicmp$MH() { return strnicmp$MH_; }

    static final FunctionDescriptor strnset$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor strnset$FUNC() { return strnset$FUNC_; }

    static final MethodHandle strnset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strnset",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)Ljdk/incubator/foreign/MemoryAddress;",
        strnset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strnset$MH() { return strnset$MH_; }

    static final FunctionDescriptor strrev$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strrev$FUNC() { return strrev$FUNC_; }

    static final MethodHandle strrev$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strrev",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strrev$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strrev$MH() { return strrev$MH_; }

    static final FunctionDescriptor strset$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor strset$FUNC() { return strset$FUNC_; }

    static final MethodHandle strset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        strset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strset$MH() { return strset$MH_; }

    static final FunctionDescriptor strupr$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor strupr$FUNC() { return strupr$FUNC_; }

    static final MethodHandle strupr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "strupr",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        strupr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle strupr$MH() { return strupr$MH_; }

    static final MemoryLayout _OBJECTID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("Lineage"),
        C_LONG.withName("Uniquifier")
    ).withName("_OBJECTID");
    static final jdk.incubator.foreign.MemoryLayout _OBJECTID$struct$LAYOUT() { return _OBJECTID$struct$LAYOUT_; }

    static final MemoryLayout _OBJECTID$Uniquifier$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OBJECTID$Uniquifier$LAYOUT() { return _OBJECTID$Uniquifier$LAYOUT_; }

    static final VarHandle _OBJECTID$Uniquifier$VH_ = _OBJECTID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Uniquifier"));
    static final java.lang.invoke.VarHandle _OBJECTID$Uniquifier$VH() { return _OBJECTID$Uniquifier$VH_; }

    static final MemoryLayout _M128A$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Low"),
        C_LONGLONG.withName("High")
    ).withName("_M128A");
    static final jdk.incubator.foreign.MemoryLayout _M128A$struct$LAYOUT() { return _M128A$struct$LAYOUT_; }

    static final MemoryLayout _M128A$Low$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _M128A$Low$LAYOUT() { return _M128A$Low$LAYOUT_; }

    static final VarHandle _M128A$Low$VH_ = _M128A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Low"));
    static final java.lang.invoke.VarHandle _M128A$Low$VH() { return _M128A$Low$VH_; }

    static final MemoryLayout _M128A$High$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _M128A$High$LAYOUT() { return _M128A$High$LAYOUT_; }

    static final VarHandle _M128A$High$VH_ = _M128A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("High"));
    static final java.lang.invoke.VarHandle _M128A$High$VH() { return _M128A$High$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("ControlWord"),
        C_SHORT.withName("StatusWord"),
        C_CHAR.withName("TagWord"),
        C_CHAR.withName("Reserved1"),
        C_SHORT.withName("ErrorOpcode"),
        C_LONG.withName("ErrorOffset"),
        C_SHORT.withName("ErrorSelector"),
        C_SHORT.withName("Reserved2"),
        C_LONG.withName("DataOffset"),
        C_SHORT.withName("DataSelector"),
        C_SHORT.withName("Reserved3"),
        C_LONG.withName("MxCsr"),
        C_LONG.withName("MxCsr_Mask"),
        MemoryLayout.ofSequence(8, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("_M128A")).withName("FloatRegisters"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Low"),
            C_LONGLONG.withName("High")
        ).withName("_M128A")).withName("XmmRegisters"),
        MemoryLayout.ofSequence(96, C_CHAR).withName("Reserved4")
    ).withName("_XSAVE_FORMAT");
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$struct$LAYOUT() { return _XSAVE_FORMAT$struct$LAYOUT_; }

    static final MemoryLayout _XSAVE_FORMAT$ControlWord$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$ControlWord$LAYOUT() { return _XSAVE_FORMAT$ControlWord$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$ControlWord$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ControlWord"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$ControlWord$VH() { return _XSAVE_FORMAT$ControlWord$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$StatusWord$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$StatusWord$LAYOUT() { return _XSAVE_FORMAT$StatusWord$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$StatusWord$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StatusWord"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$StatusWord$VH() { return _XSAVE_FORMAT$StatusWord$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$TagWord$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$TagWord$LAYOUT() { return _XSAVE_FORMAT$TagWord$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$TagWord$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("TagWord"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$TagWord$VH() { return _XSAVE_FORMAT$TagWord$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$Reserved1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$Reserved1$LAYOUT() { return _XSAVE_FORMAT$Reserved1$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$Reserved1$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$Reserved1$VH() { return _XSAVE_FORMAT$Reserved1$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$ErrorOpcode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$ErrorOpcode$LAYOUT() { return _XSAVE_FORMAT$ErrorOpcode$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$ErrorOpcode$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ErrorOpcode"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$ErrorOpcode$VH() { return _XSAVE_FORMAT$ErrorOpcode$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$ErrorOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$ErrorOffset$LAYOUT() { return _XSAVE_FORMAT$ErrorOffset$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$ErrorOffset$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ErrorOffset"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$ErrorOffset$VH() { return _XSAVE_FORMAT$ErrorOffset$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$ErrorSelector$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$ErrorSelector$LAYOUT() { return _XSAVE_FORMAT$ErrorSelector$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$ErrorSelector$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ErrorSelector"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$ErrorSelector$VH() { return _XSAVE_FORMAT$ErrorSelector$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$Reserved2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$Reserved2$LAYOUT() { return _XSAVE_FORMAT$Reserved2$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$Reserved2$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$Reserved2$VH() { return _XSAVE_FORMAT$Reserved2$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$DataOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$DataOffset$LAYOUT() { return _XSAVE_FORMAT$DataOffset$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$DataOffset$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataOffset"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$DataOffset$VH() { return _XSAVE_FORMAT$DataOffset$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$DataSelector$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$DataSelector$LAYOUT() { return _XSAVE_FORMAT$DataSelector$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$DataSelector$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DataSelector"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$DataSelector$VH() { return _XSAVE_FORMAT$DataSelector$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$Reserved3$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$Reserved3$LAYOUT() { return _XSAVE_FORMAT$Reserved3$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$Reserved3$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved3"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$Reserved3$VH() { return _XSAVE_FORMAT$Reserved3$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$MxCsr$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$MxCsr$LAYOUT() { return _XSAVE_FORMAT$MxCsr$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$MxCsr$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MxCsr"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$MxCsr$VH() { return _XSAVE_FORMAT$MxCsr$VH_; }

    static final MemoryLayout _XSAVE_FORMAT$MxCsr_Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_FORMAT$MxCsr_Mask$LAYOUT() { return _XSAVE_FORMAT$MxCsr_Mask$LAYOUT_; }

    static final VarHandle _XSAVE_FORMAT$MxCsr_Mask$VH_ = _XSAVE_FORMAT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MxCsr_Mask"));
    static final java.lang.invoke.VarHandle _XSAVE_FORMAT$MxCsr_Mask$VH() { return _XSAVE_FORMAT$MxCsr_Mask$VH_; }

    static final MemoryLayout _XSAVE_CET_U_FORMAT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Ia32CetUMsr"),
        C_LONGLONG.withName("Ia32Pl3SspMsr")
    ).withName("_XSAVE_CET_U_FORMAT");
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_CET_U_FORMAT$struct$LAYOUT() { return _XSAVE_CET_U_FORMAT$struct$LAYOUT_; }

    static final MemoryLayout _XSAVE_CET_U_FORMAT$Ia32CetUMsr$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_CET_U_FORMAT$Ia32CetUMsr$LAYOUT() { return _XSAVE_CET_U_FORMAT$Ia32CetUMsr$LAYOUT_; }

    static final VarHandle _XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH_ = _XSAVE_CET_U_FORMAT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ia32CetUMsr"));
    static final java.lang.invoke.VarHandle _XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH() { return _XSAVE_CET_U_FORMAT$Ia32CetUMsr$VH_; }

    static final MemoryLayout _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$LAYOUT() { return _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$LAYOUT_; }

    static final VarHandle _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH_ = _XSAVE_CET_U_FORMAT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ia32Pl3SspMsr"));
    static final java.lang.invoke.VarHandle _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH() { return _XSAVE_CET_U_FORMAT$Ia32Pl3SspMsr$VH_; }

    static final MemoryLayout _XSAVE_AREA_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Mask"),
        C_LONGLONG.withName("CompactionMask"),
        MemoryLayout.ofSequence(6, C_LONGLONG).withName("Reserved2")
    ).withName("_XSAVE_AREA_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_AREA_HEADER$struct$LAYOUT() { return _XSAVE_AREA_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _XSAVE_AREA_HEADER$Mask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_AREA_HEADER$Mask$LAYOUT() { return _XSAVE_AREA_HEADER$Mask$LAYOUT_; }

    static final VarHandle _XSAVE_AREA_HEADER$Mask$VH_ = _XSAVE_AREA_HEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _XSAVE_AREA_HEADER$Mask$VH() { return _XSAVE_AREA_HEADER$Mask$VH_; }

    static final MemoryLayout _XSAVE_AREA_HEADER$CompactionMask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_AREA_HEADER$CompactionMask$LAYOUT() { return _XSAVE_AREA_HEADER$CompactionMask$LAYOUT_; }

    static final VarHandle _XSAVE_AREA_HEADER$CompactionMask$VH_ = _XSAVE_AREA_HEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompactionMask"));
    static final java.lang.invoke.VarHandle _XSAVE_AREA_HEADER$CompactionMask$VH() { return _XSAVE_AREA_HEADER$CompactionMask$VH_; }

    static final MemoryLayout _XSAVE_AREA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("ControlWord"),
            C_SHORT.withName("StatusWord"),
            C_CHAR.withName("TagWord"),
            C_CHAR.withName("Reserved1"),
            C_SHORT.withName("ErrorOpcode"),
            C_LONG.withName("ErrorOffset"),
            C_SHORT.withName("ErrorSelector"),
            C_SHORT.withName("Reserved2"),
            C_LONG.withName("DataOffset"),
            C_SHORT.withName("DataSelector"),
            C_SHORT.withName("Reserved3"),
            C_LONG.withName("MxCsr"),
            C_LONG.withName("MxCsr_Mask"),
            MemoryLayout.ofSequence(8, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Low"),
                C_LONGLONG.withName("High")
            ).withName("_M128A")).withName("FloatRegisters"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Low"),
                C_LONGLONG.withName("High")
            ).withName("_M128A")).withName("XmmRegisters"),
            MemoryLayout.ofSequence(96, C_CHAR).withName("Reserved4")
        ).withName("LegacyState"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_LONGLONG.withName("CompactionMask"),
            MemoryLayout.ofSequence(6, C_LONGLONG).withName("Reserved2")
        ).withName("Header")
    ).withName("_XSAVE_AREA");
    static final jdk.incubator.foreign.MemoryLayout _XSAVE_AREA$struct$LAYOUT() { return _XSAVE_AREA$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_CONTEXT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Mask"),
        C_LONG.withName("Length"),
        C_LONG.withName("Reserved1"),
        C_POINTER.withName("Area"),
        C_POINTER.withName("Buffer")
    ).withName("_XSTATE_CONTEXT");
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$struct$LAYOUT() { return _XSTATE_CONTEXT$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_CONTEXT$Mask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Mask$LAYOUT() { return _XSTATE_CONTEXT$Mask$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Mask$VH_ = _XSTATE_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Mask$VH() { return _XSTATE_CONTEXT$Mask$VH_; }

    static final MemoryLayout _XSTATE_CONTEXT$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Length$LAYOUT() { return _XSTATE_CONTEXT$Length$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Length$VH_ = _XSTATE_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Length$VH() { return _XSTATE_CONTEXT$Length$VH_; }

    static final MemoryLayout _XSTATE_CONTEXT$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Reserved1$LAYOUT() { return _XSTATE_CONTEXT$Reserved1$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Reserved1$VH_ = _XSTATE_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Reserved1$VH() { return _XSTATE_CONTEXT$Reserved1$VH_; }

    static final MemoryLayout _XSTATE_CONTEXT$Area$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Area$LAYOUT() { return _XSTATE_CONTEXT$Area$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Area$VH_ = MemoryHandles.asAddressVarHandle(_XSTATE_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Area")));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Area$VH() { return _XSTATE_CONTEXT$Area$VH_; }

    static final MemoryLayout _XSTATE_CONTEXT$Buffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONTEXT$Buffer$LAYOUT() { return _XSTATE_CONTEXT$Buffer$LAYOUT_; }

    static final VarHandle _XSTATE_CONTEXT$Buffer$VH_ = MemoryHandles.asAddressVarHandle(_XSTATE_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Buffer")));
    static final java.lang.invoke.VarHandle _XSTATE_CONTEXT$Buffer$VH() { return _XSTATE_CONTEXT$Buffer$VH_; }

    static final MemoryLayout _SCOPE_TABLE_AMD64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Count"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("BeginAddress"),
            C_LONG.withName("EndAddress"),
            C_LONG.withName("HandlerAddress"),
            C_LONG.withName("JumpTarget")
        )).withName("ScopeRecord")
    ).withName("_SCOPE_TABLE_AMD64");
    static final jdk.incubator.foreign.MemoryLayout _SCOPE_TABLE_AMD64$struct$LAYOUT() { return _SCOPE_TABLE_AMD64$struct$LAYOUT_; }

    static final MemoryLayout _SCOPE_TABLE_AMD64$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCOPE_TABLE_AMD64$Count$LAYOUT() { return _SCOPE_TABLE_AMD64$Count$LAYOUT_; }

    static final VarHandle _SCOPE_TABLE_AMD64$Count$VH_ = _SCOPE_TABLE_AMD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _SCOPE_TABLE_AMD64$Count$VH() { return _SCOPE_TABLE_AMD64$Count$VH_; }

    static final FunctionDescriptor _bittest$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittest$FUNC() { return _bittest$FUNC_; }

    static final MethodHandle _bittest$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittest",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _bittest$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittest$MH() { return _bittest$MH_; }

    static final FunctionDescriptor _bittestandcomplement$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandcomplement$FUNC() { return _bittestandcomplement$FUNC_; }

    static final MethodHandle _bittestandcomplement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandcomplement",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _bittestandcomplement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandcomplement$MH() { return _bittestandcomplement$MH_; }

    static final FunctionDescriptor _bittestandset$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandset$FUNC() { return _bittestandset$FUNC_; }

    static final MethodHandle _bittestandset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _bittestandset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandset$MH() { return _bittestandset$MH_; }

    static final FunctionDescriptor _bittestandreset$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandreset$FUNC() { return _bittestandreset$FUNC_; }

    static final MethodHandle _bittestandreset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandreset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _bittestandreset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandreset$MH() { return _bittestandreset$MH_; }

    static final FunctionDescriptor _interlockedbittestandset$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _interlockedbittestandset$FUNC() { return _interlockedbittestandset$FUNC_; }

    static final MethodHandle _interlockedbittestandset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_interlockedbittestandset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _interlockedbittestandset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _interlockedbittestandset$MH() { return _interlockedbittestandset$MH_; }

    static final FunctionDescriptor _interlockedbittestandreset$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _interlockedbittestandreset$FUNC() { return _interlockedbittestandreset$FUNC_; }

    static final MethodHandle _interlockedbittestandreset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_interlockedbittestandreset",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _interlockedbittestandreset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _interlockedbittestandreset$MH() { return _interlockedbittestandreset$MH_; }

    static final FunctionDescriptor _bittest64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittest64$FUNC() { return _bittest64$FUNC_; }

    static final MethodHandle _bittest64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittest64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _bittest64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittest64$MH() { return _bittest64$MH_; }

    static final FunctionDescriptor _bittestandcomplement64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandcomplement64$FUNC() { return _bittestandcomplement64$FUNC_; }

    static final MethodHandle _bittestandcomplement64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandcomplement64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _bittestandcomplement64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandcomplement64$MH() { return _bittestandcomplement64$MH_; }

    static final FunctionDescriptor _bittestandset64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandset64$FUNC() { return _bittestandset64$FUNC_; }

    static final MethodHandle _bittestandset64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandset64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _bittestandset64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandset64$MH() { return _bittestandset64$MH_; }

    static final FunctionDescriptor _bittestandreset64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _bittestandreset64$FUNC() { return _bittestandreset64$FUNC_; }

    static final MethodHandle _bittestandreset64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_bittestandreset64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _bittestandreset64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _bittestandreset64$MH() { return _bittestandreset64$MH_; }

    static final FunctionDescriptor _interlockedbittestandset64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _interlockedbittestandset64$FUNC() { return _interlockedbittestandset64$FUNC_; }

    static final MethodHandle _interlockedbittestandset64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_interlockedbittestandset64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _interlockedbittestandset64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _interlockedbittestandset64$MH() { return _interlockedbittestandset64$MH_; }

    static final FunctionDescriptor _interlockedbittestandreset64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _interlockedbittestandreset64$FUNC() { return _interlockedbittestandreset64$FUNC_; }

    static final MethodHandle _interlockedbittestandreset64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_interlockedbittestandreset64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _interlockedbittestandreset64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _interlockedbittestandreset64$MH() { return _interlockedbittestandreset64$MH_; }

    static final FunctionDescriptor _BitScanForward$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _BitScanForward$FUNC() { return _BitScanForward$FUNC_; }

    static final MethodHandle _BitScanForward$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_BitScanForward",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _BitScanForward$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _BitScanForward$MH() { return _BitScanForward$MH_; }

    static final FunctionDescriptor _BitScanReverse$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _BitScanReverse$FUNC() { return _BitScanReverse$FUNC_; }

    static final MethodHandle _BitScanReverse$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_BitScanReverse",
        "(Ljdk/incubator/foreign/MemoryAddress;I)B",
        _BitScanReverse$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _BitScanReverse$MH() { return _BitScanReverse$MH_; }

    static final FunctionDescriptor _BitScanForward64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _BitScanForward64$FUNC() { return _BitScanForward64$FUNC_; }

    static final MethodHandle _BitScanForward64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_BitScanForward64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _BitScanForward64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _BitScanForward64$MH() { return _BitScanForward64$MH_; }

    static final FunctionDescriptor _BitScanReverse64$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _BitScanReverse64$FUNC() { return _BitScanReverse64$FUNC_; }

    static final MethodHandle _BitScanReverse64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_BitScanReverse64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        _BitScanReverse64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _BitScanReverse64$MH() { return _BitScanReverse64$MH_; }

    static final FunctionDescriptor _InterlockedIncrement16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedIncrement16$FUNC() { return _InterlockedIncrement16$FUNC_; }

    static final MethodHandle _InterlockedIncrement16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedIncrement16",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        _InterlockedIncrement16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedIncrement16$MH() { return _InterlockedIncrement16$MH_; }

    static final FunctionDescriptor _InterlockedDecrement16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedDecrement16$FUNC() { return _InterlockedDecrement16$FUNC_; }

    static final MethodHandle _InterlockedDecrement16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedDecrement16",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        _InterlockedDecrement16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedDecrement16$MH() { return _InterlockedDecrement16$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchange16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_SHORT,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchange16$FUNC() { return _InterlockedCompareExchange16$FUNC_; }

    static final MethodHandle _InterlockedCompareExchange16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchange16",
        "(Ljdk/incubator/foreign/MemoryAddress;SS)S",
        _InterlockedCompareExchange16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchange16$MH() { return _InterlockedCompareExchange16$MH_; }

    static final FunctionDescriptor _InterlockedAnd$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedAnd$FUNC() { return _InterlockedAnd$FUNC_; }

    static final MethodHandle _InterlockedAnd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedAnd",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedAnd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedAnd$MH() { return _InterlockedAnd$MH_; }

    static final FunctionDescriptor _InterlockedOr$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedOr$FUNC() { return _InterlockedOr$FUNC_; }

    static final MethodHandle _InterlockedOr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedOr",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedOr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedOr$MH() { return _InterlockedOr$MH_; }

    static final FunctionDescriptor _InterlockedXor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedXor$FUNC() { return _InterlockedXor$FUNC_; }

    static final MethodHandle _InterlockedXor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedXor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedXor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedXor$MH() { return _InterlockedXor$MH_; }

    static final FunctionDescriptor _InterlockedAnd64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedAnd64$FUNC() { return _InterlockedAnd64$FUNC_; }

    static final MethodHandle _InterlockedAnd64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedAnd64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedAnd64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedAnd64$MH() { return _InterlockedAnd64$MH_; }

    static final FunctionDescriptor _InterlockedOr64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedOr64$FUNC() { return _InterlockedOr64$FUNC_; }

    static final MethodHandle _InterlockedOr64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedOr64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedOr64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedOr64$MH() { return _InterlockedOr64$MH_; }

    static final FunctionDescriptor _InterlockedXor64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedXor64$FUNC() { return _InterlockedXor64$FUNC_; }

    static final MethodHandle _InterlockedXor64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedXor64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedXor64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedXor64$MH() { return _InterlockedXor64$MH_; }

    static final FunctionDescriptor _InterlockedIncrement$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedIncrement$FUNC() { return _InterlockedIncrement$FUNC_; }

    static final MethodHandle _InterlockedIncrement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedIncrement",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        _InterlockedIncrement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedIncrement$MH() { return _InterlockedIncrement$MH_; }

    static final FunctionDescriptor _InterlockedDecrement$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedDecrement$FUNC() { return _InterlockedDecrement$FUNC_; }

    static final MethodHandle _InterlockedDecrement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedDecrement",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        _InterlockedDecrement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedDecrement$MH() { return _InterlockedDecrement$MH_; }

    static final FunctionDescriptor _InterlockedExchange$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchange$FUNC() { return _InterlockedExchange$FUNC_; }

    static final MethodHandle _InterlockedExchange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchange",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedExchange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchange$MH() { return _InterlockedExchange$MH_; }

    static final FunctionDescriptor _InterlockedExchangeAdd$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchangeAdd$FUNC() { return _InterlockedExchangeAdd$FUNC_; }

    static final MethodHandle _InterlockedExchangeAdd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchangeAdd",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InterlockedExchangeAdd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchangeAdd$MH() { return _InterlockedExchangeAdd$MH_; }

    static final FunctionDescriptor _InlineInterlockedAdd$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InlineInterlockedAdd$FUNC() { return _InlineInterlockedAdd$FUNC_; }

    static final MethodHandle _InlineInterlockedAdd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InlineInterlockedAdd",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        _InlineInterlockedAdd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InlineInterlockedAdd$MH() { return _InlineInterlockedAdd$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchange$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchange$FUNC() { return _InterlockedCompareExchange$FUNC_; }

    static final MethodHandle _InterlockedCompareExchange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchange",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        _InterlockedCompareExchange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchange$MH() { return _InterlockedCompareExchange$MH_; }

    static final FunctionDescriptor _InterlockedIncrement64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedIncrement64$FUNC() { return _InterlockedIncrement64$FUNC_; }

    static final MethodHandle _InterlockedIncrement64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedIncrement64",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        _InterlockedIncrement64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedIncrement64$MH() { return _InterlockedIncrement64$MH_; }

    static final FunctionDescriptor _InterlockedDecrement64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedDecrement64$FUNC() { return _InterlockedDecrement64$FUNC_; }

    static final MethodHandle _InterlockedDecrement64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedDecrement64",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        _InterlockedDecrement64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedDecrement64$MH() { return _InterlockedDecrement64$MH_; }

    static final FunctionDescriptor _InterlockedExchange64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchange64$FUNC() { return _InterlockedExchange64$FUNC_; }

    static final MethodHandle _InterlockedExchange64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchange64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedExchange64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchange64$MH() { return _InterlockedExchange64$MH_; }

    static final FunctionDescriptor _InterlockedExchangeAdd64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchangeAdd64$FUNC() { return _InterlockedExchangeAdd64$FUNC_; }

    static final MethodHandle _InterlockedExchangeAdd64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchangeAdd64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InterlockedExchangeAdd64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchangeAdd64$MH() { return _InterlockedExchangeAdd64$MH_; }

    static final FunctionDescriptor _InlineInterlockedAdd64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InlineInterlockedAdd64$FUNC() { return _InlineInterlockedAdd64$FUNC_; }

    static final MethodHandle _InlineInterlockedAdd64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InlineInterlockedAdd64",
        "(Ljdk/incubator/foreign/MemoryAddress;J)J",
        _InlineInterlockedAdd64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InlineInterlockedAdd64$MH() { return _InlineInterlockedAdd64$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchange64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchange64$FUNC() { return _InterlockedCompareExchange64$FUNC_; }

    static final MethodHandle _InterlockedCompareExchange64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchange64",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)J",
        _InterlockedCompareExchange64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchange64$MH() { return _InterlockedCompareExchange64$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchange128$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchange128$FUNC() { return _InterlockedCompareExchange128$FUNC_; }

    static final MethodHandle _InterlockedCompareExchange128$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchange128",
        "(Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)B",
        _InterlockedCompareExchange128$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchange128$MH() { return _InterlockedCompareExchange128$MH_; }

    static final FunctionDescriptor _InterlockedCompareExchangePointer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedCompareExchangePointer$FUNC() { return _InterlockedCompareExchangePointer$FUNC_; }

    static final MethodHandle _InterlockedCompareExchangePointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedCompareExchangePointer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _InterlockedCompareExchangePointer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedCompareExchangePointer$MH() { return _InterlockedCompareExchangePointer$MH_; }

    static final FunctionDescriptor _InterlockedExchangePointer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchangePointer$FUNC() { return _InterlockedExchangePointer$FUNC_; }

    static final MethodHandle _InterlockedExchangePointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchangePointer",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        _InterlockedExchangePointer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchangePointer$MH() { return _InterlockedExchangePointer$MH_; }

    static final FunctionDescriptor _InterlockedExchange8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchange8$FUNC() { return _InterlockedExchange8$FUNC_; }

    static final MethodHandle _InterlockedExchange8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchange8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)B",
        _InterlockedExchange8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchange8$MH() { return _InterlockedExchange8$MH_; }

    static final FunctionDescriptor _InterlockedExchange16$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchange16$FUNC() { return _InterlockedExchange16$FUNC_; }

    static final MethodHandle _InterlockedExchange16$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchange16",
        "(Ljdk/incubator/foreign/MemoryAddress;S)S",
        _InterlockedExchange16$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchange16$MH() { return _InterlockedExchange16$MH_; }

    static final FunctionDescriptor _InterlockedExchangeAdd8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedExchangeAdd8$FUNC() { return _InterlockedExchangeAdd8$FUNC_; }

    static final MethodHandle _InterlockedExchangeAdd8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedExchangeAdd8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)B",
        _InterlockedExchangeAdd8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedExchangeAdd8$MH() { return _InterlockedExchangeAdd8$MH_; }

    static final FunctionDescriptor _InterlockedAnd8$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor _InterlockedAnd8$FUNC() { return _InterlockedAnd8$FUNC_; }

    static final MethodHandle _InterlockedAnd8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_InterlockedAnd8",
        "(Ljdk/incubator/foreign/MemoryAddress;B)B",
        _InterlockedAnd8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _InterlockedAnd8$MH() { return _InterlockedAnd8$MH_; }

}

