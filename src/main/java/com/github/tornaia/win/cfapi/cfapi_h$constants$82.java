// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$82 extends cfapi_h$constants$81 {

    /* package-private */ cfapi_h$constants$82() {}
    static final MemoryLayout ITypeInfoVtbl$GetTypeComp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetTypeComp$LAYOUT() { return ITypeInfoVtbl$GetTypeComp$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetTypeComp$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeComp")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetTypeComp$VH() { return ITypeInfoVtbl$GetTypeComp$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetFuncDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetFuncDesc$LAYOUT() { return ITypeInfoVtbl$GetFuncDesc$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetFuncDesc$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFuncDesc")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetFuncDesc$VH() { return ITypeInfoVtbl$GetFuncDesc$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetVarDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetVarDesc$LAYOUT() { return ITypeInfoVtbl$GetVarDesc$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetVarDesc$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetVarDesc")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetVarDesc$VH() { return ITypeInfoVtbl$GetVarDesc$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetNames$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetNames$LAYOUT() { return ITypeInfoVtbl$GetNames$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetNames$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetNames")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetNames$VH() { return ITypeInfoVtbl$GetNames$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetRefTypeOfImplType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetRefTypeOfImplType$LAYOUT() { return ITypeInfoVtbl$GetRefTypeOfImplType$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetRefTypeOfImplType$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRefTypeOfImplType")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetRefTypeOfImplType$VH() { return ITypeInfoVtbl$GetRefTypeOfImplType$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetImplTypeFlags$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetImplTypeFlags$LAYOUT() { return ITypeInfoVtbl$GetImplTypeFlags$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetImplTypeFlags$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetImplTypeFlags")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetImplTypeFlags$VH() { return ITypeInfoVtbl$GetImplTypeFlags$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetIDsOfNames$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetIDsOfNames$LAYOUT() { return ITypeInfoVtbl$GetIDsOfNames$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetIDsOfNames$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIDsOfNames")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetIDsOfNames$VH() { return ITypeInfoVtbl$GetIDsOfNames$VH_; }

    static final MemoryLayout ITypeInfoVtbl$Invoke$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$Invoke$LAYOUT() { return ITypeInfoVtbl$Invoke$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$Invoke$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$Invoke$VH() { return ITypeInfoVtbl$Invoke$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetDocumentation$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetDocumentation$LAYOUT() { return ITypeInfoVtbl$GetDocumentation$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetDocumentation$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetDocumentation$VH() { return ITypeInfoVtbl$GetDocumentation$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetDllEntry$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetDllEntry$LAYOUT() { return ITypeInfoVtbl$GetDllEntry$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetDllEntry$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDllEntry")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetDllEntry$VH() { return ITypeInfoVtbl$GetDllEntry$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetRefTypeInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetRefTypeInfo$LAYOUT() { return ITypeInfoVtbl$GetRefTypeInfo$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetRefTypeInfo$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRefTypeInfo")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetRefTypeInfo$VH() { return ITypeInfoVtbl$GetRefTypeInfo$VH_; }

    static final MemoryLayout ITypeInfoVtbl$AddressOfMember$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$AddressOfMember$LAYOUT() { return ITypeInfoVtbl$AddressOfMember$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$AddressOfMember$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddressOfMember")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$AddressOfMember$VH() { return ITypeInfoVtbl$AddressOfMember$VH_; }

    static final MemoryLayout ITypeInfoVtbl$CreateInstance$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$CreateInstance$LAYOUT() { return ITypeInfoVtbl$CreateInstance$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$CreateInstance$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateInstance")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$CreateInstance$VH() { return ITypeInfoVtbl$CreateInstance$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetMops$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetMops$LAYOUT() { return ITypeInfoVtbl$GetMops$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetMops$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetMops")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetMops$VH() { return ITypeInfoVtbl$GetMops$VH_; }

    static final MemoryLayout ITypeInfoVtbl$GetContainingTypeLib$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$GetContainingTypeLib$LAYOUT() { return ITypeInfoVtbl$GetContainingTypeLib$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$GetContainingTypeLib$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetContainingTypeLib")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$GetContainingTypeLib$VH() { return ITypeInfoVtbl$GetContainingTypeLib$VH_; }

    static final MemoryLayout ITypeInfoVtbl$ReleaseTypeAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$ReleaseTypeAttr$LAYOUT() { return ITypeInfoVtbl$ReleaseTypeAttr$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$ReleaseTypeAttr$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseTypeAttr")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$ReleaseTypeAttr$VH() { return ITypeInfoVtbl$ReleaseTypeAttr$VH_; }

    static final MemoryLayout ITypeInfoVtbl$ReleaseFuncDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$ReleaseFuncDesc$LAYOUT() { return ITypeInfoVtbl$ReleaseFuncDesc$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$ReleaseFuncDesc$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseFuncDesc")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$ReleaseFuncDesc$VH() { return ITypeInfoVtbl$ReleaseFuncDesc$VH_; }

    static final MemoryLayout ITypeInfoVtbl$ReleaseVarDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfoVtbl$ReleaseVarDesc$LAYOUT() { return ITypeInfoVtbl$ReleaseVarDesc$LAYOUT_; }

    static final VarHandle ITypeInfoVtbl$ReleaseVarDesc$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseVarDesc")));
    static final java.lang.invoke.VarHandle ITypeInfoVtbl$ReleaseVarDesc$VH() { return ITypeInfoVtbl$ReleaseVarDesc$VH_; }

    static final MemoryLayout ITypeInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ITypeInfo");
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo$struct$LAYOUT() { return ITypeInfo$struct$LAYOUT_; }

    static final MemoryLayout ITypeInfo$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo$lpVtbl$LAYOUT() { return ITypeInfo$lpVtbl$LAYOUT_; }

    static final VarHandle ITypeInfo$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ITypeInfo$lpVtbl$VH() { return ITypeInfo$lpVtbl$VH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetTypeAttr_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetTypeAttr_Proxy$FUNC() { return ITypeInfo_RemoteGetTypeAttr_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetTypeAttr_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetTypeAttr_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_RemoteGetTypeAttr_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetTypeAttr_Proxy$MH() { return ITypeInfo_RemoteGetTypeAttr_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetTypeAttr_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetTypeAttr_Stub$FUNC() { return ITypeInfo_RemoteGetTypeAttr_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetTypeAttr_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetTypeAttr_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_RemoteGetTypeAttr_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetTypeAttr_Stub$MH() { return ITypeInfo_RemoteGetTypeAttr_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetFuncDesc_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetFuncDesc_Proxy$FUNC() { return ITypeInfo_RemoteGetFuncDesc_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetFuncDesc_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetFuncDesc_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_RemoteGetFuncDesc_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetFuncDesc_Proxy$MH() { return ITypeInfo_RemoteGetFuncDesc_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetFuncDesc_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetFuncDesc_Stub$FUNC() { return ITypeInfo_RemoteGetFuncDesc_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetFuncDesc_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetFuncDesc_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_RemoteGetFuncDesc_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetFuncDesc_Stub$MH() { return ITypeInfo_RemoteGetFuncDesc_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetVarDesc_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetVarDesc_Proxy$FUNC() { return ITypeInfo_RemoteGetVarDesc_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetVarDesc_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetVarDesc_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_RemoteGetVarDesc_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetVarDesc_Proxy$MH() { return ITypeInfo_RemoteGetVarDesc_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetVarDesc_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetVarDesc_Stub$FUNC() { return ITypeInfo_RemoteGetVarDesc_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetVarDesc_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetVarDesc_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_RemoteGetVarDesc_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetVarDesc_Stub$MH() { return ITypeInfo_RemoteGetVarDesc_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetNames_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetNames_Proxy$FUNC() { return ITypeInfo_RemoteGetNames_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetNames_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetNames_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_RemoteGetNames_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetNames_Proxy$MH() { return ITypeInfo_RemoteGetNames_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetNames_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetNames_Stub$FUNC() { return ITypeInfo_RemoteGetNames_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetNames_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetNames_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_RemoteGetNames_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetNames_Stub$MH() { return ITypeInfo_RemoteGetNames_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalGetIDsOfNames_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalGetIDsOfNames_Proxy$FUNC() { return ITypeInfo_LocalGetIDsOfNames_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_LocalGetIDsOfNames_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalGetIDsOfNames_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_LocalGetIDsOfNames_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalGetIDsOfNames_Proxy$MH() { return ITypeInfo_LocalGetIDsOfNames_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalGetIDsOfNames_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalGetIDsOfNames_Stub$FUNC() { return ITypeInfo_LocalGetIDsOfNames_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_LocalGetIDsOfNames_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalGetIDsOfNames_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_LocalGetIDsOfNames_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalGetIDsOfNames_Stub$MH() { return ITypeInfo_LocalGetIDsOfNames_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalInvoke_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalInvoke_Proxy$FUNC() { return ITypeInfo_LocalInvoke_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_LocalInvoke_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalInvoke_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_LocalInvoke_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalInvoke_Proxy$MH() { return ITypeInfo_LocalInvoke_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalInvoke_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalInvoke_Stub$FUNC() { return ITypeInfo_LocalInvoke_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_LocalInvoke_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalInvoke_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_LocalInvoke_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalInvoke_Stub$MH() { return ITypeInfo_LocalInvoke_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetDocumentation_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetDocumentation_Proxy$FUNC() { return ITypeInfo_RemoteGetDocumentation_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetDocumentation_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetDocumentation_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_RemoteGetDocumentation_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetDocumentation_Proxy$MH() { return ITypeInfo_RemoteGetDocumentation_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetDocumentation_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetDocumentation_Stub$FUNC() { return ITypeInfo_RemoteGetDocumentation_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetDocumentation_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetDocumentation_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_RemoteGetDocumentation_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetDocumentation_Stub$MH() { return ITypeInfo_RemoteGetDocumentation_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetDllEntry_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetDllEntry_Proxy$FUNC() { return ITypeInfo_RemoteGetDllEntry_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetDllEntry_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetDllEntry_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_RemoteGetDllEntry_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetDllEntry_Proxy$MH() { return ITypeInfo_RemoteGetDllEntry_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetDllEntry_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetDllEntry_Stub$FUNC() { return ITypeInfo_RemoteGetDllEntry_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetDllEntry_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetDllEntry_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_RemoteGetDllEntry_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetDllEntry_Stub$MH() { return ITypeInfo_RemoteGetDllEntry_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalAddressOfMember_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalAddressOfMember_Proxy$FUNC() { return ITypeInfo_LocalAddressOfMember_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_LocalAddressOfMember_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalAddressOfMember_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_LocalAddressOfMember_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalAddressOfMember_Proxy$MH() { return ITypeInfo_LocalAddressOfMember_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalAddressOfMember_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalAddressOfMember_Stub$FUNC() { return ITypeInfo_LocalAddressOfMember_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_LocalAddressOfMember_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalAddressOfMember_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_LocalAddressOfMember_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalAddressOfMember_Stub$MH() { return ITypeInfo_LocalAddressOfMember_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteCreateInstance_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteCreateInstance_Proxy$FUNC() { return ITypeInfo_RemoteCreateInstance_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteCreateInstance_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteCreateInstance_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_RemoteCreateInstance_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteCreateInstance_Proxy$MH() { return ITypeInfo_RemoteCreateInstance_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteCreateInstance_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteCreateInstance_Stub$FUNC() { return ITypeInfo_RemoteCreateInstance_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteCreateInstance_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteCreateInstance_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_RemoteCreateInstance_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteCreateInstance_Stub$MH() { return ITypeInfo_RemoteCreateInstance_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetContainingTypeLib_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetContainingTypeLib_Proxy$FUNC() { return ITypeInfo_RemoteGetContainingTypeLib_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetContainingTypeLib_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetContainingTypeLib_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_RemoteGetContainingTypeLib_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetContainingTypeLib_Proxy$MH() { return ITypeInfo_RemoteGetContainingTypeLib_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_RemoteGetContainingTypeLib_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_RemoteGetContainingTypeLib_Stub$FUNC() { return ITypeInfo_RemoteGetContainingTypeLib_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_RemoteGetContainingTypeLib_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_RemoteGetContainingTypeLib_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_RemoteGetContainingTypeLib_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_RemoteGetContainingTypeLib_Stub$MH() { return ITypeInfo_RemoteGetContainingTypeLib_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalReleaseTypeAttr_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalReleaseTypeAttr_Proxy$FUNC() { return ITypeInfo_LocalReleaseTypeAttr_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_LocalReleaseTypeAttr_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalReleaseTypeAttr_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_LocalReleaseTypeAttr_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalReleaseTypeAttr_Proxy$MH() { return ITypeInfo_LocalReleaseTypeAttr_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalReleaseTypeAttr_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalReleaseTypeAttr_Stub$FUNC() { return ITypeInfo_LocalReleaseTypeAttr_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_LocalReleaseTypeAttr_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalReleaseTypeAttr_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_LocalReleaseTypeAttr_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalReleaseTypeAttr_Stub$MH() { return ITypeInfo_LocalReleaseTypeAttr_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalReleaseFuncDesc_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalReleaseFuncDesc_Proxy$FUNC() { return ITypeInfo_LocalReleaseFuncDesc_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_LocalReleaseFuncDesc_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalReleaseFuncDesc_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_LocalReleaseFuncDesc_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalReleaseFuncDesc_Proxy$MH() { return ITypeInfo_LocalReleaseFuncDesc_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalReleaseFuncDesc_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalReleaseFuncDesc_Stub$FUNC() { return ITypeInfo_LocalReleaseFuncDesc_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_LocalReleaseFuncDesc_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalReleaseFuncDesc_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_LocalReleaseFuncDesc_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalReleaseFuncDesc_Stub$MH() { return ITypeInfo_LocalReleaseFuncDesc_Stub$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalReleaseVarDesc_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalReleaseVarDesc_Proxy$FUNC() { return ITypeInfo_LocalReleaseVarDesc_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo_LocalReleaseVarDesc_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalReleaseVarDesc_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo_LocalReleaseVarDesc_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalReleaseVarDesc_Proxy$MH() { return ITypeInfo_LocalReleaseVarDesc_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo_LocalReleaseVarDesc_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo_LocalReleaseVarDesc_Stub$FUNC() { return ITypeInfo_LocalReleaseVarDesc_Stub$FUNC_; }

    static final MethodHandle ITypeInfo_LocalReleaseVarDesc_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo_LocalReleaseVarDesc_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo_LocalReleaseVarDesc_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo_LocalReleaseVarDesc_Stub$MH() { return ITypeInfo_LocalReleaseVarDesc_Stub$MH_; }

    static final MemoryLayout IID_ITypeInfo2$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ITypeInfo2$LAYOUT() { return IID_ITypeInfo2$LAYOUT_; }

    static final MemorySegment IID_ITypeInfo2$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ITypeInfo2", IID_ITypeInfo2$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ITypeInfo2$SEGMENT() { return IID_ITypeInfo2$SEGMENT_; }

    static final MemoryLayout ITypeInfo2Vtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeAttr"),
        C_POINTER.withName("GetTypeComp"),
        C_POINTER.withName("GetFuncDesc"),
        C_POINTER.withName("GetVarDesc"),
        C_POINTER.withName("GetNames"),
        C_POINTER.withName("GetRefTypeOfImplType"),
        C_POINTER.withName("GetImplTypeFlags"),
        C_POINTER.withName("GetIDsOfNames"),
        C_POINTER.withName("Invoke"),
        C_POINTER.withName("GetDocumentation"),
        C_POINTER.withName("GetDllEntry"),
        C_POINTER.withName("GetRefTypeInfo"),
        C_POINTER.withName("AddressOfMember"),
        C_POINTER.withName("CreateInstance"),
        C_POINTER.withName("GetMops"),
        C_POINTER.withName("GetContainingTypeLib"),
        C_POINTER.withName("ReleaseTypeAttr"),
        C_POINTER.withName("ReleaseFuncDesc"),
        C_POINTER.withName("ReleaseVarDesc"),
        C_POINTER.withName("GetTypeKind"),
        C_POINTER.withName("GetTypeFlags"),
        C_POINTER.withName("GetFuncIndexOfMemId"),
        C_POINTER.withName("GetVarIndexOfMemId"),
        C_POINTER.withName("GetCustData"),
        C_POINTER.withName("GetFuncCustData"),
        C_POINTER.withName("GetParamCustData"),
        C_POINTER.withName("GetVarCustData"),
        C_POINTER.withName("GetImplTypeCustData"),
        C_POINTER.withName("GetDocumentation2"),
        C_POINTER.withName("GetAllCustData"),
        C_POINTER.withName("GetAllFuncCustData"),
        C_POINTER.withName("GetAllParamCustData"),
        C_POINTER.withName("GetAllVarCustData"),
        C_POINTER.withName("GetAllImplTypeCustData")
    ).withName("ITypeInfo2Vtbl");
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$struct$LAYOUT() { return ITypeInfo2Vtbl$struct$LAYOUT_; }

    static final MemoryLayout ITypeInfo2Vtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$QueryInterface$LAYOUT() { return ITypeInfo2Vtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$QueryInterface$VH() { return ITypeInfo2Vtbl$QueryInterface$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$AddRef$LAYOUT() { return ITypeInfo2Vtbl$AddRef$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$AddRef$VH() { return ITypeInfo2Vtbl$AddRef$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$Release$LAYOUT() { return ITypeInfo2Vtbl$Release$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$Release$VH() { return ITypeInfo2Vtbl$Release$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetTypeAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetTypeAttr$LAYOUT() { return ITypeInfo2Vtbl$GetTypeAttr$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetTypeAttr$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeAttr")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetTypeAttr$VH() { return ITypeInfo2Vtbl$GetTypeAttr$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetTypeComp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetTypeComp$LAYOUT() { return ITypeInfo2Vtbl$GetTypeComp$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetTypeComp$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeComp")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetTypeComp$VH() { return ITypeInfo2Vtbl$GetTypeComp$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetFuncDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetFuncDesc$LAYOUT() { return ITypeInfo2Vtbl$GetFuncDesc$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetFuncDesc$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFuncDesc")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetFuncDesc$VH() { return ITypeInfo2Vtbl$GetFuncDesc$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetVarDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetVarDesc$LAYOUT() { return ITypeInfo2Vtbl$GetVarDesc$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetVarDesc$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetVarDesc")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetVarDesc$VH() { return ITypeInfo2Vtbl$GetVarDesc$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetNames$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetNames$LAYOUT() { return ITypeInfo2Vtbl$GetNames$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetNames$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetNames")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetNames$VH() { return ITypeInfo2Vtbl$GetNames$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetRefTypeOfImplType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetRefTypeOfImplType$LAYOUT() { return ITypeInfo2Vtbl$GetRefTypeOfImplType$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetRefTypeOfImplType$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRefTypeOfImplType")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetRefTypeOfImplType$VH() { return ITypeInfo2Vtbl$GetRefTypeOfImplType$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetImplTypeFlags$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetImplTypeFlags$LAYOUT() { return ITypeInfo2Vtbl$GetImplTypeFlags$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetImplTypeFlags$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetImplTypeFlags")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetImplTypeFlags$VH() { return ITypeInfo2Vtbl$GetImplTypeFlags$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetIDsOfNames$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetIDsOfNames$LAYOUT() { return ITypeInfo2Vtbl$GetIDsOfNames$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetIDsOfNames$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIDsOfNames")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetIDsOfNames$VH() { return ITypeInfo2Vtbl$GetIDsOfNames$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$Invoke$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$Invoke$LAYOUT() { return ITypeInfo2Vtbl$Invoke$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$Invoke$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Invoke")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$Invoke$VH() { return ITypeInfo2Vtbl$Invoke$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetDocumentation$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetDocumentation$LAYOUT() { return ITypeInfo2Vtbl$GetDocumentation$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetDocumentation$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetDocumentation$VH() { return ITypeInfo2Vtbl$GetDocumentation$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetDllEntry$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetDllEntry$LAYOUT() { return ITypeInfo2Vtbl$GetDllEntry$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetDllEntry$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDllEntry")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetDllEntry$VH() { return ITypeInfo2Vtbl$GetDllEntry$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetRefTypeInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetRefTypeInfo$LAYOUT() { return ITypeInfo2Vtbl$GetRefTypeInfo$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetRefTypeInfo$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRefTypeInfo")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetRefTypeInfo$VH() { return ITypeInfo2Vtbl$GetRefTypeInfo$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$AddressOfMember$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$AddressOfMember$LAYOUT() { return ITypeInfo2Vtbl$AddressOfMember$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$AddressOfMember$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddressOfMember")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$AddressOfMember$VH() { return ITypeInfo2Vtbl$AddressOfMember$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$CreateInstance$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$CreateInstance$LAYOUT() { return ITypeInfo2Vtbl$CreateInstance$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$CreateInstance$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateInstance")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$CreateInstance$VH() { return ITypeInfo2Vtbl$CreateInstance$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetMops$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetMops$LAYOUT() { return ITypeInfo2Vtbl$GetMops$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetMops$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetMops")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetMops$VH() { return ITypeInfo2Vtbl$GetMops$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetContainingTypeLib$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetContainingTypeLib$LAYOUT() { return ITypeInfo2Vtbl$GetContainingTypeLib$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetContainingTypeLib$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetContainingTypeLib")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetContainingTypeLib$VH() { return ITypeInfo2Vtbl$GetContainingTypeLib$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$ReleaseTypeAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$ReleaseTypeAttr$LAYOUT() { return ITypeInfo2Vtbl$ReleaseTypeAttr$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$ReleaseTypeAttr$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseTypeAttr")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$ReleaseTypeAttr$VH() { return ITypeInfo2Vtbl$ReleaseTypeAttr$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$ReleaseFuncDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$ReleaseFuncDesc$LAYOUT() { return ITypeInfo2Vtbl$ReleaseFuncDesc$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$ReleaseFuncDesc$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseFuncDesc")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$ReleaseFuncDesc$VH() { return ITypeInfo2Vtbl$ReleaseFuncDesc$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$ReleaseVarDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$ReleaseVarDesc$LAYOUT() { return ITypeInfo2Vtbl$ReleaseVarDesc$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$ReleaseVarDesc$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseVarDesc")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$ReleaseVarDesc$VH() { return ITypeInfo2Vtbl$ReleaseVarDesc$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetTypeKind$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetTypeKind$LAYOUT() { return ITypeInfo2Vtbl$GetTypeKind$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetTypeKind$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeKind")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetTypeKind$VH() { return ITypeInfo2Vtbl$GetTypeKind$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetTypeFlags$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetTypeFlags$LAYOUT() { return ITypeInfo2Vtbl$GetTypeFlags$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetTypeFlags$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeFlags")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetTypeFlags$VH() { return ITypeInfo2Vtbl$GetTypeFlags$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetFuncIndexOfMemId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetFuncIndexOfMemId$LAYOUT() { return ITypeInfo2Vtbl$GetFuncIndexOfMemId$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetFuncIndexOfMemId$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFuncIndexOfMemId")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetFuncIndexOfMemId$VH() { return ITypeInfo2Vtbl$GetFuncIndexOfMemId$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetVarIndexOfMemId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetVarIndexOfMemId$LAYOUT() { return ITypeInfo2Vtbl$GetVarIndexOfMemId$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetVarIndexOfMemId$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetVarIndexOfMemId")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetVarIndexOfMemId$VH() { return ITypeInfo2Vtbl$GetVarIndexOfMemId$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetCustData$LAYOUT() { return ITypeInfo2Vtbl$GetCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetCustData$VH() { return ITypeInfo2Vtbl$GetCustData$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetFuncCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetFuncCustData$LAYOUT() { return ITypeInfo2Vtbl$GetFuncCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetFuncCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFuncCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetFuncCustData$VH() { return ITypeInfo2Vtbl$GetFuncCustData$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetParamCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetParamCustData$LAYOUT() { return ITypeInfo2Vtbl$GetParamCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetParamCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetParamCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetParamCustData$VH() { return ITypeInfo2Vtbl$GetParamCustData$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetVarCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetVarCustData$LAYOUT() { return ITypeInfo2Vtbl$GetVarCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetVarCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetVarCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetVarCustData$VH() { return ITypeInfo2Vtbl$GetVarCustData$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetImplTypeCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetImplTypeCustData$LAYOUT() { return ITypeInfo2Vtbl$GetImplTypeCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetImplTypeCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetImplTypeCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetImplTypeCustData$VH() { return ITypeInfo2Vtbl$GetImplTypeCustData$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetDocumentation2$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetDocumentation2$LAYOUT() { return ITypeInfo2Vtbl$GetDocumentation2$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetDocumentation2$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation2")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetDocumentation2$VH() { return ITypeInfo2Vtbl$GetDocumentation2$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetAllCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetAllCustData$LAYOUT() { return ITypeInfo2Vtbl$GetAllCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetAllCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetAllCustData$VH() { return ITypeInfo2Vtbl$GetAllCustData$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetAllFuncCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetAllFuncCustData$LAYOUT() { return ITypeInfo2Vtbl$GetAllFuncCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetAllFuncCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllFuncCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetAllFuncCustData$VH() { return ITypeInfo2Vtbl$GetAllFuncCustData$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetAllParamCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetAllParamCustData$LAYOUT() { return ITypeInfo2Vtbl$GetAllParamCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetAllParamCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllParamCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetAllParamCustData$VH() { return ITypeInfo2Vtbl$GetAllParamCustData$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetAllVarCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetAllVarCustData$LAYOUT() { return ITypeInfo2Vtbl$GetAllVarCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetAllVarCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllVarCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetAllVarCustData$VH() { return ITypeInfo2Vtbl$GetAllVarCustData$VH_; }

    static final MemoryLayout ITypeInfo2Vtbl$GetAllImplTypeCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2Vtbl$GetAllImplTypeCustData$LAYOUT() { return ITypeInfo2Vtbl$GetAllImplTypeCustData$LAYOUT_; }

    static final VarHandle ITypeInfo2Vtbl$GetAllImplTypeCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllImplTypeCustData")));
    static final java.lang.invoke.VarHandle ITypeInfo2Vtbl$GetAllImplTypeCustData$VH() { return ITypeInfo2Vtbl$GetAllImplTypeCustData$VH_; }

    static final MemoryLayout ITypeInfo2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ITypeInfo2");
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2$struct$LAYOUT() { return ITypeInfo2$struct$LAYOUT_; }

    static final MemoryLayout ITypeInfo2$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeInfo2$lpVtbl$LAYOUT() { return ITypeInfo2$lpVtbl$LAYOUT_; }

    static final VarHandle ITypeInfo2$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ITypeInfo2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ITypeInfo2$lpVtbl$VH() { return ITypeInfo2$lpVtbl$VH_; }

    static final FunctionDescriptor ITypeInfo2_RemoteGetDocumentation2_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo2_RemoteGetDocumentation2_Proxy$FUNC() { return ITypeInfo2_RemoteGetDocumentation2_Proxy$FUNC_; }

    static final MethodHandle ITypeInfo2_RemoteGetDocumentation2_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo2_RemoteGetDocumentation2_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeInfo2_RemoteGetDocumentation2_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo2_RemoteGetDocumentation2_Proxy$MH() { return ITypeInfo2_RemoteGetDocumentation2_Proxy$MH_; }

    static final FunctionDescriptor ITypeInfo2_RemoteGetDocumentation2_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeInfo2_RemoteGetDocumentation2_Stub$FUNC() { return ITypeInfo2_RemoteGetDocumentation2_Stub$FUNC_; }

    static final MethodHandle ITypeInfo2_RemoteGetDocumentation2_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeInfo2_RemoteGetDocumentation2_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeInfo2_RemoteGetDocumentation2_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeInfo2_RemoteGetDocumentation2_Stub$MH() { return ITypeInfo2_RemoteGetDocumentation2_Stub$MH_; }

    static final MemoryLayout __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$VH() { return __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec", __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$VH() { return __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec", __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec$SEGMENT_; }

    static final int SYS_WIN16() { return (int)0L; }

    static final int SYS_WIN32() { return (int)1L; }

    static final int SYS_MAC() { return (int)2L; }

    static final int SYS_WIN64() { return (int)3L; }

    static final int LIBFLAG_FRESTRICTED() { return (int)1L; }

    static final int LIBFLAG_FCONTROL() { return (int)2L; }

    static final int LIBFLAG_FHIDDEN() { return (int)4L; }

    static final int LIBFLAG_FHASDISKIMAGE() { return (int)8L; }

    static final MemoryLayout tagTLIBATTR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("guid"),
        C_LONG.withName("lcid"),
        C_INT.withName("syskind"),
        C_SHORT.withName("wMajorVerNum"),
        C_SHORT.withName("wMinorVerNum"),
        C_SHORT.withName("wLibFlags"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("tagTLIBATTR");
    static final jdk.incubator.foreign.MemoryLayout tagTLIBATTR$struct$LAYOUT() { return tagTLIBATTR$struct$LAYOUT_; }

    static final MemoryLayout tagTLIBATTR$lcid$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTLIBATTR$lcid$LAYOUT() { return tagTLIBATTR$lcid$LAYOUT_; }

    static final VarHandle tagTLIBATTR$lcid$VH_ = tagTLIBATTR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lcid"));
    static final java.lang.invoke.VarHandle tagTLIBATTR$lcid$VH() { return tagTLIBATTR$lcid$VH_; }

    static final MemoryLayout tagTLIBATTR$syskind$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagTLIBATTR$syskind$LAYOUT() { return tagTLIBATTR$syskind$LAYOUT_; }

    static final VarHandle tagTLIBATTR$syskind$VH_ = tagTLIBATTR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("syskind"));
    static final java.lang.invoke.VarHandle tagTLIBATTR$syskind$VH() { return tagTLIBATTR$syskind$VH_; }

    static final MemoryLayout tagTLIBATTR$wMajorVerNum$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagTLIBATTR$wMajorVerNum$LAYOUT() { return tagTLIBATTR$wMajorVerNum$LAYOUT_; }

    static final VarHandle tagTLIBATTR$wMajorVerNum$VH_ = tagTLIBATTR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wMajorVerNum"));
    static final java.lang.invoke.VarHandle tagTLIBATTR$wMajorVerNum$VH() { return tagTLIBATTR$wMajorVerNum$VH_; }

    static final MemoryLayout tagTLIBATTR$wMinorVerNum$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagTLIBATTR$wMinorVerNum$LAYOUT() { return tagTLIBATTR$wMinorVerNum$LAYOUT_; }

    static final VarHandle tagTLIBATTR$wMinorVerNum$VH_ = tagTLIBATTR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wMinorVerNum"));
    static final java.lang.invoke.VarHandle tagTLIBATTR$wMinorVerNum$VH() { return tagTLIBATTR$wMinorVerNum$VH_; }

    static final MemoryLayout tagTLIBATTR$wLibFlags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagTLIBATTR$wLibFlags$LAYOUT() { return tagTLIBATTR$wLibFlags$LAYOUT_; }

    static final VarHandle tagTLIBATTR$wLibFlags$VH_ = tagTLIBATTR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wLibFlags"));
    static final java.lang.invoke.VarHandle tagTLIBATTR$wLibFlags$VH() { return tagTLIBATTR$wLibFlags$VH_; }

    static final MemoryLayout IID_ITypeLib$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ITypeLib$LAYOUT() { return IID_ITypeLib$LAYOUT_; }

    static final MemorySegment IID_ITypeLib$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ITypeLib", IID_ITypeLib$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ITypeLib$SEGMENT() { return IID_ITypeLib$SEGMENT_; }

    static final MemoryLayout ITypeLibVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeInfoCount"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetTypeInfoType"),
        C_POINTER.withName("GetTypeInfoOfGuid"),
        C_POINTER.withName("GetLibAttr"),
        C_POINTER.withName("GetTypeComp"),
        C_POINTER.withName("GetDocumentation"),
        C_POINTER.withName("IsName"),
        C_POINTER.withName("FindName"),
        C_POINTER.withName("ReleaseTLibAttr")
    ).withName("ITypeLibVtbl");
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$struct$LAYOUT() { return ITypeLibVtbl$struct$LAYOUT_; }

    static final MemoryLayout ITypeLibVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$QueryInterface$LAYOUT() { return ITypeLibVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$QueryInterface$VH() { return ITypeLibVtbl$QueryInterface$VH_; }

    static final MemoryLayout ITypeLibVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$AddRef$LAYOUT() { return ITypeLibVtbl$AddRef$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$AddRef$VH() { return ITypeLibVtbl$AddRef$VH_; }

    static final MemoryLayout ITypeLibVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$Release$LAYOUT() { return ITypeLibVtbl$Release$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$Release$VH() { return ITypeLibVtbl$Release$VH_; }

    static final MemoryLayout ITypeLibVtbl$GetTypeInfoCount$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$GetTypeInfoCount$LAYOUT() { return ITypeLibVtbl$GetTypeInfoCount$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$GetTypeInfoCount$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoCount")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$GetTypeInfoCount$VH() { return ITypeLibVtbl$GetTypeInfoCount$VH_; }

    static final MemoryLayout ITypeLibVtbl$GetTypeInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$GetTypeInfo$LAYOUT() { return ITypeLibVtbl$GetTypeInfo$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$GetTypeInfo$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$GetTypeInfo$VH() { return ITypeLibVtbl$GetTypeInfo$VH_; }

    static final MemoryLayout ITypeLibVtbl$GetTypeInfoType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$GetTypeInfoType$LAYOUT() { return ITypeLibVtbl$GetTypeInfoType$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$GetTypeInfoType$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoType")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$GetTypeInfoType$VH() { return ITypeLibVtbl$GetTypeInfoType$VH_; }

    static final MemoryLayout ITypeLibVtbl$GetTypeInfoOfGuid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$GetTypeInfoOfGuid$LAYOUT() { return ITypeLibVtbl$GetTypeInfoOfGuid$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$GetTypeInfoOfGuid$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoOfGuid")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$GetTypeInfoOfGuid$VH() { return ITypeLibVtbl$GetTypeInfoOfGuid$VH_; }

    static final MemoryLayout ITypeLibVtbl$GetLibAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$GetLibAttr$LAYOUT() { return ITypeLibVtbl$GetLibAttr$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$GetLibAttr$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetLibAttr")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$GetLibAttr$VH() { return ITypeLibVtbl$GetLibAttr$VH_; }

    static final MemoryLayout ITypeLibVtbl$GetTypeComp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$GetTypeComp$LAYOUT() { return ITypeLibVtbl$GetTypeComp$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$GetTypeComp$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeComp")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$GetTypeComp$VH() { return ITypeLibVtbl$GetTypeComp$VH_; }

    static final MemoryLayout ITypeLibVtbl$GetDocumentation$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$GetDocumentation$LAYOUT() { return ITypeLibVtbl$GetDocumentation$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$GetDocumentation$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$GetDocumentation$VH() { return ITypeLibVtbl$GetDocumentation$VH_; }

    static final MemoryLayout ITypeLibVtbl$IsName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$IsName$LAYOUT() { return ITypeLibVtbl$IsName$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$IsName$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsName")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$IsName$VH() { return ITypeLibVtbl$IsName$VH_; }

    static final MemoryLayout ITypeLibVtbl$FindName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$FindName$LAYOUT() { return ITypeLibVtbl$FindName$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$FindName$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FindName")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$FindName$VH() { return ITypeLibVtbl$FindName$VH_; }

    static final MemoryLayout ITypeLibVtbl$ReleaseTLibAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLibVtbl$ReleaseTLibAttr$LAYOUT() { return ITypeLibVtbl$ReleaseTLibAttr$LAYOUT_; }

    static final VarHandle ITypeLibVtbl$ReleaseTLibAttr$VH_ = MemoryHandles.asAddressVarHandle(ITypeLibVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseTLibAttr")));
    static final java.lang.invoke.VarHandle ITypeLibVtbl$ReleaseTLibAttr$VH() { return ITypeLibVtbl$ReleaseTLibAttr$VH_; }

    static final MemoryLayout ITypeLib$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ITypeLib");
    static final jdk.incubator.foreign.MemoryLayout ITypeLib$struct$LAYOUT() { return ITypeLib$struct$LAYOUT_; }

    static final MemoryLayout ITypeLib$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib$lpVtbl$LAYOUT() { return ITypeLib$lpVtbl$LAYOUT_; }

    static final VarHandle ITypeLib$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ITypeLib$lpVtbl$VH() { return ITypeLib$lpVtbl$VH_; }

    static final FunctionDescriptor ITypeLib_RemoteGetTypeInfoCount_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteGetTypeInfoCount_Proxy$FUNC() { return ITypeLib_RemoteGetTypeInfoCount_Proxy$FUNC_; }

    static final MethodHandle ITypeLib_RemoteGetTypeInfoCount_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteGetTypeInfoCount_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib_RemoteGetTypeInfoCount_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteGetTypeInfoCount_Proxy$MH() { return ITypeLib_RemoteGetTypeInfoCount_Proxy$MH_; }

    static final FunctionDescriptor ITypeLib_RemoteGetTypeInfoCount_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteGetTypeInfoCount_Stub$FUNC() { return ITypeLib_RemoteGetTypeInfoCount_Stub$FUNC_; }

    static final MethodHandle ITypeLib_RemoteGetTypeInfoCount_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteGetTypeInfoCount_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeLib_RemoteGetTypeInfoCount_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteGetTypeInfoCount_Stub$MH() { return ITypeLib_RemoteGetTypeInfoCount_Stub$MH_; }

    static final FunctionDescriptor ITypeLib_RemoteGetLibAttr_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteGetLibAttr_Proxy$FUNC() { return ITypeLib_RemoteGetLibAttr_Proxy$FUNC_; }

    static final MethodHandle ITypeLib_RemoteGetLibAttr_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteGetLibAttr_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib_RemoteGetLibAttr_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteGetLibAttr_Proxy$MH() { return ITypeLib_RemoteGetLibAttr_Proxy$MH_; }

    static final FunctionDescriptor ITypeLib_RemoteGetLibAttr_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteGetLibAttr_Stub$FUNC() { return ITypeLib_RemoteGetLibAttr_Stub$FUNC_; }

    static final MethodHandle ITypeLib_RemoteGetLibAttr_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteGetLibAttr_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeLib_RemoteGetLibAttr_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteGetLibAttr_Stub$MH() { return ITypeLib_RemoteGetLibAttr_Stub$MH_; }

    static final FunctionDescriptor ITypeLib_RemoteGetDocumentation_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteGetDocumentation_Proxy$FUNC() { return ITypeLib_RemoteGetDocumentation_Proxy$FUNC_; }

    static final MethodHandle ITypeLib_RemoteGetDocumentation_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteGetDocumentation_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib_RemoteGetDocumentation_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteGetDocumentation_Proxy$MH() { return ITypeLib_RemoteGetDocumentation_Proxy$MH_; }

    static final FunctionDescriptor ITypeLib_RemoteGetDocumentation_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteGetDocumentation_Stub$FUNC() { return ITypeLib_RemoteGetDocumentation_Stub$FUNC_; }

    static final MethodHandle ITypeLib_RemoteGetDocumentation_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteGetDocumentation_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeLib_RemoteGetDocumentation_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteGetDocumentation_Stub$MH() { return ITypeLib_RemoteGetDocumentation_Stub$MH_; }

    static final FunctionDescriptor ITypeLib_RemoteIsName_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteIsName_Proxy$FUNC() { return ITypeLib_RemoteIsName_Proxy$FUNC_; }

    static final MethodHandle ITypeLib_RemoteIsName_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteIsName_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib_RemoteIsName_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteIsName_Proxy$MH() { return ITypeLib_RemoteIsName_Proxy$MH_; }

    static final FunctionDescriptor ITypeLib_RemoteIsName_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteIsName_Stub$FUNC() { return ITypeLib_RemoteIsName_Stub$FUNC_; }

    static final MethodHandle ITypeLib_RemoteIsName_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteIsName_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeLib_RemoteIsName_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteIsName_Stub$MH() { return ITypeLib_RemoteIsName_Stub$MH_; }

    static final FunctionDescriptor ITypeLib_RemoteFindName_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteFindName_Proxy$FUNC() { return ITypeLib_RemoteFindName_Proxy$FUNC_; }

    static final MethodHandle ITypeLib_RemoteFindName_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteFindName_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib_RemoteFindName_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteFindName_Proxy$MH() { return ITypeLib_RemoteFindName_Proxy$MH_; }

    static final FunctionDescriptor ITypeLib_RemoteFindName_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_RemoteFindName_Stub$FUNC() { return ITypeLib_RemoteFindName_Stub$FUNC_; }

    static final MethodHandle ITypeLib_RemoteFindName_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_RemoteFindName_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeLib_RemoteFindName_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_RemoteFindName_Stub$MH() { return ITypeLib_RemoteFindName_Stub$MH_; }

    static final FunctionDescriptor ITypeLib_LocalReleaseTLibAttr_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_LocalReleaseTLibAttr_Proxy$FUNC() { return ITypeLib_LocalReleaseTLibAttr_Proxy$FUNC_; }

    static final MethodHandle ITypeLib_LocalReleaseTLibAttr_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_LocalReleaseTLibAttr_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib_LocalReleaseTLibAttr_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_LocalReleaseTLibAttr_Proxy$MH() { return ITypeLib_LocalReleaseTLibAttr_Proxy$MH_; }

    static final FunctionDescriptor ITypeLib_LocalReleaseTLibAttr_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib_LocalReleaseTLibAttr_Stub$FUNC() { return ITypeLib_LocalReleaseTLibAttr_Stub$FUNC_; }

    static final MethodHandle ITypeLib_LocalReleaseTLibAttr_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib_LocalReleaseTLibAttr_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeLib_LocalReleaseTLibAttr_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib_LocalReleaseTLibAttr_Stub$MH() { return ITypeLib_LocalReleaseTLibAttr_Stub$MH_; }

    static final MemoryLayout __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$VH() { return __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec", __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$VH() { return __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec", __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_ITypeLib2$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ITypeLib2$LAYOUT() { return IID_ITypeLib2$LAYOUT_; }

    static final MemorySegment IID_ITypeLib2$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ITypeLib2", IID_ITypeLib2$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ITypeLib2$SEGMENT() { return IID_ITypeLib2$SEGMENT_; }

    static final MemoryLayout ITypeLib2Vtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetTypeInfoCount"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetTypeInfoType"),
        C_POINTER.withName("GetTypeInfoOfGuid"),
        C_POINTER.withName("GetLibAttr"),
        C_POINTER.withName("GetTypeComp"),
        C_POINTER.withName("GetDocumentation"),
        C_POINTER.withName("IsName"),
        C_POINTER.withName("FindName"),
        C_POINTER.withName("ReleaseTLibAttr"),
        C_POINTER.withName("GetCustData"),
        C_POINTER.withName("GetLibStatistics"),
        C_POINTER.withName("GetDocumentation2"),
        C_POINTER.withName("GetAllCustData")
    ).withName("ITypeLib2Vtbl");
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$struct$LAYOUT() { return ITypeLib2Vtbl$struct$LAYOUT_; }

    static final MemoryLayout ITypeLib2Vtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$QueryInterface$LAYOUT() { return ITypeLib2Vtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$QueryInterface$VH() { return ITypeLib2Vtbl$QueryInterface$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$AddRef$LAYOUT() { return ITypeLib2Vtbl$AddRef$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$AddRef$VH() { return ITypeLib2Vtbl$AddRef$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$Release$LAYOUT() { return ITypeLib2Vtbl$Release$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$Release$VH() { return ITypeLib2Vtbl$Release$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetTypeInfoCount$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetTypeInfoCount$LAYOUT() { return ITypeLib2Vtbl$GetTypeInfoCount$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetTypeInfoCount$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoCount")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetTypeInfoCount$VH() { return ITypeLib2Vtbl$GetTypeInfoCount$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetTypeInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetTypeInfo$LAYOUT() { return ITypeLib2Vtbl$GetTypeInfo$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetTypeInfo$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetTypeInfo$VH() { return ITypeLib2Vtbl$GetTypeInfo$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetTypeInfoType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetTypeInfoType$LAYOUT() { return ITypeLib2Vtbl$GetTypeInfoType$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetTypeInfoType$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoType")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetTypeInfoType$VH() { return ITypeLib2Vtbl$GetTypeInfoType$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetTypeInfoOfGuid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetTypeInfoOfGuid$LAYOUT() { return ITypeLib2Vtbl$GetTypeInfoOfGuid$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetTypeInfoOfGuid$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfoOfGuid")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetTypeInfoOfGuid$VH() { return ITypeLib2Vtbl$GetTypeInfoOfGuid$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetLibAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetLibAttr$LAYOUT() { return ITypeLib2Vtbl$GetLibAttr$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetLibAttr$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetLibAttr")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetLibAttr$VH() { return ITypeLib2Vtbl$GetLibAttr$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetTypeComp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetTypeComp$LAYOUT() { return ITypeLib2Vtbl$GetTypeComp$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetTypeComp$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeComp")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetTypeComp$VH() { return ITypeLib2Vtbl$GetTypeComp$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetDocumentation$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetDocumentation$LAYOUT() { return ITypeLib2Vtbl$GetDocumentation$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetDocumentation$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetDocumentation$VH() { return ITypeLib2Vtbl$GetDocumentation$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$IsName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$IsName$LAYOUT() { return ITypeLib2Vtbl$IsName$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$IsName$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsName")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$IsName$VH() { return ITypeLib2Vtbl$IsName$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$FindName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$FindName$LAYOUT() { return ITypeLib2Vtbl$FindName$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$FindName$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FindName")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$FindName$VH() { return ITypeLib2Vtbl$FindName$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$ReleaseTLibAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$ReleaseTLibAttr$LAYOUT() { return ITypeLib2Vtbl$ReleaseTLibAttr$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$ReleaseTLibAttr$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseTLibAttr")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$ReleaseTLibAttr$VH() { return ITypeLib2Vtbl$ReleaseTLibAttr$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetCustData$LAYOUT() { return ITypeLib2Vtbl$GetCustData$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCustData")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetCustData$VH() { return ITypeLib2Vtbl$GetCustData$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetLibStatistics$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetLibStatistics$LAYOUT() { return ITypeLib2Vtbl$GetLibStatistics$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetLibStatistics$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetLibStatistics")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetLibStatistics$VH() { return ITypeLib2Vtbl$GetLibStatistics$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetDocumentation2$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetDocumentation2$LAYOUT() { return ITypeLib2Vtbl$GetDocumentation2$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetDocumentation2$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDocumentation2")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetDocumentation2$VH() { return ITypeLib2Vtbl$GetDocumentation2$VH_; }

    static final MemoryLayout ITypeLib2Vtbl$GetAllCustData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2Vtbl$GetAllCustData$LAYOUT() { return ITypeLib2Vtbl$GetAllCustData$LAYOUT_; }

    static final VarHandle ITypeLib2Vtbl$GetAllCustData$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetAllCustData")));
    static final java.lang.invoke.VarHandle ITypeLib2Vtbl$GetAllCustData$VH() { return ITypeLib2Vtbl$GetAllCustData$VH_; }

    static final MemoryLayout ITypeLib2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ITypeLib2");
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2$struct$LAYOUT() { return ITypeLib2$struct$LAYOUT_; }

    static final MemoryLayout ITypeLib2$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeLib2$lpVtbl$LAYOUT() { return ITypeLib2$lpVtbl$LAYOUT_; }

    static final VarHandle ITypeLib2$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ITypeLib2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ITypeLib2$lpVtbl$VH() { return ITypeLib2$lpVtbl$VH_; }

    static final FunctionDescriptor ITypeLib2_RemoteGetLibStatistics_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib2_RemoteGetLibStatistics_Proxy$FUNC() { return ITypeLib2_RemoteGetLibStatistics_Proxy$FUNC_; }

    static final MethodHandle ITypeLib2_RemoteGetLibStatistics_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib2_RemoteGetLibStatistics_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2_RemoteGetLibStatistics_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib2_RemoteGetLibStatistics_Proxy$MH() { return ITypeLib2_RemoteGetLibStatistics_Proxy$MH_; }

    static final FunctionDescriptor ITypeLib2_RemoteGetLibStatistics_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib2_RemoteGetLibStatistics_Stub$FUNC() { return ITypeLib2_RemoteGetLibStatistics_Stub$FUNC_; }

    static final MethodHandle ITypeLib2_RemoteGetLibStatistics_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib2_RemoteGetLibStatistics_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeLib2_RemoteGetLibStatistics_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib2_RemoteGetLibStatistics_Stub$MH() { return ITypeLib2_RemoteGetLibStatistics_Stub$MH_; }

    static final FunctionDescriptor ITypeLib2_RemoteGetDocumentation2_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib2_RemoteGetDocumentation2_Proxy$FUNC() { return ITypeLib2_RemoteGetDocumentation2_Proxy$FUNC_; }

    static final MethodHandle ITypeLib2_RemoteGetDocumentation2_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib2_RemoteGetDocumentation2_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ITypeLib2_RemoteGetDocumentation2_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib2_RemoteGetDocumentation2_Proxy$MH() { return ITypeLib2_RemoteGetDocumentation2_Proxy$MH_; }

    static final FunctionDescriptor ITypeLib2_RemoteGetDocumentation2_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ITypeLib2_RemoteGetDocumentation2_Stub$FUNC() { return ITypeLib2_RemoteGetDocumentation2_Stub$FUNC_; }

    static final MethodHandle ITypeLib2_RemoteGetDocumentation2_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ITypeLib2_RemoteGetDocumentation2_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        ITypeLib2_RemoteGetDocumentation2_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ITypeLib2_RemoteGetDocumentation2_Stub$MH() { return ITypeLib2_RemoteGetDocumentation2_Stub$MH_; }

    static final int CHANGEKIND_ADDMEMBER() { return (int)0L; }

    static final int CHANGEKIND_DELETEMEMBER() { return (int)1L; }

    static final int CHANGEKIND_SETNAMES() { return (int)2L; }

    static final int CHANGEKIND_SETDOCUMENTATION() { return (int)3L; }

    static final int CHANGEKIND_GENERAL() { return (int)4L; }

    static final int CHANGEKIND_INVALIDATE() { return (int)5L; }

    static final int CHANGEKIND_CHANGEFAILED() { return (int)6L; }

    static final int CHANGEKIND_MAX() { return (int)7L; }

    static final MemoryLayout IID_ITypeChangeEvents$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ITypeChangeEvents$LAYOUT() { return IID_ITypeChangeEvents$LAYOUT_; }

    static final MemorySegment IID_ITypeChangeEvents$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ITypeChangeEvents", IID_ITypeChangeEvents$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ITypeChangeEvents$SEGMENT() { return IID_ITypeChangeEvents$SEGMENT_; }

    static final MemoryLayout ITypeChangeEventsVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("RequestTypeChange"),
        C_POINTER.withName("AfterTypeChange")
    ).withName("ITypeChangeEventsVtbl");
    static final jdk.incubator.foreign.MemoryLayout ITypeChangeEventsVtbl$struct$LAYOUT() { return ITypeChangeEventsVtbl$struct$LAYOUT_; }

    static final MemoryLayout ITypeChangeEventsVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeChangeEventsVtbl$QueryInterface$LAYOUT() { return ITypeChangeEventsVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ITypeChangeEventsVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ITypeChangeEventsVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle ITypeChangeEventsVtbl$QueryInterface$VH() { return ITypeChangeEventsVtbl$QueryInterface$VH_; }

    static final MemoryLayout ITypeChangeEventsVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeChangeEventsVtbl$AddRef$LAYOUT() { return ITypeChangeEventsVtbl$AddRef$LAYOUT_; }

    static final VarHandle ITypeChangeEventsVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ITypeChangeEventsVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle ITypeChangeEventsVtbl$AddRef$VH() { return ITypeChangeEventsVtbl$AddRef$VH_; }

    static final MemoryLayout ITypeChangeEventsVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeChangeEventsVtbl$Release$LAYOUT() { return ITypeChangeEventsVtbl$Release$LAYOUT_; }

    static final VarHandle ITypeChangeEventsVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ITypeChangeEventsVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle ITypeChangeEventsVtbl$Release$VH() { return ITypeChangeEventsVtbl$Release$VH_; }

    static final MemoryLayout ITypeChangeEventsVtbl$RequestTypeChange$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeChangeEventsVtbl$RequestTypeChange$LAYOUT() { return ITypeChangeEventsVtbl$RequestTypeChange$LAYOUT_; }

    static final VarHandle ITypeChangeEventsVtbl$RequestTypeChange$VH_ = MemoryHandles.asAddressVarHandle(ITypeChangeEventsVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RequestTypeChange")));
    static final java.lang.invoke.VarHandle ITypeChangeEventsVtbl$RequestTypeChange$VH() { return ITypeChangeEventsVtbl$RequestTypeChange$VH_; }

    static final MemoryLayout ITypeChangeEventsVtbl$AfterTypeChange$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeChangeEventsVtbl$AfterTypeChange$LAYOUT() { return ITypeChangeEventsVtbl$AfterTypeChange$LAYOUT_; }

    static final VarHandle ITypeChangeEventsVtbl$AfterTypeChange$VH_ = MemoryHandles.asAddressVarHandle(ITypeChangeEventsVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AfterTypeChange")));
    static final java.lang.invoke.VarHandle ITypeChangeEventsVtbl$AfterTypeChange$VH() { return ITypeChangeEventsVtbl$AfterTypeChange$VH_; }

    static final MemoryLayout ITypeChangeEvents$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ITypeChangeEvents");
    static final jdk.incubator.foreign.MemoryLayout ITypeChangeEvents$struct$LAYOUT() { return ITypeChangeEvents$struct$LAYOUT_; }

    static final MemoryLayout ITypeChangeEvents$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeChangeEvents$lpVtbl$LAYOUT() { return ITypeChangeEvents$lpVtbl$LAYOUT_; }

    static final VarHandle ITypeChangeEvents$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ITypeChangeEvents$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ITypeChangeEvents$lpVtbl$VH() { return ITypeChangeEvents$lpVtbl$VH_; }

    static final MemoryLayout IID_IErrorInfo$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IErrorInfo$LAYOUT() { return IID_IErrorInfo$LAYOUT_; }

    static final MemorySegment IID_IErrorInfo$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IErrorInfo", IID_IErrorInfo$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IErrorInfo$SEGMENT() { return IID_IErrorInfo$SEGMENT_; }

    static final MemoryLayout IErrorInfoVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetGUID"),
        C_POINTER.withName("GetSource"),
        C_POINTER.withName("GetDescription"),
        C_POINTER.withName("GetHelpFile"),
        C_POINTER.withName("GetHelpContext")
    ).withName("IErrorInfoVtbl");
    static final jdk.incubator.foreign.MemoryLayout IErrorInfoVtbl$struct$LAYOUT() { return IErrorInfoVtbl$struct$LAYOUT_; }

    static final MemoryLayout IErrorInfoVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorInfoVtbl$QueryInterface$LAYOUT() { return IErrorInfoVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IErrorInfoVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IErrorInfoVtbl$QueryInterface$VH() { return IErrorInfoVtbl$QueryInterface$VH_; }

    static final MemoryLayout IErrorInfoVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorInfoVtbl$AddRef$LAYOUT() { return IErrorInfoVtbl$AddRef$LAYOUT_; }

    static final VarHandle IErrorInfoVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IErrorInfoVtbl$AddRef$VH() { return IErrorInfoVtbl$AddRef$VH_; }

    static final MemoryLayout IErrorInfoVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorInfoVtbl$Release$LAYOUT() { return IErrorInfoVtbl$Release$LAYOUT_; }

    static final VarHandle IErrorInfoVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IErrorInfoVtbl$Release$VH() { return IErrorInfoVtbl$Release$VH_; }

    static final MemoryLayout IErrorInfoVtbl$GetGUID$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorInfoVtbl$GetGUID$LAYOUT() { return IErrorInfoVtbl$GetGUID$LAYOUT_; }

    static final VarHandle IErrorInfoVtbl$GetGUID$VH_ = MemoryHandles.asAddressVarHandle(IErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetGUID")));
    static final java.lang.invoke.VarHandle IErrorInfoVtbl$GetGUID$VH() { return IErrorInfoVtbl$GetGUID$VH_; }

    static final MemoryLayout IErrorInfoVtbl$GetSource$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorInfoVtbl$GetSource$LAYOUT() { return IErrorInfoVtbl$GetSource$LAYOUT_; }

    static final VarHandle IErrorInfoVtbl$GetSource$VH_ = MemoryHandles.asAddressVarHandle(IErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSource")));
    static final java.lang.invoke.VarHandle IErrorInfoVtbl$GetSource$VH() { return IErrorInfoVtbl$GetSource$VH_; }

    static final MemoryLayout IErrorInfoVtbl$GetDescription$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorInfoVtbl$GetDescription$LAYOUT() { return IErrorInfoVtbl$GetDescription$LAYOUT_; }

    static final VarHandle IErrorInfoVtbl$GetDescription$VH_ = MemoryHandles.asAddressVarHandle(IErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDescription")));
    static final java.lang.invoke.VarHandle IErrorInfoVtbl$GetDescription$VH() { return IErrorInfoVtbl$GetDescription$VH_; }

    static final MemoryLayout IErrorInfoVtbl$GetHelpFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorInfoVtbl$GetHelpFile$LAYOUT() { return IErrorInfoVtbl$GetHelpFile$LAYOUT_; }

    static final VarHandle IErrorInfoVtbl$GetHelpFile$VH_ = MemoryHandles.asAddressVarHandle(IErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetHelpFile")));
    static final java.lang.invoke.VarHandle IErrorInfoVtbl$GetHelpFile$VH() { return IErrorInfoVtbl$GetHelpFile$VH_; }

    static final MemoryLayout IErrorInfoVtbl$GetHelpContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorInfoVtbl$GetHelpContext$LAYOUT() { return IErrorInfoVtbl$GetHelpContext$LAYOUT_; }

    static final VarHandle IErrorInfoVtbl$GetHelpContext$VH_ = MemoryHandles.asAddressVarHandle(IErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetHelpContext")));
    static final java.lang.invoke.VarHandle IErrorInfoVtbl$GetHelpContext$VH() { return IErrorInfoVtbl$GetHelpContext$VH_; }

    static final MemoryLayout IErrorInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IErrorInfo");
    static final jdk.incubator.foreign.MemoryLayout IErrorInfo$struct$LAYOUT() { return IErrorInfo$struct$LAYOUT_; }

    static final MemoryLayout IErrorInfo$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorInfo$lpVtbl$LAYOUT() { return IErrorInfo$lpVtbl$LAYOUT_; }

    static final VarHandle IErrorInfo$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IErrorInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IErrorInfo$lpVtbl$VH() { return IErrorInfo$lpVtbl$VH_; }

    static final MemoryLayout IID_ICreateErrorInfo$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ICreateErrorInfo$LAYOUT() { return IID_ICreateErrorInfo$LAYOUT_; }

    static final MemorySegment IID_ICreateErrorInfo$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ICreateErrorInfo", IID_ICreateErrorInfo$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ICreateErrorInfo$SEGMENT() { return IID_ICreateErrorInfo$SEGMENT_; }

    static final MemoryLayout ICreateErrorInfoVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("SetGUID"),
        C_POINTER.withName("SetSource"),
        C_POINTER.withName("SetDescription"),
        C_POINTER.withName("SetHelpFile"),
        C_POINTER.withName("SetHelpContext")
    ).withName("ICreateErrorInfoVtbl");
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfoVtbl$struct$LAYOUT() { return ICreateErrorInfoVtbl$struct$LAYOUT_; }

    static final MemoryLayout ICreateErrorInfoVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfoVtbl$QueryInterface$LAYOUT() { return ICreateErrorInfoVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ICreateErrorInfoVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ICreateErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle ICreateErrorInfoVtbl$QueryInterface$VH() { return ICreateErrorInfoVtbl$QueryInterface$VH_; }

    static final MemoryLayout ICreateErrorInfoVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfoVtbl$AddRef$LAYOUT() { return ICreateErrorInfoVtbl$AddRef$LAYOUT_; }

    static final VarHandle ICreateErrorInfoVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ICreateErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle ICreateErrorInfoVtbl$AddRef$VH() { return ICreateErrorInfoVtbl$AddRef$VH_; }

    static final MemoryLayout ICreateErrorInfoVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfoVtbl$Release$LAYOUT() { return ICreateErrorInfoVtbl$Release$LAYOUT_; }

    static final VarHandle ICreateErrorInfoVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ICreateErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle ICreateErrorInfoVtbl$Release$VH() { return ICreateErrorInfoVtbl$Release$VH_; }

    static final MemoryLayout ICreateErrorInfoVtbl$SetGUID$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfoVtbl$SetGUID$LAYOUT() { return ICreateErrorInfoVtbl$SetGUID$LAYOUT_; }

    static final VarHandle ICreateErrorInfoVtbl$SetGUID$VH_ = MemoryHandles.asAddressVarHandle(ICreateErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetGUID")));
    static final java.lang.invoke.VarHandle ICreateErrorInfoVtbl$SetGUID$VH() { return ICreateErrorInfoVtbl$SetGUID$VH_; }

    static final MemoryLayout ICreateErrorInfoVtbl$SetSource$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfoVtbl$SetSource$LAYOUT() { return ICreateErrorInfoVtbl$SetSource$LAYOUT_; }

    static final VarHandle ICreateErrorInfoVtbl$SetSource$VH_ = MemoryHandles.asAddressVarHandle(ICreateErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetSource")));
    static final java.lang.invoke.VarHandle ICreateErrorInfoVtbl$SetSource$VH() { return ICreateErrorInfoVtbl$SetSource$VH_; }

    static final MemoryLayout ICreateErrorInfoVtbl$SetDescription$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfoVtbl$SetDescription$LAYOUT() { return ICreateErrorInfoVtbl$SetDescription$LAYOUT_; }

    static final VarHandle ICreateErrorInfoVtbl$SetDescription$VH_ = MemoryHandles.asAddressVarHandle(ICreateErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetDescription")));
    static final java.lang.invoke.VarHandle ICreateErrorInfoVtbl$SetDescription$VH() { return ICreateErrorInfoVtbl$SetDescription$VH_; }

    static final MemoryLayout ICreateErrorInfoVtbl$SetHelpFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfoVtbl$SetHelpFile$LAYOUT() { return ICreateErrorInfoVtbl$SetHelpFile$LAYOUT_; }

    static final VarHandle ICreateErrorInfoVtbl$SetHelpFile$VH_ = MemoryHandles.asAddressVarHandle(ICreateErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetHelpFile")));
    static final java.lang.invoke.VarHandle ICreateErrorInfoVtbl$SetHelpFile$VH() { return ICreateErrorInfoVtbl$SetHelpFile$VH_; }

    static final MemoryLayout ICreateErrorInfoVtbl$SetHelpContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfoVtbl$SetHelpContext$LAYOUT() { return ICreateErrorInfoVtbl$SetHelpContext$LAYOUT_; }

    static final VarHandle ICreateErrorInfoVtbl$SetHelpContext$VH_ = MemoryHandles.asAddressVarHandle(ICreateErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetHelpContext")));
    static final java.lang.invoke.VarHandle ICreateErrorInfoVtbl$SetHelpContext$VH() { return ICreateErrorInfoVtbl$SetHelpContext$VH_; }

    static final MemoryLayout ICreateErrorInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ICreateErrorInfo");
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfo$struct$LAYOUT() { return ICreateErrorInfo$struct$LAYOUT_; }

    static final MemoryLayout ICreateErrorInfo$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICreateErrorInfo$lpVtbl$LAYOUT() { return ICreateErrorInfo$lpVtbl$LAYOUT_; }

    static final VarHandle ICreateErrorInfo$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ICreateErrorInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ICreateErrorInfo$lpVtbl$VH() { return ICreateErrorInfo$lpVtbl$VH_; }

    static final MemoryLayout IID_ISupportErrorInfo$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ISupportErrorInfo$LAYOUT() { return IID_ISupportErrorInfo$LAYOUT_; }

    static final MemorySegment IID_ISupportErrorInfo$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ISupportErrorInfo", IID_ISupportErrorInfo$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ISupportErrorInfo$SEGMENT() { return IID_ISupportErrorInfo$SEGMENT_; }

    static final MemoryLayout ISupportErrorInfoVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("InterfaceSupportsErrorInfo")
    ).withName("ISupportErrorInfoVtbl");
    static final jdk.incubator.foreign.MemoryLayout ISupportErrorInfoVtbl$struct$LAYOUT() { return ISupportErrorInfoVtbl$struct$LAYOUT_; }

    static final MemoryLayout ISupportErrorInfoVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ISupportErrorInfoVtbl$QueryInterface$LAYOUT() { return ISupportErrorInfoVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ISupportErrorInfoVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ISupportErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle ISupportErrorInfoVtbl$QueryInterface$VH() { return ISupportErrorInfoVtbl$QueryInterface$VH_; }

    static final MemoryLayout ISupportErrorInfoVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ISupportErrorInfoVtbl$AddRef$LAYOUT() { return ISupportErrorInfoVtbl$AddRef$LAYOUT_; }

    static final VarHandle ISupportErrorInfoVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ISupportErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle ISupportErrorInfoVtbl$AddRef$VH() { return ISupportErrorInfoVtbl$AddRef$VH_; }

    static final MemoryLayout ISupportErrorInfoVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ISupportErrorInfoVtbl$Release$LAYOUT() { return ISupportErrorInfoVtbl$Release$LAYOUT_; }

    static final VarHandle ISupportErrorInfoVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ISupportErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle ISupportErrorInfoVtbl$Release$VH() { return ISupportErrorInfoVtbl$Release$VH_; }

    static final MemoryLayout ISupportErrorInfoVtbl$InterfaceSupportsErrorInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ISupportErrorInfoVtbl$InterfaceSupportsErrorInfo$LAYOUT() { return ISupportErrorInfoVtbl$InterfaceSupportsErrorInfo$LAYOUT_; }

    static final VarHandle ISupportErrorInfoVtbl$InterfaceSupportsErrorInfo$VH_ = MemoryHandles.asAddressVarHandle(ISupportErrorInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("InterfaceSupportsErrorInfo")));
    static final java.lang.invoke.VarHandle ISupportErrorInfoVtbl$InterfaceSupportsErrorInfo$VH() { return ISupportErrorInfoVtbl$InterfaceSupportsErrorInfo$VH_; }

    static final MemoryLayout ISupportErrorInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ISupportErrorInfo");
    static final jdk.incubator.foreign.MemoryLayout ISupportErrorInfo$struct$LAYOUT() { return ISupportErrorInfo$struct$LAYOUT_; }

    static final MemoryLayout ISupportErrorInfo$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ISupportErrorInfo$lpVtbl$LAYOUT() { return ISupportErrorInfo$lpVtbl$LAYOUT_; }

    static final VarHandle ISupportErrorInfo$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ISupportErrorInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ISupportErrorInfo$lpVtbl$VH() { return ISupportErrorInfo$lpVtbl$VH_; }

    static final MemoryLayout IID_ITypeFactory$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ITypeFactory$LAYOUT() { return IID_ITypeFactory$LAYOUT_; }

    static final MemorySegment IID_ITypeFactory$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ITypeFactory", IID_ITypeFactory$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ITypeFactory$SEGMENT() { return IID_ITypeFactory$SEGMENT_; }

    static final MemoryLayout ITypeFactoryVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("CreateFromTypeInfo")
    ).withName("ITypeFactoryVtbl");
    static final jdk.incubator.foreign.MemoryLayout ITypeFactoryVtbl$struct$LAYOUT() { return ITypeFactoryVtbl$struct$LAYOUT_; }

    static final MemoryLayout ITypeFactoryVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeFactoryVtbl$QueryInterface$LAYOUT() { return ITypeFactoryVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ITypeFactoryVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ITypeFactoryVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle ITypeFactoryVtbl$QueryInterface$VH() { return ITypeFactoryVtbl$QueryInterface$VH_; }

    static final MemoryLayout ITypeFactoryVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeFactoryVtbl$AddRef$LAYOUT() { return ITypeFactoryVtbl$AddRef$LAYOUT_; }

    static final VarHandle ITypeFactoryVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ITypeFactoryVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle ITypeFactoryVtbl$AddRef$VH() { return ITypeFactoryVtbl$AddRef$VH_; }

    static final MemoryLayout ITypeFactoryVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeFactoryVtbl$Release$LAYOUT() { return ITypeFactoryVtbl$Release$LAYOUT_; }

    static final VarHandle ITypeFactoryVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ITypeFactoryVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle ITypeFactoryVtbl$Release$VH() { return ITypeFactoryVtbl$Release$VH_; }

    static final MemoryLayout ITypeFactoryVtbl$CreateFromTypeInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeFactoryVtbl$CreateFromTypeInfo$LAYOUT() { return ITypeFactoryVtbl$CreateFromTypeInfo$LAYOUT_; }

    static final VarHandle ITypeFactoryVtbl$CreateFromTypeInfo$VH_ = MemoryHandles.asAddressVarHandle(ITypeFactoryVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateFromTypeInfo")));
    static final java.lang.invoke.VarHandle ITypeFactoryVtbl$CreateFromTypeInfo$VH() { return ITypeFactoryVtbl$CreateFromTypeInfo$VH_; }

    static final MemoryLayout ITypeFactory$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ITypeFactory");
    static final jdk.incubator.foreign.MemoryLayout ITypeFactory$struct$LAYOUT() { return ITypeFactory$struct$LAYOUT_; }

    static final MemoryLayout ITypeFactory$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeFactory$lpVtbl$LAYOUT() { return ITypeFactory$lpVtbl$LAYOUT_; }

    static final VarHandle ITypeFactory$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ITypeFactory$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ITypeFactory$lpVtbl$VH() { return ITypeFactory$lpVtbl$VH_; }

    static final MemoryLayout IID_ITypeMarshal$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ITypeMarshal$LAYOUT() { return IID_ITypeMarshal$LAYOUT_; }

    static final MemorySegment IID_ITypeMarshal$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ITypeMarshal", IID_ITypeMarshal$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ITypeMarshal$SEGMENT() { return IID_ITypeMarshal$SEGMENT_; }

    static final MemoryLayout ITypeMarshalVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Size"),
        C_POINTER.withName("Marshal"),
        C_POINTER.withName("Unmarshal"),
        C_POINTER.withName("Free")
    ).withName("ITypeMarshalVtbl");
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshalVtbl$struct$LAYOUT() { return ITypeMarshalVtbl$struct$LAYOUT_; }

    static final MemoryLayout ITypeMarshalVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshalVtbl$QueryInterface$LAYOUT() { return ITypeMarshalVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ITypeMarshalVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ITypeMarshalVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle ITypeMarshalVtbl$QueryInterface$VH() { return ITypeMarshalVtbl$QueryInterface$VH_; }

    static final MemoryLayout ITypeMarshalVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshalVtbl$AddRef$LAYOUT() { return ITypeMarshalVtbl$AddRef$LAYOUT_; }

    static final VarHandle ITypeMarshalVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ITypeMarshalVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle ITypeMarshalVtbl$AddRef$VH() { return ITypeMarshalVtbl$AddRef$VH_; }

    static final MemoryLayout ITypeMarshalVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshalVtbl$Release$LAYOUT() { return ITypeMarshalVtbl$Release$LAYOUT_; }

    static final VarHandle ITypeMarshalVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ITypeMarshalVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle ITypeMarshalVtbl$Release$VH() { return ITypeMarshalVtbl$Release$VH_; }

    static final MemoryLayout ITypeMarshalVtbl$Size$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshalVtbl$Size$LAYOUT() { return ITypeMarshalVtbl$Size$LAYOUT_; }

    static final VarHandle ITypeMarshalVtbl$Size$VH_ = MemoryHandles.asAddressVarHandle(ITypeMarshalVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Size")));
    static final java.lang.invoke.VarHandle ITypeMarshalVtbl$Size$VH() { return ITypeMarshalVtbl$Size$VH_; }

    static final MemoryLayout ITypeMarshalVtbl$Marshal$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshalVtbl$Marshal$LAYOUT() { return ITypeMarshalVtbl$Marshal$LAYOUT_; }

    static final VarHandle ITypeMarshalVtbl$Marshal$VH_ = MemoryHandles.asAddressVarHandle(ITypeMarshalVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Marshal")));
    static final java.lang.invoke.VarHandle ITypeMarshalVtbl$Marshal$VH() { return ITypeMarshalVtbl$Marshal$VH_; }

    static final MemoryLayout ITypeMarshalVtbl$Unmarshal$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshalVtbl$Unmarshal$LAYOUT() { return ITypeMarshalVtbl$Unmarshal$LAYOUT_; }

    static final VarHandle ITypeMarshalVtbl$Unmarshal$VH_ = MemoryHandles.asAddressVarHandle(ITypeMarshalVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Unmarshal")));
    static final java.lang.invoke.VarHandle ITypeMarshalVtbl$Unmarshal$VH() { return ITypeMarshalVtbl$Unmarshal$VH_; }

    static final MemoryLayout ITypeMarshalVtbl$Free$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshalVtbl$Free$LAYOUT() { return ITypeMarshalVtbl$Free$LAYOUT_; }

    static final VarHandle ITypeMarshalVtbl$Free$VH_ = MemoryHandles.asAddressVarHandle(ITypeMarshalVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Free")));
    static final java.lang.invoke.VarHandle ITypeMarshalVtbl$Free$VH() { return ITypeMarshalVtbl$Free$VH_; }

    static final MemoryLayout ITypeMarshal$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ITypeMarshal");
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshal$struct$LAYOUT() { return ITypeMarshal$struct$LAYOUT_; }

    static final MemoryLayout ITypeMarshal$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ITypeMarshal$lpVtbl$LAYOUT() { return ITypeMarshal$lpVtbl$LAYOUT_; }

    static final VarHandle ITypeMarshal$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ITypeMarshal$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ITypeMarshal$lpVtbl$VH() { return ITypeMarshal$lpVtbl$VH_; }

    static final MemoryLayout IID_IRecordInfo$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IRecordInfo$LAYOUT() { return IID_IRecordInfo$LAYOUT_; }

    static final MemorySegment IID_IRecordInfo$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IRecordInfo", IID_IRecordInfo$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IRecordInfo$SEGMENT() { return IID_IRecordInfo$SEGMENT_; }

    static final MemoryLayout IRecordInfoVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("RecordInit"),
        C_POINTER.withName("RecordClear"),
        C_POINTER.withName("RecordCopy"),
        C_POINTER.withName("GetGuid"),
        C_POINTER.withName("GetName"),
        C_POINTER.withName("GetSize"),
        C_POINTER.withName("GetTypeInfo"),
        C_POINTER.withName("GetField"),
        C_POINTER.withName("GetFieldNoCopy"),
        C_POINTER.withName("PutField"),
        C_POINTER.withName("PutFieldNoCopy"),
        C_POINTER.withName("GetFieldNames"),
        C_POINTER.withName("IsMatchingType"),
        C_POINTER.withName("RecordCreate"),
        C_POINTER.withName("RecordCreateCopy"),
        C_POINTER.withName("RecordDestroy")
    ).withName("IRecordInfoVtbl");
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$struct$LAYOUT() { return IRecordInfoVtbl$struct$LAYOUT_; }

    static final MemoryLayout IRecordInfoVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$QueryInterface$LAYOUT() { return IRecordInfoVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$QueryInterface$VH() { return IRecordInfoVtbl$QueryInterface$VH_; }

    static final MemoryLayout IRecordInfoVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$AddRef$LAYOUT() { return IRecordInfoVtbl$AddRef$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$AddRef$VH() { return IRecordInfoVtbl$AddRef$VH_; }

    static final MemoryLayout IRecordInfoVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$Release$LAYOUT() { return IRecordInfoVtbl$Release$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$Release$VH() { return IRecordInfoVtbl$Release$VH_; }

    static final MemoryLayout IRecordInfoVtbl$RecordInit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$RecordInit$LAYOUT() { return IRecordInfoVtbl$RecordInit$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$RecordInit$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RecordInit")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$RecordInit$VH() { return IRecordInfoVtbl$RecordInit$VH_; }

    static final MemoryLayout IRecordInfoVtbl$RecordClear$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$RecordClear$LAYOUT() { return IRecordInfoVtbl$RecordClear$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$RecordClear$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RecordClear")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$RecordClear$VH() { return IRecordInfoVtbl$RecordClear$VH_; }

    static final MemoryLayout IRecordInfoVtbl$RecordCopy$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$RecordCopy$LAYOUT() { return IRecordInfoVtbl$RecordCopy$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$RecordCopy$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RecordCopy")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$RecordCopy$VH() { return IRecordInfoVtbl$RecordCopy$VH_; }

    static final MemoryLayout IRecordInfoVtbl$GetGuid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$GetGuid$LAYOUT() { return IRecordInfoVtbl$GetGuid$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$GetGuid$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetGuid")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$GetGuid$VH() { return IRecordInfoVtbl$GetGuid$VH_; }

    static final MemoryLayout IRecordInfoVtbl$GetName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$GetName$LAYOUT() { return IRecordInfoVtbl$GetName$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$GetName$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetName")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$GetName$VH() { return IRecordInfoVtbl$GetName$VH_; }

    static final MemoryLayout IRecordInfoVtbl$GetSize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$GetSize$LAYOUT() { return IRecordInfoVtbl$GetSize$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$GetSize$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSize")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$GetSize$VH() { return IRecordInfoVtbl$GetSize$VH_; }

    static final MemoryLayout IRecordInfoVtbl$GetTypeInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$GetTypeInfo$LAYOUT() { return IRecordInfoVtbl$GetTypeInfo$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$GetTypeInfo$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTypeInfo")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$GetTypeInfo$VH() { return IRecordInfoVtbl$GetTypeInfo$VH_; }

    static final MemoryLayout IRecordInfoVtbl$GetField$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$GetField$LAYOUT() { return IRecordInfoVtbl$GetField$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$GetField$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetField")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$GetField$VH() { return IRecordInfoVtbl$GetField$VH_; }

    static final MemoryLayout IRecordInfoVtbl$GetFieldNoCopy$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$GetFieldNoCopy$LAYOUT() { return IRecordInfoVtbl$GetFieldNoCopy$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$GetFieldNoCopy$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFieldNoCopy")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$GetFieldNoCopy$VH() { return IRecordInfoVtbl$GetFieldNoCopy$VH_; }

    static final MemoryLayout IRecordInfoVtbl$PutField$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$PutField$LAYOUT() { return IRecordInfoVtbl$PutField$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$PutField$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PutField")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$PutField$VH() { return IRecordInfoVtbl$PutField$VH_; }

    static final MemoryLayout IRecordInfoVtbl$PutFieldNoCopy$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$PutFieldNoCopy$LAYOUT() { return IRecordInfoVtbl$PutFieldNoCopy$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$PutFieldNoCopy$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PutFieldNoCopy")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$PutFieldNoCopy$VH() { return IRecordInfoVtbl$PutFieldNoCopy$VH_; }

    static final MemoryLayout IRecordInfoVtbl$GetFieldNames$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$GetFieldNames$LAYOUT() { return IRecordInfoVtbl$GetFieldNames$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$GetFieldNames$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetFieldNames")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$GetFieldNames$VH() { return IRecordInfoVtbl$GetFieldNames$VH_; }

    static final MemoryLayout IRecordInfoVtbl$IsMatchingType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$IsMatchingType$LAYOUT() { return IRecordInfoVtbl$IsMatchingType$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$IsMatchingType$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsMatchingType")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$IsMatchingType$VH() { return IRecordInfoVtbl$IsMatchingType$VH_; }

    static final MemoryLayout IRecordInfoVtbl$RecordCreate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$RecordCreate$LAYOUT() { return IRecordInfoVtbl$RecordCreate$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$RecordCreate$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RecordCreate")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$RecordCreate$VH() { return IRecordInfoVtbl$RecordCreate$VH_; }

    static final MemoryLayout IRecordInfoVtbl$RecordCreateCopy$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$RecordCreateCopy$LAYOUT() { return IRecordInfoVtbl$RecordCreateCopy$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$RecordCreateCopy$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RecordCreateCopy")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$RecordCreateCopy$VH() { return IRecordInfoVtbl$RecordCreateCopy$VH_; }

    static final MemoryLayout IRecordInfoVtbl$RecordDestroy$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfoVtbl$RecordDestroy$LAYOUT() { return IRecordInfoVtbl$RecordDestroy$LAYOUT_; }

    static final VarHandle IRecordInfoVtbl$RecordDestroy$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RecordDestroy")));
    static final java.lang.invoke.VarHandle IRecordInfoVtbl$RecordDestroy$VH() { return IRecordInfoVtbl$RecordDestroy$VH_; }

    static final MemoryLayout IRecordInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IRecordInfo");
    static final jdk.incubator.foreign.MemoryLayout IRecordInfo$struct$LAYOUT() { return IRecordInfo$struct$LAYOUT_; }

    static final MemoryLayout IRecordInfo$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRecordInfo$lpVtbl$LAYOUT() { return IRecordInfo$lpVtbl$LAYOUT_; }

    static final VarHandle IRecordInfo$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IRecordInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IRecordInfo$lpVtbl$VH() { return IRecordInfo$lpVtbl$VH_; }

    static final MemoryLayout IID_IErrorLog$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IErrorLog$LAYOUT() { return IID_IErrorLog$LAYOUT_; }

    static final MemorySegment IID_IErrorLog$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IErrorLog", IID_IErrorLog$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IErrorLog$SEGMENT() { return IID_IErrorLog$SEGMENT_; }

    static final MemoryLayout IErrorLogVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("AddError")
    ).withName("IErrorLogVtbl");
    static final jdk.incubator.foreign.MemoryLayout IErrorLogVtbl$struct$LAYOUT() { return IErrorLogVtbl$struct$LAYOUT_; }

    static final MemoryLayout IErrorLogVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorLogVtbl$QueryInterface$LAYOUT() { return IErrorLogVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IErrorLogVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IErrorLogVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IErrorLogVtbl$QueryInterface$VH() { return IErrorLogVtbl$QueryInterface$VH_; }

    static final MemoryLayout IErrorLogVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorLogVtbl$AddRef$LAYOUT() { return IErrorLogVtbl$AddRef$LAYOUT_; }

    static final VarHandle IErrorLogVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IErrorLogVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IErrorLogVtbl$AddRef$VH() { return IErrorLogVtbl$AddRef$VH_; }

    static final MemoryLayout IErrorLogVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorLogVtbl$Release$LAYOUT() { return IErrorLogVtbl$Release$LAYOUT_; }

    static final VarHandle IErrorLogVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IErrorLogVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IErrorLogVtbl$Release$VH() { return IErrorLogVtbl$Release$VH_; }

    static final MemoryLayout IErrorLogVtbl$AddError$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorLogVtbl$AddError$LAYOUT() { return IErrorLogVtbl$AddError$LAYOUT_; }

    static final VarHandle IErrorLogVtbl$AddError$VH_ = MemoryHandles.asAddressVarHandle(IErrorLogVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddError")));
    static final java.lang.invoke.VarHandle IErrorLogVtbl$AddError$VH() { return IErrorLogVtbl$AddError$VH_; }

    static final MemoryLayout IErrorLog$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IErrorLog");
    static final jdk.incubator.foreign.MemoryLayout IErrorLog$struct$LAYOUT() { return IErrorLog$struct$LAYOUT_; }

    static final MemoryLayout IErrorLog$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IErrorLog$lpVtbl$LAYOUT() { return IErrorLog$lpVtbl$LAYOUT_; }

    static final VarHandle IErrorLog$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IErrorLog$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IErrorLog$lpVtbl$VH() { return IErrorLog$lpVtbl$VH_; }

    static final MemoryLayout IID_IPropertyBag$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IPropertyBag$LAYOUT() { return IID_IPropertyBag$LAYOUT_; }

    static final MemorySegment IID_IPropertyBag$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IPropertyBag", IID_IPropertyBag$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IPropertyBag$SEGMENT() { return IID_IPropertyBag$SEGMENT_; }

    static final MemoryLayout IPropertyBagVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Read"),
        C_POINTER.withName("Write")
    ).withName("IPropertyBagVtbl");
    static final jdk.incubator.foreign.MemoryLayout IPropertyBagVtbl$struct$LAYOUT() { return IPropertyBagVtbl$struct$LAYOUT_; }

    static final MemoryLayout IPropertyBagVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPropertyBagVtbl$QueryInterface$LAYOUT() { return IPropertyBagVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IPropertyBagVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IPropertyBagVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IPropertyBagVtbl$QueryInterface$VH() { return IPropertyBagVtbl$QueryInterface$VH_; }

    static final MemoryLayout IPropertyBagVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPropertyBagVtbl$AddRef$LAYOUT() { return IPropertyBagVtbl$AddRef$LAYOUT_; }

    static final VarHandle IPropertyBagVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IPropertyBagVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IPropertyBagVtbl$AddRef$VH() { return IPropertyBagVtbl$AddRef$VH_; }

    static final MemoryLayout IPropertyBagVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPropertyBagVtbl$Release$LAYOUT() { return IPropertyBagVtbl$Release$LAYOUT_; }

    static final VarHandle IPropertyBagVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IPropertyBagVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IPropertyBagVtbl$Release$VH() { return IPropertyBagVtbl$Release$VH_; }

    static final MemoryLayout IPropertyBagVtbl$Read$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPropertyBagVtbl$Read$LAYOUT() { return IPropertyBagVtbl$Read$LAYOUT_; }

    static final VarHandle IPropertyBagVtbl$Read$VH_ = MemoryHandles.asAddressVarHandle(IPropertyBagVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Read")));
    static final java.lang.invoke.VarHandle IPropertyBagVtbl$Read$VH() { return IPropertyBagVtbl$Read$VH_; }

}

