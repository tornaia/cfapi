// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$50 extends cfapi_h$constants$49 {

    /* package-private */ cfapi_h$constants$50() {}
    static final FunctionDescriptor CryptGetHashParam$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptGetHashParam$FUNC() { return CryptGetHashParam$FUNC_; }

    static final MethodHandle CryptGetHashParam$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptGetHashParam",
        "(JILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CryptGetHashParam$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptGetHashParam$MH() { return CryptGetHashParam$MH_; }

    static final FunctionDescriptor CryptSetProvParam$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSetProvParam$FUNC() { return CryptSetProvParam$FUNC_; }

    static final MethodHandle CryptSetProvParam$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSetProvParam",
        "(JILjdk/incubator/foreign/MemoryAddress;I)I",
        CryptSetProvParam$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSetProvParam$MH() { return CryptSetProvParam$MH_; }

    static final FunctionDescriptor CryptGetProvParam$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptGetProvParam$FUNC() { return CryptGetProvParam$FUNC_; }

    static final MethodHandle CryptGetProvParam$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptGetProvParam",
        "(JILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CryptGetProvParam$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptGetProvParam$MH() { return CryptGetProvParam$MH_; }

    static final FunctionDescriptor CryptGenRandom$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptGenRandom$FUNC() { return CryptGenRandom$FUNC_; }

    static final MethodHandle CryptGenRandom$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptGenRandom",
        "(JILjdk/incubator/foreign/MemoryAddress;)I",
        CryptGenRandom$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptGenRandom$MH() { return CryptGenRandom$MH_; }

    static final FunctionDescriptor CryptGetUserKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptGetUserKey$FUNC() { return CryptGetUserKey$FUNC_; }

    static final MethodHandle CryptGetUserKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptGetUserKey",
        "(JILjdk/incubator/foreign/MemoryAddress;)I",
        CryptGetUserKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptGetUserKey$MH() { return CryptGetUserKey$MH_; }

    static final FunctionDescriptor CryptExportKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptExportKey$FUNC() { return CryptExportKey$FUNC_; }

    static final MethodHandle CryptExportKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptExportKey",
        "(JJIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptExportKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptExportKey$MH() { return CryptExportKey$MH_; }

    static final FunctionDescriptor CryptImportKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_POINTER,
        C_LONG,
        C_LONGLONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptImportKey$FUNC() { return CryptImportKey$FUNC_; }

    static final MethodHandle CryptImportKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptImportKey",
        "(JLjdk/incubator/foreign/MemoryAddress;IJILjdk/incubator/foreign/MemoryAddress;)I",
        CryptImportKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptImportKey$MH() { return CryptImportKey$MH_; }

    static final FunctionDescriptor CryptEncrypt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptEncrypt$FUNC() { return CryptEncrypt$FUNC_; }

    static final MethodHandle CryptEncrypt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptEncrypt",
        "(JJIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CryptEncrypt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptEncrypt$MH() { return CryptEncrypt$MH_; }

    static final FunctionDescriptor CryptDecrypt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptDecrypt$FUNC() { return CryptDecrypt$FUNC_; }

    static final MethodHandle CryptDecrypt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptDecrypt",
        "(JJIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptDecrypt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptDecrypt$MH() { return CryptDecrypt$MH_; }

    static final FunctionDescriptor CryptCreateHash$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptCreateHash$FUNC() { return CryptCreateHash$FUNC_; }

    static final MethodHandle CryptCreateHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptCreateHash",
        "(JIJILjdk/incubator/foreign/MemoryAddress;)I",
        CryptCreateHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptCreateHash$MH() { return CryptCreateHash$MH_; }

    static final FunctionDescriptor CryptHashData$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptHashData$FUNC() { return CryptHashData$FUNC_; }

    static final MethodHandle CryptHashData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptHashData",
        "(JLjdk/incubator/foreign/MemoryAddress;II)I",
        CryptHashData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptHashData$MH() { return CryptHashData$MH_; }

    static final FunctionDescriptor CryptHashSessionKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptHashSessionKey$FUNC() { return CryptHashSessionKey$FUNC_; }

    static final MethodHandle CryptHashSessionKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptHashSessionKey",
        "(JJI)I",
        CryptHashSessionKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptHashSessionKey$MH() { return CryptHashSessionKey$MH_; }

    static final FunctionDescriptor CryptDestroyHash$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptDestroyHash$FUNC() { return CryptDestroyHash$FUNC_; }

    static final MethodHandle CryptDestroyHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptDestroyHash",
        "(J)I",
        CryptDestroyHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptDestroyHash$MH() { return CryptDestroyHash$MH_; }

    static final FunctionDescriptor CryptSignHashA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSignHashA$FUNC() { return CryptSignHashA$FUNC_; }

    static final MethodHandle CryptSignHashA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSignHashA",
        "(JILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptSignHashA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSignHashA$MH() { return CryptSignHashA$MH_; }

    static final FunctionDescriptor CryptSignHashW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSignHashW$FUNC() { return CryptSignHashW$FUNC_; }

    static final MethodHandle CryptSignHashW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSignHashW",
        "(JILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptSignHashW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSignHashW$MH() { return CryptSignHashW$MH_; }

    static final FunctionDescriptor CryptVerifySignatureA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_POINTER,
        C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifySignatureA$FUNC() { return CryptVerifySignatureA$FUNC_; }

    static final MethodHandle CryptVerifySignatureA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifySignatureA",
        "(JLjdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;I)I",
        CryptVerifySignatureA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifySignatureA$MH() { return CryptVerifySignatureA$MH_; }

    static final FunctionDescriptor CryptVerifySignatureW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_POINTER,
        C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifySignatureW$FUNC() { return CryptVerifySignatureW$FUNC_; }

    static final MethodHandle CryptVerifySignatureW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifySignatureW",
        "(JLjdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;I)I",
        CryptVerifySignatureW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifySignatureW$MH() { return CryptVerifySignatureW$MH_; }

    static final FunctionDescriptor CryptSetProviderA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSetProviderA$FUNC() { return CryptSetProviderA$FUNC_; }

    static final MethodHandle CryptSetProviderA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSetProviderA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CryptSetProviderA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSetProviderA$MH() { return CryptSetProviderA$MH_; }

    static final FunctionDescriptor CryptSetProviderW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSetProviderW$FUNC() { return CryptSetProviderW$FUNC_; }

    static final MethodHandle CryptSetProviderW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSetProviderW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CryptSetProviderW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSetProviderW$MH() { return CryptSetProviderW$MH_; }

    static final FunctionDescriptor CryptSetProviderExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSetProviderExA$FUNC() { return CryptSetProviderExA$FUNC_; }

    static final MethodHandle CryptSetProviderExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSetProviderExA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CryptSetProviderExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSetProviderExA$MH() { return CryptSetProviderExA$MH_; }

    static final FunctionDescriptor CryptSetProviderExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptSetProviderExW$FUNC() { return CryptSetProviderExW$FUNC_; }

    static final MethodHandle CryptSetProviderExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptSetProviderExW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CryptSetProviderExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptSetProviderExW$MH() { return CryptSetProviderExW$MH_; }

    static final FunctionDescriptor CryptGetDefaultProviderA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptGetDefaultProviderA$FUNC() { return CryptGetDefaultProviderA$FUNC_; }

    static final MethodHandle CryptGetDefaultProviderA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptGetDefaultProviderA",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptGetDefaultProviderA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptGetDefaultProviderA$MH() { return CryptGetDefaultProviderA$MH_; }

    static final FunctionDescriptor CryptGetDefaultProviderW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptGetDefaultProviderW$FUNC() { return CryptGetDefaultProviderW$FUNC_; }

    static final MethodHandle CryptGetDefaultProviderW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptGetDefaultProviderW",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptGetDefaultProviderW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptGetDefaultProviderW$MH() { return CryptGetDefaultProviderW$MH_; }

    static final FunctionDescriptor CryptEnumProviderTypesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptEnumProviderTypesA$FUNC() { return CryptEnumProviderTypesA$FUNC_; }

    static final MethodHandle CryptEnumProviderTypesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptEnumProviderTypesA",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptEnumProviderTypesA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptEnumProviderTypesA$MH() { return CryptEnumProviderTypesA$MH_; }

    static final FunctionDescriptor CryptEnumProviderTypesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptEnumProviderTypesW$FUNC() { return CryptEnumProviderTypesW$FUNC_; }

    static final MethodHandle CryptEnumProviderTypesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptEnumProviderTypesW",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptEnumProviderTypesW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptEnumProviderTypesW$MH() { return CryptEnumProviderTypesW$MH_; }

    static final FunctionDescriptor CryptEnumProvidersA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptEnumProvidersA$FUNC() { return CryptEnumProvidersA$FUNC_; }

    static final MethodHandle CryptEnumProvidersA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptEnumProvidersA",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptEnumProvidersA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptEnumProvidersA$MH() { return CryptEnumProvidersA$MH_; }

    static final FunctionDescriptor CryptEnumProvidersW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptEnumProvidersW$FUNC() { return CryptEnumProvidersW$FUNC_; }

    static final MethodHandle CryptEnumProvidersW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptEnumProvidersW",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptEnumProvidersW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptEnumProvidersW$MH() { return CryptEnumProvidersW$MH_; }

    static final FunctionDescriptor CryptContextAddRef$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptContextAddRef$FUNC() { return CryptContextAddRef$FUNC_; }

    static final MethodHandle CryptContextAddRef$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptContextAddRef",
        "(JLjdk/incubator/foreign/MemoryAddress;I)I",
        CryptContextAddRef$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptContextAddRef$MH() { return CryptContextAddRef$MH_; }

    static final FunctionDescriptor CryptDuplicateKey$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptDuplicateKey$FUNC() { return CryptDuplicateKey$FUNC_; }

    static final MethodHandle CryptDuplicateKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptDuplicateKey",
        "(JLjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptDuplicateKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptDuplicateKey$MH() { return CryptDuplicateKey$MH_; }

    static final FunctionDescriptor CryptDuplicateHash$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONGLONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptDuplicateHash$FUNC() { return CryptDuplicateHash$FUNC_; }

    static final MethodHandle CryptDuplicateHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptDuplicateHash",
        "(JLjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptDuplicateHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptDuplicateHash$MH() { return CryptDuplicateHash$MH_; }

    static final FunctionDescriptor GetEncSChannel$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEncSChannel$FUNC() { return GetEncSChannel$FUNC_; }

    static final MethodHandle GetEncSChannel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEncSChannel",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetEncSChannel$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEncSChannel$MH() { return GetEncSChannel$MH_; }

    static final MemoryLayout __BCRYPT_KEY_LENGTHS_STRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwMinLength"),
        C_LONG.withName("dwMaxLength"),
        C_LONG.withName("dwIncrement")
    ).withName("__BCRYPT_KEY_LENGTHS_STRUCT");
    static final jdk.incubator.foreign.MemoryLayout __BCRYPT_KEY_LENGTHS_STRUCT$struct$LAYOUT() { return __BCRYPT_KEY_LENGTHS_STRUCT$struct$LAYOUT_; }

    static final MemoryLayout __BCRYPT_KEY_LENGTHS_STRUCT$dwMinLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __BCRYPT_KEY_LENGTHS_STRUCT$dwMinLength$LAYOUT() { return __BCRYPT_KEY_LENGTHS_STRUCT$dwMinLength$LAYOUT_; }

    static final VarHandle __BCRYPT_KEY_LENGTHS_STRUCT$dwMinLength$VH_ = __BCRYPT_KEY_LENGTHS_STRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinLength"));
    static final java.lang.invoke.VarHandle __BCRYPT_KEY_LENGTHS_STRUCT$dwMinLength$VH() { return __BCRYPT_KEY_LENGTHS_STRUCT$dwMinLength$VH_; }

    static final MemoryLayout __BCRYPT_KEY_LENGTHS_STRUCT$dwMaxLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __BCRYPT_KEY_LENGTHS_STRUCT$dwMaxLength$LAYOUT() { return __BCRYPT_KEY_LENGTHS_STRUCT$dwMaxLength$LAYOUT_; }

    static final VarHandle __BCRYPT_KEY_LENGTHS_STRUCT$dwMaxLength$VH_ = __BCRYPT_KEY_LENGTHS_STRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxLength"));
    static final java.lang.invoke.VarHandle __BCRYPT_KEY_LENGTHS_STRUCT$dwMaxLength$VH() { return __BCRYPT_KEY_LENGTHS_STRUCT$dwMaxLength$VH_; }

    static final MemoryLayout __BCRYPT_KEY_LENGTHS_STRUCT$dwIncrement$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout __BCRYPT_KEY_LENGTHS_STRUCT$dwIncrement$LAYOUT() { return __BCRYPT_KEY_LENGTHS_STRUCT$dwIncrement$LAYOUT_; }

    static final VarHandle __BCRYPT_KEY_LENGTHS_STRUCT$dwIncrement$VH_ = __BCRYPT_KEY_LENGTHS_STRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwIncrement"));
    static final java.lang.invoke.VarHandle __BCRYPT_KEY_LENGTHS_STRUCT$dwIncrement$VH() { return __BCRYPT_KEY_LENGTHS_STRUCT$dwIncrement$VH_; }

    static final MemoryLayout _BCRYPT_OID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbOID"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbOID")
    ).withName("_BCRYPT_OID");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OID$struct$LAYOUT() { return _BCRYPT_OID$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_OID$cbOID$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OID$cbOID$LAYOUT() { return _BCRYPT_OID$cbOID$LAYOUT_; }

    static final VarHandle _BCRYPT_OID$cbOID$VH_ = _BCRYPT_OID$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbOID"));
    static final java.lang.invoke.VarHandle _BCRYPT_OID$cbOID$VH() { return _BCRYPT_OID$cbOID$VH_; }

    static final MemoryLayout _BCRYPT_OID$pbOID$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OID$pbOID$LAYOUT() { return _BCRYPT_OID$pbOID$LAYOUT_; }

    static final VarHandle _BCRYPT_OID$pbOID$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_OID$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbOID")));
    static final java.lang.invoke.VarHandle _BCRYPT_OID$pbOID$VH() { return _BCRYPT_OID$pbOID$VH_; }

    static final MemoryLayout _BCRYPT_OID_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwOIDCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pOIDs")
    ).withName("_BCRYPT_OID_LIST");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OID_LIST$struct$LAYOUT() { return _BCRYPT_OID_LIST$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_OID_LIST$dwOIDCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OID_LIST$dwOIDCount$LAYOUT() { return _BCRYPT_OID_LIST$dwOIDCount$LAYOUT_; }

    static final VarHandle _BCRYPT_OID_LIST$dwOIDCount$VH_ = _BCRYPT_OID_LIST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOIDCount"));
    static final java.lang.invoke.VarHandle _BCRYPT_OID_LIST$dwOIDCount$VH() { return _BCRYPT_OID_LIST$dwOIDCount$VH_; }

    static final MemoryLayout _BCRYPT_OID_LIST$pOIDs$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OID_LIST$pOIDs$LAYOUT() { return _BCRYPT_OID_LIST$pOIDs$LAYOUT_; }

    static final VarHandle _BCRYPT_OID_LIST$pOIDs$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_OID_LIST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pOIDs")));
    static final java.lang.invoke.VarHandle _BCRYPT_OID_LIST$pOIDs$VH() { return _BCRYPT_OID_LIST$pOIDs$VH_; }

    static final MemoryLayout _BCRYPT_PKCS1_PADDING_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszAlgId")
    ).withName("_BCRYPT_PKCS1_PADDING_INFO");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_PKCS1_PADDING_INFO$struct$LAYOUT() { return _BCRYPT_PKCS1_PADDING_INFO$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_PKCS1_PADDING_INFO$pszAlgId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_PKCS1_PADDING_INFO$pszAlgId$LAYOUT() { return _BCRYPT_PKCS1_PADDING_INFO$pszAlgId$LAYOUT_; }

    static final VarHandle _BCRYPT_PKCS1_PADDING_INFO$pszAlgId$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_PKCS1_PADDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszAlgId")));
    static final java.lang.invoke.VarHandle _BCRYPT_PKCS1_PADDING_INFO$pszAlgId$VH() { return _BCRYPT_PKCS1_PADDING_INFO$pszAlgId$VH_; }

    static final MemoryLayout _BCRYPT_PSS_PADDING_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszAlgId"),
        C_LONG.withName("cbSalt"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_BCRYPT_PSS_PADDING_INFO");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_PSS_PADDING_INFO$struct$LAYOUT() { return _BCRYPT_PSS_PADDING_INFO$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_PSS_PADDING_INFO$pszAlgId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_PSS_PADDING_INFO$pszAlgId$LAYOUT() { return _BCRYPT_PSS_PADDING_INFO$pszAlgId$LAYOUT_; }

    static final VarHandle _BCRYPT_PSS_PADDING_INFO$pszAlgId$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_PSS_PADDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszAlgId")));
    static final java.lang.invoke.VarHandle _BCRYPT_PSS_PADDING_INFO$pszAlgId$VH() { return _BCRYPT_PSS_PADDING_INFO$pszAlgId$VH_; }

    static final MemoryLayout _BCRYPT_PSS_PADDING_INFO$cbSalt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_PSS_PADDING_INFO$cbSalt$LAYOUT() { return _BCRYPT_PSS_PADDING_INFO$cbSalt$LAYOUT_; }

    static final VarHandle _BCRYPT_PSS_PADDING_INFO$cbSalt$VH_ = _BCRYPT_PSS_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSalt"));
    static final java.lang.invoke.VarHandle _BCRYPT_PSS_PADDING_INFO$cbSalt$VH() { return _BCRYPT_PSS_PADDING_INFO$cbSalt$VH_; }

    static final MemoryLayout _BCRYPT_OAEP_PADDING_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszAlgId"),
        C_POINTER.withName("pbLabel"),
        C_LONG.withName("cbLabel"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_BCRYPT_OAEP_PADDING_INFO");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OAEP_PADDING_INFO$struct$LAYOUT() { return _BCRYPT_OAEP_PADDING_INFO$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_OAEP_PADDING_INFO$pszAlgId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OAEP_PADDING_INFO$pszAlgId$LAYOUT() { return _BCRYPT_OAEP_PADDING_INFO$pszAlgId$LAYOUT_; }

    static final VarHandle _BCRYPT_OAEP_PADDING_INFO$pszAlgId$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_OAEP_PADDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszAlgId")));
    static final java.lang.invoke.VarHandle _BCRYPT_OAEP_PADDING_INFO$pszAlgId$VH() { return _BCRYPT_OAEP_PADDING_INFO$pszAlgId$VH_; }

    static final MemoryLayout _BCRYPT_OAEP_PADDING_INFO$pbLabel$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OAEP_PADDING_INFO$pbLabel$LAYOUT() { return _BCRYPT_OAEP_PADDING_INFO$pbLabel$LAYOUT_; }

    static final VarHandle _BCRYPT_OAEP_PADDING_INFO$pbLabel$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_OAEP_PADDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbLabel")));
    static final java.lang.invoke.VarHandle _BCRYPT_OAEP_PADDING_INFO$pbLabel$VH() { return _BCRYPT_OAEP_PADDING_INFO$pbLabel$VH_; }

    static final MemoryLayout _BCRYPT_OAEP_PADDING_INFO$cbLabel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_OAEP_PADDING_INFO$cbLabel$LAYOUT() { return _BCRYPT_OAEP_PADDING_INFO$cbLabel$LAYOUT_; }

    static final VarHandle _BCRYPT_OAEP_PADDING_INFO$cbLabel$VH_ = _BCRYPT_OAEP_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbLabel"));
    static final java.lang.invoke.VarHandle _BCRYPT_OAEP_PADDING_INFO$cbLabel$VH() { return _BCRYPT_OAEP_PADDING_INFO$cbLabel$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwInfoVersion"),
        C_POINTER.withName("pbNonce"),
        C_LONG.withName("cbNonce"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbAuthData"),
        C_LONG.withName("cbAuthData"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbTag"),
        C_LONG.withName("cbTag"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbMacContext"),
        C_LONG.withName("cbMacContext"),
        C_LONG.withName("cbAAD"),
        C_LONGLONG.withName("cbData"),
        C_LONG.withName("dwFlags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbSize$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbSize$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbSize$VH_ = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbSize$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbSize$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwInfoVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwInfoVersion$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwInfoVersion$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwInfoVersion$VH_ = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwInfoVersion"));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwInfoVersion$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwInfoVersion$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbNonce$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbNonce$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbNonce$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbNonce$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbNonce")));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbNonce$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbNonce$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbNonce$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbNonce$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbNonce$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbNonce$VH_ = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbNonce"));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbNonce$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbNonce$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbAuthData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbAuthData$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbAuthData$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbAuthData$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbAuthData")));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbAuthData$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbAuthData$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAuthData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAuthData$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAuthData$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAuthData$VH_ = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbAuthData"));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAuthData$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAuthData$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbTag$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbTag$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbTag$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbTag$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbTag")));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbTag$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbTag$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbTag$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbTag$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbTag$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbTag$VH_ = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbTag"));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbTag$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbTag$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbMacContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbMacContext$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbMacContext$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbMacContext$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbMacContext")));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbMacContext$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$pbMacContext$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbMacContext$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbMacContext$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbMacContext$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbMacContext$VH_ = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbMacContext"));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbMacContext$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbMacContext$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAAD$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAAD$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAAD$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAAD$VH_ = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbAAD"));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAAD$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbAAD$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbData$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbData$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbData$VH_ = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("cbData"));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbData$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$cbData$VH_; }

    static final MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwFlags$LAYOUT() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwFlags$LAYOUT_; }

    static final VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwFlags$VH_ = _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwFlags$VH() { return _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO$dwFlags$VH_; }

    static final MemoryLayout _BCryptBuffer$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbBuffer"),
        C_LONG.withName("BufferType"),
        C_POINTER.withName("pvBuffer")
    ).withName("_BCryptBuffer");
    static final jdk.incubator.foreign.MemoryLayout _BCryptBuffer$struct$LAYOUT() { return _BCryptBuffer$struct$LAYOUT_; }

    static final MemoryLayout _BCryptBuffer$cbBuffer$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCryptBuffer$cbBuffer$LAYOUT() { return _BCryptBuffer$cbBuffer$LAYOUT_; }

    static final VarHandle _BCryptBuffer$cbBuffer$VH_ = _BCryptBuffer$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbBuffer"));
    static final java.lang.invoke.VarHandle _BCryptBuffer$cbBuffer$VH() { return _BCryptBuffer$cbBuffer$VH_; }

    static final MemoryLayout _BCryptBuffer$BufferType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCryptBuffer$BufferType$LAYOUT() { return _BCryptBuffer$BufferType$LAYOUT_; }

    static final VarHandle _BCryptBuffer$BufferType$VH_ = _BCryptBuffer$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferType"));
    static final java.lang.invoke.VarHandle _BCryptBuffer$BufferType$VH() { return _BCryptBuffer$BufferType$VH_; }

    static final MemoryLayout _BCryptBuffer$pvBuffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCryptBuffer$pvBuffer$LAYOUT() { return _BCryptBuffer$pvBuffer$LAYOUT_; }

    static final VarHandle _BCryptBuffer$pvBuffer$VH_ = MemoryHandles.asAddressVarHandle(_BCryptBuffer$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvBuffer")));
    static final java.lang.invoke.VarHandle _BCryptBuffer$pvBuffer$VH() { return _BCryptBuffer$pvBuffer$VH_; }

    static final MemoryLayout _BCryptBufferDesc$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ulVersion"),
        C_LONG.withName("cBuffers"),
        C_POINTER.withName("pBuffers")
    ).withName("_BCryptBufferDesc");
    static final jdk.incubator.foreign.MemoryLayout _BCryptBufferDesc$struct$LAYOUT() { return _BCryptBufferDesc$struct$LAYOUT_; }

    static final MemoryLayout _BCryptBufferDesc$ulVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCryptBufferDesc$ulVersion$LAYOUT() { return _BCryptBufferDesc$ulVersion$LAYOUT_; }

    static final VarHandle _BCryptBufferDesc$ulVersion$VH_ = _BCryptBufferDesc$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulVersion"));
    static final java.lang.invoke.VarHandle _BCryptBufferDesc$ulVersion$VH() { return _BCryptBufferDesc$ulVersion$VH_; }

    static final MemoryLayout _BCryptBufferDesc$cBuffers$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCryptBufferDesc$cBuffers$LAYOUT() { return _BCryptBufferDesc$cBuffers$LAYOUT_; }

    static final VarHandle _BCryptBufferDesc$cBuffers$VH_ = _BCryptBufferDesc$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cBuffers"));
    static final java.lang.invoke.VarHandle _BCryptBufferDesc$cBuffers$VH() { return _BCryptBufferDesc$cBuffers$VH_; }

    static final MemoryLayout _BCryptBufferDesc$pBuffers$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCryptBufferDesc$pBuffers$LAYOUT() { return _BCryptBufferDesc$pBuffers$LAYOUT_; }

    static final VarHandle _BCryptBufferDesc$pBuffers$VH_ = MemoryHandles.asAddressVarHandle(_BCryptBufferDesc$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pBuffers")));
    static final java.lang.invoke.VarHandle _BCryptBufferDesc$pBuffers$VH() { return _BCryptBufferDesc$pBuffers$VH_; }

    static final MemoryLayout _BCRYPT_KEY_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Magic")
    ).withName("_BCRYPT_KEY_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_KEY_BLOB$struct$LAYOUT() { return _BCRYPT_KEY_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_KEY_BLOB$Magic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_KEY_BLOB$Magic$LAYOUT() { return _BCRYPT_KEY_BLOB$Magic$LAYOUT_; }

    static final VarHandle _BCRYPT_KEY_BLOB$Magic$VH_ = _BCRYPT_KEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _BCRYPT_KEY_BLOB$Magic$VH() { return _BCRYPT_KEY_BLOB$Magic$VH_; }

    static final MemoryLayout _BCRYPT_RSAKEY_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Magic"),
        C_LONG.withName("BitLength"),
        C_LONG.withName("cbPublicExp"),
        C_LONG.withName("cbModulus"),
        C_LONG.withName("cbPrime1"),
        C_LONG.withName("cbPrime2")
    ).withName("_BCRYPT_RSAKEY_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_RSAKEY_BLOB$struct$LAYOUT() { return _BCRYPT_RSAKEY_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_RSAKEY_BLOB$Magic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_RSAKEY_BLOB$Magic$LAYOUT() { return _BCRYPT_RSAKEY_BLOB$Magic$LAYOUT_; }

    static final VarHandle _BCRYPT_RSAKEY_BLOB$Magic$VH_ = _BCRYPT_RSAKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _BCRYPT_RSAKEY_BLOB$Magic$VH() { return _BCRYPT_RSAKEY_BLOB$Magic$VH_; }

    static final MemoryLayout _BCRYPT_RSAKEY_BLOB$BitLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_RSAKEY_BLOB$BitLength$LAYOUT() { return _BCRYPT_RSAKEY_BLOB$BitLength$LAYOUT_; }

    static final VarHandle _BCRYPT_RSAKEY_BLOB$BitLength$VH_ = _BCRYPT_RSAKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BitLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_RSAKEY_BLOB$BitLength$VH() { return _BCRYPT_RSAKEY_BLOB$BitLength$VH_; }

    static final MemoryLayout _BCRYPT_RSAKEY_BLOB$cbPublicExp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_RSAKEY_BLOB$cbPublicExp$LAYOUT() { return _BCRYPT_RSAKEY_BLOB$cbPublicExp$LAYOUT_; }

    static final VarHandle _BCRYPT_RSAKEY_BLOB$cbPublicExp$VH_ = _BCRYPT_RSAKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPublicExp"));
    static final java.lang.invoke.VarHandle _BCRYPT_RSAKEY_BLOB$cbPublicExp$VH() { return _BCRYPT_RSAKEY_BLOB$cbPublicExp$VH_; }

    static final MemoryLayout _BCRYPT_RSAKEY_BLOB$cbModulus$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_RSAKEY_BLOB$cbModulus$LAYOUT() { return _BCRYPT_RSAKEY_BLOB$cbModulus$LAYOUT_; }

    static final VarHandle _BCRYPT_RSAKEY_BLOB$cbModulus$VH_ = _BCRYPT_RSAKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbModulus"));
    static final java.lang.invoke.VarHandle _BCRYPT_RSAKEY_BLOB$cbModulus$VH() { return _BCRYPT_RSAKEY_BLOB$cbModulus$VH_; }

    static final MemoryLayout _BCRYPT_RSAKEY_BLOB$cbPrime1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_RSAKEY_BLOB$cbPrime1$LAYOUT() { return _BCRYPT_RSAKEY_BLOB$cbPrime1$LAYOUT_; }

    static final VarHandle _BCRYPT_RSAKEY_BLOB$cbPrime1$VH_ = _BCRYPT_RSAKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPrime1"));
    static final java.lang.invoke.VarHandle _BCRYPT_RSAKEY_BLOB$cbPrime1$VH() { return _BCRYPT_RSAKEY_BLOB$cbPrime1$VH_; }

    static final MemoryLayout _BCRYPT_RSAKEY_BLOB$cbPrime2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_RSAKEY_BLOB$cbPrime2$LAYOUT() { return _BCRYPT_RSAKEY_BLOB$cbPrime2$LAYOUT_; }

    static final VarHandle _BCRYPT_RSAKEY_BLOB$cbPrime2$VH_ = _BCRYPT_RSAKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPrime2"));
    static final java.lang.invoke.VarHandle _BCRYPT_RSAKEY_BLOB$cbPrime2$VH() { return _BCRYPT_RSAKEY_BLOB$cbPrime2$VH_; }

    static final MemoryLayout _BCRYPT_ECCKEY_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwMagic"),
        C_LONG.withName("cbKey")
    ).withName("_BCRYPT_ECCKEY_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCKEY_BLOB$struct$LAYOUT() { return _BCRYPT_ECCKEY_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_ECCKEY_BLOB$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCKEY_BLOB$dwMagic$LAYOUT() { return _BCRYPT_ECCKEY_BLOB$dwMagic$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCKEY_BLOB$dwMagic$VH_ = _BCRYPT_ECCKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCKEY_BLOB$dwMagic$VH() { return _BCRYPT_ECCKEY_BLOB$dwMagic$VH_; }

    static final MemoryLayout _BCRYPT_ECCKEY_BLOB$cbKey$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCKEY_BLOB$cbKey$LAYOUT() { return _BCRYPT_ECCKEY_BLOB$cbKey$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCKEY_BLOB$cbKey$VH_ = _BCRYPT_ECCKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKey"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCKEY_BLOB$cbKey$VH() { return _BCRYPT_ECCKEY_BLOB$cbKey$VH_; }

    static final MemoryLayout _SSL_ECCKEY_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwCurveType"),
        C_LONG.withName("cbKey")
    ).withName("_SSL_ECCKEY_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _SSL_ECCKEY_BLOB$struct$LAYOUT() { return _SSL_ECCKEY_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _SSL_ECCKEY_BLOB$dwCurveType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SSL_ECCKEY_BLOB$dwCurveType$LAYOUT() { return _SSL_ECCKEY_BLOB$dwCurveType$LAYOUT_; }

    static final VarHandle _SSL_ECCKEY_BLOB$dwCurveType$VH_ = _SSL_ECCKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCurveType"));
    static final java.lang.invoke.VarHandle _SSL_ECCKEY_BLOB$dwCurveType$VH() { return _SSL_ECCKEY_BLOB$dwCurveType$VH_; }

    static final MemoryLayout _SSL_ECCKEY_BLOB$cbKey$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SSL_ECCKEY_BLOB$cbKey$LAYOUT() { return _SSL_ECCKEY_BLOB$cbKey$LAYOUT_; }

    static final VarHandle _SSL_ECCKEY_BLOB$cbKey$VH_ = _SSL_ECCKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKey"));
    static final java.lang.invoke.VarHandle _SSL_ECCKEY_BLOB$cbKey$VH() { return _SSL_ECCKEY_BLOB$cbKey$VH_; }

    static final int BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE() { return (int)1L; }

    static final int BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE() { return (int)2L; }

    static final int BCRYPT_ECC_PRIME_MONTGOMERY_CURVE() { return (int)3L; }

    static final int BCRYPT_NO_CURVE_GENERATION_ALG_ID() { return (int)0L; }

    static final MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwMagic"),
        C_LONG.withName("dwVersion"),
        C_INT.withName("dwCurveType"),
        C_INT.withName("dwCurveGenerationAlgId"),
        C_LONG.withName("cbFieldLength"),
        C_LONG.withName("cbSubgroupOrder"),
        C_LONG.withName("cbCofactor"),
        C_LONG.withName("cbSeed")
    ).withName("_BCRYPT_ECCFULLKEY_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT() { return _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$dwMagic$LAYOUT() { return _BCRYPT_ECCFULLKEY_BLOB$dwMagic$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCFULLKEY_BLOB$dwMagic$VH_ = _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCFULLKEY_BLOB$dwMagic$VH() { return _BCRYPT_ECCFULLKEY_BLOB$dwMagic$VH_; }

    static final MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$dwVersion$LAYOUT() { return _BCRYPT_ECCFULLKEY_BLOB$dwVersion$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCFULLKEY_BLOB$dwVersion$VH_ = _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCFULLKEY_BLOB$dwVersion$VH() { return _BCRYPT_ECCFULLKEY_BLOB$dwVersion$VH_; }

    static final MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$dwCurveType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$dwCurveType$LAYOUT() { return _BCRYPT_ECCFULLKEY_BLOB$dwCurveType$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCFULLKEY_BLOB$dwCurveType$VH_ = _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCurveType"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCFULLKEY_BLOB$dwCurveType$VH() { return _BCRYPT_ECCFULLKEY_BLOB$dwCurveType$VH_; }

    static final MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$dwCurveGenerationAlgId$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$dwCurveGenerationAlgId$LAYOUT() { return _BCRYPT_ECCFULLKEY_BLOB$dwCurveGenerationAlgId$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCFULLKEY_BLOB$dwCurveGenerationAlgId$VH_ = _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCurveGenerationAlgId"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCFULLKEY_BLOB$dwCurveGenerationAlgId$VH() { return _BCRYPT_ECCFULLKEY_BLOB$dwCurveGenerationAlgId$VH_; }

    static final MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$cbFieldLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$cbFieldLength$LAYOUT() { return _BCRYPT_ECCFULLKEY_BLOB$cbFieldLength$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCFULLKEY_BLOB$cbFieldLength$VH_ = _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbFieldLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCFULLKEY_BLOB$cbFieldLength$VH() { return _BCRYPT_ECCFULLKEY_BLOB$cbFieldLength$VH_; }

    static final MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$cbSubgroupOrder$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$cbSubgroupOrder$LAYOUT() { return _BCRYPT_ECCFULLKEY_BLOB$cbSubgroupOrder$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCFULLKEY_BLOB$cbSubgroupOrder$VH_ = _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSubgroupOrder"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCFULLKEY_BLOB$cbSubgroupOrder$VH() { return _BCRYPT_ECCFULLKEY_BLOB$cbSubgroupOrder$VH_; }

    static final MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$cbCofactor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$cbCofactor$LAYOUT() { return _BCRYPT_ECCFULLKEY_BLOB$cbCofactor$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCFULLKEY_BLOB$cbCofactor$VH_ = _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbCofactor"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCFULLKEY_BLOB$cbCofactor$VH() { return _BCRYPT_ECCFULLKEY_BLOB$cbCofactor$VH_; }

    static final MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$cbSeed$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECCFULLKEY_BLOB$cbSeed$LAYOUT() { return _BCRYPT_ECCFULLKEY_BLOB$cbSeed$LAYOUT_; }

    static final VarHandle _BCRYPT_ECCFULLKEY_BLOB$cbSeed$VH_ = _BCRYPT_ECCFULLKEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSeed"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECCFULLKEY_BLOB$cbSeed$VH() { return _BCRYPT_ECCFULLKEY_BLOB$cbSeed$VH_; }

    static final MemoryLayout _BCRYPT_DH_KEY_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwMagic"),
        C_LONG.withName("cbKey")
    ).withName("_BCRYPT_DH_KEY_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DH_KEY_BLOB$struct$LAYOUT() { return _BCRYPT_DH_KEY_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_DH_KEY_BLOB$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DH_KEY_BLOB$dwMagic$LAYOUT() { return _BCRYPT_DH_KEY_BLOB$dwMagic$LAYOUT_; }

    static final VarHandle _BCRYPT_DH_KEY_BLOB$dwMagic$VH_ = _BCRYPT_DH_KEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _BCRYPT_DH_KEY_BLOB$dwMagic$VH() { return _BCRYPT_DH_KEY_BLOB$dwMagic$VH_; }

    static final MemoryLayout _BCRYPT_DH_KEY_BLOB$cbKey$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DH_KEY_BLOB$cbKey$LAYOUT() { return _BCRYPT_DH_KEY_BLOB$cbKey$LAYOUT_; }

    static final VarHandle _BCRYPT_DH_KEY_BLOB$cbKey$VH_ = _BCRYPT_DH_KEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKey"));
    static final java.lang.invoke.VarHandle _BCRYPT_DH_KEY_BLOB$cbKey$VH() { return _BCRYPT_DH_KEY_BLOB$cbKey$VH_; }

    static final MemoryLayout _BCRYPT_DH_PARAMETER_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbLength"),
        C_LONG.withName("dwMagic"),
        C_LONG.withName("cbKeyLength")
    ).withName("_BCRYPT_DH_PARAMETER_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DH_PARAMETER_HEADER$struct$LAYOUT() { return _BCRYPT_DH_PARAMETER_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_DH_PARAMETER_HEADER$cbLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DH_PARAMETER_HEADER$cbLength$LAYOUT() { return _BCRYPT_DH_PARAMETER_HEADER$cbLength$LAYOUT_; }

    static final VarHandle _BCRYPT_DH_PARAMETER_HEADER$cbLength$VH_ = _BCRYPT_DH_PARAMETER_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_DH_PARAMETER_HEADER$cbLength$VH() { return _BCRYPT_DH_PARAMETER_HEADER$cbLength$VH_; }

    static final MemoryLayout _BCRYPT_DH_PARAMETER_HEADER$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DH_PARAMETER_HEADER$dwMagic$LAYOUT() { return _BCRYPT_DH_PARAMETER_HEADER$dwMagic$LAYOUT_; }

    static final VarHandle _BCRYPT_DH_PARAMETER_HEADER$dwMagic$VH_ = _BCRYPT_DH_PARAMETER_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _BCRYPT_DH_PARAMETER_HEADER$dwMagic$VH() { return _BCRYPT_DH_PARAMETER_HEADER$dwMagic$VH_; }

    static final MemoryLayout _BCRYPT_DH_PARAMETER_HEADER$cbKeyLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DH_PARAMETER_HEADER$cbKeyLength$LAYOUT() { return _BCRYPT_DH_PARAMETER_HEADER$cbKeyLength$LAYOUT_; }

    static final VarHandle _BCRYPT_DH_PARAMETER_HEADER$cbKeyLength$VH_ = _BCRYPT_DH_PARAMETER_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKeyLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_DH_PARAMETER_HEADER$cbKeyLength$VH() { return _BCRYPT_DH_PARAMETER_HEADER$cbKeyLength$VH_; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwMagic"),
        C_LONG.withName("cbKey"),
        MemoryLayout.ofSequence(4, C_CHAR).withName("Count"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Seed"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("q")
    ).withName("_BCRYPT_DSA_KEY_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB$struct$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB$dwMagic$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB$dwMagic$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_KEY_BLOB$dwMagic$VH_ = _BCRYPT_DSA_KEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_KEY_BLOB$dwMagic$VH() { return _BCRYPT_DSA_KEY_BLOB$dwMagic$VH_; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB$cbKey$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB$cbKey$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB$cbKey$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_KEY_BLOB$cbKey$VH_ = _BCRYPT_DSA_KEY_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKey"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_KEY_BLOB$cbKey$VH() { return _BCRYPT_DSA_KEY_BLOB$cbKey$VH_; }

    static final int DSA_HASH_ALGORITHM_SHA1() { return (int)0L; }

    static final int DSA_HASH_ALGORITHM_SHA256() { return (int)1L; }

    static final int DSA_HASH_ALGORITHM_SHA512() { return (int)2L; }

    static final int DSA_FIPS186_2() { return (int)0L; }

    static final int DSA_FIPS186_3() { return (int)1L; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwMagic"),
        C_LONG.withName("cbKey"),
        C_INT.withName("hashAlgorithm"),
        C_INT.withName("standardVersion"),
        C_LONG.withName("cbSeedLength"),
        C_LONG.withName("cbGroupSize"),
        MemoryLayout.ofSequence(4, C_CHAR).withName("Count")
    ).withName("_BCRYPT_DSA_KEY_BLOB_V2");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$struct$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB_V2$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$dwMagic$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB_V2$dwMagic$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_KEY_BLOB_V2$dwMagic$VH_ = _BCRYPT_DSA_KEY_BLOB_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_KEY_BLOB_V2$dwMagic$VH() { return _BCRYPT_DSA_KEY_BLOB_V2$dwMagic$VH_; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$cbKey$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$cbKey$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB_V2$cbKey$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_KEY_BLOB_V2$cbKey$VH_ = _BCRYPT_DSA_KEY_BLOB_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKey"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_KEY_BLOB_V2$cbKey$VH() { return _BCRYPT_DSA_KEY_BLOB_V2$cbKey$VH_; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$hashAlgorithm$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$hashAlgorithm$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB_V2$hashAlgorithm$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_KEY_BLOB_V2$hashAlgorithm$VH_ = _BCRYPT_DSA_KEY_BLOB_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("hashAlgorithm"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_KEY_BLOB_V2$hashAlgorithm$VH() { return _BCRYPT_DSA_KEY_BLOB_V2$hashAlgorithm$VH_; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$standardVersion$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$standardVersion$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB_V2$standardVersion$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_KEY_BLOB_V2$standardVersion$VH_ = _BCRYPT_DSA_KEY_BLOB_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("standardVersion"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_KEY_BLOB_V2$standardVersion$VH() { return _BCRYPT_DSA_KEY_BLOB_V2$standardVersion$VH_; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$cbSeedLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$cbSeedLength$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB_V2$cbSeedLength$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_KEY_BLOB_V2$cbSeedLength$VH_ = _BCRYPT_DSA_KEY_BLOB_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSeedLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_KEY_BLOB_V2$cbSeedLength$VH() { return _BCRYPT_DSA_KEY_BLOB_V2$cbSeedLength$VH_; }

    static final MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$cbGroupSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_KEY_BLOB_V2$cbGroupSize$LAYOUT() { return _BCRYPT_DSA_KEY_BLOB_V2$cbGroupSize$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_KEY_BLOB_V2$cbGroupSize$VH_ = _BCRYPT_DSA_KEY_BLOB_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbGroupSize"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_KEY_BLOB_V2$cbGroupSize$VH() { return _BCRYPT_DSA_KEY_BLOB_V2$cbGroupSize$VH_; }

    static final MemoryLayout _BCRYPT_KEY_DATA_BLOB_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwMagic"),
        C_LONG.withName("dwVersion"),
        C_LONG.withName("cbKeyData")
    ).withName("_BCRYPT_KEY_DATA_BLOB_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_KEY_DATA_BLOB_HEADER$struct$LAYOUT() { return _BCRYPT_KEY_DATA_BLOB_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_KEY_DATA_BLOB_HEADER$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_KEY_DATA_BLOB_HEADER$dwMagic$LAYOUT() { return _BCRYPT_KEY_DATA_BLOB_HEADER$dwMagic$LAYOUT_; }

    static final VarHandle _BCRYPT_KEY_DATA_BLOB_HEADER$dwMagic$VH_ = _BCRYPT_KEY_DATA_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _BCRYPT_KEY_DATA_BLOB_HEADER$dwMagic$VH() { return _BCRYPT_KEY_DATA_BLOB_HEADER$dwMagic$VH_; }

    static final MemoryLayout _BCRYPT_KEY_DATA_BLOB_HEADER$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_KEY_DATA_BLOB_HEADER$dwVersion$LAYOUT() { return _BCRYPT_KEY_DATA_BLOB_HEADER$dwVersion$LAYOUT_; }

    static final VarHandle _BCRYPT_KEY_DATA_BLOB_HEADER$dwVersion$VH_ = _BCRYPT_KEY_DATA_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _BCRYPT_KEY_DATA_BLOB_HEADER$dwVersion$VH() { return _BCRYPT_KEY_DATA_BLOB_HEADER$dwVersion$VH_; }

    static final MemoryLayout _BCRYPT_KEY_DATA_BLOB_HEADER$cbKeyData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_KEY_DATA_BLOB_HEADER$cbKeyData$LAYOUT() { return _BCRYPT_KEY_DATA_BLOB_HEADER$cbKeyData$LAYOUT_; }

    static final VarHandle _BCRYPT_KEY_DATA_BLOB_HEADER$cbKeyData$VH_ = _BCRYPT_KEY_DATA_BLOB_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKeyData"));
    static final java.lang.invoke.VarHandle _BCRYPT_KEY_DATA_BLOB_HEADER$cbKeyData$VH() { return _BCRYPT_KEY_DATA_BLOB_HEADER$cbKeyData$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbLength"),
        C_LONG.withName("dwMagic"),
        C_LONG.withName("cbKeyLength"),
        MemoryLayout.ofSequence(4, C_CHAR).withName("Count"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Seed"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("q")
    ).withName("_BCRYPT_DSA_PARAMETER_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER$struct$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER$cbLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER$cbLength$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER$cbLength$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER$cbLength$VH_ = _BCRYPT_DSA_PARAMETER_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER$cbLength$VH() { return _BCRYPT_DSA_PARAMETER_HEADER$cbLength$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER$dwMagic$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER$dwMagic$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER$dwMagic$VH_ = _BCRYPT_DSA_PARAMETER_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER$dwMagic$VH() { return _BCRYPT_DSA_PARAMETER_HEADER$dwMagic$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER$cbKeyLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER$cbKeyLength$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER$cbKeyLength$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER$cbKeyLength$VH_ = _BCRYPT_DSA_PARAMETER_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKeyLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER$cbKeyLength$VH() { return _BCRYPT_DSA_PARAMETER_HEADER$cbKeyLength$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbLength"),
        C_LONG.withName("dwMagic"),
        C_LONG.withName("cbKeyLength"),
        C_INT.withName("hashAlgorithm"),
        C_INT.withName("standardVersion"),
        C_LONG.withName("cbSeedLength"),
        C_LONG.withName("cbGroupSize"),
        MemoryLayout.ofSequence(4, C_CHAR).withName("Count")
    ).withName("_BCRYPT_DSA_PARAMETER_HEADER_V2");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$cbLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$cbLength$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$cbLength$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$cbLength$VH_ = _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$cbLength$VH() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$cbLength$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$dwMagic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$dwMagic$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$dwMagic$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$dwMagic$VH_ = _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMagic"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$dwMagic$VH() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$dwMagic$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$cbKeyLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$cbKeyLength$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$cbKeyLength$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$cbKeyLength$VH_ = _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKeyLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$cbKeyLength$VH() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$cbKeyLength$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$hashAlgorithm$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$hashAlgorithm$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$hashAlgorithm$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$hashAlgorithm$VH_ = _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("hashAlgorithm"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$hashAlgorithm$VH() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$hashAlgorithm$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$standardVersion$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$standardVersion$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$standardVersion$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$standardVersion$VH_ = _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("standardVersion"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$standardVersion$VH() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$standardVersion$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$cbSeedLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$cbSeedLength$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$cbSeedLength$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$cbSeedLength$VH_ = _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSeedLength"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$cbSeedLength$VH() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$cbSeedLength$VH_; }

    static final MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$cbGroupSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_DSA_PARAMETER_HEADER_V2$cbGroupSize$LAYOUT() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$cbGroupSize$LAYOUT_; }

    static final VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$cbGroupSize$VH_ = _BCRYPT_DSA_PARAMETER_HEADER_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbGroupSize"));
    static final java.lang.invoke.VarHandle _BCRYPT_DSA_PARAMETER_HEADER_V2$cbGroupSize$VH() { return _BCRYPT_DSA_PARAMETER_HEADER_V2$cbGroupSize$VH_; }

    static final MemoryLayout _BCRYPT_ECC_CURVE_NAMES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwEccCurveNames"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pEccCurveNames")
    ).withName("_BCRYPT_ECC_CURVE_NAMES");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECC_CURVE_NAMES$struct$LAYOUT() { return _BCRYPT_ECC_CURVE_NAMES$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_ECC_CURVE_NAMES$dwEccCurveNames$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECC_CURVE_NAMES$dwEccCurveNames$LAYOUT() { return _BCRYPT_ECC_CURVE_NAMES$dwEccCurveNames$LAYOUT_; }

    static final VarHandle _BCRYPT_ECC_CURVE_NAMES$dwEccCurveNames$VH_ = _BCRYPT_ECC_CURVE_NAMES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwEccCurveNames"));
    static final java.lang.invoke.VarHandle _BCRYPT_ECC_CURVE_NAMES$dwEccCurveNames$VH() { return _BCRYPT_ECC_CURVE_NAMES$dwEccCurveNames$VH_; }

    static final MemoryLayout _BCRYPT_ECC_CURVE_NAMES$pEccCurveNames$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ECC_CURVE_NAMES$pEccCurveNames$LAYOUT() { return _BCRYPT_ECC_CURVE_NAMES$pEccCurveNames$LAYOUT_; }

    static final VarHandle _BCRYPT_ECC_CURVE_NAMES$pEccCurveNames$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_ECC_CURVE_NAMES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pEccCurveNames")));
    static final java.lang.invoke.VarHandle _BCRYPT_ECC_CURVE_NAMES$pEccCurveNames$VH() { return _BCRYPT_ECC_CURVE_NAMES$pEccCurveNames$VH_; }

    static final int BCRYPT_HASH_OPERATION_HASH_DATA() { return (int)1L; }

    static final int BCRYPT_HASH_OPERATION_FINISH_HASH() { return (int)2L; }

    static final MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("iHash"),
        C_INT.withName("hashOperation"),
        C_POINTER.withName("pbBuffer"),
        C_LONG.withName("cbBuffer"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_BCRYPT_MULTI_HASH_OPERATION");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$struct$LAYOUT() { return _BCRYPT_MULTI_HASH_OPERATION$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$iHash$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$iHash$LAYOUT() { return _BCRYPT_MULTI_HASH_OPERATION$iHash$LAYOUT_; }

    static final VarHandle _BCRYPT_MULTI_HASH_OPERATION$iHash$VH_ = _BCRYPT_MULTI_HASH_OPERATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iHash"));
    static final java.lang.invoke.VarHandle _BCRYPT_MULTI_HASH_OPERATION$iHash$VH() { return _BCRYPT_MULTI_HASH_OPERATION$iHash$VH_; }

    static final MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$hashOperation$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$hashOperation$LAYOUT() { return _BCRYPT_MULTI_HASH_OPERATION$hashOperation$LAYOUT_; }

    static final VarHandle _BCRYPT_MULTI_HASH_OPERATION$hashOperation$VH_ = _BCRYPT_MULTI_HASH_OPERATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("hashOperation"));
    static final java.lang.invoke.VarHandle _BCRYPT_MULTI_HASH_OPERATION$hashOperation$VH() { return _BCRYPT_MULTI_HASH_OPERATION$hashOperation$VH_; }

    static final MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$pbBuffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$pbBuffer$LAYOUT() { return _BCRYPT_MULTI_HASH_OPERATION$pbBuffer$LAYOUT_; }

    static final VarHandle _BCRYPT_MULTI_HASH_OPERATION$pbBuffer$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_MULTI_HASH_OPERATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbBuffer")));
    static final java.lang.invoke.VarHandle _BCRYPT_MULTI_HASH_OPERATION$pbBuffer$VH() { return _BCRYPT_MULTI_HASH_OPERATION$pbBuffer$VH_; }

    static final MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$cbBuffer$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_MULTI_HASH_OPERATION$cbBuffer$LAYOUT() { return _BCRYPT_MULTI_HASH_OPERATION$cbBuffer$LAYOUT_; }

    static final VarHandle _BCRYPT_MULTI_HASH_OPERATION$cbBuffer$VH_ = _BCRYPT_MULTI_HASH_OPERATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbBuffer"));
    static final java.lang.invoke.VarHandle _BCRYPT_MULTI_HASH_OPERATION$cbBuffer$VH() { return _BCRYPT_MULTI_HASH_OPERATION$cbBuffer$VH_; }

    static final int BCRYPT_OPERATION_TYPE_HASH() { return (int)1L; }

    static final MemoryLayout _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbPerObject"),
        C_LONG.withName("cbPerElement")
    ).withName("_BCRYPT_MULTI_OBJECT_LENGTH_STRUCT");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$struct$LAYOUT() { return _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerObject$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerObject$LAYOUT() { return _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerObject$LAYOUT_; }

    static final VarHandle _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerObject$VH_ = _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPerObject"));
    static final java.lang.invoke.VarHandle _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerObject$VH() { return _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerObject$VH_; }

    static final MemoryLayout _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerElement$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerElement$LAYOUT() { return _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerElement$LAYOUT_; }

    static final VarHandle _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerElement$VH_ = _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPerElement"));
    static final java.lang.invoke.VarHandle _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerElement$VH() { return _BCRYPT_MULTI_OBJECT_LENGTH_STRUCT$cbPerElement$VH_; }

    static final FunctionDescriptor BCryptOpenAlgorithmProvider$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptOpenAlgorithmProvider$FUNC() { return BCryptOpenAlgorithmProvider$FUNC_; }

    static final MethodHandle BCryptOpenAlgorithmProvider$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptOpenAlgorithmProvider",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        BCryptOpenAlgorithmProvider$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptOpenAlgorithmProvider$MH() { return BCryptOpenAlgorithmProvider$MH_; }

    static final MemoryLayout _BCRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszName"),
        C_LONG.withName("dwClass"),
        C_LONG.withName("dwFlags")
    ).withName("_BCRYPT_ALGORITHM_IDENTIFIER");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT() { return _BCRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_ALGORITHM_IDENTIFIER$pszName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ALGORITHM_IDENTIFIER$pszName$LAYOUT() { return _BCRYPT_ALGORITHM_IDENTIFIER$pszName$LAYOUT_; }

    static final VarHandle _BCRYPT_ALGORITHM_IDENTIFIER$pszName$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszName")));
    static final java.lang.invoke.VarHandle _BCRYPT_ALGORITHM_IDENTIFIER$pszName$VH() { return _BCRYPT_ALGORITHM_IDENTIFIER$pszName$VH_; }

    static final MemoryLayout _BCRYPT_ALGORITHM_IDENTIFIER$dwClass$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ALGORITHM_IDENTIFIER$dwClass$LAYOUT() { return _BCRYPT_ALGORITHM_IDENTIFIER$dwClass$LAYOUT_; }

    static final VarHandle _BCRYPT_ALGORITHM_IDENTIFIER$dwClass$VH_ = _BCRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwClass"));
    static final java.lang.invoke.VarHandle _BCRYPT_ALGORITHM_IDENTIFIER$dwClass$VH() { return _BCRYPT_ALGORITHM_IDENTIFIER$dwClass$VH_; }

    static final MemoryLayout _BCRYPT_ALGORITHM_IDENTIFIER$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_ALGORITHM_IDENTIFIER$dwFlags$LAYOUT() { return _BCRYPT_ALGORITHM_IDENTIFIER$dwFlags$LAYOUT_; }

    static final VarHandle _BCRYPT_ALGORITHM_IDENTIFIER$dwFlags$VH_ = _BCRYPT_ALGORITHM_IDENTIFIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _BCRYPT_ALGORITHM_IDENTIFIER$dwFlags$VH() { return _BCRYPT_ALGORITHM_IDENTIFIER$dwFlags$VH_; }

    static final FunctionDescriptor BCryptEnumAlgorithms$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptEnumAlgorithms$FUNC() { return BCryptEnumAlgorithms$FUNC_; }

    static final MethodHandle BCryptEnumAlgorithms$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptEnumAlgorithms",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        BCryptEnumAlgorithms$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptEnumAlgorithms$MH() { return BCryptEnumAlgorithms$MH_; }

    static final MemoryLayout _BCRYPT_PROVIDER_NAME$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszProviderName")
    ).withName("_BCRYPT_PROVIDER_NAME");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_PROVIDER_NAME$struct$LAYOUT() { return _BCRYPT_PROVIDER_NAME$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_PROVIDER_NAME$pszProviderName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_PROVIDER_NAME$pszProviderName$LAYOUT() { return _BCRYPT_PROVIDER_NAME$pszProviderName$LAYOUT_; }

    static final VarHandle _BCRYPT_PROVIDER_NAME$pszProviderName$VH_ = MemoryHandles.asAddressVarHandle(_BCRYPT_PROVIDER_NAME$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszProviderName")));
    static final java.lang.invoke.VarHandle _BCRYPT_PROVIDER_NAME$pszProviderName$VH() { return _BCRYPT_PROVIDER_NAME$pszProviderName$VH_; }

    static final FunctionDescriptor BCryptEnumProviders$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptEnumProviders$FUNC() { return BCryptEnumProviders$FUNC_; }

    static final MethodHandle BCryptEnumProviders$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptEnumProviders",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        BCryptEnumProviders$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptEnumProviders$MH() { return BCryptEnumProviders$MH_; }

    static final FunctionDescriptor BCryptGetProperty$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptGetProperty$FUNC() { return BCryptGetProperty$FUNC_; }

    static final MethodHandle BCryptGetProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptGetProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        BCryptGetProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptGetProperty$MH() { return BCryptGetProperty$MH_; }

    static final FunctionDescriptor BCryptSetProperty$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptSetProperty$FUNC() { return BCryptSetProperty$FUNC_; }

    static final MethodHandle BCryptSetProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptSetProperty",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        BCryptSetProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptSetProperty$MH() { return BCryptSetProperty$MH_; }

    static final FunctionDescriptor BCryptCloseAlgorithmProvider$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptCloseAlgorithmProvider$FUNC() { return BCryptCloseAlgorithmProvider$FUNC_; }

    static final MethodHandle BCryptCloseAlgorithmProvider$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptCloseAlgorithmProvider",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        BCryptCloseAlgorithmProvider$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptCloseAlgorithmProvider$MH() { return BCryptCloseAlgorithmProvider$MH_; }

    static final FunctionDescriptor BCryptFreeBuffer$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptFreeBuffer$FUNC() { return BCryptFreeBuffer$FUNC_; }

    static final MethodHandle BCryptFreeBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptFreeBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        BCryptFreeBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptFreeBuffer$MH() { return BCryptFreeBuffer$MH_; }

    static final FunctionDescriptor BCryptGenerateSymmetricKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptGenerateSymmetricKey$FUNC() { return BCryptGenerateSymmetricKey$FUNC_; }

    static final MethodHandle BCryptGenerateSymmetricKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptGenerateSymmetricKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        BCryptGenerateSymmetricKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptGenerateSymmetricKey$MH() { return BCryptGenerateSymmetricKey$MH_; }

    static final FunctionDescriptor BCryptGenerateKeyPair$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptGenerateKeyPair$FUNC() { return BCryptGenerateKeyPair$FUNC_; }

    static final MethodHandle BCryptGenerateKeyPair$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptGenerateKeyPair",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        BCryptGenerateKeyPair$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptGenerateKeyPair$MH() { return BCryptGenerateKeyPair$MH_; }

    static final FunctionDescriptor BCryptEncrypt$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptEncrypt$FUNC() { return BCryptEncrypt$FUNC_; }

    static final MethodHandle BCryptEncrypt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptEncrypt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        BCryptEncrypt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptEncrypt$MH() { return BCryptEncrypt$MH_; }

    static final FunctionDescriptor BCryptDecrypt$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDecrypt$FUNC() { return BCryptDecrypt$FUNC_; }

    static final MethodHandle BCryptDecrypt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDecrypt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        BCryptDecrypt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDecrypt$MH() { return BCryptDecrypt$MH_; }

    static final FunctionDescriptor BCryptExportKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptExportKey$FUNC() { return BCryptExportKey$FUNC_; }

    static final MethodHandle BCryptExportKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptExportKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        BCryptExportKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptExportKey$MH() { return BCryptExportKey$MH_; }

    static final FunctionDescriptor BCryptImportKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptImportKey$FUNC() { return BCryptImportKey$FUNC_; }

    static final MethodHandle BCryptImportKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptImportKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        BCryptImportKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptImportKey$MH() { return BCryptImportKey$MH_; }

    static final FunctionDescriptor BCryptImportKeyPair$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptImportKeyPair$FUNC() { return BCryptImportKeyPair$FUNC_; }

    static final MethodHandle BCryptImportKeyPair$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptImportKeyPair",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        BCryptImportKeyPair$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptImportKeyPair$MH() { return BCryptImportKeyPair$MH_; }

    static final FunctionDescriptor BCryptDuplicateKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDuplicateKey$FUNC() { return BCryptDuplicateKey$FUNC_; }

    static final MethodHandle BCryptDuplicateKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDuplicateKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        BCryptDuplicateKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDuplicateKey$MH() { return BCryptDuplicateKey$MH_; }

    static final FunctionDescriptor BCryptFinalizeKeyPair$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptFinalizeKeyPair$FUNC() { return BCryptFinalizeKeyPair$FUNC_; }

    static final MethodHandle BCryptFinalizeKeyPair$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptFinalizeKeyPair",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        BCryptFinalizeKeyPair$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptFinalizeKeyPair$MH() { return BCryptFinalizeKeyPair$MH_; }

    static final FunctionDescriptor BCryptDestroyKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDestroyKey$FUNC() { return BCryptDestroyKey$FUNC_; }

    static final MethodHandle BCryptDestroyKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDestroyKey",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptDestroyKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDestroyKey$MH() { return BCryptDestroyKey$MH_; }

    static final FunctionDescriptor BCryptDestroySecret$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDestroySecret$FUNC() { return BCryptDestroySecret$FUNC_; }

    static final MethodHandle BCryptDestroySecret$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDestroySecret",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptDestroySecret$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDestroySecret$MH() { return BCryptDestroySecret$MH_; }

    static final FunctionDescriptor BCryptSignHash$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptSignHash$FUNC() { return BCryptSignHash$FUNC_; }

    static final MethodHandle BCryptSignHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptSignHash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        BCryptSignHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptSignHash$MH() { return BCryptSignHash$MH_; }

    static final FunctionDescriptor BCryptVerifySignature$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptVerifySignature$FUNC() { return BCryptVerifySignature$FUNC_; }

    static final MethodHandle BCryptVerifySignature$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptVerifySignature",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        BCryptVerifySignature$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptVerifySignature$MH() { return BCryptVerifySignature$MH_; }

    static final FunctionDescriptor BCryptSecretAgreement$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptSecretAgreement$FUNC() { return BCryptSecretAgreement$FUNC_; }

    static final MethodHandle BCryptSecretAgreement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptSecretAgreement",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        BCryptSecretAgreement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptSecretAgreement$MH() { return BCryptSecretAgreement$MH_; }

    static final FunctionDescriptor BCryptDeriveKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDeriveKey$FUNC() { return BCryptDeriveKey$FUNC_; }

    static final MethodHandle BCryptDeriveKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDeriveKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        BCryptDeriveKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDeriveKey$MH() { return BCryptDeriveKey$MH_; }

    static final FunctionDescriptor BCryptKeyDerivation$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptKeyDerivation$FUNC() { return BCryptKeyDerivation$FUNC_; }

    static final MethodHandle BCryptKeyDerivation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptKeyDerivation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        BCryptKeyDerivation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptKeyDerivation$MH() { return BCryptKeyDerivation$MH_; }

    static final FunctionDescriptor BCryptCreateHash$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptCreateHash$FUNC() { return BCryptCreateHash$FUNC_; }

    static final MethodHandle BCryptCreateHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptCreateHash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        BCryptCreateHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptCreateHash$MH() { return BCryptCreateHash$MH_; }

    static final FunctionDescriptor BCryptHashData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptHashData$FUNC() { return BCryptHashData$FUNC_; }

    static final MethodHandle BCryptHashData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptHashData",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        BCryptHashData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptHashData$MH() { return BCryptHashData$MH_; }

    static final FunctionDescriptor BCryptFinishHash$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptFinishHash$FUNC() { return BCryptFinishHash$FUNC_; }

    static final MethodHandle BCryptFinishHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptFinishHash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        BCryptFinishHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptFinishHash$MH() { return BCryptFinishHash$MH_; }

    static final FunctionDescriptor BCryptCreateMultiHash$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptCreateMultiHash$FUNC() { return BCryptCreateMultiHash$FUNC_; }

    static final MethodHandle BCryptCreateMultiHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptCreateMultiHash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        BCryptCreateMultiHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptCreateMultiHash$MH() { return BCryptCreateMultiHash$MH_; }

    static final FunctionDescriptor BCryptProcessMultiOperations$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptProcessMultiOperations$FUNC() { return BCryptProcessMultiOperations$FUNC_; }

    static final MethodHandle BCryptProcessMultiOperations$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptProcessMultiOperations",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        BCryptProcessMultiOperations$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptProcessMultiOperations$MH() { return BCryptProcessMultiOperations$MH_; }

    static final FunctionDescriptor BCryptDuplicateHash$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDuplicateHash$FUNC() { return BCryptDuplicateHash$FUNC_; }

    static final MethodHandle BCryptDuplicateHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDuplicateHash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        BCryptDuplicateHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDuplicateHash$MH() { return BCryptDuplicateHash$MH_; }

    static final FunctionDescriptor BCryptDestroyHash$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDestroyHash$FUNC() { return BCryptDestroyHash$FUNC_; }

    static final MethodHandle BCryptDestroyHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDestroyHash",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptDestroyHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDestroyHash$MH() { return BCryptDestroyHash$MH_; }

    static final FunctionDescriptor BCryptHash$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptHash$FUNC() { return BCryptHash$FUNC_; }

    static final MethodHandle BCryptHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptHash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        BCryptHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptHash$MH() { return BCryptHash$MH_; }

    static final FunctionDescriptor BCryptGenRandom$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptGenRandom$FUNC() { return BCryptGenRandom$FUNC_; }

    static final MethodHandle BCryptGenRandom$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptGenRandom",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        BCryptGenRandom$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptGenRandom$MH() { return BCryptGenRandom$MH_; }

    static final FunctionDescriptor BCryptDeriveKeyCapi$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDeriveKeyCapi$FUNC() { return BCryptDeriveKeyCapi$FUNC_; }

    static final MethodHandle BCryptDeriveKeyCapi$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDeriveKeyCapi",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        BCryptDeriveKeyCapi$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDeriveKeyCapi$MH() { return BCryptDeriveKeyCapi$MH_; }

    static final FunctionDescriptor BCryptDeriveKeyPBKDF2$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONGLONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDeriveKeyPBKDF2$FUNC() { return BCryptDeriveKeyPBKDF2$FUNC_; }

    static final MethodHandle BCryptDeriveKeyPBKDF2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDeriveKeyPBKDF2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;II)I",
        BCryptDeriveKeyPBKDF2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDeriveKeyPBKDF2$MH() { return BCryptDeriveKeyPBKDF2$MH_; }

    static final MemoryLayout _BCRYPT_INTERFACE_VERSION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion")
    ).withName("_BCRYPT_INTERFACE_VERSION");
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_INTERFACE_VERSION$struct$LAYOUT() { return _BCRYPT_INTERFACE_VERSION$struct$LAYOUT_; }

    static final MemoryLayout _BCRYPT_INTERFACE_VERSION$MajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_INTERFACE_VERSION$MajorVersion$LAYOUT() { return _BCRYPT_INTERFACE_VERSION$MajorVersion$LAYOUT_; }

    static final VarHandle _BCRYPT_INTERFACE_VERSION$MajorVersion$VH_ = _BCRYPT_INTERFACE_VERSION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle _BCRYPT_INTERFACE_VERSION$MajorVersion$VH() { return _BCRYPT_INTERFACE_VERSION$MajorVersion$VH_; }

    static final MemoryLayout _BCRYPT_INTERFACE_VERSION$MinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _BCRYPT_INTERFACE_VERSION$MinorVersion$LAYOUT() { return _BCRYPT_INTERFACE_VERSION$MinorVersion$LAYOUT_; }

    static final VarHandle _BCRYPT_INTERFACE_VERSION$MinorVersion$VH_ = _BCRYPT_INTERFACE_VERSION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle _BCRYPT_INTERFACE_VERSION$MinorVersion$VH() { return _BCRYPT_INTERFACE_VERSION$MinorVersion$VH_; }

    static final MemoryLayout _CRYPT_INTERFACE_REG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwInterface"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("cFunctions"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpszFunctions")
    ).withName("_CRYPT_INTERFACE_REG");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_INTERFACE_REG$struct$LAYOUT() { return _CRYPT_INTERFACE_REG$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_INTERFACE_REG$dwInterface$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_INTERFACE_REG$dwInterface$LAYOUT() { return _CRYPT_INTERFACE_REG$dwInterface$LAYOUT_; }

    static final VarHandle _CRYPT_INTERFACE_REG$dwInterface$VH_ = _CRYPT_INTERFACE_REG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwInterface"));
    static final java.lang.invoke.VarHandle _CRYPT_INTERFACE_REG$dwInterface$VH() { return _CRYPT_INTERFACE_REG$dwInterface$VH_; }

    static final MemoryLayout _CRYPT_INTERFACE_REG$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_INTERFACE_REG$dwFlags$LAYOUT() { return _CRYPT_INTERFACE_REG$dwFlags$LAYOUT_; }

    static final VarHandle _CRYPT_INTERFACE_REG$dwFlags$VH_ = _CRYPT_INTERFACE_REG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CRYPT_INTERFACE_REG$dwFlags$VH() { return _CRYPT_INTERFACE_REG$dwFlags$VH_; }

    static final MemoryLayout _CRYPT_INTERFACE_REG$cFunctions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_INTERFACE_REG$cFunctions$LAYOUT() { return _CRYPT_INTERFACE_REG$cFunctions$LAYOUT_; }

    static final VarHandle _CRYPT_INTERFACE_REG$cFunctions$VH_ = _CRYPT_INTERFACE_REG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cFunctions"));
    static final java.lang.invoke.VarHandle _CRYPT_INTERFACE_REG$cFunctions$VH() { return _CRYPT_INTERFACE_REG$cFunctions$VH_; }

    static final MemoryLayout _CRYPT_INTERFACE_REG$rgpszFunctions$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_INTERFACE_REG$rgpszFunctions$LAYOUT() { return _CRYPT_INTERFACE_REG$rgpszFunctions$LAYOUT_; }

    static final VarHandle _CRYPT_INTERFACE_REG$rgpszFunctions$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_INTERFACE_REG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpszFunctions")));
    static final java.lang.invoke.VarHandle _CRYPT_INTERFACE_REG$rgpszFunctions$VH() { return _CRYPT_INTERFACE_REG$rgpszFunctions$VH_; }

    static final MemoryLayout _CRYPT_IMAGE_REG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszImage"),
        C_LONG.withName("cInterfaces"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpInterfaces")
    ).withName("_CRYPT_IMAGE_REG");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_IMAGE_REG$struct$LAYOUT() { return _CRYPT_IMAGE_REG$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_IMAGE_REG$pszImage$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_IMAGE_REG$pszImage$LAYOUT() { return _CRYPT_IMAGE_REG$pszImage$LAYOUT_; }

    static final VarHandle _CRYPT_IMAGE_REG$pszImage$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_IMAGE_REG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszImage")));
    static final java.lang.invoke.VarHandle _CRYPT_IMAGE_REG$pszImage$VH() { return _CRYPT_IMAGE_REG$pszImage$VH_; }

    static final MemoryLayout _CRYPT_IMAGE_REG$cInterfaces$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_IMAGE_REG$cInterfaces$LAYOUT() { return _CRYPT_IMAGE_REG$cInterfaces$LAYOUT_; }

    static final VarHandle _CRYPT_IMAGE_REG$cInterfaces$VH_ = _CRYPT_IMAGE_REG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cInterfaces"));
    static final java.lang.invoke.VarHandle _CRYPT_IMAGE_REG$cInterfaces$VH() { return _CRYPT_IMAGE_REG$cInterfaces$VH_; }

    static final MemoryLayout _CRYPT_IMAGE_REG$rgpInterfaces$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_IMAGE_REG$rgpInterfaces$LAYOUT() { return _CRYPT_IMAGE_REG$rgpInterfaces$LAYOUT_; }

    static final VarHandle _CRYPT_IMAGE_REG$rgpInterfaces$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_IMAGE_REG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpInterfaces")));
    static final java.lang.invoke.VarHandle _CRYPT_IMAGE_REG$rgpInterfaces$VH() { return _CRYPT_IMAGE_REG$rgpInterfaces$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cAliases"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpszAliases"),
        C_POINTER.withName("pUM"),
        C_POINTER.withName("pKM")
    ).withName("_CRYPT_PROVIDER_REG");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REG$struct$LAYOUT() { return _CRYPT_PROVIDER_REG$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PROVIDER_REG$cAliases$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REG$cAliases$LAYOUT() { return _CRYPT_PROVIDER_REG$cAliases$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REG$cAliases$VH_ = _CRYPT_PROVIDER_REG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cAliases"));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REG$cAliases$VH() { return _CRYPT_PROVIDER_REG$cAliases$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REG$rgpszAliases$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REG$rgpszAliases$LAYOUT() { return _CRYPT_PROVIDER_REG$rgpszAliases$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REG$rgpszAliases$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDER_REG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpszAliases")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REG$rgpszAliases$VH() { return _CRYPT_PROVIDER_REG$rgpszAliases$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REG$pUM$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REG$pUM$LAYOUT() { return _CRYPT_PROVIDER_REG$pUM$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REG$pUM$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDER_REG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUM")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REG$pUM$VH() { return _CRYPT_PROVIDER_REG$pUM$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REG$pKM$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REG$pKM$LAYOUT() { return _CRYPT_PROVIDER_REG$pKM$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REG$pKM$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDER_REG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pKM")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REG$pKM$VH() { return _CRYPT_PROVIDER_REG$pKM$VH_; }

    static final MemoryLayout _CRYPT_PROVIDERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cProviders"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpszProviders")
    ).withName("_CRYPT_PROVIDERS");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDERS$struct$LAYOUT() { return _CRYPT_PROVIDERS$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PROVIDERS$cProviders$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDERS$cProviders$LAYOUT() { return _CRYPT_PROVIDERS$cProviders$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDERS$cProviders$VH_ = _CRYPT_PROVIDERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cProviders"));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDERS$cProviders$VH() { return _CRYPT_PROVIDERS$cProviders$VH_; }

    static final MemoryLayout _CRYPT_PROVIDERS$rgpszProviders$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDERS$rgpszProviders$LAYOUT() { return _CRYPT_PROVIDERS$rgpszProviders$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDERS$rgpszProviders$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpszProviders")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDERS$rgpszProviders$VH() { return _CRYPT_PROVIDERS$rgpszProviders$VH_; }

    static final MemoryLayout _CRYPT_CONTEXT_CONFIG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwReserved")
    ).withName("_CRYPT_CONTEXT_CONFIG");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_CONFIG$struct$LAYOUT() { return _CRYPT_CONTEXT_CONFIG$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_CONTEXT_CONFIG$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_CONFIG$dwFlags$LAYOUT() { return _CRYPT_CONTEXT_CONFIG$dwFlags$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXT_CONFIG$dwFlags$VH_ = _CRYPT_CONTEXT_CONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXT_CONFIG$dwFlags$VH() { return _CRYPT_CONTEXT_CONFIG$dwFlags$VH_; }

    static final MemoryLayout _CRYPT_CONTEXT_CONFIG$dwReserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_CONFIG$dwReserved$LAYOUT() { return _CRYPT_CONTEXT_CONFIG$dwReserved$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXT_CONFIG$dwReserved$VH_ = _CRYPT_CONTEXT_CONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXT_CONFIG$dwReserved$VH() { return _CRYPT_CONTEXT_CONFIG$dwReserved$VH_; }

    static final MemoryLayout _CRYPT_CONTEXT_FUNCTION_CONFIG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwReserved")
    ).withName("_CRYPT_CONTEXT_FUNCTION_CONFIG");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_FUNCTION_CONFIG$struct$LAYOUT() { return _CRYPT_CONTEXT_FUNCTION_CONFIG$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_CONTEXT_FUNCTION_CONFIG$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_FUNCTION_CONFIG$dwFlags$LAYOUT() { return _CRYPT_CONTEXT_FUNCTION_CONFIG$dwFlags$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXT_FUNCTION_CONFIG$dwFlags$VH_ = _CRYPT_CONTEXT_FUNCTION_CONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXT_FUNCTION_CONFIG$dwFlags$VH() { return _CRYPT_CONTEXT_FUNCTION_CONFIG$dwFlags$VH_; }

    static final MemoryLayout _CRYPT_CONTEXT_FUNCTION_CONFIG$dwReserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_FUNCTION_CONFIG$dwReserved$LAYOUT() { return _CRYPT_CONTEXT_FUNCTION_CONFIG$dwReserved$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXT_FUNCTION_CONFIG$dwReserved$VH_ = _CRYPT_CONTEXT_FUNCTION_CONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXT_FUNCTION_CONFIG$dwReserved$VH() { return _CRYPT_CONTEXT_FUNCTION_CONFIG$dwReserved$VH_; }

    static final MemoryLayout _CRYPT_CONTEXTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cContexts"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpszContexts")
    ).withName("_CRYPT_CONTEXTS");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXTS$struct$LAYOUT() { return _CRYPT_CONTEXTS$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_CONTEXTS$cContexts$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXTS$cContexts$LAYOUT() { return _CRYPT_CONTEXTS$cContexts$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXTS$cContexts$VH_ = _CRYPT_CONTEXTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cContexts"));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXTS$cContexts$VH() { return _CRYPT_CONTEXTS$cContexts$VH_; }

    static final MemoryLayout _CRYPT_CONTEXTS$rgpszContexts$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXTS$rgpszContexts$LAYOUT() { return _CRYPT_CONTEXTS$rgpszContexts$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXTS$rgpszContexts$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_CONTEXTS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpszContexts")));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXTS$rgpszContexts$VH() { return _CRYPT_CONTEXTS$rgpszContexts$VH_; }

    static final MemoryLayout _CRYPT_CONTEXT_FUNCTIONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cFunctions"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpszFunctions")
    ).withName("_CRYPT_CONTEXT_FUNCTIONS");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_FUNCTIONS$struct$LAYOUT() { return _CRYPT_CONTEXT_FUNCTIONS$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_CONTEXT_FUNCTIONS$cFunctions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_FUNCTIONS$cFunctions$LAYOUT() { return _CRYPT_CONTEXT_FUNCTIONS$cFunctions$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXT_FUNCTIONS$cFunctions$VH_ = _CRYPT_CONTEXT_FUNCTIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cFunctions"));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXT_FUNCTIONS$cFunctions$VH() { return _CRYPT_CONTEXT_FUNCTIONS$cFunctions$VH_; }

    static final MemoryLayout _CRYPT_CONTEXT_FUNCTIONS$rgpszFunctions$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_FUNCTIONS$rgpszFunctions$LAYOUT() { return _CRYPT_CONTEXT_FUNCTIONS$rgpszFunctions$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXT_FUNCTIONS$rgpszFunctions$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_CONTEXT_FUNCTIONS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpszFunctions")));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXT_FUNCTIONS$rgpszFunctions$VH() { return _CRYPT_CONTEXT_FUNCTIONS$rgpszFunctions$VH_; }

    static final MemoryLayout _CRYPT_CONTEXT_FUNCTION_PROVIDERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cProviders"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpszProviders")
    ).withName("_CRYPT_CONTEXT_FUNCTION_PROVIDERS");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_FUNCTION_PROVIDERS$struct$LAYOUT() { return _CRYPT_CONTEXT_FUNCTION_PROVIDERS$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_CONTEXT_FUNCTION_PROVIDERS$cProviders$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_FUNCTION_PROVIDERS$cProviders$LAYOUT() { return _CRYPT_CONTEXT_FUNCTION_PROVIDERS$cProviders$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXT_FUNCTION_PROVIDERS$cProviders$VH_ = _CRYPT_CONTEXT_FUNCTION_PROVIDERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cProviders"));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXT_FUNCTION_PROVIDERS$cProviders$VH() { return _CRYPT_CONTEXT_FUNCTION_PROVIDERS$cProviders$VH_; }

    static final MemoryLayout _CRYPT_CONTEXT_FUNCTION_PROVIDERS$rgpszProviders$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_CONTEXT_FUNCTION_PROVIDERS$rgpszProviders$LAYOUT() { return _CRYPT_CONTEXT_FUNCTION_PROVIDERS$rgpszProviders$LAYOUT_; }

    static final VarHandle _CRYPT_CONTEXT_FUNCTION_PROVIDERS$rgpszProviders$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_CONTEXT_FUNCTION_PROVIDERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpszProviders")));
    static final java.lang.invoke.VarHandle _CRYPT_CONTEXT_FUNCTION_PROVIDERS$rgpszProviders$VH() { return _CRYPT_CONTEXT_FUNCTION_PROVIDERS$rgpszProviders$VH_; }

    static final MemoryLayout _CRYPT_PROPERTY_REF$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszProperty"),
        C_LONG.withName("cbValue"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbValue")
    ).withName("_CRYPT_PROPERTY_REF");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROPERTY_REF$struct$LAYOUT() { return _CRYPT_PROPERTY_REF$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PROPERTY_REF$pszProperty$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROPERTY_REF$pszProperty$LAYOUT() { return _CRYPT_PROPERTY_REF$pszProperty$LAYOUT_; }

    static final VarHandle _CRYPT_PROPERTY_REF$pszProperty$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROPERTY_REF$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszProperty")));
    static final java.lang.invoke.VarHandle _CRYPT_PROPERTY_REF$pszProperty$VH() { return _CRYPT_PROPERTY_REF$pszProperty$VH_; }

    static final MemoryLayout _CRYPT_PROPERTY_REF$cbValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROPERTY_REF$cbValue$LAYOUT() { return _CRYPT_PROPERTY_REF$cbValue$LAYOUT_; }

    static final VarHandle _CRYPT_PROPERTY_REF$cbValue$VH_ = _CRYPT_PROPERTY_REF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbValue"));
    static final java.lang.invoke.VarHandle _CRYPT_PROPERTY_REF$cbValue$VH() { return _CRYPT_PROPERTY_REF$cbValue$VH_; }

    static final MemoryLayout _CRYPT_PROPERTY_REF$pbValue$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROPERTY_REF$pbValue$LAYOUT() { return _CRYPT_PROPERTY_REF$pbValue$LAYOUT_; }

    static final VarHandle _CRYPT_PROPERTY_REF$pbValue$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROPERTY_REF$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbValue")));
    static final java.lang.invoke.VarHandle _CRYPT_PROPERTY_REF$pbValue$VH() { return _CRYPT_PROPERTY_REF$pbValue$VH_; }

    static final MemoryLayout _CRYPT_IMAGE_REF$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszImage"),
        C_LONG.withName("dwFlags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CRYPT_IMAGE_REF");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_IMAGE_REF$struct$LAYOUT() { return _CRYPT_IMAGE_REF$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_IMAGE_REF$pszImage$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_IMAGE_REF$pszImage$LAYOUT() { return _CRYPT_IMAGE_REF$pszImage$LAYOUT_; }

    static final VarHandle _CRYPT_IMAGE_REF$pszImage$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_IMAGE_REF$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszImage")));
    static final java.lang.invoke.VarHandle _CRYPT_IMAGE_REF$pszImage$VH() { return _CRYPT_IMAGE_REF$pszImage$VH_; }

    static final MemoryLayout _CRYPT_IMAGE_REF$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_IMAGE_REF$dwFlags$LAYOUT() { return _CRYPT_IMAGE_REF$dwFlags$LAYOUT_; }

    static final VarHandle _CRYPT_IMAGE_REF$dwFlags$VH_ = _CRYPT_IMAGE_REF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CRYPT_IMAGE_REF$dwFlags$VH() { return _CRYPT_IMAGE_REF$dwFlags$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REF$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwInterface"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pszFunction"),
        C_POINTER.withName("pszProvider"),
        C_LONG.withName("cProperties"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpProperties"),
        C_POINTER.withName("pUM"),
        C_POINTER.withName("pKM")
    ).withName("_CRYPT_PROVIDER_REF");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REF$struct$LAYOUT() { return _CRYPT_PROVIDER_REF$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PROVIDER_REF$dwInterface$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REF$dwInterface$LAYOUT() { return _CRYPT_PROVIDER_REF$dwInterface$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REF$dwInterface$VH_ = _CRYPT_PROVIDER_REF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwInterface"));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REF$dwInterface$VH() { return _CRYPT_PROVIDER_REF$dwInterface$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REF$pszFunction$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REF$pszFunction$LAYOUT() { return _CRYPT_PROVIDER_REF$pszFunction$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REF$pszFunction$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDER_REF$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszFunction")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REF$pszFunction$VH() { return _CRYPT_PROVIDER_REF$pszFunction$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REF$pszProvider$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REF$pszProvider$LAYOUT() { return _CRYPT_PROVIDER_REF$pszProvider$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REF$pszProvider$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDER_REF$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszProvider")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REF$pszProvider$VH() { return _CRYPT_PROVIDER_REF$pszProvider$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REF$cProperties$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REF$cProperties$LAYOUT() { return _CRYPT_PROVIDER_REF$cProperties$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REF$cProperties$VH_ = _CRYPT_PROVIDER_REF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cProperties"));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REF$cProperties$VH() { return _CRYPT_PROVIDER_REF$cProperties$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REF$rgpProperties$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REF$rgpProperties$LAYOUT() { return _CRYPT_PROVIDER_REF$rgpProperties$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REF$rgpProperties$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDER_REF$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpProperties")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REF$rgpProperties$VH() { return _CRYPT_PROVIDER_REF$rgpProperties$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REF$pUM$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REF$pUM$LAYOUT() { return _CRYPT_PROVIDER_REF$pUM$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REF$pUM$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDER_REF$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUM")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REF$pUM$VH() { return _CRYPT_PROVIDER_REF$pUM$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REF$pKM$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REF$pKM$LAYOUT() { return _CRYPT_PROVIDER_REF$pKM$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REF$pKM$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDER_REF$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pKM")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REF$pKM$VH() { return _CRYPT_PROVIDER_REF$pKM$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REFS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cProviders"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgpProviders")
    ).withName("_CRYPT_PROVIDER_REFS");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REFS$struct$LAYOUT() { return _CRYPT_PROVIDER_REFS$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_PROVIDER_REFS$cProviders$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REFS$cProviders$LAYOUT() { return _CRYPT_PROVIDER_REFS$cProviders$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REFS$cProviders$VH_ = _CRYPT_PROVIDER_REFS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cProviders"));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REFS$cProviders$VH() { return _CRYPT_PROVIDER_REFS$cProviders$VH_; }

    static final MemoryLayout _CRYPT_PROVIDER_REFS$rgpProviders$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_PROVIDER_REFS$rgpProviders$LAYOUT() { return _CRYPT_PROVIDER_REFS$rgpProviders$LAYOUT_; }

    static final VarHandle _CRYPT_PROVIDER_REFS$rgpProviders$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_PROVIDER_REFS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgpProviders")));
    static final java.lang.invoke.VarHandle _CRYPT_PROVIDER_REFS$rgpProviders$VH() { return _CRYPT_PROVIDER_REFS$rgpProviders$VH_; }

    static final FunctionDescriptor BCryptQueryProviderRegistration$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptQueryProviderRegistration$FUNC() { return BCryptQueryProviderRegistration$FUNC_; }

    static final MethodHandle BCryptQueryProviderRegistration$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptQueryProviderRegistration",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptQueryProviderRegistration$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptQueryProviderRegistration$MH() { return BCryptQueryProviderRegistration$MH_; }

    static final FunctionDescriptor BCryptEnumRegisteredProviders$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptEnumRegisteredProviders$FUNC() { return BCryptEnumRegisteredProviders$FUNC_; }

    static final MethodHandle BCryptEnumRegisteredProviders$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptEnumRegisteredProviders",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptEnumRegisteredProviders$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptEnumRegisteredProviders$MH() { return BCryptEnumRegisteredProviders$MH_; }

    static final FunctionDescriptor BCryptCreateContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptCreateContext$FUNC() { return BCryptCreateContext$FUNC_; }

    static final MethodHandle BCryptCreateContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptCreateContext",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptCreateContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptCreateContext$MH() { return BCryptCreateContext$MH_; }

    static final FunctionDescriptor BCryptDeleteContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptDeleteContext$FUNC() { return BCryptDeleteContext$FUNC_; }

    static final MethodHandle BCryptDeleteContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptDeleteContext",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        BCryptDeleteContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptDeleteContext$MH() { return BCryptDeleteContext$MH_; }

    static final FunctionDescriptor BCryptEnumContexts$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptEnumContexts$FUNC() { return BCryptEnumContexts$FUNC_; }

    static final MethodHandle BCryptEnumContexts$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptEnumContexts",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptEnumContexts$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptEnumContexts$MH() { return BCryptEnumContexts$MH_; }

    static final FunctionDescriptor BCryptConfigureContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptConfigureContext$FUNC() { return BCryptConfigureContext$FUNC_; }

    static final MethodHandle BCryptConfigureContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptConfigureContext",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptConfigureContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptConfigureContext$MH() { return BCryptConfigureContext$MH_; }

    static final FunctionDescriptor BCryptQueryContextConfiguration$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptQueryContextConfiguration$FUNC() { return BCryptQueryContextConfiguration$FUNC_; }

    static final MethodHandle BCryptQueryContextConfiguration$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptQueryContextConfiguration",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptQueryContextConfiguration$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptQueryContextConfiguration$MH() { return BCryptQueryContextConfiguration$MH_; }

    static final FunctionDescriptor BCryptAddContextFunction$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptAddContextFunction$FUNC() { return BCryptAddContextFunction$FUNC_; }

    static final MethodHandle BCryptAddContextFunction$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptAddContextFunction",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        BCryptAddContextFunction$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptAddContextFunction$MH() { return BCryptAddContextFunction$MH_; }

    static final FunctionDescriptor BCryptRemoveContextFunction$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptRemoveContextFunction$FUNC() { return BCryptRemoveContextFunction$FUNC_; }

    static final MethodHandle BCryptRemoveContextFunction$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptRemoveContextFunction",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        BCryptRemoveContextFunction$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptRemoveContextFunction$MH() { return BCryptRemoveContextFunction$MH_; }

    static final FunctionDescriptor BCryptEnumContextFunctions$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptEnumContextFunctions$FUNC() { return BCryptEnumContextFunctions$FUNC_; }

    static final MethodHandle BCryptEnumContextFunctions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptEnumContextFunctions",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptEnumContextFunctions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptEnumContextFunctions$MH() { return BCryptEnumContextFunctions$MH_; }

    static final FunctionDescriptor BCryptConfigureContextFunction$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptConfigureContextFunction$FUNC() { return BCryptConfigureContextFunction$FUNC_; }

    static final MethodHandle BCryptConfigureContextFunction$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptConfigureContextFunction",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptConfigureContextFunction$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptConfigureContextFunction$MH() { return BCryptConfigureContextFunction$MH_; }

    static final FunctionDescriptor BCryptQueryContextFunctionConfiguration$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptQueryContextFunctionConfiguration$FUNC() { return BCryptQueryContextFunctionConfiguration$FUNC_; }

    static final MethodHandle BCryptQueryContextFunctionConfiguration$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptQueryContextFunctionConfiguration",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptQueryContextFunctionConfiguration$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptQueryContextFunctionConfiguration$MH() { return BCryptQueryContextFunctionConfiguration$MH_; }

    static final FunctionDescriptor BCryptEnumContextFunctionProviders$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptEnumContextFunctionProviders$FUNC() { return BCryptEnumContextFunctionProviders$FUNC_; }

    static final MethodHandle BCryptEnumContextFunctionProviders$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptEnumContextFunctionProviders",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptEnumContextFunctionProviders$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptEnumContextFunctionProviders$MH() { return BCryptEnumContextFunctionProviders$MH_; }

    static final FunctionDescriptor BCryptSetContextFunctionProperty$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptSetContextFunctionProperty$FUNC() { return BCryptSetContextFunctionProperty$FUNC_; }

    static final MethodHandle BCryptSetContextFunctionProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptSetContextFunctionProperty",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        BCryptSetContextFunctionProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptSetContextFunctionProperty$MH() { return BCryptSetContextFunctionProperty$MH_; }

    static final FunctionDescriptor BCryptQueryContextFunctionProperty$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptQueryContextFunctionProperty$FUNC() { return BCryptQueryContextFunctionProperty$FUNC_; }

    static final MethodHandle BCryptQueryContextFunctionProperty$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptQueryContextFunctionProperty",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptQueryContextFunctionProperty$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptQueryContextFunctionProperty$MH() { return BCryptQueryContextFunctionProperty$MH_; }

    static final FunctionDescriptor BCryptRegisterConfigChangeNotify$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptRegisterConfigChangeNotify$FUNC() { return BCryptRegisterConfigChangeNotify$FUNC_; }

    static final MethodHandle BCryptRegisterConfigChangeNotify$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptRegisterConfigChangeNotify",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptRegisterConfigChangeNotify$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptRegisterConfigChangeNotify$MH() { return BCryptRegisterConfigChangeNotify$MH_; }

    static final FunctionDescriptor BCryptUnregisterConfigChangeNotify$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptUnregisterConfigChangeNotify$FUNC() { return BCryptUnregisterConfigChangeNotify$FUNC_; }

    static final MethodHandle BCryptUnregisterConfigChangeNotify$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptUnregisterConfigChangeNotify",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptUnregisterConfigChangeNotify$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptUnregisterConfigChangeNotify$MH() { return BCryptUnregisterConfigChangeNotify$MH_; }

    static final FunctionDescriptor BCryptResolveProviders$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptResolveProviders$FUNC() { return BCryptResolveProviders$FUNC_; }

    static final MethodHandle BCryptResolveProviders$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptResolveProviders",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptResolveProviders$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptResolveProviders$MH() { return BCryptResolveProviders$MH_; }

    static final FunctionDescriptor BCryptGetFipsAlgorithmMode$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BCryptGetFipsAlgorithmMode$FUNC() { return BCryptGetFipsAlgorithmMode$FUNC_; }

    static final MethodHandle BCryptGetFipsAlgorithmMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BCryptGetFipsAlgorithmMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        BCryptGetFipsAlgorithmMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BCryptGetFipsAlgorithmMode$MH() { return BCryptGetFipsAlgorithmMode$MH_; }

    static final FunctionDescriptor CngGetFipsAlgorithmMode$FUNC_ = FunctionDescriptor.of(C_CHAR);
    static final jdk.incubator.foreign.FunctionDescriptor CngGetFipsAlgorithmMode$FUNC() { return CngGetFipsAlgorithmMode$FUNC_; }

    static final MethodHandle CngGetFipsAlgorithmMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CngGetFipsAlgorithmMode",
        "()B",
        CngGetFipsAlgorithmMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CngGetFipsAlgorithmMode$MH() { return CngGetFipsAlgorithmMode$MH_; }

    static final MemoryLayout NCRYPT_ALLOC_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pfnAlloc"),
        C_POINTER.withName("pfnFree")
    ).withName("NCRYPT_ALLOC_PARA");
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_ALLOC_PARA$struct$LAYOUT() { return NCRYPT_ALLOC_PARA$struct$LAYOUT_; }

    static final MemoryLayout NCRYPT_ALLOC_PARA$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_ALLOC_PARA$cbSize$LAYOUT() { return NCRYPT_ALLOC_PARA$cbSize$LAYOUT_; }

    static final VarHandle NCRYPT_ALLOC_PARA$cbSize$VH_ = NCRYPT_ALLOC_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle NCRYPT_ALLOC_PARA$cbSize$VH() { return NCRYPT_ALLOC_PARA$cbSize$VH_; }

    static final MemoryLayout NCRYPT_ALLOC_PARA$pfnAlloc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_ALLOC_PARA$pfnAlloc$LAYOUT() { return NCRYPT_ALLOC_PARA$pfnAlloc$LAYOUT_; }

    static final VarHandle NCRYPT_ALLOC_PARA$pfnAlloc$VH_ = MemoryHandles.asAddressVarHandle(NCRYPT_ALLOC_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnAlloc")));
    static final java.lang.invoke.VarHandle NCRYPT_ALLOC_PARA$pfnAlloc$VH() { return NCRYPT_ALLOC_PARA$pfnAlloc$VH_; }

    static final MemoryLayout NCRYPT_ALLOC_PARA$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout NCRYPT_ALLOC_PARA$pfnFree$LAYOUT() { return NCRYPT_ALLOC_PARA$pfnFree$LAYOUT_; }

    static final VarHandle NCRYPT_ALLOC_PARA$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(NCRYPT_ALLOC_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle NCRYPT_ALLOC_PARA$pfnFree$VH() { return NCRYPT_ALLOC_PARA$pfnFree$VH_; }

    static final MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_POINTER.withName("pbIV"),
        C_LONG.withName("cbIV"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbOtherInfo"),
        C_LONG.withName("cbOtherInfo"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_NCRYPT_CIPHER_PADDING_INFO");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$struct$LAYOUT() { return _NCRYPT_CIPHER_PADDING_INFO$struct$LAYOUT_; }

    static final MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$cbSize$LAYOUT() { return _NCRYPT_CIPHER_PADDING_INFO$cbSize$LAYOUT_; }

    static final VarHandle _NCRYPT_CIPHER_PADDING_INFO$cbSize$VH_ = _NCRYPT_CIPHER_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _NCRYPT_CIPHER_PADDING_INFO$cbSize$VH() { return _NCRYPT_CIPHER_PADDING_INFO$cbSize$VH_; }

    static final MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$dwFlags$LAYOUT() { return _NCRYPT_CIPHER_PADDING_INFO$dwFlags$LAYOUT_; }

    static final VarHandle _NCRYPT_CIPHER_PADDING_INFO$dwFlags$VH_ = _NCRYPT_CIPHER_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _NCRYPT_CIPHER_PADDING_INFO$dwFlags$VH() { return _NCRYPT_CIPHER_PADDING_INFO$dwFlags$VH_; }

    static final MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$pbIV$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$pbIV$LAYOUT() { return _NCRYPT_CIPHER_PADDING_INFO$pbIV$LAYOUT_; }

    static final VarHandle _NCRYPT_CIPHER_PADDING_INFO$pbIV$VH_ = MemoryHandles.asAddressVarHandle(_NCRYPT_CIPHER_PADDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbIV")));
    static final java.lang.invoke.VarHandle _NCRYPT_CIPHER_PADDING_INFO$pbIV$VH() { return _NCRYPT_CIPHER_PADDING_INFO$pbIV$VH_; }

    static final MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$cbIV$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$cbIV$LAYOUT() { return _NCRYPT_CIPHER_PADDING_INFO$cbIV$LAYOUT_; }

    static final VarHandle _NCRYPT_CIPHER_PADDING_INFO$cbIV$VH_ = _NCRYPT_CIPHER_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbIV"));
    static final java.lang.invoke.VarHandle _NCRYPT_CIPHER_PADDING_INFO$cbIV$VH() { return _NCRYPT_CIPHER_PADDING_INFO$cbIV$VH_; }

    static final MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$pbOtherInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$pbOtherInfo$LAYOUT() { return _NCRYPT_CIPHER_PADDING_INFO$pbOtherInfo$LAYOUT_; }

    static final VarHandle _NCRYPT_CIPHER_PADDING_INFO$pbOtherInfo$VH_ = MemoryHandles.asAddressVarHandle(_NCRYPT_CIPHER_PADDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbOtherInfo")));
    static final java.lang.invoke.VarHandle _NCRYPT_CIPHER_PADDING_INFO$pbOtherInfo$VH() { return _NCRYPT_CIPHER_PADDING_INFO$pbOtherInfo$VH_; }

    static final MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$cbOtherInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_CIPHER_PADDING_INFO$cbOtherInfo$LAYOUT() { return _NCRYPT_CIPHER_PADDING_INFO$cbOtherInfo$LAYOUT_; }

    static final VarHandle _NCRYPT_CIPHER_PADDING_INFO$cbOtherInfo$VH_ = _NCRYPT_CIPHER_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbOtherInfo"));
    static final java.lang.invoke.VarHandle _NCRYPT_CIPHER_PADDING_INFO$cbOtherInfo$VH() { return _NCRYPT_CIPHER_PADDING_INFO$cbOtherInfo$VH_; }

    static final MemoryLayout _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("magic"),
        C_LONG.withName("pcrMask")
    ).withName("_NCRYPT_PLATFORM_ATTEST_PADDING_INFO");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$struct$LAYOUT() { return _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$struct$LAYOUT_; }

    static final MemoryLayout _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$magic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$magic$LAYOUT() { return _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$magic$LAYOUT_; }

    static final VarHandle _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$magic$VH_ = _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("magic"));
    static final java.lang.invoke.VarHandle _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$magic$VH() { return _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$magic$VH_; }

    static final MemoryLayout _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$pcrMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$pcrMask$LAYOUT() { return _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$pcrMask$LAYOUT_; }

    static final VarHandle _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$pcrMask$VH_ = _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pcrMask"));
    static final java.lang.invoke.VarHandle _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$pcrMask$VH() { return _NCRYPT_PLATFORM_ATTEST_PADDING_INFO$pcrMask$VH_; }

    static final MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("magic"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbKeyBlob"),
        C_LONG.withName("cbKeyBlob"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbKeyAuth"),
        C_LONG.withName("cbKeyAuth"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_NCRYPT_KEY_ATTEST_PADDING_INFO");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$struct$LAYOUT() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$struct$LAYOUT_; }

    static final MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$magic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$magic$LAYOUT() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$magic$LAYOUT_; }

    static final VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$magic$VH_ = _NCRYPT_KEY_ATTEST_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("magic"));
    static final java.lang.invoke.VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$magic$VH() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$magic$VH_; }

    static final MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyBlob$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyBlob$LAYOUT() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyBlob$LAYOUT_; }

    static final VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyBlob$VH_ = MemoryHandles.asAddressVarHandle(_NCRYPT_KEY_ATTEST_PADDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbKeyBlob")));
    static final java.lang.invoke.VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyBlob$VH() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyBlob$VH_; }

    static final MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyBlob$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyBlob$LAYOUT() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyBlob$LAYOUT_; }

    static final VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyBlob$VH_ = _NCRYPT_KEY_ATTEST_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKeyBlob"));
    static final java.lang.invoke.VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyBlob$VH() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyBlob$VH_; }

    static final MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyAuth$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyAuth$LAYOUT() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyAuth$LAYOUT_; }

    static final VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyAuth$VH_ = MemoryHandles.asAddressVarHandle(_NCRYPT_KEY_ATTEST_PADDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbKeyAuth")));
    static final java.lang.invoke.VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyAuth$VH() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$pbKeyAuth$VH_; }

    static final MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyAuth$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyAuth$LAYOUT() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyAuth$LAYOUT_; }

    static final VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyAuth$VH_ = _NCRYPT_KEY_ATTEST_PADDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbKeyAuth"));
    static final java.lang.invoke.VarHandle _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyAuth$VH() { return _NCRYPT_KEY_ATTEST_PADDING_INFO$cbKeyAuth$VH_; }

    static final MemoryLayout _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Flags"),
        C_LONG.withName("cbPublicKeyBlob")
    ).withName("_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$struct$LAYOUT() { return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Version$LAYOUT() { return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Version$LAYOUT_; }

    static final VarHandle _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Version$VH_ = _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Version$VH() { return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Version$VH_; }

    static final MemoryLayout _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Flags$LAYOUT() { return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Flags$LAYOUT_; }

    static final VarHandle _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Flags$VH_ = _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Flags$VH() { return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$Flags$VH_; }

    static final MemoryLayout _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$cbPublicKeyBlob$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$cbPublicKeyBlob$LAYOUT() { return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$cbPublicKeyBlob$LAYOUT_; }

    static final VarHandle _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$cbPublicKeyBlob$VH_ = _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPublicKeyBlob"));
    static final java.lang.invoke.VarHandle _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$cbPublicKeyBlob$VH() { return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES$cbPublicKeyBlob$VH_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Magic"),
        C_LONG.withName("Version"),
        C_LONG.withName("cbSignature"),
        C_LONG.withName("cbReport"),
        C_LONG.withName("cbAttributes")
    ).withName("_NCRYPT_VSM_KEY_ATTESTATION_STATEMENT");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$struct$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$struct$LAYOUT_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Magic$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Magic$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Magic$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Magic$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Magic$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Magic$VH_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Version$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Version$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Version$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Version$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$Version$VH_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbSignature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbSignature$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbSignature$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbSignature$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSignature"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbSignature$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbSignature$VH_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbReport$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbReport$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbReport$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbReport$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbReport"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbReport$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbReport$VH_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbAttributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbAttributes$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbAttributes$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbAttributes$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbAttributes"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbAttributes$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_STATEMENT$cbAttributes$VH_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("TrustletId"),
        C_LONG.withName("MinSvn"),
        C_LONG.withName("FlagsMask"),
        C_LONG.withName("FlagsExpected"),
        C_INT
    ).withName("_NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS");
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$struct$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$struct$LAYOUT_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$Version$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$Version$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$Version$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$Version$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$Version$VH_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$TrustletId$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$TrustletId$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$TrustletId$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$TrustletId$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TrustletId"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$TrustletId$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$TrustletId$VH_; }

    static final MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$MinSvn$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$MinSvn$LAYOUT() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$MinSvn$LAYOUT_; }

    static final VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$MinSvn$VH_ = _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinSvn"));
    static final java.lang.invoke.VarHandle _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$MinSvn$VH() { return _NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS$MinSvn$VH_; }

}

