// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$23 extends cfapi_h$constants$22 {

    /* package-private */ cfapi_h$constants$23() {}
    static final MemoryLayout _PERFORMANCE_DATA$RetryCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$RetryCount$LAYOUT() { return _PERFORMANCE_DATA$RetryCount$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$RetryCount$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RetryCount"));
    static final java.lang.invoke.VarHandle _PERFORMANCE_DATA$RetryCount$VH() { return _PERFORMANCE_DATA$RetryCount$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$Reserved$LAYOUT() { return _PERFORMANCE_DATA$Reserved$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$Reserved$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _PERFORMANCE_DATA$Reserved$VH() { return _PERFORMANCE_DATA$Reserved$VH_; }

    static final FunctionDescriptor RtlGetDeviceFamilyInfoEnum$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlGetDeviceFamilyInfoEnum$FUNC() { return RtlGetDeviceFamilyInfoEnum$FUNC_; }

    static final MethodHandle RtlGetDeviceFamilyInfoEnum$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetDeviceFamilyInfoEnum",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlGetDeviceFamilyInfoEnum$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlGetDeviceFamilyInfoEnum$MH() { return RtlGetDeviceFamilyInfoEnum$MH_; }

    static final FunctionDescriptor RtlConvertDeviceFamilyInfoToString$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlConvertDeviceFamilyInfoToString$FUNC() { return RtlConvertDeviceFamilyInfoToString$FUNC_; }

    static final MethodHandle RtlConvertDeviceFamilyInfoToString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlConvertDeviceFamilyInfoToString",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlConvertDeviceFamilyInfoToString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlConvertDeviceFamilyInfoToString$MH() { return RtlConvertDeviceFamilyInfoToString$MH_; }

    static final FunctionDescriptor RtlSwitchedVVI$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlSwitchedVVI$FUNC() { return RtlSwitchedVVI$FUNC_; }

    static final MethodHandle RtlSwitchedVVI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlSwitchedVVI",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        RtlSwitchedVVI$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlSwitchedVVI$MH() { return RtlSwitchedVVI$MH_; }

    static final MemoryLayout _EVENTLOGRECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Length"),
        C_LONG.withName("Reserved"),
        C_LONG.withName("RecordNumber"),
        C_LONG.withName("TimeGenerated"),
        C_LONG.withName("TimeWritten"),
        C_LONG.withName("EventID"),
        C_SHORT.withName("EventType"),
        C_SHORT.withName("NumStrings"),
        C_SHORT.withName("EventCategory"),
        C_SHORT.withName("ReservedFlags"),
        C_LONG.withName("ClosingRecordNumber"),
        C_LONG.withName("StringOffset"),
        C_LONG.withName("UserSidLength"),
        C_LONG.withName("UserSidOffset"),
        C_LONG.withName("DataLength"),
        C_LONG.withName("DataOffset")
    ).withName("_EVENTLOGRECORD");
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$struct$LAYOUT() { return _EVENTLOGRECORD$struct$LAYOUT_; }

    static final MemoryLayout _EVENTLOGRECORD$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$Length$LAYOUT() { return _EVENTLOGRECORD$Length$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$Length$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$Length$VH() { return _EVENTLOGRECORD$Length$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$Reserved$LAYOUT() { return _EVENTLOGRECORD$Reserved$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$Reserved$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$Reserved$VH() { return _EVENTLOGRECORD$Reserved$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$RecordNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$RecordNumber$LAYOUT() { return _EVENTLOGRECORD$RecordNumber$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$RecordNumber$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RecordNumber"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$RecordNumber$VH() { return _EVENTLOGRECORD$RecordNumber$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$TimeGenerated$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$TimeGenerated$LAYOUT() { return _EVENTLOGRECORD$TimeGenerated$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$TimeGenerated$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeGenerated"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$TimeGenerated$VH() { return _EVENTLOGRECORD$TimeGenerated$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$TimeWritten$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$TimeWritten$LAYOUT() { return _EVENTLOGRECORD$TimeWritten$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$TimeWritten$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeWritten"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$TimeWritten$VH() { return _EVENTLOGRECORD$TimeWritten$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$EventID$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$EventID$LAYOUT() { return _EVENTLOGRECORD$EventID$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$EventID$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EventID"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$EventID$VH() { return _EVENTLOGRECORD$EventID$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$EventType$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$EventType$LAYOUT() { return _EVENTLOGRECORD$EventType$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$EventType$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("EventType"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$EventType$VH() { return _EVENTLOGRECORD$EventType$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$NumStrings$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$NumStrings$LAYOUT() { return _EVENTLOGRECORD$NumStrings$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$NumStrings$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumStrings"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$NumStrings$VH() { return _EVENTLOGRECORD$NumStrings$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$EventCategory$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$EventCategory$LAYOUT() { return _EVENTLOGRECORD$EventCategory$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$EventCategory$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("EventCategory"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$EventCategory$VH() { return _EVENTLOGRECORD$EventCategory$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$ReservedFlags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$ReservedFlags$LAYOUT() { return _EVENTLOGRECORD$ReservedFlags$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$ReservedFlags$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ReservedFlags"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$ReservedFlags$VH() { return _EVENTLOGRECORD$ReservedFlags$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$ClosingRecordNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$ClosingRecordNumber$LAYOUT() { return _EVENTLOGRECORD$ClosingRecordNumber$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$ClosingRecordNumber$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ClosingRecordNumber"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$ClosingRecordNumber$VH() { return _EVENTLOGRECORD$ClosingRecordNumber$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$StringOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$StringOffset$LAYOUT() { return _EVENTLOGRECORD$StringOffset$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$StringOffset$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StringOffset"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$StringOffset$VH() { return _EVENTLOGRECORD$StringOffset$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$UserSidLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$UserSidLength$LAYOUT() { return _EVENTLOGRECORD$UserSidLength$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$UserSidLength$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserSidLength"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$UserSidLength$VH() { return _EVENTLOGRECORD$UserSidLength$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$UserSidOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$UserSidOffset$LAYOUT() { return _EVENTLOGRECORD$UserSidOffset$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$UserSidOffset$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserSidOffset"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$UserSidOffset$VH() { return _EVENTLOGRECORD$UserSidOffset$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$DataLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$DataLength$LAYOUT() { return _EVENTLOGRECORD$DataLength$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$DataLength$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataLength"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$DataLength$VH() { return _EVENTLOGRECORD$DataLength$VH_; }

    static final MemoryLayout _EVENTLOGRECORD$DataOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTLOGRECORD$DataOffset$LAYOUT() { return _EVENTLOGRECORD$DataOffset$LAYOUT_; }

    static final VarHandle _EVENTLOGRECORD$DataOffset$VH_ = _EVENTLOGRECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataOffset"));
    static final java.lang.invoke.VarHandle _EVENTLOGRECORD$DataOffset$VH() { return _EVENTLOGRECORD$DataOffset$VH_; }

    static final MemoryLayout _EVENTSFORLOGFILE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ulSize"),
        MemoryLayout.ofSequence(256, C_SHORT).withName("szLogicalLogFile"),
        C_LONG.withName("ulNumRecords"),
        MemoryLayout.ofSequence(MemoryLayout.ofStruct(
            C_LONG.withName("Length"),
            C_LONG.withName("Reserved"),
            C_LONG.withName("RecordNumber"),
            C_LONG.withName("TimeGenerated"),
            C_LONG.withName("TimeWritten"),
            C_LONG.withName("EventID"),
            C_SHORT.withName("EventType"),
            C_SHORT.withName("NumStrings"),
            C_SHORT.withName("EventCategory"),
            C_SHORT.withName("ReservedFlags"),
            C_LONG.withName("ClosingRecordNumber"),
            C_LONG.withName("StringOffset"),
            C_LONG.withName("UserSidLength"),
            C_LONG.withName("UserSidOffset"),
            C_LONG.withName("DataLength"),
            C_LONG.withName("DataOffset")
        ).withName("_EVENTLOGRECORD")).withName("pEventLogRecords")
    ).withName("_EVENTSFORLOGFILE");
    static final jdk.incubator.foreign.MemoryLayout _EVENTSFORLOGFILE$struct$LAYOUT() { return _EVENTSFORLOGFILE$struct$LAYOUT_; }

    static final MemoryLayout _EVENTSFORLOGFILE$ulSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTSFORLOGFILE$ulSize$LAYOUT() { return _EVENTSFORLOGFILE$ulSize$LAYOUT_; }

    static final VarHandle _EVENTSFORLOGFILE$ulSize$VH_ = _EVENTSFORLOGFILE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSize"));
    static final java.lang.invoke.VarHandle _EVENTSFORLOGFILE$ulSize$VH() { return _EVENTSFORLOGFILE$ulSize$VH_; }

    static final MemoryLayout _EVENTSFORLOGFILE$ulNumRecords$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EVENTSFORLOGFILE$ulNumRecords$LAYOUT() { return _EVENTSFORLOGFILE$ulNumRecords$LAYOUT_; }

    static final VarHandle _EVENTSFORLOGFILE$ulNumRecords$VH_ = _EVENTSFORLOGFILE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulNumRecords"));
    static final java.lang.invoke.VarHandle _EVENTSFORLOGFILE$ulNumRecords$VH() { return _EVENTSFORLOGFILE$ulNumRecords$VH_; }

    static final MemoryLayout _PACKEDEVENTINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ulSize"),
        C_LONG.withName("ulNumEventsForLogFile"),
        MemoryLayout.ofSequence(C_LONG).withName("ulOffsets")
    ).withName("_PACKEDEVENTINFO");
    static final jdk.incubator.foreign.MemoryLayout _PACKEDEVENTINFO$struct$LAYOUT() { return _PACKEDEVENTINFO$struct$LAYOUT_; }

    static final MemoryLayout _PACKEDEVENTINFO$ulSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PACKEDEVENTINFO$ulSize$LAYOUT() { return _PACKEDEVENTINFO$ulSize$LAYOUT_; }

    static final VarHandle _PACKEDEVENTINFO$ulSize$VH_ = _PACKEDEVENTINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSize"));
    static final java.lang.invoke.VarHandle _PACKEDEVENTINFO$ulSize$VH() { return _PACKEDEVENTINFO$ulSize$VH_; }

    static final MemoryLayout _PACKEDEVENTINFO$ulNumEventsForLogFile$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PACKEDEVENTINFO$ulNumEventsForLogFile$LAYOUT() { return _PACKEDEVENTINFO$ulNumEventsForLogFile$LAYOUT_; }

    static final VarHandle _PACKEDEVENTINFO$ulNumEventsForLogFile$VH_ = _PACKEDEVENTINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulNumEventsForLogFile"));
    static final java.lang.invoke.VarHandle _PACKEDEVENTINFO$ulNumEventsForLogFile$VH() { return _PACKEDEVENTINFO$ulNumEventsForLogFile$VH_; }

    static final int DriverType() { return (int)1L; }

    static final int FileSystemType() { return (int)2L; }

    static final int Win32ServiceOwnProcess() { return (int)16L; }

    static final int Win32ServiceShareProcess() { return (int)32L; }

    static final int AdapterType() { return (int)4L; }

    static final int RecognizerType() { return (int)8L; }

    static final int BootLoad() { return (int)0L; }

    static final int SystemLoad() { return (int)1L; }

    static final int AutoLoad() { return (int)2L; }

    static final int DemandLoad() { return (int)3L; }

    static final int DisableLoad() { return (int)4L; }

    static final int IgnoreError() { return (int)0L; }

    static final int NormalError() { return (int)1L; }

    static final int SevereError() { return (int)2L; }

    static final int CriticalError() { return (int)3L; }

    static final MemoryLayout _TAPE_ERASE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Type"),
        C_CHAR.withName("Immediate"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_TAPE_ERASE");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_ERASE$struct$LAYOUT() { return _TAPE_ERASE$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_ERASE$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_ERASE$Type$LAYOUT() { return _TAPE_ERASE$Type$LAYOUT_; }

    static final VarHandle _TAPE_ERASE$Type$VH_ = _TAPE_ERASE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _TAPE_ERASE$Type$VH() { return _TAPE_ERASE$Type$VH_; }

    static final MemoryLayout _TAPE_ERASE$Immediate$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_ERASE$Immediate$LAYOUT() { return _TAPE_ERASE$Immediate$LAYOUT_; }

    static final VarHandle _TAPE_ERASE$Immediate$VH_ = _TAPE_ERASE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Immediate"));
    static final java.lang.invoke.VarHandle _TAPE_ERASE$Immediate$VH() { return _TAPE_ERASE$Immediate$VH_; }

    static final MemoryLayout _TAPE_PREPARE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Operation"),
        C_CHAR.withName("Immediate"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_TAPE_PREPARE");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_PREPARE$struct$LAYOUT() { return _TAPE_PREPARE$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_PREPARE$Operation$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_PREPARE$Operation$LAYOUT() { return _TAPE_PREPARE$Operation$LAYOUT_; }

    static final VarHandle _TAPE_PREPARE$Operation$VH_ = _TAPE_PREPARE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Operation"));
    static final java.lang.invoke.VarHandle _TAPE_PREPARE$Operation$VH() { return _TAPE_PREPARE$Operation$VH_; }

    static final MemoryLayout _TAPE_PREPARE$Immediate$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_PREPARE$Immediate$LAYOUT() { return _TAPE_PREPARE$Immediate$LAYOUT_; }

    static final VarHandle _TAPE_PREPARE$Immediate$VH_ = _TAPE_PREPARE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Immediate"));
    static final java.lang.invoke.VarHandle _TAPE_PREPARE$Immediate$VH() { return _TAPE_PREPARE$Immediate$VH_; }

    static final MemoryLayout _TAPE_WRITE_MARKS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Type"),
        C_LONG.withName("Count"),
        C_CHAR.withName("Immediate"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_TAPE_WRITE_MARKS");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_WRITE_MARKS$struct$LAYOUT() { return _TAPE_WRITE_MARKS$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_WRITE_MARKS$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_WRITE_MARKS$Type$LAYOUT() { return _TAPE_WRITE_MARKS$Type$LAYOUT_; }

    static final VarHandle _TAPE_WRITE_MARKS$Type$VH_ = _TAPE_WRITE_MARKS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _TAPE_WRITE_MARKS$Type$VH() { return _TAPE_WRITE_MARKS$Type$VH_; }

    static final MemoryLayout _TAPE_WRITE_MARKS$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_WRITE_MARKS$Count$LAYOUT() { return _TAPE_WRITE_MARKS$Count$LAYOUT_; }

    static final VarHandle _TAPE_WRITE_MARKS$Count$VH_ = _TAPE_WRITE_MARKS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _TAPE_WRITE_MARKS$Count$VH() { return _TAPE_WRITE_MARKS$Count$VH_; }

    static final MemoryLayout _TAPE_WRITE_MARKS$Immediate$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_WRITE_MARKS$Immediate$LAYOUT() { return _TAPE_WRITE_MARKS$Immediate$LAYOUT_; }

    static final VarHandle _TAPE_WRITE_MARKS$Immediate$VH_ = _TAPE_WRITE_MARKS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Immediate"));
    static final java.lang.invoke.VarHandle _TAPE_WRITE_MARKS$Immediate$VH() { return _TAPE_WRITE_MARKS$Immediate$VH_; }

    static final MemoryLayout _TAPE_GET_POSITION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Type"),
        C_LONG.withName("Partition"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Offset")
    ).withName("_TAPE_GET_POSITION");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_POSITION$struct$LAYOUT() { return _TAPE_GET_POSITION$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_GET_POSITION$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_POSITION$Type$LAYOUT() { return _TAPE_GET_POSITION$Type$LAYOUT_; }

    static final VarHandle _TAPE_GET_POSITION$Type$VH_ = _TAPE_GET_POSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _TAPE_GET_POSITION$Type$VH() { return _TAPE_GET_POSITION$Type$VH_; }

    static final MemoryLayout _TAPE_GET_POSITION$Partition$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_POSITION$Partition$LAYOUT() { return _TAPE_GET_POSITION$Partition$LAYOUT_; }

    static final VarHandle _TAPE_GET_POSITION$Partition$VH_ = _TAPE_GET_POSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Partition"));
    static final java.lang.invoke.VarHandle _TAPE_GET_POSITION$Partition$VH() { return _TAPE_GET_POSITION$Partition$VH_; }

    static final MemoryLayout _TAPE_SET_POSITION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Method"),
        C_LONG.withName("Partition"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Offset"),
        C_CHAR.withName("Immediate"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_TAPE_SET_POSITION");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_POSITION$struct$LAYOUT() { return _TAPE_SET_POSITION$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_SET_POSITION$Method$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_POSITION$Method$LAYOUT() { return _TAPE_SET_POSITION$Method$LAYOUT_; }

    static final VarHandle _TAPE_SET_POSITION$Method$VH_ = _TAPE_SET_POSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Method"));
    static final java.lang.invoke.VarHandle _TAPE_SET_POSITION$Method$VH() { return _TAPE_SET_POSITION$Method$VH_; }

    static final MemoryLayout _TAPE_SET_POSITION$Partition$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_POSITION$Partition$LAYOUT() { return _TAPE_SET_POSITION$Partition$LAYOUT_; }

    static final VarHandle _TAPE_SET_POSITION$Partition$VH_ = _TAPE_SET_POSITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Partition"));
    static final java.lang.invoke.VarHandle _TAPE_SET_POSITION$Partition$VH() { return _TAPE_SET_POSITION$Partition$VH_; }

    static final MemoryLayout _TAPE_SET_POSITION$Immediate$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_POSITION$Immediate$LAYOUT() { return _TAPE_SET_POSITION$Immediate$LAYOUT_; }

    static final VarHandle _TAPE_SET_POSITION$Immediate$VH_ = _TAPE_SET_POSITION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Immediate"));
    static final java.lang.invoke.VarHandle _TAPE_SET_POSITION$Immediate$VH() { return _TAPE_SET_POSITION$Immediate$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("ECC"),
        C_CHAR.withName("Compression"),
        C_CHAR.withName("DataPadding"),
        C_CHAR.withName("ReportSetmarks"),
        C_LONG.withName("DefaultBlockSize"),
        C_LONG.withName("MaximumBlockSize"),
        C_LONG.withName("MinimumBlockSize"),
        C_LONG.withName("MaximumPartitionCount"),
        C_LONG.withName("FeaturesLow"),
        C_LONG.withName("FeaturesHigh"),
        C_LONG.withName("EOTWarningZoneSize")
    ).withName("_TAPE_GET_DRIVE_PARAMETERS");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$ECC$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$ECC$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$ECC$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$ECC$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ECC"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$ECC$VH() { return _TAPE_GET_DRIVE_PARAMETERS$ECC$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$Compression$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$Compression$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$Compression$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$Compression$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Compression"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$Compression$VH() { return _TAPE_GET_DRIVE_PARAMETERS$Compression$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$DataPadding$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$DataPadding$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$DataPadding$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$DataPadding$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DataPadding"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$DataPadding$VH() { return _TAPE_GET_DRIVE_PARAMETERS$DataPadding$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ReportSetmarks"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$VH() { return _TAPE_GET_DRIVE_PARAMETERS$ReportSetmarks$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultBlockSize"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$VH() { return _TAPE_GET_DRIVE_PARAMETERS$DefaultBlockSize$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaximumBlockSize"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$VH() { return _TAPE_GET_DRIVE_PARAMETERS$MaximumBlockSize$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinimumBlockSize"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$VH() { return _TAPE_GET_DRIVE_PARAMETERS$MinimumBlockSize$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaximumPartitionCount"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$VH() { return _TAPE_GET_DRIVE_PARAMETERS$MaximumPartitionCount$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FeaturesLow"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$VH() { return _TAPE_GET_DRIVE_PARAMETERS$FeaturesLow$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FeaturesHigh"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$VH() { return _TAPE_GET_DRIVE_PARAMETERS$FeaturesHigh$VH_; }

    static final MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$LAYOUT() { return _TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$LAYOUT_; }

    static final VarHandle _TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH_ = _TAPE_GET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EOTWarningZoneSize"));
    static final java.lang.invoke.VarHandle _TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH() { return _TAPE_GET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH_; }

    static final MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("ECC"),
        C_CHAR.withName("Compression"),
        C_CHAR.withName("DataPadding"),
        C_CHAR.withName("ReportSetmarks"),
        C_LONG.withName("EOTWarningZoneSize")
    ).withName("_TAPE_SET_DRIVE_PARAMETERS");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$struct$LAYOUT() { return _TAPE_SET_DRIVE_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$ECC$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$ECC$LAYOUT() { return _TAPE_SET_DRIVE_PARAMETERS$ECC$LAYOUT_; }

    static final VarHandle _TAPE_SET_DRIVE_PARAMETERS$ECC$VH_ = _TAPE_SET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ECC"));
    static final java.lang.invoke.VarHandle _TAPE_SET_DRIVE_PARAMETERS$ECC$VH() { return _TAPE_SET_DRIVE_PARAMETERS$ECC$VH_; }

    static final MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$Compression$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$Compression$LAYOUT() { return _TAPE_SET_DRIVE_PARAMETERS$Compression$LAYOUT_; }

    static final VarHandle _TAPE_SET_DRIVE_PARAMETERS$Compression$VH_ = _TAPE_SET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Compression"));
    static final java.lang.invoke.VarHandle _TAPE_SET_DRIVE_PARAMETERS$Compression$VH() { return _TAPE_SET_DRIVE_PARAMETERS$Compression$VH_; }

    static final MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$DataPadding$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$DataPadding$LAYOUT() { return _TAPE_SET_DRIVE_PARAMETERS$DataPadding$LAYOUT_; }

    static final VarHandle _TAPE_SET_DRIVE_PARAMETERS$DataPadding$VH_ = _TAPE_SET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DataPadding"));
    static final java.lang.invoke.VarHandle _TAPE_SET_DRIVE_PARAMETERS$DataPadding$VH() { return _TAPE_SET_DRIVE_PARAMETERS$DataPadding$VH_; }

    static final MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$LAYOUT() { return _TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$LAYOUT_; }

    static final VarHandle _TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$VH_ = _TAPE_SET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ReportSetmarks"));
    static final java.lang.invoke.VarHandle _TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$VH() { return _TAPE_SET_DRIVE_PARAMETERS$ReportSetmarks$VH_; }

    static final MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$LAYOUT() { return _TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$LAYOUT_; }

    static final VarHandle _TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH_ = _TAPE_SET_DRIVE_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EOTWarningZoneSize"));
    static final java.lang.invoke.VarHandle _TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH() { return _TAPE_SET_DRIVE_PARAMETERS$EOTWarningZoneSize$VH_; }

    static final MemoryLayout _TAPE_GET_MEDIA_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Capacity"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Remaining"),
        C_LONG.withName("BlockSize"),
        C_LONG.withName("PartitionCount"),
        C_CHAR.withName("WriteProtected"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_TAPE_GET_MEDIA_PARAMETERS");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_MEDIA_PARAMETERS$struct$LAYOUT() { return _TAPE_GET_MEDIA_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_GET_MEDIA_PARAMETERS$BlockSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_MEDIA_PARAMETERS$BlockSize$LAYOUT() { return _TAPE_GET_MEDIA_PARAMETERS$BlockSize$LAYOUT_; }

    static final VarHandle _TAPE_GET_MEDIA_PARAMETERS$BlockSize$VH_ = _TAPE_GET_MEDIA_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BlockSize"));
    static final java.lang.invoke.VarHandle _TAPE_GET_MEDIA_PARAMETERS$BlockSize$VH() { return _TAPE_GET_MEDIA_PARAMETERS$BlockSize$VH_; }

    static final MemoryLayout _TAPE_GET_MEDIA_PARAMETERS$PartitionCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_MEDIA_PARAMETERS$PartitionCount$LAYOUT() { return _TAPE_GET_MEDIA_PARAMETERS$PartitionCount$LAYOUT_; }

    static final VarHandle _TAPE_GET_MEDIA_PARAMETERS$PartitionCount$VH_ = _TAPE_GET_MEDIA_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionCount"));
    static final java.lang.invoke.VarHandle _TAPE_GET_MEDIA_PARAMETERS$PartitionCount$VH() { return _TAPE_GET_MEDIA_PARAMETERS$PartitionCount$VH_; }

    static final MemoryLayout _TAPE_GET_MEDIA_PARAMETERS$WriteProtected$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_GET_MEDIA_PARAMETERS$WriteProtected$LAYOUT() { return _TAPE_GET_MEDIA_PARAMETERS$WriteProtected$LAYOUT_; }

    static final VarHandle _TAPE_GET_MEDIA_PARAMETERS$WriteProtected$VH_ = _TAPE_GET_MEDIA_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("WriteProtected"));
    static final java.lang.invoke.VarHandle _TAPE_GET_MEDIA_PARAMETERS$WriteProtected$VH() { return _TAPE_GET_MEDIA_PARAMETERS$WriteProtected$VH_; }

    static final MemoryLayout _TAPE_SET_MEDIA_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("BlockSize")
    ).withName("_TAPE_SET_MEDIA_PARAMETERS");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_MEDIA_PARAMETERS$struct$LAYOUT() { return _TAPE_SET_MEDIA_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_SET_MEDIA_PARAMETERS$BlockSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_SET_MEDIA_PARAMETERS$BlockSize$LAYOUT() { return _TAPE_SET_MEDIA_PARAMETERS$BlockSize$LAYOUT_; }

    static final VarHandle _TAPE_SET_MEDIA_PARAMETERS$BlockSize$VH_ = _TAPE_SET_MEDIA_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BlockSize"));
    static final java.lang.invoke.VarHandle _TAPE_SET_MEDIA_PARAMETERS$BlockSize$VH() { return _TAPE_SET_MEDIA_PARAMETERS$BlockSize$VH_; }

    static final MemoryLayout _TAPE_CREATE_PARTITION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Method"),
        C_LONG.withName("Count"),
        C_LONG.withName("Size")
    ).withName("_TAPE_CREATE_PARTITION");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_CREATE_PARTITION$struct$LAYOUT() { return _TAPE_CREATE_PARTITION$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_CREATE_PARTITION$Method$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_CREATE_PARTITION$Method$LAYOUT() { return _TAPE_CREATE_PARTITION$Method$LAYOUT_; }

    static final VarHandle _TAPE_CREATE_PARTITION$Method$VH_ = _TAPE_CREATE_PARTITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Method"));
    static final java.lang.invoke.VarHandle _TAPE_CREATE_PARTITION$Method$VH() { return _TAPE_CREATE_PARTITION$Method$VH_; }

    static final MemoryLayout _TAPE_CREATE_PARTITION$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_CREATE_PARTITION$Count$LAYOUT() { return _TAPE_CREATE_PARTITION$Count$LAYOUT_; }

    static final VarHandle _TAPE_CREATE_PARTITION$Count$VH_ = _TAPE_CREATE_PARTITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _TAPE_CREATE_PARTITION$Count$VH() { return _TAPE_CREATE_PARTITION$Count$VH_; }

    static final MemoryLayout _TAPE_CREATE_PARTITION$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_CREATE_PARTITION$Size$LAYOUT() { return _TAPE_CREATE_PARTITION$Size$LAYOUT_; }

    static final VarHandle _TAPE_CREATE_PARTITION$Size$VH_ = _TAPE_CREATE_PARTITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _TAPE_CREATE_PARTITION$Size$VH() { return _TAPE_CREATE_PARTITION$Size$VH_; }

    static final MemoryLayout _TAPE_WMI_OPERATIONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Method"),
        C_LONG.withName("DataBufferSize"),
        C_POINTER.withName("DataBuffer")
    ).withName("_TAPE_WMI_OPERATIONS");
    static final jdk.incubator.foreign.MemoryLayout _TAPE_WMI_OPERATIONS$struct$LAYOUT() { return _TAPE_WMI_OPERATIONS$struct$LAYOUT_; }

    static final MemoryLayout _TAPE_WMI_OPERATIONS$Method$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_WMI_OPERATIONS$Method$LAYOUT() { return _TAPE_WMI_OPERATIONS$Method$LAYOUT_; }

    static final VarHandle _TAPE_WMI_OPERATIONS$Method$VH_ = _TAPE_WMI_OPERATIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Method"));
    static final java.lang.invoke.VarHandle _TAPE_WMI_OPERATIONS$Method$VH() { return _TAPE_WMI_OPERATIONS$Method$VH_; }

    static final MemoryLayout _TAPE_WMI_OPERATIONS$DataBufferSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_WMI_OPERATIONS$DataBufferSize$LAYOUT() { return _TAPE_WMI_OPERATIONS$DataBufferSize$LAYOUT_; }

    static final VarHandle _TAPE_WMI_OPERATIONS$DataBufferSize$VH_ = _TAPE_WMI_OPERATIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DataBufferSize"));
    static final java.lang.invoke.VarHandle _TAPE_WMI_OPERATIONS$DataBufferSize$VH() { return _TAPE_WMI_OPERATIONS$DataBufferSize$VH_; }

    static final MemoryLayout _TAPE_WMI_OPERATIONS$DataBuffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TAPE_WMI_OPERATIONS$DataBuffer$LAYOUT() { return _TAPE_WMI_OPERATIONS$DataBuffer$LAYOUT_; }

    static final VarHandle _TAPE_WMI_OPERATIONS$DataBuffer$VH_ = MemoryHandles.asAddressVarHandle(_TAPE_WMI_OPERATIONS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DataBuffer")));
    static final java.lang.invoke.VarHandle _TAPE_WMI_OPERATIONS$DataBuffer$VH() { return _TAPE_WMI_OPERATIONS$DataBuffer$VH_; }

    static final int TapeDriveProblemNone() { return (int)0L; }

    static final int TapeDriveReadWriteWarning() { return (int)1L; }

    static final int TapeDriveReadWriteError() { return (int)2L; }

    static final int TapeDriveReadWarning() { return (int)3L; }

    static final int TapeDriveWriteWarning() { return (int)4L; }

    static final int TapeDriveReadError() { return (int)5L; }

    static final int TapeDriveWriteError() { return (int)6L; }

    static final int TapeDriveHardwareError() { return (int)7L; }

    static final int TapeDriveUnsupportedMedia() { return (int)8L; }

    static final int TapeDriveScsiConnectionError() { return (int)9L; }

    static final int TapeDriveTimetoClean() { return (int)10L; }

    static final int TapeDriveCleanDriveNow() { return (int)11L; }

    static final int TapeDriveMediaLifeExpired() { return (int)12L; }

    static final int TapeDriveSnappedTape() { return (int)13L; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("TransactionKey"),
        C_LONG.withName("TransactionNotification"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TmVirtualClock"),
        C_LONG.withName("ArgumentLength"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_TRANSACTION_NOTIFICATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION$struct$LAYOUT() { return _TRANSACTION_NOTIFICATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION$TransactionKey$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION$TransactionKey$LAYOUT() { return _TRANSACTION_NOTIFICATION$TransactionKey$LAYOUT_; }

    static final VarHandle _TRANSACTION_NOTIFICATION$TransactionKey$VH_ = MemoryHandles.asAddressVarHandle(_TRANSACTION_NOTIFICATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TransactionKey")));
    static final java.lang.invoke.VarHandle _TRANSACTION_NOTIFICATION$TransactionKey$VH() { return _TRANSACTION_NOTIFICATION$TransactionKey$VH_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION$TransactionNotification$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION$TransactionNotification$LAYOUT() { return _TRANSACTION_NOTIFICATION$TransactionNotification$LAYOUT_; }

    static final VarHandle _TRANSACTION_NOTIFICATION$TransactionNotification$VH_ = _TRANSACTION_NOTIFICATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TransactionNotification"));
    static final java.lang.invoke.VarHandle _TRANSACTION_NOTIFICATION$TransactionNotification$VH() { return _TRANSACTION_NOTIFICATION$TransactionNotification$VH_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION$ArgumentLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION$ArgumentLength$LAYOUT() { return _TRANSACTION_NOTIFICATION$ArgumentLength$LAYOUT_; }

    static final VarHandle _TRANSACTION_NOTIFICATION$ArgumentLength$VH_ = _TRANSACTION_NOTIFICATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArgumentLength"));
    static final java.lang.invoke.VarHandle _TRANSACTION_NOTIFICATION$ArgumentLength$VH() { return _TRANSACTION_NOTIFICATION$ArgumentLength$VH_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("EnlistmentId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("UOW")
    ).withName("_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT$struct$LAYOUT() { return _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("TmIdentity"),
        C_LONG.withName("Flags")
    ).withName("_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$struct$LAYOUT() { return _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$Flags$LAYOUT() { return _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$Flags$LAYOUT_; }

    static final VarHandle _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$Flags$VH_ = _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$Flags$VH() { return _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT$Flags$VH_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SavepointId")
    ).withName("_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$struct$LAYOUT() { return _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$SavepointId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$SavepointId$LAYOUT() { return _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$SavepointId$LAYOUT_; }

    static final VarHandle _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$SavepointId$VH_ = _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SavepointId"));
    static final java.lang.invoke.VarHandle _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$SavepointId$VH() { return _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT$SavepointId$VH_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PropagationCookie"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("UOW"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("TmIdentity"),
        C_LONG.withName("BufferLength")
    ).withName("_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$struct$LAYOUT() { return _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$PropagationCookie$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$PropagationCookie$LAYOUT() { return _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$PropagationCookie$LAYOUT_; }

    static final VarHandle _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$PropagationCookie$VH_ = _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PropagationCookie"));
    static final java.lang.invoke.VarHandle _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$PropagationCookie$VH() { return _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$PropagationCookie$VH_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$BufferLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$BufferLength$LAYOUT() { return _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$BufferLength$LAYOUT_; }

    static final VarHandle _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$BufferLength$VH_ = _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferLength"));
    static final java.lang.invoke.VarHandle _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$BufferLength$VH() { return _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT$BufferLength$VH_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("MarshalCookie"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("UOW")
    ).withName("_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$struct$LAYOUT() { return _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$MarshalCookie$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$MarshalCookie$LAYOUT() { return _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$MarshalCookie$LAYOUT_; }

    static final VarHandle _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$MarshalCookie$VH_ = _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MarshalCookie"));
    static final java.lang.invoke.VarHandle _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$MarshalCookie$VH() { return _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT$MarshalCookie$VH_; }

    static final MemoryLayout _KCRM_MARSHAL_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("VersionMajor"),
        C_LONG.withName("VersionMinor"),
        C_LONG.withName("NumProtocols"),
        C_LONG.withName("Unused")
    ).withName("_KCRM_MARSHAL_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _KCRM_MARSHAL_HEADER$struct$LAYOUT() { return _KCRM_MARSHAL_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _KCRM_MARSHAL_HEADER$VersionMajor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_MARSHAL_HEADER$VersionMajor$LAYOUT() { return _KCRM_MARSHAL_HEADER$VersionMajor$LAYOUT_; }

    static final VarHandle _KCRM_MARSHAL_HEADER$VersionMajor$VH_ = _KCRM_MARSHAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VersionMajor"));
    static final java.lang.invoke.VarHandle _KCRM_MARSHAL_HEADER$VersionMajor$VH() { return _KCRM_MARSHAL_HEADER$VersionMajor$VH_; }

    static final MemoryLayout _KCRM_MARSHAL_HEADER$VersionMinor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_MARSHAL_HEADER$VersionMinor$LAYOUT() { return _KCRM_MARSHAL_HEADER$VersionMinor$LAYOUT_; }

    static final VarHandle _KCRM_MARSHAL_HEADER$VersionMinor$VH_ = _KCRM_MARSHAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VersionMinor"));
    static final java.lang.invoke.VarHandle _KCRM_MARSHAL_HEADER$VersionMinor$VH() { return _KCRM_MARSHAL_HEADER$VersionMinor$VH_; }

    static final MemoryLayout _KCRM_MARSHAL_HEADER$NumProtocols$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_MARSHAL_HEADER$NumProtocols$LAYOUT() { return _KCRM_MARSHAL_HEADER$NumProtocols$LAYOUT_; }

    static final VarHandle _KCRM_MARSHAL_HEADER$NumProtocols$VH_ = _KCRM_MARSHAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumProtocols"));
    static final java.lang.invoke.VarHandle _KCRM_MARSHAL_HEADER$NumProtocols$VH() { return _KCRM_MARSHAL_HEADER$NumProtocols$VH_; }

    static final MemoryLayout _KCRM_MARSHAL_HEADER$Unused$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_MARSHAL_HEADER$Unused$LAYOUT() { return _KCRM_MARSHAL_HEADER$Unused$LAYOUT_; }

    static final VarHandle _KCRM_MARSHAL_HEADER$Unused$VH_ = _KCRM_MARSHAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Unused"));
    static final java.lang.invoke.VarHandle _KCRM_MARSHAL_HEADER$Unused$VH() { return _KCRM_MARSHAL_HEADER$Unused$VH_; }

    static final MemoryLayout _KCRM_TRANSACTION_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("UOW"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("TmIdentity"),
        C_LONG.withName("IsolationLevel"),
        C_LONG.withName("IsolationFlags"),
        C_LONG.withName("Timeout"),
        MemoryLayout.ofSequence(64, C_SHORT).withName("Description")
    ).withName("_KCRM_TRANSACTION_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _KCRM_TRANSACTION_BLOB$struct$LAYOUT() { return _KCRM_TRANSACTION_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _KCRM_TRANSACTION_BLOB$IsolationLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_TRANSACTION_BLOB$IsolationLevel$LAYOUT() { return _KCRM_TRANSACTION_BLOB$IsolationLevel$LAYOUT_; }

    static final VarHandle _KCRM_TRANSACTION_BLOB$IsolationLevel$VH_ = _KCRM_TRANSACTION_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IsolationLevel"));
    static final java.lang.invoke.VarHandle _KCRM_TRANSACTION_BLOB$IsolationLevel$VH() { return _KCRM_TRANSACTION_BLOB$IsolationLevel$VH_; }

    static final MemoryLayout _KCRM_TRANSACTION_BLOB$IsolationFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_TRANSACTION_BLOB$IsolationFlags$LAYOUT() { return _KCRM_TRANSACTION_BLOB$IsolationFlags$LAYOUT_; }

    static final VarHandle _KCRM_TRANSACTION_BLOB$IsolationFlags$VH_ = _KCRM_TRANSACTION_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IsolationFlags"));
    static final java.lang.invoke.VarHandle _KCRM_TRANSACTION_BLOB$IsolationFlags$VH() { return _KCRM_TRANSACTION_BLOB$IsolationFlags$VH_; }

    static final MemoryLayout _KCRM_TRANSACTION_BLOB$Timeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_TRANSACTION_BLOB$Timeout$LAYOUT() { return _KCRM_TRANSACTION_BLOB$Timeout$LAYOUT_; }

    static final VarHandle _KCRM_TRANSACTION_BLOB$Timeout$VH_ = _KCRM_TRANSACTION_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Timeout"));
    static final java.lang.invoke.VarHandle _KCRM_TRANSACTION_BLOB$Timeout$VH() { return _KCRM_TRANSACTION_BLOB$Timeout$VH_; }

    static final MemoryLayout _KCRM_PROTOCOL_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ProtocolId"),
        C_LONG.withName("StaticInfoLength"),
        C_LONG.withName("TransactionIdInfoLength"),
        C_LONG.withName("Unused1"),
        C_LONG.withName("Unused2")
    ).withName("_KCRM_PROTOCOL_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _KCRM_PROTOCOL_BLOB$struct$LAYOUT() { return _KCRM_PROTOCOL_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _KCRM_PROTOCOL_BLOB$StaticInfoLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_PROTOCOL_BLOB$StaticInfoLength$LAYOUT() { return _KCRM_PROTOCOL_BLOB$StaticInfoLength$LAYOUT_; }

    static final VarHandle _KCRM_PROTOCOL_BLOB$StaticInfoLength$VH_ = _KCRM_PROTOCOL_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StaticInfoLength"));
    static final java.lang.invoke.VarHandle _KCRM_PROTOCOL_BLOB$StaticInfoLength$VH() { return _KCRM_PROTOCOL_BLOB$StaticInfoLength$VH_; }

    static final MemoryLayout _KCRM_PROTOCOL_BLOB$TransactionIdInfoLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_PROTOCOL_BLOB$TransactionIdInfoLength$LAYOUT() { return _KCRM_PROTOCOL_BLOB$TransactionIdInfoLength$LAYOUT_; }

    static final VarHandle _KCRM_PROTOCOL_BLOB$TransactionIdInfoLength$VH_ = _KCRM_PROTOCOL_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TransactionIdInfoLength"));
    static final java.lang.invoke.VarHandle _KCRM_PROTOCOL_BLOB$TransactionIdInfoLength$VH() { return _KCRM_PROTOCOL_BLOB$TransactionIdInfoLength$VH_; }

    static final MemoryLayout _KCRM_PROTOCOL_BLOB$Unused1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_PROTOCOL_BLOB$Unused1$LAYOUT() { return _KCRM_PROTOCOL_BLOB$Unused1$LAYOUT_; }

    static final VarHandle _KCRM_PROTOCOL_BLOB$Unused1$VH_ = _KCRM_PROTOCOL_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Unused1"));
    static final java.lang.invoke.VarHandle _KCRM_PROTOCOL_BLOB$Unused1$VH() { return _KCRM_PROTOCOL_BLOB$Unused1$VH_; }

    static final MemoryLayout _KCRM_PROTOCOL_BLOB$Unused2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KCRM_PROTOCOL_BLOB$Unused2$LAYOUT() { return _KCRM_PROTOCOL_BLOB$Unused2$LAYOUT_; }

    static final VarHandle _KCRM_PROTOCOL_BLOB$Unused2$VH_ = _KCRM_PROTOCOL_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Unused2"));
    static final java.lang.invoke.VarHandle _KCRM_PROTOCOL_BLOB$Unused2$VH() { return _KCRM_PROTOCOL_BLOB$Unused2$VH_; }

    static final int TransactionOutcomeUndetermined() { return (int)1L; }

    static final int TransactionOutcomeCommitted() { return (int)2L; }

    static final int TransactionOutcomeAborted() { return (int)3L; }

    static final int TransactionStateNormal() { return (int)1L; }

    static final int TransactionStateIndoubt() { return (int)2L; }

    static final int TransactionStateCommittedNotify() { return (int)3L; }

    static final MemoryLayout _TRANSACTION_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("TransactionId"),
        C_LONG.withName("State"),
        C_LONG.withName("Outcome")
    ).withName("_TRANSACTION_BASIC_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_BASIC_INFORMATION$struct$LAYOUT() { return _TRANSACTION_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_BASIC_INFORMATION$State$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_BASIC_INFORMATION$State$LAYOUT() { return _TRANSACTION_BASIC_INFORMATION$State$LAYOUT_; }

    static final VarHandle _TRANSACTION_BASIC_INFORMATION$State$VH_ = _TRANSACTION_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle _TRANSACTION_BASIC_INFORMATION$State$VH() { return _TRANSACTION_BASIC_INFORMATION$State$VH_; }

    static final MemoryLayout _TRANSACTION_BASIC_INFORMATION$Outcome$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_BASIC_INFORMATION$Outcome$LAYOUT() { return _TRANSACTION_BASIC_INFORMATION$Outcome$LAYOUT_; }

    static final VarHandle _TRANSACTION_BASIC_INFORMATION$Outcome$VH_ = _TRANSACTION_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Outcome"));
    static final java.lang.invoke.VarHandle _TRANSACTION_BASIC_INFORMATION$Outcome$VH() { return _TRANSACTION_BASIC_INFORMATION$Outcome$VH_; }

    static final MemoryLayout _TRANSACTIONMANAGER_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("TmIdentity"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("VirtualClock")
    ).withName("_TRANSACTIONMANAGER_BASIC_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTIONMANAGER_BASIC_INFORMATION$struct$LAYOUT() { return _TRANSACTIONMANAGER_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTIONMANAGER_LOG_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("LogIdentity")
    ).withName("_TRANSACTIONMANAGER_LOG_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTIONMANAGER_LOG_INFORMATION$struct$LAYOUT() { return _TRANSACTIONMANAGER_LOG_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTIONMANAGER_LOGPATH_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LogPathLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("LogPath"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_TRANSACTIONMANAGER_LOGPATH_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTIONMANAGER_LOGPATH_INFORMATION$struct$LAYOUT() { return _TRANSACTIONMANAGER_LOGPATH_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$LAYOUT() { return _TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$LAYOUT_; }

    static final VarHandle _TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$VH_ = _TRANSACTIONMANAGER_LOGPATH_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogPathLength"));
    static final java.lang.invoke.VarHandle _TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$VH() { return _TRANSACTIONMANAGER_LOGPATH_INFORMATION$LogPathLength$VH_; }

    static final MemoryLayout _TRANSACTIONMANAGER_RECOVERY_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("LastRecoveredLsn")
    ).withName("_TRANSACTIONMANAGER_RECOVERY_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTIONMANAGER_RECOVERY_INFORMATION$struct$LAYOUT() { return _TRANSACTIONMANAGER_RECOVERY_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$LAYOUT() { return _TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$LAYOUT_; }

    static final VarHandle _TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$VH_ = _TRANSACTIONMANAGER_RECOVERY_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LastRecoveredLsn"));
    static final java.lang.invoke.VarHandle _TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$VH() { return _TRANSACTIONMANAGER_RECOVERY_INFORMATION$LastRecoveredLsn$VH_; }

    static final MemoryLayout _TRANSACTIONMANAGER_OLDEST_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("OldestTransactionGuid")
    ).withName("_TRANSACTIONMANAGER_OLDEST_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTIONMANAGER_OLDEST_INFORMATION$struct$LAYOUT() { return _TRANSACTIONMANAGER_OLDEST_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("IsolationLevel"),
        C_LONG.withName("IsolationFlags"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Timeout"),
        C_LONG.withName("Outcome"),
        C_LONG.withName("DescriptionLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("Description"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_TRANSACTION_PROPERTIES_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$struct$LAYOUT() { return _TRANSACTION_PROPERTIES_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$LAYOUT() { return _TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$LAYOUT_; }

    static final VarHandle _TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$VH_ = _TRANSACTION_PROPERTIES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IsolationLevel"));
    static final java.lang.invoke.VarHandle _TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$VH() { return _TRANSACTION_PROPERTIES_INFORMATION$IsolationLevel$VH_; }

    static final MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$LAYOUT() { return _TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$LAYOUT_; }

    static final VarHandle _TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$VH_ = _TRANSACTION_PROPERTIES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IsolationFlags"));
    static final java.lang.invoke.VarHandle _TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$VH() { return _TRANSACTION_PROPERTIES_INFORMATION$IsolationFlags$VH_; }

    static final MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$Outcome$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$Outcome$LAYOUT() { return _TRANSACTION_PROPERTIES_INFORMATION$Outcome$LAYOUT_; }

    static final VarHandle _TRANSACTION_PROPERTIES_INFORMATION$Outcome$VH_ = _TRANSACTION_PROPERTIES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Outcome"));
    static final java.lang.invoke.VarHandle _TRANSACTION_PROPERTIES_INFORMATION$Outcome$VH() { return _TRANSACTION_PROPERTIES_INFORMATION$Outcome$VH_; }

    static final MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$LAYOUT() { return _TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$LAYOUT_; }

    static final VarHandle _TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$VH_ = _TRANSACTION_PROPERTIES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DescriptionLength"));
    static final java.lang.invoke.VarHandle _TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$VH() { return _TRANSACTION_PROPERTIES_INFORMATION$DescriptionLength$VH_; }

    static final MemoryLayout _TRANSACTION_BIND_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("TmHandle")
    ).withName("_TRANSACTION_BIND_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_BIND_INFORMATION$struct$LAYOUT() { return _TRANSACTION_BIND_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_BIND_INFORMATION$TmHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_BIND_INFORMATION$TmHandle$LAYOUT() { return _TRANSACTION_BIND_INFORMATION$TmHandle$LAYOUT_; }

    static final VarHandle _TRANSACTION_BIND_INFORMATION$TmHandle$VH_ = MemoryHandles.asAddressVarHandle(_TRANSACTION_BIND_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TmHandle")));
    static final java.lang.invoke.VarHandle _TRANSACTION_BIND_INFORMATION$TmHandle$VH() { return _TRANSACTION_BIND_INFORMATION$TmHandle$VH_; }

    static final MemoryLayout _TRANSACTION_ENLISTMENT_PAIR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("EnlistmentId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ResourceManagerId")
    ).withName("_TRANSACTION_ENLISTMENT_PAIR");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_ENLISTMENT_PAIR$struct$LAYOUT() { return _TRANSACTION_ENLISTMENT_PAIR$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_ENLISTMENTS_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfEnlistments"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("EnlistmentId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("ResourceManagerId")
        ).withName("_TRANSACTION_ENLISTMENT_PAIR")).withName("EnlistmentPair")
    ).withName("_TRANSACTION_ENLISTMENTS_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_ENLISTMENTS_INFORMATION$struct$LAYOUT() { return _TRANSACTION_ENLISTMENTS_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$LAYOUT() { return _TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$LAYOUT_; }

    static final VarHandle _TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$VH_ = _TRANSACTION_ENLISTMENTS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfEnlistments"));
    static final java.lang.invoke.VarHandle _TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$VH() { return _TRANSACTION_ENLISTMENTS_INFORMATION$NumberOfEnlistments$VH_; }

    static final MemoryLayout _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("EnlistmentId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("ResourceManagerId")
        ).withName("SuperiorEnlistmentPair")
    ).withName("_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION$struct$LAYOUT() { return _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _RESOURCEMANAGER_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ResourceManagerId"),
        C_LONG.withName("DescriptionLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("Description"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_RESOURCEMANAGER_BASIC_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _RESOURCEMANAGER_BASIC_INFORMATION$struct$LAYOUT() { return _RESOURCEMANAGER_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$LAYOUT() { return _RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$LAYOUT_; }

    static final VarHandle _RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$VH_ = _RESOURCEMANAGER_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DescriptionLength"));
    static final java.lang.invoke.VarHandle _RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$VH() { return _RESOURCEMANAGER_BASIC_INFORMATION$DescriptionLength$VH_; }

    static final MemoryLayout _RESOURCEMANAGER_COMPLETION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("IoCompletionPortHandle"),
        C_LONGLONG.withName("CompletionKey")
    ).withName("_RESOURCEMANAGER_COMPLETION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _RESOURCEMANAGER_COMPLETION_INFORMATION$struct$LAYOUT() { return _RESOURCEMANAGER_COMPLETION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$LAYOUT() { return _RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$LAYOUT_; }

    static final VarHandle _RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$VH_ = MemoryHandles.asAddressVarHandle(_RESOURCEMANAGER_COMPLETION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoCompletionPortHandle")));
    static final java.lang.invoke.VarHandle _RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$VH() { return _RESOURCEMANAGER_COMPLETION_INFORMATION$IoCompletionPortHandle$VH_; }

    static final MemoryLayout _RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$LAYOUT() { return _RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$LAYOUT_; }

    static final VarHandle _RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$VH_ = _RESOURCEMANAGER_COMPLETION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompletionKey"));
    static final java.lang.invoke.VarHandle _RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$VH() { return _RESOURCEMANAGER_COMPLETION_INFORMATION$CompletionKey$VH_; }

    static final int TransactionBasicInformation() { return (int)0L; }

    static final int TransactionPropertiesInformation() { return (int)1L; }

    static final int TransactionEnlistmentInformation() { return (int)2L; }

    static final int TransactionSuperiorEnlistmentInformation() { return (int)3L; }

    static final int TransactionBindInformation() { return (int)4L; }

    static final int TransactionDTCPrivateInformation() { return (int)5L; }

    static final int TransactionManagerBasicInformation() { return (int)0L; }

    static final int TransactionManagerLogInformation() { return (int)1L; }

    static final int TransactionManagerLogPathInformation() { return (int)2L; }

    static final int TransactionManagerRecoveryInformation() { return (int)4L; }

    static final int TransactionManagerOnlineProbeInformation() { return (int)3L; }

    static final int TransactionManagerOldestTransactionInformation() { return (int)5L; }

    static final int ResourceManagerBasicInformation() { return (int)0L; }

    static final int ResourceManagerCompletionInformation() { return (int)1L; }

    static final MemoryLayout _ENLISTMENT_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("EnlistmentId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("TransactionId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ResourceManagerId")
    ).withName("_ENLISTMENT_BASIC_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ENLISTMENT_BASIC_INFORMATION$struct$LAYOUT() { return _ENLISTMENT_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ENLISTMENT_CRM_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("CrmTransactionManagerId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("CrmResourceManagerId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("CrmEnlistmentId")
    ).withName("_ENLISTMENT_CRM_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ENLISTMENT_CRM_INFORMATION$struct$LAYOUT() { return _ENLISTMENT_CRM_INFORMATION$struct$LAYOUT_; }

    static final int EnlistmentBasicInformation() { return (int)0L; }

    static final int EnlistmentRecoveryInformation() { return (int)1L; }

    static final int EnlistmentCrmInformation() { return (int)2L; }

    static final MemoryLayout _TRANSACTION_LIST_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("UOW")
    ).withName("_TRANSACTION_LIST_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_LIST_ENTRY$struct$LAYOUT() { return _TRANSACTION_LIST_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_LIST_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfTransactions"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("UOW")
        ).withName("_TRANSACTION_LIST_ENTRY")).withName("TransactionInformation")
    ).withName("_TRANSACTION_LIST_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_LIST_INFORMATION$struct$LAYOUT() { return _TRANSACTION_LIST_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TRANSACTION_LIST_INFORMATION$NumberOfTransactions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRANSACTION_LIST_INFORMATION$NumberOfTransactions$LAYOUT() { return _TRANSACTION_LIST_INFORMATION$NumberOfTransactions$LAYOUT_; }

    static final VarHandle _TRANSACTION_LIST_INFORMATION$NumberOfTransactions$VH_ = _TRANSACTION_LIST_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfTransactions"));
    static final java.lang.invoke.VarHandle _TRANSACTION_LIST_INFORMATION$NumberOfTransactions$VH() { return _TRANSACTION_LIST_INFORMATION$NumberOfTransactions$VH_; }

    static final int KTMOBJECT_TRANSACTION() { return (int)0L; }

    static final int KTMOBJECT_TRANSACTION_MANAGER() { return (int)1L; }

    static final int KTMOBJECT_RESOURCE_MANAGER() { return (int)2L; }

    static final int KTMOBJECT_ENLISTMENT() { return (int)3L; }

    static final int KTMOBJECT_INVALID() { return (int)4L; }

    static final MemoryLayout _KTMOBJECT_CURSOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("LastQuery"),
        C_LONG.withName("ObjectIdCount"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("_GUID")).withName("ObjectIds")
    ).withName("_KTMOBJECT_CURSOR");
    static final jdk.incubator.foreign.MemoryLayout _KTMOBJECT_CURSOR$struct$LAYOUT() { return _KTMOBJECT_CURSOR$struct$LAYOUT_; }

    static final MemoryLayout _KTMOBJECT_CURSOR$ObjectIdCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KTMOBJECT_CURSOR$ObjectIdCount$LAYOUT() { return _KTMOBJECT_CURSOR$ObjectIdCount$LAYOUT_; }

    static final VarHandle _KTMOBJECT_CURSOR$ObjectIdCount$VH_ = _KTMOBJECT_CURSOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ObjectIdCount"));
    static final java.lang.invoke.VarHandle _KTMOBJECT_CURSOR$ObjectIdCount$VH() { return _KTMOBJECT_CURSOR$ObjectIdCount$VH_; }

    static final int TP_CALLBACK_PRIORITY_HIGH() { return (int)0L; }

    static final int TP_CALLBACK_PRIORITY_NORMAL() { return (int)1L; }

    static final int TP_CALLBACK_PRIORITY_LOW() { return (int)2L; }

    static final int TP_CALLBACK_PRIORITY_INVALID() { return (int)3L; }

    static final int TP_CALLBACK_PRIORITY_COUNT() { return (int)3L; }

    static final MemoryLayout _TP_POOL_STACK_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StackReserve"),
        C_LONGLONG.withName("StackCommit")
    ).withName("_TP_POOL_STACK_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TP_POOL_STACK_INFORMATION$struct$LAYOUT() { return _TP_POOL_STACK_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TP_POOL_STACK_INFORMATION$StackReserve$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TP_POOL_STACK_INFORMATION$StackReserve$LAYOUT() { return _TP_POOL_STACK_INFORMATION$StackReserve$LAYOUT_; }

    static final VarHandle _TP_POOL_STACK_INFORMATION$StackReserve$VH_ = _TP_POOL_STACK_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackReserve"));
    static final java.lang.invoke.VarHandle _TP_POOL_STACK_INFORMATION$StackReserve$VH() { return _TP_POOL_STACK_INFORMATION$StackReserve$VH_; }

    static final MemoryLayout _TP_POOL_STACK_INFORMATION$StackCommit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TP_POOL_STACK_INFORMATION$StackCommit$LAYOUT() { return _TP_POOL_STACK_INFORMATION$StackCommit$LAYOUT_; }

    static final VarHandle _TP_POOL_STACK_INFORMATION$StackCommit$VH_ = _TP_POOL_STACK_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackCommit"));
    static final java.lang.invoke.VarHandle _TP_POOL_STACK_INFORMATION$StackCommit$VH() { return _TP_POOL_STACK_INFORMATION$StackCommit$VH_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("Pool"),
        C_POINTER.withName("CleanupGroup"),
        C_POINTER.withName("CleanupGroupCancelCallback"),
        C_POINTER.withName("RaceDll"),
        C_POINTER.withName("ActivationContext"),
        C_POINTER.withName("FinalizationCallback"),
        MemoryLayout.ofUnion(
            C_LONG.withName("Flags"),
            MemoryLayout.ofStruct(
                C_INT
            ).withName("s")
        ).withName("u"),
        C_INT.withName("CallbackPriority"),
        C_LONG.withName("Size"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_TP_CALLBACK_ENVIRON_V3");
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$struct$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$Version$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$Version$LAYOUT_; }

    static final VarHandle _TP_CALLBACK_ENVIRON_V3$Version$VH_ = _TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _TP_CALLBACK_ENVIRON_V3$Version$VH() { return _TP_CALLBACK_ENVIRON_V3$Version$VH_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$Pool$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$Pool$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$Pool$LAYOUT_; }

    static final VarHandle _TP_CALLBACK_ENVIRON_V3$Pool$VH_ = MemoryHandles.asAddressVarHandle(_TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Pool")));
    static final java.lang.invoke.VarHandle _TP_CALLBACK_ENVIRON_V3$Pool$VH() { return _TP_CALLBACK_ENVIRON_V3$Pool$VH_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$CleanupGroup$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$CleanupGroup$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$CleanupGroup$LAYOUT_; }

    static final VarHandle _TP_CALLBACK_ENVIRON_V3$CleanupGroup$VH_ = MemoryHandles.asAddressVarHandle(_TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CleanupGroup")));
    static final java.lang.invoke.VarHandle _TP_CALLBACK_ENVIRON_V3$CleanupGroup$VH() { return _TP_CALLBACK_ENVIRON_V3$CleanupGroup$VH_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$LAYOUT_; }

    static final VarHandle _TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$VH_ = MemoryHandles.asAddressVarHandle(_TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CleanupGroupCancelCallback")));
    static final java.lang.invoke.VarHandle _TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$VH() { return _TP_CALLBACK_ENVIRON_V3$CleanupGroupCancelCallback$VH_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$RaceDll$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$RaceDll$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$RaceDll$LAYOUT_; }

    static final VarHandle _TP_CALLBACK_ENVIRON_V3$RaceDll$VH_ = MemoryHandles.asAddressVarHandle(_TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RaceDll")));
    static final java.lang.invoke.VarHandle _TP_CALLBACK_ENVIRON_V3$RaceDll$VH() { return _TP_CALLBACK_ENVIRON_V3$RaceDll$VH_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$ActivationContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$ActivationContext$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$ActivationContext$LAYOUT_; }

    static final VarHandle _TP_CALLBACK_ENVIRON_V3$ActivationContext$VH_ = MemoryHandles.asAddressVarHandle(_TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ActivationContext")));
    static final java.lang.invoke.VarHandle _TP_CALLBACK_ENVIRON_V3$ActivationContext$VH() { return _TP_CALLBACK_ENVIRON_V3$ActivationContext$VH_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$FinalizationCallback$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$FinalizationCallback$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$FinalizationCallback$LAYOUT_; }

    static final VarHandle _TP_CALLBACK_ENVIRON_V3$FinalizationCallback$VH_ = MemoryHandles.asAddressVarHandle(_TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FinalizationCallback")));
    static final java.lang.invoke.VarHandle _TP_CALLBACK_ENVIRON_V3$FinalizationCallback$VH() { return _TP_CALLBACK_ENVIRON_V3$FinalizationCallback$VH_; }

    static final MemoryLayout u$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout u$Flags$LAYOUT() { return u$Flags$LAYOUT_; }

    static final VarHandle u$Flags$VH_ = u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle u$Flags$VH() { return u$Flags$VH_; }

    static final MemoryLayout s$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    );
    static final jdk.incubator.foreign.MemoryLayout s$struct$LAYOUT() { return s$struct$LAYOUT_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$CallbackPriority$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$CallbackPriority$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$CallbackPriority$LAYOUT_; }

    static final VarHandle _TP_CALLBACK_ENVIRON_V3$CallbackPriority$VH_ = _TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CallbackPriority"));
    static final java.lang.invoke.VarHandle _TP_CALLBACK_ENVIRON_V3$CallbackPriority$VH() { return _TP_CALLBACK_ENVIRON_V3$CallbackPriority$VH_; }

    static final MemoryLayout _TP_CALLBACK_ENVIRON_V3$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TP_CALLBACK_ENVIRON_V3$Size$LAYOUT() { return _TP_CALLBACK_ENVIRON_V3$Size$LAYOUT_; }

    static final VarHandle _TP_CALLBACK_ENVIRON_V3$Size$VH_ = _TP_CALLBACK_ENVIRON_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _TP_CALLBACK_ENVIRON_V3$Size$VH() { return _TP_CALLBACK_ENVIRON_V3$Size$VH_; }

    static final FunctionDescriptor TpInitializeCallbackEnviron$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpInitializeCallbackEnviron$FUNC() { return TpInitializeCallbackEnviron$FUNC_; }

    static final MethodHandle TpInitializeCallbackEnviron$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpInitializeCallbackEnviron",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        TpInitializeCallbackEnviron$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpInitializeCallbackEnviron$MH() { return TpInitializeCallbackEnviron$MH_; }

    static final FunctionDescriptor TpSetCallbackThreadpool$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackThreadpool$FUNC() { return TpSetCallbackThreadpool$FUNC_; }

    static final MethodHandle TpSetCallbackThreadpool$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpSetCallbackThreadpool",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        TpSetCallbackThreadpool$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpSetCallbackThreadpool$MH() { return TpSetCallbackThreadpool$MH_; }

    static final FunctionDescriptor TpSetCallbackCleanupGroup$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackCleanupGroup$FUNC() { return TpSetCallbackCleanupGroup$FUNC_; }

    static final MethodHandle TpSetCallbackCleanupGroup$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpSetCallbackCleanupGroup",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        TpSetCallbackCleanupGroup$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpSetCallbackCleanupGroup$MH() { return TpSetCallbackCleanupGroup$MH_; }

    static final FunctionDescriptor TpSetCallbackCleanupGroup$CleanupGroupCancelCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackCleanupGroup$CleanupGroupCancelCallback$FUNC() { return TpSetCallbackCleanupGroup$CleanupGroupCancelCallback$FUNC_; }

    static final FunctionDescriptor TpSetCallbackActivationContext$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackActivationContext$FUNC() { return TpSetCallbackActivationContext$FUNC_; }

    static final MethodHandle TpSetCallbackActivationContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpSetCallbackActivationContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        TpSetCallbackActivationContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpSetCallbackActivationContext$MH() { return TpSetCallbackActivationContext$MH_; }

    static final FunctionDescriptor TpSetCallbackNoActivationContext$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackNoActivationContext$FUNC() { return TpSetCallbackNoActivationContext$FUNC_; }

    static final MethodHandle TpSetCallbackNoActivationContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpSetCallbackNoActivationContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        TpSetCallbackNoActivationContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpSetCallbackNoActivationContext$MH() { return TpSetCallbackNoActivationContext$MH_; }

    static final FunctionDescriptor TpSetCallbackLongFunction$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackLongFunction$FUNC() { return TpSetCallbackLongFunction$FUNC_; }

    static final MethodHandle TpSetCallbackLongFunction$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpSetCallbackLongFunction",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        TpSetCallbackLongFunction$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpSetCallbackLongFunction$MH() { return TpSetCallbackLongFunction$MH_; }

    static final FunctionDescriptor TpSetCallbackRaceWithDll$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackRaceWithDll$FUNC() { return TpSetCallbackRaceWithDll$FUNC_; }

    static final MethodHandle TpSetCallbackRaceWithDll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpSetCallbackRaceWithDll",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        TpSetCallbackRaceWithDll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpSetCallbackRaceWithDll$MH() { return TpSetCallbackRaceWithDll$MH_; }

    static final FunctionDescriptor TpSetCallbackFinalizationCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackFinalizationCallback$FUNC() { return TpSetCallbackFinalizationCallback$FUNC_; }

    static final MethodHandle TpSetCallbackFinalizationCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpSetCallbackFinalizationCallback",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        TpSetCallbackFinalizationCallback$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpSetCallbackFinalizationCallback$MH() { return TpSetCallbackFinalizationCallback$MH_; }

    static final FunctionDescriptor TpSetCallbackFinalizationCallback$FinalizationCallback$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackFinalizationCallback$FinalizationCallback$FUNC() { return TpSetCallbackFinalizationCallback$FinalizationCallback$FUNC_; }

    static final FunctionDescriptor TpSetCallbackPriority$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackPriority$FUNC() { return TpSetCallbackPriority$FUNC_; }

    static final MethodHandle TpSetCallbackPriority$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpSetCallbackPriority",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        TpSetCallbackPriority$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpSetCallbackPriority$MH() { return TpSetCallbackPriority$MH_; }

    static final FunctionDescriptor TpSetCallbackPersistent$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpSetCallbackPersistent$FUNC() { return TpSetCallbackPersistent$FUNC_; }

    static final MethodHandle TpSetCallbackPersistent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpSetCallbackPersistent",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        TpSetCallbackPersistent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpSetCallbackPersistent$MH() { return TpSetCallbackPersistent$MH_; }

    static final FunctionDescriptor TpDestroyCallbackEnviron$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TpDestroyCallbackEnviron$FUNC() { return TpDestroyCallbackEnviron$FUNC_; }

    static final MethodHandle TpDestroyCallbackEnviron$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TpDestroyCallbackEnviron",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        TpDestroyCallbackEnviron$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TpDestroyCallbackEnviron$MH() { return TpDestroyCallbackEnviron$MH_; }

    static final FunctionDescriptor NtCurrentTeb$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor NtCurrentTeb$FUNC() { return NtCurrentTeb$FUNC_; }

    static final MethodHandle NtCurrentTeb$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NtCurrentTeb",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        NtCurrentTeb$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NtCurrentTeb$MH() { return NtCurrentTeb$MH_; }

    static final FunctionDescriptor GetCurrentFiber$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor GetCurrentFiber$FUNC() { return GetCurrentFiber$FUNC_; }

    static final MethodHandle GetCurrentFiber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentFiber",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentFiber$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCurrentFiber$MH() { return GetCurrentFiber$MH_; }

    static final FunctionDescriptor GetFiberData$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor GetFiberData$FUNC() { return GetFiberData$FUNC_; }

    static final MethodHandle GetFiberData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFiberData",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetFiberData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFiberData$MH() { return GetFiberData$MH_; }

    static final MemoryLayout HKEY__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HKEY__");
    static final jdk.incubator.foreign.MemoryLayout HKEY__$struct$LAYOUT() { return HKEY__$struct$LAYOUT_; }

    static final MemoryLayout HKEY__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HKEY__$unused$LAYOUT() { return HKEY__$unused$LAYOUT_; }

    static final VarHandle HKEY__$unused$VH_ = HKEY__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HKEY__$unused$VH() { return HKEY__$unused$VH_; }

    static final MemoryLayout HMETAFILE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HMETAFILE__");
    static final jdk.incubator.foreign.MemoryLayout HMETAFILE__$struct$LAYOUT() { return HMETAFILE__$struct$LAYOUT_; }

    static final MemoryLayout HMETAFILE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HMETAFILE__$unused$LAYOUT() { return HMETAFILE__$unused$LAYOUT_; }

    static final VarHandle HMETAFILE__$unused$VH_ = HMETAFILE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HMETAFILE__$unused$VH() { return HMETAFILE__$unused$VH_; }

    static final MemoryLayout HINSTANCE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HINSTANCE__");
    static final jdk.incubator.foreign.MemoryLayout HINSTANCE__$struct$LAYOUT() { return HINSTANCE__$struct$LAYOUT_; }

    static final MemoryLayout HINSTANCE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HINSTANCE__$unused$LAYOUT() { return HINSTANCE__$unused$LAYOUT_; }

    static final VarHandle HINSTANCE__$unused$VH_ = HINSTANCE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HINSTANCE__$unused$VH() { return HINSTANCE__$unused$VH_; }

    static final MemoryLayout HRGN__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HRGN__");
    static final jdk.incubator.foreign.MemoryLayout HRGN__$struct$LAYOUT() { return HRGN__$struct$LAYOUT_; }

    static final MemoryLayout HRGN__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HRGN__$unused$LAYOUT() { return HRGN__$unused$LAYOUT_; }

    static final VarHandle HRGN__$unused$VH_ = HRGN__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HRGN__$unused$VH() { return HRGN__$unused$VH_; }

    static final MemoryLayout HRSRC__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HRSRC__");
    static final jdk.incubator.foreign.MemoryLayout HRSRC__$struct$LAYOUT() { return HRSRC__$struct$LAYOUT_; }

    static final MemoryLayout HRSRC__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HRSRC__$unused$LAYOUT() { return HRSRC__$unused$LAYOUT_; }

    static final VarHandle HRSRC__$unused$VH_ = HRSRC__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HRSRC__$unused$VH() { return HRSRC__$unused$VH_; }

    static final MemoryLayout HSPRITE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HSPRITE__");
    static final jdk.incubator.foreign.MemoryLayout HSPRITE__$struct$LAYOUT() { return HSPRITE__$struct$LAYOUT_; }

    static final MemoryLayout HSPRITE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HSPRITE__$unused$LAYOUT() { return HSPRITE__$unused$LAYOUT_; }

    static final VarHandle HSPRITE__$unused$VH_ = HSPRITE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HSPRITE__$unused$VH() { return HSPRITE__$unused$VH_; }

    static final MemoryLayout HLSURF__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HLSURF__");
    static final jdk.incubator.foreign.MemoryLayout HLSURF__$struct$LAYOUT() { return HLSURF__$struct$LAYOUT_; }

    static final MemoryLayout HLSURF__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HLSURF__$unused$LAYOUT() { return HLSURF__$unused$LAYOUT_; }

    static final VarHandle HLSURF__$unused$VH_ = HLSURF__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HLSURF__$unused$VH() { return HLSURF__$unused$VH_; }

    static final MemoryLayout HSTR__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HSTR__");
    static final jdk.incubator.foreign.MemoryLayout HSTR__$struct$LAYOUT() { return HSTR__$struct$LAYOUT_; }

    static final MemoryLayout HSTR__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HSTR__$unused$LAYOUT() { return HSTR__$unused$LAYOUT_; }

    static final VarHandle HSTR__$unused$VH_ = HSTR__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HSTR__$unused$VH() { return HSTR__$unused$VH_; }

    static final MemoryLayout HTASK__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HTASK__");
    static final jdk.incubator.foreign.MemoryLayout HTASK__$struct$LAYOUT() { return HTASK__$struct$LAYOUT_; }

    static final MemoryLayout HTASK__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HTASK__$unused$LAYOUT() { return HTASK__$unused$LAYOUT_; }

    static final VarHandle HTASK__$unused$VH_ = HTASK__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HTASK__$unused$VH() { return HTASK__$unused$VH_; }

    static final MemoryLayout HWINSTA__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HWINSTA__");
    static final jdk.incubator.foreign.MemoryLayout HWINSTA__$struct$LAYOUT() { return HWINSTA__$struct$LAYOUT_; }

    static final MemoryLayout HWINSTA__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HWINSTA__$unused$LAYOUT() { return HWINSTA__$unused$LAYOUT_; }

    static final VarHandle HWINSTA__$unused$VH_ = HWINSTA__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HWINSTA__$unused$VH() { return HWINSTA__$unused$VH_; }

    static final MemoryLayout HKL__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HKL__");
    static final jdk.incubator.foreign.MemoryLayout HKL__$struct$LAYOUT() { return HKL__$struct$LAYOUT_; }

    static final MemoryLayout HKL__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HKL__$unused$LAYOUT() { return HKL__$unused$LAYOUT_; }

    static final VarHandle HKL__$unused$VH_ = HKL__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HKL__$unused$VH() { return HKL__$unused$VH_; }

    static final MemoryLayout _FILETIME$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwLowDateTime"),
        C_LONG.withName("dwHighDateTime")
    ).withName("_FILETIME");
    static final jdk.incubator.foreign.MemoryLayout _FILETIME$struct$LAYOUT() { return _FILETIME$struct$LAYOUT_; }

    static final MemoryLayout _FILETIME$dwLowDateTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILETIME$dwLowDateTime$LAYOUT() { return _FILETIME$dwLowDateTime$LAYOUT_; }

    static final VarHandle _FILETIME$dwLowDateTime$VH_ = _FILETIME$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwLowDateTime"));
    static final java.lang.invoke.VarHandle _FILETIME$dwLowDateTime$VH() { return _FILETIME$dwLowDateTime$VH_; }

    static final MemoryLayout _FILETIME$dwHighDateTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILETIME$dwHighDateTime$LAYOUT() { return _FILETIME$dwHighDateTime$LAYOUT_; }

    static final VarHandle _FILETIME$dwHighDateTime$VH_ = _FILETIME$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwHighDateTime"));
    static final java.lang.invoke.VarHandle _FILETIME$dwHighDateTime$VH() { return _FILETIME$dwHighDateTime$VH_; }

    static final MemoryLayout HWND__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HWND__");
    static final jdk.incubator.foreign.MemoryLayout HWND__$struct$LAYOUT() { return HWND__$struct$LAYOUT_; }

    static final MemoryLayout HWND__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HWND__$unused$LAYOUT() { return HWND__$unused$LAYOUT_; }

    static final VarHandle HWND__$unused$VH_ = HWND__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HWND__$unused$VH() { return HWND__$unused$VH_; }

    static final MemoryLayout HHOOK__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HHOOK__");
    static final jdk.incubator.foreign.MemoryLayout HHOOK__$struct$LAYOUT() { return HHOOK__$struct$LAYOUT_; }

    static final MemoryLayout HHOOK__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HHOOK__$unused$LAYOUT() { return HHOOK__$unused$LAYOUT_; }

    static final VarHandle HHOOK__$unused$VH_ = HHOOK__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HHOOK__$unused$VH() { return HHOOK__$unused$VH_; }

    static final MemoryLayout HACCEL__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HACCEL__");
    static final jdk.incubator.foreign.MemoryLayout HACCEL__$struct$LAYOUT() { return HACCEL__$struct$LAYOUT_; }

    static final MemoryLayout HACCEL__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HACCEL__$unused$LAYOUT() { return HACCEL__$unused$LAYOUT_; }

    static final VarHandle HACCEL__$unused$VH_ = HACCEL__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HACCEL__$unused$VH() { return HACCEL__$unused$VH_; }

    static final MemoryLayout HBITMAP__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HBITMAP__");
    static final jdk.incubator.foreign.MemoryLayout HBITMAP__$struct$LAYOUT() { return HBITMAP__$struct$LAYOUT_; }

    static final MemoryLayout HBITMAP__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HBITMAP__$unused$LAYOUT() { return HBITMAP__$unused$LAYOUT_; }

    static final VarHandle HBITMAP__$unused$VH_ = HBITMAP__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HBITMAP__$unused$VH() { return HBITMAP__$unused$VH_; }

    static final MemoryLayout HBRUSH__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HBRUSH__");
    static final jdk.incubator.foreign.MemoryLayout HBRUSH__$struct$LAYOUT() { return HBRUSH__$struct$LAYOUT_; }

    static final MemoryLayout HBRUSH__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HBRUSH__$unused$LAYOUT() { return HBRUSH__$unused$LAYOUT_; }

    static final VarHandle HBRUSH__$unused$VH_ = HBRUSH__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HBRUSH__$unused$VH() { return HBRUSH__$unused$VH_; }

    static final MemoryLayout HCOLORSPACE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HCOLORSPACE__");
    static final jdk.incubator.foreign.MemoryLayout HCOLORSPACE__$struct$LAYOUT() { return HCOLORSPACE__$struct$LAYOUT_; }

    static final MemoryLayout HCOLORSPACE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HCOLORSPACE__$unused$LAYOUT() { return HCOLORSPACE__$unused$LAYOUT_; }

    static final VarHandle HCOLORSPACE__$unused$VH_ = HCOLORSPACE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HCOLORSPACE__$unused$VH() { return HCOLORSPACE__$unused$VH_; }

    static final MemoryLayout HDC__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HDC__");
    static final jdk.incubator.foreign.MemoryLayout HDC__$struct$LAYOUT() { return HDC__$struct$LAYOUT_; }

    static final MemoryLayout HDC__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HDC__$unused$LAYOUT() { return HDC__$unused$LAYOUT_; }

    static final VarHandle HDC__$unused$VH_ = HDC__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HDC__$unused$VH() { return HDC__$unused$VH_; }

    static final MemoryLayout HGLRC__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HGLRC__");
    static final jdk.incubator.foreign.MemoryLayout HGLRC__$struct$LAYOUT() { return HGLRC__$struct$LAYOUT_; }

    static final MemoryLayout HGLRC__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HGLRC__$unused$LAYOUT() { return HGLRC__$unused$LAYOUT_; }

    static final VarHandle HGLRC__$unused$VH_ = HGLRC__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HGLRC__$unused$VH() { return HGLRC__$unused$VH_; }

    static final MemoryLayout HDESK__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HDESK__");
    static final jdk.incubator.foreign.MemoryLayout HDESK__$struct$LAYOUT() { return HDESK__$struct$LAYOUT_; }

    static final MemoryLayout HDESK__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HDESK__$unused$LAYOUT() { return HDESK__$unused$LAYOUT_; }

    static final VarHandle HDESK__$unused$VH_ = HDESK__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HDESK__$unused$VH() { return HDESK__$unused$VH_; }

    static final MemoryLayout HENHMETAFILE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HENHMETAFILE__");
    static final jdk.incubator.foreign.MemoryLayout HENHMETAFILE__$struct$LAYOUT() { return HENHMETAFILE__$struct$LAYOUT_; }

    static final MemoryLayout HENHMETAFILE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HENHMETAFILE__$unused$LAYOUT() { return HENHMETAFILE__$unused$LAYOUT_; }

    static final VarHandle HENHMETAFILE__$unused$VH_ = HENHMETAFILE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HENHMETAFILE__$unused$VH() { return HENHMETAFILE__$unused$VH_; }

    static final MemoryLayout HFONT__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HFONT__");
    static final jdk.incubator.foreign.MemoryLayout HFONT__$struct$LAYOUT() { return HFONT__$struct$LAYOUT_; }

    static final MemoryLayout HFONT__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HFONT__$unused$LAYOUT() { return HFONT__$unused$LAYOUT_; }

    static final VarHandle HFONT__$unused$VH_ = HFONT__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HFONT__$unused$VH() { return HFONT__$unused$VH_; }

    static final MemoryLayout HICON__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HICON__");
    static final jdk.incubator.foreign.MemoryLayout HICON__$struct$LAYOUT() { return HICON__$struct$LAYOUT_; }

    static final MemoryLayout HICON__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HICON__$unused$LAYOUT() { return HICON__$unused$LAYOUT_; }

    static final VarHandle HICON__$unused$VH_ = HICON__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HICON__$unused$VH() { return HICON__$unused$VH_; }

    static final MemoryLayout HMENU__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HMENU__");
    static final jdk.incubator.foreign.MemoryLayout HMENU__$struct$LAYOUT() { return HMENU__$struct$LAYOUT_; }

    static final MemoryLayout HMENU__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HMENU__$unused$LAYOUT() { return HMENU__$unused$LAYOUT_; }

    static final VarHandle HMENU__$unused$VH_ = HMENU__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HMENU__$unused$VH() { return HMENU__$unused$VH_; }

    static final MemoryLayout HPALETTE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HPALETTE__");
    static final jdk.incubator.foreign.MemoryLayout HPALETTE__$struct$LAYOUT() { return HPALETTE__$struct$LAYOUT_; }

    static final MemoryLayout HPALETTE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HPALETTE__$unused$LAYOUT() { return HPALETTE__$unused$LAYOUT_; }

    static final VarHandle HPALETTE__$unused$VH_ = HPALETTE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HPALETTE__$unused$VH() { return HPALETTE__$unused$VH_; }

    static final MemoryLayout HPEN__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HPEN__");
    static final jdk.incubator.foreign.MemoryLayout HPEN__$struct$LAYOUT() { return HPEN__$struct$LAYOUT_; }

    static final MemoryLayout HPEN__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HPEN__$unused$LAYOUT() { return HPEN__$unused$LAYOUT_; }

    static final VarHandle HPEN__$unused$VH_ = HPEN__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HPEN__$unused$VH() { return HPEN__$unused$VH_; }

    static final MemoryLayout HWINEVENTHOOK__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HWINEVENTHOOK__");
    static final jdk.incubator.foreign.MemoryLayout HWINEVENTHOOK__$struct$LAYOUT() { return HWINEVENTHOOK__$struct$LAYOUT_; }

    static final MemoryLayout HWINEVENTHOOK__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HWINEVENTHOOK__$unused$LAYOUT() { return HWINEVENTHOOK__$unused$LAYOUT_; }

    static final VarHandle HWINEVENTHOOK__$unused$VH_ = HWINEVENTHOOK__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HWINEVENTHOOK__$unused$VH() { return HWINEVENTHOOK__$unused$VH_; }

    static final MemoryLayout HMONITOR__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HMONITOR__");
    static final jdk.incubator.foreign.MemoryLayout HMONITOR__$struct$LAYOUT() { return HMONITOR__$struct$LAYOUT_; }

    static final MemoryLayout HMONITOR__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HMONITOR__$unused$LAYOUT() { return HMONITOR__$unused$LAYOUT_; }

    static final VarHandle HMONITOR__$unused$VH_ = HMONITOR__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HMONITOR__$unused$VH() { return HMONITOR__$unused$VH_; }

    static final MemoryLayout HUMPD__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HUMPD__");
    static final jdk.incubator.foreign.MemoryLayout HUMPD__$struct$LAYOUT() { return HUMPD__$struct$LAYOUT_; }

    static final MemoryLayout HUMPD__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HUMPD__$unused$LAYOUT() { return HUMPD__$unused$LAYOUT_; }

    static final VarHandle HUMPD__$unused$VH_ = HUMPD__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HUMPD__$unused$VH() { return HUMPD__$unused$VH_; }

    static final MemoryLayout tagRECT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("left"),
        C_LONG.withName("top"),
        C_LONG.withName("right"),
        C_LONG.withName("bottom")
    ).withName("tagRECT");
    static final jdk.incubator.foreign.MemoryLayout tagRECT$struct$LAYOUT() { return tagRECT$struct$LAYOUT_; }

    static final MemoryLayout tagRECT$left$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRECT$left$LAYOUT() { return tagRECT$left$LAYOUT_; }

    static final VarHandle tagRECT$left$VH_ = tagRECT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("left"));
    static final java.lang.invoke.VarHandle tagRECT$left$VH() { return tagRECT$left$VH_; }

    static final MemoryLayout tagRECT$top$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRECT$top$LAYOUT() { return tagRECT$top$LAYOUT_; }

    static final VarHandle tagRECT$top$VH_ = tagRECT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("top"));
    static final java.lang.invoke.VarHandle tagRECT$top$VH() { return tagRECT$top$VH_; }

    static final MemoryLayout tagRECT$right$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRECT$right$LAYOUT() { return tagRECT$right$LAYOUT_; }

    static final VarHandle tagRECT$right$VH_ = tagRECT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("right"));
    static final java.lang.invoke.VarHandle tagRECT$right$VH() { return tagRECT$right$VH_; }

    static final MemoryLayout tagRECT$bottom$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRECT$bottom$LAYOUT() { return tagRECT$bottom$LAYOUT_; }

    static final VarHandle tagRECT$bottom$VH_ = tagRECT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bottom"));
    static final java.lang.invoke.VarHandle tagRECT$bottom$VH() { return tagRECT$bottom$VH_; }

    static final MemoryLayout _RECTL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("left"),
        C_LONG.withName("top"),
        C_LONG.withName("right"),
        C_LONG.withName("bottom")
    ).withName("_RECTL");
    static final jdk.incubator.foreign.MemoryLayout _RECTL$struct$LAYOUT() { return _RECTL$struct$LAYOUT_; }

    static final MemoryLayout _RECTL$left$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RECTL$left$LAYOUT() { return _RECTL$left$LAYOUT_; }

    static final VarHandle _RECTL$left$VH_ = _RECTL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("left"));
    static final java.lang.invoke.VarHandle _RECTL$left$VH() { return _RECTL$left$VH_; }

    static final MemoryLayout _RECTL$top$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RECTL$top$LAYOUT() { return _RECTL$top$LAYOUT_; }

    static final VarHandle _RECTL$top$VH_ = _RECTL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("top"));
    static final java.lang.invoke.VarHandle _RECTL$top$VH() { return _RECTL$top$VH_; }

    static final MemoryLayout _RECTL$right$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RECTL$right$LAYOUT() { return _RECTL$right$LAYOUT_; }

    static final VarHandle _RECTL$right$VH_ = _RECTL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("right"));
    static final java.lang.invoke.VarHandle _RECTL$right$VH() { return _RECTL$right$VH_; }

    static final MemoryLayout _RECTL$bottom$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RECTL$bottom$LAYOUT() { return _RECTL$bottom$LAYOUT_; }

    static final VarHandle _RECTL$bottom$VH_ = _RECTL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bottom"));
    static final java.lang.invoke.VarHandle _RECTL$bottom$VH() { return _RECTL$bottom$VH_; }

    static final MemoryLayout tagPOINT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("x"),
        C_LONG.withName("y")
    ).withName("tagPOINT");
    static final jdk.incubator.foreign.MemoryLayout tagPOINT$struct$LAYOUT() { return tagPOINT$struct$LAYOUT_; }

    static final MemoryLayout tagPOINT$x$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagPOINT$x$LAYOUT() { return tagPOINT$x$LAYOUT_; }

    static final VarHandle tagPOINT$x$VH_ = tagPOINT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    static final java.lang.invoke.VarHandle tagPOINT$x$VH() { return tagPOINT$x$VH_; }

    static final MemoryLayout tagPOINT$y$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagPOINT$y$LAYOUT() { return tagPOINT$y$LAYOUT_; }

    static final VarHandle tagPOINT$y$VH_ = tagPOINT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    static final java.lang.invoke.VarHandle tagPOINT$y$VH() { return tagPOINT$y$VH_; }

    static final MemoryLayout _POINTL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("x"),
        C_LONG.withName("y")
    ).withName("_POINTL");
    static final jdk.incubator.foreign.MemoryLayout _POINTL$struct$LAYOUT() { return _POINTL$struct$LAYOUT_; }

    static final MemoryLayout _POINTL$x$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _POINTL$x$LAYOUT() { return _POINTL$x$LAYOUT_; }

    static final VarHandle _POINTL$x$VH_ = _POINTL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    static final java.lang.invoke.VarHandle _POINTL$x$VH() { return _POINTL$x$VH_; }

    static final MemoryLayout _POINTL$y$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _POINTL$y$LAYOUT() { return _POINTL$y$LAYOUT_; }

    static final VarHandle _POINTL$y$VH_ = _POINTL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    static final java.lang.invoke.VarHandle _POINTL$y$VH() { return _POINTL$y$VH_; }

    static final MemoryLayout tagSIZE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cx"),
        C_LONG.withName("cy")
    ).withName("tagSIZE");
    static final jdk.incubator.foreign.MemoryLayout tagSIZE$struct$LAYOUT() { return tagSIZE$struct$LAYOUT_; }

    static final MemoryLayout tagSIZE$cx$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSIZE$cx$LAYOUT() { return tagSIZE$cx$LAYOUT_; }

    static final VarHandle tagSIZE$cx$VH_ = tagSIZE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cx"));
    static final java.lang.invoke.VarHandle tagSIZE$cx$VH() { return tagSIZE$cx$VH_; }

    static final MemoryLayout tagSIZE$cy$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSIZE$cy$LAYOUT() { return tagSIZE$cy$LAYOUT_; }

    static final VarHandle tagSIZE$cy$VH_ = tagSIZE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cy"));
    static final java.lang.invoke.VarHandle tagSIZE$cy$VH() { return tagSIZE$cy$VH_; }

    static final MemoryLayout tagPOINTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("x"),
        C_SHORT.withName("y")
    ).withName("tagPOINTS");
    static final jdk.incubator.foreign.MemoryLayout tagPOINTS$struct$LAYOUT() { return tagPOINTS$struct$LAYOUT_; }

    static final MemoryLayout tagPOINTS$x$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTS$x$LAYOUT() { return tagPOINTS$x$LAYOUT_; }

    static final VarHandle tagPOINTS$x$VH_ = tagPOINTS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("x"));
    static final java.lang.invoke.VarHandle tagPOINTS$x$VH() { return tagPOINTS$x$VH_; }

    static final MemoryLayout tagPOINTS$y$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTS$y$LAYOUT() { return tagPOINTS$y$LAYOUT_; }

    static final VarHandle tagPOINTS$y$VH_ = tagPOINTS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("y"));
    static final java.lang.invoke.VarHandle tagPOINTS$y$VH() { return tagPOINTS$y$VH_; }

    static final MemoryLayout APP_LOCAL_DEVICE_ID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(32, C_CHAR).withName("value")
    ).withName("APP_LOCAL_DEVICE_ID");
    static final jdk.incubator.foreign.MemoryLayout APP_LOCAL_DEVICE_ID$struct$LAYOUT() { return APP_LOCAL_DEVICE_ID$struct$LAYOUT_; }

    static final MemoryLayout DPI_AWARENESS_CONTEXT__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("DPI_AWARENESS_CONTEXT__");
    static final jdk.incubator.foreign.MemoryLayout DPI_AWARENESS_CONTEXT__$struct$LAYOUT() { return DPI_AWARENESS_CONTEXT__$struct$LAYOUT_; }

    static final MemoryLayout DPI_AWARENESS_CONTEXT__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout DPI_AWARENESS_CONTEXT__$unused$LAYOUT() { return DPI_AWARENESS_CONTEXT__$unused$LAYOUT_; }

    static final VarHandle DPI_AWARENESS_CONTEXT__$unused$VH_ = DPI_AWARENESS_CONTEXT__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle DPI_AWARENESS_CONTEXT__$unused$VH() { return DPI_AWARENESS_CONTEXT__$unused$VH_; }

    static final int DPI_AWARENESS_INVALID() { return (int)-1L; }

    static final int DPI_AWARENESS_UNAWARE() { return (int)0L; }

    static final int DPI_AWARENESS_SYSTEM_AWARE() { return (int)1L; }

    static final int DPI_AWARENESS_PER_MONITOR_AWARE() { return (int)2L; }

    static final int DPI_HOSTING_BEHAVIOR_INVALID() { return (int)-1L; }

    static final int DPI_HOSTING_BEHAVIOR_DEFAULT() { return (int)0L; }

    static final int DPI_HOSTING_BEHAVIOR_MIXED() { return (int)1L; }

    static final MemoryLayout _SECURITY_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("nLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpSecurityDescriptor"),
        C_INT.withName("bInheritHandle"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_SECURITY_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_ATTRIBUTES$struct$LAYOUT() { return _SECURITY_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_ATTRIBUTES$nLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_ATTRIBUTES$nLength$LAYOUT() { return _SECURITY_ATTRIBUTES$nLength$LAYOUT_; }

    static final VarHandle _SECURITY_ATTRIBUTES$nLength$VH_ = _SECURITY_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nLength"));
    static final java.lang.invoke.VarHandle _SECURITY_ATTRIBUTES$nLength$VH() { return _SECURITY_ATTRIBUTES$nLength$VH_; }

    static final MemoryLayout _SECURITY_ATTRIBUTES$lpSecurityDescriptor$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_ATTRIBUTES$lpSecurityDescriptor$LAYOUT() { return _SECURITY_ATTRIBUTES$lpSecurityDescriptor$LAYOUT_; }

    static final VarHandle _SECURITY_ATTRIBUTES$lpSecurityDescriptor$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpSecurityDescriptor")));
    static final java.lang.invoke.VarHandle _SECURITY_ATTRIBUTES$lpSecurityDescriptor$VH() { return _SECURITY_ATTRIBUTES$lpSecurityDescriptor$VH_; }

    static final MemoryLayout _SECURITY_ATTRIBUTES$bInheritHandle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_ATTRIBUTES$bInheritHandle$LAYOUT() { return _SECURITY_ATTRIBUTES$bInheritHandle$LAYOUT_; }

    static final VarHandle _SECURITY_ATTRIBUTES$bInheritHandle$VH_ = _SECURITY_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bInheritHandle"));
    static final java.lang.invoke.VarHandle _SECURITY_ATTRIBUTES$bInheritHandle$VH() { return _SECURITY_ATTRIBUTES$bInheritHandle$VH_; }

    static final MemoryLayout _OVERLAPPED$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Internal"),
        C_LONGLONG.withName("InternalHigh"),
        C_LONG.withName("Offset"),
        C_LONG.withName("OffsetHigh"),
        C_POINTER.withName("Pointer"),
        C_POINTER.withName("hEvent")
    ).withName("_OVERLAPPED");
    static final jdk.incubator.foreign.MemoryLayout _OVERLAPPED$struct$LAYOUT() { return _OVERLAPPED$struct$LAYOUT_; }

    static final MemoryLayout _OVERLAPPED$Internal$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _OVERLAPPED$Internal$LAYOUT() { return _OVERLAPPED$Internal$LAYOUT_; }

    static final VarHandle _OVERLAPPED$Internal$VH_ = _OVERLAPPED$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Internal"));
    static final java.lang.invoke.VarHandle _OVERLAPPED$Internal$VH() { return _OVERLAPPED$Internal$VH_; }

    static final MemoryLayout _OVERLAPPED$InternalHigh$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _OVERLAPPED$InternalHigh$LAYOUT() { return _OVERLAPPED$InternalHigh$LAYOUT_; }

    static final VarHandle _OVERLAPPED$InternalHigh$VH_ = _OVERLAPPED$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("InternalHigh"));
    static final java.lang.invoke.VarHandle _OVERLAPPED$InternalHigh$VH() { return _OVERLAPPED$InternalHigh$VH_; }

    static final MemoryLayout _OVERLAPPED$Offset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OVERLAPPED$Offset$LAYOUT() { return _OVERLAPPED$Offset$LAYOUT_; }

    static final VarHandle _OVERLAPPED$Offset$VH_ = _OVERLAPPED$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _OVERLAPPED$Offset$VH() { return _OVERLAPPED$Offset$VH_; }

    static final MemoryLayout _OVERLAPPED$OffsetHigh$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OVERLAPPED$OffsetHigh$LAYOUT() { return _OVERLAPPED$OffsetHigh$LAYOUT_; }

    static final VarHandle _OVERLAPPED$OffsetHigh$VH_ = _OVERLAPPED$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OffsetHigh"));
    static final java.lang.invoke.VarHandle _OVERLAPPED$OffsetHigh$VH() { return _OVERLAPPED$OffsetHigh$VH_; }

    static final MemoryLayout _OVERLAPPED$Pointer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OVERLAPPED$Pointer$LAYOUT() { return _OVERLAPPED$Pointer$LAYOUT_; }

    static final VarHandle _OVERLAPPED$Pointer$VH_ = MemoryHandles.asAddressVarHandle(_OVERLAPPED$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Pointer")));
    static final java.lang.invoke.VarHandle _OVERLAPPED$Pointer$VH() { return _OVERLAPPED$Pointer$VH_; }

}

