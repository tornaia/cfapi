// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$20 extends cfapi_h$19 {

    /* package-private */ cfapi_h$20() {}
    public static  MethodHandle ntohs$MH() {
        return cfapi_h$constants$49.ntohs$MH();
    }
    public static @C("u_short") short ntohs (@C("u_short") short netshort) {
        try {
            return (short)cfapi_h$constants$49.ntohs$MH().invokeExact(netshort);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle recv$MH() {
        return cfapi_h$constants$49.recv$MH();
    }
    public static @C("int") int recv (@C("SOCKET") long s, @C("char*") Addressable buf, @C("int") int len, @C("int") int flags) {
        try {
            return (int)cfapi_h$constants$49.recv$MH().invokeExact(s, buf.address(), len, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle recvfrom$MH() {
        return cfapi_h$constants$49.recvfrom$MH();
    }
    public static @C("int") int recvfrom (@C("SOCKET") long s, @C("char*") Addressable buf, @C("int") int len, @C("int") int flags, @C("struct sockaddr*") Addressable from, @C("int*") Addressable fromlen) {
        try {
            return (int)cfapi_h$constants$49.recvfrom$MH().invokeExact(s, buf.address(), len, flags, from.address(), fromlen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle select$MH() {
        return cfapi_h$constants$49.select$MH();
    }
    public static @C("int") int select (@C("int") int nfds, @C("fd_set*") Addressable readfds, @C("fd_set*") Addressable writefds, @C("fd_set*") Addressable exceptfds, @C("struct timeval*") Addressable timeout) {
        try {
            return (int)cfapi_h$constants$49.select$MH().invokeExact(nfds, readfds.address(), writefds.address(), exceptfds.address(), timeout.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle send$MH() {
        return cfapi_h$constants$49.send$MH();
    }
    public static @C("int") int send (@C("SOCKET") long s, @C("char*") Addressable buf, @C("int") int len, @C("int") int flags) {
        try {
            return (int)cfapi_h$constants$49.send$MH().invokeExact(s, buf.address(), len, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle sendto$MH() {
        return cfapi_h$constants$49.sendto$MH();
    }
    public static @C("int") int sendto (@C("SOCKET") long s, @C("char*") Addressable buf, @C("int") int len, @C("int") int flags, @C("struct sockaddr*") Addressable to, @C("int") int tolen) {
        try {
            return (int)cfapi_h$constants$49.sendto$MH().invokeExact(s, buf.address(), len, flags, to.address(), tolen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle setsockopt$MH() {
        return cfapi_h$constants$49.setsockopt$MH();
    }
    public static @C("int") int setsockopt (@C("SOCKET") long s, @C("int") int level, @C("int") int optname, @C("char*") Addressable optval, @C("int") int optlen) {
        try {
            return (int)cfapi_h$constants$49.setsockopt$MH().invokeExact(s, level, optname, optval.address(), optlen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle shutdown$MH() {
        return cfapi_h$constants$49.shutdown$MH();
    }
    public static @C("int") int shutdown (@C("SOCKET") long s, @C("int") int how) {
        try {
            return (int)cfapi_h$constants$49.shutdown$MH().invokeExact(s, how);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle socket$MH() {
        return cfapi_h$constants$49.socket$MH();
    }
    public static @C("SOCKET") long socket (@C("int") int af, @C("int") int type, @C("int") int protocol) {
        try {
            return (long)cfapi_h$constants$49.socket$MH().invokeExact(af, type, protocol);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle gethostbyaddr$MH() {
        return cfapi_h$constants$49.gethostbyaddr$MH();
    }
    public static @C("struct hostent*") MemoryAddress gethostbyaddr (@C("char*") Addressable addr, @C("int") int len, @C("int") int type) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.gethostbyaddr$MH().invokeExact(addr.address(), len, type);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle gethostbyname$MH() {
        return cfapi_h$constants$49.gethostbyname$MH();
    }
    public static @C("struct hostent*") MemoryAddress gethostbyname (@C("char*") Addressable name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.gethostbyname$MH().invokeExact(name.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle gethostname$MH() {
        return cfapi_h$constants$49.gethostname$MH();
    }
    public static @C("int") int gethostname (@C("char*") Addressable name, @C("int") int namelen) {
        try {
            return (int)cfapi_h$constants$49.gethostname$MH().invokeExact(name.address(), namelen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getservbyport$MH() {
        return cfapi_h$constants$49.getservbyport$MH();
    }
    public static @C("struct servent*") MemoryAddress getservbyport (@C("int") int port, @C("char*") Addressable proto) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.getservbyport$MH().invokeExact(port, proto.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getservbyname$MH() {
        return cfapi_h$constants$49.getservbyname$MH();
    }
    public static @C("struct servent*") MemoryAddress getservbyname (@C("char*") Addressable name, @C("char*") Addressable proto) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.getservbyname$MH().invokeExact(name.address(), proto.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getprotobynumber$MH() {
        return cfapi_h$constants$49.getprotobynumber$MH();
    }
    public static @C("struct protoent*") MemoryAddress getprotobynumber (@C("int") int proto) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.getprotobynumber$MH().invokeExact(proto);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle getprotobyname$MH() {
        return cfapi_h$constants$49.getprotobyname$MH();
    }
    public static @C("struct protoent*") MemoryAddress getprotobyname (@C("char*") Addressable name) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.getprotobyname$MH().invokeExact(name.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAStartup$MH() {
        return cfapi_h$constants$49.WSAStartup$MH();
    }
    public static @C("int") int WSAStartup (@C("WORD") short wVersionRequired, @C("LPWSADATA") Addressable lpWSAData) {
        try {
            return (int)cfapi_h$constants$49.WSAStartup$MH().invokeExact(wVersionRequired, lpWSAData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSACleanup$MH() {
        return cfapi_h$constants$49.WSACleanup$MH();
    }
    public static @C("int") int WSACleanup () {
        try {
            return (int)cfapi_h$constants$49.WSACleanup$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSASetLastError$MH() {
        return cfapi_h$constants$49.WSASetLastError$MH();
    }
    public static void WSASetLastError (@C("int") int iError) {
        try {
            cfapi_h$constants$49.WSASetLastError$MH().invokeExact(iError);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAGetLastError$MH() {
        return cfapi_h$constants$49.WSAGetLastError$MH();
    }
    public static @C("int") int WSAGetLastError () {
        try {
            return (int)cfapi_h$constants$49.WSAGetLastError$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAIsBlocking$MH() {
        return cfapi_h$constants$49.WSAIsBlocking$MH();
    }
    public static @C("BOOL") int WSAIsBlocking () {
        try {
            return (int)cfapi_h$constants$49.WSAIsBlocking$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAUnhookBlockingHook$MH() {
        return cfapi_h$constants$49.WSAUnhookBlockingHook$MH();
    }
    public static @C("int") int WSAUnhookBlockingHook () {
        try {
            return (int)cfapi_h$constants$49.WSAUnhookBlockingHook$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSASetBlockingHook$MH() {
        return cfapi_h$constants$49.WSASetBlockingHook$MH();
    }
    public static @C("FARPROC") MemoryAddress WSASetBlockingHook (@C("FARPROC") Addressable lpBlockFunc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.WSASetBlockingHook$MH().invokeExact(lpBlockFunc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSACancelBlockingCall$MH() {
        return cfapi_h$constants$49.WSACancelBlockingCall$MH();
    }
    public static @C("int") int WSACancelBlockingCall () {
        try {
            return (int)cfapi_h$constants$49.WSACancelBlockingCall$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAAsyncGetServByName$MH() {
        return cfapi_h$constants$49.WSAAsyncGetServByName$MH();
    }
    public static @C("HANDLE") MemoryAddress WSAAsyncGetServByName (@C("HWND") Addressable hWnd, @C("u_int") int wMsg, @C("char*") Addressable name, @C("char*") Addressable proto, @C("char*") Addressable buf, @C("int") int buflen) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.WSAAsyncGetServByName$MH().invokeExact(hWnd.address(), wMsg, name.address(), proto.address(), buf.address(), buflen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAAsyncGetServByPort$MH() {
        return cfapi_h$constants$49.WSAAsyncGetServByPort$MH();
    }
    public static @C("HANDLE") MemoryAddress WSAAsyncGetServByPort (@C("HWND") Addressable hWnd, @C("u_int") int wMsg, @C("int") int port, @C("char*") Addressable proto, @C("char*") Addressable buf, @C("int") int buflen) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.WSAAsyncGetServByPort$MH().invokeExact(hWnd.address(), wMsg, port, proto.address(), buf.address(), buflen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAAsyncGetProtoByName$MH() {
        return cfapi_h$constants$49.WSAAsyncGetProtoByName$MH();
    }
    public static @C("HANDLE") MemoryAddress WSAAsyncGetProtoByName (@C("HWND") Addressable hWnd, @C("u_int") int wMsg, @C("char*") Addressable name, @C("char*") Addressable buf, @C("int") int buflen) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.WSAAsyncGetProtoByName$MH().invokeExact(hWnd.address(), wMsg, name.address(), buf.address(), buflen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAAsyncGetProtoByNumber$MH() {
        return cfapi_h$constants$49.WSAAsyncGetProtoByNumber$MH();
    }
    public static @C("HANDLE") MemoryAddress WSAAsyncGetProtoByNumber (@C("HWND") Addressable hWnd, @C("u_int") int wMsg, @C("int") int number, @C("char*") Addressable buf, @C("int") int buflen) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.WSAAsyncGetProtoByNumber$MH().invokeExact(hWnd.address(), wMsg, number, buf.address(), buflen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAAsyncGetHostByName$MH() {
        return cfapi_h$constants$49.WSAAsyncGetHostByName$MH();
    }
    public static @C("HANDLE") MemoryAddress WSAAsyncGetHostByName (@C("HWND") Addressable hWnd, @C("u_int") int wMsg, @C("char*") Addressable name, @C("char*") Addressable buf, @C("int") int buflen) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.WSAAsyncGetHostByName$MH().invokeExact(hWnd.address(), wMsg, name.address(), buf.address(), buflen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAAsyncGetHostByAddr$MH() {
        return cfapi_h$constants$49.WSAAsyncGetHostByAddr$MH();
    }
    public static @C("HANDLE") MemoryAddress WSAAsyncGetHostByAddr (@C("HWND") Addressable hWnd, @C("u_int") int wMsg, @C("char*") Addressable addr, @C("int") int len, @C("int") int type, @C("char*") Addressable buf, @C("int") int buflen) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$49.WSAAsyncGetHostByAddr$MH().invokeExact(hWnd.address(), wMsg, addr.address(), len, type, buf.address(), buflen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSACancelAsyncRequest$MH() {
        return cfapi_h$constants$49.WSACancelAsyncRequest$MH();
    }
    public static @C("int") int WSACancelAsyncRequest (@C("HANDLE") Addressable hAsyncTaskHandle) {
        try {
            return (int)cfapi_h$constants$49.WSACancelAsyncRequest$MH().invokeExact(hAsyncTaskHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSAAsyncSelect$MH() {
        return cfapi_h$constants$49.WSAAsyncSelect$MH();
    }
    public static @C("int") int WSAAsyncSelect (@C("SOCKET") long s, @C("HWND") Addressable hWnd, @C("u_int") int wMsg, @C("long") int lEvent) {
        try {
            return (int)cfapi_h$constants$49.WSAAsyncSelect$MH().invokeExact(s, hWnd.address(), wMsg, lEvent);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WSARecvEx$MH() {
        return cfapi_h$constants$49.WSARecvEx$MH();
    }
    public static @C("int") int WSARecvEx (@C("SOCKET") long s, @C("char*") Addressable buf, @C("int") int len, @C("int*") Addressable flags) {
        try {
            return (int)cfapi_h$constants$49.WSARecvEx$MH().invokeExact(s, buf.address(), len, flags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TransmitFile$MH() {
        return cfapi_h$constants$49.TransmitFile$MH();
    }
    public static @C("BOOL") int TransmitFile (@C("SOCKET") long hSocket, @C("HANDLE") Addressable hFile, @C("DWORD") int nNumberOfBytesToWrite, @C("DWORD") int nNumberOfBytesPerSend, @C("LPOVERLAPPED") Addressable lpOverlapped, @C("LPTRANSMIT_FILE_BUFFERS") Addressable lpTransmitBuffers, @C("DWORD") int dwReserved) {
        try {
            return (int)cfapi_h$constants$49.TransmitFile$MH().invokeExact(hSocket, hFile.address(), nNumberOfBytesToWrite, nNumberOfBytesPerSend, lpOverlapped.address(), lpTransmitBuffers.address(), dwReserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AcceptEx$MH() {
        return cfapi_h$constants$49.AcceptEx$MH();
    }
    public static @C("BOOL") int AcceptEx (@C("SOCKET") long sListenSocket, @C("SOCKET") long sAcceptSocket, @C("PVOID") Addressable lpOutputBuffer, @C("DWORD") int dwReceiveDataLength, @C("DWORD") int dwLocalAddressLength, @C("DWORD") int dwRemoteAddressLength, @C("LPDWORD") Addressable lpdwBytesReceived, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$49.AcceptEx$MH().invokeExact(sListenSocket, sAcceptSocket, lpOutputBuffer.address(), dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, lpdwBytesReceived.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAcceptExSockaddrs$MH() {
        return cfapi_h$constants$49.GetAcceptExSockaddrs$MH();
    }
    public static void GetAcceptExSockaddrs (@C("PVOID") Addressable lpOutputBuffer, @C("DWORD") int dwReceiveDataLength, @C("DWORD") int dwLocalAddressLength, @C("DWORD") int dwRemoteAddressLength, @C("struct sockaddr**") Addressable LocalSockaddr, @C("LPINT") Addressable LocalSockaddrLength, @C("struct sockaddr**") Addressable RemoteSockaddr, @C("LPINT") Addressable RemoteSockaddrLength) {
        try {
            cfapi_h$constants$49.GetAcceptExSockaddrs$MH().invokeExact(lpOutputBuffer.address(), dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, LocalSockaddr.address(), LocalSockaddrLength.address(), RemoteSockaddr.address(), RemoteSockaddrLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptAcquireContextA$MH() {
        return cfapi_h$constants$49.CryptAcquireContextA$MH();
    }
    public static @C("BOOL") int CryptAcquireContextA (@C("HCRYPTPROV*") Addressable phProv, @C("LPCSTR") Addressable szContainer, @C("LPCSTR") Addressable szProvider, @C("DWORD") int dwProvType, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$49.CryptAcquireContextA$MH().invokeExact(phProv.address(), szContainer.address(), szProvider.address(), dwProvType, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptAcquireContextW$MH() {
        return cfapi_h$constants$49.CryptAcquireContextW$MH();
    }
    public static @C("BOOL") int CryptAcquireContextW (@C("HCRYPTPROV*") Addressable phProv, @C("LPCWSTR") Addressable szContainer, @C("LPCWSTR") Addressable szProvider, @C("DWORD") int dwProvType, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$49.CryptAcquireContextW$MH().invokeExact(phProv.address(), szContainer.address(), szProvider.address(), dwProvType, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptReleaseContext$MH() {
        return cfapi_h$constants$49.CryptReleaseContext$MH();
    }
    public static @C("BOOL") int CryptReleaseContext (@C("HCRYPTPROV") long hProv, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$49.CryptReleaseContext$MH().invokeExact(hProv, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGenKey$MH() {
        return cfapi_h$constants$49.CryptGenKey$MH();
    }
    public static @C("BOOL") int CryptGenKey (@C("HCRYPTPROV") long hProv, @C("ALG_ID") int Algid, @C("DWORD") int dwFlags, @C("HCRYPTKEY*") Addressable phKey) {
        try {
            return (int)cfapi_h$constants$49.CryptGenKey$MH().invokeExact(hProv, Algid, dwFlags, phKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDeriveKey$MH() {
        return cfapi_h$constants$49.CryptDeriveKey$MH();
    }
    public static @C("BOOL") int CryptDeriveKey (@C("HCRYPTPROV") long hProv, @C("ALG_ID") int Algid, @C("HCRYPTHASH") long hBaseData, @C("DWORD") int dwFlags, @C("HCRYPTKEY*") Addressable phKey) {
        try {
            return (int)cfapi_h$constants$49.CryptDeriveKey$MH().invokeExact(hProv, Algid, hBaseData, dwFlags, phKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDestroyKey$MH() {
        return cfapi_h$constants$49.CryptDestroyKey$MH();
    }
    public static @C("BOOL") int CryptDestroyKey (@C("HCRYPTKEY") long hKey) {
        try {
            return (int)cfapi_h$constants$49.CryptDestroyKey$MH().invokeExact(hKey);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetKeyParam$MH() {
        return cfapi_h$constants$49.CryptSetKeyParam$MH();
    }
    public static @C("BOOL") int CryptSetKeyParam (@C("HCRYPTKEY") long hKey, @C("DWORD") int dwParam, @C("const BYTE*") Addressable pbData, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$49.CryptSetKeyParam$MH().invokeExact(hKey, dwParam, pbData.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetKeyParam$MH() {
        return cfapi_h$constants$49.CryptGetKeyParam$MH();
    }
    public static @C("BOOL") int CryptGetKeyParam (@C("HCRYPTKEY") long hKey, @C("DWORD") int dwParam, @C("BYTE*") Addressable pbData, @C("DWORD*") Addressable pdwDataLen, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$49.CryptGetKeyParam$MH().invokeExact(hKey, dwParam, pbData.address(), pdwDataLen.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetHashParam$MH() {
        return cfapi_h$constants$49.CryptSetHashParam$MH();
    }
    public static @C("BOOL") int CryptSetHashParam (@C("HCRYPTHASH") long hHash, @C("DWORD") int dwParam, @C("const BYTE*") Addressable pbData, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$49.CryptSetHashParam$MH().invokeExact(hHash, dwParam, pbData.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetHashParam$MH() {
        return cfapi_h$constants$50.CryptGetHashParam$MH();
    }
    public static @C("BOOL") int CryptGetHashParam (@C("HCRYPTHASH") long hHash, @C("DWORD") int dwParam, @C("BYTE*") Addressable pbData, @C("DWORD*") Addressable pdwDataLen, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptGetHashParam$MH().invokeExact(hHash, dwParam, pbData.address(), pdwDataLen.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetProvParam$MH() {
        return cfapi_h$constants$50.CryptSetProvParam$MH();
    }
    public static @C("BOOL") int CryptSetProvParam (@C("HCRYPTPROV") long hProv, @C("DWORD") int dwParam, @C("const BYTE*") Addressable pbData, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptSetProvParam$MH().invokeExact(hProv, dwParam, pbData.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetProvParam$MH() {
        return cfapi_h$constants$50.CryptGetProvParam$MH();
    }
    public static @C("BOOL") int CryptGetProvParam (@C("HCRYPTPROV") long hProv, @C("DWORD") int dwParam, @C("BYTE*") Addressable pbData, @C("DWORD*") Addressable pdwDataLen, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptGetProvParam$MH().invokeExact(hProv, dwParam, pbData.address(), pdwDataLen.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGenRandom$MH() {
        return cfapi_h$constants$50.CryptGenRandom$MH();
    }
    public static @C("BOOL") int CryptGenRandom (@C("HCRYPTPROV") long hProv, @C("DWORD") int dwLen, @C("BYTE*") Addressable pbBuffer) {
        try {
            return (int)cfapi_h$constants$50.CryptGenRandom$MH().invokeExact(hProv, dwLen, pbBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetUserKey$MH() {
        return cfapi_h$constants$50.CryptGetUserKey$MH();
    }
    public static @C("BOOL") int CryptGetUserKey (@C("HCRYPTPROV") long hProv, @C("DWORD") int dwKeySpec, @C("HCRYPTKEY*") Addressable phUserKey) {
        try {
            return (int)cfapi_h$constants$50.CryptGetUserKey$MH().invokeExact(hProv, dwKeySpec, phUserKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptExportKey$MH() {
        return cfapi_h$constants$50.CryptExportKey$MH();
    }
    public static @C("BOOL") int CryptExportKey (@C("HCRYPTKEY") long hKey, @C("HCRYPTKEY") long hExpKey, @C("DWORD") int dwBlobType, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbData, @C("DWORD*") Addressable pdwDataLen) {
        try {
            return (int)cfapi_h$constants$50.CryptExportKey$MH().invokeExact(hKey, hExpKey, dwBlobType, dwFlags, pbData.address(), pdwDataLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptImportKey$MH() {
        return cfapi_h$constants$50.CryptImportKey$MH();
    }
    public static @C("BOOL") int CryptImportKey (@C("HCRYPTPROV") long hProv, @C("const BYTE*") Addressable pbData, @C("DWORD") int dwDataLen, @C("HCRYPTKEY") long hPubKey, @C("DWORD") int dwFlags, @C("HCRYPTKEY*") Addressable phKey) {
        try {
            return (int)cfapi_h$constants$50.CryptImportKey$MH().invokeExact(hProv, pbData.address(), dwDataLen, hPubKey, dwFlags, phKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEncrypt$MH() {
        return cfapi_h$constants$50.CryptEncrypt$MH();
    }
    public static @C("BOOL") int CryptEncrypt (@C("HCRYPTKEY") long hKey, @C("HCRYPTHASH") long hHash, @C("BOOL") int Final, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbData, @C("DWORD*") Addressable pdwDataLen, @C("DWORD") int dwBufLen) {
        try {
            return (int)cfapi_h$constants$50.CryptEncrypt$MH().invokeExact(hKey, hHash, Final, dwFlags, pbData.address(), pdwDataLen.address(), dwBufLen);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDecrypt$MH() {
        return cfapi_h$constants$50.CryptDecrypt$MH();
    }
    public static @C("BOOL") int CryptDecrypt (@C("HCRYPTKEY") long hKey, @C("HCRYPTHASH") long hHash, @C("BOOL") int Final, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbData, @C("DWORD*") Addressable pdwDataLen) {
        try {
            return (int)cfapi_h$constants$50.CryptDecrypt$MH().invokeExact(hKey, hHash, Final, dwFlags, pbData.address(), pdwDataLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptCreateHash$MH() {
        return cfapi_h$constants$50.CryptCreateHash$MH();
    }
    public static @C("BOOL") int CryptCreateHash (@C("HCRYPTPROV") long hProv, @C("ALG_ID") int Algid, @C("HCRYPTKEY") long hKey, @C("DWORD") int dwFlags, @C("HCRYPTHASH*") Addressable phHash) {
        try {
            return (int)cfapi_h$constants$50.CryptCreateHash$MH().invokeExact(hProv, Algid, hKey, dwFlags, phHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptHashData$MH() {
        return cfapi_h$constants$50.CryptHashData$MH();
    }
    public static @C("BOOL") int CryptHashData (@C("HCRYPTHASH") long hHash, @C("const BYTE*") Addressable pbData, @C("DWORD") int dwDataLen, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptHashData$MH().invokeExact(hHash, pbData.address(), dwDataLen, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptHashSessionKey$MH() {
        return cfapi_h$constants$50.CryptHashSessionKey$MH();
    }
    public static @C("BOOL") int CryptHashSessionKey (@C("HCRYPTHASH") long hHash, @C("HCRYPTKEY") long hKey, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptHashSessionKey$MH().invokeExact(hHash, hKey, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDestroyHash$MH() {
        return cfapi_h$constants$50.CryptDestroyHash$MH();
    }
    public static @C("BOOL") int CryptDestroyHash (@C("HCRYPTHASH") long hHash) {
        try {
            return (int)cfapi_h$constants$50.CryptDestroyHash$MH().invokeExact(hHash);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSignHashA$MH() {
        return cfapi_h$constants$50.CryptSignHashA$MH();
    }
    public static @C("BOOL") int CryptSignHashA (@C("HCRYPTHASH") long hHash, @C("DWORD") int dwKeySpec, @C("LPCSTR") Addressable szDescription, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbSignature, @C("DWORD*") Addressable pdwSigLen) {
        try {
            return (int)cfapi_h$constants$50.CryptSignHashA$MH().invokeExact(hHash, dwKeySpec, szDescription.address(), dwFlags, pbSignature.address(), pdwSigLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSignHashW$MH() {
        return cfapi_h$constants$50.CryptSignHashW$MH();
    }
    public static @C("BOOL") int CryptSignHashW (@C("HCRYPTHASH") long hHash, @C("DWORD") int dwKeySpec, @C("LPCWSTR") Addressable szDescription, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbSignature, @C("DWORD*") Addressable pdwSigLen) {
        try {
            return (int)cfapi_h$constants$50.CryptSignHashW$MH().invokeExact(hHash, dwKeySpec, szDescription.address(), dwFlags, pbSignature.address(), pdwSigLen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifySignatureA$MH() {
        return cfapi_h$constants$50.CryptVerifySignatureA$MH();
    }
    public static @C("BOOL") int CryptVerifySignatureA (@C("HCRYPTHASH") long hHash, @C("const BYTE*") Addressable pbSignature, @C("DWORD") int dwSigLen, @C("HCRYPTKEY") long hPubKey, @C("LPCSTR") Addressable szDescription, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptVerifySignatureA$MH().invokeExact(hHash, pbSignature.address(), dwSigLen, hPubKey, szDescription.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifySignatureW$MH() {
        return cfapi_h$constants$50.CryptVerifySignatureW$MH();
    }
    public static @C("BOOL") int CryptVerifySignatureW (@C("HCRYPTHASH") long hHash, @C("const BYTE*") Addressable pbSignature, @C("DWORD") int dwSigLen, @C("HCRYPTKEY") long hPubKey, @C("LPCWSTR") Addressable szDescription, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptVerifySignatureW$MH().invokeExact(hHash, pbSignature.address(), dwSigLen, hPubKey, szDescription.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetProviderA$MH() {
        return cfapi_h$constants$50.CryptSetProviderA$MH();
    }
    public static @C("BOOL") int CryptSetProviderA (@C("LPCSTR") Addressable pszProvName, @C("DWORD") int dwProvType) {
        try {
            return (int)cfapi_h$constants$50.CryptSetProviderA$MH().invokeExact(pszProvName.address(), dwProvType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetProviderW$MH() {
        return cfapi_h$constants$50.CryptSetProviderW$MH();
    }
    public static @C("BOOL") int CryptSetProviderW (@C("LPCWSTR") Addressable pszProvName, @C("DWORD") int dwProvType) {
        try {
            return (int)cfapi_h$constants$50.CryptSetProviderW$MH().invokeExact(pszProvName.address(), dwProvType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetProviderExA$MH() {
        return cfapi_h$constants$50.CryptSetProviderExA$MH();
    }
    public static @C("BOOL") int CryptSetProviderExA (@C("LPCSTR") Addressable pszProvName, @C("DWORD") int dwProvType, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptSetProviderExA$MH().invokeExact(pszProvName.address(), dwProvType, pdwReserved.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetProviderExW$MH() {
        return cfapi_h$constants$50.CryptSetProviderExW$MH();
    }
    public static @C("BOOL") int CryptSetProviderExW (@C("LPCWSTR") Addressable pszProvName, @C("DWORD") int dwProvType, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptSetProviderExW$MH().invokeExact(pszProvName.address(), dwProvType, pdwReserved.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetDefaultProviderA$MH() {
        return cfapi_h$constants$50.CryptGetDefaultProviderA$MH();
    }
    public static @C("BOOL") int CryptGetDefaultProviderA (@C("DWORD") int dwProvType, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags, @C("LPSTR") Addressable pszProvName, @C("DWORD*") Addressable pcbProvName) {
        try {
            return (int)cfapi_h$constants$50.CryptGetDefaultProviderA$MH().invokeExact(dwProvType, pdwReserved.address(), dwFlags, pszProvName.address(), pcbProvName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetDefaultProviderW$MH() {
        return cfapi_h$constants$50.CryptGetDefaultProviderW$MH();
    }
    public static @C("BOOL") int CryptGetDefaultProviderW (@C("DWORD") int dwProvType, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags, @C("LPWSTR") Addressable pszProvName, @C("DWORD*") Addressable pcbProvName) {
        try {
            return (int)cfapi_h$constants$50.CryptGetDefaultProviderW$MH().invokeExact(dwProvType, pdwReserved.address(), dwFlags, pszProvName.address(), pcbProvName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEnumProviderTypesA$MH() {
        return cfapi_h$constants$50.CryptEnumProviderTypesA$MH();
    }
    public static @C("BOOL") int CryptEnumProviderTypesA (@C("DWORD") int dwIndex, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags, @C("DWORD*") Addressable pdwProvType, @C("LPSTR") Addressable szTypeName, @C("DWORD*") Addressable pcbTypeName) {
        try {
            return (int)cfapi_h$constants$50.CryptEnumProviderTypesA$MH().invokeExact(dwIndex, pdwReserved.address(), dwFlags, pdwProvType.address(), szTypeName.address(), pcbTypeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEnumProviderTypesW$MH() {
        return cfapi_h$constants$50.CryptEnumProviderTypesW$MH();
    }
    public static @C("BOOL") int CryptEnumProviderTypesW (@C("DWORD") int dwIndex, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags, @C("DWORD*") Addressable pdwProvType, @C("LPWSTR") Addressable szTypeName, @C("DWORD*") Addressable pcbTypeName) {
        try {
            return (int)cfapi_h$constants$50.CryptEnumProviderTypesW$MH().invokeExact(dwIndex, pdwReserved.address(), dwFlags, pdwProvType.address(), szTypeName.address(), pcbTypeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEnumProvidersA$MH() {
        return cfapi_h$constants$50.CryptEnumProvidersA$MH();
    }
    public static @C("BOOL") int CryptEnumProvidersA (@C("DWORD") int dwIndex, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags, @C("DWORD*") Addressable pdwProvType, @C("LPSTR") Addressable szProvName, @C("DWORD*") Addressable pcbProvName) {
        try {
            return (int)cfapi_h$constants$50.CryptEnumProvidersA$MH().invokeExact(dwIndex, pdwReserved.address(), dwFlags, pdwProvType.address(), szProvName.address(), pcbProvName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEnumProvidersW$MH() {
        return cfapi_h$constants$50.CryptEnumProvidersW$MH();
    }
    public static @C("BOOL") int CryptEnumProvidersW (@C("DWORD") int dwIndex, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags, @C("DWORD*") Addressable pdwProvType, @C("LPWSTR") Addressable szProvName, @C("DWORD*") Addressable pcbProvName) {
        try {
            return (int)cfapi_h$constants$50.CryptEnumProvidersW$MH().invokeExact(dwIndex, pdwReserved.address(), dwFlags, pdwProvType.address(), szProvName.address(), pcbProvName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptContextAddRef$MH() {
        return cfapi_h$constants$50.CryptContextAddRef$MH();
    }
    public static @C("BOOL") int CryptContextAddRef (@C("HCRYPTPROV") long hProv, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.CryptContextAddRef$MH().invokeExact(hProv, pdwReserved.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDuplicateKey$MH() {
        return cfapi_h$constants$50.CryptDuplicateKey$MH();
    }
    public static @C("BOOL") int CryptDuplicateKey (@C("HCRYPTKEY") long hKey, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags, @C("HCRYPTKEY*") Addressable phKey) {
        try {
            return (int)cfapi_h$constants$50.CryptDuplicateKey$MH().invokeExact(hKey, pdwReserved.address(), dwFlags, phKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDuplicateHash$MH() {
        return cfapi_h$constants$50.CryptDuplicateHash$MH();
    }
    public static @C("BOOL") int CryptDuplicateHash (@C("HCRYPTHASH") long hHash, @C("DWORD*") Addressable pdwReserved, @C("DWORD") int dwFlags, @C("HCRYPTHASH*") Addressable phHash) {
        try {
            return (int)cfapi_h$constants$50.CryptDuplicateHash$MH().invokeExact(hHash, pdwReserved.address(), dwFlags, phHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEncSChannel$MH() {
        return cfapi_h$constants$50.GetEncSChannel$MH();
    }
    public static @C("BOOL") int GetEncSChannel (@C("BYTE**") Addressable pData, @C("DWORD*") Addressable dwDecSize) {
        try {
            return (int)cfapi_h$constants$50.GetEncSChannel$MH().invokeExact(pData.address(), dwDecSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("long") ValueLayout NTSTATUS = C_LONG;
    public static @C("int") int BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE() {
        return cfapi_h$constants$50.BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE();
    }
    public static @C("int") int BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE() {
        return cfapi_h$constants$50.BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE();
    }
    public static @C("int") int BCRYPT_ECC_PRIME_MONTGOMERY_CURVE() {
        return cfapi_h$constants$50.BCRYPT_ECC_PRIME_MONTGOMERY_CURVE();
    }
    public static @C("int") int BCRYPT_NO_CURVE_GENERATION_ALG_ID() {
        return cfapi_h$constants$50.BCRYPT_NO_CURVE_GENERATION_ALG_ID();
    }
    public static @C("int") int DSA_HASH_ALGORITHM_SHA1() {
        return cfapi_h$constants$50.DSA_HASH_ALGORITHM_SHA1();
    }
    public static @C("int") int DSA_HASH_ALGORITHM_SHA256() {
        return cfapi_h$constants$50.DSA_HASH_ALGORITHM_SHA256();
    }
    public static @C("int") int DSA_HASH_ALGORITHM_SHA512() {
        return cfapi_h$constants$50.DSA_HASH_ALGORITHM_SHA512();
    }
    public static @C("int") int DSA_FIPS186_2() {
        return cfapi_h$constants$50.DSA_FIPS186_2();
    }
    public static @C("int") int DSA_FIPS186_3() {
        return cfapi_h$constants$50.DSA_FIPS186_3();
    }
    public static @C("int") int BCRYPT_HASH_OPERATION_HASH_DATA() {
        return cfapi_h$constants$50.BCRYPT_HASH_OPERATION_HASH_DATA();
    }
    public static @C("int") int BCRYPT_HASH_OPERATION_FINISH_HASH() {
        return cfapi_h$constants$50.BCRYPT_HASH_OPERATION_FINISH_HASH();
    }
    public static @C("int") int BCRYPT_OPERATION_TYPE_HASH() {
        return cfapi_h$constants$50.BCRYPT_OPERATION_TYPE_HASH();
    }
    public static  MethodHandle BCryptOpenAlgorithmProvider$MH() {
        return cfapi_h$constants$50.BCryptOpenAlgorithmProvider$MH();
    }
    public static @C("NTSTATUS") int BCryptOpenAlgorithmProvider (@C("BCRYPT_ALG_HANDLE*") Addressable phAlgorithm, @C("LPCWSTR") Addressable pszAlgId, @C("LPCWSTR") Addressable pszImplementation, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptOpenAlgorithmProvider$MH().invokeExact(phAlgorithm.address(), pszAlgId.address(), pszImplementation.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptEnumAlgorithms$MH() {
        return cfapi_h$constants$50.BCryptEnumAlgorithms$MH();
    }
    public static @C("NTSTATUS") int BCryptEnumAlgorithms (@C("ULONG") int dwAlgOperations, @C("ULONG*") Addressable pAlgCount, @C("BCRYPT_ALGORITHM_IDENTIFIER**") Addressable ppAlgList, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptEnumAlgorithms$MH().invokeExact(dwAlgOperations, pAlgCount.address(), ppAlgList.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptEnumProviders$MH() {
        return cfapi_h$constants$50.BCryptEnumProviders$MH();
    }
    public static @C("NTSTATUS") int BCryptEnumProviders (@C("LPCWSTR") Addressable pszAlgId, @C("ULONG*") Addressable pImplCount, @C("BCRYPT_PROVIDER_NAME**") Addressable ppImplList, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptEnumProviders$MH().invokeExact(pszAlgId.address(), pImplCount.address(), ppImplList.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptGetProperty$MH() {
        return cfapi_h$constants$50.BCryptGetProperty$MH();
    }
    public static @C("NTSTATUS") int BCryptGetProperty (@C("BCRYPT_HANDLE") Addressable hObject, @C("LPCWSTR") Addressable pszProperty, @C("PUCHAR") Addressable pbOutput, @C("ULONG") int cbOutput, @C("ULONG*") Addressable pcbResult, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptGetProperty$MH().invokeExact(hObject.address(), pszProperty.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptSetProperty$MH() {
        return cfapi_h$constants$50.BCryptSetProperty$MH();
    }
    public static @C("NTSTATUS") int BCryptSetProperty (@C("BCRYPT_HANDLE") Addressable hObject, @C("LPCWSTR") Addressable pszProperty, @C("PUCHAR") Addressable pbInput, @C("ULONG") int cbInput, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptSetProperty$MH().invokeExact(hObject.address(), pszProperty.address(), pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptCloseAlgorithmProvider$MH() {
        return cfapi_h$constants$50.BCryptCloseAlgorithmProvider$MH();
    }
    public static @C("NTSTATUS") int BCryptCloseAlgorithmProvider (@C("BCRYPT_ALG_HANDLE") Addressable hAlgorithm, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptCloseAlgorithmProvider$MH().invokeExact(hAlgorithm.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptFreeBuffer$MH() {
        return cfapi_h$constants$50.BCryptFreeBuffer$MH();
    }
    public static void BCryptFreeBuffer (@C("PVOID") Addressable pvBuffer) {
        try {
            cfapi_h$constants$50.BCryptFreeBuffer$MH().invokeExact(pvBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptGenerateSymmetricKey$MH() {
        return cfapi_h$constants$50.BCryptGenerateSymmetricKey$MH();
    }
    public static @C("NTSTATUS") int BCryptGenerateSymmetricKey (@C("BCRYPT_ALG_HANDLE") Addressable hAlgorithm, @C("BCRYPT_KEY_HANDLE*") Addressable phKey, @C("PUCHAR") Addressable pbKeyObject, @C("ULONG") int cbKeyObject, @C("PUCHAR") Addressable pbSecret, @C("ULONG") int cbSecret, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptGenerateSymmetricKey$MH().invokeExact(hAlgorithm.address(), phKey.address(), pbKeyObject.address(), cbKeyObject, pbSecret.address(), cbSecret, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptGenerateKeyPair$MH() {
        return cfapi_h$constants$50.BCryptGenerateKeyPair$MH();
    }
    public static @C("NTSTATUS") int BCryptGenerateKeyPair (@C("BCRYPT_ALG_HANDLE") Addressable hAlgorithm, @C("BCRYPT_KEY_HANDLE*") Addressable phKey, @C("ULONG") int dwLength, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptGenerateKeyPair$MH().invokeExact(hAlgorithm.address(), phKey.address(), dwLength, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptEncrypt$MH() {
        return cfapi_h$constants$50.BCryptEncrypt$MH();
    }
    public static @C("NTSTATUS") int BCryptEncrypt (@C("BCRYPT_KEY_HANDLE") Addressable hKey, @C("PUCHAR") Addressable pbInput, @C("ULONG") int cbInput, @C("void*") Addressable pPaddingInfo, @C("PUCHAR") Addressable pbIV, @C("ULONG") int cbIV, @C("PUCHAR") Addressable pbOutput, @C("ULONG") int cbOutput, @C("ULONG*") Addressable pcbResult, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptEncrypt$MH().invokeExact(hKey.address(), pbInput.address(), cbInput, pPaddingInfo.address(), pbIV.address(), cbIV, pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDecrypt$MH() {
        return cfapi_h$constants$50.BCryptDecrypt$MH();
    }
    public static @C("NTSTATUS") int BCryptDecrypt (@C("BCRYPT_KEY_HANDLE") Addressable hKey, @C("PUCHAR") Addressable pbInput, @C("ULONG") int cbInput, @C("void*") Addressable pPaddingInfo, @C("PUCHAR") Addressable pbIV, @C("ULONG") int cbIV, @C("PUCHAR") Addressable pbOutput, @C("ULONG") int cbOutput, @C("ULONG*") Addressable pcbResult, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptDecrypt$MH().invokeExact(hKey.address(), pbInput.address(), cbInput, pPaddingInfo.address(), pbIV.address(), cbIV, pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptExportKey$MH() {
        return cfapi_h$constants$50.BCryptExportKey$MH();
    }
    public static @C("NTSTATUS") int BCryptExportKey (@C("BCRYPT_KEY_HANDLE") Addressable hKey, @C("BCRYPT_KEY_HANDLE") Addressable hExportKey, @C("LPCWSTR") Addressable pszBlobType, @C("PUCHAR") Addressable pbOutput, @C("ULONG") int cbOutput, @C("ULONG*") Addressable pcbResult, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptExportKey$MH().invokeExact(hKey.address(), hExportKey.address(), pszBlobType.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptImportKey$MH() {
        return cfapi_h$constants$50.BCryptImportKey$MH();
    }
    public static @C("NTSTATUS") int BCryptImportKey (@C("BCRYPT_ALG_HANDLE") Addressable hAlgorithm, @C("BCRYPT_KEY_HANDLE") Addressable hImportKey, @C("LPCWSTR") Addressable pszBlobType, @C("BCRYPT_KEY_HANDLE*") Addressable phKey, @C("PUCHAR") Addressable pbKeyObject, @C("ULONG") int cbKeyObject, @C("PUCHAR") Addressable pbInput, @C("ULONG") int cbInput, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptImportKey$MH().invokeExact(hAlgorithm.address(), hImportKey.address(), pszBlobType.address(), phKey.address(), pbKeyObject.address(), cbKeyObject, pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptImportKeyPair$MH() {
        return cfapi_h$constants$50.BCryptImportKeyPair$MH();
    }
    public static @C("NTSTATUS") int BCryptImportKeyPair (@C("BCRYPT_ALG_HANDLE") Addressable hAlgorithm, @C("BCRYPT_KEY_HANDLE") Addressable hImportKey, @C("LPCWSTR") Addressable pszBlobType, @C("BCRYPT_KEY_HANDLE*") Addressable phKey, @C("PUCHAR") Addressable pbInput, @C("ULONG") int cbInput, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptImportKeyPair$MH().invokeExact(hAlgorithm.address(), hImportKey.address(), pszBlobType.address(), phKey.address(), pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDuplicateKey$MH() {
        return cfapi_h$constants$50.BCryptDuplicateKey$MH();
    }
    public static @C("NTSTATUS") int BCryptDuplicateKey (@C("BCRYPT_KEY_HANDLE") Addressable hKey, @C("BCRYPT_KEY_HANDLE*") Addressable phNewKey, @C("PUCHAR") Addressable pbKeyObject, @C("ULONG") int cbKeyObject, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptDuplicateKey$MH().invokeExact(hKey.address(), phNewKey.address(), pbKeyObject.address(), cbKeyObject, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptFinalizeKeyPair$MH() {
        return cfapi_h$constants$50.BCryptFinalizeKeyPair$MH();
    }
    public static @C("NTSTATUS") int BCryptFinalizeKeyPair (@C("BCRYPT_KEY_HANDLE") Addressable hKey, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptFinalizeKeyPair$MH().invokeExact(hKey.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDestroyKey$MH() {
        return cfapi_h$constants$50.BCryptDestroyKey$MH();
    }
    public static @C("NTSTATUS") int BCryptDestroyKey (@C("BCRYPT_KEY_HANDLE") Addressable hKey) {
        try {
            return (int)cfapi_h$constants$50.BCryptDestroyKey$MH().invokeExact(hKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDestroySecret$MH() {
        return cfapi_h$constants$50.BCryptDestroySecret$MH();
    }
    public static @C("NTSTATUS") int BCryptDestroySecret (@C("BCRYPT_SECRET_HANDLE") Addressable hSecret) {
        try {
            return (int)cfapi_h$constants$50.BCryptDestroySecret$MH().invokeExact(hSecret.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptSignHash$MH() {
        return cfapi_h$constants$50.BCryptSignHash$MH();
    }
    public static @C("NTSTATUS") int BCryptSignHash (@C("BCRYPT_KEY_HANDLE") Addressable hKey, @C("void*") Addressable pPaddingInfo, @C("PUCHAR") Addressable pbInput, @C("ULONG") int cbInput, @C("PUCHAR") Addressable pbOutput, @C("ULONG") int cbOutput, @C("ULONG*") Addressable pcbResult, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptSignHash$MH().invokeExact(hKey.address(), pPaddingInfo.address(), pbInput.address(), cbInput, pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptVerifySignature$MH() {
        return cfapi_h$constants$50.BCryptVerifySignature$MH();
    }
    public static @C("NTSTATUS") int BCryptVerifySignature (@C("BCRYPT_KEY_HANDLE") Addressable hKey, @C("void*") Addressable pPaddingInfo, @C("PUCHAR") Addressable pbHash, @C("ULONG") int cbHash, @C("PUCHAR") Addressable pbSignature, @C("ULONG") int cbSignature, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptVerifySignature$MH().invokeExact(hKey.address(), pPaddingInfo.address(), pbHash.address(), cbHash, pbSignature.address(), cbSignature, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptSecretAgreement$MH() {
        return cfapi_h$constants$50.BCryptSecretAgreement$MH();
    }
    public static @C("NTSTATUS") int BCryptSecretAgreement (@C("BCRYPT_KEY_HANDLE") Addressable hPrivKey, @C("BCRYPT_KEY_HANDLE") Addressable hPubKey, @C("BCRYPT_SECRET_HANDLE*") Addressable phAgreedSecret, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptSecretAgreement$MH().invokeExact(hPrivKey.address(), hPubKey.address(), phAgreedSecret.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDeriveKey$MH() {
        return cfapi_h$constants$50.BCryptDeriveKey$MH();
    }
    public static @C("NTSTATUS") int BCryptDeriveKey (@C("BCRYPT_SECRET_HANDLE") Addressable hSharedSecret, @C("LPCWSTR") Addressable pwszKDF, @C("BCryptBufferDesc*") Addressable pParameterList, @C("PUCHAR") Addressable pbDerivedKey, @C("ULONG") int cbDerivedKey, @C("ULONG*") Addressable pcbResult, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptDeriveKey$MH().invokeExact(hSharedSecret.address(), pwszKDF.address(), pParameterList.address(), pbDerivedKey.address(), cbDerivedKey, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptKeyDerivation$MH() {
        return cfapi_h$constants$50.BCryptKeyDerivation$MH();
    }
    public static @C("NTSTATUS") int BCryptKeyDerivation (@C("BCRYPT_KEY_HANDLE") Addressable hKey, @C("BCryptBufferDesc*") Addressable pParameterList, @C("PUCHAR") Addressable pbDerivedKey, @C("ULONG") int cbDerivedKey, @C("ULONG*") Addressable pcbResult, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptKeyDerivation$MH().invokeExact(hKey.address(), pParameterList.address(), pbDerivedKey.address(), cbDerivedKey, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptCreateHash$MH() {
        return cfapi_h$constants$50.BCryptCreateHash$MH();
    }
    public static @C("NTSTATUS") int BCryptCreateHash (@C("BCRYPT_ALG_HANDLE") Addressable hAlgorithm, @C("BCRYPT_HASH_HANDLE*") Addressable phHash, @C("PUCHAR") Addressable pbHashObject, @C("ULONG") int cbHashObject, @C("PUCHAR") Addressable pbSecret, @C("ULONG") int cbSecret, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptCreateHash$MH().invokeExact(hAlgorithm.address(), phHash.address(), pbHashObject.address(), cbHashObject, pbSecret.address(), cbSecret, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptHashData$MH() {
        return cfapi_h$constants$50.BCryptHashData$MH();
    }
    public static @C("NTSTATUS") int BCryptHashData (@C("BCRYPT_HASH_HANDLE") Addressable hHash, @C("PUCHAR") Addressable pbInput, @C("ULONG") int cbInput, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptHashData$MH().invokeExact(hHash.address(), pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptFinishHash$MH() {
        return cfapi_h$constants$50.BCryptFinishHash$MH();
    }
    public static @C("NTSTATUS") int BCryptFinishHash (@C("BCRYPT_HASH_HANDLE") Addressable hHash, @C("PUCHAR") Addressable pbOutput, @C("ULONG") int cbOutput, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptFinishHash$MH().invokeExact(hHash.address(), pbOutput.address(), cbOutput, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptCreateMultiHash$MH() {
        return cfapi_h$constants$50.BCryptCreateMultiHash$MH();
    }
    public static @C("NTSTATUS") int BCryptCreateMultiHash (@C("BCRYPT_ALG_HANDLE") Addressable hAlgorithm, @C("BCRYPT_HASH_HANDLE*") Addressable phHash, @C("ULONG") int nHashes, @C("PUCHAR") Addressable pbHashObject, @C("ULONG") int cbHashObject, @C("PUCHAR") Addressable pbSecret, @C("ULONG") int cbSecret, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptCreateMultiHash$MH().invokeExact(hAlgorithm.address(), phHash.address(), nHashes, pbHashObject.address(), cbHashObject, pbSecret.address(), cbSecret, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptProcessMultiOperations$MH() {
        return cfapi_h$constants$50.BCryptProcessMultiOperations$MH();
    }
    public static @C("NTSTATUS") int BCryptProcessMultiOperations (@C("BCRYPT_HANDLE") Addressable hObject, @C("BCRYPT_MULTI_OPERATION_TYPE") int operationType, @C("PVOID") Addressable pOperations, @C("ULONG") int cbOperations, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptProcessMultiOperations$MH().invokeExact(hObject.address(), operationType, pOperations.address(), cbOperations, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDuplicateHash$MH() {
        return cfapi_h$constants$50.BCryptDuplicateHash$MH();
    }
    public static @C("NTSTATUS") int BCryptDuplicateHash (@C("BCRYPT_HASH_HANDLE") Addressable hHash, @C("BCRYPT_HASH_HANDLE*") Addressable phNewHash, @C("PUCHAR") Addressable pbHashObject, @C("ULONG") int cbHashObject, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptDuplicateHash$MH().invokeExact(hHash.address(), phNewHash.address(), pbHashObject.address(), cbHashObject, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDestroyHash$MH() {
        return cfapi_h$constants$50.BCryptDestroyHash$MH();
    }
    public static @C("NTSTATUS") int BCryptDestroyHash (@C("BCRYPT_HASH_HANDLE") Addressable hHash) {
        try {
            return (int)cfapi_h$constants$50.BCryptDestroyHash$MH().invokeExact(hHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptHash$MH() {
        return cfapi_h$constants$50.BCryptHash$MH();
    }
    public static @C("NTSTATUS") int BCryptHash (@C("BCRYPT_ALG_HANDLE") Addressable hAlgorithm, @C("PUCHAR") Addressable pbSecret, @C("ULONG") int cbSecret, @C("PUCHAR") Addressable pbInput, @C("ULONG") int cbInput, @C("PUCHAR") Addressable pbOutput, @C("ULONG") int cbOutput) {
        try {
            return (int)cfapi_h$constants$50.BCryptHash$MH().invokeExact(hAlgorithm.address(), pbSecret.address(), cbSecret, pbInput.address(), cbInput, pbOutput.address(), cbOutput);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptGenRandom$MH() {
        return cfapi_h$constants$50.BCryptGenRandom$MH();
    }
    public static @C("NTSTATUS") int BCryptGenRandom (@C("BCRYPT_ALG_HANDLE") Addressable hAlgorithm, @C("PUCHAR") Addressable pbBuffer, @C("ULONG") int cbBuffer, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptGenRandom$MH().invokeExact(hAlgorithm.address(), pbBuffer.address(), cbBuffer, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDeriveKeyCapi$MH() {
        return cfapi_h$constants$50.BCryptDeriveKeyCapi$MH();
    }
    public static @C("NTSTATUS") int BCryptDeriveKeyCapi (@C("BCRYPT_HASH_HANDLE") Addressable hHash, @C("BCRYPT_ALG_HANDLE") Addressable hTargetAlg, @C("PUCHAR") Addressable pbDerivedKey, @C("ULONG") int cbDerivedKey, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptDeriveKeyCapi$MH().invokeExact(hHash.address(), hTargetAlg.address(), pbDerivedKey.address(), cbDerivedKey, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDeriveKeyPBKDF2$MH() {
        return cfapi_h$constants$50.BCryptDeriveKeyPBKDF2$MH();
    }
    public static @C("NTSTATUS") int BCryptDeriveKeyPBKDF2 (@C("BCRYPT_ALG_HANDLE") Addressable hPrf, @C("PUCHAR") Addressable pbPassword, @C("ULONG") int cbPassword, @C("PUCHAR") Addressable pbSalt, @C("ULONG") int cbSalt, @C("ULONGLONG") long cIterations, @C("PUCHAR") Addressable pbDerivedKey, @C("ULONG") int cbDerivedKey, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$50.BCryptDeriveKeyPBKDF2$MH().invokeExact(hPrf.address(), pbPassword.address(), cbPassword, pbSalt.address(), cbSalt, cIterations, pbDerivedKey.address(), cbDerivedKey, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptQueryProviderRegistration$MH() {
        return cfapi_h$constants$50.BCryptQueryProviderRegistration$MH();
    }
    public static @C("NTSTATUS") int BCryptQueryProviderRegistration (@C("LPCWSTR") Addressable pszProvider, @C("ULONG") int dwMode, @C("ULONG") int dwInterface, @C("ULONG*") Addressable pcbBuffer, @C("PCRYPT_PROVIDER_REG*") Addressable ppBuffer) {
        try {
            return (int)cfapi_h$constants$50.BCryptQueryProviderRegistration$MH().invokeExact(pszProvider.address(), dwMode, dwInterface, pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptEnumRegisteredProviders$MH() {
        return cfapi_h$constants$50.BCryptEnumRegisteredProviders$MH();
    }
    public static @C("NTSTATUS") int BCryptEnumRegisteredProviders (@C("ULONG*") Addressable pcbBuffer, @C("PCRYPT_PROVIDERS*") Addressable ppBuffer) {
        try {
            return (int)cfapi_h$constants$50.BCryptEnumRegisteredProviders$MH().invokeExact(pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptCreateContext$MH() {
        return cfapi_h$constants$50.BCryptCreateContext$MH();
    }
    public static @C("NTSTATUS") int BCryptCreateContext (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("PCRYPT_CONTEXT_CONFIG") Addressable pConfig) {
        try {
            return (int)cfapi_h$constants$50.BCryptCreateContext$MH().invokeExact(dwTable, pszContext.address(), pConfig.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptDeleteContext$MH() {
        return cfapi_h$constants$50.BCryptDeleteContext$MH();
    }
    public static @C("NTSTATUS") int BCryptDeleteContext (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext) {
        try {
            return (int)cfapi_h$constants$50.BCryptDeleteContext$MH().invokeExact(dwTable, pszContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptEnumContexts$MH() {
        return cfapi_h$constants$50.BCryptEnumContexts$MH();
    }
    public static @C("NTSTATUS") int BCryptEnumContexts (@C("ULONG") int dwTable, @C("ULONG*") Addressable pcbBuffer, @C("PCRYPT_CONTEXTS*") Addressable ppBuffer) {
        try {
            return (int)cfapi_h$constants$50.BCryptEnumContexts$MH().invokeExact(dwTable, pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptConfigureContext$MH() {
        return cfapi_h$constants$50.BCryptConfigureContext$MH();
    }
    public static @C("NTSTATUS") int BCryptConfigureContext (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("PCRYPT_CONTEXT_CONFIG") Addressable pConfig) {
        try {
            return (int)cfapi_h$constants$50.BCryptConfigureContext$MH().invokeExact(dwTable, pszContext.address(), pConfig.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptQueryContextConfiguration$MH() {
        return cfapi_h$constants$50.BCryptQueryContextConfiguration$MH();
    }
    public static @C("NTSTATUS") int BCryptQueryContextConfiguration (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("ULONG*") Addressable pcbBuffer, @C("PCRYPT_CONTEXT_CONFIG*") Addressable ppBuffer) {
        try {
            return (int)cfapi_h$constants$50.BCryptQueryContextConfiguration$MH().invokeExact(dwTable, pszContext.address(), pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptAddContextFunction$MH() {
        return cfapi_h$constants$50.BCryptAddContextFunction$MH();
    }
    public static @C("NTSTATUS") int BCryptAddContextFunction (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("ULONG") int dwInterface, @C("LPCWSTR") Addressable pszFunction, @C("ULONG") int dwPosition) {
        try {
            return (int)cfapi_h$constants$50.BCryptAddContextFunction$MH().invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), dwPosition);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptRemoveContextFunction$MH() {
        return cfapi_h$constants$50.BCryptRemoveContextFunction$MH();
    }
    public static @C("NTSTATUS") int BCryptRemoveContextFunction (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("ULONG") int dwInterface, @C("LPCWSTR") Addressable pszFunction) {
        try {
            return (int)cfapi_h$constants$50.BCryptRemoveContextFunction$MH().invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptEnumContextFunctions$MH() {
        return cfapi_h$constants$50.BCryptEnumContextFunctions$MH();
    }
    public static @C("NTSTATUS") int BCryptEnumContextFunctions (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("ULONG") int dwInterface, @C("ULONG*") Addressable pcbBuffer, @C("PCRYPT_CONTEXT_FUNCTIONS*") Addressable ppBuffer) {
        try {
            return (int)cfapi_h$constants$50.BCryptEnumContextFunctions$MH().invokeExact(dwTable, pszContext.address(), dwInterface, pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptConfigureContextFunction$MH() {
        return cfapi_h$constants$50.BCryptConfigureContextFunction$MH();
    }
    public static @C("NTSTATUS") int BCryptConfigureContextFunction (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("ULONG") int dwInterface, @C("LPCWSTR") Addressable pszFunction, @C("PCRYPT_CONTEXT_FUNCTION_CONFIG") Addressable pConfig) {
        try {
            return (int)cfapi_h$constants$50.BCryptConfigureContextFunction$MH().invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pConfig.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptQueryContextFunctionConfiguration$MH() {
        return cfapi_h$constants$50.BCryptQueryContextFunctionConfiguration$MH();
    }
    public static @C("NTSTATUS") int BCryptQueryContextFunctionConfiguration (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("ULONG") int dwInterface, @C("LPCWSTR") Addressable pszFunction, @C("ULONG*") Addressable pcbBuffer, @C("PCRYPT_CONTEXT_FUNCTION_CONFIG*") Addressable ppBuffer) {
        try {
            return (int)cfapi_h$constants$50.BCryptQueryContextFunctionConfiguration$MH().invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptEnumContextFunctionProviders$MH() {
        return cfapi_h$constants$50.BCryptEnumContextFunctionProviders$MH();
    }
    public static @C("NTSTATUS") int BCryptEnumContextFunctionProviders (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("ULONG") int dwInterface, @C("LPCWSTR") Addressable pszFunction, @C("ULONG*") Addressable pcbBuffer, @C("PCRYPT_CONTEXT_FUNCTION_PROVIDERS*") Addressable ppBuffer) {
        try {
            return (int)cfapi_h$constants$50.BCryptEnumContextFunctionProviders$MH().invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptSetContextFunctionProperty$MH() {
        return cfapi_h$constants$50.BCryptSetContextFunctionProperty$MH();
    }
    public static @C("NTSTATUS") int BCryptSetContextFunctionProperty (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("ULONG") int dwInterface, @C("LPCWSTR") Addressable pszFunction, @C("LPCWSTR") Addressable pszProperty, @C("ULONG") int cbValue, @C("PUCHAR") Addressable pbValue) {
        try {
            return (int)cfapi_h$constants$50.BCryptSetContextFunctionProperty$MH().invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pszProperty.address(), cbValue, pbValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptQueryContextFunctionProperty$MH() {
        return cfapi_h$constants$50.BCryptQueryContextFunctionProperty$MH();
    }
    public static @C("NTSTATUS") int BCryptQueryContextFunctionProperty (@C("ULONG") int dwTable, @C("LPCWSTR") Addressable pszContext, @C("ULONG") int dwInterface, @C("LPCWSTR") Addressable pszFunction, @C("LPCWSTR") Addressable pszProperty, @C("ULONG*") Addressable pcbValue, @C("PUCHAR*") Addressable ppbValue) {
        try {
            return (int)cfapi_h$constants$50.BCryptQueryContextFunctionProperty$MH().invokeExact(dwTable, pszContext.address(), dwInterface, pszFunction.address(), pszProperty.address(), pcbValue.address(), ppbValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptRegisterConfigChangeNotify$MH() {
        return cfapi_h$constants$50.BCryptRegisterConfigChangeNotify$MH();
    }
    public static @C("NTSTATUS") int BCryptRegisterConfigChangeNotify (@C("HANDLE*") Addressable phEvent) {
        try {
            return (int)cfapi_h$constants$50.BCryptRegisterConfigChangeNotify$MH().invokeExact(phEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptUnregisterConfigChangeNotify$MH() {
        return cfapi_h$constants$50.BCryptUnregisterConfigChangeNotify$MH();
    }
    public static @C("NTSTATUS") int BCryptUnregisterConfigChangeNotify (@C("HANDLE") Addressable hEvent) {
        try {
            return (int)cfapi_h$constants$50.BCryptUnregisterConfigChangeNotify$MH().invokeExact(hEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptResolveProviders$MH() {
        return cfapi_h$constants$50.BCryptResolveProviders$MH();
    }
    public static @C("NTSTATUS") int BCryptResolveProviders (@C("LPCWSTR") Addressable pszContext, @C("ULONG") int dwInterface, @C("LPCWSTR") Addressable pszFunction, @C("LPCWSTR") Addressable pszProvider, @C("ULONG") int dwMode, @C("ULONG") int dwFlags, @C("ULONG*") Addressable pcbBuffer, @C("PCRYPT_PROVIDER_REFS*") Addressable ppBuffer) {
        try {
            return (int)cfapi_h$constants$50.BCryptResolveProviders$MH().invokeExact(pszContext.address(), dwInterface, pszFunction.address(), pszProvider.address(), dwMode, dwFlags, pcbBuffer.address(), ppBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BCryptGetFipsAlgorithmMode$MH() {
        return cfapi_h$constants$50.BCryptGetFipsAlgorithmMode$MH();
    }
    public static @C("NTSTATUS") int BCryptGetFipsAlgorithmMode (@C("BOOLEAN*") Addressable pfEnabled) {
        try {
            return (int)cfapi_h$constants$50.BCryptGetFipsAlgorithmMode$MH().invokeExact(pfEnabled.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CngGetFipsAlgorithmMode$MH() {
        return cfapi_h$constants$50.CngGetFipsAlgorithmMode$MH();
    }
    public static @C("BOOLEAN") byte CngGetFipsAlgorithmMode () {
        try {
            return (byte)cfapi_h$constants$50.CngGetFipsAlgorithmMode$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("long") ValueLayout SECURITY_STATUS = C_LONG;
    public static  MethodHandle NCryptOpenStorageProvider$MH() {
        return cfapi_h$constants$51.NCryptOpenStorageProvider$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptOpenStorageProvider (@C("NCRYPT_PROV_HANDLE*") Addressable phProvider, @C("LPCWSTR") Addressable pszProviderName, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptOpenStorageProvider$MH().invokeExact(phProvider.address(), pszProviderName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptEnumAlgorithms$MH() {
        return cfapi_h$constants$51.NCryptEnumAlgorithms$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptEnumAlgorithms (@C("NCRYPT_PROV_HANDLE") long hProvider, @C("DWORD") int dwAlgOperations, @C("DWORD*") Addressable pdwAlgCount, @C("NCryptAlgorithmName**") Addressable ppAlgList, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptEnumAlgorithms$MH().invokeExact(hProvider, dwAlgOperations, pdwAlgCount.address(), ppAlgList.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptIsAlgSupported$MH() {
        return cfapi_h$constants$51.NCryptIsAlgSupported$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptIsAlgSupported (@C("NCRYPT_PROV_HANDLE") long hProvider, @C("LPCWSTR") Addressable pszAlgId, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptIsAlgSupported$MH().invokeExact(hProvider, pszAlgId.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptEnumKeys$MH() {
        return cfapi_h$constants$51.NCryptEnumKeys$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptEnumKeys (@C("NCRYPT_PROV_HANDLE") long hProvider, @C("LPCWSTR") Addressable pszScope, @C("NCryptKeyName**") Addressable ppKeyName, @C("PVOID*") Addressable ppEnumState, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptEnumKeys$MH().invokeExact(hProvider, pszScope.address(), ppKeyName.address(), ppEnumState.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptEnumStorageProviders$MH() {
        return cfapi_h$constants$51.NCryptEnumStorageProviders$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptEnumStorageProviders (@C("DWORD*") Addressable pdwProviderCount, @C("NCryptProviderName**") Addressable ppProviderList, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptEnumStorageProviders$MH().invokeExact(pdwProviderCount.address(), ppProviderList.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptFreeBuffer$MH() {
        return cfapi_h$constants$51.NCryptFreeBuffer$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptFreeBuffer (@C("PVOID") Addressable pvInput) {
        try {
            return (int)cfapi_h$constants$51.NCryptFreeBuffer$MH().invokeExact(pvInput.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptOpenKey$MH() {
        return cfapi_h$constants$51.NCryptOpenKey$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptOpenKey (@C("NCRYPT_PROV_HANDLE") long hProvider, @C("NCRYPT_KEY_HANDLE*") Addressable phKey, @C("LPCWSTR") Addressable pszKeyName, @C("DWORD") int dwLegacyKeySpec, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptOpenKey$MH().invokeExact(hProvider, phKey.address(), pszKeyName.address(), dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptCreatePersistedKey$MH() {
        return cfapi_h$constants$51.NCryptCreatePersistedKey$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptCreatePersistedKey (@C("NCRYPT_PROV_HANDLE") long hProvider, @C("NCRYPT_KEY_HANDLE*") Addressable phKey, @C("LPCWSTR") Addressable pszAlgId, @C("LPCWSTR") Addressable pszKeyName, @C("DWORD") int dwLegacyKeySpec, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptCreatePersistedKey$MH().invokeExact(hProvider, phKey.address(), pszAlgId.address(), pszKeyName.address(), dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptGetProperty$MH() {
        return cfapi_h$constants$51.NCryptGetProperty$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptGetProperty (@C("NCRYPT_HANDLE") long hObject, @C("LPCWSTR") Addressable pszProperty, @C("PBYTE") Addressable pbOutput, @C("DWORD") int cbOutput, @C("DWORD*") Addressable pcbResult, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptGetProperty$MH().invokeExact(hObject, pszProperty.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptSetProperty$MH() {
        return cfapi_h$constants$51.NCryptSetProperty$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptSetProperty (@C("NCRYPT_HANDLE") long hObject, @C("LPCWSTR") Addressable pszProperty, @C("PBYTE") Addressable pbInput, @C("DWORD") int cbInput, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptSetProperty$MH().invokeExact(hObject, pszProperty.address(), pbInput.address(), cbInput, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptFinalizeKey$MH() {
        return cfapi_h$constants$51.NCryptFinalizeKey$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptFinalizeKey (@C("NCRYPT_KEY_HANDLE") long hKey, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptFinalizeKey$MH().invokeExact(hKey, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptEncrypt$MH() {
        return cfapi_h$constants$51.NCryptEncrypt$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptEncrypt (@C("NCRYPT_KEY_HANDLE") long hKey, @C("PBYTE") Addressable pbInput, @C("DWORD") int cbInput, @C("void*") Addressable pPaddingInfo, @C("PBYTE") Addressable pbOutput, @C("DWORD") int cbOutput, @C("DWORD*") Addressable pcbResult, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptEncrypt$MH().invokeExact(hKey, pbInput.address(), cbInput, pPaddingInfo.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptDecrypt$MH() {
        return cfapi_h$constants$51.NCryptDecrypt$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptDecrypt (@C("NCRYPT_KEY_HANDLE") long hKey, @C("PBYTE") Addressable pbInput, @C("DWORD") int cbInput, @C("void*") Addressable pPaddingInfo, @C("PBYTE") Addressable pbOutput, @C("DWORD") int cbOutput, @C("DWORD*") Addressable pcbResult, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptDecrypt$MH().invokeExact(hKey, pbInput.address(), cbInput, pPaddingInfo.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptImportKey$MH() {
        return cfapi_h$constants$51.NCryptImportKey$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptImportKey (@C("NCRYPT_PROV_HANDLE") long hProvider, @C("NCRYPT_KEY_HANDLE") long hImportKey, @C("LPCWSTR") Addressable pszBlobType, @C("NCryptBufferDesc*") Addressable pParameterList, @C("NCRYPT_KEY_HANDLE*") Addressable phKey, @C("PBYTE") Addressable pbData, @C("DWORD") int cbData, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptImportKey$MH().invokeExact(hProvider, hImportKey, pszBlobType.address(), pParameterList.address(), phKey.address(), pbData.address(), cbData, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptExportKey$MH() {
        return cfapi_h$constants$51.NCryptExportKey$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptExportKey (@C("NCRYPT_KEY_HANDLE") long hKey, @C("NCRYPT_KEY_HANDLE") long hExportKey, @C("LPCWSTR") Addressable pszBlobType, @C("NCryptBufferDesc*") Addressable pParameterList, @C("PBYTE") Addressable pbOutput, @C("DWORD") int cbOutput, @C("DWORD*") Addressable pcbResult, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptExportKey$MH().invokeExact(hKey, hExportKey, pszBlobType.address(), pParameterList.address(), pbOutput.address(), cbOutput, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptSignHash$MH() {
        return cfapi_h$constants$51.NCryptSignHash$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptSignHash (@C("NCRYPT_KEY_HANDLE") long hKey, @C("void*") Addressable pPaddingInfo, @C("PBYTE") Addressable pbHashValue, @C("DWORD") int cbHashValue, @C("PBYTE") Addressable pbSignature, @C("DWORD") int cbSignature, @C("DWORD*") Addressable pcbResult, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptSignHash$MH().invokeExact(hKey, pPaddingInfo.address(), pbHashValue.address(), cbHashValue, pbSignature.address(), cbSignature, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptVerifySignature$MH() {
        return cfapi_h$constants$51.NCryptVerifySignature$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptVerifySignature (@C("NCRYPT_KEY_HANDLE") long hKey, @C("void*") Addressable pPaddingInfo, @C("PBYTE") Addressable pbHashValue, @C("DWORD") int cbHashValue, @C("PBYTE") Addressable pbSignature, @C("DWORD") int cbSignature, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptVerifySignature$MH().invokeExact(hKey, pPaddingInfo.address(), pbHashValue.address(), cbHashValue, pbSignature.address(), cbSignature, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptDeleteKey$MH() {
        return cfapi_h$constants$51.NCryptDeleteKey$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptDeleteKey (@C("NCRYPT_KEY_HANDLE") long hKey, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptDeleteKey$MH().invokeExact(hKey, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptFreeObject$MH() {
        return cfapi_h$constants$51.NCryptFreeObject$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptFreeObject (@C("NCRYPT_HANDLE") long hObject) {
        try {
            return (int)cfapi_h$constants$51.NCryptFreeObject$MH().invokeExact(hObject);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptIsKeyHandle$MH() {
        return cfapi_h$constants$51.NCryptIsKeyHandle$MH();
    }
    public static @C("BOOL") int NCryptIsKeyHandle (@C("NCRYPT_KEY_HANDLE") long hKey) {
        try {
            return (int)cfapi_h$constants$51.NCryptIsKeyHandle$MH().invokeExact(hKey);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptTranslateHandle$MH() {
        return cfapi_h$constants$51.NCryptTranslateHandle$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptTranslateHandle (@C("NCRYPT_PROV_HANDLE*") Addressable phProvider, @C("NCRYPT_KEY_HANDLE*") Addressable phKey, @C("HCRYPTPROV") long hLegacyProv, @C("HCRYPTKEY") long hLegacyKey, @C("DWORD") int dwLegacyKeySpec, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptTranslateHandle$MH().invokeExact(phProvider.address(), phKey.address(), hLegacyProv, hLegacyKey, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptNotifyChangeKey$MH() {
        return cfapi_h$constants$51.NCryptNotifyChangeKey$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptNotifyChangeKey (@C("NCRYPT_PROV_HANDLE") long hProvider, @C("HANDLE*") Addressable phEvent, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptNotifyChangeKey$MH().invokeExact(hProvider, phEvent.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptSecretAgreement$MH() {
        return cfapi_h$constants$51.NCryptSecretAgreement$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptSecretAgreement (@C("NCRYPT_KEY_HANDLE") long hPrivKey, @C("NCRYPT_KEY_HANDLE") long hPubKey, @C("NCRYPT_SECRET_HANDLE*") Addressable phAgreedSecret, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptSecretAgreement$MH().invokeExact(hPrivKey, hPubKey, phAgreedSecret.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptDeriveKey$MH() {
        return cfapi_h$constants$51.NCryptDeriveKey$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptDeriveKey (@C("NCRYPT_SECRET_HANDLE") long hSharedSecret, @C("LPCWSTR") Addressable pwszKDF, @C("NCryptBufferDesc*") Addressable pParameterList, @C("PBYTE") Addressable pbDerivedKey, @C("DWORD") int cbDerivedKey, @C("DWORD*") Addressable pcbResult, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptDeriveKey$MH().invokeExact(hSharedSecret, pwszKDF.address(), pParameterList.address(), pbDerivedKey.address(), cbDerivedKey, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptKeyDerivation$MH() {
        return cfapi_h$constants$51.NCryptKeyDerivation$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptKeyDerivation (@C("NCRYPT_KEY_HANDLE") long hKey, @C("NCryptBufferDesc*") Addressable pParameterList, @C("PUCHAR") Addressable pbDerivedKey, @C("DWORD") int cbDerivedKey, @C("DWORD*") Addressable pcbResult, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptKeyDerivation$MH().invokeExact(hKey, pParameterList.address(), pbDerivedKey.address(), cbDerivedKey, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptCreateClaim$MH() {
        return cfapi_h$constants$51.NCryptCreateClaim$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptCreateClaim (@C("NCRYPT_KEY_HANDLE") long hSubjectKey, @C("NCRYPT_KEY_HANDLE") long hAuthorityKey, @C("DWORD") int dwClaimType, @C("NCryptBufferDesc*") Addressable pParameterList, @C("PBYTE") Addressable pbClaimBlob, @C("DWORD") int cbClaimBlob, @C("DWORD*") Addressable pcbResult, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptCreateClaim$MH().invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList.address(), pbClaimBlob.address(), cbClaimBlob, pcbResult.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NCryptVerifyClaim$MH() {
        return cfapi_h$constants$51.NCryptVerifyClaim$MH();
    }
    public static @C("SECURITY_STATUS") int NCryptVerifyClaim (@C("NCRYPT_KEY_HANDLE") long hSubjectKey, @C("NCRYPT_KEY_HANDLE") long hAuthorityKey, @C("DWORD") int dwClaimType, @C("NCryptBufferDesc*") Addressable pParameterList, @C("PBYTE") Addressable pbClaimBlob, @C("DWORD") int cbClaimBlob, @C("NCryptBufferDesc*") Addressable pOutput, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$51.NCryptVerifyClaim$MH().invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList.address(), pbClaimBlob.address(), cbClaimBlob, pOutput.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptFormatObject$MH() {
        return cfapi_h$constants$51.CryptFormatObject$MH();
    }
    public static @C("BOOL") int CryptFormatObject (@C("DWORD") int dwCertEncodingType, @C("DWORD") int dwFormatType, @C("DWORD") int dwFormatStrType, @C("void*") Addressable pFormatStruct, @C("LPCSTR") Addressable lpszStructType, @C("const BYTE*") Addressable pbEncoded, @C("DWORD") int cbEncoded, @C("void*") Addressable pbFormat, @C("DWORD*") Addressable pcbFormat) {
        try {
            return (int)cfapi_h$constants$51.CryptFormatObject$MH().invokeExact(dwCertEncodingType, dwFormatType, dwFormatStrType, pFormatStruct.address(), lpszStructType.address(), pbEncoded.address(), cbEncoded, pbFormat.address(), pcbFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEncodeObjectEx$MH() {
        return cfapi_h$constants$51.CryptEncodeObjectEx$MH();
    }
    public static @C("BOOL") int CryptEncodeObjectEx (@C("DWORD") int dwCertEncodingType, @C("LPCSTR") Addressable lpszStructType, @C("void*") Addressable pvStructInfo, @C("DWORD") int dwFlags, @C("PCRYPT_ENCODE_PARA") Addressable pEncodePara, @C("void*") Addressable pvEncoded, @C("DWORD*") Addressable pcbEncoded) {
        try {
            return (int)cfapi_h$constants$51.CryptEncodeObjectEx$MH().invokeExact(dwCertEncodingType, lpszStructType.address(), pvStructInfo.address(), dwFlags, pEncodePara.address(), pvEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEncodeObject$MH() {
        return cfapi_h$constants$51.CryptEncodeObject$MH();
    }
    public static @C("BOOL") int CryptEncodeObject (@C("DWORD") int dwCertEncodingType, @C("LPCSTR") Addressable lpszStructType, @C("void*") Addressable pvStructInfo, @C("BYTE*") Addressable pbEncoded, @C("DWORD*") Addressable pcbEncoded) {
        try {
            return (int)cfapi_h$constants$51.CryptEncodeObject$MH().invokeExact(dwCertEncodingType, lpszStructType.address(), pvStructInfo.address(), pbEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDecodeObjectEx$MH() {
        return cfapi_h$constants$51.CryptDecodeObjectEx$MH();
    }
    public static @C("BOOL") int CryptDecodeObjectEx (@C("DWORD") int dwCertEncodingType, @C("LPCSTR") Addressable lpszStructType, @C("const BYTE*") Addressable pbEncoded, @C("DWORD") int cbEncoded, @C("DWORD") int dwFlags, @C("PCRYPT_DECODE_PARA") Addressable pDecodePara, @C("void*") Addressable pvStructInfo, @C("DWORD*") Addressable pcbStructInfo) {
        try {
            return (int)cfapi_h$constants$51.CryptDecodeObjectEx$MH().invokeExact(dwCertEncodingType, lpszStructType.address(), pbEncoded.address(), cbEncoded, dwFlags, pDecodePara.address(), pvStructInfo.address(), pcbStructInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDecodeObject$MH() {
        return cfapi_h$constants$51.CryptDecodeObject$MH();
    }
    public static @C("BOOL") int CryptDecodeObject (@C("DWORD") int dwCertEncodingType, @C("LPCSTR") Addressable lpszStructType, @C("const BYTE*") Addressable pbEncoded, @C("DWORD") int cbEncoded, @C("DWORD") int dwFlags, @C("void*") Addressable pvStructInfo, @C("DWORD*") Addressable pcbStructInfo) {
        try {
            return (int)cfapi_h$constants$51.CryptDecodeObject$MH().invokeExact(dwCertEncodingType, lpszStructType.address(), pbEncoded.address(), cbEncoded, dwFlags, pvStructInfo.address(), pcbStructInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptInstallOIDFunctionAddress$MH() {
        return cfapi_h$constants$52.CryptInstallOIDFunctionAddress$MH();
    }
    public static @C("BOOL") int CryptInstallOIDFunctionAddress (@C("HMODULE") Addressable hModule, @C("DWORD") int dwEncodingType, @C("LPCSTR") Addressable pszFuncName, @C("DWORD") int cFuncEntry, @C("const CRYPT_OID_FUNC_ENTRY[]") Addressable rgFuncEntry, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$52.CryptInstallOIDFunctionAddress$MH().invokeExact(hModule.address(), dwEncodingType, pszFuncName.address(), cFuncEntry, rgFuncEntry.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptInitOIDFunctionSet$MH() {
        return cfapi_h$constants$52.CryptInitOIDFunctionSet$MH();
    }
    public static @C("HCRYPTOIDFUNCSET") MemoryAddress CryptInitOIDFunctionSet (@C("LPCSTR") Addressable pszFuncName, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$52.CryptInitOIDFunctionSet$MH().invokeExact(pszFuncName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetOIDFunctionAddress$MH() {
        return cfapi_h$constants$52.CryptGetOIDFunctionAddress$MH();
    }
    public static @C("BOOL") int CryptGetOIDFunctionAddress (@C("HCRYPTOIDFUNCSET") Addressable hFuncSet, @C("DWORD") int dwEncodingType, @C("LPCSTR") Addressable pszOID, @C("DWORD") int dwFlags, @C("void**") Addressable ppvFuncAddr, @C("HCRYPTOIDFUNCADDR*") Addressable phFuncAddr) {
        try {
            return (int)cfapi_h$constants$52.CryptGetOIDFunctionAddress$MH().invokeExact(hFuncSet.address(), dwEncodingType, pszOID.address(), dwFlags, ppvFuncAddr.address(), phFuncAddr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetDefaultOIDDllList$MH() {
        return cfapi_h$constants$52.CryptGetDefaultOIDDllList$MH();
    }
    public static @C("BOOL") int CryptGetDefaultOIDDllList (@C("HCRYPTOIDFUNCSET") Addressable hFuncSet, @C("DWORD") int dwEncodingType, @C("WCHAR*") Addressable pwszDllList, @C("DWORD*") Addressable pcchDllList) {
        try {
            return (int)cfapi_h$constants$52.CryptGetDefaultOIDDllList$MH().invokeExact(hFuncSet.address(), dwEncodingType, pwszDllList.address(), pcchDllList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetDefaultOIDFunctionAddress$MH() {
        return cfapi_h$constants$52.CryptGetDefaultOIDFunctionAddress$MH();
    }
    public static @C("BOOL") int CryptGetDefaultOIDFunctionAddress (@C("HCRYPTOIDFUNCSET") Addressable hFuncSet, @C("DWORD") int dwEncodingType, @C("LPCWSTR") Addressable pwszDll, @C("DWORD") int dwFlags, @C("void**") Addressable ppvFuncAddr, @C("HCRYPTOIDFUNCADDR*") Addressable phFuncAddr) {
        try {
            return (int)cfapi_h$constants$52.CryptGetDefaultOIDFunctionAddress$MH().invokeExact(hFuncSet.address(), dwEncodingType, pwszDll.address(), dwFlags, ppvFuncAddr.address(), phFuncAddr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptFreeOIDFunctionAddress$MH() {
        return cfapi_h$constants$52.CryptFreeOIDFunctionAddress$MH();
    }
    public static @C("BOOL") int CryptFreeOIDFunctionAddress (@C("HCRYPTOIDFUNCADDR") Addressable hFuncAddr, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$52.CryptFreeOIDFunctionAddress$MH().invokeExact(hFuncAddr.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptRegisterOIDFunction$MH() {
        return cfapi_h$constants$52.CryptRegisterOIDFunction$MH();
    }
    public static @C("BOOL") int CryptRegisterOIDFunction (@C("DWORD") int dwEncodingType, @C("LPCSTR") Addressable pszFuncName, @C("LPCSTR") Addressable pszOID, @C("LPCWSTR") Addressable pwszDll, @C("LPCSTR") Addressable pszOverrideFuncName) {
        try {
            return (int)cfapi_h$constants$52.CryptRegisterOIDFunction$MH().invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address(), pwszDll.address(), pszOverrideFuncName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptUnregisterOIDFunction$MH() {
        return cfapi_h$constants$52.CryptUnregisterOIDFunction$MH();
    }
    public static @C("BOOL") int CryptUnregisterOIDFunction (@C("DWORD") int dwEncodingType, @C("LPCSTR") Addressable pszFuncName, @C("LPCSTR") Addressable pszOID) {
        try {
            return (int)cfapi_h$constants$52.CryptUnregisterOIDFunction$MH().invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptRegisterDefaultOIDFunction$MH() {
        return cfapi_h$constants$52.CryptRegisterDefaultOIDFunction$MH();
    }
    public static @C("BOOL") int CryptRegisterDefaultOIDFunction (@C("DWORD") int dwEncodingType, @C("LPCSTR") Addressable pszFuncName, @C("DWORD") int dwIndex, @C("LPCWSTR") Addressable pwszDll) {
        try {
            return (int)cfapi_h$constants$52.CryptRegisterDefaultOIDFunction$MH().invokeExact(dwEncodingType, pszFuncName.address(), dwIndex, pwszDll.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptUnregisterDefaultOIDFunction$MH() {
        return cfapi_h$constants$52.CryptUnregisterDefaultOIDFunction$MH();
    }
    public static @C("BOOL") int CryptUnregisterDefaultOIDFunction (@C("DWORD") int dwEncodingType, @C("LPCSTR") Addressable pszFuncName, @C("LPCWSTR") Addressable pwszDll) {
        try {
            return (int)cfapi_h$constants$52.CryptUnregisterDefaultOIDFunction$MH().invokeExact(dwEncodingType, pszFuncName.address(), pwszDll.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetOIDFunctionValue$MH() {
        return cfapi_h$constants$52.CryptSetOIDFunctionValue$MH();
    }
    public static @C("BOOL") int CryptSetOIDFunctionValue (@C("DWORD") int dwEncodingType, @C("LPCSTR") Addressable pszFuncName, @C("LPCSTR") Addressable pszOID, @C("LPCWSTR") Addressable pwszValueName, @C("DWORD") int dwValueType, @C("const BYTE*") Addressable pbValueData, @C("DWORD") int cbValueData) {
        try {
            return (int)cfapi_h$constants$52.CryptSetOIDFunctionValue$MH().invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address(), pwszValueName.address(), dwValueType, pbValueData.address(), cbValueData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetOIDFunctionValue$MH() {
        return cfapi_h$constants$52.CryptGetOIDFunctionValue$MH();
    }
    public static @C("BOOL") int CryptGetOIDFunctionValue (@C("DWORD") int dwEncodingType, @C("LPCSTR") Addressable pszFuncName, @C("LPCSTR") Addressable pszOID, @C("LPCWSTR") Addressable pwszValueName, @C("DWORD*") Addressable pdwValueType, @C("BYTE*") Addressable pbValueData, @C("DWORD*") Addressable pcbValueData) {
        try {
            return (int)cfapi_h$constants$52.CryptGetOIDFunctionValue$MH().invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address(), pwszValueName.address(), pdwValueType.address(), pbValueData.address(), pcbValueData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEnumOIDFunction$MH() {
        return cfapi_h$constants$52.CryptEnumOIDFunction$MH();
    }
    public static @C("BOOL") int CryptEnumOIDFunction (@C("DWORD") int dwEncodingType, @C("LPCSTR") Addressable pszFuncName, @C("LPCSTR") Addressable pszOID, @C("DWORD") int dwFlags, @C("void*") Addressable pvArg, @C("PFN_CRYPT_ENUM_OID_FUNC") Addressable pfnEnumOIDFunc) {
        try {
            return (int)cfapi_h$constants$52.CryptEnumOIDFunction$MH().invokeExact(dwEncodingType, pszFuncName.address(), pszOID.address(), dwFlags, pvArg.address(), pfnEnumOIDFunc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptFindOIDInfo$MH() {
        return cfapi_h$constants$52.CryptFindOIDInfo$MH();
    }
    public static @C("PCCRYPT_OID_INFO") MemoryAddress CryptFindOIDInfo (@C("DWORD") int dwKeyType, @C("void*") Addressable pvKey, @C("DWORD") int dwGroupId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$52.CryptFindOIDInfo$MH().invokeExact(dwKeyType, pvKey.address(), dwGroupId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptRegisterOIDInfo$MH() {
        return cfapi_h$constants$52.CryptRegisterOIDInfo$MH();
    }
    public static @C("BOOL") int CryptRegisterOIDInfo (@C("PCCRYPT_OID_INFO") Addressable pInfo, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$52.CryptRegisterOIDInfo$MH().invokeExact(pInfo.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptUnregisterOIDInfo$MH() {
        return cfapi_h$constants$52.CryptUnregisterOIDInfo$MH();
    }
    public static @C("BOOL") int CryptUnregisterOIDInfo (@C("PCCRYPT_OID_INFO") Addressable pInfo) {
        try {
            return (int)cfapi_h$constants$52.CryptUnregisterOIDInfo$MH().invokeExact(pInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEnumOIDInfo$MH() {
        return cfapi_h$constants$52.CryptEnumOIDInfo$MH();
    }
    public static @C("BOOL") int CryptEnumOIDInfo (@C("DWORD") int dwGroupId, @C("DWORD") int dwFlags, @C("void*") Addressable pvArg, @C("PFN_CRYPT_ENUM_OID_INFO") Addressable pfnEnumOIDInfo) {
        try {
            return (int)cfapi_h$constants$52.CryptEnumOIDInfo$MH().invokeExact(dwGroupId, dwFlags, pvArg.address(), pfnEnumOIDInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptFindLocalizedName$MH() {
        return cfapi_h$constants$52.CryptFindLocalizedName$MH();
    }
    public static @C("LPCWSTR") MemoryAddress CryptFindLocalizedName (@C("LPCWSTR") Addressable pwszCryptName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$52.CryptFindLocalizedName$MH().invokeExact(pwszCryptName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgOpenToEncode$MH() {
        return cfapi_h$constants$53.CryptMsgOpenToEncode$MH();
    }
    public static @C("HCRYPTMSG") MemoryAddress CryptMsgOpenToEncode (@C("DWORD") int dwMsgEncodingType, @C("DWORD") int dwFlags, @C("DWORD") int dwMsgType, @C("void*") Addressable pvMsgEncodeInfo, @C("LPSTR") Addressable pszInnerContentObjID, @C("PCMSG_STREAM_INFO") Addressable pStreamInfo) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$53.CryptMsgOpenToEncode$MH().invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo.address(), pszInnerContentObjID.address(), pStreamInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgCalculateEncodedLength$MH() {
        return cfapi_h$constants$53.CryptMsgCalculateEncodedLength$MH();
    }
    public static @C("DWORD") int CryptMsgCalculateEncodedLength (@C("DWORD") int dwMsgEncodingType, @C("DWORD") int dwFlags, @C("DWORD") int dwMsgType, @C("void*") Addressable pvMsgEncodeInfo, @C("LPSTR") Addressable pszInnerContentObjID, @C("DWORD") int cbData) {
        try {
            return (int)cfapi_h$constants$53.CryptMsgCalculateEncodedLength$MH().invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo.address(), pszInnerContentObjID.address(), cbData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgOpenToDecode$MH() {
        return cfapi_h$constants$53.CryptMsgOpenToDecode$MH();
    }
    public static @C("HCRYPTMSG") MemoryAddress CryptMsgOpenToDecode (@C("DWORD") int dwMsgEncodingType, @C("DWORD") int dwFlags, @C("DWORD") int dwMsgType, @C("HCRYPTPROV_LEGACY") long hCryptProv, @C("PCERT_INFO") Addressable pRecipientInfo, @C("PCMSG_STREAM_INFO") Addressable pStreamInfo) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$53.CryptMsgOpenToDecode$MH().invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, hCryptProv, pRecipientInfo.address(), pStreamInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgDuplicate$MH() {
        return cfapi_h$constants$53.CryptMsgDuplicate$MH();
    }
    public static @C("HCRYPTMSG") MemoryAddress CryptMsgDuplicate (@C("HCRYPTMSG") Addressable hCryptMsg) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$53.CryptMsgDuplicate$MH().invokeExact(hCryptMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgClose$MH() {
        return cfapi_h$constants$53.CryptMsgClose$MH();
    }
    public static @C("BOOL") int CryptMsgClose (@C("HCRYPTMSG") Addressable hCryptMsg) {
        try {
            return (int)cfapi_h$constants$53.CryptMsgClose$MH().invokeExact(hCryptMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgUpdate$MH() {
        return cfapi_h$constants$53.CryptMsgUpdate$MH();
    }
    public static @C("BOOL") int CryptMsgUpdate (@C("HCRYPTMSG") Addressable hCryptMsg, @C("const BYTE*") Addressable pbData, @C("DWORD") int cbData, @C("BOOL") int fFinal) {
        try {
            return (int)cfapi_h$constants$53.CryptMsgUpdate$MH().invokeExact(hCryptMsg.address(), pbData.address(), cbData, fFinal);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgGetParam$MH() {
        return cfapi_h$constants$53.CryptMsgGetParam$MH();
    }
    public static @C("BOOL") int CryptMsgGetParam (@C("HCRYPTMSG") Addressable hCryptMsg, @C("DWORD") int dwParamType, @C("DWORD") int dwIndex, @C("void*") Addressable pvData, @C("DWORD*") Addressable pcbData) {
        try {
            return (int)cfapi_h$constants$53.CryptMsgGetParam$MH().invokeExact(hCryptMsg.address(), dwParamType, dwIndex, pvData.address(), pcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgControl$MH() {
        return cfapi_h$constants$53.CryptMsgControl$MH();
    }
    public static @C("BOOL") int CryptMsgControl (@C("HCRYPTMSG") Addressable hCryptMsg, @C("DWORD") int dwFlags, @C("DWORD") int dwCtrlType, @C("void*") Addressable pvCtrlPara) {
        try {
            return (int)cfapi_h$constants$53.CryptMsgControl$MH().invokeExact(hCryptMsg.address(), dwFlags, dwCtrlType, pvCtrlPara.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgVerifyCountersignatureEncoded$MH() {
        return cfapi_h$constants$53.CryptMsgVerifyCountersignatureEncoded$MH();
    }
    public static @C("BOOL") int CryptMsgVerifyCountersignatureEncoded (@C("HCRYPTPROV_LEGACY") long hCryptProv, @C("DWORD") int dwEncodingType, @C("PBYTE") Addressable pbSignerInfo, @C("DWORD") int cbSignerInfo, @C("PBYTE") Addressable pbSignerInfoCountersignature, @C("DWORD") int cbSignerInfoCountersignature, @C("PCERT_INFO") Addressable pciCountersigner) {
        try {
            return (int)cfapi_h$constants$53.CryptMsgVerifyCountersignatureEncoded$MH().invokeExact(hCryptProv, dwEncodingType, pbSignerInfo.address(), cbSignerInfo, pbSignerInfoCountersignature.address(), cbSignerInfoCountersignature, pciCountersigner.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgVerifyCountersignatureEncodedEx$MH() {
        return cfapi_h$constants$53.CryptMsgVerifyCountersignatureEncodedEx$MH();
    }
    public static @C("BOOL") int CryptMsgVerifyCountersignatureEncodedEx (@C("HCRYPTPROV_LEGACY") long hCryptProv, @C("DWORD") int dwEncodingType, @C("PBYTE") Addressable pbSignerInfo, @C("DWORD") int cbSignerInfo, @C("PBYTE") Addressable pbSignerInfoCountersignature, @C("DWORD") int cbSignerInfoCountersignature, @C("DWORD") int dwSignerType, @C("void*") Addressable pvSigner, @C("DWORD") int dwFlags, @C("void*") Addressable pvExtra) {
        try {
            return (int)cfapi_h$constants$53.CryptMsgVerifyCountersignatureEncodedEx$MH().invokeExact(hCryptProv, dwEncodingType, pbSignerInfo.address(), cbSignerInfo, pbSignerInfoCountersignature.address(), cbSignerInfoCountersignature, dwSignerType, pvSigner.address(), dwFlags, pvExtra.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgCountersign$MH() {
        return cfapi_h$constants$53.CryptMsgCountersign$MH();
    }
    public static @C("BOOL") int CryptMsgCountersign (@C("HCRYPTMSG") Addressable hCryptMsg, @C("DWORD") int dwIndex, @C("DWORD") int cCountersigners, @C("PCMSG_SIGNER_ENCODE_INFO") Addressable rgCountersigners) {
        try {
            return (int)cfapi_h$constants$53.CryptMsgCountersign$MH().invokeExact(hCryptMsg.address(), dwIndex, cCountersigners, rgCountersigners.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgCountersignEncoded$MH() {
        return cfapi_h$constants$53.CryptMsgCountersignEncoded$MH();
    }
    public static @C("BOOL") int CryptMsgCountersignEncoded (@C("DWORD") int dwEncodingType, @C("PBYTE") Addressable pbSignerInfo, @C("DWORD") int cbSignerInfo, @C("DWORD") int cCountersigners, @C("PCMSG_SIGNER_ENCODE_INFO") Addressable rgCountersigners, @C("PBYTE") Addressable pbCountersignature, @C("PDWORD") Addressable pcbCountersignature) {
        try {
            return (int)cfapi_h$constants$53.CryptMsgCountersignEncoded$MH().invokeExact(dwEncodingType, pbSignerInfo.address(), cbSignerInfo, cCountersigners, rgCountersigners.address(), pbCountersignature.address(), pcbCountersignature.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int KeyTypeOther() {
        return cfapi_h$constants$53.KeyTypeOther();
    }
    public static @C("int") int KeyTypeVirtualSmartCard() {
        return cfapi_h$constants$53.KeyTypeVirtualSmartCard();
    }
    public static @C("int") int KeyTypePhysicalSmartCard() {
        return cfapi_h$constants$53.KeyTypePhysicalSmartCard();
    }
    public static @C("int") int KeyTypePassport() {
        return cfapi_h$constants$53.KeyTypePassport();
    }
    public static @C("int") int KeyTypePassportRemote() {
        return cfapi_h$constants$53.KeyTypePassportRemote();
    }
    public static @C("int") int KeyTypePassportSmartCard() {
        return cfapi_h$constants$53.KeyTypePassportSmartCard();
    }
    public static @C("int") int KeyTypeHardware() {
        return cfapi_h$constants$53.KeyTypeHardware();
    }
    public static @C("int") int KeyTypeSoftware() {
        return cfapi_h$constants$53.KeyTypeSoftware();
    }
    public static @C("int") int KeyTypeSelfSigned() {
        return cfapi_h$constants$53.KeyTypeSelfSigned();
    }
    public static  MethodHandle CertOpenStore$MH() {
        return cfapi_h$constants$54.CertOpenStore$MH();
    }
    public static @C("HCERTSTORE") MemoryAddress CertOpenStore (@C("LPCSTR") Addressable lpszStoreProvider, @C("DWORD") int dwEncodingType, @C("HCRYPTPROV_LEGACY") long hCryptProv, @C("DWORD") int dwFlags, @C("void*") Addressable pvPara) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertOpenStore$MH().invokeExact(lpszStoreProvider.address(), dwEncodingType, hCryptProv, dwFlags, pvPara.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertDuplicateStore$MH() {
        return cfapi_h$constants$54.CertDuplicateStore$MH();
    }
    public static @C("HCERTSTORE") MemoryAddress CertDuplicateStore (@C("HCERTSTORE") Addressable hCertStore) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertDuplicateStore$MH().invokeExact(hCertStore.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSaveStore$MH() {
        return cfapi_h$constants$54.CertSaveStore$MH();
    }
    public static @C("BOOL") int CertSaveStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwEncodingType, @C("DWORD") int dwSaveAs, @C("DWORD") int dwSaveTo, @C("void*") Addressable pvSaveToPara, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$54.CertSaveStore$MH().invokeExact(hCertStore.address(), dwEncodingType, dwSaveAs, dwSaveTo, pvSaveToPara.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCloseStore$MH() {
        return cfapi_h$constants$54.CertCloseStore$MH();
    }
    public static @C("BOOL") int CertCloseStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$54.CertCloseStore$MH().invokeExact(hCertStore.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetSubjectCertificateFromStore$MH() {
        return cfapi_h$constants$54.CertGetSubjectCertificateFromStore$MH();
    }
    public static @C("PCCERT_CONTEXT") MemoryAddress CertGetSubjectCertificateFromStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwCertEncodingType, @C("PCERT_INFO") Addressable pCertId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertGetSubjectCertificateFromStore$MH().invokeExact(hCertStore.address(), dwCertEncodingType, pCertId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumCertificatesInStore$MH() {
        return cfapi_h$constants$54.CertEnumCertificatesInStore$MH();
    }
    public static @C("PCCERT_CONTEXT") MemoryAddress CertEnumCertificatesInStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCERT_CONTEXT") Addressable pPrevCertContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertEnumCertificatesInStore$MH().invokeExact(hCertStore.address(), pPrevCertContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindCertificateInStore$MH() {
        return cfapi_h$constants$54.CertFindCertificateInStore$MH();
    }
    public static @C("PCCERT_CONTEXT") MemoryAddress CertFindCertificateInStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwCertEncodingType, @C("DWORD") int dwFindFlags, @C("DWORD") int dwFindType, @C("void*") Addressable pvFindPara, @C("PCCERT_CONTEXT") Addressable pPrevCertContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertFindCertificateInStore$MH().invokeExact(hCertStore.address(), dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara.address(), pPrevCertContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetIssuerCertificateFromStore$MH() {
        return cfapi_h$constants$54.CertGetIssuerCertificateFromStore$MH();
    }
    public static @C("PCCERT_CONTEXT") MemoryAddress CertGetIssuerCertificateFromStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCERT_CONTEXT") Addressable pSubjectContext, @C("PCCERT_CONTEXT") Addressable pPrevIssuerContext, @C("DWORD*") Addressable pdwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertGetIssuerCertificateFromStore$MH().invokeExact(hCertStore.address(), pSubjectContext.address(), pPrevIssuerContext.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertVerifySubjectCertificateContext$MH() {
        return cfapi_h$constants$54.CertVerifySubjectCertificateContext$MH();
    }
    public static @C("BOOL") int CertVerifySubjectCertificateContext (@C("PCCERT_CONTEXT") Addressable pSubject, @C("PCCERT_CONTEXT") Addressable pIssuer, @C("DWORD*") Addressable pdwFlags) {
        try {
            return (int)cfapi_h$constants$54.CertVerifySubjectCertificateContext$MH().invokeExact(pSubject.address(), pIssuer.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertDuplicateCertificateContext$MH() {
        return cfapi_h$constants$54.CertDuplicateCertificateContext$MH();
    }
    public static @C("PCCERT_CONTEXT") MemoryAddress CertDuplicateCertificateContext (@C("PCCERT_CONTEXT") Addressable pCertContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertDuplicateCertificateContext$MH().invokeExact(pCertContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCreateCertificateContext$MH() {
        return cfapi_h$constants$54.CertCreateCertificateContext$MH();
    }
    public static @C("PCCERT_CONTEXT") MemoryAddress CertCreateCertificateContext (@C("DWORD") int dwCertEncodingType, @C("const BYTE*") Addressable pbCertEncoded, @C("DWORD") int cbCertEncoded) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertCreateCertificateContext$MH().invokeExact(dwCertEncodingType, pbCertEncoded.address(), cbCertEncoded);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFreeCertificateContext$MH() {
        return cfapi_h$constants$54.CertFreeCertificateContext$MH();
    }
    public static @C("BOOL") int CertFreeCertificateContext (@C("PCCERT_CONTEXT") Addressable pCertContext) {
        try {
            return (int)cfapi_h$constants$54.CertFreeCertificateContext$MH().invokeExact(pCertContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSetCertificateContextProperty$MH() {
        return cfapi_h$constants$54.CertSetCertificateContextProperty$MH();
    }
    public static @C("BOOL") int CertSetCertificateContextProperty (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int dwPropId, @C("DWORD") int dwFlags, @C("void*") Addressable pvData) {
        try {
            return (int)cfapi_h$constants$54.CertSetCertificateContextProperty$MH().invokeExact(pCertContext.address(), dwPropId, dwFlags, pvData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetCertificateContextProperty$MH() {
        return cfapi_h$constants$54.CertGetCertificateContextProperty$MH();
    }
    public static @C("BOOL") int CertGetCertificateContextProperty (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int dwPropId, @C("void*") Addressable pvData, @C("DWORD*") Addressable pcbData) {
        try {
            return (int)cfapi_h$constants$54.CertGetCertificateContextProperty$MH().invokeExact(pCertContext.address(), dwPropId, pvData.address(), pcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumCertificateContextProperties$MH() {
        return cfapi_h$constants$54.CertEnumCertificateContextProperties$MH();
    }
    public static @C("DWORD") int CertEnumCertificateContextProperties (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int dwPropId) {
        try {
            return (int)cfapi_h$constants$54.CertEnumCertificateContextProperties$MH().invokeExact(pCertContext.address(), dwPropId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCreateCTLEntryFromCertificateContextProperties$MH() {
        return cfapi_h$constants$54.CertCreateCTLEntryFromCertificateContextProperties$MH();
    }
    public static @C("BOOL") int CertCreateCTLEntryFromCertificateContextProperties (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int cOptAttr, @C("PCRYPT_ATTRIBUTE") Addressable rgOptAttr, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved, @C("PCTL_ENTRY") Addressable pCtlEntry, @C("DWORD*") Addressable pcbCtlEntry) {
        try {
            return (int)cfapi_h$constants$54.CertCreateCTLEntryFromCertificateContextProperties$MH().invokeExact(pCertContext.address(), cOptAttr, rgOptAttr.address(), dwFlags, pvReserved.address(), pCtlEntry.address(), pcbCtlEntry.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSetCertificateContextPropertiesFromCTLEntry$MH() {
        return cfapi_h$constants$54.CertSetCertificateContextPropertiesFromCTLEntry$MH();
    }
    public static @C("BOOL") int CertSetCertificateContextPropertiesFromCTLEntry (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("PCTL_ENTRY") Addressable pCtlEntry, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$54.CertSetCertificateContextPropertiesFromCTLEntry$MH().invokeExact(pCertContext.address(), pCtlEntry.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetCRLFromStore$MH() {
        return cfapi_h$constants$54.CertGetCRLFromStore$MH();
    }
    public static @C("PCCRL_CONTEXT") MemoryAddress CertGetCRLFromStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCERT_CONTEXT") Addressable pIssuerContext, @C("PCCRL_CONTEXT") Addressable pPrevCrlContext, @C("DWORD*") Addressable pdwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertGetCRLFromStore$MH().invokeExact(hCertStore.address(), pIssuerContext.address(), pPrevCrlContext.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumCRLsInStore$MH() {
        return cfapi_h$constants$54.CertEnumCRLsInStore$MH();
    }
    public static @C("PCCRL_CONTEXT") MemoryAddress CertEnumCRLsInStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCRL_CONTEXT") Addressable pPrevCrlContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertEnumCRLsInStore$MH().invokeExact(hCertStore.address(), pPrevCrlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindCRLInStore$MH() {
        return cfapi_h$constants$54.CertFindCRLInStore$MH();
    }
    public static @C("PCCRL_CONTEXT") MemoryAddress CertFindCRLInStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwCertEncodingType, @C("DWORD") int dwFindFlags, @C("DWORD") int dwFindType, @C("void*") Addressable pvFindPara, @C("PCCRL_CONTEXT") Addressable pPrevCrlContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertFindCRLInStore$MH().invokeExact(hCertStore.address(), dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara.address(), pPrevCrlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertDuplicateCRLContext$MH() {
        return cfapi_h$constants$54.CertDuplicateCRLContext$MH();
    }
    public static @C("PCCRL_CONTEXT") MemoryAddress CertDuplicateCRLContext (@C("PCCRL_CONTEXT") Addressable pCrlContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertDuplicateCRLContext$MH().invokeExact(pCrlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCreateCRLContext$MH() {
        return cfapi_h$constants$54.CertCreateCRLContext$MH();
    }
    public static @C("PCCRL_CONTEXT") MemoryAddress CertCreateCRLContext (@C("DWORD") int dwCertEncodingType, @C("const BYTE*") Addressable pbCrlEncoded, @C("DWORD") int cbCrlEncoded) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertCreateCRLContext$MH().invokeExact(dwCertEncodingType, pbCrlEncoded.address(), cbCrlEncoded);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFreeCRLContext$MH() {
        return cfapi_h$constants$54.CertFreeCRLContext$MH();
    }
    public static @C("BOOL") int CertFreeCRLContext (@C("PCCRL_CONTEXT") Addressable pCrlContext) {
        try {
            return (int)cfapi_h$constants$54.CertFreeCRLContext$MH().invokeExact(pCrlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSetCRLContextProperty$MH() {
        return cfapi_h$constants$54.CertSetCRLContextProperty$MH();
    }
    public static @C("BOOL") int CertSetCRLContextProperty (@C("PCCRL_CONTEXT") Addressable pCrlContext, @C("DWORD") int dwPropId, @C("DWORD") int dwFlags, @C("void*") Addressable pvData) {
        try {
            return (int)cfapi_h$constants$54.CertSetCRLContextProperty$MH().invokeExact(pCrlContext.address(), dwPropId, dwFlags, pvData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetCRLContextProperty$MH() {
        return cfapi_h$constants$54.CertGetCRLContextProperty$MH();
    }
    public static @C("BOOL") int CertGetCRLContextProperty (@C("PCCRL_CONTEXT") Addressable pCrlContext, @C("DWORD") int dwPropId, @C("void*") Addressable pvData, @C("DWORD*") Addressable pcbData) {
        try {
            return (int)cfapi_h$constants$54.CertGetCRLContextProperty$MH().invokeExact(pCrlContext.address(), dwPropId, pvData.address(), pcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumCRLContextProperties$MH() {
        return cfapi_h$constants$54.CertEnumCRLContextProperties$MH();
    }
    public static @C("DWORD") int CertEnumCRLContextProperties (@C("PCCRL_CONTEXT") Addressable pCrlContext, @C("DWORD") int dwPropId) {
        try {
            return (int)cfapi_h$constants$54.CertEnumCRLContextProperties$MH().invokeExact(pCrlContext.address(), dwPropId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindCertificateInCRL$MH() {
        return cfapi_h$constants$54.CertFindCertificateInCRL$MH();
    }
    public static @C("BOOL") int CertFindCertificateInCRL (@C("PCCERT_CONTEXT") Addressable pCert, @C("PCCRL_CONTEXT") Addressable pCrlContext, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved, @C("PCRL_ENTRY*") Addressable ppCrlEntry) {
        try {
            return (int)cfapi_h$constants$54.CertFindCertificateInCRL$MH().invokeExact(pCert.address(), pCrlContext.address(), dwFlags, pvReserved.address(), ppCrlEntry.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertIsValidCRLForCertificate$MH() {
        return cfapi_h$constants$54.CertIsValidCRLForCertificate$MH();
    }
    public static @C("BOOL") int CertIsValidCRLForCertificate (@C("PCCERT_CONTEXT") Addressable pCert, @C("PCCRL_CONTEXT") Addressable pCrl, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$54.CertIsValidCRLForCertificate$MH().invokeExact(pCert.address(), pCrl.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddEncodedCertificateToStore$MH() {
        return cfapi_h$constants$54.CertAddEncodedCertificateToStore$MH();
    }
    public static @C("BOOL") int CertAddEncodedCertificateToStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwCertEncodingType, @C("const BYTE*") Addressable pbCertEncoded, @C("DWORD") int cbCertEncoded, @C("DWORD") int dwAddDisposition, @C("PCCERT_CONTEXT*") Addressable ppCertContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddEncodedCertificateToStore$MH().invokeExact(hCertStore.address(), dwCertEncodingType, pbCertEncoded.address(), cbCertEncoded, dwAddDisposition, ppCertContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddCertificateContextToStore$MH() {
        return cfapi_h$constants$54.CertAddCertificateContextToStore$MH();
    }
    public static @C("BOOL") int CertAddCertificateContextToStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int dwAddDisposition, @C("PCCERT_CONTEXT*") Addressable ppStoreContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddCertificateContextToStore$MH().invokeExact(hCertStore.address(), pCertContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddSerializedElementToStore$MH() {
        return cfapi_h$constants$54.CertAddSerializedElementToStore$MH();
    }
    public static @C("BOOL") int CertAddSerializedElementToStore (@C("HCERTSTORE") Addressable hCertStore, @C("const BYTE*") Addressable pbElement, @C("DWORD") int cbElement, @C("DWORD") int dwAddDisposition, @C("DWORD") int dwFlags, @C("DWORD") int dwContextTypeFlags, @C("DWORD*") Addressable pdwContextType, @C("void**") Addressable ppvContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddSerializedElementToStore$MH().invokeExact(hCertStore.address(), pbElement.address(), cbElement, dwAddDisposition, dwFlags, dwContextTypeFlags, pdwContextType.address(), ppvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertDeleteCertificateFromStore$MH() {
        return cfapi_h$constants$54.CertDeleteCertificateFromStore$MH();
    }
    public static @C("BOOL") int CertDeleteCertificateFromStore (@C("PCCERT_CONTEXT") Addressable pCertContext) {
        try {
            return (int)cfapi_h$constants$54.CertDeleteCertificateFromStore$MH().invokeExact(pCertContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddEncodedCRLToStore$MH() {
        return cfapi_h$constants$54.CertAddEncodedCRLToStore$MH();
    }
    public static @C("BOOL") int CertAddEncodedCRLToStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwCertEncodingType, @C("const BYTE*") Addressable pbCrlEncoded, @C("DWORD") int cbCrlEncoded, @C("DWORD") int dwAddDisposition, @C("PCCRL_CONTEXT*") Addressable ppCrlContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddEncodedCRLToStore$MH().invokeExact(hCertStore.address(), dwCertEncodingType, pbCrlEncoded.address(), cbCrlEncoded, dwAddDisposition, ppCrlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddCRLContextToStore$MH() {
        return cfapi_h$constants$54.CertAddCRLContextToStore$MH();
    }
    public static @C("BOOL") int CertAddCRLContextToStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCRL_CONTEXT") Addressable pCrlContext, @C("DWORD") int dwAddDisposition, @C("PCCRL_CONTEXT*") Addressable ppStoreContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddCRLContextToStore$MH().invokeExact(hCertStore.address(), pCrlContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertDeleteCRLFromStore$MH() {
        return cfapi_h$constants$54.CertDeleteCRLFromStore$MH();
    }
    public static @C("BOOL") int CertDeleteCRLFromStore (@C("PCCRL_CONTEXT") Addressable pCrlContext) {
        try {
            return (int)cfapi_h$constants$54.CertDeleteCRLFromStore$MH().invokeExact(pCrlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSerializeCertificateStoreElement$MH() {
        return cfapi_h$constants$54.CertSerializeCertificateStoreElement$MH();
    }
    public static @C("BOOL") int CertSerializeCertificateStoreElement (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbElement, @C("DWORD*") Addressable pcbElement) {
        try {
            return (int)cfapi_h$constants$54.CertSerializeCertificateStoreElement$MH().invokeExact(pCertContext.address(), dwFlags, pbElement.address(), pcbElement.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSerializeCRLStoreElement$MH() {
        return cfapi_h$constants$54.CertSerializeCRLStoreElement$MH();
    }
    public static @C("BOOL") int CertSerializeCRLStoreElement (@C("PCCRL_CONTEXT") Addressable pCrlContext, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbElement, @C("DWORD*") Addressable pcbElement) {
        try {
            return (int)cfapi_h$constants$54.CertSerializeCRLStoreElement$MH().invokeExact(pCrlContext.address(), dwFlags, pbElement.address(), pcbElement.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertDuplicateCTLContext$MH() {
        return cfapi_h$constants$54.CertDuplicateCTLContext$MH();
    }
    public static @C("PCCTL_CONTEXT") MemoryAddress CertDuplicateCTLContext (@C("PCCTL_CONTEXT") Addressable pCtlContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertDuplicateCTLContext$MH().invokeExact(pCtlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCreateCTLContext$MH() {
        return cfapi_h$constants$54.CertCreateCTLContext$MH();
    }
    public static @C("PCCTL_CONTEXT") MemoryAddress CertCreateCTLContext (@C("DWORD") int dwMsgAndCertEncodingType, @C("const BYTE*") Addressable pbCtlEncoded, @C("DWORD") int cbCtlEncoded) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertCreateCTLContext$MH().invokeExact(dwMsgAndCertEncodingType, pbCtlEncoded.address(), cbCtlEncoded);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFreeCTLContext$MH() {
        return cfapi_h$constants$54.CertFreeCTLContext$MH();
    }
    public static @C("BOOL") int CertFreeCTLContext (@C("PCCTL_CONTEXT") Addressable pCtlContext) {
        try {
            return (int)cfapi_h$constants$54.CertFreeCTLContext$MH().invokeExact(pCtlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSetCTLContextProperty$MH() {
        return cfapi_h$constants$54.CertSetCTLContextProperty$MH();
    }
    public static @C("BOOL") int CertSetCTLContextProperty (@C("PCCTL_CONTEXT") Addressable pCtlContext, @C("DWORD") int dwPropId, @C("DWORD") int dwFlags, @C("void*") Addressable pvData) {
        try {
            return (int)cfapi_h$constants$54.CertSetCTLContextProperty$MH().invokeExact(pCtlContext.address(), dwPropId, dwFlags, pvData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetCTLContextProperty$MH() {
        return cfapi_h$constants$54.CertGetCTLContextProperty$MH();
    }
    public static @C("BOOL") int CertGetCTLContextProperty (@C("PCCTL_CONTEXT") Addressable pCtlContext, @C("DWORD") int dwPropId, @C("void*") Addressable pvData, @C("DWORD*") Addressable pcbData) {
        try {
            return (int)cfapi_h$constants$54.CertGetCTLContextProperty$MH().invokeExact(pCtlContext.address(), dwPropId, pvData.address(), pcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumCTLContextProperties$MH() {
        return cfapi_h$constants$54.CertEnumCTLContextProperties$MH();
    }
    public static @C("DWORD") int CertEnumCTLContextProperties (@C("PCCTL_CONTEXT") Addressable pCtlContext, @C("DWORD") int dwPropId) {
        try {
            return (int)cfapi_h$constants$54.CertEnumCTLContextProperties$MH().invokeExact(pCtlContext.address(), dwPropId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumCTLsInStore$MH() {
        return cfapi_h$constants$54.CertEnumCTLsInStore$MH();
    }
    public static @C("PCCTL_CONTEXT") MemoryAddress CertEnumCTLsInStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCTL_CONTEXT") Addressable pPrevCtlContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertEnumCTLsInStore$MH().invokeExact(hCertStore.address(), pPrevCtlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindSubjectInCTL$MH() {
        return cfapi_h$constants$54.CertFindSubjectInCTL$MH();
    }
    public static @C("PCTL_ENTRY") MemoryAddress CertFindSubjectInCTL (@C("DWORD") int dwEncodingType, @C("DWORD") int dwSubjectType, @C("void*") Addressable pvSubject, @C("PCCTL_CONTEXT") Addressable pCtlContext, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertFindSubjectInCTL$MH().invokeExact(dwEncodingType, dwSubjectType, pvSubject.address(), pCtlContext.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindCTLInStore$MH() {
        return cfapi_h$constants$54.CertFindCTLInStore$MH();
    }
    public static @C("PCCTL_CONTEXT") MemoryAddress CertFindCTLInStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwMsgAndCertEncodingType, @C("DWORD") int dwFindFlags, @C("DWORD") int dwFindType, @C("void*") Addressable pvFindPara, @C("PCCTL_CONTEXT") Addressable pPrevCtlContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertFindCTLInStore$MH().invokeExact(hCertStore.address(), dwMsgAndCertEncodingType, dwFindFlags, dwFindType, pvFindPara.address(), pPrevCtlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddEncodedCTLToStore$MH() {
        return cfapi_h$constants$54.CertAddEncodedCTLToStore$MH();
    }
    public static @C("BOOL") int CertAddEncodedCTLToStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwMsgAndCertEncodingType, @C("const BYTE*") Addressable pbCtlEncoded, @C("DWORD") int cbCtlEncoded, @C("DWORD") int dwAddDisposition, @C("PCCTL_CONTEXT*") Addressable ppCtlContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddEncodedCTLToStore$MH().invokeExact(hCertStore.address(), dwMsgAndCertEncodingType, pbCtlEncoded.address(), cbCtlEncoded, dwAddDisposition, ppCtlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddCTLContextToStore$MH() {
        return cfapi_h$constants$54.CertAddCTLContextToStore$MH();
    }
    public static @C("BOOL") int CertAddCTLContextToStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCTL_CONTEXT") Addressable pCtlContext, @C("DWORD") int dwAddDisposition, @C("PCCTL_CONTEXT*") Addressable ppStoreContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddCTLContextToStore$MH().invokeExact(hCertStore.address(), pCtlContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSerializeCTLStoreElement$MH() {
        return cfapi_h$constants$54.CertSerializeCTLStoreElement$MH();
    }
    public static @C("BOOL") int CertSerializeCTLStoreElement (@C("PCCTL_CONTEXT") Addressable pCtlContext, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbElement, @C("DWORD*") Addressable pcbElement) {
        try {
            return (int)cfapi_h$constants$54.CertSerializeCTLStoreElement$MH().invokeExact(pCtlContext.address(), dwFlags, pbElement.address(), pcbElement.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertDeleteCTLFromStore$MH() {
        return cfapi_h$constants$54.CertDeleteCTLFromStore$MH();
    }
    public static @C("BOOL") int CertDeleteCTLFromStore (@C("PCCTL_CONTEXT") Addressable pCtlContext) {
        try {
            return (int)cfapi_h$constants$54.CertDeleteCTLFromStore$MH().invokeExact(pCtlContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddCertificateLinkToStore$MH() {
        return cfapi_h$constants$54.CertAddCertificateLinkToStore$MH();
    }
    public static @C("BOOL") int CertAddCertificateLinkToStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int dwAddDisposition, @C("PCCERT_CONTEXT*") Addressable ppStoreContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddCertificateLinkToStore$MH().invokeExact(hCertStore.address(), pCertContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddCRLLinkToStore$MH() {
        return cfapi_h$constants$54.CertAddCRLLinkToStore$MH();
    }
    public static @C("BOOL") int CertAddCRLLinkToStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCRL_CONTEXT") Addressable pCrlContext, @C("DWORD") int dwAddDisposition, @C("PCCRL_CONTEXT*") Addressable ppStoreContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddCRLLinkToStore$MH().invokeExact(hCertStore.address(), pCrlContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddCTLLinkToStore$MH() {
        return cfapi_h$constants$54.CertAddCTLLinkToStore$MH();
    }
    public static @C("BOOL") int CertAddCTLLinkToStore (@C("HCERTSTORE") Addressable hCertStore, @C("PCCTL_CONTEXT") Addressable pCtlContext, @C("DWORD") int dwAddDisposition, @C("PCCTL_CONTEXT*") Addressable ppStoreContext) {
        try {
            return (int)cfapi_h$constants$54.CertAddCTLLinkToStore$MH().invokeExact(hCertStore.address(), pCtlContext.address(), dwAddDisposition, ppStoreContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddStoreToCollection$MH() {
        return cfapi_h$constants$54.CertAddStoreToCollection$MH();
    }
    public static @C("BOOL") int CertAddStoreToCollection (@C("HCERTSTORE") Addressable hCollectionStore, @C("HCERTSTORE") Addressable hSiblingStore, @C("DWORD") int dwUpdateFlags, @C("DWORD") int dwPriority) {
        try {
            return (int)cfapi_h$constants$54.CertAddStoreToCollection$MH().invokeExact(hCollectionStore.address(), hSiblingStore.address(), dwUpdateFlags, dwPriority);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertRemoveStoreFromCollection$MH() {
        return cfapi_h$constants$54.CertRemoveStoreFromCollection$MH();
    }
    public static void CertRemoveStoreFromCollection (@C("HCERTSTORE") Addressable hCollectionStore, @C("HCERTSTORE") Addressable hSiblingStore) {
        try {
            cfapi_h$constants$54.CertRemoveStoreFromCollection$MH().invokeExact(hCollectionStore.address(), hSiblingStore.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertControlStore$MH() {
        return cfapi_h$constants$54.CertControlStore$MH();
    }
    public static @C("BOOL") int CertControlStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwFlags, @C("DWORD") int dwCtrlType, @C("void*") Addressable pvCtrlPara) {
        try {
            return (int)cfapi_h$constants$54.CertControlStore$MH().invokeExact(hCertStore.address(), dwFlags, dwCtrlType, pvCtrlPara.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSetStoreProperty$MH() {
        return cfapi_h$constants$54.CertSetStoreProperty$MH();
    }
    public static @C("BOOL") int CertSetStoreProperty (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwPropId, @C("DWORD") int dwFlags, @C("void*") Addressable pvData) {
        try {
            return (int)cfapi_h$constants$54.CertSetStoreProperty$MH().invokeExact(hCertStore.address(), dwPropId, dwFlags, pvData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetStoreProperty$MH() {
        return cfapi_h$constants$54.CertGetStoreProperty$MH();
    }
    public static @C("BOOL") int CertGetStoreProperty (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwPropId, @C("void*") Addressable pvData, @C("DWORD*") Addressable pcbData) {
        try {
            return (int)cfapi_h$constants$54.CertGetStoreProperty$MH().invokeExact(hCertStore.address(), dwPropId, pvData.address(), pcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCreateContext$MH() {
        return cfapi_h$constants$54.CertCreateContext$MH();
    }
    public static @C("void*") MemoryAddress CertCreateContext (@C("DWORD") int dwContextType, @C("DWORD") int dwEncodingType, @C("const BYTE*") Addressable pbEncoded, @C("DWORD") int cbEncoded, @C("DWORD") int dwFlags, @C("PCERT_CREATE_CONTEXT_PARA") Addressable pCreatePara) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertCreateContext$MH().invokeExact(dwContextType, dwEncodingType, pbEncoded.address(), cbEncoded, dwFlags, pCreatePara.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertRegisterSystemStore$MH() {
        return cfapi_h$constants$54.CertRegisterSystemStore$MH();
    }
    public static @C("BOOL") int CertRegisterSystemStore (@C("void*") Addressable pvSystemStore, @C("DWORD") int dwFlags, @C("PCERT_SYSTEM_STORE_INFO") Addressable pStoreInfo, @C("void*") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$54.CertRegisterSystemStore$MH().invokeExact(pvSystemStore.address(), dwFlags, pStoreInfo.address(), pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertRegisterPhysicalStore$MH() {
        return cfapi_h$constants$54.CertRegisterPhysicalStore$MH();
    }
    public static @C("BOOL") int CertRegisterPhysicalStore (@C("void*") Addressable pvSystemStore, @C("DWORD") int dwFlags, @C("LPCWSTR") Addressable pwszStoreName, @C("PCERT_PHYSICAL_STORE_INFO") Addressable pStoreInfo, @C("void*") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$54.CertRegisterPhysicalStore$MH().invokeExact(pvSystemStore.address(), dwFlags, pwszStoreName.address(), pStoreInfo.address(), pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertUnregisterSystemStore$MH() {
        return cfapi_h$constants$54.CertUnregisterSystemStore$MH();
    }
    public static @C("BOOL") int CertUnregisterSystemStore (@C("void*") Addressable pvSystemStore, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$54.CertUnregisterSystemStore$MH().invokeExact(pvSystemStore.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertUnregisterPhysicalStore$MH() {
        return cfapi_h$constants$54.CertUnregisterPhysicalStore$MH();
    }
    public static @C("BOOL") int CertUnregisterPhysicalStore (@C("void*") Addressable pvSystemStore, @C("DWORD") int dwFlags, @C("LPCWSTR") Addressable pwszStoreName) {
        try {
            return (int)cfapi_h$constants$54.CertUnregisterPhysicalStore$MH().invokeExact(pvSystemStore.address(), dwFlags, pwszStoreName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumSystemStoreLocation$MH() {
        return cfapi_h$constants$54.CertEnumSystemStoreLocation$MH();
    }
    public static @C("BOOL") int CertEnumSystemStoreLocation (@C("DWORD") int dwFlags, @C("void*") Addressable pvArg, @C("PFN_CERT_ENUM_SYSTEM_STORE_LOCATION") Addressable pfnEnum) {
        try {
            return (int)cfapi_h$constants$54.CertEnumSystemStoreLocation$MH().invokeExact(dwFlags, pvArg.address(), pfnEnum.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumSystemStore$MH() {
        return cfapi_h$constants$54.CertEnumSystemStore$MH();
    }
    public static @C("BOOL") int CertEnumSystemStore (@C("DWORD") int dwFlags, @C("void*") Addressable pvSystemStoreLocationPara, @C("void*") Addressable pvArg, @C("PFN_CERT_ENUM_SYSTEM_STORE") Addressable pfnEnum) {
        try {
            return (int)cfapi_h$constants$54.CertEnumSystemStore$MH().invokeExact(dwFlags, pvSystemStoreLocationPara.address(), pvArg.address(), pfnEnum.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumPhysicalStore$MH() {
        return cfapi_h$constants$54.CertEnumPhysicalStore$MH();
    }
    public static @C("BOOL") int CertEnumPhysicalStore (@C("void*") Addressable pvSystemStore, @C("DWORD") int dwFlags, @C("void*") Addressable pvArg, @C("PFN_CERT_ENUM_PHYSICAL_STORE") Addressable pfnEnum) {
        try {
            return (int)cfapi_h$constants$54.CertEnumPhysicalStore$MH().invokeExact(pvSystemStore.address(), dwFlags, pvArg.address(), pfnEnum.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetEnhancedKeyUsage$MH() {
        return cfapi_h$constants$54.CertGetEnhancedKeyUsage$MH();
    }
    public static @C("BOOL") int CertGetEnhancedKeyUsage (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int dwFlags, @C("PCERT_ENHKEY_USAGE") Addressable pUsage, @C("DWORD*") Addressable pcbUsage) {
        try {
            return (int)cfapi_h$constants$54.CertGetEnhancedKeyUsage$MH().invokeExact(pCertContext.address(), dwFlags, pUsage.address(), pcbUsage.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSetEnhancedKeyUsage$MH() {
        return cfapi_h$constants$54.CertSetEnhancedKeyUsage$MH();
    }
    public static @C("BOOL") int CertSetEnhancedKeyUsage (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("PCERT_ENHKEY_USAGE") Addressable pUsage) {
        try {
            return (int)cfapi_h$constants$54.CertSetEnhancedKeyUsage$MH().invokeExact(pCertContext.address(), pUsage.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddEnhancedKeyUsageIdentifier$MH() {
        return cfapi_h$constants$54.CertAddEnhancedKeyUsageIdentifier$MH();
    }
    public static @C("BOOL") int CertAddEnhancedKeyUsageIdentifier (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("LPCSTR") Addressable pszUsageIdentifier) {
        try {
            return (int)cfapi_h$constants$54.CertAddEnhancedKeyUsageIdentifier$MH().invokeExact(pCertContext.address(), pszUsageIdentifier.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertRemoveEnhancedKeyUsageIdentifier$MH() {
        return cfapi_h$constants$54.CertRemoveEnhancedKeyUsageIdentifier$MH();
    }
    public static @C("BOOL") int CertRemoveEnhancedKeyUsageIdentifier (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("LPCSTR") Addressable pszUsageIdentifier) {
        try {
            return (int)cfapi_h$constants$54.CertRemoveEnhancedKeyUsageIdentifier$MH().invokeExact(pCertContext.address(), pszUsageIdentifier.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetValidUsages$MH() {
        return cfapi_h$constants$54.CertGetValidUsages$MH();
    }
    public static @C("BOOL") int CertGetValidUsages (@C("DWORD") int cCerts, @C("PCCERT_CONTEXT*") Addressable rghCerts, @C("int*") Addressable cNumOIDs, @C("LPSTR*") Addressable rghOIDs, @C("DWORD*") Addressable pcbOIDs) {
        try {
            return (int)cfapi_h$constants$54.CertGetValidUsages$MH().invokeExact(cCerts, rghCerts.address(), cNumOIDs.address(), rghOIDs.address(), pcbOIDs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgGetAndVerifySigner$MH() {
        return cfapi_h$constants$54.CryptMsgGetAndVerifySigner$MH();
    }
    public static @C("BOOL") int CryptMsgGetAndVerifySigner (@C("HCRYPTMSG") Addressable hCryptMsg, @C("DWORD") int cSignerStore, @C("HCERTSTORE*") Addressable rghSignerStore, @C("DWORD") int dwFlags, @C("PCCERT_CONTEXT*") Addressable ppSigner, @C("DWORD*") Addressable pdwSignerIndex) {
        try {
            return (int)cfapi_h$constants$54.CryptMsgGetAndVerifySigner$MH().invokeExact(hCryptMsg.address(), cSignerStore, rghSignerStore.address(), dwFlags, ppSigner.address(), pdwSignerIndex.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgSignCTL$MH() {
        return cfapi_h$constants$54.CryptMsgSignCTL$MH();
    }
    public static @C("BOOL") int CryptMsgSignCTL (@C("DWORD") int dwMsgEncodingType, @C("BYTE*") Addressable pbCtlContent, @C("DWORD") int cbCtlContent, @C("PCMSG_SIGNED_ENCODE_INFO") Addressable pSignInfo, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbEncoded, @C("DWORD*") Addressable pcbEncoded) {
        try {
            return (int)cfapi_h$constants$54.CryptMsgSignCTL$MH().invokeExact(dwMsgEncodingType, pbCtlContent.address(), cbCtlContent, pSignInfo.address(), dwFlags, pbEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMsgEncodeAndSignCTL$MH() {
        return cfapi_h$constants$54.CryptMsgEncodeAndSignCTL$MH();
    }
    public static @C("BOOL") int CryptMsgEncodeAndSignCTL (@C("DWORD") int dwMsgEncodingType, @C("PCTL_INFO") Addressable pCtlInfo, @C("PCMSG_SIGNED_ENCODE_INFO") Addressable pSignInfo, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbEncoded, @C("DWORD*") Addressable pcbEncoded) {
        try {
            return (int)cfapi_h$constants$54.CryptMsgEncodeAndSignCTL$MH().invokeExact(dwMsgEncodingType, pCtlInfo.address(), pSignInfo.address(), dwFlags, pbEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindSubjectInSortedCTL$MH() {
        return cfapi_h$constants$54.CertFindSubjectInSortedCTL$MH();
    }
    public static @C("BOOL") int CertFindSubjectInSortedCTL (@C("PCRYPT_DATA_BLOB") Addressable pSubjectIdentifier, @C("PCCTL_CONTEXT") Addressable pCtlContext, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved, @C("PCRYPT_DER_BLOB") Addressable pEncodedAttributes) {
        try {
            return (int)cfapi_h$constants$54.CertFindSubjectInSortedCTL$MH().invokeExact(pSubjectIdentifier.address(), pCtlContext.address(), dwFlags, pvReserved.address(), pEncodedAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertEnumSubjectInSortedCTL$MH() {
        return cfapi_h$constants$54.CertEnumSubjectInSortedCTL$MH();
    }
    public static @C("BOOL") int CertEnumSubjectInSortedCTL (@C("PCCTL_CONTEXT") Addressable pCtlContext, @C("void**") Addressable ppvNextSubject, @C("PCRYPT_DER_BLOB") Addressable pSubjectIdentifier, @C("PCRYPT_DER_BLOB") Addressable pEncodedAttributes) {
        try {
            return (int)cfapi_h$constants$54.CertEnumSubjectInSortedCTL$MH().invokeExact(pCtlContext.address(), ppvNextSubject.address(), pSubjectIdentifier.address(), pEncodedAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertVerifyCTLUsage$MH() {
        return cfapi_h$constants$54.CertVerifyCTLUsage$MH();
    }
    public static @C("BOOL") int CertVerifyCTLUsage (@C("DWORD") int dwEncodingType, @C("DWORD") int dwSubjectType, @C("void*") Addressable pvSubject, @C("PCTL_USAGE") Addressable pSubjectUsage, @C("DWORD") int dwFlags, @C("PCTL_VERIFY_USAGE_PARA") Addressable pVerifyUsagePara, @C("PCTL_VERIFY_USAGE_STATUS") Addressable pVerifyUsageStatus) {
        try {
            return (int)cfapi_h$constants$54.CertVerifyCTLUsage$MH().invokeExact(dwEncodingType, dwSubjectType, pvSubject.address(), pSubjectUsage.address(), dwFlags, pVerifyUsagePara.address(), pVerifyUsageStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertVerifyRevocation$MH() {
        return cfapi_h$constants$54.CertVerifyRevocation$MH();
    }
    public static @C("BOOL") int CertVerifyRevocation (@C("DWORD") int dwEncodingType, @C("DWORD") int dwRevType, @C("DWORD") int cContext, @C("PVOID[]") Addressable rgpvContext, @C("DWORD") int dwFlags, @C("PCERT_REVOCATION_PARA") Addressable pRevPara, @C("PCERT_REVOCATION_STATUS") Addressable pRevStatus) {
        try {
            return (int)cfapi_h$constants$54.CertVerifyRevocation$MH().invokeExact(dwEncodingType, dwRevType, cContext, rgpvContext.address(), dwFlags, pRevPara.address(), pRevStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCompareIntegerBlob$MH() {
        return cfapi_h$constants$54.CertCompareIntegerBlob$MH();
    }
    public static @C("BOOL") int CertCompareIntegerBlob (@C("PCRYPT_INTEGER_BLOB") Addressable pInt1, @C("PCRYPT_INTEGER_BLOB") Addressable pInt2) {
        try {
            return (int)cfapi_h$constants$54.CertCompareIntegerBlob$MH().invokeExact(pInt1.address(), pInt2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCompareCertificate$MH() {
        return cfapi_h$constants$54.CertCompareCertificate$MH();
    }
    public static @C("BOOL") int CertCompareCertificate (@C("DWORD") int dwCertEncodingType, @C("PCERT_INFO") Addressable pCertId1, @C("PCERT_INFO") Addressable pCertId2) {
        try {
            return (int)cfapi_h$constants$54.CertCompareCertificate$MH().invokeExact(dwCertEncodingType, pCertId1.address(), pCertId2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCompareCertificateName$MH() {
        return cfapi_h$constants$54.CertCompareCertificateName$MH();
    }
    public static @C("BOOL") int CertCompareCertificateName (@C("DWORD") int dwCertEncodingType, @C("PCERT_NAME_BLOB") Addressable pCertName1, @C("PCERT_NAME_BLOB") Addressable pCertName2) {
        try {
            return (int)cfapi_h$constants$54.CertCompareCertificateName$MH().invokeExact(dwCertEncodingType, pCertName1.address(), pCertName2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertIsRDNAttrsInCertificateName$MH() {
        return cfapi_h$constants$54.CertIsRDNAttrsInCertificateName$MH();
    }
    public static @C("BOOL") int CertIsRDNAttrsInCertificateName (@C("DWORD") int dwCertEncodingType, @C("DWORD") int dwFlags, @C("PCERT_NAME_BLOB") Addressable pCertName, @C("PCERT_RDN") Addressable pRDN) {
        try {
            return (int)cfapi_h$constants$54.CertIsRDNAttrsInCertificateName$MH().invokeExact(dwCertEncodingType, dwFlags, pCertName.address(), pRDN.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertComparePublicKeyInfo$MH() {
        return cfapi_h$constants$54.CertComparePublicKeyInfo$MH();
    }
    public static @C("BOOL") int CertComparePublicKeyInfo (@C("DWORD") int dwCertEncodingType, @C("PCERT_PUBLIC_KEY_INFO") Addressable pPublicKey1, @C("PCERT_PUBLIC_KEY_INFO") Addressable pPublicKey2) {
        try {
            return (int)cfapi_h$constants$54.CertComparePublicKeyInfo$MH().invokeExact(dwCertEncodingType, pPublicKey1.address(), pPublicKey2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetPublicKeyLength$MH() {
        return cfapi_h$constants$54.CertGetPublicKeyLength$MH();
    }
    public static @C("DWORD") int CertGetPublicKeyLength (@C("DWORD") int dwCertEncodingType, @C("PCERT_PUBLIC_KEY_INFO") Addressable pPublicKey) {
        try {
            return (int)cfapi_h$constants$54.CertGetPublicKeyLength$MH().invokeExact(dwCertEncodingType, pPublicKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifyCertificateSignature$MH() {
        return cfapi_h$constants$54.CryptVerifyCertificateSignature$MH();
    }
    public static @C("BOOL") int CryptVerifyCertificateSignature (@C("HCRYPTPROV_LEGACY") long hCryptProv, @C("DWORD") int dwCertEncodingType, @C("const BYTE*") Addressable pbEncoded, @C("DWORD") int cbEncoded, @C("PCERT_PUBLIC_KEY_INFO") Addressable pPublicKey) {
        try {
            return (int)cfapi_h$constants$54.CryptVerifyCertificateSignature$MH().invokeExact(hCryptProv, dwCertEncodingType, pbEncoded.address(), cbEncoded, pPublicKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifyCertificateSignatureEx$MH() {
        return cfapi_h$constants$54.CryptVerifyCertificateSignatureEx$MH();
    }
    public static @C("BOOL") int CryptVerifyCertificateSignatureEx (@C("HCRYPTPROV_LEGACY") long hCryptProv, @C("DWORD") int dwCertEncodingType, @C("DWORD") int dwSubjectType, @C("void*") Addressable pvSubject, @C("DWORD") int dwIssuerType, @C("void*") Addressable pvIssuer, @C("DWORD") int dwFlags, @C("void*") Addressable pvExtra) {
        try {
            return (int)cfapi_h$constants$54.CryptVerifyCertificateSignatureEx$MH().invokeExact(hCryptProv, dwCertEncodingType, dwSubjectType, pvSubject.address(), dwIssuerType, pvIssuer.address(), dwFlags, pvExtra.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertIsStrongHashToSign$MH() {
        return cfapi_h$constants$54.CertIsStrongHashToSign$MH();
    }
    public static @C("BOOL") int CertIsStrongHashToSign (@C("PCCERT_STRONG_SIGN_PARA") Addressable pStrongSignPara, @C("LPCWSTR") Addressable pwszCNGHashAlgid, @C("PCCERT_CONTEXT") Addressable pSigningCert) {
        try {
            return (int)cfapi_h$constants$54.CertIsStrongHashToSign$MH().invokeExact(pStrongSignPara.address(), pwszCNGHashAlgid.address(), pSigningCert.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptHashToBeSigned$MH() {
        return cfapi_h$constants$54.CryptHashToBeSigned$MH();
    }
    public static @C("BOOL") int CryptHashToBeSigned (@C("HCRYPTPROV_LEGACY") long hCryptProv, @C("DWORD") int dwCertEncodingType, @C("const BYTE*") Addressable pbEncoded, @C("DWORD") int cbEncoded, @C("BYTE*") Addressable pbComputedHash, @C("DWORD*") Addressable pcbComputedHash) {
        try {
            return (int)cfapi_h$constants$54.CryptHashToBeSigned$MH().invokeExact(hCryptProv, dwCertEncodingType, pbEncoded.address(), cbEncoded, pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptHashCertificate$MH() {
        return cfapi_h$constants$54.CryptHashCertificate$MH();
    }
    public static @C("BOOL") int CryptHashCertificate (@C("HCRYPTPROV_LEGACY") long hCryptProv, @C("ALG_ID") int Algid, @C("DWORD") int dwFlags, @C("const BYTE*") Addressable pbEncoded, @C("DWORD") int cbEncoded, @C("BYTE*") Addressable pbComputedHash, @C("DWORD*") Addressable pcbComputedHash) {
        try {
            return (int)cfapi_h$constants$54.CryptHashCertificate$MH().invokeExact(hCryptProv, Algid, dwFlags, pbEncoded.address(), cbEncoded, pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptHashCertificate2$MH() {
        return cfapi_h$constants$54.CryptHashCertificate2$MH();
    }
    public static @C("BOOL") int CryptHashCertificate2 (@C("LPCWSTR") Addressable pwszCNGHashAlgid, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved, @C("const BYTE*") Addressable pbEncoded, @C("DWORD") int cbEncoded, @C("BYTE*") Addressable pbComputedHash, @C("DWORD*") Addressable pcbComputedHash) {
        try {
            return (int)cfapi_h$constants$54.CryptHashCertificate2$MH().invokeExact(pwszCNGHashAlgid.address(), dwFlags, pvReserved.address(), pbEncoded.address(), cbEncoded, pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSignCertificate$MH() {
        return cfapi_h$constants$54.CryptSignCertificate$MH();
    }
    public static @C("BOOL") int CryptSignCertificate (@C("HCRYPTPROV_OR_NCRYPT_KEY_HANDLE") long hCryptProvOrNCryptKey, @C("DWORD") int dwKeySpec, @C("DWORD") int dwCertEncodingType, @C("const BYTE*") Addressable pbEncodedToBeSigned, @C("DWORD") int cbEncodedToBeSigned, @C("PCRYPT_ALGORITHM_IDENTIFIER") Addressable pSignatureAlgorithm, @C("void*") Addressable pvHashAuxInfo, @C("BYTE*") Addressable pbSignature, @C("DWORD*") Addressable pcbSignature) {
        try {
            return (int)cfapi_h$constants$54.CryptSignCertificate$MH().invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pbEncodedToBeSigned.address(), cbEncodedToBeSigned, pSignatureAlgorithm.address(), pvHashAuxInfo.address(), pbSignature.address(), pcbSignature.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSignAndEncodeCertificate$MH() {
        return cfapi_h$constants$54.CryptSignAndEncodeCertificate$MH();
    }
    public static @C("BOOL") int CryptSignAndEncodeCertificate (@C("HCRYPTPROV_OR_NCRYPT_KEY_HANDLE") long hCryptProvOrNCryptKey, @C("DWORD") int dwKeySpec, @C("DWORD") int dwCertEncodingType, @C("LPCSTR") Addressable lpszStructType, @C("void*") Addressable pvStructInfo, @C("PCRYPT_ALGORITHM_IDENTIFIER") Addressable pSignatureAlgorithm, @C("void*") Addressable pvHashAuxInfo, @C("BYTE*") Addressable pbEncoded, @C("DWORD*") Addressable pcbEncoded) {
        try {
            return (int)cfapi_h$constants$54.CryptSignAndEncodeCertificate$MH().invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, lpszStructType.address(), pvStructInfo.address(), pSignatureAlgorithm.address(), pvHashAuxInfo.address(), pbEncoded.address(), pcbEncoded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertVerifyTimeValidity$MH() {
        return cfapi_h$constants$54.CertVerifyTimeValidity$MH();
    }
    public static @C("LONG") int CertVerifyTimeValidity (@C("LPFILETIME") Addressable pTimeToVerify, @C("PCERT_INFO") Addressable pCertInfo) {
        try {
            return (int)cfapi_h$constants$54.CertVerifyTimeValidity$MH().invokeExact(pTimeToVerify.address(), pCertInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertVerifyCRLTimeValidity$MH() {
        return cfapi_h$constants$54.CertVerifyCRLTimeValidity$MH();
    }
    public static @C("LONG") int CertVerifyCRLTimeValidity (@C("LPFILETIME") Addressable pTimeToVerify, @C("PCRL_INFO") Addressable pCrlInfo) {
        try {
            return (int)cfapi_h$constants$54.CertVerifyCRLTimeValidity$MH().invokeExact(pTimeToVerify.address(), pCrlInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertVerifyValidityNesting$MH() {
        return cfapi_h$constants$54.CertVerifyValidityNesting$MH();
    }
    public static @C("BOOL") int CertVerifyValidityNesting (@C("PCERT_INFO") Addressable pSubjectInfo, @C("PCERT_INFO") Addressable pIssuerInfo) {
        try {
            return (int)cfapi_h$constants$54.CertVerifyValidityNesting$MH().invokeExact(pSubjectInfo.address(), pIssuerInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertVerifyCRLRevocation$MH() {
        return cfapi_h$constants$54.CertVerifyCRLRevocation$MH();
    }
    public static @C("BOOL") int CertVerifyCRLRevocation (@C("DWORD") int dwCertEncodingType, @C("PCERT_INFO") Addressable pCertId, @C("DWORD") int cCrlInfo, @C("PCRL_INFO[]") Addressable rgpCrlInfo) {
        try {
            return (int)cfapi_h$constants$54.CertVerifyCRLRevocation$MH().invokeExact(dwCertEncodingType, pCertId.address(), cCrlInfo, rgpCrlInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAlgIdToOID$MH() {
        return cfapi_h$constants$54.CertAlgIdToOID$MH();
    }
    public static @C("LPCSTR") MemoryAddress CertAlgIdToOID (@C("DWORD") int dwAlgId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertAlgIdToOID$MH().invokeExact(dwAlgId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertOIDToAlgId$MH() {
        return cfapi_h$constants$54.CertOIDToAlgId$MH();
    }
    public static @C("DWORD") int CertOIDToAlgId (@C("LPCSTR") Addressable pszObjId) {
        try {
            return (int)cfapi_h$constants$54.CertOIDToAlgId$MH().invokeExact(pszObjId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindExtension$MH() {
        return cfapi_h$constants$54.CertFindExtension$MH();
    }
    public static @C("PCERT_EXTENSION") MemoryAddress CertFindExtension (@C("LPCSTR") Addressable pszObjId, @C("DWORD") int cExtensions, @C("CERT_EXTENSION[]") Addressable rgExtensions) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertFindExtension$MH().invokeExact(pszObjId.address(), cExtensions, rgExtensions.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindAttribute$MH() {
        return cfapi_h$constants$54.CertFindAttribute$MH();
    }
    public static @C("PCRYPT_ATTRIBUTE") MemoryAddress CertFindAttribute (@C("LPCSTR") Addressable pszObjId, @C("DWORD") int cAttr, @C("CRYPT_ATTRIBUTE[]") Addressable rgAttr) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertFindAttribute$MH().invokeExact(pszObjId.address(), cAttr, rgAttr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindRDNAttr$MH() {
        return cfapi_h$constants$54.CertFindRDNAttr$MH();
    }
    public static @C("PCERT_RDN_ATTR") MemoryAddress CertFindRDNAttr (@C("LPCSTR") Addressable pszObjId, @C("PCERT_NAME_INFO") Addressable pName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertFindRDNAttr$MH().invokeExact(pszObjId.address(), pName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetIntendedKeyUsage$MH() {
        return cfapi_h$constants$54.CertGetIntendedKeyUsage$MH();
    }
    public static @C("BOOL") int CertGetIntendedKeyUsage (@C("DWORD") int dwCertEncodingType, @C("PCERT_INFO") Addressable pCertInfo, @C("BYTE*") Addressable pbKeyUsage, @C("DWORD") int cbKeyUsage) {
        try {
            return (int)cfapi_h$constants$54.CertGetIntendedKeyUsage$MH().invokeExact(dwCertEncodingType, pCertInfo.address(), pbKeyUsage.address(), cbKeyUsage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptInstallDefaultContext$MH() {
        return cfapi_h$constants$54.CryptInstallDefaultContext$MH();
    }
    public static @C("BOOL") int CryptInstallDefaultContext (@C("HCRYPTPROV") long hCryptProv, @C("DWORD") int dwDefaultType, @C("void*") Addressable pvDefaultPara, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved, @C("HCRYPTDEFAULTCONTEXT*") Addressable phDefaultContext) {
        try {
            return (int)cfapi_h$constants$54.CryptInstallDefaultContext$MH().invokeExact(hCryptProv, dwDefaultType, pvDefaultPara.address(), dwFlags, pvReserved.address(), phDefaultContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptUninstallDefaultContext$MH() {
        return cfapi_h$constants$54.CryptUninstallDefaultContext$MH();
    }
    public static @C("BOOL") int CryptUninstallDefaultContext (@C("HCRYPTDEFAULTCONTEXT") Addressable hDefaultContext, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$54.CryptUninstallDefaultContext$MH().invokeExact(hDefaultContext.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptExportPublicKeyInfo$MH() {
        return cfapi_h$constants$54.CryptExportPublicKeyInfo$MH();
    }
    public static @C("BOOL") int CryptExportPublicKeyInfo (@C("HCRYPTPROV_OR_NCRYPT_KEY_HANDLE") long hCryptProvOrNCryptKey, @C("DWORD") int dwKeySpec, @C("DWORD") int dwCertEncodingType, @C("PCERT_PUBLIC_KEY_INFO") Addressable pInfo, @C("DWORD*") Addressable pcbInfo) {
        try {
            return (int)cfapi_h$constants$54.CryptExportPublicKeyInfo$MH().invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pInfo.address(), pcbInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptExportPublicKeyInfoEx$MH() {
        return cfapi_h$constants$54.CryptExportPublicKeyInfoEx$MH();
    }
    public static @C("BOOL") int CryptExportPublicKeyInfoEx (@C("HCRYPTPROV_OR_NCRYPT_KEY_HANDLE") long hCryptProvOrNCryptKey, @C("DWORD") int dwKeySpec, @C("DWORD") int dwCertEncodingType, @C("LPSTR") Addressable pszPublicKeyObjId, @C("DWORD") int dwFlags, @C("void*") Addressable pvAuxInfo, @C("PCERT_PUBLIC_KEY_INFO") Addressable pInfo, @C("DWORD*") Addressable pcbInfo) {
        try {
            return (int)cfapi_h$constants$54.CryptExportPublicKeyInfoEx$MH().invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pszPublicKeyObjId.address(), dwFlags, pvAuxInfo.address(), pInfo.address(), pcbInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptExportPublicKeyInfoFromBCryptKeyHandle$MH() {
        return cfapi_h$constants$54.CryptExportPublicKeyInfoFromBCryptKeyHandle$MH();
    }
    public static @C("BOOL") int CryptExportPublicKeyInfoFromBCryptKeyHandle (@C("BCRYPT_KEY_HANDLE") Addressable hBCryptKey, @C("DWORD") int dwCertEncodingType, @C("LPSTR") Addressable pszPublicKeyObjId, @C("DWORD") int dwFlags, @C("void*") Addressable pvAuxInfo, @C("PCERT_PUBLIC_KEY_INFO") Addressable pInfo, @C("DWORD*") Addressable pcbInfo) {
        try {
            return (int)cfapi_h$constants$54.CryptExportPublicKeyInfoFromBCryptKeyHandle$MH().invokeExact(hBCryptKey.address(), dwCertEncodingType, pszPublicKeyObjId.address(), dwFlags, pvAuxInfo.address(), pInfo.address(), pcbInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptImportPublicKeyInfo$MH() {
        return cfapi_h$constants$54.CryptImportPublicKeyInfo$MH();
    }
    public static @C("BOOL") int CryptImportPublicKeyInfo (@C("HCRYPTPROV") long hCryptProv, @C("DWORD") int dwCertEncodingType, @C("PCERT_PUBLIC_KEY_INFO") Addressable pInfo, @C("HCRYPTKEY*") Addressable phKey) {
        try {
            return (int)cfapi_h$constants$54.CryptImportPublicKeyInfo$MH().invokeExact(hCryptProv, dwCertEncodingType, pInfo.address(), phKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptImportPublicKeyInfoEx$MH() {
        return cfapi_h$constants$54.CryptImportPublicKeyInfoEx$MH();
    }
    public static @C("BOOL") int CryptImportPublicKeyInfoEx (@C("HCRYPTPROV") long hCryptProv, @C("DWORD") int dwCertEncodingType, @C("PCERT_PUBLIC_KEY_INFO") Addressable pInfo, @C("ALG_ID") int aiKeyAlg, @C("DWORD") int dwFlags, @C("void*") Addressable pvAuxInfo, @C("HCRYPTKEY*") Addressable phKey) {
        try {
            return (int)cfapi_h$constants$54.CryptImportPublicKeyInfoEx$MH().invokeExact(hCryptProv, dwCertEncodingType, pInfo.address(), aiKeyAlg, dwFlags, pvAuxInfo.address(), phKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptImportPublicKeyInfoEx2$MH() {
        return cfapi_h$constants$54.CryptImportPublicKeyInfoEx2$MH();
    }
    public static @C("BOOL") int CryptImportPublicKeyInfoEx2 (@C("DWORD") int dwCertEncodingType, @C("PCERT_PUBLIC_KEY_INFO") Addressable pInfo, @C("DWORD") int dwFlags, @C("void*") Addressable pvAuxInfo, @C("BCRYPT_KEY_HANDLE*") Addressable phKey) {
        try {
            return (int)cfapi_h$constants$54.CryptImportPublicKeyInfoEx2$MH().invokeExact(dwCertEncodingType, pInfo.address(), dwFlags, pvAuxInfo.address(), phKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptAcquireCertificatePrivateKey$MH() {
        return cfapi_h$constants$54.CryptAcquireCertificatePrivateKey$MH();
    }
    public static @C("BOOL") int CryptAcquireCertificatePrivateKey (@C("PCCERT_CONTEXT") Addressable pCert, @C("DWORD") int dwFlags, @C("void*") Addressable pvParameters, @C("HCRYPTPROV_OR_NCRYPT_KEY_HANDLE*") Addressable phCryptProvOrNCryptKey, @C("DWORD*") Addressable pdwKeySpec, @C("BOOL*") Addressable pfCallerFreeProvOrNCryptKey) {
        try {
            return (int)cfapi_h$constants$54.CryptAcquireCertificatePrivateKey$MH().invokeExact(pCert.address(), dwFlags, pvParameters.address(), phCryptProvOrNCryptKey.address(), pdwKeySpec.address(), pfCallerFreeProvOrNCryptKey.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptFindCertificateKeyProvInfo$MH() {
        return cfapi_h$constants$54.CryptFindCertificateKeyProvInfo$MH();
    }
    public static @C("BOOL") int CryptFindCertificateKeyProvInfo (@C("PCCERT_CONTEXT") Addressable pCert, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$54.CryptFindCertificateKeyProvInfo$MH().invokeExact(pCert.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptImportPKCS8$MH() {
        return cfapi_h$constants$54.CryptImportPKCS8$MH();
    }
    public static @C("BOOL") int CryptImportPKCS8 (@C("CRYPT_PKCS8_IMPORT_PARAMS") MemorySegment sPrivateKeyAndParams, @C("DWORD") int dwFlags, @C("HCRYPTPROV*") Addressable phCryptProv, @C("void*") Addressable pvAuxInfo) {
        try {
            return (int)cfapi_h$constants$54.CryptImportPKCS8$MH().invokeExact(sPrivateKeyAndParams, dwFlags, phCryptProv.address(), pvAuxInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptExportPKCS8$MH() {
        return cfapi_h$constants$54.CryptExportPKCS8$MH();
    }
    public static @C("BOOL") int CryptExportPKCS8 (@C("HCRYPTPROV") long hCryptProv, @C("DWORD") int dwKeySpec, @C("LPSTR") Addressable pszPrivateKeyObjId, @C("DWORD") int dwFlags, @C("void*") Addressable pvAuxInfo, @C("BYTE*") Addressable pbPrivateKeyBlob, @C("DWORD*") Addressable pcbPrivateKeyBlob) {
        try {
            return (int)cfapi_h$constants$54.CryptExportPKCS8$MH().invokeExact(hCryptProv, dwKeySpec, pszPrivateKeyObjId.address(), dwFlags, pvAuxInfo.address(), pbPrivateKeyBlob.address(), pcbPrivateKeyBlob.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptExportPKCS8Ex$MH() {
        return cfapi_h$constants$54.CryptExportPKCS8Ex$MH();
    }
    public static @C("BOOL") int CryptExportPKCS8Ex (@C("CRYPT_PKCS8_EXPORT_PARAMS*") Addressable psExportParams, @C("DWORD") int dwFlags, @C("void*") Addressable pvAuxInfo, @C("BYTE*") Addressable pbPrivateKeyBlob, @C("DWORD*") Addressable pcbPrivateKeyBlob) {
        try {
            return (int)cfapi_h$constants$54.CryptExportPKCS8Ex$MH().invokeExact(psExportParams.address(), dwFlags, pvAuxInfo.address(), pbPrivateKeyBlob.address(), pcbPrivateKeyBlob.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptHashPublicKeyInfo$MH() {
        return cfapi_h$constants$54.CryptHashPublicKeyInfo$MH();
    }
    public static @C("BOOL") int CryptHashPublicKeyInfo (@C("HCRYPTPROV_LEGACY") long hCryptProv, @C("ALG_ID") int Algid, @C("DWORD") int dwFlags, @C("DWORD") int dwCertEncodingType, @C("PCERT_PUBLIC_KEY_INFO") Addressable pInfo, @C("BYTE*") Addressable pbComputedHash, @C("DWORD*") Addressable pcbComputedHash) {
        try {
            return (int)cfapi_h$constants$54.CryptHashPublicKeyInfo$MH().invokeExact(hCryptProv, Algid, dwFlags, dwCertEncodingType, pInfo.address(), pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertRDNValueToStrA$MH() {
        return cfapi_h$constants$54.CertRDNValueToStrA$MH();
    }
    public static @C("DWORD") int CertRDNValueToStrA (@C("DWORD") int dwValueType, @C("PCERT_RDN_VALUE_BLOB") Addressable pValue, @C("LPSTR") Addressable psz, @C("DWORD") int csz) {
        try {
            return (int)cfapi_h$constants$54.CertRDNValueToStrA$MH().invokeExact(dwValueType, pValue.address(), psz.address(), csz);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertRDNValueToStrW$MH() {
        return cfapi_h$constants$54.CertRDNValueToStrW$MH();
    }
    public static @C("DWORD") int CertRDNValueToStrW (@C("DWORD") int dwValueType, @C("PCERT_RDN_VALUE_BLOB") Addressable pValue, @C("LPWSTR") Addressable psz, @C("DWORD") int csz) {
        try {
            return (int)cfapi_h$constants$54.CertRDNValueToStrW$MH().invokeExact(dwValueType, pValue.address(), psz.address(), csz);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertNameToStrA$MH() {
        return cfapi_h$constants$54.CertNameToStrA$MH();
    }
    public static @C("DWORD") int CertNameToStrA (@C("DWORD") int dwCertEncodingType, @C("PCERT_NAME_BLOB") Addressable pName, @C("DWORD") int dwStrType, @C("LPSTR") Addressable psz, @C("DWORD") int csz) {
        try {
            return (int)cfapi_h$constants$54.CertNameToStrA$MH().invokeExact(dwCertEncodingType, pName.address(), dwStrType, psz.address(), csz);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertNameToStrW$MH() {
        return cfapi_h$constants$54.CertNameToStrW$MH();
    }
    public static @C("DWORD") int CertNameToStrW (@C("DWORD") int dwCertEncodingType, @C("PCERT_NAME_BLOB") Addressable pName, @C("DWORD") int dwStrType, @C("LPWSTR") Addressable psz, @C("DWORD") int csz) {
        try {
            return (int)cfapi_h$constants$54.CertNameToStrW$MH().invokeExact(dwCertEncodingType, pName.address(), dwStrType, psz.address(), csz);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertStrToNameA$MH() {
        return cfapi_h$constants$54.CertStrToNameA$MH();
    }
    public static @C("BOOL") int CertStrToNameA (@C("DWORD") int dwCertEncodingType, @C("LPCSTR") Addressable pszX500, @C("DWORD") int dwStrType, @C("void*") Addressable pvReserved, @C("BYTE*") Addressable pbEncoded, @C("DWORD*") Addressable pcbEncoded, @C("LPCSTR*") Addressable ppszError) {
        try {
            return (int)cfapi_h$constants$54.CertStrToNameA$MH().invokeExact(dwCertEncodingType, pszX500.address(), dwStrType, pvReserved.address(), pbEncoded.address(), pcbEncoded.address(), ppszError.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertStrToNameW$MH() {
        return cfapi_h$constants$54.CertStrToNameW$MH();
    }
    public static @C("BOOL") int CertStrToNameW (@C("DWORD") int dwCertEncodingType, @C("LPCWSTR") Addressable pszX500, @C("DWORD") int dwStrType, @C("void*") Addressable pvReserved, @C("BYTE*") Addressable pbEncoded, @C("DWORD*") Addressable pcbEncoded, @C("LPCWSTR*") Addressable ppszError) {
        try {
            return (int)cfapi_h$constants$54.CertStrToNameW$MH().invokeExact(dwCertEncodingType, pszX500.address(), dwStrType, pvReserved.address(), pbEncoded.address(), pcbEncoded.address(), ppszError.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetNameStringA$MH() {
        return cfapi_h$constants$54.CertGetNameStringA$MH();
    }
    public static @C("DWORD") int CertGetNameStringA (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int dwType, @C("DWORD") int dwFlags, @C("void*") Addressable pvTypePara, @C("LPSTR") Addressable pszNameString, @C("DWORD") int cchNameString) {
        try {
            return (int)cfapi_h$constants$54.CertGetNameStringA$MH().invokeExact(pCertContext.address(), dwType, dwFlags, pvTypePara.address(), pszNameString.address(), cchNameString);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetNameStringW$MH() {
        return cfapi_h$constants$54.CertGetNameStringW$MH();
    }
    public static @C("DWORD") int CertGetNameStringW (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("DWORD") int dwType, @C("DWORD") int dwFlags, @C("void*") Addressable pvTypePara, @C("LPWSTR") Addressable pszNameString, @C("DWORD") int cchNameString) {
        try {
            return (int)cfapi_h$constants$54.CertGetNameStringW$MH().invokeExact(pCertContext.address(), dwType, dwFlags, pvTypePara.address(), pszNameString.address(), cchNameString);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSignMessage$MH() {
        return cfapi_h$constants$54.CryptSignMessage$MH();
    }
    public static @C("BOOL") int CryptSignMessage (@C("PCRYPT_SIGN_MESSAGE_PARA") Addressable pSignPara, @C("BOOL") int fDetachedSignature, @C("DWORD") int cToBeSigned, @C("const BYTE*[]") Addressable rgpbToBeSigned, @C("DWORD[]") Addressable rgcbToBeSigned, @C("BYTE*") Addressable pbSignedBlob, @C("DWORD*") Addressable pcbSignedBlob) {
        try {
            return (int)cfapi_h$constants$54.CryptSignMessage$MH().invokeExact(pSignPara.address(), fDetachedSignature, cToBeSigned, rgpbToBeSigned.address(), rgcbToBeSigned.address(), pbSignedBlob.address(), pcbSignedBlob.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifyMessageSignature$MH() {
        return cfapi_h$constants$54.CryptVerifyMessageSignature$MH();
    }
    public static @C("BOOL") int CryptVerifyMessageSignature (@C("PCRYPT_VERIFY_MESSAGE_PARA") Addressable pVerifyPara, @C("DWORD") int dwSignerIndex, @C("const BYTE*") Addressable pbSignedBlob, @C("DWORD") int cbSignedBlob, @C("BYTE*") Addressable pbDecoded, @C("DWORD*") Addressable pcbDecoded, @C("PCCERT_CONTEXT*") Addressable ppSignerCert) {
        try {
            return (int)cfapi_h$constants$54.CryptVerifyMessageSignature$MH().invokeExact(pVerifyPara.address(), dwSignerIndex, pbSignedBlob.address(), cbSignedBlob, pbDecoded.address(), pcbDecoded.address(), ppSignerCert.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetMessageSignerCount$MH() {
        return cfapi_h$constants$54.CryptGetMessageSignerCount$MH();
    }
    public static @C("LONG") int CryptGetMessageSignerCount (@C("DWORD") int dwMsgEncodingType, @C("const BYTE*") Addressable pbSignedBlob, @C("DWORD") int cbSignedBlob) {
        try {
            return (int)cfapi_h$constants$54.CryptGetMessageSignerCount$MH().invokeExact(dwMsgEncodingType, pbSignedBlob.address(), cbSignedBlob);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetMessageCertificates$MH() {
        return cfapi_h$constants$54.CryptGetMessageCertificates$MH();
    }
    public static @C("HCERTSTORE") MemoryAddress CryptGetMessageCertificates (@C("DWORD") int dwMsgAndCertEncodingType, @C("HCRYPTPROV_LEGACY") long hCryptProv, @C("DWORD") int dwFlags, @C("const BYTE*") Addressable pbSignedBlob, @C("DWORD") int cbSignedBlob) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CryptGetMessageCertificates$MH().invokeExact(dwMsgAndCertEncodingType, hCryptProv, dwFlags, pbSignedBlob.address(), cbSignedBlob);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifyDetachedMessageSignature$MH() {
        return cfapi_h$constants$54.CryptVerifyDetachedMessageSignature$MH();
    }
    public static @C("BOOL") int CryptVerifyDetachedMessageSignature (@C("PCRYPT_VERIFY_MESSAGE_PARA") Addressable pVerifyPara, @C("DWORD") int dwSignerIndex, @C("const BYTE*") Addressable pbDetachedSignBlob, @C("DWORD") int cbDetachedSignBlob, @C("DWORD") int cToBeSigned, @C("const BYTE*[]") Addressable rgpbToBeSigned, @C("DWORD[]") Addressable rgcbToBeSigned, @C("PCCERT_CONTEXT*") Addressable ppSignerCert) {
        try {
            return (int)cfapi_h$constants$54.CryptVerifyDetachedMessageSignature$MH().invokeExact(pVerifyPara.address(), dwSignerIndex, pbDetachedSignBlob.address(), cbDetachedSignBlob, cToBeSigned, rgpbToBeSigned.address(), rgcbToBeSigned.address(), ppSignerCert.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEncryptMessage$MH() {
        return cfapi_h$constants$54.CryptEncryptMessage$MH();
    }
    public static @C("BOOL") int CryptEncryptMessage (@C("PCRYPT_ENCRYPT_MESSAGE_PARA") Addressable pEncryptPara, @C("DWORD") int cRecipientCert, @C("PCCERT_CONTEXT[]") Addressable rgpRecipientCert, @C("const BYTE*") Addressable pbToBeEncrypted, @C("DWORD") int cbToBeEncrypted, @C("BYTE*") Addressable pbEncryptedBlob, @C("DWORD*") Addressable pcbEncryptedBlob) {
        try {
            return (int)cfapi_h$constants$54.CryptEncryptMessage$MH().invokeExact(pEncryptPara.address(), cRecipientCert, rgpRecipientCert.address(), pbToBeEncrypted.address(), cbToBeEncrypted, pbEncryptedBlob.address(), pcbEncryptedBlob.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDecryptMessage$MH() {
        return cfapi_h$constants$54.CryptDecryptMessage$MH();
    }
    public static @C("BOOL") int CryptDecryptMessage (@C("PCRYPT_DECRYPT_MESSAGE_PARA") Addressable pDecryptPara, @C("const BYTE*") Addressable pbEncryptedBlob, @C("DWORD") int cbEncryptedBlob, @C("BYTE*") Addressable pbDecrypted, @C("DWORD*") Addressable pcbDecrypted, @C("PCCERT_CONTEXT*") Addressable ppXchgCert) {
        try {
            return (int)cfapi_h$constants$54.CryptDecryptMessage$MH().invokeExact(pDecryptPara.address(), pbEncryptedBlob.address(), cbEncryptedBlob, pbDecrypted.address(), pcbDecrypted.address(), ppXchgCert.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSignAndEncryptMessage$MH() {
        return cfapi_h$constants$54.CryptSignAndEncryptMessage$MH();
    }
    public static @C("BOOL") int CryptSignAndEncryptMessage (@C("PCRYPT_SIGN_MESSAGE_PARA") Addressable pSignPara, @C("PCRYPT_ENCRYPT_MESSAGE_PARA") Addressable pEncryptPara, @C("DWORD") int cRecipientCert, @C("PCCERT_CONTEXT[]") Addressable rgpRecipientCert, @C("const BYTE*") Addressable pbToBeSignedAndEncrypted, @C("DWORD") int cbToBeSignedAndEncrypted, @C("BYTE*") Addressable pbSignedAndEncryptedBlob, @C("DWORD*") Addressable pcbSignedAndEncryptedBlob) {
        try {
            return (int)cfapi_h$constants$54.CryptSignAndEncryptMessage$MH().invokeExact(pSignPara.address(), pEncryptPara.address(), cRecipientCert, rgpRecipientCert.address(), pbToBeSignedAndEncrypted.address(), cbToBeSignedAndEncrypted, pbSignedAndEncryptedBlob.address(), pcbSignedAndEncryptedBlob.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDecryptAndVerifyMessageSignature$MH() {
        return cfapi_h$constants$54.CryptDecryptAndVerifyMessageSignature$MH();
    }
    public static @C("BOOL") int CryptDecryptAndVerifyMessageSignature (@C("PCRYPT_DECRYPT_MESSAGE_PARA") Addressable pDecryptPara, @C("PCRYPT_VERIFY_MESSAGE_PARA") Addressable pVerifyPara, @C("DWORD") int dwSignerIndex, @C("const BYTE*") Addressable pbEncryptedBlob, @C("DWORD") int cbEncryptedBlob, @C("BYTE*") Addressable pbDecrypted, @C("DWORD*") Addressable pcbDecrypted, @C("PCCERT_CONTEXT*") Addressable ppXchgCert, @C("PCCERT_CONTEXT*") Addressable ppSignerCert) {
        try {
            return (int)cfapi_h$constants$54.CryptDecryptAndVerifyMessageSignature$MH().invokeExact(pDecryptPara.address(), pVerifyPara.address(), dwSignerIndex, pbEncryptedBlob.address(), cbEncryptedBlob, pbDecrypted.address(), pcbDecrypted.address(), ppXchgCert.address(), ppSignerCert.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptDecodeMessage$MH() {
        return cfapi_h$constants$54.CryptDecodeMessage$MH();
    }
    public static @C("BOOL") int CryptDecodeMessage (@C("DWORD") int dwMsgTypeFlags, @C("PCRYPT_DECRYPT_MESSAGE_PARA") Addressable pDecryptPara, @C("PCRYPT_VERIFY_MESSAGE_PARA") Addressable pVerifyPara, @C("DWORD") int dwSignerIndex, @C("const BYTE*") Addressable pbEncodedBlob, @C("DWORD") int cbEncodedBlob, @C("DWORD") int dwPrevInnerContentType, @C("DWORD*") Addressable pdwMsgType, @C("DWORD*") Addressable pdwInnerContentType, @C("BYTE*") Addressable pbDecoded, @C("DWORD*") Addressable pcbDecoded, @C("PCCERT_CONTEXT*") Addressable ppXchgCert, @C("PCCERT_CONTEXT*") Addressable ppSignerCert) {
        try {
            return (int)cfapi_h$constants$54.CryptDecodeMessage$MH().invokeExact(dwMsgTypeFlags, pDecryptPara.address(), pVerifyPara.address(), dwSignerIndex, pbEncodedBlob.address(), cbEncodedBlob, dwPrevInnerContentType, pdwMsgType.address(), pdwInnerContentType.address(), pbDecoded.address(), pcbDecoded.address(), ppXchgCert.address(), ppSignerCert.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptHashMessage$MH() {
        return cfapi_h$constants$54.CryptHashMessage$MH();
    }
    public static @C("BOOL") int CryptHashMessage (@C("PCRYPT_HASH_MESSAGE_PARA") Addressable pHashPara, @C("BOOL") int fDetachedHash, @C("DWORD") int cToBeHashed, @C("const BYTE*[]") Addressable rgpbToBeHashed, @C("DWORD[]") Addressable rgcbToBeHashed, @C("BYTE*") Addressable pbHashedBlob, @C("DWORD*") Addressable pcbHashedBlob, @C("BYTE*") Addressable pbComputedHash, @C("DWORD*") Addressable pcbComputedHash) {
        try {
            return (int)cfapi_h$constants$54.CryptHashMessage$MH().invokeExact(pHashPara.address(), fDetachedHash, cToBeHashed, rgpbToBeHashed.address(), rgcbToBeHashed.address(), pbHashedBlob.address(), pcbHashedBlob.address(), pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifyMessageHash$MH() {
        return cfapi_h$constants$54.CryptVerifyMessageHash$MH();
    }
    public static @C("BOOL") int CryptVerifyMessageHash (@C("PCRYPT_HASH_MESSAGE_PARA") Addressable pHashPara, @C("BYTE*") Addressable pbHashedBlob, @C("DWORD") int cbHashedBlob, @C("BYTE*") Addressable pbToBeHashed, @C("DWORD*") Addressable pcbToBeHashed, @C("BYTE*") Addressable pbComputedHash, @C("DWORD*") Addressable pcbComputedHash) {
        try {
            return (int)cfapi_h$constants$54.CryptVerifyMessageHash$MH().invokeExact(pHashPara.address(), pbHashedBlob.address(), cbHashedBlob, pbToBeHashed.address(), pcbToBeHashed.address(), pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifyDetachedMessageHash$MH() {
        return cfapi_h$constants$54.CryptVerifyDetachedMessageHash$MH();
    }
    public static @C("BOOL") int CryptVerifyDetachedMessageHash (@C("PCRYPT_HASH_MESSAGE_PARA") Addressable pHashPara, @C("BYTE*") Addressable pbDetachedHashBlob, @C("DWORD") int cbDetachedHashBlob, @C("DWORD") int cToBeHashed, @C("const BYTE*[]") Addressable rgpbToBeHashed, @C("DWORD[]") Addressable rgcbToBeHashed, @C("BYTE*") Addressable pbComputedHash, @C("DWORD*") Addressable pcbComputedHash) {
        try {
            return (int)cfapi_h$constants$54.CryptVerifyDetachedMessageHash$MH().invokeExact(pHashPara.address(), pbDetachedHashBlob.address(), cbDetachedHashBlob, cToBeHashed, rgpbToBeHashed.address(), rgcbToBeHashed.address(), pbComputedHash.address(), pcbComputedHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSignMessageWithKey$MH() {
        return cfapi_h$constants$54.CryptSignMessageWithKey$MH();
    }
    public static @C("BOOL") int CryptSignMessageWithKey (@C("PCRYPT_KEY_SIGN_MESSAGE_PARA") Addressable pSignPara, @C("const BYTE*") Addressable pbToBeSigned, @C("DWORD") int cbToBeSigned, @C("BYTE*") Addressable pbSignedBlob, @C("DWORD*") Addressable pcbSignedBlob) {
        try {
            return (int)cfapi_h$constants$54.CryptSignMessageWithKey$MH().invokeExact(pSignPara.address(), pbToBeSigned.address(), cbToBeSigned, pbSignedBlob.address(), pcbSignedBlob.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifyMessageSignatureWithKey$MH() {
        return cfapi_h$constants$54.CryptVerifyMessageSignatureWithKey$MH();
    }
    public static @C("BOOL") int CryptVerifyMessageSignatureWithKey (@C("PCRYPT_KEY_VERIFY_MESSAGE_PARA") Addressable pVerifyPara, @C("PCERT_PUBLIC_KEY_INFO") Addressable pPublicKeyInfo, @C("const BYTE*") Addressable pbSignedBlob, @C("DWORD") int cbSignedBlob, @C("BYTE*") Addressable pbDecoded, @C("DWORD*") Addressable pcbDecoded) {
        try {
            return (int)cfapi_h$constants$54.CryptVerifyMessageSignatureWithKey$MH().invokeExact(pVerifyPara.address(), pPublicKeyInfo.address(), pbSignedBlob.address(), cbSignedBlob, pbDecoded.address(), pcbDecoded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertOpenSystemStoreA$MH() {
        return cfapi_h$constants$54.CertOpenSystemStoreA$MH();
    }
    public static @C("HCERTSTORE") MemoryAddress CertOpenSystemStoreA (@C("HCRYPTPROV_LEGACY") long hProv, @C("LPCSTR") Addressable szSubsystemProtocol) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertOpenSystemStoreA$MH().invokeExact(hProv, szSubsystemProtocol.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertOpenSystemStoreW$MH() {
        return cfapi_h$constants$54.CertOpenSystemStoreW$MH();
    }
    public static @C("HCERTSTORE") MemoryAddress CertOpenSystemStoreW (@C("HCRYPTPROV_LEGACY") long hProv, @C("LPCWSTR") Addressable szSubsystemProtocol) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CertOpenSystemStoreW$MH().invokeExact(hProv, szSubsystemProtocol.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddEncodedCertificateToSystemStoreA$MH() {
        return cfapi_h$constants$54.CertAddEncodedCertificateToSystemStoreA$MH();
    }
    public static @C("BOOL") int CertAddEncodedCertificateToSystemStoreA (@C("LPCSTR") Addressable szCertStoreName, @C("const BYTE*") Addressable pbCertEncoded, @C("DWORD") int cbCertEncoded) {
        try {
            return (int)cfapi_h$constants$54.CertAddEncodedCertificateToSystemStoreA$MH().invokeExact(szCertStoreName.address(), pbCertEncoded.address(), cbCertEncoded);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddEncodedCertificateToSystemStoreW$MH() {
        return cfapi_h$constants$54.CertAddEncodedCertificateToSystemStoreW$MH();
    }
    public static @C("BOOL") int CertAddEncodedCertificateToSystemStoreW (@C("LPCWSTR") Addressable szCertStoreName, @C("const BYTE*") Addressable pbCertEncoded, @C("DWORD") int cbCertEncoded) {
        try {
            return (int)cfapi_h$constants$54.CertAddEncodedCertificateToSystemStoreW$MH().invokeExact(szCertStoreName.address(), pbCertEncoded.address(), cbCertEncoded);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindCertsByIssuer$MH() {
        return cfapi_h$constants$54.FindCertsByIssuer$MH();
    }
    public static @C("HRESULT") int FindCertsByIssuer (@C("PCERT_CHAIN") Addressable pCertChains, @C("DWORD*") Addressable pcbCertChains, @C("DWORD*") Addressable pcCertChains, @C("BYTE*") Addressable pbEncodedIssuerName, @C("DWORD") int cbEncodedIssuerName, @C("LPCWSTR") Addressable pwszPurpose, @C("DWORD") int dwKeySpec) {
        try {
            return (int)cfapi_h$constants$54.FindCertsByIssuer$MH().invokeExact(pCertChains.address(), pcbCertChains.address(), pcCertChains.address(), pbEncodedIssuerName.address(), cbEncodedIssuerName, pwszPurpose.address(), dwKeySpec);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptQueryObject$MH() {
        return cfapi_h$constants$54.CryptQueryObject$MH();
    }
    public static @C("BOOL") int CryptQueryObject (@C("DWORD") int dwObjectType, @C("void*") Addressable pvObject, @C("DWORD") int dwExpectedContentTypeFlags, @C("DWORD") int dwExpectedFormatTypeFlags, @C("DWORD") int dwFlags, @C("DWORD*") Addressable pdwMsgAndCertEncodingType, @C("DWORD*") Addressable pdwContentType, @C("DWORD*") Addressable pdwFormatType, @C("HCERTSTORE*") Addressable phCertStore, @C("HCRYPTMSG*") Addressable phMsg, @C("void**") Addressable ppvContext) {
        try {
            return (int)cfapi_h$constants$54.CryptQueryObject$MH().invokeExact(dwObjectType, pvObject.address(), dwExpectedContentTypeFlags, dwExpectedFormatTypeFlags, dwFlags, pdwMsgAndCertEncodingType.address(), pdwContentType.address(), pdwFormatType.address(), phCertStore.address(), phMsg.address(), ppvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMemAlloc$MH() {
        return cfapi_h$constants$54.CryptMemAlloc$MH();
    }
    public static @C("LPVOID") MemoryAddress CryptMemAlloc (@C("ULONG") int cbSize) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CryptMemAlloc$MH().invokeExact(cbSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMemRealloc$MH() {
        return cfapi_h$constants$54.CryptMemRealloc$MH();
    }
    public static @C("LPVOID") MemoryAddress CryptMemRealloc (@C("LPVOID") Addressable pv, @C("ULONG") int cbSize) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$54.CryptMemRealloc$MH().invokeExact(pv.address(), cbSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptMemFree$MH() {
        return cfapi_h$constants$54.CryptMemFree$MH();
    }
    public static void CryptMemFree (@C("LPVOID") Addressable pv) {
        try {
            cfapi_h$constants$54.CryptMemFree$MH().invokeExact(pv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptCreateAsyncHandle$MH() {
        return cfapi_h$constants$54.CryptCreateAsyncHandle$MH();
    }
    public static @C("BOOL") int CryptCreateAsyncHandle (@C("DWORD") int dwFlags, @C("PHCRYPTASYNC") Addressable phAsync) {
        try {
            return (int)cfapi_h$constants$54.CryptCreateAsyncHandle$MH().invokeExact(dwFlags, phAsync.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetAsyncParam$MH() {
        return cfapi_h$constants$54.CryptSetAsyncParam$MH();
    }
    public static @C("BOOL") int CryptSetAsyncParam (@C("HCRYPTASYNC") Addressable hAsync, @C("LPSTR") Addressable pszParamOid, @C("LPVOID") Addressable pvParam, @C("PFN_CRYPT_ASYNC_PARAM_FREE_FUNC") Addressable pfnFree) {
        try {
            return (int)cfapi_h$constants$54.CryptSetAsyncParam$MH().invokeExact(hAsync.address(), pszParamOid.address(), pvParam.address(), pfnFree.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetAsyncParam$MH() {
        return cfapi_h$constants$54.CryptGetAsyncParam$MH();
    }
    public static @C("BOOL") int CryptGetAsyncParam (@C("HCRYPTASYNC") Addressable hAsync, @C("LPSTR") Addressable pszParamOid, @C("LPVOID*") Addressable ppvParam, @C("PFN_CRYPT_ASYNC_PARAM_FREE_FUNC*") Addressable ppfnFree) {
        try {
            return (int)cfapi_h$constants$54.CryptGetAsyncParam$MH().invokeExact(hAsync.address(), pszParamOid.address(), ppvParam.address(), ppfnFree.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptCloseAsyncHandle$MH() {
        return cfapi_h$constants$54.CryptCloseAsyncHandle$MH();
    }
    public static @C("BOOL") int CryptCloseAsyncHandle (@C("HCRYPTASYNC") Addressable hAsync) {
        try {
            return (int)cfapi_h$constants$54.CryptCloseAsyncHandle$MH().invokeExact(hAsync.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptRetrieveObjectByUrlA$MH() {
        return cfapi_h$constants$55.CryptRetrieveObjectByUrlA$MH();
    }
    public static @C("BOOL") int CryptRetrieveObjectByUrlA (@C("LPCSTR") Addressable pszUrl, @C("LPCSTR") Addressable pszObjectOid, @C("DWORD") int dwRetrievalFlags, @C("DWORD") int dwTimeout, @C("LPVOID*") Addressable ppvObject, @C("HCRYPTASYNC") Addressable hAsyncRetrieve, @C("PCRYPT_CREDENTIALS") Addressable pCredentials, @C("LPVOID") Addressable pvVerify, @C("PCRYPT_RETRIEVE_AUX_INFO") Addressable pAuxInfo) {
        try {
            return (int)cfapi_h$constants$55.CryptRetrieveObjectByUrlA$MH().invokeExact(pszUrl.address(), pszObjectOid.address(), dwRetrievalFlags, dwTimeout, ppvObject.address(), hAsyncRetrieve.address(), pCredentials.address(), pvVerify.address(), pAuxInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptRetrieveObjectByUrlW$MH() {
        return cfapi_h$constants$55.CryptRetrieveObjectByUrlW$MH();
    }
    public static @C("BOOL") int CryptRetrieveObjectByUrlW (@C("LPCWSTR") Addressable pszUrl, @C("LPCSTR") Addressable pszObjectOid, @C("DWORD") int dwRetrievalFlags, @C("DWORD") int dwTimeout, @C("LPVOID*") Addressable ppvObject, @C("HCRYPTASYNC") Addressable hAsyncRetrieve, @C("PCRYPT_CREDENTIALS") Addressable pCredentials, @C("LPVOID") Addressable pvVerify, @C("PCRYPT_RETRIEVE_AUX_INFO") Addressable pAuxInfo) {
        try {
            return (int)cfapi_h$constants$55.CryptRetrieveObjectByUrlW$MH().invokeExact(pszUrl.address(), pszObjectOid.address(), dwRetrievalFlags, dwTimeout, ppvObject.address(), hAsyncRetrieve.address(), pCredentials.address(), pvVerify.address(), pAuxInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptInstallCancelRetrieval$MH() {
        return cfapi_h$constants$55.CryptInstallCancelRetrieval$MH();
    }
    public static @C("BOOL") int CryptInstallCancelRetrieval (@C("PFN_CRYPT_CANCEL_RETRIEVAL") Addressable pfnCancel, @C("void*") Addressable pvArg, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$55.CryptInstallCancelRetrieval$MH().invokeExact(pfnCancel.address(), pvArg.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptUninstallCancelRetrieval$MH() {
        return cfapi_h$constants$55.CryptUninstallCancelRetrieval$MH();
    }
    public static @C("BOOL") int CryptUninstallCancelRetrieval (@C("DWORD") int dwFlags, @C("void*") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$55.CryptUninstallCancelRetrieval$MH().invokeExact(dwFlags, pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptCancelAsyncRetrieval$MH() {
        return cfapi_h$constants$55.CryptCancelAsyncRetrieval$MH();
    }
    public static @C("BOOL") int CryptCancelAsyncRetrieval (@C("HCRYPTASYNC") Addressable hAsyncRetrieval) {
        try {
            return (int)cfapi_h$constants$55.CryptCancelAsyncRetrieval$MH().invokeExact(hAsyncRetrieval.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetObjectUrl$MH() {
        return cfapi_h$constants$55.CryptGetObjectUrl$MH();
    }
    public static @C("BOOL") int CryptGetObjectUrl (@C("LPCSTR") Addressable pszUrlOid, @C("LPVOID") Addressable pvPara, @C("DWORD") int dwFlags, @C("PCRYPT_URL_ARRAY") Addressable pUrlArray, @C("DWORD*") Addressable pcbUrlArray, @C("PCRYPT_URL_INFO") Addressable pUrlInfo, @C("DWORD*") Addressable pcbUrlInfo, @C("LPVOID") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$55.CryptGetObjectUrl$MH().invokeExact(pszUrlOid.address(), pvPara.address(), dwFlags, pUrlArray.address(), pcbUrlArray.address(), pUrlInfo.address(), pcbUrlInfo.address(), pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetTimeValidObject$MH() {
        return cfapi_h$constants$55.CryptGetTimeValidObject$MH();
    }
    public static @C("BOOL") int CryptGetTimeValidObject (@C("LPCSTR") Addressable pszTimeValidOid, @C("LPVOID") Addressable pvPara, @C("PCCERT_CONTEXT") Addressable pIssuer, @C("LPFILETIME") Addressable pftValidFor, @C("DWORD") int dwFlags, @C("DWORD") int dwTimeout, @C("LPVOID*") Addressable ppvObject, @C("PCRYPT_CREDENTIALS") Addressable pCredentials, @C("PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO") Addressable pExtraInfo) {
        try {
            return (int)cfapi_h$constants$55.CryptGetTimeValidObject$MH().invokeExact(pszTimeValidOid.address(), pvPara.address(), pIssuer.address(), pftValidFor.address(), dwFlags, dwTimeout, ppvObject.address(), pCredentials.address(), pExtraInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptFlushTimeValidObject$MH() {
        return cfapi_h$constants$55.CryptFlushTimeValidObject$MH();
    }
    public static @C("BOOL") int CryptFlushTimeValidObject (@C("LPCSTR") Addressable pszFlushTimeValidOid, @C("LPVOID") Addressable pvPara, @C("PCCERT_CONTEXT") Addressable pIssuer, @C("DWORD") int dwFlags, @C("LPVOID") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$55.CryptFlushTimeValidObject$MH().invokeExact(pszFlushTimeValidOid.address(), pvPara.address(), pIssuer.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCreateSelfSignCertificate$MH() {
        return cfapi_h$constants$55.CertCreateSelfSignCertificate$MH();
    }
    public static @C("PCCERT_CONTEXT") MemoryAddress CertCreateSelfSignCertificate (@C("HCRYPTPROV_OR_NCRYPT_KEY_HANDLE") long hCryptProvOrNCryptKey, @C("PCERT_NAME_BLOB") Addressable pSubjectIssuerBlob, @C("DWORD") int dwFlags, @C("PCRYPT_KEY_PROV_INFO") Addressable pKeyProvInfo, @C("PCRYPT_ALGORITHM_IDENTIFIER") Addressable pSignatureAlgorithm, @C("PSYSTEMTIME") Addressable pStartTime, @C("PSYSTEMTIME") Addressable pEndTime, @C("PCERT_EXTENSIONS") Addressable pExtensions) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$55.CertCreateSelfSignCertificate$MH().invokeExact(hCryptProvOrNCryptKey, pSubjectIssuerBlob.address(), dwFlags, pKeyProvInfo.address(), pSignatureAlgorithm.address(), pStartTime.address(), pEndTime.address(), pExtensions.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptGetKeyIdentifierProperty$MH() {
        return cfapi_h$constants$55.CryptGetKeyIdentifierProperty$MH();
    }
    public static @C("BOOL") int CryptGetKeyIdentifierProperty (@C("const CRYPT_HASH_BLOB*") Addressable pKeyIdentifier, @C("DWORD") int dwPropId, @C("DWORD") int dwFlags, @C("LPCWSTR") Addressable pwszComputerName, @C("void*") Addressable pvReserved, @C("void*") Addressable pvData, @C("DWORD*") Addressable pcbData) {
        try {
            return (int)cfapi_h$constants$55.CryptGetKeyIdentifierProperty$MH().invokeExact(pKeyIdentifier.address(), dwPropId, dwFlags, pwszComputerName.address(), pvReserved.address(), pvData.address(), pcbData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptSetKeyIdentifierProperty$MH() {
        return cfapi_h$constants$55.CryptSetKeyIdentifierProperty$MH();
    }
    public static @C("BOOL") int CryptSetKeyIdentifierProperty (@C("const CRYPT_HASH_BLOB*") Addressable pKeyIdentifier, @C("DWORD") int dwPropId, @C("DWORD") int dwFlags, @C("LPCWSTR") Addressable pwszComputerName, @C("void*") Addressable pvReserved, @C("void*") Addressable pvData) {
        try {
            return (int)cfapi_h$constants$55.CryptSetKeyIdentifierProperty$MH().invokeExact(pKeyIdentifier.address(), dwPropId, dwFlags, pwszComputerName.address(), pvReserved.address(), pvData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptEnumKeyIdentifierProperties$MH() {
        return cfapi_h$constants$55.CryptEnumKeyIdentifierProperties$MH();
    }
    public static @C("BOOL") int CryptEnumKeyIdentifierProperties (@C("const CRYPT_HASH_BLOB*") Addressable pKeyIdentifier, @C("DWORD") int dwPropId, @C("DWORD") int dwFlags, @C("LPCWSTR") Addressable pwszComputerName, @C("void*") Addressable pvReserved, @C("void*") Addressable pvArg, @C("PFN_CRYPT_ENUM_KEYID_PROP") Addressable pfnEnum) {
        try {
            return (int)cfapi_h$constants$55.CryptEnumKeyIdentifierProperties$MH().invokeExact(pKeyIdentifier.address(), dwPropId, dwFlags, pwszComputerName.address(), pvReserved.address(), pvArg.address(), pfnEnum.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptCreateKeyIdentifierFromCSP$MH() {
        return cfapi_h$constants$55.CryptCreateKeyIdentifierFromCSP$MH();
    }
    public static @C("BOOL") int CryptCreateKeyIdentifierFromCSP (@C("DWORD") int dwCertEncodingType, @C("LPCSTR") Addressable pszPubKeyOID, @C("const PUBLICKEYSTRUC*") Addressable pPubKeyStruc, @C("DWORD") int cbPubKeyStruc, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved, @C("BYTE*") Addressable pbHash, @C("DWORD*") Addressable pcbHash) {
        try {
            return (int)cfapi_h$constants$55.CryptCreateKeyIdentifierFromCSP$MH().invokeExact(dwCertEncodingType, pszPubKeyOID.address(), pPubKeyStruc.address(), cbPubKeyStruc, dwFlags, pvReserved.address(), pbHash.address(), pcbHash.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCreateCertificateChainEngine$MH() {
        return cfapi_h$constants$55.CertCreateCertificateChainEngine$MH();
    }
    public static @C("BOOL") int CertCreateCertificateChainEngine (@C("PCERT_CHAIN_ENGINE_CONFIG") Addressable pConfig, @C("HCERTCHAINENGINE*") Addressable phChainEngine) {
        try {
            return (int)cfapi_h$constants$55.CertCreateCertificateChainEngine$MH().invokeExact(pConfig.address(), phChainEngine.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFreeCertificateChainEngine$MH() {
        return cfapi_h$constants$55.CertFreeCertificateChainEngine$MH();
    }
    public static void CertFreeCertificateChainEngine (@C("HCERTCHAINENGINE") Addressable hChainEngine) {
        try {
            cfapi_h$constants$55.CertFreeCertificateChainEngine$MH().invokeExact(hChainEngine.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertResyncCertificateChainEngine$MH() {
        return cfapi_h$constants$55.CertResyncCertificateChainEngine$MH();
    }
    public static @C("BOOL") int CertResyncCertificateChainEngine (@C("HCERTCHAINENGINE") Addressable hChainEngine) {
        try {
            return (int)cfapi_h$constants$55.CertResyncCertificateChainEngine$MH().invokeExact(hChainEngine.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetCertificateChain$MH() {
        return cfapi_h$constants$55.CertGetCertificateChain$MH();
    }
    public static @C("BOOL") int CertGetCertificateChain (@C("HCERTCHAINENGINE") Addressable hChainEngine, @C("PCCERT_CONTEXT") Addressable pCertContext, @C("LPFILETIME") Addressable pTime, @C("HCERTSTORE") Addressable hAdditionalStore, @C("PCERT_CHAIN_PARA") Addressable pChainPara, @C("DWORD") int dwFlags, @C("LPVOID") Addressable pvReserved, @C("PCCERT_CHAIN_CONTEXT*") Addressable ppChainContext) {
        try {
            return (int)cfapi_h$constants$55.CertGetCertificateChain$MH().invokeExact(hChainEngine.address(), pCertContext.address(), pTime.address(), hAdditionalStore.address(), pChainPara.address(), dwFlags, pvReserved.address(), ppChainContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFreeCertificateChain$MH() {
        return cfapi_h$constants$55.CertFreeCertificateChain$MH();
    }
    public static void CertFreeCertificateChain (@C("PCCERT_CHAIN_CONTEXT") Addressable pChainContext) {
        try {
            cfapi_h$constants$55.CertFreeCertificateChain$MH().invokeExact(pChainContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertDuplicateCertificateChain$MH() {
        return cfapi_h$constants$55.CertDuplicateCertificateChain$MH();
    }
    public static @C("PCCERT_CHAIN_CONTEXT") MemoryAddress CertDuplicateCertificateChain (@C("PCCERT_CHAIN_CONTEXT") Addressable pChainContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$55.CertDuplicateCertificateChain$MH().invokeExact(pChainContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFindChainInStore$MH() {
        return cfapi_h$constants$55.CertFindChainInStore$MH();
    }
    public static @C("PCCERT_CHAIN_CONTEXT") MemoryAddress CertFindChainInStore (@C("HCERTSTORE") Addressable hCertStore, @C("DWORD") int dwCertEncodingType, @C("DWORD") int dwFindFlags, @C("DWORD") int dwFindType, @C("void*") Addressable pvFindPara, @C("PCCERT_CHAIN_CONTEXT") Addressable pPrevChainContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$55.CertFindChainInStore$MH().invokeExact(hCertStore.address(), dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara.address(), pPrevChainContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertVerifyCertificateChainPolicy$MH() {
        return cfapi_h$constants$55.CertVerifyCertificateChainPolicy$MH();
    }
    public static @C("BOOL") int CertVerifyCertificateChainPolicy (@C("LPCSTR") Addressable pszPolicyOID, @C("PCCERT_CHAIN_CONTEXT") Addressable pChainContext, @C("PCERT_CHAIN_POLICY_PARA") Addressable pPolicyPara, @C("PCERT_CHAIN_POLICY_STATUS") Addressable pPolicyStatus) {
        try {
            return (int)cfapi_h$constants$55.CertVerifyCertificateChainPolicy$MH().invokeExact(pszPolicyOID.address(), pChainContext.address(), pPolicyPara.address(), pPolicyStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptStringToBinaryA$MH() {
        return cfapi_h$constants$55.CryptStringToBinaryA$MH();
    }
    public static @C("BOOL") int CryptStringToBinaryA (@C("LPCSTR") Addressable pszString, @C("DWORD") int cchString, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbBinary, @C("DWORD*") Addressable pcbBinary, @C("DWORD*") Addressable pdwSkip, @C("DWORD*") Addressable pdwFlags) {
        try {
            return (int)cfapi_h$constants$55.CryptStringToBinaryA$MH().invokeExact(pszString.address(), cchString, dwFlags, pbBinary.address(), pcbBinary.address(), pdwSkip.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptStringToBinaryW$MH() {
        return cfapi_h$constants$55.CryptStringToBinaryW$MH();
    }
    public static @C("BOOL") int CryptStringToBinaryW (@C("LPCWSTR") Addressable pszString, @C("DWORD") int cchString, @C("DWORD") int dwFlags, @C("BYTE*") Addressable pbBinary, @C("DWORD*") Addressable pcbBinary, @C("DWORD*") Addressable pdwSkip, @C("DWORD*") Addressable pdwFlags) {
        try {
            return (int)cfapi_h$constants$55.CryptStringToBinaryW$MH().invokeExact(pszString.address(), cchString, dwFlags, pbBinary.address(), pcbBinary.address(), pdwSkip.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptBinaryToStringA$MH() {
        return cfapi_h$constants$55.CryptBinaryToStringA$MH();
    }
    public static @C("BOOL") int CryptBinaryToStringA (@C("const BYTE*") Addressable pbBinary, @C("DWORD") int cbBinary, @C("DWORD") int dwFlags, @C("LPSTR") Addressable pszString, @C("DWORD*") Addressable pcchString) {
        try {
            return (int)cfapi_h$constants$55.CryptBinaryToStringA$MH().invokeExact(pbBinary.address(), cbBinary, dwFlags, pszString.address(), pcchString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptBinaryToStringW$MH() {
        return cfapi_h$constants$55.CryptBinaryToStringW$MH();
    }
    public static @C("BOOL") int CryptBinaryToStringW (@C("const BYTE*") Addressable pbBinary, @C("DWORD") int cbBinary, @C("DWORD") int dwFlags, @C("LPWSTR") Addressable pszString, @C("DWORD*") Addressable pcchString) {
        try {
            return (int)cfapi_h$constants$55.CryptBinaryToStringW$MH().invokeExact(pbBinary.address(), cbBinary, dwFlags, pszString.address(), pcchString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PFXImportCertStore$MH() {
        return cfapi_h$constants$55.PFXImportCertStore$MH();
    }
    public static @C("HCERTSTORE") MemoryAddress PFXImportCertStore (@C("CRYPT_DATA_BLOB*") Addressable pPFX, @C("LPCWSTR") Addressable szPassword, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$55.PFXImportCertStore$MH().invokeExact(pPFX.address(), szPassword.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PFXIsPFXBlob$MH() {
        return cfapi_h$constants$55.PFXIsPFXBlob$MH();
    }
    public static @C("BOOL") int PFXIsPFXBlob (@C("CRYPT_DATA_BLOB*") Addressable pPFX) {
        try {
            return (int)cfapi_h$constants$55.PFXIsPFXBlob$MH().invokeExact(pPFX.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PFXVerifyPassword$MH() {
        return cfapi_h$constants$55.PFXVerifyPassword$MH();
    }
    public static @C("BOOL") int PFXVerifyPassword (@C("CRYPT_DATA_BLOB*") Addressable pPFX, @C("LPCWSTR") Addressable szPassword, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$55.PFXVerifyPassword$MH().invokeExact(pPFX.address(), szPassword.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PFXExportCertStoreEx$MH() {
        return cfapi_h$constants$55.PFXExportCertStoreEx$MH();
    }
    public static @C("BOOL") int PFXExportCertStoreEx (@C("HCERTSTORE") Addressable hStore, @C("CRYPT_DATA_BLOB*") Addressable pPFX, @C("LPCWSTR") Addressable szPassword, @C("void*") Addressable pvPara, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$55.PFXExportCertStoreEx$MH().invokeExact(hStore.address(), pPFX.address(), szPassword.address(), pvPara.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PFXExportCertStore$MH() {
        return cfapi_h$constants$55.PFXExportCertStore$MH();
    }
    public static @C("BOOL") int PFXExportCertStore (@C("HCERTSTORE") Addressable hStore, @C("CRYPT_DATA_BLOB*") Addressable pPFX, @C("LPCWSTR") Addressable szPassword, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$55.PFXExportCertStore$MH().invokeExact(hStore.address(), pPFX.address(), szPassword.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertOpenServerOcspResponse$MH() {
        return cfapi_h$constants$55.CertOpenServerOcspResponse$MH();
    }
    public static @C("HCERT_SERVER_OCSP_RESPONSE") MemoryAddress CertOpenServerOcspResponse (@C("PCCERT_CHAIN_CONTEXT") Addressable pChainContext, @C("DWORD") int dwFlags, @C("PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA") Addressable pOpenPara) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$55.CertOpenServerOcspResponse$MH().invokeExact(pChainContext.address(), dwFlags, pOpenPara.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddRefServerOcspResponse$MH() {
        return cfapi_h$constants$55.CertAddRefServerOcspResponse$MH();
    }
    public static void CertAddRefServerOcspResponse (@C("HCERT_SERVER_OCSP_RESPONSE") Addressable hServerOcspResponse) {
        try {
            cfapi_h$constants$55.CertAddRefServerOcspResponse$MH().invokeExact(hServerOcspResponse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertCloseServerOcspResponse$MH() {
        return cfapi_h$constants$55.CertCloseServerOcspResponse$MH();
    }
    public static void CertCloseServerOcspResponse (@C("HCERT_SERVER_OCSP_RESPONSE") Addressable hServerOcspResponse, @C("DWORD") int dwFlags) {
        try {
            cfapi_h$constants$55.CertCloseServerOcspResponse$MH().invokeExact(hServerOcspResponse.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertGetServerOcspResponseContext$MH() {
        return cfapi_h$constants$55.CertGetServerOcspResponseContext$MH();
    }
    public static @C("PCCERT_SERVER_OCSP_RESPONSE_CONTEXT") MemoryAddress CertGetServerOcspResponseContext (@C("HCERT_SERVER_OCSP_RESPONSE") Addressable hServerOcspResponse, @C("DWORD") int dwFlags, @C("LPVOID") Addressable pvReserved) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$55.CertGetServerOcspResponseContext$MH().invokeExact(hServerOcspResponse.address(), dwFlags, pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertAddRefServerOcspResponseContext$MH() {
        return cfapi_h$constants$55.CertAddRefServerOcspResponseContext$MH();
    }
    public static void CertAddRefServerOcspResponseContext (@C("PCCERT_SERVER_OCSP_RESPONSE_CONTEXT") Addressable pServerOcspResponseContext) {
        try {
            cfapi_h$constants$55.CertAddRefServerOcspResponseContext$MH().invokeExact(pServerOcspResponseContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFreeServerOcspResponseContext$MH() {
        return cfapi_h$constants$55.CertFreeServerOcspResponseContext$MH();
    }
    public static void CertFreeServerOcspResponseContext (@C("PCCERT_SERVER_OCSP_RESPONSE_CONTEXT") Addressable pServerOcspResponseContext) {
        try {
            cfapi_h$constants$55.CertFreeServerOcspResponseContext$MH().invokeExact(pServerOcspResponseContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertRetrieveLogoOrBiometricInfo$MH() {
        return cfapi_h$constants$55.CertRetrieveLogoOrBiometricInfo$MH();
    }
    public static @C("BOOL") int CertRetrieveLogoOrBiometricInfo (@C("PCCERT_CONTEXT") Addressable pCertContext, @C("LPCSTR") Addressable lpszLogoOrBiometricType, @C("DWORD") int dwRetrievalFlags, @C("DWORD") int dwTimeout, @C("DWORD") int dwFlags, @C("void*") Addressable pvReserved, @C("BYTE**") Addressable ppbData, @C("DWORD*") Addressable pcbData, @C("LPWSTR*") Addressable ppwszMimeType) {
        try {
            return (int)cfapi_h$constants$55.CertRetrieveLogoOrBiometricInfo$MH().invokeExact(pCertContext.address(), lpszLogoOrBiometricType.address(), dwRetrievalFlags, dwTimeout, dwFlags, pvReserved.address(), ppbData.address(), pcbData.address(), ppwszMimeType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertSelectCertificateChains$MH() {
        return cfapi_h$constants$55.CertSelectCertificateChains$MH();
    }
    public static @C("BOOL") int CertSelectCertificateChains (@C("LPCGUID") Addressable pSelectionContext, @C("DWORD") int dwFlags, @C("PCCERT_SELECT_CHAIN_PARA") Addressable pChainParameters, @C("DWORD") int cCriteria, @C("PCCERT_SELECT_CRITERIA") Addressable rgpCriteria, @C("HCERTSTORE") Addressable hStore, @C("PDWORD") Addressable pcSelection, @C("PCCERT_CHAIN_CONTEXT**") Addressable pprgpSelection) {
        try {
            return (int)cfapi_h$constants$55.CertSelectCertificateChains$MH().invokeExact(pSelectionContext.address(), dwFlags, pChainParameters.address(), cCriteria, rgpCriteria.address(), hStore.address(), pcSelection.address(), pprgpSelection.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertFreeCertificateChainList$MH() {
        return cfapi_h$constants$55.CertFreeCertificateChainList$MH();
    }
    public static void CertFreeCertificateChainList (@C("PCCERT_CHAIN_CONTEXT*") Addressable prgpSelection) {
        try {
            cfapi_h$constants$55.CertFreeCertificateChainList$MH().invokeExact(prgpSelection.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptRetrieveTimeStamp$MH() {
        return cfapi_h$constants$56.CryptRetrieveTimeStamp$MH();
    }
    public static @C("BOOL") int CryptRetrieveTimeStamp (@C("LPCWSTR") Addressable wszUrl, @C("DWORD") int dwRetrievalFlags, @C("DWORD") int dwTimeout, @C("LPCSTR") Addressable pszHashId, @C("const CRYPT_TIMESTAMP_PARA*") Addressable pPara, @C("const BYTE*") Addressable pbData, @C("DWORD") int cbData, @C("PCRYPT_TIMESTAMP_CONTEXT*") Addressable ppTsContext, @C("PCCERT_CONTEXT*") Addressable ppTsSigner, @C("HCERTSTORE*") Addressable phStore) {
        try {
            return (int)cfapi_h$constants$56.CryptRetrieveTimeStamp$MH().invokeExact(wszUrl.address(), dwRetrievalFlags, dwTimeout, pszHashId.address(), pPara.address(), pbData.address(), cbData, ppTsContext.address(), ppTsSigner.address(), phStore.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptVerifyTimeStampSignature$MH() {
        return cfapi_h$constants$56.CryptVerifyTimeStampSignature$MH();
    }
    public static @C("BOOL") int CryptVerifyTimeStampSignature (@C("const BYTE*") Addressable pbTSContentInfo, @C("DWORD") int cbTSContentInfo, @C("const BYTE*") Addressable pbData, @C("DWORD") int cbData, @C("HCERTSTORE") Addressable hAdditionalStore, @C("PCRYPT_TIMESTAMP_CONTEXT*") Addressable ppTsContext, @C("PCCERT_CONTEXT*") Addressable ppTsSigner, @C("HCERTSTORE*") Addressable phStore) {
        try {
            return (int)cfapi_h$constants$56.CryptVerifyTimeStampSignature$MH().invokeExact(pbTSContentInfo.address(), cbTSContentInfo, pbData.address(), cbData, hAdditionalStore.address(), ppTsContext.address(), ppTsSigner.address(), phStore.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CertIsWeakHash$MH() {
        return cfapi_h$constants$56.CertIsWeakHash$MH();
    }
    public static @C("BOOL") int CertIsWeakHash (@C("DWORD") int dwHashUseType, @C("LPCWSTR") Addressable pwszCNGHashAlgid, @C("DWORD") int dwChainFlags, @C("PCCERT_CHAIN_CONTEXT") Addressable pSignerChainContext, @C("LPFILETIME") Addressable pTimeStamp, @C("LPCWSTR") Addressable pwszFileName) {
        try {
            return (int)cfapi_h$constants$56.CertIsWeakHash$MH().invokeExact(dwHashUseType, pwszCNGHashAlgid.address(), dwChainFlags, pSignerChainContext.address(), pTimeStamp.address(), pwszFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptProtectData$MH() {
        return cfapi_h$constants$56.CryptProtectData$MH();
    }
    public static @C("BOOL") int CryptProtectData (@C("DATA_BLOB*") Addressable pDataIn, @C("LPCWSTR") Addressable szDataDescr, @C("DATA_BLOB*") Addressable pOptionalEntropy, @C("PVOID") Addressable pvReserved, @C("CRYPTPROTECT_PROMPTSTRUCT*") Addressable pPromptStruct, @C("DWORD") int dwFlags, @C("DATA_BLOB*") Addressable pDataOut) {
        try {
            return (int)cfapi_h$constants$56.CryptProtectData$MH().invokeExact(pDataIn.address(), szDataDescr.address(), pOptionalEntropy.address(), pvReserved.address(), pPromptStruct.address(), dwFlags, pDataOut.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptUnprotectData$MH() {
        return cfapi_h$constants$56.CryptUnprotectData$MH();
    }
    public static @C("BOOL") int CryptUnprotectData (@C("DATA_BLOB*") Addressable pDataIn, @C("LPWSTR*") Addressable ppszDataDescr, @C("DATA_BLOB*") Addressable pOptionalEntropy, @C("PVOID") Addressable pvReserved, @C("CRYPTPROTECT_PROMPTSTRUCT*") Addressable pPromptStruct, @C("DWORD") int dwFlags, @C("DATA_BLOB*") Addressable pDataOut) {
        try {
            return (int)cfapi_h$constants$56.CryptUnprotectData$MH().invokeExact(pDataIn.address(), ppszDataDescr.address(), pOptionalEntropy.address(), pvReserved.address(), pPromptStruct.address(), dwFlags, pDataOut.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptProtectDataNoUI$MH() {
        return cfapi_h$constants$56.CryptProtectDataNoUI$MH();
    }
    public static @C("BOOL") int CryptProtectDataNoUI (@C("DATA_BLOB*") Addressable pDataIn, @C("LPCWSTR") Addressable szDataDescr, @C("DATA_BLOB*") Addressable pOptionalEntropy, @C("PVOID") Addressable pvReserved, @C("CRYPTPROTECT_PROMPTSTRUCT*") Addressable pPromptStruct, @C("DWORD") int dwFlags, @C("const BYTE*") Addressable pbOptionalPassword, @C("DWORD") int cbOptionalPassword, @C("DATA_BLOB*") Addressable pDataOut) {
        try {
            return (int)cfapi_h$constants$56.CryptProtectDataNoUI$MH().invokeExact(pDataIn.address(), szDataDescr.address(), pOptionalEntropy.address(), pvReserved.address(), pPromptStruct.address(), dwFlags, pbOptionalPassword.address(), cbOptionalPassword, pDataOut.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptUnprotectDataNoUI$MH() {
        return cfapi_h$constants$56.CryptUnprotectDataNoUI$MH();
    }
    public static @C("BOOL") int CryptUnprotectDataNoUI (@C("DATA_BLOB*") Addressable pDataIn, @C("LPWSTR*") Addressable ppszDataDescr, @C("DATA_BLOB*") Addressable pOptionalEntropy, @C("PVOID") Addressable pvReserved, @C("CRYPTPROTECT_PROMPTSTRUCT*") Addressable pPromptStruct, @C("DWORD") int dwFlags, @C("const BYTE*") Addressable pbOptionalPassword, @C("DWORD") int cbOptionalPassword, @C("DATA_BLOB*") Addressable pDataOut) {
        try {
            return (int)cfapi_h$constants$56.CryptUnprotectDataNoUI$MH().invokeExact(pDataIn.address(), ppszDataDescr.address(), pOptionalEntropy.address(), pvReserved.address(), pPromptStruct.address(), dwFlags, pbOptionalPassword.address(), cbOptionalPassword, pDataOut.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptUpdateProtectedState$MH() {
        return cfapi_h$constants$56.CryptUpdateProtectedState$MH();
    }
    public static @C("BOOL") int CryptUpdateProtectedState (@C("PSID") Addressable pOldSid, @C("LPCWSTR") Addressable pwszOldPassword, @C("DWORD") int dwFlags, @C("DWORD*") Addressable pdwSuccessCount, @C("DWORD*") Addressable pdwFailureCount) {
        try {
            return (int)cfapi_h$constants$56.CryptUpdateProtectedState$MH().invokeExact(pOldSid.address(), pwszOldPassword.address(), dwFlags, pdwSuccessCount.address(), pdwFailureCount.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptProtectMemory$MH() {
        return cfapi_h$constants$56.CryptProtectMemory$MH();
    }
    public static @C("BOOL") int CryptProtectMemory (@C("LPVOID") Addressable pDataIn, @C("DWORD") int cbDataIn, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$56.CryptProtectMemory$MH().invokeExact(pDataIn.address(), cbDataIn, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CryptUnprotectMemory$MH() {
        return cfapi_h$constants$56.CryptUnprotectMemory$MH();
    }
    public static @C("BOOL") int CryptUnprotectMemory (@C("LPVOID") Addressable pDataIn, @C("DWORD") int cbDataIn, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$56.CryptUnprotectMemory$MH().invokeExact(pDataIn.address(), cbDataIn, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryUsersOnEncryptedFile$MH() {
        return cfapi_h$constants$56.QueryUsersOnEncryptedFile$MH();
    }
    public static @C("DWORD") int QueryUsersOnEncryptedFile (@C("LPCWSTR") Addressable lpFileName, @C("PENCRYPTION_CERTIFICATE_HASH_LIST*") Addressable pUsers) {
        try {
            return (int)cfapi_h$constants$56.QueryUsersOnEncryptedFile$MH().invokeExact(lpFileName.address(), pUsers.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryRecoveryAgentsOnEncryptedFile$MH() {
        return cfapi_h$constants$56.QueryRecoveryAgentsOnEncryptedFile$MH();
    }
    public static @C("DWORD") int QueryRecoveryAgentsOnEncryptedFile (@C("LPCWSTR") Addressable lpFileName, @C("PENCRYPTION_CERTIFICATE_HASH_LIST*") Addressable pRecoveryAgents) {
        try {
            return (int)cfapi_h$constants$56.QueryRecoveryAgentsOnEncryptedFile$MH().invokeExact(lpFileName.address(), pRecoveryAgents.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveUsersFromEncryptedFile$MH() {
        return cfapi_h$constants$56.RemoveUsersFromEncryptedFile$MH();
    }
    public static @C("DWORD") int RemoveUsersFromEncryptedFile (@C("LPCWSTR") Addressable lpFileName, @C("PENCRYPTION_CERTIFICATE_HASH_LIST") Addressable pHashes) {
        try {
            return (int)cfapi_h$constants$56.RemoveUsersFromEncryptedFile$MH().invokeExact(lpFileName.address(), pHashes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddUsersToEncryptedFile$MH() {
        return cfapi_h$constants$56.AddUsersToEncryptedFile$MH();
    }
    public static @C("DWORD") int AddUsersToEncryptedFile (@C("LPCWSTR") Addressable lpFileName, @C("PENCRYPTION_CERTIFICATE_LIST") Addressable pEncryptionCertificates) {
        try {
            return (int)cfapi_h$constants$56.AddUsersToEncryptedFile$MH().invokeExact(lpFileName.address(), pEncryptionCertificates.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUserFileEncryptionKey$MH() {
        return cfapi_h$constants$56.SetUserFileEncryptionKey$MH();
    }
    public static @C("DWORD") int SetUserFileEncryptionKey (@C("PENCRYPTION_CERTIFICATE") Addressable pEncryptionCertificate) {
        try {
            return (int)cfapi_h$constants$56.SetUserFileEncryptionKey$MH().invokeExact(pEncryptionCertificate.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUserFileEncryptionKeyEx$MH() {
        return cfapi_h$constants$56.SetUserFileEncryptionKeyEx$MH();
    }
    public static @C("DWORD") int SetUserFileEncryptionKeyEx (@C("PENCRYPTION_CERTIFICATE") Addressable pEncryptionCertificate, @C("DWORD") int dwCapabilities, @C("DWORD") int dwFlags, @C("LPVOID") Addressable pvReserved) {
        try {
            return (int)cfapi_h$constants$56.SetUserFileEncryptionKeyEx$MH().invokeExact(pEncryptionCertificate.address(), dwCapabilities, dwFlags, pvReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeEncryptionCertificateHashList$MH() {
        return cfapi_h$constants$56.FreeEncryptionCertificateHashList$MH();
    }
    public static void FreeEncryptionCertificateHashList (@C("PENCRYPTION_CERTIFICATE_HASH_LIST") Addressable pUsers) {
        try {
            cfapi_h$constants$56.FreeEncryptionCertificateHashList$MH().invokeExact(pUsers.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EncryptionDisable$MH() {
        return cfapi_h$constants$56.EncryptionDisable$MH();
    }
    public static @C("BOOL") int EncryptionDisable (@C("LPCWSTR") Addressable DirPath, @C("BOOL") int Disable) {
        try {
            return (int)cfapi_h$constants$56.EncryptionDisable$MH().invokeExact(DirPath.address(), Disable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DuplicateEncryptionInfoFile$MH() {
        return cfapi_h$constants$56.DuplicateEncryptionInfoFile$MH();
    }
    public static @C("DWORD") int DuplicateEncryptionInfoFile (@C("LPCWSTR") Addressable SrcFileName, @C("LPCWSTR") Addressable DstFileName, @C("DWORD") int dwCreationDistribution, @C("DWORD") int dwAttributes, @C("const LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$56.DuplicateEncryptionInfoFile$MH().invokeExact(SrcFileName.address(), DstFileName.address(), dwCreationDistribution, dwAttributes, lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEncryptedFileMetadata$MH() {
        return cfapi_h$constants$56.GetEncryptedFileMetadata$MH();
    }
    public static @C("DWORD") int GetEncryptedFileMetadata (@C("LPCWSTR") Addressable lpFileName, @C("PDWORD") Addressable pcbMetadata, @C("PBYTE*") Addressable ppbMetadata) {
        try {
            return (int)cfapi_h$constants$56.GetEncryptedFileMetadata$MH().invokeExact(lpFileName.address(), pcbMetadata.address(), ppbMetadata.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEncryptedFileMetadata$MH() {
        return cfapi_h$constants$56.SetEncryptedFileMetadata$MH();
    }
    public static @C("DWORD") int SetEncryptedFileMetadata (@C("LPCWSTR") Addressable lpFileName, @C("PBYTE") Addressable pbOldMetadata, @C("PBYTE") Addressable pbNewMetadata, @C("PENCRYPTION_CERTIFICATE_HASH") Addressable pOwnerHash, @C("DWORD") int dwOperation, @C("PENCRYPTION_CERTIFICATE_HASH_LIST") Addressable pCertificatesAdded) {
        try {
            return (int)cfapi_h$constants$56.SetEncryptedFileMetadata$MH().invokeExact(lpFileName.address(), pbOldMetadata.address(), pbNewMetadata.address(), pOwnerHash.address(), dwOperation, pCertificatesAdded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeEncryptedFileMetadata$MH() {
        return cfapi_h$constants$56.FreeEncryptedFileMetadata$MH();
    }
    public static void FreeEncryptedFileMetadata (@C("PBYTE") Addressable pbMetadata) {
        try {
            cfapi_h$constants$56.FreeEncryptedFileMetadata$MH().invokeExact(pbMetadata.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle I_RpcNsGetBuffer$MH() {
        return cfapi_h$constants$56.I_RpcNsGetBuffer$MH();
    }
    public static @C("RPC_STATUS") int I_RpcNsGetBuffer (@C("PRPC_MESSAGE") Addressable Message) {
        try {
            return (int)cfapi_h$constants$56.I_RpcNsGetBuffer$MH().invokeExact(Message.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle I_RpcNsSendReceive$MH() {
        return cfapi_h$constants$56.I_RpcNsSendReceive$MH();
    }
    public static @C("RPC_STATUS") int I_RpcNsSendReceive (@C("PRPC_MESSAGE") Addressable Message, @C("RPC_BINDING_HANDLE*") Addressable Handle) {
        try {
            return (int)cfapi_h$constants$56.I_RpcNsSendReceive$MH().invokeExact(Message.address(), Handle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle I_RpcNsRaiseException$MH() {
        return cfapi_h$constants$56.I_RpcNsRaiseException$MH();
    }
    public static void I_RpcNsRaiseException (@C("PRPC_MESSAGE") Addressable Message, @C("RPC_STATUS") int Status) {
        try {
            cfapi_h$constants$56.I_RpcNsRaiseException$MH().invokeExact(Message.address(), Status);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle I_RpcReBindBuffer$MH() {
        return cfapi_h$constants$56.I_RpcReBindBuffer$MH();
    }
    public static @C("RPC_STATUS") int I_RpcReBindBuffer (@C("PRPC_MESSAGE") Addressable Message) {
        try {
            return (int)cfapi_h$constants$56.I_RpcReBindBuffer$MH().invokeExact(Message.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle I_NsServerBindSearch$MH() {
        return cfapi_h$constants$56.I_NsServerBindSearch$MH();
    }
    public static @C("RPC_STATUS") int I_NsServerBindSearch () {
        try {
            return (int)cfapi_h$constants$56.I_NsServerBindSearch$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle I_NsClientBindSearch$MH() {
        return cfapi_h$constants$56.I_NsClientBindSearch$MH();
    }
    public static @C("RPC_STATUS") int I_NsClientBindSearch () {
        try {
            return (int)cfapi_h$constants$56.I_NsClientBindSearch$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle I_NsClientBindDone$MH() {
        return cfapi_h$constants$56.I_NsClientBindDone$MH();
    }
    public static void I_NsClientBindDone () {
        try {
            cfapi_h$constants$56.I_NsClientBindDone$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MIDL_user_allocate$MH() {
        return cfapi_h$constants$56.MIDL_user_allocate$MH();
    }
    public static @C("void*") MemoryAddress MIDL_user_allocate (@C("size_t") long size) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$56.MIDL_user_allocate$MH().invokeExact(size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MIDL_user_free$MH() {
        return cfapi_h$constants$56.MIDL_user_free$MH();
    }
    public static void MIDL_user_free (@C("void*") Addressable x0) {
        try {
            cfapi_h$constants$56.MIDL_user_free$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle I_RpcDefaultAllocate$MH() {
        return cfapi_h$constants$56.I_RpcDefaultAllocate$MH();
    }
    public static @C("void*") MemoryAddress I_RpcDefaultAllocate (@C("handle_t") Addressable bh, @C("size_t") long size, @C("void*(*)(size_t)") Addressable RealAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$56.I_RpcDefaultAllocate$MH().invokeExact(bh.address(), size, RealAlloc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle I_RpcDefaultFree$MH() {
        return cfapi_h$constants$56.I_RpcDefaultFree$MH();
    }
    public static void I_RpcDefaultFree (@C("handle_t") Addressable bh, @C("void*") Addressable x1, @C("void(*)(void*)") Addressable RealFree) {
        try {
            cfapi_h$constants$56.I_RpcDefaultFree$MH().invokeExact(bh.address(), x1.address(), RealFree.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRCContextBinding$MH() {
        return cfapi_h$constants$56.NDRCContextBinding$MH();
    }
    public static @C("RPC_BINDING_HANDLE") MemoryAddress NDRCContextBinding (@C("NDR_CCONTEXT") Addressable CContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$56.NDRCContextBinding$MH().invokeExact(CContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRCContextMarshall$MH() {
        return cfapi_h$constants$56.NDRCContextMarshall$MH();
    }
    public static void NDRCContextMarshall (@C("NDR_CCONTEXT") Addressable CContext, @C("void*") Addressable pBuff) {
        try {
            cfapi_h$constants$56.NDRCContextMarshall$MH().invokeExact(CContext.address(), pBuff.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRCContextUnmarshall$MH() {
        return cfapi_h$constants$56.NDRCContextUnmarshall$MH();
    }
    public static void NDRCContextUnmarshall (@C("NDR_CCONTEXT*") Addressable pCContext, @C("RPC_BINDING_HANDLE") Addressable hBinding, @C("void*") Addressable pBuff, @C("unsigned long") int DataRepresentation) {
        try {
            cfapi_h$constants$56.NDRCContextUnmarshall$MH().invokeExact(pCContext.address(), hBinding.address(), pBuff.address(), DataRepresentation);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRCContextUnmarshall2$MH() {
        return cfapi_h$constants$56.NDRCContextUnmarshall2$MH();
    }
    public static void NDRCContextUnmarshall2 (@C("NDR_CCONTEXT*") Addressable pCContext, @C("RPC_BINDING_HANDLE") Addressable hBinding, @C("void*") Addressable pBuff, @C("unsigned long") int DataRepresentation) {
        try {
            cfapi_h$constants$56.NDRCContextUnmarshall2$MH().invokeExact(pCContext.address(), hBinding.address(), pBuff.address(), DataRepresentation);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRSContextMarshall$MH() {
        return cfapi_h$constants$56.NDRSContextMarshall$MH();
    }
    public static void NDRSContextMarshall (@C("NDR_SCONTEXT") Addressable CContext, @C("void*") Addressable pBuff, @C("NDR_RUNDOWN") Addressable userRunDownIn) {
        try {
            cfapi_h$constants$56.NDRSContextMarshall$MH().invokeExact(CContext.address(), pBuff.address(), userRunDownIn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRSContextUnmarshall$MH() {
        return cfapi_h$constants$56.NDRSContextUnmarshall$MH();
    }
    public static @C("NDR_SCONTEXT") MemoryAddress NDRSContextUnmarshall (@C("void*") Addressable pBuff, @C("unsigned long") int DataRepresentation) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$56.NDRSContextUnmarshall$MH().invokeExact(pBuff.address(), DataRepresentation);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRSContextMarshallEx$MH() {
        return cfapi_h$constants$56.NDRSContextMarshallEx$MH();
    }
    public static void NDRSContextMarshallEx (@C("RPC_BINDING_HANDLE") Addressable BindingHandle, @C("NDR_SCONTEXT") Addressable CContext, @C("void*") Addressable pBuff, @C("NDR_RUNDOWN") Addressable userRunDownIn) {
        try {
            cfapi_h$constants$56.NDRSContextMarshallEx$MH().invokeExact(BindingHandle.address(), CContext.address(), pBuff.address(), userRunDownIn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRSContextMarshall2$MH() {
        return cfapi_h$constants$56.NDRSContextMarshall2$MH();
    }
    public static void NDRSContextMarshall2 (@C("RPC_BINDING_HANDLE") Addressable BindingHandle, @C("NDR_SCONTEXT") Addressable CContext, @C("void*") Addressable pBuff, @C("NDR_RUNDOWN") Addressable userRunDownIn, @C("void*") Addressable CtxGuard, @C("unsigned long") int Flags) {
        try {
            cfapi_h$constants$56.NDRSContextMarshall2$MH().invokeExact(BindingHandle.address(), CContext.address(), pBuff.address(), userRunDownIn.address(), CtxGuard.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRSContextUnmarshallEx$MH() {
        return cfapi_h$constants$56.NDRSContextUnmarshallEx$MH();
    }
    public static @C("NDR_SCONTEXT") MemoryAddress NDRSContextUnmarshallEx (@C("RPC_BINDING_HANDLE") Addressable BindingHandle, @C("void*") Addressable pBuff, @C("unsigned long") int DataRepresentation) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$56.NDRSContextUnmarshallEx$MH().invokeExact(BindingHandle.address(), pBuff.address(), DataRepresentation);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NDRSContextUnmarshall2$MH() {
        return cfapi_h$constants$56.NDRSContextUnmarshall2$MH();
    }
    public static @C("NDR_SCONTEXT") MemoryAddress NDRSContextUnmarshall2 (@C("RPC_BINDING_HANDLE") Addressable BindingHandle, @C("void*") Addressable pBuff, @C("unsigned long") int DataRepresentation, @C("void*") Addressable CtxGuard, @C("unsigned long") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$56.NDRSContextUnmarshall2$MH().invokeExact(BindingHandle.address(), pBuff.address(), DataRepresentation, CtxGuard.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RpcSsDestroyClientContext$MH() {
        return cfapi_h$constants$56.RpcSsDestroyClientContext$MH();
    }
    public static void RpcSsDestroyClientContext (@C("void**") Addressable ContextHandle) {
        try {
            cfapi_h$constants$56.RpcSsDestroyClientContext$MH().invokeExact(ContextHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int USER_MARSHAL_CB_BUFFER_SIZE() {
        return cfapi_h$constants$56.USER_MARSHAL_CB_BUFFER_SIZE();
    }
    public static @C("int") int USER_MARSHAL_CB_MARSHALL() {
        return cfapi_h$constants$56.USER_MARSHAL_CB_MARSHALL();
    }
    public static @C("int") int USER_MARSHAL_CB_UNMARSHALL() {
        return cfapi_h$constants$56.USER_MARSHAL_CB_UNMARSHALL();
    }
    public static @C("int") int USER_MARSHAL_CB_FREE() {
        return cfapi_h$constants$56.USER_MARSHAL_CB_FREE();
    }
    public static @C("int") int IDL_CS_NO_CONVERT() {
        return cfapi_h$constants$56.IDL_CS_NO_CONVERT();
    }
    public static @C("int") int IDL_CS_IN_PLACE_CONVERT() {
        return cfapi_h$constants$56.IDL_CS_IN_PLACE_CONVERT();
    }
    public static @C("int") int IDL_CS_NEW_BUFFER_CONVERT() {
        return cfapi_h$constants$56.IDL_CS_NEW_BUFFER_CONVERT();
    }
    public static  MethodHandle RpcCsGetTags$MH() {
        return cfapi_h$constants$56.RpcCsGetTags$MH();
    }
    public static void RpcCsGetTags (@C("RPC_BINDING_HANDLE") Addressable hBinding, @C("int") int fServerSide, @C("unsigned long*") Addressable pulSendingTag, @C("unsigned long*") Addressable pulDesiredReceivingTag, @C("unsigned long*") Addressable pulReceivingTag, @C("error_status_t*") Addressable pStatus) {
        try {
            cfapi_h$constants$56.RpcCsGetTags$MH().invokeExact(hBinding.address(), fServerSide, pulSendingTag.address(), pulDesiredReceivingTag.address(), pulReceivingTag.address(), pStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int XLAT_SERVER() {
        return cfapi_h$constants$57.XLAT_SERVER();
    }
    public static @C("int") int XLAT_CLIENT() {
        return cfapi_h$constants$57.XLAT_CLIENT();
    }
    public static @C("int") int SYSTEM_HANDLE_FILE() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_FILE();
    }
    public static @C("int") int SYSTEM_HANDLE_SEMAPHORE() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_SEMAPHORE();
    }
    public static @C("int") int SYSTEM_HANDLE_EVENT() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_EVENT();
    }
    public static @C("int") int SYSTEM_HANDLE_MUTEX() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_MUTEX();
    }
    public static @C("int") int SYSTEM_HANDLE_PROCESS() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_PROCESS();
    }
    public static @C("int") int SYSTEM_HANDLE_TOKEN() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_TOKEN();
    }
    public static @C("int") int SYSTEM_HANDLE_SECTION() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_SECTION();
    }
    public static @C("int") int SYSTEM_HANDLE_REG_KEY() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_REG_KEY();
    }
    public static @C("int") int SYSTEM_HANDLE_THREAD() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_THREAD();
    }
    public static @C("int") int SYSTEM_HANDLE_COMPOSITION_OBJECT() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_COMPOSITION_OBJECT();
    }
    public static @C("int") int SYSTEM_HANDLE_SOCKET() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_SOCKET();
    }
    public static @C("int") int SYSTEM_HANDLE_JOB() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_JOB();
    }
    public static @C("int") int SYSTEM_HANDLE_PIPE() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_PIPE();
    }
    public static @C("int") int SYSTEM_HANDLE_MAX() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_MAX();
    }
    public static @C("int") int SYSTEM_HANDLE_INVALID() {
        return cfapi_h$constants$57.SYSTEM_HANDLE_INVALID();
    }
    public static @C("int") int MidlInterceptionInfoVersionOne() {
        return cfapi_h$constants$57.MidlInterceptionInfoVersionOne();
    }
    public static @C("int") int MidlWinrtTypeSerializationInfoVersionOne() {
        return cfapi_h$constants$57.MidlWinrtTypeSerializationInfoVersionOne();
    }
    public static  MethodHandle NdrClientGetSupportedSyntaxes$MH() {
        return cfapi_h$constants$57.NdrClientGetSupportedSyntaxes$MH();
    }
    public static @C("RPC_STATUS") int NdrClientGetSupportedSyntaxes (@C("RPC_CLIENT_INTERFACE*") Addressable pInf, @C("unsigned long*") Addressable pCount, @C("MIDL_SYNTAX_INFO**") Addressable pArr) {
        try {
            return (int)cfapi_h$constants$57.NdrClientGetSupportedSyntaxes$MH().invokeExact(pInf.address(), pCount.address(), pArr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrServerGetSupportedSyntaxes$MH() {
        return cfapi_h$constants$57.NdrServerGetSupportedSyntaxes$MH();
    }
    public static @C("RPC_STATUS") int NdrServerGetSupportedSyntaxes (@C("RPC_SERVER_INTERFACE*") Addressable pInf, @C("unsigned long*") Addressable pCount, @C("MIDL_SYNTAX_INFO**") Addressable pArr, @C("unsigned long*") Addressable pPreferSyntaxIndex) {
        try {
            return (int)cfapi_h$constants$57.NdrServerGetSupportedSyntaxes$MH().invokeExact(pInf.address(), pCount.address(), pArr.address(), pPreferSyntaxIndex.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrSimpleTypeMarshall$MH() {
        return cfapi_h$constants$57.NdrSimpleTypeMarshall$MH();
    }
    public static void NdrSimpleTypeMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("unsigned char") byte FormatChar) {
        try {
            cfapi_h$constants$57.NdrSimpleTypeMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), FormatChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrPointerMarshall$MH() {
        return cfapi_h$constants$57.NdrPointerMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrPointerMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrPointerMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrCsArrayMarshall$MH() {
        return cfapi_h$constants$57.NdrCsArrayMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrCsArrayMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrCsArrayMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrCsTagMarshall$MH() {
        return cfapi_h$constants$57.NdrCsTagMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrCsTagMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrCsTagMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrSimpleStructMarshall$MH() {
        return cfapi_h$constants$57.NdrSimpleStructMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrSimpleStructMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrSimpleStructMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantStructMarshall$MH() {
        return cfapi_h$constants$57.NdrConformantStructMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantStructMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantStructMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantVaryingStructMarshall$MH() {
        return cfapi_h$constants$57.NdrConformantVaryingStructMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantVaryingStructMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantVaryingStructMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrComplexStructMarshall$MH() {
        return cfapi_h$constants$57.NdrComplexStructMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrComplexStructMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrComplexStructMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrFixedArrayMarshall$MH() {
        return cfapi_h$constants$57.NdrFixedArrayMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrFixedArrayMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrFixedArrayMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantArrayMarshall$MH() {
        return cfapi_h$constants$57.NdrConformantArrayMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantArrayMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantArrayMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantVaryingArrayMarshall$MH() {
        return cfapi_h$constants$57.NdrConformantVaryingArrayMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantVaryingArrayMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantVaryingArrayMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrVaryingArrayMarshall$MH() {
        return cfapi_h$constants$57.NdrVaryingArrayMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrVaryingArrayMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrVaryingArrayMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrComplexArrayMarshall$MH() {
        return cfapi_h$constants$57.NdrComplexArrayMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrComplexArrayMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrComplexArrayMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrNonConformantStringMarshall$MH() {
        return cfapi_h$constants$57.NdrNonConformantStringMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrNonConformantStringMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrNonConformantStringMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantStringMarshall$MH() {
        return cfapi_h$constants$57.NdrConformantStringMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantStringMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantStringMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrEncapsulatedUnionMarshall$MH() {
        return cfapi_h$constants$57.NdrEncapsulatedUnionMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrEncapsulatedUnionMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrEncapsulatedUnionMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrNonEncapsulatedUnionMarshall$MH() {
        return cfapi_h$constants$57.NdrNonEncapsulatedUnionMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrNonEncapsulatedUnionMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrNonEncapsulatedUnionMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrByteCountPointerMarshall$MH() {
        return cfapi_h$constants$57.NdrByteCountPointerMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrByteCountPointerMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrByteCountPointerMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrXmitOrRepAsMarshall$MH() {
        return cfapi_h$constants$57.NdrXmitOrRepAsMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrXmitOrRepAsMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrXmitOrRepAsMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrUserMarshalMarshall$MH() {
        return cfapi_h$constants$57.NdrUserMarshalMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrUserMarshalMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrUserMarshalMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrInterfacePointerMarshall$MH() {
        return cfapi_h$constants$57.NdrInterfacePointerMarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrInterfacePointerMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrInterfacePointerMarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrClientContextMarshall$MH() {
        return cfapi_h$constants$57.NdrClientContextMarshall$MH();
    }
    public static void NdrClientContextMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("NDR_CCONTEXT") Addressable ContextHandle, @C("int") int fCheck) {
        try {
            cfapi_h$constants$57.NdrClientContextMarshall$MH().invokeExact(pStubMsg.address(), ContextHandle.address(), fCheck);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrServerContextMarshall$MH() {
        return cfapi_h$constants$57.NdrServerContextMarshall$MH();
    }
    public static void NdrServerContextMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("NDR_SCONTEXT") Addressable ContextHandle, @C("NDR_RUNDOWN") Addressable RundownRoutine) {
        try {
            cfapi_h$constants$57.NdrServerContextMarshall$MH().invokeExact(pStubMsg.address(), ContextHandle.address(), RundownRoutine.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrServerContextNewMarshall$MH() {
        return cfapi_h$constants$57.NdrServerContextNewMarshall$MH();
    }
    public static void NdrServerContextNewMarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("NDR_SCONTEXT") Addressable ContextHandle, @C("NDR_RUNDOWN") Addressable RundownRoutine, @C("PFORMAT_STRING") Addressable pFormat) {
        try {
            cfapi_h$constants$57.NdrServerContextNewMarshall$MH().invokeExact(pStubMsg.address(), ContextHandle.address(), RundownRoutine.address(), pFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrSimpleTypeUnmarshall$MH() {
        return cfapi_h$constants$57.NdrSimpleTypeUnmarshall$MH();
    }
    public static void NdrSimpleTypeUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char*") Addressable pMemory, @C("unsigned char") byte FormatChar) {
        try {
            cfapi_h$constants$57.NdrSimpleTypeUnmarshall$MH().invokeExact(pStubMsg.address(), pMemory.address(), FormatChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrCsArrayUnmarshall$MH() {
        return cfapi_h$constants$57.NdrCsArrayUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrCsArrayUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrCsArrayUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrCsTagUnmarshall$MH() {
        return cfapi_h$constants$57.NdrCsTagUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrCsTagUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrCsTagUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrRangeUnmarshall$MH() {
        return cfapi_h$constants$57.NdrRangeUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrRangeUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrRangeUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrCorrelationInitialize$MH() {
        return cfapi_h$constants$57.NdrCorrelationInitialize$MH();
    }
    public static void NdrCorrelationInitialize (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("void*") Addressable pMemory, @C("unsigned long") int CacheSize, @C("unsigned long") int flags) {
        try {
            cfapi_h$constants$57.NdrCorrelationInitialize$MH().invokeExact(pStubMsg.address(), pMemory.address(), CacheSize, flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrCorrelationPass$MH() {
        return cfapi_h$constants$57.NdrCorrelationPass$MH();
    }
    public static void NdrCorrelationPass (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg) {
        try {
            cfapi_h$constants$57.NdrCorrelationPass$MH().invokeExact(pStubMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrCorrelationFree$MH() {
        return cfapi_h$constants$57.NdrCorrelationFree$MH();
    }
    public static void NdrCorrelationFree (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg) {
        try {
            cfapi_h$constants$57.NdrCorrelationFree$MH().invokeExact(pStubMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrPointerUnmarshall$MH() {
        return cfapi_h$constants$57.NdrPointerUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrPointerUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrPointerUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrSimpleStructUnmarshall$MH() {
        return cfapi_h$constants$57.NdrSimpleStructUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrSimpleStructUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrSimpleStructUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantStructUnmarshall$MH() {
        return cfapi_h$constants$57.NdrConformantStructUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantStructUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantStructUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantVaryingStructUnmarshall$MH() {
        return cfapi_h$constants$57.NdrConformantVaryingStructUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantVaryingStructUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantVaryingStructUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrComplexStructUnmarshall$MH() {
        return cfapi_h$constants$57.NdrComplexStructUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrComplexStructUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrComplexStructUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrFixedArrayUnmarshall$MH() {
        return cfapi_h$constants$57.NdrFixedArrayUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrFixedArrayUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrFixedArrayUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantArrayUnmarshall$MH() {
        return cfapi_h$constants$57.NdrConformantArrayUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantArrayUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantArrayUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantVaryingArrayUnmarshall$MH() {
        return cfapi_h$constants$57.NdrConformantVaryingArrayUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantVaryingArrayUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantVaryingArrayUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrVaryingArrayUnmarshall$MH() {
        return cfapi_h$constants$57.NdrVaryingArrayUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrVaryingArrayUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrVaryingArrayUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrComplexArrayUnmarshall$MH() {
        return cfapi_h$constants$57.NdrComplexArrayUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrComplexArrayUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrComplexArrayUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrNonConformantStringUnmarshall$MH() {
        return cfapi_h$constants$57.NdrNonConformantStringUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrNonConformantStringUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrNonConformantStringUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrConformantStringUnmarshall$MH() {
        return cfapi_h$constants$57.NdrConformantStringUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrConformantStringUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrConformantStringUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrEncapsulatedUnionUnmarshall$MH() {
        return cfapi_h$constants$57.NdrEncapsulatedUnionUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrEncapsulatedUnionUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrEncapsulatedUnionUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrNonEncapsulatedUnionUnmarshall$MH() {
        return cfapi_h$constants$57.NdrNonEncapsulatedUnionUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrNonEncapsulatedUnionUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrNonEncapsulatedUnionUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NdrByteCountPointerUnmarshall$MH() {
        return cfapi_h$constants$57.NdrByteCountPointerUnmarshall$MH();
    }
    public static @C("unsigned char*") MemoryAddress NdrByteCountPointerUnmarshall (@C("PMIDL_STUB_MESSAGE") Addressable pStubMsg, @C("unsigned char**") Addressable ppMemory, @C("PFORMAT_STRING") Addressable pFormat, @C("unsigned char") byte fMustAlloc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$57.NdrByteCountPointerUnmarshall$MH().invokeExact(pStubMsg.address(), ppMemory.address(), pFormat.address(), fMustAlloc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
}


