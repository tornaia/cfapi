// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$96 extends cfapi_h$constants$95 {

    /* package-private */ cfapi_h$constants$96() {}
    static final FunctionDescriptor VarAnd$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarAnd$FUNC() { return VarAnd$FUNC_; }

    static final MethodHandle VarAnd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarAnd",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarAnd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarAnd$MH() { return VarAnd$MH_; }

    static final FunctionDescriptor VarCat$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCat$FUNC() { return VarCat$FUNC_; }

    static final MethodHandle VarCat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarCat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCat$MH() { return VarCat$MH_; }

    static final FunctionDescriptor VarDiv$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDiv$FUNC() { return VarDiv$FUNC_; }

    static final MethodHandle VarDiv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDiv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDiv$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDiv$MH() { return VarDiv$MH_; }

    static final FunctionDescriptor VarEqv$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarEqv$FUNC() { return VarEqv$FUNC_; }

    static final MethodHandle VarEqv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarEqv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarEqv$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarEqv$MH() { return VarEqv$MH_; }

    static final FunctionDescriptor VarIdiv$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarIdiv$FUNC() { return VarIdiv$FUNC_; }

    static final MethodHandle VarIdiv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarIdiv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarIdiv$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarIdiv$MH() { return VarIdiv$MH_; }

    static final FunctionDescriptor VarImp$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarImp$FUNC() { return VarImp$FUNC_; }

    static final MethodHandle VarImp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarImp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarImp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarImp$MH() { return VarImp$MH_; }

    static final FunctionDescriptor VarMod$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarMod$FUNC() { return VarMod$FUNC_; }

    static final MethodHandle VarMod$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarMod",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarMod$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarMod$MH() { return VarMod$MH_; }

    static final FunctionDescriptor VarMul$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarMul$FUNC() { return VarMul$FUNC_; }

    static final MethodHandle VarMul$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarMul",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarMul$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarMul$MH() { return VarMul$MH_; }

    static final FunctionDescriptor VarOr$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarOr$FUNC() { return VarOr$FUNC_; }

    static final MethodHandle VarOr$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarOr",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarOr$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarOr$MH() { return VarOr$MH_; }

    static final FunctionDescriptor VarPow$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarPow$FUNC() { return VarPow$FUNC_; }

    static final MethodHandle VarPow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarPow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarPow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarPow$MH() { return VarPow$MH_; }

    static final FunctionDescriptor VarSub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarSub$FUNC() { return VarSub$FUNC_; }

    static final MethodHandle VarSub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarSub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarSub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarSub$MH() { return VarSub$MH_; }

    static final FunctionDescriptor VarXor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarXor$FUNC() { return VarXor$FUNC_; }

    static final MethodHandle VarXor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarXor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarXor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarXor$MH() { return VarXor$MH_; }

    static final FunctionDescriptor VarAbs$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarAbs$FUNC() { return VarAbs$FUNC_; }

    static final MethodHandle VarAbs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarAbs",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarAbs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarAbs$MH() { return VarAbs$MH_; }

    static final FunctionDescriptor VarFix$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarFix$FUNC() { return VarFix$FUNC_; }

    static final MethodHandle VarFix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarFix",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarFix$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarFix$MH() { return VarFix$MH_; }

    static final FunctionDescriptor VarInt$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarInt$FUNC() { return VarInt$FUNC_; }

    static final MethodHandle VarInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarInt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarInt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarInt$MH() { return VarInt$MH_; }

    static final FunctionDescriptor VarNeg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarNeg$FUNC() { return VarNeg$FUNC_; }

    static final MethodHandle VarNeg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarNeg",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarNeg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarNeg$MH() { return VarNeg$MH_; }

    static final FunctionDescriptor VarNot$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarNot$FUNC() { return VarNot$FUNC_; }

    static final MethodHandle VarNot$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarNot",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarNot$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarNot$MH() { return VarNot$MH_; }

    static final FunctionDescriptor VarRound$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarRound$FUNC() { return VarRound$FUNC_; }

    static final MethodHandle VarRound$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarRound",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        VarRound$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarRound$MH() { return VarRound$MH_; }

    static final FunctionDescriptor VarCmp$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCmp$FUNC() { return VarCmp$FUNC_; }

    static final MethodHandle VarCmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        VarCmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCmp$MH() { return VarCmp$MH_; }

    static final FunctionDescriptor VarDecAdd$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecAdd$FUNC() { return VarDecAdd$FUNC_; }

    static final MethodHandle VarDecAdd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecAdd",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDecAdd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecAdd$MH() { return VarDecAdd$MH_; }

    static final FunctionDescriptor VarDecDiv$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecDiv$FUNC() { return VarDecDiv$FUNC_; }

    static final MethodHandle VarDecDiv$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecDiv",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDecDiv$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecDiv$MH() { return VarDecDiv$MH_; }

    static final FunctionDescriptor VarDecMul$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecMul$FUNC() { return VarDecMul$FUNC_; }

    static final MethodHandle VarDecMul$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecMul",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDecMul$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecMul$MH() { return VarDecMul$MH_; }

    static final FunctionDescriptor VarDecSub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecSub$FUNC() { return VarDecSub$FUNC_; }

    static final MethodHandle VarDecSub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecSub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDecSub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecSub$MH() { return VarDecSub$MH_; }

    static final FunctionDescriptor VarDecAbs$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecAbs$FUNC() { return VarDecAbs$FUNC_; }

    static final MethodHandle VarDecAbs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecAbs",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDecAbs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecAbs$MH() { return VarDecAbs$MH_; }

    static final FunctionDescriptor VarDecFix$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecFix$FUNC() { return VarDecFix$FUNC_; }

    static final MethodHandle VarDecFix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecFix",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDecFix$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecFix$MH() { return VarDecFix$MH_; }

    static final FunctionDescriptor VarDecInt$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecInt$FUNC() { return VarDecInt$FUNC_; }

    static final MethodHandle VarDecInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecInt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDecInt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecInt$MH() { return VarDecInt$MH_; }

    static final FunctionDescriptor VarDecNeg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecNeg$FUNC() { return VarDecNeg$FUNC_; }

    static final MethodHandle VarDecNeg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecNeg",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDecNeg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecNeg$MH() { return VarDecNeg$MH_; }

    static final FunctionDescriptor VarDecRound$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecRound$FUNC() { return VarDecRound$FUNC_; }

    static final MethodHandle VarDecRound$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecRound",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        VarDecRound$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecRound$MH() { return VarDecRound$MH_; }

    static final FunctionDescriptor VarDecCmp$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecCmp$FUNC() { return VarDecCmp$FUNC_; }

    static final MethodHandle VarDecCmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecCmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarDecCmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecCmp$MH() { return VarDecCmp$MH_; }

    static final FunctionDescriptor VarDecCmpR8$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_DOUBLE
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDecCmpR8$FUNC() { return VarDecCmpR8$FUNC_; }

    static final MethodHandle VarDecCmpR8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDecCmpR8",
        "(Ljdk/incubator/foreign/MemoryAddress;D)I",
        VarDecCmpR8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDecCmpR8$MH() { return VarDecCmpR8$MH_; }

    static final FunctionDescriptor VarCyAdd$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyAdd$FUNC() { return VarCyAdd$FUNC_; }

    static final MethodHandle VarCyAdd$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyAdd",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarCyAdd$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyAdd$MH() { return VarCyAdd$MH_; }

    static final FunctionDescriptor VarCyMul$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyMul$FUNC() { return VarCyMul$FUNC_; }

    static final MethodHandle VarCyMul$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyMul",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarCyMul$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyMul$MH() { return VarCyMul$MH_; }

    static final FunctionDescriptor VarCyMulI4$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyMulI4$FUNC() { return VarCyMulI4$FUNC_; }

    static final MethodHandle VarCyMulI4$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyMulI4",
        "(Ljdk/incubator/foreign/MemorySegment;ILjdk/incubator/foreign/MemoryAddress;)I",
        VarCyMulI4$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyMulI4$MH() { return VarCyMulI4$MH_; }

    static final FunctionDescriptor VarCyMulI8$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyMulI8$FUNC() { return VarCyMulI8$FUNC_; }

    static final MethodHandle VarCyMulI8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyMulI8",
        "(Ljdk/incubator/foreign/MemorySegment;JLjdk/incubator/foreign/MemoryAddress;)I",
        VarCyMulI8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyMulI8$MH() { return VarCyMulI8$MH_; }

    static final FunctionDescriptor VarCySub$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCySub$FUNC() { return VarCySub$FUNC_; }

    static final MethodHandle VarCySub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCySub",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarCySub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCySub$MH() { return VarCySub$MH_; }

    static final FunctionDescriptor VarCyAbs$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyAbs$FUNC() { return VarCyAbs$FUNC_; }

    static final MethodHandle VarCyAbs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyAbs",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarCyAbs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyAbs$MH() { return VarCyAbs$MH_; }

    static final FunctionDescriptor VarCyFix$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyFix$FUNC() { return VarCyFix$FUNC_; }

    static final MethodHandle VarCyFix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyFix",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarCyFix$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyFix$MH() { return VarCyFix$MH_; }

    static final FunctionDescriptor VarCyInt$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyInt$FUNC() { return VarCyInt$FUNC_; }

    static final MethodHandle VarCyInt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyInt",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarCyInt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyInt$MH() { return VarCyInt$MH_; }

    static final FunctionDescriptor VarCyNeg$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyNeg$FUNC() { return VarCyNeg$FUNC_; }

    static final MethodHandle VarCyNeg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyNeg",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarCyNeg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyNeg$MH() { return VarCyNeg$MH_; }

    static final FunctionDescriptor VarCyRound$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyRound$FUNC() { return VarCyRound$FUNC_; }

    static final MethodHandle VarCyRound$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyRound",
        "(Ljdk/incubator/foreign/MemorySegment;ILjdk/incubator/foreign/MemoryAddress;)I",
        VarCyRound$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyRound$MH() { return VarCyRound$MH_; }

    static final FunctionDescriptor VarCyCmp$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY")
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyCmp$FUNC() { return VarCyCmp$FUNC_; }

    static final MethodHandle VarCyCmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyCmp",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
        VarCyCmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyCmp$MH() { return VarCyCmp$MH_; }

    static final FunctionDescriptor VarCyCmpR8$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("Lo"),
            C_LONG.withName("Hi"),
            C_LONGLONG.withName("int64")
        ).withName("tagCY"),
        C_DOUBLE
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarCyCmpR8$FUNC() { return VarCyCmpR8$FUNC_; }

    static final MethodHandle VarCyCmpR8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarCyCmpR8",
        "(Ljdk/incubator/foreign/MemorySegment;D)I",
        VarCyCmpR8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarCyCmpR8$MH() { return VarCyCmpR8$MH_; }

    static final FunctionDescriptor VarBstrCat$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarBstrCat$FUNC() { return VarBstrCat$FUNC_; }

    static final MethodHandle VarBstrCat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarBstrCat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VarBstrCat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarBstrCat$MH() { return VarBstrCat$MH_; }

    static final FunctionDescriptor VarBstrCmp$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarBstrCmp$FUNC() { return VarBstrCmp$FUNC_; }

    static final MethodHandle VarBstrCmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarBstrCmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        VarBstrCmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarBstrCmp$MH() { return VarBstrCmp$MH_; }

    static final FunctionDescriptor VarR8Pow$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_DOUBLE,
        C_DOUBLE,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarR8Pow$FUNC() { return VarR8Pow$FUNC_; }

    static final MethodHandle VarR8Pow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarR8Pow",
        "(DDLjdk/incubator/foreign/MemoryAddress;)I",
        VarR8Pow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarR8Pow$MH() { return VarR8Pow$MH_; }

    static final FunctionDescriptor VarR4CmpR8$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_FLOAT,
        C_DOUBLE
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarR4CmpR8$FUNC() { return VarR4CmpR8$FUNC_; }

    static final MethodHandle VarR4CmpR8$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarR4CmpR8",
        "(FD)I",
        VarR4CmpR8$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarR4CmpR8$MH() { return VarR4CmpR8$MH_; }

    static final FunctionDescriptor VarR8Round$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_DOUBLE,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarR8Round$FUNC() { return VarR8Round$FUNC_; }

    static final MethodHandle VarR8Round$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarR8Round",
        "(DILjdk/incubator/foreign/MemoryAddress;)I",
        VarR8Round$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarR8Round$MH() { return VarR8Round$MH_; }

    static final MemoryLayout UDATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("wYear"),
            C_SHORT.withName("wMonth"),
            C_SHORT.withName("wDayOfWeek"),
            C_SHORT.withName("wDay"),
            C_SHORT.withName("wHour"),
            C_SHORT.withName("wMinute"),
            C_SHORT.withName("wSecond"),
            C_SHORT.withName("wMilliseconds")
        ).withName("st"),
        C_SHORT.withName("wDayOfYear")
    );
    static final jdk.incubator.foreign.MemoryLayout UDATE$struct$LAYOUT() { return UDATE$struct$LAYOUT_; }

    static final MemoryLayout UDATE$wDayOfYear$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout UDATE$wDayOfYear$LAYOUT() { return UDATE$wDayOfYear$LAYOUT_; }

    static final VarHandle UDATE$wDayOfYear$VH_ = UDATE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wDayOfYear"));
    static final java.lang.invoke.VarHandle UDATE$wDayOfYear$VH() { return UDATE$wDayOfYear$VH_; }

    static final FunctionDescriptor VarDateFromUdate$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDateFromUdate$FUNC() { return VarDateFromUdate$FUNC_; }

    static final MethodHandle VarDateFromUdate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDateFromUdate",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        VarDateFromUdate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDateFromUdate$MH() { return VarDateFromUdate$MH_; }

    static final FunctionDescriptor VarDateFromUdateEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarDateFromUdateEx$FUNC() { return VarDateFromUdateEx$FUNC_; }

    static final MethodHandle VarDateFromUdateEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarDateFromUdateEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        VarDateFromUdateEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarDateFromUdateEx$MH() { return VarDateFromUdateEx$MH_; }

    static final FunctionDescriptor VarUdateFromDate$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_DOUBLE,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarUdateFromDate$FUNC() { return VarUdateFromDate$FUNC_; }

    static final MethodHandle VarUdateFromDate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarUdateFromDate",
        "(DILjdk/incubator/foreign/MemoryAddress;)I",
        VarUdateFromDate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarUdateFromDate$MH() { return VarUdateFromDate$MH_; }

    static final FunctionDescriptor GetAltMonthNames$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetAltMonthNames$FUNC() { return GetAltMonthNames$FUNC_; }

    static final MethodHandle GetAltMonthNames$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAltMonthNames",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetAltMonthNames$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetAltMonthNames$MH() { return GetAltMonthNames$MH_; }

    static final FunctionDescriptor VarFormat$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarFormat$FUNC() { return VarFormat$FUNC_; }

    static final MethodHandle VarFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarFormat",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        VarFormat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarFormat$MH() { return VarFormat$MH_; }

    static final FunctionDescriptor VarFormatDateTime$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarFormatDateTime$FUNC() { return VarFormatDateTime$FUNC_; }

    static final MethodHandle VarFormatDateTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarFormatDateTime",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        VarFormatDateTime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarFormatDateTime$MH() { return VarFormatDateTime$MH_; }

    static final FunctionDescriptor VarFormatNumber$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarFormatNumber$FUNC() { return VarFormatNumber$FUNC_; }

    static final MethodHandle VarFormatNumber$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarFormatNumber",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIILjdk/incubator/foreign/MemoryAddress;)I",
        VarFormatNumber$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarFormatNumber$MH() { return VarFormatNumber$MH_; }

    static final FunctionDescriptor VarFormatPercent$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarFormatPercent$FUNC() { return VarFormatPercent$FUNC_; }

    static final MethodHandle VarFormatPercent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarFormatPercent",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIILjdk/incubator/foreign/MemoryAddress;)I",
        VarFormatPercent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarFormatPercent$MH() { return VarFormatPercent$MH_; }

    static final FunctionDescriptor VarFormatCurrency$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarFormatCurrency$FUNC() { return VarFormatCurrency$FUNC_; }

    static final MethodHandle VarFormatCurrency$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarFormatCurrency",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIILjdk/incubator/foreign/MemoryAddress;)I",
        VarFormatCurrency$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarFormatCurrency$MH() { return VarFormatCurrency$MH_; }

    static final FunctionDescriptor VarWeekdayName$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_INT,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarWeekdayName$FUNC() { return VarWeekdayName$FUNC_; }

    static final MethodHandle VarWeekdayName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarWeekdayName",
        "(IIIILjdk/incubator/foreign/MemoryAddress;)I",
        VarWeekdayName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarWeekdayName$MH() { return VarWeekdayName$MH_; }

    static final FunctionDescriptor VarMonthName$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarMonthName$FUNC() { return VarMonthName$FUNC_; }

    static final MethodHandle VarMonthName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarMonthName",
        "(IIILjdk/incubator/foreign/MemoryAddress;)I",
        VarMonthName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarMonthName$MH() { return VarMonthName$MH_; }

    static final FunctionDescriptor VarFormatFromTokens$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarFormatFromTokens$FUNC() { return VarFormatFromTokens$FUNC_; }

    static final MethodHandle VarFormatFromTokens$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarFormatFromTokens",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        VarFormatFromTokens$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarFormatFromTokens$MH() { return VarFormatFromTokens$MH_; }

    static final FunctionDescriptor VarTokenizeFormatString$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VarTokenizeFormatString$FUNC() { return VarTokenizeFormatString$FUNC_; }

    static final MethodHandle VarTokenizeFormatString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VarTokenizeFormatString",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;)I",
        VarTokenizeFormatString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VarTokenizeFormatString$MH() { return VarTokenizeFormatString$MH_; }

    static final FunctionDescriptor LHashValOfNameSysA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LHashValOfNameSysA$FUNC() { return LHashValOfNameSysA$FUNC_; }

    static final MethodHandle LHashValOfNameSysA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LHashValOfNameSysA",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        LHashValOfNameSysA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LHashValOfNameSysA$MH() { return LHashValOfNameSysA$MH_; }

    static final FunctionDescriptor LHashValOfNameSys$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LHashValOfNameSys$FUNC() { return LHashValOfNameSys$FUNC_; }

    static final MethodHandle LHashValOfNameSys$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LHashValOfNameSys",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        LHashValOfNameSys$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LHashValOfNameSys$MH() { return LHashValOfNameSys$MH_; }

    static final FunctionDescriptor LoadTypeLib$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadTypeLib$FUNC() { return LoadTypeLib$FUNC_; }

    static final MethodHandle LoadTypeLib$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadTypeLib",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        LoadTypeLib$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadTypeLib$MH() { return LoadTypeLib$MH_; }

    static final int REGKIND_DEFAULT() { return (int)0L; }

    static final int REGKIND_REGISTER() { return (int)1L; }

    static final int REGKIND_NONE() { return (int)2L; }

    static final FunctionDescriptor LoadTypeLibEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadTypeLibEx$FUNC() { return LoadTypeLibEx$FUNC_; }

    static final MethodHandle LoadTypeLibEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadTypeLibEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        LoadTypeLibEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadTypeLibEx$MH() { return LoadTypeLibEx$MH_; }

    static final FunctionDescriptor LoadRegTypeLib$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_SHORT,
        C_SHORT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadRegTypeLib$FUNC() { return LoadRegTypeLib$FUNC_; }

    static final MethodHandle LoadRegTypeLib$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadRegTypeLib",
        "(Ljdk/incubator/foreign/MemoryAddress;SSILjdk/incubator/foreign/MemoryAddress;)I",
        LoadRegTypeLib$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadRegTypeLib$MH() { return LoadRegTypeLib$MH_; }

    static final FunctionDescriptor QueryPathOfRegTypeLib$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_SHORT,
        C_SHORT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor QueryPathOfRegTypeLib$FUNC() { return QueryPathOfRegTypeLib$FUNC_; }

    static final MethodHandle QueryPathOfRegTypeLib$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryPathOfRegTypeLib",
        "(Ljdk/incubator/foreign/MemoryAddress;SSILjdk/incubator/foreign/MemoryAddress;)I",
        QueryPathOfRegTypeLib$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle QueryPathOfRegTypeLib$MH() { return QueryPathOfRegTypeLib$MH_; }

    static final FunctionDescriptor RegisterTypeLib$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegisterTypeLib$FUNC() { return RegisterTypeLib$FUNC_; }

    static final MethodHandle RegisterTypeLib$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterTypeLib",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegisterTypeLib$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegisterTypeLib$MH() { return RegisterTypeLib$MH_; }

    static final FunctionDescriptor UnRegisterTypeLib$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_SHORT,
        C_SHORT,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor UnRegisterTypeLib$FUNC() { return UnRegisterTypeLib$FUNC_; }

    static final MethodHandle UnRegisterTypeLib$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnRegisterTypeLib",
        "(Ljdk/incubator/foreign/MemoryAddress;SSII)I",
        UnRegisterTypeLib$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UnRegisterTypeLib$MH() { return UnRegisterTypeLib$MH_; }

    static final FunctionDescriptor RegisterTypeLibForUser$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegisterTypeLibForUser$FUNC() { return RegisterTypeLibForUser$FUNC_; }

    static final MethodHandle RegisterTypeLibForUser$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterTypeLibForUser",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegisterTypeLibForUser$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegisterTypeLibForUser$MH() { return RegisterTypeLibForUser$MH_; }

    static final FunctionDescriptor UnRegisterTypeLibForUser$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_SHORT,
        C_SHORT,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor UnRegisterTypeLibForUser$FUNC() { return UnRegisterTypeLibForUser$FUNC_; }

    static final MethodHandle UnRegisterTypeLibForUser$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnRegisterTypeLibForUser",
        "(Ljdk/incubator/foreign/MemoryAddress;SSII)I",
        UnRegisterTypeLibForUser$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UnRegisterTypeLibForUser$MH() { return UnRegisterTypeLibForUser$MH_; }

    static final FunctionDescriptor CreateTypeLib$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateTypeLib$FUNC() { return CreateTypeLib$FUNC_; }

    static final MethodHandle CreateTypeLib$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateTypeLib",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateTypeLib$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateTypeLib$MH() { return CreateTypeLib$MH_; }

    static final FunctionDescriptor CreateTypeLib2$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateTypeLib2$FUNC() { return CreateTypeLib2$FUNC_; }

    static final MethodHandle CreateTypeLib2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateTypeLib2",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateTypeLib2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateTypeLib2$MH() { return CreateTypeLib2$MH_; }

    static final MemoryLayout tagPARAMDATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("szName"),
        C_SHORT.withName("vt"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("tagPARAMDATA");
    static final jdk.incubator.foreign.MemoryLayout tagPARAMDATA$struct$LAYOUT() { return tagPARAMDATA$struct$LAYOUT_; }

    static final MemoryLayout tagPARAMDATA$szName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagPARAMDATA$szName$LAYOUT() { return tagPARAMDATA$szName$LAYOUT_; }

    static final VarHandle tagPARAMDATA$szName$VH_ = MemoryHandles.asAddressVarHandle(tagPARAMDATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("szName")));
    static final java.lang.invoke.VarHandle tagPARAMDATA$szName$VH() { return tagPARAMDATA$szName$VH_; }

    static final MemoryLayout tagPARAMDATA$vt$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagPARAMDATA$vt$LAYOUT() { return tagPARAMDATA$vt$LAYOUT_; }

    static final VarHandle tagPARAMDATA$vt$VH_ = tagPARAMDATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("vt"));
    static final java.lang.invoke.VarHandle tagPARAMDATA$vt$VH() { return tagPARAMDATA$vt$VH_; }

    static final MemoryLayout tagMETHODDATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("szName"),
        C_POINTER.withName("ppdata"),
        C_LONG.withName("dispid"),
        C_INT.withName("iMeth"),
        C_INT.withName("cc"),
        C_INT.withName("cArgs"),
        C_SHORT.withName("wFlags"),
        C_SHORT.withName("vtReturn"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagMETHODDATA");
    static final jdk.incubator.foreign.MemoryLayout tagMETHODDATA$struct$LAYOUT() { return tagMETHODDATA$struct$LAYOUT_; }

    static final MemoryLayout tagMETHODDATA$szName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMETHODDATA$szName$LAYOUT() { return tagMETHODDATA$szName$LAYOUT_; }

    static final VarHandle tagMETHODDATA$szName$VH_ = MemoryHandles.asAddressVarHandle(tagMETHODDATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("szName")));
    static final java.lang.invoke.VarHandle tagMETHODDATA$szName$VH() { return tagMETHODDATA$szName$VH_; }

    static final MemoryLayout tagMETHODDATA$ppdata$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMETHODDATA$ppdata$LAYOUT() { return tagMETHODDATA$ppdata$LAYOUT_; }

    static final VarHandle tagMETHODDATA$ppdata$VH_ = MemoryHandles.asAddressVarHandle(tagMETHODDATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ppdata")));
    static final java.lang.invoke.VarHandle tagMETHODDATA$ppdata$VH() { return tagMETHODDATA$ppdata$VH_; }

    static final MemoryLayout tagMETHODDATA$dispid$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMETHODDATA$dispid$LAYOUT() { return tagMETHODDATA$dispid$LAYOUT_; }

    static final VarHandle tagMETHODDATA$dispid$VH_ = tagMETHODDATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dispid"));
    static final java.lang.invoke.VarHandle tagMETHODDATA$dispid$VH() { return tagMETHODDATA$dispid$VH_; }

    static final MemoryLayout tagMETHODDATA$iMeth$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMETHODDATA$iMeth$LAYOUT() { return tagMETHODDATA$iMeth$LAYOUT_; }

    static final VarHandle tagMETHODDATA$iMeth$VH_ = tagMETHODDATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMeth"));
    static final java.lang.invoke.VarHandle tagMETHODDATA$iMeth$VH() { return tagMETHODDATA$iMeth$VH_; }

    static final MemoryLayout tagMETHODDATA$cc$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMETHODDATA$cc$LAYOUT() { return tagMETHODDATA$cc$LAYOUT_; }

    static final VarHandle tagMETHODDATA$cc$VH_ = tagMETHODDATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cc"));
    static final java.lang.invoke.VarHandle tagMETHODDATA$cc$VH() { return tagMETHODDATA$cc$VH_; }

    static final MemoryLayout tagMETHODDATA$cArgs$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMETHODDATA$cArgs$LAYOUT() { return tagMETHODDATA$cArgs$LAYOUT_; }

    static final VarHandle tagMETHODDATA$cArgs$VH_ = tagMETHODDATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cArgs"));
    static final java.lang.invoke.VarHandle tagMETHODDATA$cArgs$VH() { return tagMETHODDATA$cArgs$VH_; }

    static final MemoryLayout tagMETHODDATA$wFlags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagMETHODDATA$wFlags$LAYOUT() { return tagMETHODDATA$wFlags$LAYOUT_; }

    static final VarHandle tagMETHODDATA$wFlags$VH_ = tagMETHODDATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wFlags"));
    static final java.lang.invoke.VarHandle tagMETHODDATA$wFlags$VH() { return tagMETHODDATA$wFlags$VH_; }

    static final MemoryLayout tagMETHODDATA$vtReturn$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagMETHODDATA$vtReturn$LAYOUT() { return tagMETHODDATA$vtReturn$LAYOUT_; }

    static final VarHandle tagMETHODDATA$vtReturn$VH_ = tagMETHODDATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("vtReturn"));
    static final java.lang.invoke.VarHandle tagMETHODDATA$vtReturn$VH() { return tagMETHODDATA$vtReturn$VH_; }

    static final MemoryLayout tagINTERFACEDATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pmethdata"),
        C_INT.withName("cMembers"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagINTERFACEDATA");
    static final jdk.incubator.foreign.MemoryLayout tagINTERFACEDATA$struct$LAYOUT() { return tagINTERFACEDATA$struct$LAYOUT_; }

    static final MemoryLayout tagINTERFACEDATA$pmethdata$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagINTERFACEDATA$pmethdata$LAYOUT() { return tagINTERFACEDATA$pmethdata$LAYOUT_; }

    static final VarHandle tagINTERFACEDATA$pmethdata$VH_ = MemoryHandles.asAddressVarHandle(tagINTERFACEDATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pmethdata")));
    static final java.lang.invoke.VarHandle tagINTERFACEDATA$pmethdata$VH() { return tagINTERFACEDATA$pmethdata$VH_; }

    static final MemoryLayout tagINTERFACEDATA$cMembers$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagINTERFACEDATA$cMembers$LAYOUT() { return tagINTERFACEDATA$cMembers$LAYOUT_; }

    static final VarHandle tagINTERFACEDATA$cMembers$VH_ = tagINTERFACEDATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cMembers"));
    static final java.lang.invoke.VarHandle tagINTERFACEDATA$cMembers$VH() { return tagINTERFACEDATA$cMembers$VH_; }

    static final FunctionDescriptor DispGetParam$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_SHORT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DispGetParam$FUNC() { return DispGetParam$FUNC_; }

    static final MethodHandle DispGetParam$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DispGetParam",
        "(Ljdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DispGetParam$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DispGetParam$MH() { return DispGetParam$MH_; }

    static final FunctionDescriptor DispGetIDsOfNames$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DispGetIDsOfNames$FUNC() { return DispGetIDsOfNames$FUNC_; }

    static final MethodHandle DispGetIDsOfNames$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DispGetIDsOfNames",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        DispGetIDsOfNames$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DispGetIDsOfNames$MH() { return DispGetIDsOfNames$MH_; }

    static final FunctionDescriptor DispInvoke$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_SHORT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DispInvoke$FUNC() { return DispInvoke$FUNC_; }

    static final MethodHandle DispInvoke$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DispInvoke",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ISLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DispInvoke$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DispInvoke$MH() { return DispInvoke$MH_; }

    static final FunctionDescriptor CreateDispTypeInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateDispTypeInfo$FUNC() { return CreateDispTypeInfo$FUNC_; }

    static final MethodHandle CreateDispTypeInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDispTypeInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CreateDispTypeInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateDispTypeInfo$MH() { return CreateDispTypeInfo$MH_; }

    static final FunctionDescriptor CreateStdDispatch$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateStdDispatch$FUNC() { return CreateStdDispatch$FUNC_; }

    static final MethodHandle CreateStdDispatch$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateStdDispatch",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateStdDispatch$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateStdDispatch$MH() { return CreateStdDispatch$MH_; }

    static final FunctionDescriptor DispCallFunc$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_SHORT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DispCallFunc$FUNC() { return DispCallFunc$FUNC_; }

    static final MethodHandle DispCallFunc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DispCallFunc",
        "(Ljdk/incubator/foreign/MemoryAddress;JISILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DispCallFunc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DispCallFunc$MH() { return DispCallFunc$MH_; }

    static final FunctionDescriptor RegisterActiveObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegisterActiveObject$FUNC() { return RegisterActiveObject$FUNC_; }

    static final MethodHandle RegisterActiveObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterActiveObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RegisterActiveObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegisterActiveObject$MH() { return RegisterActiveObject$MH_; }

    static final FunctionDescriptor RevokeActiveObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RevokeActiveObject$FUNC() { return RevokeActiveObject$FUNC_; }

    static final MethodHandle RevokeActiveObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RevokeActiveObject",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        RevokeActiveObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RevokeActiveObject$MH() { return RevokeActiveObject$MH_; }

    static final FunctionDescriptor GetActiveObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetActiveObject$FUNC() { return GetActiveObject$FUNC_; }

    static final MethodHandle GetActiveObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetActiveObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetActiveObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetActiveObject$MH() { return GetActiveObject$MH_; }

    static final FunctionDescriptor SetErrorInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetErrorInfo$FUNC() { return SetErrorInfo$FUNC_; }

    static final MethodHandle SetErrorInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetErrorInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        SetErrorInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetErrorInfo$MH() { return SetErrorInfo$MH_; }

    static final FunctionDescriptor GetErrorInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetErrorInfo$FUNC() { return GetErrorInfo$FUNC_; }

    static final MethodHandle GetErrorInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetErrorInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetErrorInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetErrorInfo$MH() { return GetErrorInfo$MH_; }

    static final FunctionDescriptor CreateErrorInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateErrorInfo$FUNC() { return CreateErrorInfo$FUNC_; }

    static final MethodHandle CreateErrorInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateErrorInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateErrorInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateErrorInfo$MH() { return CreateErrorInfo$MH_; }

    static final FunctionDescriptor GetRecordInfoFromTypeInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetRecordInfoFromTypeInfo$FUNC() { return GetRecordInfoFromTypeInfo$FUNC_; }

    static final MethodHandle GetRecordInfoFromTypeInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRecordInfoFromTypeInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetRecordInfoFromTypeInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetRecordInfoFromTypeInfo$MH() { return GetRecordInfoFromTypeInfo$MH_; }

    static final FunctionDescriptor GetRecordInfoFromGuids$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetRecordInfoFromGuids$FUNC() { return GetRecordInfoFromGuids$FUNC_; }

    static final MethodHandle GetRecordInfoFromGuids$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRecordInfoFromGuids",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetRecordInfoFromGuids$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetRecordInfoFromGuids$MH() { return GetRecordInfoFromGuids$MH_; }

    static final FunctionDescriptor OaBuildVersion$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor OaBuildVersion$FUNC() { return OaBuildVersion$FUNC_; }

    static final MethodHandle OaBuildVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OaBuildVersion",
        "()I",
        OaBuildVersion$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OaBuildVersion$MH() { return OaBuildVersion$MH_; }

    static final FunctionDescriptor ClearCustData$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ClearCustData$FUNC() { return ClearCustData$FUNC_; }

    static final MethodHandle ClearCustData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClearCustData",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        ClearCustData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ClearCustData$MH() { return ClearCustData$MH_; }

    static final FunctionDescriptor OaEnablePerUserTLibRegistration$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor OaEnablePerUserTLibRegistration$FUNC() { return OaEnablePerUserTLibRegistration$FUNC_; }

    static final MethodHandle OaEnablePerUserTLibRegistration$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OaEnablePerUserTLibRegistration",
        "()V",
        OaEnablePerUserTLibRegistration$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OaEnablePerUserTLibRegistration$MH() { return OaEnablePerUserTLibRegistration$MH_; }

    static final FunctionDescriptor OleBuildVersion$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor OleBuildVersion$FUNC() { return OleBuildVersion$FUNC_; }

    static final MethodHandle OleBuildVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleBuildVersion",
        "()I",
        OleBuildVersion$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleBuildVersion$MH() { return OleBuildVersion$MH_; }

    static final FunctionDescriptor WriteFmtUserTypeStg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteFmtUserTypeStg$FUNC() { return WriteFmtUserTypeStg$FUNC_; }

    static final MethodHandle WriteFmtUserTypeStg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteFmtUserTypeStg",
        "(Ljdk/incubator/foreign/MemoryAddress;SLjdk/incubator/foreign/MemoryAddress;)I",
        WriteFmtUserTypeStg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteFmtUserTypeStg$MH() { return WriteFmtUserTypeStg$MH_; }

    static final FunctionDescriptor ReadFmtUserTypeStg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadFmtUserTypeStg$FUNC() { return ReadFmtUserTypeStg$FUNC_; }

    static final MethodHandle ReadFmtUserTypeStg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadFmtUserTypeStg",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadFmtUserTypeStg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadFmtUserTypeStg$MH() { return ReadFmtUserTypeStg$MH_; }

    static final FunctionDescriptor OleInitialize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleInitialize$FUNC() { return OleInitialize$FUNC_; }

    static final MethodHandle OleInitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleInitialize",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OleInitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleInitialize$MH() { return OleInitialize$MH_; }

    static final FunctionDescriptor OleUninitialize$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor OleUninitialize$FUNC() { return OleUninitialize$FUNC_; }

    static final MethodHandle OleUninitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleUninitialize",
        "()V",
        OleUninitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleUninitialize$MH() { return OleUninitialize$MH_; }

    static final FunctionDescriptor OleQueryLinkFromData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleQueryLinkFromData$FUNC() { return OleQueryLinkFromData$FUNC_; }

    static final MethodHandle OleQueryLinkFromData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleQueryLinkFromData",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OleQueryLinkFromData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleQueryLinkFromData$MH() { return OleQueryLinkFromData$MH_; }

    static final FunctionDescriptor OleQueryCreateFromData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleQueryCreateFromData$FUNC() { return OleQueryCreateFromData$FUNC_; }

    static final MethodHandle OleQueryCreateFromData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleQueryCreateFromData",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OleQueryCreateFromData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleQueryCreateFromData$MH() { return OleQueryCreateFromData$MH_; }

    static final FunctionDescriptor OleCreate$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreate$FUNC() { return OleCreate$FUNC_; }

    static final MethodHandle OleCreate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreate",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreate$MH() { return OleCreate$MH_; }

    static final FunctionDescriptor OleCreateEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateEx$FUNC() { return OleCreateEx$FUNC_; }

    static final MethodHandle OleCreateEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateEx$MH() { return OleCreateEx$MH_; }

    static final FunctionDescriptor OleCreateFromData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateFromData$FUNC() { return OleCreateFromData$FUNC_; }

    static final MethodHandle OleCreateFromData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateFromData",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateFromData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateFromData$MH() { return OleCreateFromData$MH_; }

    static final FunctionDescriptor OleCreateFromDataEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateFromDataEx$FUNC() { return OleCreateFromDataEx$FUNC_; }

    static final MethodHandle OleCreateFromDataEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateFromDataEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateFromDataEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateFromDataEx$MH() { return OleCreateFromDataEx$MH_; }

    static final FunctionDescriptor OleCreateLinkFromData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateLinkFromData$FUNC() { return OleCreateLinkFromData$FUNC_; }

    static final MethodHandle OleCreateLinkFromData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateLinkFromData",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateLinkFromData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateLinkFromData$MH() { return OleCreateLinkFromData$MH_; }

    static final FunctionDescriptor OleCreateLinkFromDataEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateLinkFromDataEx$FUNC() { return OleCreateLinkFromDataEx$FUNC_; }

    static final MethodHandle OleCreateLinkFromDataEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateLinkFromDataEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateLinkFromDataEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateLinkFromDataEx$MH() { return OleCreateLinkFromDataEx$MH_; }

    static final FunctionDescriptor OleCreateStaticFromData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateStaticFromData$FUNC() { return OleCreateStaticFromData$FUNC_; }

    static final MethodHandle OleCreateStaticFromData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateStaticFromData",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateStaticFromData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateStaticFromData$MH() { return OleCreateStaticFromData$MH_; }

    static final FunctionDescriptor OleCreateLink$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateLink$FUNC() { return OleCreateLink$FUNC_; }

    static final MethodHandle OleCreateLink$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateLink",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateLink$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateLink$MH() { return OleCreateLink$MH_; }

    static final FunctionDescriptor OleCreateLinkEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateLinkEx$FUNC() { return OleCreateLinkEx$FUNC_; }

    static final MethodHandle OleCreateLinkEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateLinkEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateLinkEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateLinkEx$MH() { return OleCreateLinkEx$MH_; }

    static final FunctionDescriptor OleCreateLinkToFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateLinkToFile$FUNC() { return OleCreateLinkToFile$FUNC_; }

    static final MethodHandle OleCreateLinkToFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateLinkToFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateLinkToFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateLinkToFile$MH() { return OleCreateLinkToFile$MH_; }

    static final FunctionDescriptor OleCreateLinkToFileEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateLinkToFileEx$FUNC() { return OleCreateLinkToFileEx$FUNC_; }

    static final MethodHandle OleCreateLinkToFileEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateLinkToFileEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateLinkToFileEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateLinkToFileEx$MH() { return OleCreateLinkToFileEx$MH_; }

    static final FunctionDescriptor OleCreateFromFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateFromFile$FUNC() { return OleCreateFromFile$FUNC_; }

    static final MethodHandle OleCreateFromFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateFromFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateFromFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateFromFile$MH() { return OleCreateFromFile$MH_; }

    static final FunctionDescriptor OleCreateFromFileEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateFromFileEx$FUNC() { return OleCreateFromFileEx$FUNC_; }

    static final MethodHandle OleCreateFromFileEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateFromFileEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateFromFileEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateFromFileEx$MH() { return OleCreateFromFileEx$MH_; }

    static final FunctionDescriptor OleLoad$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleLoad$FUNC() { return OleLoad$FUNC_; }

    static final MethodHandle OleLoad$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleLoad",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleLoad$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleLoad$MH() { return OleLoad$MH_; }

    static final FunctionDescriptor OleSave$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleSave$FUNC() { return OleSave$FUNC_; }

    static final MethodHandle OleSave$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleSave",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        OleSave$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleSave$MH() { return OleSave$MH_; }

    static final FunctionDescriptor OleLoadFromStream$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleLoadFromStream$FUNC() { return OleLoadFromStream$FUNC_; }

    static final MethodHandle OleLoadFromStream$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleLoadFromStream",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleLoadFromStream$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleLoadFromStream$MH() { return OleLoadFromStream$MH_; }

    static final FunctionDescriptor OleSaveToStream$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleSaveToStream$FUNC() { return OleSaveToStream$FUNC_; }

    static final MethodHandle OleSaveToStream$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleSaveToStream",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleSaveToStream$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleSaveToStream$MH() { return OleSaveToStream$MH_; }

    static final FunctionDescriptor OleSetContainedObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleSetContainedObject$FUNC() { return OleSetContainedObject$FUNC_; }

    static final MethodHandle OleSetContainedObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleSetContainedObject",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        OleSetContainedObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleSetContainedObject$MH() { return OleSetContainedObject$MH_; }

    static final FunctionDescriptor OleNoteObjectVisible$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleNoteObjectVisible$FUNC() { return OleNoteObjectVisible$FUNC_; }

    static final MethodHandle OleNoteObjectVisible$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleNoteObjectVisible",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        OleNoteObjectVisible$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleNoteObjectVisible$MH() { return OleNoteObjectVisible$MH_; }

    static final FunctionDescriptor RegisterDragDrop$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegisterDragDrop$FUNC() { return RegisterDragDrop$FUNC_; }

    static final MethodHandle RegisterDragDrop$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterDragDrop",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegisterDragDrop$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegisterDragDrop$MH() { return RegisterDragDrop$MH_; }

    static final FunctionDescriptor RevokeDragDrop$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RevokeDragDrop$FUNC() { return RevokeDragDrop$FUNC_; }

    static final MethodHandle RevokeDragDrop$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RevokeDragDrop",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RevokeDragDrop$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RevokeDragDrop$MH() { return RevokeDragDrop$MH_; }

    static final FunctionDescriptor DoDragDrop$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DoDragDrop$FUNC() { return DoDragDrop$FUNC_; }

    static final MethodHandle DoDragDrop$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DoDragDrop",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        DoDragDrop$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DoDragDrop$MH() { return DoDragDrop$MH_; }

    static final FunctionDescriptor OleSetClipboard$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleSetClipboard$FUNC() { return OleSetClipboard$FUNC_; }

    static final MethodHandle OleSetClipboard$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleSetClipboard",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OleSetClipboard$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleSetClipboard$MH() { return OleSetClipboard$MH_; }

    static final FunctionDescriptor OleGetClipboard$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleGetClipboard$FUNC() { return OleGetClipboard$FUNC_; }

    static final MethodHandle OleGetClipboard$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleGetClipboard",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OleGetClipboard$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleGetClipboard$MH() { return OleGetClipboard$MH_; }

    static final FunctionDescriptor OleGetClipboardWithEnterpriseInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleGetClipboardWithEnterpriseInfo$FUNC() { return OleGetClipboardWithEnterpriseInfo$FUNC_; }

    static final MethodHandle OleGetClipboardWithEnterpriseInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleGetClipboardWithEnterpriseInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleGetClipboardWithEnterpriseInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleGetClipboardWithEnterpriseInfo$MH() { return OleGetClipboardWithEnterpriseInfo$MH_; }

    static final FunctionDescriptor OleFlushClipboard$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor OleFlushClipboard$FUNC() { return OleFlushClipboard$FUNC_; }

    static final MethodHandle OleFlushClipboard$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleFlushClipboard",
        "()I",
        OleFlushClipboard$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleFlushClipboard$MH() { return OleFlushClipboard$MH_; }

    static final FunctionDescriptor OleIsCurrentClipboard$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleIsCurrentClipboard$FUNC() { return OleIsCurrentClipboard$FUNC_; }

    static final MethodHandle OleIsCurrentClipboard$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleIsCurrentClipboard",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OleIsCurrentClipboard$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleIsCurrentClipboard$MH() { return OleIsCurrentClipboard$MH_; }

    static final FunctionDescriptor OleCreateMenuDescriptor$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateMenuDescriptor$FUNC() { return OleCreateMenuDescriptor$FUNC_; }

    static final MethodHandle OleCreateMenuDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateMenuDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        OleCreateMenuDescriptor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateMenuDescriptor$MH() { return OleCreateMenuDescriptor$MH_; }

    static final FunctionDescriptor OleSetMenuDescriptor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleSetMenuDescriptor$FUNC() { return OleSetMenuDescriptor$FUNC_; }

    static final MethodHandle OleSetMenuDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleSetMenuDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleSetMenuDescriptor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleSetMenuDescriptor$MH() { return OleSetMenuDescriptor$MH_; }

    static final FunctionDescriptor OleDestroyMenuDescriptor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleDestroyMenuDescriptor$FUNC() { return OleDestroyMenuDescriptor$FUNC_; }

    static final MethodHandle OleDestroyMenuDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleDestroyMenuDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OleDestroyMenuDescriptor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleDestroyMenuDescriptor$MH() { return OleDestroyMenuDescriptor$MH_; }

    static final FunctionDescriptor OleTranslateAccelerator$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleTranslateAccelerator$FUNC() { return OleTranslateAccelerator$FUNC_; }

    static final MethodHandle OleTranslateAccelerator$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleTranslateAccelerator",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleTranslateAccelerator$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleTranslateAccelerator$MH() { return OleTranslateAccelerator$MH_; }

    static final FunctionDescriptor OleDuplicateData$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_SHORT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleDuplicateData$FUNC() { return OleDuplicateData$FUNC_; }

    static final MethodHandle OleDuplicateData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleDuplicateData",
        "(Ljdk/incubator/foreign/MemoryAddress;SI)Ljdk/incubator/foreign/MemoryAddress;",
        OleDuplicateData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleDuplicateData$MH() { return OleDuplicateData$MH_; }

    static final FunctionDescriptor OleDraw$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleDraw$FUNC() { return OleDraw$FUNC_; }

    static final MethodHandle OleDraw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleDraw",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleDraw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleDraw$MH() { return OleDraw$MH_; }

    static final FunctionDescriptor OleRun$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleRun$FUNC() { return OleRun$FUNC_; }

    static final MethodHandle OleRun$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleRun",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OleRun$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleRun$MH() { return OleRun$MH_; }

    static final FunctionDescriptor OleIsRunning$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleIsRunning$FUNC() { return OleIsRunning$FUNC_; }

    static final MethodHandle OleIsRunning$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleIsRunning",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        OleIsRunning$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleIsRunning$MH() { return OleIsRunning$MH_; }

    static final FunctionDescriptor OleLockRunning$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleLockRunning$FUNC() { return OleLockRunning$FUNC_; }

    static final MethodHandle OleLockRunning$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleLockRunning",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        OleLockRunning$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleLockRunning$MH() { return OleLockRunning$MH_; }

    static final FunctionDescriptor ReleaseStgMedium$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReleaseStgMedium$FUNC() { return ReleaseStgMedium$FUNC_; }

    static final MethodHandle ReleaseStgMedium$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseStgMedium",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        ReleaseStgMedium$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReleaseStgMedium$MH() { return ReleaseStgMedium$MH_; }

    static final FunctionDescriptor CreateOleAdviseHolder$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateOleAdviseHolder$FUNC() { return CreateOleAdviseHolder$FUNC_; }

    static final MethodHandle CreateOleAdviseHolder$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateOleAdviseHolder",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateOleAdviseHolder$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateOleAdviseHolder$MH() { return CreateOleAdviseHolder$MH_; }

    static final FunctionDescriptor OleCreateDefaultHandler$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateDefaultHandler$FUNC() { return OleCreateDefaultHandler$FUNC_; }

    static final MethodHandle OleCreateDefaultHandler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateDefaultHandler",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateDefaultHandler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateDefaultHandler$MH() { return OleCreateDefaultHandler$MH_; }

    static final FunctionDescriptor OleCreateEmbeddingHelper$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleCreateEmbeddingHelper$FUNC() { return OleCreateEmbeddingHelper$FUNC_; }

    static final MethodHandle OleCreateEmbeddingHelper$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleCreateEmbeddingHelper",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleCreateEmbeddingHelper$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleCreateEmbeddingHelper$MH() { return OleCreateEmbeddingHelper$MH_; }

    static final FunctionDescriptor IsAccelerator$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IsAccelerator$FUNC() { return IsAccelerator$FUNC_; }

    static final MethodHandle IsAccelerator$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsAccelerator",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsAccelerator$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IsAccelerator$MH() { return IsAccelerator$MH_; }

    static final FunctionDescriptor OleGetIconOfFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleGetIconOfFile$FUNC() { return OleGetIconOfFile$FUNC_; }

    static final MethodHandle OleGetIconOfFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleGetIconOfFile",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        OleGetIconOfFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleGetIconOfFile$MH() { return OleGetIconOfFile$MH_; }

    static final FunctionDescriptor OleGetIconOfClass$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleGetIconOfClass$FUNC() { return OleGetIconOfClass$FUNC_; }

    static final MethodHandle OleGetIconOfClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleGetIconOfClass",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        OleGetIconOfClass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleGetIconOfClass$MH() { return OleGetIconOfClass$MH_; }

    static final FunctionDescriptor OleMetafilePictFromIconAndLabel$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleMetafilePictFromIconAndLabel$FUNC() { return OleMetafilePictFromIconAndLabel$FUNC_; }

    static final MethodHandle OleMetafilePictFromIconAndLabel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleMetafilePictFromIconAndLabel",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        OleMetafilePictFromIconAndLabel$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleMetafilePictFromIconAndLabel$MH() { return OleMetafilePictFromIconAndLabel$MH_; }

    static final FunctionDescriptor OleRegGetUserType$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleRegGetUserType$FUNC() { return OleRegGetUserType$FUNC_; }

    static final MethodHandle OleRegGetUserType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleRegGetUserType",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        OleRegGetUserType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleRegGetUserType$MH() { return OleRegGetUserType$MH_; }

    static final FunctionDescriptor OleRegGetMiscStatus$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleRegGetMiscStatus$FUNC() { return OleRegGetMiscStatus$FUNC_; }

    static final MethodHandle OleRegGetMiscStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleRegGetMiscStatus",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        OleRegGetMiscStatus$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleRegGetMiscStatus$MH() { return OleRegGetMiscStatus$MH_; }

    static final FunctionDescriptor OleRegEnumFormatEtc$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleRegEnumFormatEtc$FUNC() { return OleRegEnumFormatEtc$FUNC_; }

    static final MethodHandle OleRegEnumFormatEtc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleRegEnumFormatEtc",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        OleRegEnumFormatEtc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleRegEnumFormatEtc$MH() { return OleRegEnumFormatEtc$MH_; }

    static final FunctionDescriptor OleRegEnumVerbs$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleRegEnumVerbs$FUNC() { return OleRegEnumVerbs$FUNC_; }

    static final MethodHandle OleRegEnumVerbs$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleRegEnumVerbs",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleRegEnumVerbs$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleRegEnumVerbs$MH() { return OleRegEnumVerbs$MH_; }

    static final MemoryLayout _OLESTREAMVTBL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Get"),
        C_POINTER.withName("Put")
    ).withName("_OLESTREAMVTBL");
    static final jdk.incubator.foreign.MemoryLayout _OLESTREAMVTBL$struct$LAYOUT() { return _OLESTREAMVTBL$struct$LAYOUT_; }

    static final MemoryLayout _OLESTREAMVTBL$Get$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OLESTREAMVTBL$Get$LAYOUT() { return _OLESTREAMVTBL$Get$LAYOUT_; }

    static final VarHandle _OLESTREAMVTBL$Get$VH_ = MemoryHandles.asAddressVarHandle(_OLESTREAMVTBL$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Get")));
    static final java.lang.invoke.VarHandle _OLESTREAMVTBL$Get$VH() { return _OLESTREAMVTBL$Get$VH_; }

    static final MemoryLayout _OLESTREAMVTBL$Put$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OLESTREAMVTBL$Put$LAYOUT() { return _OLESTREAMVTBL$Put$LAYOUT_; }

    static final VarHandle _OLESTREAMVTBL$Put$VH_ = MemoryHandles.asAddressVarHandle(_OLESTREAMVTBL$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Put")));
    static final java.lang.invoke.VarHandle _OLESTREAMVTBL$Put$VH() { return _OLESTREAMVTBL$Put$VH_; }

    static final MemoryLayout _OLESTREAM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpstbl")
    ).withName("_OLESTREAM");
    static final jdk.incubator.foreign.MemoryLayout _OLESTREAM$struct$LAYOUT() { return _OLESTREAM$struct$LAYOUT_; }

    static final MemoryLayout _OLESTREAM$lpstbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OLESTREAM$lpstbl$LAYOUT() { return _OLESTREAM$lpstbl$LAYOUT_; }

    static final VarHandle _OLESTREAM$lpstbl$VH_ = MemoryHandles.asAddressVarHandle(_OLESTREAM$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstbl")));
    static final java.lang.invoke.VarHandle _OLESTREAM$lpstbl$VH() { return _OLESTREAM$lpstbl$VH_; }

    static final FunctionDescriptor OleConvertOLESTREAMToIStorage$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleConvertOLESTREAMToIStorage$FUNC() { return OleConvertOLESTREAMToIStorage$FUNC_; }

    static final MethodHandle OleConvertOLESTREAMToIStorage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleConvertOLESTREAMToIStorage",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleConvertOLESTREAMToIStorage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleConvertOLESTREAMToIStorage$MH() { return OleConvertOLESTREAMToIStorage$MH_; }

    static final FunctionDescriptor OleConvertIStorageToOLESTREAM$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleConvertIStorageToOLESTREAM$FUNC() { return OleConvertIStorageToOLESTREAM$FUNC_; }

    static final MethodHandle OleConvertIStorageToOLESTREAM$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleConvertIStorageToOLESTREAM",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleConvertIStorageToOLESTREAM$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleConvertIStorageToOLESTREAM$MH() { return OleConvertIStorageToOLESTREAM$MH_; }

    static final FunctionDescriptor OleDoAutoConvert$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleDoAutoConvert$FUNC() { return OleDoAutoConvert$FUNC_; }

    static final MethodHandle OleDoAutoConvert$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleDoAutoConvert",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleDoAutoConvert$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleDoAutoConvert$MH() { return OleDoAutoConvert$MH_; }

    static final FunctionDescriptor OleGetAutoConvert$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleGetAutoConvert$FUNC() { return OleGetAutoConvert$FUNC_; }

    static final MethodHandle OleGetAutoConvert$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleGetAutoConvert",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleGetAutoConvert$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleGetAutoConvert$MH() { return OleGetAutoConvert$MH_; }

    static final FunctionDescriptor OleSetAutoConvert$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleSetAutoConvert$FUNC() { return OleSetAutoConvert$FUNC_; }

    static final MethodHandle OleSetAutoConvert$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleSetAutoConvert",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleSetAutoConvert$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleSetAutoConvert$MH() { return OleSetAutoConvert$MH_; }

    static final FunctionDescriptor SetConvertStg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConvertStg$FUNC() { return SetConvertStg$FUNC_; }

    static final MethodHandle SetConvertStg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConvertStg",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetConvertStg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConvertStg$MH() { return SetConvertStg$MH_; }

    static final FunctionDescriptor OleConvertIStorageToOLESTREAMEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_SHORT,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleConvertIStorageToOLESTREAMEx$FUNC() { return OleConvertIStorageToOLESTREAMEx$FUNC_; }

    static final MethodHandle OleConvertIStorageToOLESTREAMEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleConvertIStorageToOLESTREAMEx",
        "(Ljdk/incubator/foreign/MemoryAddress;SIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleConvertIStorageToOLESTREAMEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleConvertIStorageToOLESTREAMEx$MH() { return OleConvertIStorageToOLESTREAMEx$MH_; }

    static final FunctionDescriptor OleConvertOLESTREAMToIStorageEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OleConvertOLESTREAMToIStorageEx$FUNC() { return OleConvertOLESTREAMToIStorageEx$FUNC_; }

    static final MethodHandle OleConvertOLESTREAMToIStorageEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OleConvertOLESTREAMToIStorageEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        OleConvertOLESTREAMToIStorageEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OleConvertOLESTREAMToIStorageEx$MH() { return OleConvertOLESTREAMToIStorageEx$MH_; }

    static final MemoryLayout IID_IPrintDialogCallback$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IPrintDialogCallback$LAYOUT() { return IID_IPrintDialogCallback$LAYOUT_; }

    static final MemorySegment IID_IPrintDialogCallback$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IPrintDialogCallback", IID_IPrintDialogCallback$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IPrintDialogCallback$SEGMENT() { return IID_IPrintDialogCallback$SEGMENT_; }

    static final MemoryLayout IID_IPrintDialogServices$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IPrintDialogServices$LAYOUT() { return IID_IPrintDialogServices$LAYOUT_; }

    static final MemorySegment IID_IPrintDialogServices$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IPrintDialogServices", IID_IPrintDialogServices$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IPrintDialogServices$SEGMENT() { return IID_IPrintDialogServices$SEGMENT_; }

    static final MemoryLayout tagOFN_NT4A$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("lStructSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndOwner"),
        C_POINTER.withName("hInstance"),
        C_POINTER.withName("lpstrFilter"),
        C_POINTER.withName("lpstrCustomFilter"),
        C_LONG.withName("nMaxCustFilter"),
        C_LONG.withName("nFilterIndex"),
        C_POINTER.withName("lpstrFile"),
        C_LONG.withName("nMaxFile"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstrFileTitle"),
        C_LONG.withName("nMaxFileTitle"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstrInitialDir"),
        C_POINTER.withName("lpstrTitle"),
        C_LONG.withName("Flags"),
        C_SHORT.withName("nFileOffset"),
        C_SHORT.withName("nFileExtension"),
        C_POINTER.withName("lpstrDefExt"),
        C_LONGLONG.withName("lCustData"),
        C_POINTER.withName("lpfnHook"),
        C_POINTER.withName("lpTemplateName")
    ).withName("tagOFN_NT4A");
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$struct$LAYOUT() { return tagOFN_NT4A$struct$LAYOUT_; }

    static final MemoryLayout tagOFN_NT4A$lStructSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lStructSize$LAYOUT() { return tagOFN_NT4A$lStructSize$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lStructSize$VH_ = tagOFN_NT4A$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lStructSize$VH() { return tagOFN_NT4A$lStructSize$VH_; }

    static final MemoryLayout tagOFN_NT4A$hwndOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$hwndOwner$LAYOUT() { return tagOFN_NT4A$hwndOwner$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$hwndOwner$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndOwner")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$hwndOwner$VH() { return tagOFN_NT4A$hwndOwner$VH_; }

    static final MemoryLayout tagOFN_NT4A$hInstance$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$hInstance$LAYOUT() { return tagOFN_NT4A$hInstance$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$hInstance$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hInstance")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$hInstance$VH() { return tagOFN_NT4A$hInstance$VH_; }

    static final MemoryLayout tagOFN_NT4A$lpstrFilter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lpstrFilter$LAYOUT() { return tagOFN_NT4A$lpstrFilter$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lpstrFilter$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFilter")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lpstrFilter$VH() { return tagOFN_NT4A$lpstrFilter$VH_; }

    static final MemoryLayout tagOFN_NT4A$lpstrCustomFilter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lpstrCustomFilter$LAYOUT() { return tagOFN_NT4A$lpstrCustomFilter$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lpstrCustomFilter$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrCustomFilter")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lpstrCustomFilter$VH() { return tagOFN_NT4A$lpstrCustomFilter$VH_; }

    static final MemoryLayout tagOFN_NT4A$nMaxCustFilter$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$nMaxCustFilter$LAYOUT() { return tagOFN_NT4A$nMaxCustFilter$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$nMaxCustFilter$VH_ = tagOFN_NT4A$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxCustFilter"));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$nMaxCustFilter$VH() { return tagOFN_NT4A$nMaxCustFilter$VH_; }

    static final MemoryLayout tagOFN_NT4A$nFilterIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$nFilterIndex$LAYOUT() { return tagOFN_NT4A$nFilterIndex$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$nFilterIndex$VH_ = tagOFN_NT4A$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFilterIndex"));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$nFilterIndex$VH() { return tagOFN_NT4A$nFilterIndex$VH_; }

    static final MemoryLayout tagOFN_NT4A$lpstrFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lpstrFile$LAYOUT() { return tagOFN_NT4A$lpstrFile$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lpstrFile$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFile")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lpstrFile$VH() { return tagOFN_NT4A$lpstrFile$VH_; }

    static final MemoryLayout tagOFN_NT4A$nMaxFile$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$nMaxFile$LAYOUT() { return tagOFN_NT4A$nMaxFile$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$nMaxFile$VH_ = tagOFN_NT4A$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFile"));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$nMaxFile$VH() { return tagOFN_NT4A$nMaxFile$VH_; }

    static final MemoryLayout tagOFN_NT4A$lpstrFileTitle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lpstrFileTitle$LAYOUT() { return tagOFN_NT4A$lpstrFileTitle$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lpstrFileTitle$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFileTitle")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lpstrFileTitle$VH() { return tagOFN_NT4A$lpstrFileTitle$VH_; }

    static final MemoryLayout tagOFN_NT4A$nMaxFileTitle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$nMaxFileTitle$LAYOUT() { return tagOFN_NT4A$nMaxFileTitle$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$nMaxFileTitle$VH_ = tagOFN_NT4A$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFileTitle"));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$nMaxFileTitle$VH() { return tagOFN_NT4A$nMaxFileTitle$VH_; }

    static final MemoryLayout tagOFN_NT4A$lpstrInitialDir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lpstrInitialDir$LAYOUT() { return tagOFN_NT4A$lpstrInitialDir$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lpstrInitialDir$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrInitialDir")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lpstrInitialDir$VH() { return tagOFN_NT4A$lpstrInitialDir$VH_; }

    static final MemoryLayout tagOFN_NT4A$lpstrTitle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lpstrTitle$LAYOUT() { return tagOFN_NT4A$lpstrTitle$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lpstrTitle$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrTitle")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lpstrTitle$VH() { return tagOFN_NT4A$lpstrTitle$VH_; }

    static final MemoryLayout tagOFN_NT4A$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$Flags$LAYOUT() { return tagOFN_NT4A$Flags$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$Flags$VH_ = tagOFN_NT4A$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$Flags$VH() { return tagOFN_NT4A$Flags$VH_; }

    static final MemoryLayout tagOFN_NT4A$nFileOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$nFileOffset$LAYOUT() { return tagOFN_NT4A$nFileOffset$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$nFileOffset$VH_ = tagOFN_NT4A$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nFileOffset"));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$nFileOffset$VH() { return tagOFN_NT4A$nFileOffset$VH_; }

    static final MemoryLayout tagOFN_NT4A$nFileExtension$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$nFileExtension$LAYOUT() { return tagOFN_NT4A$nFileExtension$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$nFileExtension$VH_ = tagOFN_NT4A$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nFileExtension"));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$nFileExtension$VH() { return tagOFN_NT4A$nFileExtension$VH_; }

    static final MemoryLayout tagOFN_NT4A$lpstrDefExt$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lpstrDefExt$LAYOUT() { return tagOFN_NT4A$lpstrDefExt$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lpstrDefExt$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrDefExt")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lpstrDefExt$VH() { return tagOFN_NT4A$lpstrDefExt$VH_; }

    static final MemoryLayout tagOFN_NT4A$lCustData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lCustData$LAYOUT() { return tagOFN_NT4A$lCustData$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lCustData$VH_ = tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lCustData"));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lCustData$VH() { return tagOFN_NT4A$lCustData$VH_; }

    static final MemoryLayout tagOFN_NT4A$lpfnHook$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lpfnHook$LAYOUT() { return tagOFN_NT4A$lpfnHook$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lpfnHook$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpfnHook")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lpfnHook$VH() { return tagOFN_NT4A$lpfnHook$VH_; }

    static final MemoryLayout tagOFN_NT4A$lpTemplateName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4A$lpTemplateName$LAYOUT() { return tagOFN_NT4A$lpTemplateName$LAYOUT_; }

    static final VarHandle tagOFN_NT4A$lpTemplateName$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4A$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpTemplateName")));
    static final java.lang.invoke.VarHandle tagOFN_NT4A$lpTemplateName$VH() { return tagOFN_NT4A$lpTemplateName$VH_; }

    static final MemoryLayout tagOFN_NT4W$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("lStructSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndOwner"),
        C_POINTER.withName("hInstance"),
        C_POINTER.withName("lpstrFilter"),
        C_POINTER.withName("lpstrCustomFilter"),
        C_LONG.withName("nMaxCustFilter"),
        C_LONG.withName("nFilterIndex"),
        C_POINTER.withName("lpstrFile"),
        C_LONG.withName("nMaxFile"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstrFileTitle"),
        C_LONG.withName("nMaxFileTitle"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstrInitialDir"),
        C_POINTER.withName("lpstrTitle"),
        C_LONG.withName("Flags"),
        C_SHORT.withName("nFileOffset"),
        C_SHORT.withName("nFileExtension"),
        C_POINTER.withName("lpstrDefExt"),
        C_LONGLONG.withName("lCustData"),
        C_POINTER.withName("lpfnHook"),
        C_POINTER.withName("lpTemplateName")
    ).withName("tagOFN_NT4W");
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$struct$LAYOUT() { return tagOFN_NT4W$struct$LAYOUT_; }

    static final MemoryLayout tagOFN_NT4W$lStructSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lStructSize$LAYOUT() { return tagOFN_NT4W$lStructSize$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lStructSize$VH_ = tagOFN_NT4W$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lStructSize$VH() { return tagOFN_NT4W$lStructSize$VH_; }

    static final MemoryLayout tagOFN_NT4W$hwndOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$hwndOwner$LAYOUT() { return tagOFN_NT4W$hwndOwner$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$hwndOwner$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndOwner")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$hwndOwner$VH() { return tagOFN_NT4W$hwndOwner$VH_; }

    static final MemoryLayout tagOFN_NT4W$hInstance$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$hInstance$LAYOUT() { return tagOFN_NT4W$hInstance$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$hInstance$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hInstance")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$hInstance$VH() { return tagOFN_NT4W$hInstance$VH_; }

    static final MemoryLayout tagOFN_NT4W$lpstrFilter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lpstrFilter$LAYOUT() { return tagOFN_NT4W$lpstrFilter$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lpstrFilter$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFilter")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lpstrFilter$VH() { return tagOFN_NT4W$lpstrFilter$VH_; }

    static final MemoryLayout tagOFN_NT4W$lpstrCustomFilter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lpstrCustomFilter$LAYOUT() { return tagOFN_NT4W$lpstrCustomFilter$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lpstrCustomFilter$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrCustomFilter")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lpstrCustomFilter$VH() { return tagOFN_NT4W$lpstrCustomFilter$VH_; }

    static final MemoryLayout tagOFN_NT4W$nMaxCustFilter$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$nMaxCustFilter$LAYOUT() { return tagOFN_NT4W$nMaxCustFilter$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$nMaxCustFilter$VH_ = tagOFN_NT4W$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxCustFilter"));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$nMaxCustFilter$VH() { return tagOFN_NT4W$nMaxCustFilter$VH_; }

    static final MemoryLayout tagOFN_NT4W$nFilterIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$nFilterIndex$LAYOUT() { return tagOFN_NT4W$nFilterIndex$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$nFilterIndex$VH_ = tagOFN_NT4W$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFilterIndex"));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$nFilterIndex$VH() { return tagOFN_NT4W$nFilterIndex$VH_; }

    static final MemoryLayout tagOFN_NT4W$lpstrFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lpstrFile$LAYOUT() { return tagOFN_NT4W$lpstrFile$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lpstrFile$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFile")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lpstrFile$VH() { return tagOFN_NT4W$lpstrFile$VH_; }

    static final MemoryLayout tagOFN_NT4W$nMaxFile$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$nMaxFile$LAYOUT() { return tagOFN_NT4W$nMaxFile$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$nMaxFile$VH_ = tagOFN_NT4W$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFile"));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$nMaxFile$VH() { return tagOFN_NT4W$nMaxFile$VH_; }

    static final MemoryLayout tagOFN_NT4W$lpstrFileTitle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lpstrFileTitle$LAYOUT() { return tagOFN_NT4W$lpstrFileTitle$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lpstrFileTitle$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFileTitle")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lpstrFileTitle$VH() { return tagOFN_NT4W$lpstrFileTitle$VH_; }

    static final MemoryLayout tagOFN_NT4W$nMaxFileTitle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$nMaxFileTitle$LAYOUT() { return tagOFN_NT4W$nMaxFileTitle$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$nMaxFileTitle$VH_ = tagOFN_NT4W$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFileTitle"));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$nMaxFileTitle$VH() { return tagOFN_NT4W$nMaxFileTitle$VH_; }

    static final MemoryLayout tagOFN_NT4W$lpstrInitialDir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lpstrInitialDir$LAYOUT() { return tagOFN_NT4W$lpstrInitialDir$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lpstrInitialDir$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrInitialDir")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lpstrInitialDir$VH() { return tagOFN_NT4W$lpstrInitialDir$VH_; }

    static final MemoryLayout tagOFN_NT4W$lpstrTitle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lpstrTitle$LAYOUT() { return tagOFN_NT4W$lpstrTitle$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lpstrTitle$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrTitle")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lpstrTitle$VH() { return tagOFN_NT4W$lpstrTitle$VH_; }

    static final MemoryLayout tagOFN_NT4W$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$Flags$LAYOUT() { return tagOFN_NT4W$Flags$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$Flags$VH_ = tagOFN_NT4W$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$Flags$VH() { return tagOFN_NT4W$Flags$VH_; }

    static final MemoryLayout tagOFN_NT4W$nFileOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$nFileOffset$LAYOUT() { return tagOFN_NT4W$nFileOffset$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$nFileOffset$VH_ = tagOFN_NT4W$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nFileOffset"));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$nFileOffset$VH() { return tagOFN_NT4W$nFileOffset$VH_; }

    static final MemoryLayout tagOFN_NT4W$nFileExtension$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$nFileExtension$LAYOUT() { return tagOFN_NT4W$nFileExtension$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$nFileExtension$VH_ = tagOFN_NT4W$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nFileExtension"));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$nFileExtension$VH() { return tagOFN_NT4W$nFileExtension$VH_; }

    static final MemoryLayout tagOFN_NT4W$lpstrDefExt$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lpstrDefExt$LAYOUT() { return tagOFN_NT4W$lpstrDefExt$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lpstrDefExt$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrDefExt")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lpstrDefExt$VH() { return tagOFN_NT4W$lpstrDefExt$VH_; }

    static final MemoryLayout tagOFN_NT4W$lCustData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lCustData$LAYOUT() { return tagOFN_NT4W$lCustData$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lCustData$VH_ = tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lCustData"));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lCustData$VH() { return tagOFN_NT4W$lCustData$VH_; }

    static final MemoryLayout tagOFN_NT4W$lpfnHook$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lpfnHook$LAYOUT() { return tagOFN_NT4W$lpfnHook$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lpfnHook$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpfnHook")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lpfnHook$VH() { return tagOFN_NT4W$lpfnHook$VH_; }

    static final MemoryLayout tagOFN_NT4W$lpTemplateName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFN_NT4W$lpTemplateName$LAYOUT() { return tagOFN_NT4W$lpTemplateName$LAYOUT_; }

    static final VarHandle tagOFN_NT4W$lpTemplateName$VH_ = MemoryHandles.asAddressVarHandle(tagOFN_NT4W$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpTemplateName")));
    static final java.lang.invoke.VarHandle tagOFN_NT4W$lpTemplateName$VH() { return tagOFN_NT4W$lpTemplateName$VH_; }

    static final MemoryLayout tagOFNA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("lStructSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndOwner"),
        C_POINTER.withName("hInstance"),
        C_POINTER.withName("lpstrFilter"),
        C_POINTER.withName("lpstrCustomFilter"),
        C_LONG.withName("nMaxCustFilter"),
        C_LONG.withName("nFilterIndex"),
        C_POINTER.withName("lpstrFile"),
        C_LONG.withName("nMaxFile"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstrFileTitle"),
        C_LONG.withName("nMaxFileTitle"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstrInitialDir"),
        C_POINTER.withName("lpstrTitle"),
        C_LONG.withName("Flags"),
        C_SHORT.withName("nFileOffset"),
        C_SHORT.withName("nFileExtension"),
        C_POINTER.withName("lpstrDefExt"),
        C_LONGLONG.withName("lCustData"),
        C_POINTER.withName("lpfnHook"),
        C_POINTER.withName("lpTemplateName"),
        C_POINTER.withName("pvReserved"),
        C_LONG.withName("dwReserved"),
        C_LONG.withName("FlagsEx")
    ).withName("tagOFNA");
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$struct$LAYOUT() { return tagOFNA$struct$LAYOUT_; }

    static final MemoryLayout tagOFNA$lStructSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lStructSize$LAYOUT() { return tagOFNA$lStructSize$LAYOUT_; }

    static final VarHandle tagOFNA$lStructSize$VH_ = tagOFNA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    static final java.lang.invoke.VarHandle tagOFNA$lStructSize$VH() { return tagOFNA$lStructSize$VH_; }

    static final MemoryLayout tagOFNA$hwndOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$hwndOwner$LAYOUT() { return tagOFNA$hwndOwner$LAYOUT_; }

    static final VarHandle tagOFNA$hwndOwner$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndOwner")));
    static final java.lang.invoke.VarHandle tagOFNA$hwndOwner$VH() { return tagOFNA$hwndOwner$VH_; }

    static final MemoryLayout tagOFNA$hInstance$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$hInstance$LAYOUT() { return tagOFNA$hInstance$LAYOUT_; }

    static final VarHandle tagOFNA$hInstance$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hInstance")));
    static final java.lang.invoke.VarHandle tagOFNA$hInstance$VH() { return tagOFNA$hInstance$VH_; }

    static final MemoryLayout tagOFNA$lpstrFilter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lpstrFilter$LAYOUT() { return tagOFNA$lpstrFilter$LAYOUT_; }

    static final VarHandle tagOFNA$lpstrFilter$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFilter")));
    static final java.lang.invoke.VarHandle tagOFNA$lpstrFilter$VH() { return tagOFNA$lpstrFilter$VH_; }

    static final MemoryLayout tagOFNA$lpstrCustomFilter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lpstrCustomFilter$LAYOUT() { return tagOFNA$lpstrCustomFilter$LAYOUT_; }

    static final VarHandle tagOFNA$lpstrCustomFilter$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrCustomFilter")));
    static final java.lang.invoke.VarHandle tagOFNA$lpstrCustomFilter$VH() { return tagOFNA$lpstrCustomFilter$VH_; }

    static final MemoryLayout tagOFNA$nMaxCustFilter$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$nMaxCustFilter$LAYOUT() { return tagOFNA$nMaxCustFilter$LAYOUT_; }

    static final VarHandle tagOFNA$nMaxCustFilter$VH_ = tagOFNA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxCustFilter"));
    static final java.lang.invoke.VarHandle tagOFNA$nMaxCustFilter$VH() { return tagOFNA$nMaxCustFilter$VH_; }

    static final MemoryLayout tagOFNA$nFilterIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$nFilterIndex$LAYOUT() { return tagOFNA$nFilterIndex$LAYOUT_; }

    static final VarHandle tagOFNA$nFilterIndex$VH_ = tagOFNA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFilterIndex"));
    static final java.lang.invoke.VarHandle tagOFNA$nFilterIndex$VH() { return tagOFNA$nFilterIndex$VH_; }

    static final MemoryLayout tagOFNA$lpstrFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lpstrFile$LAYOUT() { return tagOFNA$lpstrFile$LAYOUT_; }

    static final VarHandle tagOFNA$lpstrFile$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFile")));
    static final java.lang.invoke.VarHandle tagOFNA$lpstrFile$VH() { return tagOFNA$lpstrFile$VH_; }

    static final MemoryLayout tagOFNA$nMaxFile$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$nMaxFile$LAYOUT() { return tagOFNA$nMaxFile$LAYOUT_; }

    static final VarHandle tagOFNA$nMaxFile$VH_ = tagOFNA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFile"));
    static final java.lang.invoke.VarHandle tagOFNA$nMaxFile$VH() { return tagOFNA$nMaxFile$VH_; }

    static final MemoryLayout tagOFNA$lpstrFileTitle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lpstrFileTitle$LAYOUT() { return tagOFNA$lpstrFileTitle$LAYOUT_; }

    static final VarHandle tagOFNA$lpstrFileTitle$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFileTitle")));
    static final java.lang.invoke.VarHandle tagOFNA$lpstrFileTitle$VH() { return tagOFNA$lpstrFileTitle$VH_; }

    static final MemoryLayout tagOFNA$nMaxFileTitle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$nMaxFileTitle$LAYOUT() { return tagOFNA$nMaxFileTitle$LAYOUT_; }

    static final VarHandle tagOFNA$nMaxFileTitle$VH_ = tagOFNA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFileTitle"));
    static final java.lang.invoke.VarHandle tagOFNA$nMaxFileTitle$VH() { return tagOFNA$nMaxFileTitle$VH_; }

    static final MemoryLayout tagOFNA$lpstrInitialDir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lpstrInitialDir$LAYOUT() { return tagOFNA$lpstrInitialDir$LAYOUT_; }

    static final VarHandle tagOFNA$lpstrInitialDir$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrInitialDir")));
    static final java.lang.invoke.VarHandle tagOFNA$lpstrInitialDir$VH() { return tagOFNA$lpstrInitialDir$VH_; }

    static final MemoryLayout tagOFNA$lpstrTitle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lpstrTitle$LAYOUT() { return tagOFNA$lpstrTitle$LAYOUT_; }

    static final VarHandle tagOFNA$lpstrTitle$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrTitle")));
    static final java.lang.invoke.VarHandle tagOFNA$lpstrTitle$VH() { return tagOFNA$lpstrTitle$VH_; }

    static final MemoryLayout tagOFNA$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$Flags$LAYOUT() { return tagOFNA$Flags$LAYOUT_; }

    static final VarHandle tagOFNA$Flags$VH_ = tagOFNA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle tagOFNA$Flags$VH() { return tagOFNA$Flags$VH_; }

    static final MemoryLayout tagOFNA$nFileOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$nFileOffset$LAYOUT() { return tagOFNA$nFileOffset$LAYOUT_; }

    static final VarHandle tagOFNA$nFileOffset$VH_ = tagOFNA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nFileOffset"));
    static final java.lang.invoke.VarHandle tagOFNA$nFileOffset$VH() { return tagOFNA$nFileOffset$VH_; }

    static final MemoryLayout tagOFNA$nFileExtension$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$nFileExtension$LAYOUT() { return tagOFNA$nFileExtension$LAYOUT_; }

    static final VarHandle tagOFNA$nFileExtension$VH_ = tagOFNA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nFileExtension"));
    static final java.lang.invoke.VarHandle tagOFNA$nFileExtension$VH() { return tagOFNA$nFileExtension$VH_; }

    static final MemoryLayout tagOFNA$lpstrDefExt$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lpstrDefExt$LAYOUT() { return tagOFNA$lpstrDefExt$LAYOUT_; }

    static final VarHandle tagOFNA$lpstrDefExt$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrDefExt")));
    static final java.lang.invoke.VarHandle tagOFNA$lpstrDefExt$VH() { return tagOFNA$lpstrDefExt$VH_; }

    static final MemoryLayout tagOFNA$lCustData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lCustData$LAYOUT() { return tagOFNA$lCustData$LAYOUT_; }

    static final VarHandle tagOFNA$lCustData$VH_ = tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lCustData"));
    static final java.lang.invoke.VarHandle tagOFNA$lCustData$VH() { return tagOFNA$lCustData$VH_; }

    static final MemoryLayout tagOFNA$lpfnHook$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lpfnHook$LAYOUT() { return tagOFNA$lpfnHook$LAYOUT_; }

    static final VarHandle tagOFNA$lpfnHook$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpfnHook")));
    static final java.lang.invoke.VarHandle tagOFNA$lpfnHook$VH() { return tagOFNA$lpfnHook$VH_; }

    static final MemoryLayout tagOFNA$lpTemplateName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$lpTemplateName$LAYOUT() { return tagOFNA$lpTemplateName$LAYOUT_; }

    static final VarHandle tagOFNA$lpTemplateName$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpTemplateName")));
    static final java.lang.invoke.VarHandle tagOFNA$lpTemplateName$VH() { return tagOFNA$lpTemplateName$VH_; }

    static final MemoryLayout tagOFNA$pvReserved$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$pvReserved$LAYOUT() { return tagOFNA$pvReserved$LAYOUT_; }

    static final VarHandle tagOFNA$pvReserved$VH_ = MemoryHandles.asAddressVarHandle(tagOFNA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvReserved")));
    static final java.lang.invoke.VarHandle tagOFNA$pvReserved$VH() { return tagOFNA$pvReserved$VH_; }

    static final MemoryLayout tagOFNA$dwReserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$dwReserved$LAYOUT() { return tagOFNA$dwReserved$LAYOUT_; }

    static final VarHandle tagOFNA$dwReserved$VH_ = tagOFNA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    static final java.lang.invoke.VarHandle tagOFNA$dwReserved$VH() { return tagOFNA$dwReserved$VH_; }

    static final MemoryLayout tagOFNA$FlagsEx$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNA$FlagsEx$LAYOUT() { return tagOFNA$FlagsEx$LAYOUT_; }

    static final VarHandle tagOFNA$FlagsEx$VH_ = tagOFNA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FlagsEx"));
    static final java.lang.invoke.VarHandle tagOFNA$FlagsEx$VH() { return tagOFNA$FlagsEx$VH_; }

    static final MemoryLayout tagOFNW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("lStructSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndOwner"),
        C_POINTER.withName("hInstance"),
        C_POINTER.withName("lpstrFilter"),
        C_POINTER.withName("lpstrCustomFilter"),
        C_LONG.withName("nMaxCustFilter"),
        C_LONG.withName("nFilterIndex"),
        C_POINTER.withName("lpstrFile"),
        C_LONG.withName("nMaxFile"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstrFileTitle"),
        C_LONG.withName("nMaxFileTitle"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstrInitialDir"),
        C_POINTER.withName("lpstrTitle"),
        C_LONG.withName("Flags"),
        C_SHORT.withName("nFileOffset"),
        C_SHORT.withName("nFileExtension"),
        C_POINTER.withName("lpstrDefExt"),
        C_LONGLONG.withName("lCustData"),
        C_POINTER.withName("lpfnHook"),
        C_POINTER.withName("lpTemplateName"),
        C_POINTER.withName("pvReserved"),
        C_LONG.withName("dwReserved"),
        C_LONG.withName("FlagsEx")
    ).withName("tagOFNW");
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$struct$LAYOUT() { return tagOFNW$struct$LAYOUT_; }

    static final MemoryLayout tagOFNW$lStructSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lStructSize$LAYOUT() { return tagOFNW$lStructSize$LAYOUT_; }

    static final VarHandle tagOFNW$lStructSize$VH_ = tagOFNW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    static final java.lang.invoke.VarHandle tagOFNW$lStructSize$VH() { return tagOFNW$lStructSize$VH_; }

    static final MemoryLayout tagOFNW$hwndOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$hwndOwner$LAYOUT() { return tagOFNW$hwndOwner$LAYOUT_; }

    static final VarHandle tagOFNW$hwndOwner$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndOwner")));
    static final java.lang.invoke.VarHandle tagOFNW$hwndOwner$VH() { return tagOFNW$hwndOwner$VH_; }

    static final MemoryLayout tagOFNW$hInstance$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$hInstance$LAYOUT() { return tagOFNW$hInstance$LAYOUT_; }

    static final VarHandle tagOFNW$hInstance$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hInstance")));
    static final java.lang.invoke.VarHandle tagOFNW$hInstance$VH() { return tagOFNW$hInstance$VH_; }

    static final MemoryLayout tagOFNW$lpstrFilter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lpstrFilter$LAYOUT() { return tagOFNW$lpstrFilter$LAYOUT_; }

    static final VarHandle tagOFNW$lpstrFilter$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFilter")));
    static final java.lang.invoke.VarHandle tagOFNW$lpstrFilter$VH() { return tagOFNW$lpstrFilter$VH_; }

    static final MemoryLayout tagOFNW$lpstrCustomFilter$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lpstrCustomFilter$LAYOUT() { return tagOFNW$lpstrCustomFilter$LAYOUT_; }

    static final VarHandle tagOFNW$lpstrCustomFilter$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrCustomFilter")));
    static final java.lang.invoke.VarHandle tagOFNW$lpstrCustomFilter$VH() { return tagOFNW$lpstrCustomFilter$VH_; }

    static final MemoryLayout tagOFNW$nMaxCustFilter$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$nMaxCustFilter$LAYOUT() { return tagOFNW$nMaxCustFilter$LAYOUT_; }

    static final VarHandle tagOFNW$nMaxCustFilter$VH_ = tagOFNW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxCustFilter"));
    static final java.lang.invoke.VarHandle tagOFNW$nMaxCustFilter$VH() { return tagOFNW$nMaxCustFilter$VH_; }

    static final MemoryLayout tagOFNW$nFilterIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$nFilterIndex$LAYOUT() { return tagOFNW$nFilterIndex$LAYOUT_; }

    static final VarHandle tagOFNW$nFilterIndex$VH_ = tagOFNW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFilterIndex"));
    static final java.lang.invoke.VarHandle tagOFNW$nFilterIndex$VH() { return tagOFNW$nFilterIndex$VH_; }

    static final MemoryLayout tagOFNW$lpstrFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lpstrFile$LAYOUT() { return tagOFNW$lpstrFile$LAYOUT_; }

    static final VarHandle tagOFNW$lpstrFile$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFile")));
    static final java.lang.invoke.VarHandle tagOFNW$lpstrFile$VH() { return tagOFNW$lpstrFile$VH_; }

    static final MemoryLayout tagOFNW$nMaxFile$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$nMaxFile$LAYOUT() { return tagOFNW$nMaxFile$LAYOUT_; }

    static final VarHandle tagOFNW$nMaxFile$VH_ = tagOFNW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFile"));
    static final java.lang.invoke.VarHandle tagOFNW$nMaxFile$VH() { return tagOFNW$nMaxFile$VH_; }

    static final MemoryLayout tagOFNW$lpstrFileTitle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lpstrFileTitle$LAYOUT() { return tagOFNW$lpstrFileTitle$LAYOUT_; }

    static final VarHandle tagOFNW$lpstrFileTitle$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrFileTitle")));
    static final java.lang.invoke.VarHandle tagOFNW$lpstrFileTitle$VH() { return tagOFNW$lpstrFileTitle$VH_; }

    static final MemoryLayout tagOFNW$nMaxFileTitle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$nMaxFileTitle$LAYOUT() { return tagOFNW$nMaxFileTitle$LAYOUT_; }

    static final VarHandle tagOFNW$nMaxFileTitle$VH_ = tagOFNW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nMaxFileTitle"));
    static final java.lang.invoke.VarHandle tagOFNW$nMaxFileTitle$VH() { return tagOFNW$nMaxFileTitle$VH_; }

    static final MemoryLayout tagOFNW$lpstrInitialDir$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lpstrInitialDir$LAYOUT() { return tagOFNW$lpstrInitialDir$LAYOUT_; }

    static final VarHandle tagOFNW$lpstrInitialDir$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrInitialDir")));
    static final java.lang.invoke.VarHandle tagOFNW$lpstrInitialDir$VH() { return tagOFNW$lpstrInitialDir$VH_; }

    static final MemoryLayout tagOFNW$lpstrTitle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lpstrTitle$LAYOUT() { return tagOFNW$lpstrTitle$LAYOUT_; }

    static final VarHandle tagOFNW$lpstrTitle$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrTitle")));
    static final java.lang.invoke.VarHandle tagOFNW$lpstrTitle$VH() { return tagOFNW$lpstrTitle$VH_; }

    static final MemoryLayout tagOFNW$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$Flags$LAYOUT() { return tagOFNW$Flags$LAYOUT_; }

    static final VarHandle tagOFNW$Flags$VH_ = tagOFNW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle tagOFNW$Flags$VH() { return tagOFNW$Flags$VH_; }

    static final MemoryLayout tagOFNW$nFileOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$nFileOffset$LAYOUT() { return tagOFNW$nFileOffset$LAYOUT_; }

    static final VarHandle tagOFNW$nFileOffset$VH_ = tagOFNW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nFileOffset"));
    static final java.lang.invoke.VarHandle tagOFNW$nFileOffset$VH() { return tagOFNW$nFileOffset$VH_; }

    static final MemoryLayout tagOFNW$nFileExtension$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$nFileExtension$LAYOUT() { return tagOFNW$nFileExtension$LAYOUT_; }

    static final VarHandle tagOFNW$nFileExtension$VH_ = tagOFNW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("nFileExtension"));
    static final java.lang.invoke.VarHandle tagOFNW$nFileExtension$VH() { return tagOFNW$nFileExtension$VH_; }

    static final MemoryLayout tagOFNW$lpstrDefExt$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lpstrDefExt$LAYOUT() { return tagOFNW$lpstrDefExt$LAYOUT_; }

    static final VarHandle tagOFNW$lpstrDefExt$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpstrDefExt")));
    static final java.lang.invoke.VarHandle tagOFNW$lpstrDefExt$VH() { return tagOFNW$lpstrDefExt$VH_; }

    static final MemoryLayout tagOFNW$lCustData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lCustData$LAYOUT() { return tagOFNW$lCustData$LAYOUT_; }

    static final VarHandle tagOFNW$lCustData$VH_ = tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lCustData"));
    static final java.lang.invoke.VarHandle tagOFNW$lCustData$VH() { return tagOFNW$lCustData$VH_; }

    static final MemoryLayout tagOFNW$lpfnHook$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lpfnHook$LAYOUT() { return tagOFNW$lpfnHook$LAYOUT_; }

    static final VarHandle tagOFNW$lpfnHook$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpfnHook")));
    static final java.lang.invoke.VarHandle tagOFNW$lpfnHook$VH() { return tagOFNW$lpfnHook$VH_; }

    static final MemoryLayout tagOFNW$lpTemplateName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$lpTemplateName$LAYOUT() { return tagOFNW$lpTemplateName$LAYOUT_; }

    static final VarHandle tagOFNW$lpTemplateName$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpTemplateName")));
    static final java.lang.invoke.VarHandle tagOFNW$lpTemplateName$VH() { return tagOFNW$lpTemplateName$VH_; }

    static final MemoryLayout tagOFNW$pvReserved$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$pvReserved$LAYOUT() { return tagOFNW$pvReserved$LAYOUT_; }

    static final VarHandle tagOFNW$pvReserved$VH_ = MemoryHandles.asAddressVarHandle(tagOFNW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvReserved")));
    static final java.lang.invoke.VarHandle tagOFNW$pvReserved$VH() { return tagOFNW$pvReserved$VH_; }

    static final MemoryLayout tagOFNW$dwReserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$dwReserved$LAYOUT() { return tagOFNW$dwReserved$LAYOUT_; }

    static final VarHandle tagOFNW$dwReserved$VH_ = tagOFNW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved"));
    static final java.lang.invoke.VarHandle tagOFNW$dwReserved$VH() { return tagOFNW$dwReserved$VH_; }

    static final MemoryLayout tagOFNW$FlagsEx$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOFNW$FlagsEx$LAYOUT() { return tagOFNW$FlagsEx$LAYOUT_; }

    static final VarHandle tagOFNW$FlagsEx$VH_ = tagOFNW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FlagsEx"));
    static final java.lang.invoke.VarHandle tagOFNW$FlagsEx$VH() { return tagOFNW$FlagsEx$VH_; }

    static final FunctionDescriptor GetOpenFileNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetOpenFileNameA$FUNC() { return GetOpenFileNameA$FUNC_; }

    static final MethodHandle GetOpenFileNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOpenFileNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetOpenFileNameA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetOpenFileNameA$MH() { return GetOpenFileNameA$MH_; }

    static final FunctionDescriptor GetOpenFileNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetOpenFileNameW$FUNC() { return GetOpenFileNameW$FUNC_; }

    static final MethodHandle GetOpenFileNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOpenFileNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetOpenFileNameW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetOpenFileNameW$MH() { return GetOpenFileNameW$MH_; }

    static final FunctionDescriptor GetSaveFileNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetSaveFileNameA$FUNC() { return GetSaveFileNameA$FUNC_; }

    static final MethodHandle GetSaveFileNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSaveFileNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSaveFileNameA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetSaveFileNameA$MH() { return GetSaveFileNameA$MH_; }

    static final FunctionDescriptor GetSaveFileNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetSaveFileNameW$FUNC() { return GetSaveFileNameW$FUNC_; }

    static final MethodHandle GetSaveFileNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSaveFileNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSaveFileNameW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetSaveFileNameW$MH() { return GetSaveFileNameW$MH_; }

    static final FunctionDescriptor GetFileTitleA$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileTitleA$FUNC() { return GetFileTitleA$FUNC_; }

    static final MethodHandle GetFileTitleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileTitleA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;S)S",
        GetFileTitleA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileTitleA$MH() { return GetFileTitleA$MH_; }

    static final FunctionDescriptor GetFileTitleW$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileTitleW$FUNC() { return GetFileTitleW$FUNC_; }

    static final MethodHandle GetFileTitleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileTitleW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;S)S",
        GetFileTitleW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileTitleW$MH() { return GetFileTitleW$MH_; }

    static final MemoryLayout _OFNOTIFYA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("hwndFrom"),
            C_LONGLONG.withName("idFrom"),
            C_INT.withName("code"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("hdr"),
        C_POINTER.withName("lpOFN"),
        C_POINTER.withName("pszFile")
    ).withName("_OFNOTIFYA");
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYA$struct$LAYOUT() { return _OFNOTIFYA$struct$LAYOUT_; }

    static final MemoryLayout _OFNOTIFYA$lpOFN$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYA$lpOFN$LAYOUT() { return _OFNOTIFYA$lpOFN$LAYOUT_; }

    static final VarHandle _OFNOTIFYA$lpOFN$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOFN")));
    static final java.lang.invoke.VarHandle _OFNOTIFYA$lpOFN$VH() { return _OFNOTIFYA$lpOFN$VH_; }

    static final MemoryLayout _OFNOTIFYA$pszFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYA$pszFile$LAYOUT() { return _OFNOTIFYA$pszFile$LAYOUT_; }

    static final VarHandle _OFNOTIFYA$pszFile$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszFile")));
    static final java.lang.invoke.VarHandle _OFNOTIFYA$pszFile$VH() { return _OFNOTIFYA$pszFile$VH_; }

    static final MemoryLayout _OFNOTIFYW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("hwndFrom"),
            C_LONGLONG.withName("idFrom"),
            C_INT.withName("code"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("hdr"),
        C_POINTER.withName("lpOFN"),
        C_POINTER.withName("pszFile")
    ).withName("_OFNOTIFYW");
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYW$struct$LAYOUT() { return _OFNOTIFYW$struct$LAYOUT_; }

    static final MemoryLayout _OFNOTIFYW$lpOFN$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYW$lpOFN$LAYOUT() { return _OFNOTIFYW$lpOFN$LAYOUT_; }

    static final VarHandle _OFNOTIFYW$lpOFN$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOFN")));
    static final java.lang.invoke.VarHandle _OFNOTIFYW$lpOFN$VH() { return _OFNOTIFYW$lpOFN$VH_; }

    static final MemoryLayout _OFNOTIFYW$pszFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYW$pszFile$LAYOUT() { return _OFNOTIFYW$pszFile$LAYOUT_; }

    static final VarHandle _OFNOTIFYW$pszFile$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszFile")));
    static final java.lang.invoke.VarHandle _OFNOTIFYW$pszFile$VH() { return _OFNOTIFYW$pszFile$VH_; }

    static final MemoryLayout _OFNOTIFYEXA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("hwndFrom"),
            C_LONGLONG.withName("idFrom"),
            C_INT.withName("code"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("hdr"),
        C_POINTER.withName("lpOFN"),
        C_POINTER.withName("psf"),
        C_POINTER.withName("pidl")
    ).withName("_OFNOTIFYEXA");
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYEXA$struct$LAYOUT() { return _OFNOTIFYEXA$struct$LAYOUT_; }

    static final MemoryLayout _OFNOTIFYEXA$lpOFN$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYEXA$lpOFN$LAYOUT() { return _OFNOTIFYEXA$lpOFN$LAYOUT_; }

    static final VarHandle _OFNOTIFYEXA$lpOFN$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYEXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOFN")));
    static final java.lang.invoke.VarHandle _OFNOTIFYEXA$lpOFN$VH() { return _OFNOTIFYEXA$lpOFN$VH_; }

    static final MemoryLayout _OFNOTIFYEXA$psf$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYEXA$psf$LAYOUT() { return _OFNOTIFYEXA$psf$LAYOUT_; }

    static final VarHandle _OFNOTIFYEXA$psf$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYEXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("psf")));
    static final java.lang.invoke.VarHandle _OFNOTIFYEXA$psf$VH() { return _OFNOTIFYEXA$psf$VH_; }

    static final MemoryLayout _OFNOTIFYEXA$pidl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYEXA$pidl$LAYOUT() { return _OFNOTIFYEXA$pidl$LAYOUT_; }

    static final VarHandle _OFNOTIFYEXA$pidl$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYEXA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pidl")));
    static final java.lang.invoke.VarHandle _OFNOTIFYEXA$pidl$VH() { return _OFNOTIFYEXA$pidl$VH_; }

    static final MemoryLayout _OFNOTIFYEXW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("hwndFrom"),
            C_LONGLONG.withName("idFrom"),
            C_INT.withName("code"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("hdr"),
        C_POINTER.withName("lpOFN"),
        C_POINTER.withName("psf"),
        C_POINTER.withName("pidl")
    ).withName("_OFNOTIFYEXW");
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYEXW$struct$LAYOUT() { return _OFNOTIFYEXW$struct$LAYOUT_; }

    static final MemoryLayout _OFNOTIFYEXW$lpOFN$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYEXW$lpOFN$LAYOUT() { return _OFNOTIFYEXW$lpOFN$LAYOUT_; }

    static final VarHandle _OFNOTIFYEXW$lpOFN$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYEXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpOFN")));
    static final java.lang.invoke.VarHandle _OFNOTIFYEXW$lpOFN$VH() { return _OFNOTIFYEXW$lpOFN$VH_; }

    static final MemoryLayout _OFNOTIFYEXW$psf$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYEXW$psf$LAYOUT() { return _OFNOTIFYEXW$psf$LAYOUT_; }

    static final VarHandle _OFNOTIFYEXW$psf$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYEXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("psf")));
    static final java.lang.invoke.VarHandle _OFNOTIFYEXW$psf$VH() { return _OFNOTIFYEXW$psf$VH_; }

    static final MemoryLayout _OFNOTIFYEXW$pidl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OFNOTIFYEXW$pidl$LAYOUT() { return _OFNOTIFYEXW$pidl$LAYOUT_; }

    static final VarHandle _OFNOTIFYEXW$pidl$VH_ = MemoryHandles.asAddressVarHandle(_OFNOTIFYEXW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pidl")));
    static final java.lang.invoke.VarHandle _OFNOTIFYEXW$pidl$VH() { return _OFNOTIFYEXW$pidl$VH_; }

    static final MemoryLayout tagCHOOSECOLORA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("lStructSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndOwner"),
        C_POINTER.withName("hInstance"),
        C_LONG.withName("rgbResult"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpCustColors"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("lCustData"),
        C_POINTER.withName("lpfnHook"),
        C_POINTER.withName("lpTemplateName")
    ).withName("tagCHOOSECOLORA");
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$struct$LAYOUT() { return tagCHOOSECOLORA$struct$LAYOUT_; }

    static final MemoryLayout tagCHOOSECOLORA$lStructSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$lStructSize$LAYOUT() { return tagCHOOSECOLORA$lStructSize$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORA$lStructSize$VH_ = tagCHOOSECOLORA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORA$lStructSize$VH() { return tagCHOOSECOLORA$lStructSize$VH_; }

    static final MemoryLayout tagCHOOSECOLORA$hwndOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$hwndOwner$LAYOUT() { return tagCHOOSECOLORA$hwndOwner$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORA$hwndOwner$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndOwner")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORA$hwndOwner$VH() { return tagCHOOSECOLORA$hwndOwner$VH_; }

    static final MemoryLayout tagCHOOSECOLORA$hInstance$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$hInstance$LAYOUT() { return tagCHOOSECOLORA$hInstance$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORA$hInstance$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hInstance")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORA$hInstance$VH() { return tagCHOOSECOLORA$hInstance$VH_; }

    static final MemoryLayout tagCHOOSECOLORA$rgbResult$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$rgbResult$LAYOUT() { return tagCHOOSECOLORA$rgbResult$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORA$rgbResult$VH_ = tagCHOOSECOLORA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("rgbResult"));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORA$rgbResult$VH() { return tagCHOOSECOLORA$rgbResult$VH_; }

    static final MemoryLayout tagCHOOSECOLORA$lpCustColors$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$lpCustColors$LAYOUT() { return tagCHOOSECOLORA$lpCustColors$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORA$lpCustColors$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpCustColors")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORA$lpCustColors$VH() { return tagCHOOSECOLORA$lpCustColors$VH_; }

    static final MemoryLayout tagCHOOSECOLORA$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$Flags$LAYOUT() { return tagCHOOSECOLORA$Flags$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORA$Flags$VH_ = tagCHOOSECOLORA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORA$Flags$VH() { return tagCHOOSECOLORA$Flags$VH_; }

    static final MemoryLayout tagCHOOSECOLORA$lCustData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$lCustData$LAYOUT() { return tagCHOOSECOLORA$lCustData$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORA$lCustData$VH_ = tagCHOOSECOLORA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lCustData"));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORA$lCustData$VH() { return tagCHOOSECOLORA$lCustData$VH_; }

    static final MemoryLayout tagCHOOSECOLORA$lpfnHook$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$lpfnHook$LAYOUT() { return tagCHOOSECOLORA$lpfnHook$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORA$lpfnHook$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpfnHook")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORA$lpfnHook$VH() { return tagCHOOSECOLORA$lpfnHook$VH_; }

    static final MemoryLayout tagCHOOSECOLORA$lpTemplateName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORA$lpTemplateName$LAYOUT() { return tagCHOOSECOLORA$lpTemplateName$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORA$lpTemplateName$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpTemplateName")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORA$lpTemplateName$VH() { return tagCHOOSECOLORA$lpTemplateName$VH_; }

    static final MemoryLayout tagCHOOSECOLORW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("lStructSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndOwner"),
        C_POINTER.withName("hInstance"),
        C_LONG.withName("rgbResult"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpCustColors"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("lCustData"),
        C_POINTER.withName("lpfnHook"),
        C_POINTER.withName("lpTemplateName")
    ).withName("tagCHOOSECOLORW");
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$struct$LAYOUT() { return tagCHOOSECOLORW$struct$LAYOUT_; }

    static final MemoryLayout tagCHOOSECOLORW$lStructSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$lStructSize$LAYOUT() { return tagCHOOSECOLORW$lStructSize$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORW$lStructSize$VH_ = tagCHOOSECOLORW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORW$lStructSize$VH() { return tagCHOOSECOLORW$lStructSize$VH_; }

    static final MemoryLayout tagCHOOSECOLORW$hwndOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$hwndOwner$LAYOUT() { return tagCHOOSECOLORW$hwndOwner$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORW$hwndOwner$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndOwner")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORW$hwndOwner$VH() { return tagCHOOSECOLORW$hwndOwner$VH_; }

    static final MemoryLayout tagCHOOSECOLORW$hInstance$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$hInstance$LAYOUT() { return tagCHOOSECOLORW$hInstance$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORW$hInstance$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hInstance")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORW$hInstance$VH() { return tagCHOOSECOLORW$hInstance$VH_; }

    static final MemoryLayout tagCHOOSECOLORW$rgbResult$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$rgbResult$LAYOUT() { return tagCHOOSECOLORW$rgbResult$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORW$rgbResult$VH_ = tagCHOOSECOLORW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("rgbResult"));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORW$rgbResult$VH() { return tagCHOOSECOLORW$rgbResult$VH_; }

    static final MemoryLayout tagCHOOSECOLORW$lpCustColors$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$lpCustColors$LAYOUT() { return tagCHOOSECOLORW$lpCustColors$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORW$lpCustColors$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpCustColors")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORW$lpCustColors$VH() { return tagCHOOSECOLORW$lpCustColors$VH_; }

    static final MemoryLayout tagCHOOSECOLORW$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$Flags$LAYOUT() { return tagCHOOSECOLORW$Flags$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORW$Flags$VH_ = tagCHOOSECOLORW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORW$Flags$VH() { return tagCHOOSECOLORW$Flags$VH_; }

    static final MemoryLayout tagCHOOSECOLORW$lCustData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$lCustData$LAYOUT() { return tagCHOOSECOLORW$lCustData$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORW$lCustData$VH_ = tagCHOOSECOLORW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lCustData"));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORW$lCustData$VH() { return tagCHOOSECOLORW$lCustData$VH_; }

    static final MemoryLayout tagCHOOSECOLORW$lpfnHook$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$lpfnHook$LAYOUT() { return tagCHOOSECOLORW$lpfnHook$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORW$lpfnHook$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpfnHook")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORW$lpfnHook$VH() { return tagCHOOSECOLORW$lpfnHook$VH_; }

    static final MemoryLayout tagCHOOSECOLORW$lpTemplateName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCHOOSECOLORW$lpTemplateName$LAYOUT() { return tagCHOOSECOLORW$lpTemplateName$LAYOUT_; }

    static final VarHandle tagCHOOSECOLORW$lpTemplateName$VH_ = MemoryHandles.asAddressVarHandle(tagCHOOSECOLORW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpTemplateName")));
    static final java.lang.invoke.VarHandle tagCHOOSECOLORW$lpTemplateName$VH() { return tagCHOOSECOLORW$lpTemplateName$VH_; }

    static final FunctionDescriptor ChooseColorA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ChooseColorA$FUNC() { return ChooseColorA$FUNC_; }

    static final MethodHandle ChooseColorA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChooseColorA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ChooseColorA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ChooseColorA$MH() { return ChooseColorA$MH_; }

    static final FunctionDescriptor ChooseColorW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ChooseColorW$FUNC() { return ChooseColorW$FUNC_; }

    static final MethodHandle ChooseColorW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChooseColorW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        ChooseColorW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ChooseColorW$MH() { return ChooseColorW$MH_; }

    static final MemoryLayout tagFINDREPLACEA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("lStructSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndOwner"),
        C_POINTER.withName("hInstance"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpstrFindWhat"),
        C_POINTER.withName("lpstrReplaceWith"),
        C_SHORT.withName("wFindWhatLen"),
        C_SHORT.withName("wReplaceWithLen"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("lCustData"),
        C_POINTER.withName("lpfnHook"),
        C_POINTER.withName("lpTemplateName")
    ).withName("tagFINDREPLACEA");
    static final jdk.incubator.foreign.MemoryLayout tagFINDREPLACEA$struct$LAYOUT() { return tagFINDREPLACEA$struct$LAYOUT_; }

    static final MemoryLayout tagFINDREPLACEA$lStructSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagFINDREPLACEA$lStructSize$LAYOUT() { return tagFINDREPLACEA$lStructSize$LAYOUT_; }

    static final VarHandle tagFINDREPLACEA$lStructSize$VH_ = tagFINDREPLACEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lStructSize"));
    static final java.lang.invoke.VarHandle tagFINDREPLACEA$lStructSize$VH() { return tagFINDREPLACEA$lStructSize$VH_; }

    static final MemoryLayout tagFINDREPLACEA$hwndOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagFINDREPLACEA$hwndOwner$LAYOUT() { return tagFINDREPLACEA$hwndOwner$LAYOUT_; }

    static final VarHandle tagFINDREPLACEA$hwndOwner$VH_ = MemoryHandles.asAddressVarHandle(tagFINDREPLACEA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndOwner")));
    static final java.lang.invoke.VarHandle tagFINDREPLACEA$hwndOwner$VH() { return tagFINDREPLACEA$hwndOwner$VH_; }

}

