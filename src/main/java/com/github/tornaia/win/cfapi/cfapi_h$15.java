// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$15 extends cfapi_h$14 {

    /* package-private */ cfapi_h$15() {}
    public static  MethodHandle CreateDirectoryExA$MH() {
        return cfapi_h$constants$27.CreateDirectoryExA$MH();
    }
    public static @C("BOOL") int CreateDirectoryExA (@C("LPCSTR") Addressable lpTemplateDirectory, @C("LPCSTR") Addressable lpNewDirectory, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$27.CreateDirectoryExA$MH().invokeExact(lpTemplateDirectory.address(), lpNewDirectory.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryExW$MH() {
        return cfapi_h$constants$27.CreateDirectoryExW$MH();
    }
    public static @C("BOOL") int CreateDirectoryExW (@C("LPCWSTR") Addressable lpTemplateDirectory, @C("LPCWSTR") Addressable lpNewDirectory, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$27.CreateDirectoryExW$MH().invokeExact(lpTemplateDirectory.address(), lpNewDirectory.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryTransactedA$MH() {
        return cfapi_h$constants$27.CreateDirectoryTransactedA$MH();
    }
    public static @C("BOOL") int CreateDirectoryTransactedA (@C("LPCSTR") Addressable lpTemplateDirectory, @C("LPCSTR") Addressable lpNewDirectory, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.CreateDirectoryTransactedA$MH().invokeExact(lpTemplateDirectory.address(), lpNewDirectory.address(), lpSecurityAttributes.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDirectoryTransactedW$MH() {
        return cfapi_h$constants$27.CreateDirectoryTransactedW$MH();
    }
    public static @C("BOOL") int CreateDirectoryTransactedW (@C("LPCWSTR") Addressable lpTemplateDirectory, @C("LPCWSTR") Addressable lpNewDirectory, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.CreateDirectoryTransactedW$MH().invokeExact(lpTemplateDirectory.address(), lpNewDirectory.address(), lpSecurityAttributes.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveDirectoryTransactedA$MH() {
        return cfapi_h$constants$27.RemoveDirectoryTransactedA$MH();
    }
    public static @C("BOOL") int RemoveDirectoryTransactedA (@C("LPCSTR") Addressable lpPathName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.RemoveDirectoryTransactedA$MH().invokeExact(lpPathName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveDirectoryTransactedW$MH() {
        return cfapi_h$constants$27.RemoveDirectoryTransactedW$MH();
    }
    public static @C("BOOL") int RemoveDirectoryTransactedW (@C("LPCWSTR") Addressable lpPathName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.RemoveDirectoryTransactedW$MH().invokeExact(lpPathName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFullPathNameTransactedA$MH() {
        return cfapi_h$constants$27.GetFullPathNameTransactedA$MH();
    }
    public static @C("DWORD") int GetFullPathNameTransactedA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer, @C("LPSTR*") Addressable lpFilePart, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.GetFullPathNameTransactedA$MH().invokeExact(lpFileName.address(), nBufferLength, lpBuffer.address(), lpFilePart.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFullPathNameTransactedW$MH() {
        return cfapi_h$constants$27.GetFullPathNameTransactedW$MH();
    }
    public static @C("DWORD") int GetFullPathNameTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int nBufferLength, @C("LPWSTR") Addressable lpBuffer, @C("LPWSTR*") Addressable lpFilePart, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.GetFullPathNameTransactedW$MH().invokeExact(lpFileName.address(), nBufferLength, lpBuffer.address(), lpFilePart.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefineDosDeviceA$MH() {
        return cfapi_h$constants$27.DefineDosDeviceA$MH();
    }
    public static @C("BOOL") int DefineDosDeviceA (@C("DWORD") int dwFlags, @C("LPCSTR") Addressable lpDeviceName, @C("LPCSTR") Addressable lpTargetPath) {
        try {
            return (int)cfapi_h$constants$27.DefineDosDeviceA$MH().invokeExact(dwFlags, lpDeviceName.address(), lpTargetPath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryDosDeviceA$MH() {
        return cfapi_h$constants$27.QueryDosDeviceA$MH();
    }
    public static @C("DWORD") int QueryDosDeviceA (@C("LPCSTR") Addressable lpDeviceName, @C("LPSTR") Addressable lpTargetPath, @C("DWORD") int ucchMax) {
        try {
            return (int)cfapi_h$constants$27.QueryDosDeviceA$MH().invokeExact(lpDeviceName.address(), lpTargetPath.address(), ucchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileTransactedA$MH() {
        return cfapi_h$constants$27.CreateFileTransactedA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileTransactedA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int dwCreationDisposition, @C("DWORD") int dwFlagsAndAttributes, @C("HANDLE") Addressable hTemplateFile, @C("HANDLE") Addressable hTransaction, @C("PUSHORT") Addressable pusMiniVersion, @C("PVOID") Addressable lpExtendedParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateFileTransactedA$MH().invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile.address(), hTransaction.address(), pusMiniVersion.address(), lpExtendedParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileTransactedW$MH() {
        return cfapi_h$constants$27.CreateFileTransactedW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int dwCreationDisposition, @C("DWORD") int dwFlagsAndAttributes, @C("HANDLE") Addressable hTemplateFile, @C("HANDLE") Addressable hTransaction, @C("PUSHORT") Addressable pusMiniVersion, @C("PVOID") Addressable lpExtendedParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateFileTransactedW$MH().invokeExact(lpFileName.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile.address(), hTransaction.address(), pusMiniVersion.address(), lpExtendedParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReOpenFile$MH() {
        return cfapi_h$constants$27.ReOpenFile$MH();
    }
    public static @C("HANDLE") MemoryAddress ReOpenFile (@C("HANDLE") Addressable hOriginalFile, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("DWORD") int dwFlagsAndAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.ReOpenFile$MH().invokeExact(hOriginalFile.address(), dwDesiredAccess, dwShareMode, dwFlagsAndAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileAttributesTransactedA$MH() {
        return cfapi_h$constants$27.SetFileAttributesTransactedA$MH();
    }
    public static @C("BOOL") int SetFileAttributesTransactedA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int dwFileAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.SetFileAttributesTransactedA$MH().invokeExact(lpFileName.address(), dwFileAttributes, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileAttributesTransactedW$MH() {
        return cfapi_h$constants$27.SetFileAttributesTransactedW$MH();
    }
    public static @C("BOOL") int SetFileAttributesTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwFileAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.SetFileAttributesTransactedW$MH().invokeExact(lpFileName.address(), dwFileAttributes, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileAttributesTransactedA$MH() {
        return cfapi_h$constants$27.GetFileAttributesTransactedA$MH();
    }
    public static @C("BOOL") int GetFileAttributesTransactedA (@C("LPCSTR") Addressable lpFileName, @C("GET_FILEEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFileInformation, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.GetFileAttributesTransactedA$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFileInformation.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileAttributesTransactedW$MH() {
        return cfapi_h$constants$27.GetFileAttributesTransactedW$MH();
    }
    public static @C("BOOL") int GetFileAttributesTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("GET_FILEEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFileInformation, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.GetFileAttributesTransactedW$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFileInformation.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCompressedFileSizeTransactedA$MH() {
        return cfapi_h$constants$27.GetCompressedFileSizeTransactedA$MH();
    }
    public static @C("DWORD") int GetCompressedFileSizeTransactedA (@C("LPCSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpFileSizeHigh, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.GetCompressedFileSizeTransactedA$MH().invokeExact(lpFileName.address(), lpFileSizeHigh.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCompressedFileSizeTransactedW$MH() {
        return cfapi_h$constants$27.GetCompressedFileSizeTransactedW$MH();
    }
    public static @C("DWORD") int GetCompressedFileSizeTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpFileSizeHigh, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.GetCompressedFileSizeTransactedW$MH().invokeExact(lpFileName.address(), lpFileSizeHigh.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteFileTransactedA$MH() {
        return cfapi_h$constants$27.DeleteFileTransactedA$MH();
    }
    public static @C("BOOL") int DeleteFileTransactedA (@C("LPCSTR") Addressable lpFileName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.DeleteFileTransactedA$MH().invokeExact(lpFileName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteFileTransactedW$MH() {
        return cfapi_h$constants$27.DeleteFileTransactedW$MH();
    }
    public static @C("BOOL") int DeleteFileTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.DeleteFileTransactedW$MH().invokeExact(lpFileName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckNameLegalDOS8Dot3A$MH() {
        return cfapi_h$constants$27.CheckNameLegalDOS8Dot3A$MH();
    }
    public static @C("BOOL") int CheckNameLegalDOS8Dot3A (@C("LPCSTR") Addressable lpName, @C("LPSTR") Addressable lpOemName, @C("DWORD") int OemNameSize, @C("PBOOL") Addressable pbNameContainsSpaces, @C("PBOOL") Addressable pbNameLegal) {
        try {
            return (int)cfapi_h$constants$27.CheckNameLegalDOS8Dot3A$MH().invokeExact(lpName.address(), lpOemName.address(), OemNameSize, pbNameContainsSpaces.address(), pbNameLegal.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckNameLegalDOS8Dot3W$MH() {
        return cfapi_h$constants$27.CheckNameLegalDOS8Dot3W$MH();
    }
    public static @C("BOOL") int CheckNameLegalDOS8Dot3W (@C("LPCWSTR") Addressable lpName, @C("LPSTR") Addressable lpOemName, @C("DWORD") int OemNameSize, @C("PBOOL") Addressable pbNameContainsSpaces, @C("PBOOL") Addressable pbNameLegal) {
        try {
            return (int)cfapi_h$constants$27.CheckNameLegalDOS8Dot3W$MH().invokeExact(lpName.address(), lpOemName.address(), OemNameSize, pbNameContainsSpaces.address(), pbNameLegal.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileTransactedA$MH() {
        return cfapi_h$constants$27.FindFirstFileTransactedA$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileTransactedA (@C("LPCSTR") Addressable lpFileName, @C("FINDEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFindFileData, @C("FINDEX_SEARCH_OPS") int fSearchOp, @C("LPVOID") Addressable lpSearchFilter, @C("DWORD") int dwAdditionalFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.FindFirstFileTransactedA$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFindFileData.address(), fSearchOp, lpSearchFilter.address(), dwAdditionalFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileTransactedW$MH() {
        return cfapi_h$constants$27.FindFirstFileTransactedW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("FINDEX_INFO_LEVELS") int fInfoLevelId, @C("LPVOID") Addressable lpFindFileData, @C("FINDEX_SEARCH_OPS") int fSearchOp, @C("LPVOID") Addressable lpSearchFilter, @C("DWORD") int dwAdditionalFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.FindFirstFileTransactedW$MH().invokeExact(lpFileName.address(), fInfoLevelId, lpFindFileData.address(), fSearchOp, lpSearchFilter.address(), dwAdditionalFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileA$MH() {
        return cfapi_h$constants$27.CopyFileA$MH();
    }
    public static @C("BOOL") int CopyFileA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("BOOL") int bFailIfExists) {
        try {
            return (int)cfapi_h$constants$27.CopyFileA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), bFailIfExists);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileW$MH() {
        return cfapi_h$constants$27.CopyFileW$MH();
    }
    public static @C("BOOL") int CopyFileW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("BOOL") int bFailIfExists) {
        try {
            return (int)cfapi_h$constants$27.CopyFileW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), bFailIfExists);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileExA$MH() {
        return cfapi_h$constants$27.CopyFileExA$MH();
    }
    public static @C("BOOL") int CopyFileExA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("LPBOOL") Addressable pbCancel, @C("DWORD") int dwCopyFlags) {
        try {
            return (int)cfapi_h$constants$27.CopyFileExA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), pbCancel.address(), dwCopyFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileExW$MH() {
        return cfapi_h$constants$27.CopyFileExW$MH();
    }
    public static @C("BOOL") int CopyFileExW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("LPBOOL") Addressable pbCancel, @C("DWORD") int dwCopyFlags) {
        try {
            return (int)cfapi_h$constants$27.CopyFileExW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), pbCancel.address(), dwCopyFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileTransactedA$MH() {
        return cfapi_h$constants$27.CopyFileTransactedA$MH();
    }
    public static @C("BOOL") int CopyFileTransactedA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("LPBOOL") Addressable pbCancel, @C("DWORD") int dwCopyFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.CopyFileTransactedA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), pbCancel.address(), dwCopyFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyFileTransactedW$MH() {
        return cfapi_h$constants$27.CopyFileTransactedW$MH();
    }
    public static @C("BOOL") int CopyFileTransactedW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("LPBOOL") Addressable pbCancel, @C("DWORD") int dwCopyFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.CopyFileTransactedW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), pbCancel.address(), dwCopyFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int COPYFILE2_CALLBACK_NONE() {
        return cfapi_h$constants$27.COPYFILE2_CALLBACK_NONE();
    }
    public static @C("int") int COPYFILE2_CALLBACK_CHUNK_STARTED() {
        return cfapi_h$constants$27.COPYFILE2_CALLBACK_CHUNK_STARTED();
    }
    public static @C("int") int COPYFILE2_CALLBACK_CHUNK_FINISHED() {
        return cfapi_h$constants$27.COPYFILE2_CALLBACK_CHUNK_FINISHED();
    }
    public static @C("int") int COPYFILE2_CALLBACK_STREAM_STARTED() {
        return cfapi_h$constants$27.COPYFILE2_CALLBACK_STREAM_STARTED();
    }
    public static @C("int") int COPYFILE2_CALLBACK_STREAM_FINISHED() {
        return cfapi_h$constants$27.COPYFILE2_CALLBACK_STREAM_FINISHED();
    }
    public static @C("int") int COPYFILE2_CALLBACK_POLL_CONTINUE() {
        return cfapi_h$constants$27.COPYFILE2_CALLBACK_POLL_CONTINUE();
    }
    public static @C("int") int COPYFILE2_CALLBACK_ERROR() {
        return cfapi_h$constants$27.COPYFILE2_CALLBACK_ERROR();
    }
    public static @C("int") int COPYFILE2_CALLBACK_MAX() {
        return cfapi_h$constants$27.COPYFILE2_CALLBACK_MAX();
    }
    public static @C("int") int COPYFILE2_PROGRESS_CONTINUE() {
        return cfapi_h$constants$27.COPYFILE2_PROGRESS_CONTINUE();
    }
    public static @C("int") int COPYFILE2_PROGRESS_CANCEL() {
        return cfapi_h$constants$27.COPYFILE2_PROGRESS_CANCEL();
    }
    public static @C("int") int COPYFILE2_PROGRESS_STOP() {
        return cfapi_h$constants$27.COPYFILE2_PROGRESS_STOP();
    }
    public static @C("int") int COPYFILE2_PROGRESS_QUIET() {
        return cfapi_h$constants$27.COPYFILE2_PROGRESS_QUIET();
    }
    public static @C("int") int COPYFILE2_PROGRESS_PAUSE() {
        return cfapi_h$constants$27.COPYFILE2_PROGRESS_PAUSE();
    }
    public static @C("int") int COPYFILE2_PHASE_NONE() {
        return cfapi_h$constants$27.COPYFILE2_PHASE_NONE();
    }
    public static @C("int") int COPYFILE2_PHASE_PREPARE_SOURCE() {
        return cfapi_h$constants$27.COPYFILE2_PHASE_PREPARE_SOURCE();
    }
    public static @C("int") int COPYFILE2_PHASE_PREPARE_DEST() {
        return cfapi_h$constants$27.COPYFILE2_PHASE_PREPARE_DEST();
    }
    public static @C("int") int COPYFILE2_PHASE_READ_SOURCE() {
        return cfapi_h$constants$27.COPYFILE2_PHASE_READ_SOURCE();
    }
    public static @C("int") int COPYFILE2_PHASE_WRITE_DESTINATION() {
        return cfapi_h$constants$27.COPYFILE2_PHASE_WRITE_DESTINATION();
    }
    public static @C("int") int COPYFILE2_PHASE_SERVER_COPY() {
        return cfapi_h$constants$27.COPYFILE2_PHASE_SERVER_COPY();
    }
    public static @C("int") int COPYFILE2_PHASE_NAMEGRAFT_COPY() {
        return cfapi_h$constants$27.COPYFILE2_PHASE_NAMEGRAFT_COPY();
    }
    public static @C("int") int COPYFILE2_PHASE_MAX() {
        return cfapi_h$constants$27.COPYFILE2_PHASE_MAX();
    }
    public static  MethodHandle CopyFile2$MH() {
        return cfapi_h$constants$27.CopyFile2$MH();
    }
    public static @C("HRESULT") int CopyFile2 (@C("PCWSTR") Addressable pwszExistingFileName, @C("PCWSTR") Addressable pwszNewFileName, @C("COPYFILE2_EXTENDED_PARAMETERS*") Addressable pExtendedParameters) {
        try {
            return (int)cfapi_h$constants$27.CopyFile2$MH().invokeExact(pwszExistingFileName.address(), pwszNewFileName.address(), pExtendedParameters.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileA$MH() {
        return cfapi_h$constants$27.MoveFileA$MH();
    }
    public static @C("BOOL") int MoveFileA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName) {
        try {
            return (int)cfapi_h$constants$27.MoveFileA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileW$MH() {
        return cfapi_h$constants$27.MoveFileW$MH();
    }
    public static @C("BOOL") int MoveFileW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName) {
        try {
            return (int)cfapi_h$constants$27.MoveFileW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileExA$MH() {
        return cfapi_h$constants$27.MoveFileExA$MH();
    }
    public static @C("BOOL") int MoveFileExA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$27.MoveFileExA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileExW$MH() {
        return cfapi_h$constants$27.MoveFileExW$MH();
    }
    public static @C("BOOL") int MoveFileExW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$27.MoveFileExW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileWithProgressA$MH() {
        return cfapi_h$constants$27.MoveFileWithProgressA$MH();
    }
    public static @C("BOOL") int MoveFileWithProgressA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$27.MoveFileWithProgressA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileWithProgressW$MH() {
        return cfapi_h$constants$27.MoveFileWithProgressW$MH();
    }
    public static @C("BOOL") int MoveFileWithProgressW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$27.MoveFileWithProgressW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileTransactedA$MH() {
        return cfapi_h$constants$27.MoveFileTransactedA$MH();
    }
    public static @C("BOOL") int MoveFileTransactedA (@C("LPCSTR") Addressable lpExistingFileName, @C("LPCSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.MoveFileTransactedA$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveFileTransactedW$MH() {
        return cfapi_h$constants$27.MoveFileTransactedW$MH();
    }
    public static @C("BOOL") int MoveFileTransactedW (@C("LPCWSTR") Addressable lpExistingFileName, @C("LPCWSTR") Addressable lpNewFileName, @C("LPPROGRESS_ROUTINE") Addressable lpProgressRoutine, @C("LPVOID") Addressable lpData, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.MoveFileTransactedW$MH().invokeExact(lpExistingFileName.address(), lpNewFileName.address(), lpProgressRoutine.address(), lpData.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReplaceFileA$MH() {
        return cfapi_h$constants$27.ReplaceFileA$MH();
    }
    public static @C("BOOL") int ReplaceFileA (@C("LPCSTR") Addressable lpReplacedFileName, @C("LPCSTR") Addressable lpReplacementFileName, @C("LPCSTR") Addressable lpBackupFileName, @C("DWORD") int dwReplaceFlags, @C("LPVOID") Addressable lpExclude, @C("LPVOID") Addressable lpReserved) {
        try {
            return (int)cfapi_h$constants$27.ReplaceFileA$MH().invokeExact(lpReplacedFileName.address(), lpReplacementFileName.address(), lpBackupFileName.address(), dwReplaceFlags, lpExclude.address(), lpReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReplaceFileW$MH() {
        return cfapi_h$constants$27.ReplaceFileW$MH();
    }
    public static @C("BOOL") int ReplaceFileW (@C("LPCWSTR") Addressable lpReplacedFileName, @C("LPCWSTR") Addressable lpReplacementFileName, @C("LPCWSTR") Addressable lpBackupFileName, @C("DWORD") int dwReplaceFlags, @C("LPVOID") Addressable lpExclude, @C("LPVOID") Addressable lpReserved) {
        try {
            return (int)cfapi_h$constants$27.ReplaceFileW$MH().invokeExact(lpReplacedFileName.address(), lpReplacementFileName.address(), lpBackupFileName.address(), dwReplaceFlags, lpExclude.address(), lpReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHardLinkA$MH() {
        return cfapi_h$constants$27.CreateHardLinkA$MH();
    }
    public static @C("BOOL") int CreateHardLinkA (@C("LPCSTR") Addressable lpFileName, @C("LPCSTR") Addressable lpExistingFileName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$27.CreateHardLinkA$MH().invokeExact(lpFileName.address(), lpExistingFileName.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHardLinkW$MH() {
        return cfapi_h$constants$27.CreateHardLinkW$MH();
    }
    public static @C("BOOL") int CreateHardLinkW (@C("LPCWSTR") Addressable lpFileName, @C("LPCWSTR") Addressable lpExistingFileName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (int)cfapi_h$constants$27.CreateHardLinkW$MH().invokeExact(lpFileName.address(), lpExistingFileName.address(), lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHardLinkTransactedA$MH() {
        return cfapi_h$constants$27.CreateHardLinkTransactedA$MH();
    }
    public static @C("BOOL") int CreateHardLinkTransactedA (@C("LPCSTR") Addressable lpFileName, @C("LPCSTR") Addressable lpExistingFileName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.CreateHardLinkTransactedA$MH().invokeExact(lpFileName.address(), lpExistingFileName.address(), lpSecurityAttributes.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHardLinkTransactedW$MH() {
        return cfapi_h$constants$27.CreateHardLinkTransactedW$MH();
    }
    public static @C("BOOL") int CreateHardLinkTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("LPCWSTR") Addressable lpExistingFileName, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$27.CreateHardLinkTransactedW$MH().invokeExact(lpFileName.address(), lpExistingFileName.address(), lpSecurityAttributes.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstStreamTransactedW$MH() {
        return cfapi_h$constants$27.FindFirstStreamTransactedW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstStreamTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("STREAM_INFO_LEVELS") int InfoLevel, @C("LPVOID") Addressable lpFindStreamData, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.FindFirstStreamTransactedW$MH().invokeExact(lpFileName.address(), InfoLevel, lpFindStreamData.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFileNameTransactedW$MH() {
        return cfapi_h$constants$27.FindFirstFileNameTransactedW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstFileNameTransactedW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwFlags, @C("LPDWORD") Addressable StringLength, @C("PWSTR") Addressable LinkName, @C("HANDLE") Addressable hTransaction) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.FindFirstFileNameTransactedW$MH().invokeExact(lpFileName.address(), dwFlags, StringLength.address(), LinkName.address(), hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateNamedPipeA$MH() {
        return cfapi_h$constants$27.CreateNamedPipeA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateNamedPipeA (@C("LPCSTR") Addressable lpName, @C("DWORD") int dwOpenMode, @C("DWORD") int dwPipeMode, @C("DWORD") int nMaxInstances, @C("DWORD") int nOutBufferSize, @C("DWORD") int nInBufferSize, @C("DWORD") int nDefaultTimeOut, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateNamedPipeA$MH().invokeExact(lpName.address(), dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeHandleStateA$MH() {
        return cfapi_h$constants$27.GetNamedPipeHandleStateA$MH();
    }
    public static @C("BOOL") int GetNamedPipeHandleStateA (@C("HANDLE") Addressable hNamedPipe, @C("LPDWORD") Addressable lpState, @C("LPDWORD") Addressable lpCurInstances, @C("LPDWORD") Addressable lpMaxCollectionCount, @C("LPDWORD") Addressable lpCollectDataTimeout, @C("LPSTR") Addressable lpUserName, @C("DWORD") int nMaxUserNameSize) {
        try {
            return (int)cfapi_h$constants$27.GetNamedPipeHandleStateA$MH().invokeExact(hNamedPipe.address(), lpState.address(), lpCurInstances.address(), lpMaxCollectionCount.address(), lpCollectDataTimeout.address(), lpUserName.address(), nMaxUserNameSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallNamedPipeA$MH() {
        return cfapi_h$constants$27.CallNamedPipeA$MH();
    }
    public static @C("BOOL") int CallNamedPipeA (@C("LPCSTR") Addressable lpNamedPipeName, @C("LPVOID") Addressable lpInBuffer, @C("DWORD") int nInBufferSize, @C("LPVOID") Addressable lpOutBuffer, @C("DWORD") int nOutBufferSize, @C("LPDWORD") Addressable lpBytesRead, @C("DWORD") int nTimeOut) {
        try {
            return (int)cfapi_h$constants$27.CallNamedPipeA$MH().invokeExact(lpNamedPipeName.address(), lpInBuffer.address(), nInBufferSize, lpOutBuffer.address(), nOutBufferSize, lpBytesRead.address(), nTimeOut);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitNamedPipeA$MH() {
        return cfapi_h$constants$27.WaitNamedPipeA$MH();
    }
    public static @C("BOOL") int WaitNamedPipeA (@C("LPCSTR") Addressable lpNamedPipeName, @C("DWORD") int nTimeOut) {
        try {
            return (int)cfapi_h$constants$27.WaitNamedPipeA$MH().invokeExact(lpNamedPipeName.address(), nTimeOut);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeClientComputerNameA$MH() {
        return cfapi_h$constants$27.GetNamedPipeClientComputerNameA$MH();
    }
    public static @C("BOOL") int GetNamedPipeClientComputerNameA (@C("HANDLE") Addressable Pipe, @C("LPSTR") Addressable ClientComputerName, @C("ULONG") int ClientComputerNameLength) {
        try {
            return (int)cfapi_h$constants$27.GetNamedPipeClientComputerNameA$MH().invokeExact(Pipe.address(), ClientComputerName.address(), ClientComputerNameLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeClientProcessId$MH() {
        return cfapi_h$constants$27.GetNamedPipeClientProcessId$MH();
    }
    public static @C("BOOL") int GetNamedPipeClientProcessId (@C("HANDLE") Addressable Pipe, @C("PULONG") Addressable ClientProcessId) {
        try {
            return (int)cfapi_h$constants$27.GetNamedPipeClientProcessId$MH().invokeExact(Pipe.address(), ClientProcessId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeClientSessionId$MH() {
        return cfapi_h$constants$27.GetNamedPipeClientSessionId$MH();
    }
    public static @C("BOOL") int GetNamedPipeClientSessionId (@C("HANDLE") Addressable Pipe, @C("PULONG") Addressable ClientSessionId) {
        try {
            return (int)cfapi_h$constants$27.GetNamedPipeClientSessionId$MH().invokeExact(Pipe.address(), ClientSessionId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeServerProcessId$MH() {
        return cfapi_h$constants$27.GetNamedPipeServerProcessId$MH();
    }
    public static @C("BOOL") int GetNamedPipeServerProcessId (@C("HANDLE") Addressable Pipe, @C("PULONG") Addressable ServerProcessId) {
        try {
            return (int)cfapi_h$constants$27.GetNamedPipeServerProcessId$MH().invokeExact(Pipe.address(), ServerProcessId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNamedPipeServerSessionId$MH() {
        return cfapi_h$constants$27.GetNamedPipeServerSessionId$MH();
    }
    public static @C("BOOL") int GetNamedPipeServerSessionId (@C("HANDLE") Addressable Pipe, @C("PULONG") Addressable ServerSessionId) {
        try {
            return (int)cfapi_h$constants$27.GetNamedPipeServerSessionId$MH().invokeExact(Pipe.address(), ServerSessionId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetVolumeLabelA$MH() {
        return cfapi_h$constants$27.SetVolumeLabelA$MH();
    }
    public static @C("BOOL") int SetVolumeLabelA (@C("LPCSTR") Addressable lpRootPathName, @C("LPCSTR") Addressable lpVolumeName) {
        try {
            return (int)cfapi_h$constants$27.SetVolumeLabelA$MH().invokeExact(lpRootPathName.address(), lpVolumeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetVolumeLabelW$MH() {
        return cfapi_h$constants$27.SetVolumeLabelW$MH();
    }
    public static @C("BOOL") int SetVolumeLabelW (@C("LPCWSTR") Addressable lpRootPathName, @C("LPCWSTR") Addressable lpVolumeName) {
        try {
            return (int)cfapi_h$constants$27.SetVolumeLabelW$MH().invokeExact(lpRootPathName.address(), lpVolumeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileBandwidthReservation$MH() {
        return cfapi_h$constants$27.SetFileBandwidthReservation$MH();
    }
    public static @C("BOOL") int SetFileBandwidthReservation (@C("HANDLE") Addressable hFile, @C("DWORD") int nPeriodMilliseconds, @C("DWORD") int nBytesPerPeriod, @C("BOOL") int bDiscardable, @C("LPDWORD") Addressable lpTransferSize, @C("LPDWORD") Addressable lpNumOutstandingRequests) {
        try {
            return (int)cfapi_h$constants$27.SetFileBandwidthReservation$MH().invokeExact(hFile.address(), nPeriodMilliseconds, nBytesPerPeriod, bDiscardable, lpTransferSize.address(), lpNumOutstandingRequests.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileBandwidthReservation$MH() {
        return cfapi_h$constants$27.GetFileBandwidthReservation$MH();
    }
    public static @C("BOOL") int GetFileBandwidthReservation (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpPeriodMilliseconds, @C("LPDWORD") Addressable lpBytesPerPeriod, @C("LPBOOL") Addressable pDiscardable, @C("LPDWORD") Addressable lpTransferSize, @C("LPDWORD") Addressable lpNumOutstandingRequests) {
        try {
            return (int)cfapi_h$constants$27.GetFileBandwidthReservation$MH().invokeExact(hFile.address(), lpPeriodMilliseconds.address(), lpBytesPerPeriod.address(), pDiscardable.address(), lpTransferSize.address(), lpNumOutstandingRequests.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClearEventLogA$MH() {
        return cfapi_h$constants$27.ClearEventLogA$MH();
    }
    public static @C("BOOL") int ClearEventLogA (@C("HANDLE") Addressable hEventLog, @C("LPCSTR") Addressable lpBackupFileName) {
        try {
            return (int)cfapi_h$constants$27.ClearEventLogA$MH().invokeExact(hEventLog.address(), lpBackupFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClearEventLogW$MH() {
        return cfapi_h$constants$27.ClearEventLogW$MH();
    }
    public static @C("BOOL") int ClearEventLogW (@C("HANDLE") Addressable hEventLog, @C("LPCWSTR") Addressable lpBackupFileName) {
        try {
            return (int)cfapi_h$constants$27.ClearEventLogW$MH().invokeExact(hEventLog.address(), lpBackupFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupEventLogA$MH() {
        return cfapi_h$constants$27.BackupEventLogA$MH();
    }
    public static @C("BOOL") int BackupEventLogA (@C("HANDLE") Addressable hEventLog, @C("LPCSTR") Addressable lpBackupFileName) {
        try {
            return (int)cfapi_h$constants$27.BackupEventLogA$MH().invokeExact(hEventLog.address(), lpBackupFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupEventLogW$MH() {
        return cfapi_h$constants$27.BackupEventLogW$MH();
    }
    public static @C("BOOL") int BackupEventLogW (@C("HANDLE") Addressable hEventLog, @C("LPCWSTR") Addressable lpBackupFileName) {
        try {
            return (int)cfapi_h$constants$27.BackupEventLogW$MH().invokeExact(hEventLog.address(), lpBackupFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseEventLog$MH() {
        return cfapi_h$constants$27.CloseEventLog$MH();
    }
    public static @C("BOOL") int CloseEventLog (@C("HANDLE") Addressable hEventLog) {
        try {
            return (int)cfapi_h$constants$27.CloseEventLog$MH().invokeExact(hEventLog.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeregisterEventSource$MH() {
        return cfapi_h$constants$27.DeregisterEventSource$MH();
    }
    public static @C("BOOL") int DeregisterEventSource (@C("HANDLE") Addressable hEventLog) {
        try {
            return (int)cfapi_h$constants$27.DeregisterEventSource$MH().invokeExact(hEventLog.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle NotifyChangeEventLog$MH() {
        return cfapi_h$constants$27.NotifyChangeEventLog$MH();
    }
    public static @C("BOOL") int NotifyChangeEventLog (@C("HANDLE") Addressable hEventLog, @C("HANDLE") Addressable hEvent) {
        try {
            return (int)cfapi_h$constants$27.NotifyChangeEventLog$MH().invokeExact(hEventLog.address(), hEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumberOfEventLogRecords$MH() {
        return cfapi_h$constants$27.GetNumberOfEventLogRecords$MH();
    }
    public static @C("BOOL") int GetNumberOfEventLogRecords (@C("HANDLE") Addressable hEventLog, @C("PDWORD") Addressable NumberOfRecords) {
        try {
            return (int)cfapi_h$constants$27.GetNumberOfEventLogRecords$MH().invokeExact(hEventLog.address(), NumberOfRecords.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOldestEventLogRecord$MH() {
        return cfapi_h$constants$27.GetOldestEventLogRecord$MH();
    }
    public static @C("BOOL") int GetOldestEventLogRecord (@C("HANDLE") Addressable hEventLog, @C("PDWORD") Addressable OldestRecord) {
        try {
            return (int)cfapi_h$constants$27.GetOldestEventLogRecord$MH().invokeExact(hEventLog.address(), OldestRecord.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEventLogA$MH() {
        return cfapi_h$constants$27.OpenEventLogA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenEventLogA (@C("LPCSTR") Addressable lpUNCServerName, @C("LPCSTR") Addressable lpSourceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.OpenEventLogA$MH().invokeExact(lpUNCServerName.address(), lpSourceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEventLogW$MH() {
        return cfapi_h$constants$27.OpenEventLogW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenEventLogW (@C("LPCWSTR") Addressable lpUNCServerName, @C("LPCWSTR") Addressable lpSourceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.OpenEventLogW$MH().invokeExact(lpUNCServerName.address(), lpSourceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterEventSourceA$MH() {
        return cfapi_h$constants$27.RegisterEventSourceA$MH();
    }
    public static @C("HANDLE") MemoryAddress RegisterEventSourceA (@C("LPCSTR") Addressable lpUNCServerName, @C("LPCSTR") Addressable lpSourceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.RegisterEventSourceA$MH().invokeExact(lpUNCServerName.address(), lpSourceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterEventSourceW$MH() {
        return cfapi_h$constants$27.RegisterEventSourceW$MH();
    }
    public static @C("HANDLE") MemoryAddress RegisterEventSourceW (@C("LPCWSTR") Addressable lpUNCServerName, @C("LPCWSTR") Addressable lpSourceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.RegisterEventSourceW$MH().invokeExact(lpUNCServerName.address(), lpSourceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenBackupEventLogA$MH() {
        return cfapi_h$constants$27.OpenBackupEventLogA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenBackupEventLogA (@C("LPCSTR") Addressable lpUNCServerName, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.OpenBackupEventLogA$MH().invokeExact(lpUNCServerName.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenBackupEventLogW$MH() {
        return cfapi_h$constants$27.OpenBackupEventLogW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenBackupEventLogW (@C("LPCWSTR") Addressable lpUNCServerName, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.OpenBackupEventLogW$MH().invokeExact(lpUNCServerName.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadEventLogA$MH() {
        return cfapi_h$constants$27.ReadEventLogA$MH();
    }
    public static @C("BOOL") int ReadEventLogA (@C("HANDLE") Addressable hEventLog, @C("DWORD") int dwReadFlags, @C("DWORD") int dwRecordOffset, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToRead, @C("DWORD*") Addressable pnBytesRead, @C("DWORD*") Addressable pnMinNumberOfBytesNeeded) {
        try {
            return (int)cfapi_h$constants$27.ReadEventLogA$MH().invokeExact(hEventLog.address(), dwReadFlags, dwRecordOffset, lpBuffer.address(), nNumberOfBytesToRead, pnBytesRead.address(), pnMinNumberOfBytesNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadEventLogW$MH() {
        return cfapi_h$constants$27.ReadEventLogW$MH();
    }
    public static @C("BOOL") int ReadEventLogW (@C("HANDLE") Addressable hEventLog, @C("DWORD") int dwReadFlags, @C("DWORD") int dwRecordOffset, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToRead, @C("DWORD*") Addressable pnBytesRead, @C("DWORD*") Addressable pnMinNumberOfBytesNeeded) {
        try {
            return (int)cfapi_h$constants$27.ReadEventLogW$MH().invokeExact(hEventLog.address(), dwReadFlags, dwRecordOffset, lpBuffer.address(), nNumberOfBytesToRead, pnBytesRead.address(), pnMinNumberOfBytesNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReportEventA$MH() {
        return cfapi_h$constants$27.ReportEventA$MH();
    }
    public static @C("BOOL") int ReportEventA (@C("HANDLE") Addressable hEventLog, @C("WORD") short wType, @C("WORD") short wCategory, @C("DWORD") int dwEventID, @C("PSID") Addressable lpUserSid, @C("WORD") short wNumStrings, @C("DWORD") int dwDataSize, @C("LPCSTR*") Addressable lpStrings, @C("LPVOID") Addressable lpRawData) {
        try {
            return (int)cfapi_h$constants$27.ReportEventA$MH().invokeExact(hEventLog.address(), wType, wCategory, dwEventID, lpUserSid.address(), wNumStrings, dwDataSize, lpStrings.address(), lpRawData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReportEventW$MH() {
        return cfapi_h$constants$27.ReportEventW$MH();
    }
    public static @C("BOOL") int ReportEventW (@C("HANDLE") Addressable hEventLog, @C("WORD") short wType, @C("WORD") short wCategory, @C("DWORD") int dwEventID, @C("PSID") Addressable lpUserSid, @C("WORD") short wNumStrings, @C("DWORD") int dwDataSize, @C("LPCWSTR*") Addressable lpStrings, @C("LPVOID") Addressable lpRawData) {
        try {
            return (int)cfapi_h$constants$27.ReportEventW$MH().invokeExact(hEventLog.address(), wType, wCategory, dwEventID, lpUserSid.address(), wNumStrings, dwDataSize, lpStrings.address(), lpRawData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEventLogInformation$MH() {
        return cfapi_h$constants$27.GetEventLogInformation$MH();
    }
    public static @C("BOOL") int GetEventLogInformation (@C("HANDLE") Addressable hEventLog, @C("DWORD") int dwInfoLevel, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int cbBufSize, @C("LPDWORD") Addressable pcbBytesNeeded) {
        try {
            return (int)cfapi_h$constants$27.GetEventLogInformation$MH().invokeExact(hEventLog.address(), dwInfoLevel, lpBuffer.address(), cbBufSize, pcbBytesNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OperationStart$MH() {
        return cfapi_h$constants$27.OperationStart$MH();
    }
    public static @C("BOOL") int OperationStart (@C("OPERATION_START_PARAMETERS*") Addressable OperationStartParams) {
        try {
            return (int)cfapi_h$constants$27.OperationStart$MH().invokeExact(OperationStartParams.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OperationEnd$MH() {
        return cfapi_h$constants$27.OperationEnd$MH();
    }
    public static @C("BOOL") int OperationEnd (@C("OPERATION_END_PARAMETERS*") Addressable OperationEndParams) {
        try {
            return (int)cfapi_h$constants$27.OperationEnd$MH().invokeExact(OperationEndParams.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckAndAuditAlarmA$MH() {
        return cfapi_h$constants$27.AccessCheckAndAuditAlarmA$MH();
    }
    public static @C("BOOL") int AccessCheckAndAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPSTR") Addressable ObjectTypeName, @C("LPSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("DWORD") int DesiredAccess, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPBOOL") Addressable AccessStatus, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)cfapi_h$constants$27.AccessCheckAndAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), DesiredAccess, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatus.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeAndAuditAlarmA$MH() {
        return cfapi_h$constants$27.AccessCheckByTypeAndAuditAlarmA$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeAndAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPCSTR") Addressable ObjectTypeName, @C("LPCSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("DWORD") int DesiredAccess, @C("AUDIT_EVENT_TYPE") int AuditType, @C("DWORD") int Flags, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPBOOL") Addressable AccessStatus, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)cfapi_h$constants$27.AccessCheckByTypeAndAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatus.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeResultListAndAuditAlarmA$MH() {
        return cfapi_h$constants$27.AccessCheckByTypeResultListAndAuditAlarmA$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeResultListAndAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPCSTR") Addressable ObjectTypeName, @C("LPCSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("DWORD") int DesiredAccess, @C("AUDIT_EVENT_TYPE") int AuditType, @C("DWORD") int Flags, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPDWORD") Addressable AccessStatusList, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)cfapi_h$constants$27.AccessCheckByTypeResultListAndAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatusList.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH() {
        return cfapi_h$constants$27.AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeResultListAndAuditAlarmByHandleA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("HANDLE") Addressable ClientToken, @C("LPCSTR") Addressable ObjectTypeName, @C("LPCSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("DWORD") int DesiredAccess, @C("AUDIT_EVENT_TYPE") int AuditType, @C("DWORD") int Flags, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPDWORD") Addressable AccessStatusList, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)cfapi_h$constants$27.AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ClientToken.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatusList.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectOpenAuditAlarmA$MH() {
        return cfapi_h$constants$27.ObjectOpenAuditAlarmA$MH();
    }
    public static @C("BOOL") int ObjectOpenAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPSTR") Addressable ObjectTypeName, @C("LPSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("HANDLE") Addressable ClientToken, @C("DWORD") int DesiredAccess, @C("DWORD") int GrantedAccess, @C("PPRIVILEGE_SET") Addressable Privileges, @C("BOOL") int ObjectCreation, @C("BOOL") int AccessGranted, @C("LPBOOL") Addressable GenerateOnClose) {
        try {
            return (int)cfapi_h$constants$27.ObjectOpenAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), pSecurityDescriptor.address(), ClientToken.address(), DesiredAccess, GrantedAccess, Privileges.address(), ObjectCreation, AccessGranted, GenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectPrivilegeAuditAlarmA$MH() {
        return cfapi_h$constants$27.ObjectPrivilegeAuditAlarmA$MH();
    }
    public static @C("BOOL") int ObjectPrivilegeAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("HANDLE") Addressable ClientToken, @C("DWORD") int DesiredAccess, @C("PPRIVILEGE_SET") Addressable Privileges, @C("BOOL") int AccessGranted) {
        try {
            return (int)cfapi_h$constants$27.ObjectPrivilegeAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), ClientToken.address(), DesiredAccess, Privileges.address(), AccessGranted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectCloseAuditAlarmA$MH() {
        return cfapi_h$constants$27.ObjectCloseAuditAlarmA$MH();
    }
    public static @C("BOOL") int ObjectCloseAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("BOOL") int GenerateOnClose) {
        try {
            return (int)cfapi_h$constants$27.ObjectCloseAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), GenerateOnClose);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectDeleteAuditAlarmA$MH() {
        return cfapi_h$constants$27.ObjectDeleteAuditAlarmA$MH();
    }
    public static @C("BOOL") int ObjectDeleteAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("BOOL") int GenerateOnClose) {
        try {
            return (int)cfapi_h$constants$27.ObjectDeleteAuditAlarmA$MH().invokeExact(SubsystemName.address(), HandleId.address(), GenerateOnClose);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrivilegedServiceAuditAlarmA$MH() {
        return cfapi_h$constants$27.PrivilegedServiceAuditAlarmA$MH();
    }
    public static @C("BOOL") int PrivilegedServiceAuditAlarmA (@C("LPCSTR") Addressable SubsystemName, @C("LPCSTR") Addressable ServiceName, @C("HANDLE") Addressable ClientToken, @C("PPRIVILEGE_SET") Addressable Privileges, @C("BOOL") int AccessGranted) {
        try {
            return (int)cfapi_h$constants$27.PrivilegedServiceAuditAlarmA$MH().invokeExact(SubsystemName.address(), ServiceName.address(), ClientToken.address(), Privileges.address(), AccessGranted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddConditionalAce$MH() {
        return cfapi_h$constants$27.AddConditionalAce$MH();
    }
    public static @C("BOOL") int AddConditionalAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("UCHAR") byte AceType, @C("DWORD") int AccessMask, @C("PSID") Addressable pSid, @C("PWCHAR") Addressable ConditionStr, @C("DWORD*") Addressable ReturnLength) {
        try {
            return (int)cfapi_h$constants$27.AddConditionalAce$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, AceType, AccessMask, pSid.address(), ConditionStr.address(), ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileSecurityA$MH() {
        return cfapi_h$constants$27.SetFileSecurityA$MH();
    }
    public static @C("BOOL") int SetFileSecurityA (@C("LPCSTR") Addressable lpFileName, @C("SECURITY_INFORMATION") int SecurityInformation, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor) {
        try {
            return (int)cfapi_h$constants$27.SetFileSecurityA$MH().invokeExact(lpFileName.address(), SecurityInformation, pSecurityDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileSecurityA$MH() {
        return cfapi_h$constants$27.GetFileSecurityA$MH();
    }
    public static @C("BOOL") int GetFileSecurityA (@C("LPCSTR") Addressable lpFileName, @C("SECURITY_INFORMATION") int RequestedInformation, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpnLengthNeeded) {
        try {
            return (int)cfapi_h$constants$27.GetFileSecurityA$MH().invokeExact(lpFileName.address(), RequestedInformation, pSecurityDescriptor.address(), nLength, lpnLengthNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadDirectoryChangesW$MH() {
        return cfapi_h$constants$27.ReadDirectoryChangesW$MH();
    }
    public static @C("BOOL") int ReadDirectoryChangesW (@C("HANDLE") Addressable hDirectory, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nBufferLength, @C("BOOL") int bWatchSubtree, @C("DWORD") int dwNotifyFilter, @C("LPDWORD") Addressable lpBytesReturned, @C("LPOVERLAPPED") Addressable lpOverlapped, @C("LPOVERLAPPED_COMPLETION_ROUTINE") Addressable lpCompletionRoutine) {
        try {
            return (int)cfapi_h$constants$27.ReadDirectoryChangesW$MH().invokeExact(hDirectory.address(), lpBuffer.address(), nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned.address(), lpOverlapped.address(), lpCompletionRoutine.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadDirectoryChangesExW$MH() {
        return cfapi_h$constants$27.ReadDirectoryChangesExW$MH();
    }
    public static @C("BOOL") int ReadDirectoryChangesExW (@C("HANDLE") Addressable hDirectory, @C("LPVOID") Addressable lpBuffer, @C("DWORD") int nBufferLength, @C("BOOL") int bWatchSubtree, @C("DWORD") int dwNotifyFilter, @C("LPDWORD") Addressable lpBytesReturned, @C("LPOVERLAPPED") Addressable lpOverlapped, @C("LPOVERLAPPED_COMPLETION_ROUTINE") Addressable lpCompletionRoutine, @C("READ_DIRECTORY_NOTIFY_INFORMATION_CLASS") int ReadDirectoryNotifyInformationClass) {
        try {
            return (int)cfapi_h$constants$27.ReadDirectoryChangesExW$MH().invokeExact(hDirectory.address(), lpBuffer.address(), nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned.address(), lpOverlapped.address(), lpCompletionRoutine.address(), ReadDirectoryNotifyInformationClass);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapViewOfFileExNuma$MH() {
        return cfapi_h$constants$27.MapViewOfFileExNuma$MH();
    }
    public static @C("LPVOID") MemoryAddress MapViewOfFileExNuma (@C("HANDLE") Addressable hFileMappingObject, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwFileOffsetHigh, @C("DWORD") int dwFileOffsetLow, @C("SIZE_T") long dwNumberOfBytesToMap, @C("LPVOID") Addressable lpBaseAddress, @C("DWORD") int nndPreferred) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.MapViewOfFileExNuma$MH().invokeExact(hFileMappingObject.address(), dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress.address(), nndPreferred);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadReadPtr$MH() {
        return cfapi_h$constants$27.IsBadReadPtr$MH();
    }
    public static @C("BOOL") int IsBadReadPtr (@C("void*") Addressable lp, @C("UINT_PTR") long ucb) {
        try {
            return (int)cfapi_h$constants$27.IsBadReadPtr$MH().invokeExact(lp.address(), ucb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadWritePtr$MH() {
        return cfapi_h$constants$27.IsBadWritePtr$MH();
    }
    public static @C("BOOL") int IsBadWritePtr (@C("LPVOID") Addressable lp, @C("UINT_PTR") long ucb) {
        try {
            return (int)cfapi_h$constants$27.IsBadWritePtr$MH().invokeExact(lp.address(), ucb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadHugeReadPtr$MH() {
        return cfapi_h$constants$27.IsBadHugeReadPtr$MH();
    }
    public static @C("BOOL") int IsBadHugeReadPtr (@C("void*") Addressable lp, @C("UINT_PTR") long ucb) {
        try {
            return (int)cfapi_h$constants$27.IsBadHugeReadPtr$MH().invokeExact(lp.address(), ucb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadHugeWritePtr$MH() {
        return cfapi_h$constants$27.IsBadHugeWritePtr$MH();
    }
    public static @C("BOOL") int IsBadHugeWritePtr (@C("LPVOID") Addressable lp, @C("UINT_PTR") long ucb) {
        try {
            return (int)cfapi_h$constants$27.IsBadHugeWritePtr$MH().invokeExact(lp.address(), ucb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadCodePtr$MH() {
        return cfapi_h$constants$27.IsBadCodePtr$MH();
    }
    public static @C("BOOL") int IsBadCodePtr (@C("FARPROC") Addressable lpfn) {
        try {
            return (int)cfapi_h$constants$27.IsBadCodePtr$MH().invokeExact(lpfn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadStringPtrA$MH() {
        return cfapi_h$constants$27.IsBadStringPtrA$MH();
    }
    public static @C("BOOL") int IsBadStringPtrA (@C("LPCSTR") Addressable lpsz, @C("UINT_PTR") long ucchMax) {
        try {
            return (int)cfapi_h$constants$27.IsBadStringPtrA$MH().invokeExact(lpsz.address(), ucchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsBadStringPtrW$MH() {
        return cfapi_h$constants$27.IsBadStringPtrW$MH();
    }
    public static @C("BOOL") int IsBadStringPtrW (@C("LPCWSTR") Addressable lpsz, @C("UINT_PTR") long ucchMax) {
        try {
            return (int)cfapi_h$constants$27.IsBadStringPtrW$MH().invokeExact(lpsz.address(), ucchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountSidA$MH() {
        return cfapi_h$constants$27.LookupAccountSidA$MH();
    }
    public static @C("BOOL") int LookupAccountSidA (@C("LPCSTR") Addressable lpSystemName, @C("PSID") Addressable Sid, @C("LPSTR") Addressable Name, @C("LPDWORD") Addressable cchName, @C("LPSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)cfapi_h$constants$27.LookupAccountSidA$MH().invokeExact(lpSystemName.address(), Sid.address(), Name.address(), cchName.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountSidW$MH() {
        return cfapi_h$constants$27.LookupAccountSidW$MH();
    }
    public static @C("BOOL") int LookupAccountSidW (@C("LPCWSTR") Addressable lpSystemName, @C("PSID") Addressable Sid, @C("LPWSTR") Addressable Name, @C("LPDWORD") Addressable cchName, @C("LPWSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)cfapi_h$constants$27.LookupAccountSidW$MH().invokeExact(lpSystemName.address(), Sid.address(), Name.address(), cchName.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountNameA$MH() {
        return cfapi_h$constants$27.LookupAccountNameA$MH();
    }
    public static @C("BOOL") int LookupAccountNameA (@C("LPCSTR") Addressable lpSystemName, @C("LPCSTR") Addressable lpAccountName, @C("PSID") Addressable Sid, @C("LPDWORD") Addressable cbSid, @C("LPSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)cfapi_h$constants$27.LookupAccountNameA$MH().invokeExact(lpSystemName.address(), lpAccountName.address(), Sid.address(), cbSid.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountNameW$MH() {
        return cfapi_h$constants$27.LookupAccountNameW$MH();
    }
    public static @C("BOOL") int LookupAccountNameW (@C("LPCWSTR") Addressable lpSystemName, @C("LPCWSTR") Addressable lpAccountName, @C("PSID") Addressable Sid, @C("LPDWORD") Addressable cbSid, @C("LPWSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)cfapi_h$constants$27.LookupAccountNameW$MH().invokeExact(lpSystemName.address(), lpAccountName.address(), Sid.address(), cbSid.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountNameLocalA$MH() {
        return cfapi_h$constants$27.LookupAccountNameLocalA$MH();
    }
    public static @C("BOOL") int LookupAccountNameLocalA (@C("LPCSTR") Addressable lpAccountName, @C("PSID") Addressable Sid, @C("LPDWORD") Addressable cbSid, @C("LPSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)cfapi_h$constants$27.LookupAccountNameLocalA$MH().invokeExact(lpAccountName.address(), Sid.address(), cbSid.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountNameLocalW$MH() {
        return cfapi_h$constants$27.LookupAccountNameLocalW$MH();
    }
    public static @C("BOOL") int LookupAccountNameLocalW (@C("LPCWSTR") Addressable lpAccountName, @C("PSID") Addressable Sid, @C("LPDWORD") Addressable cbSid, @C("LPWSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)cfapi_h$constants$27.LookupAccountNameLocalW$MH().invokeExact(lpAccountName.address(), Sid.address(), cbSid.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountSidLocalA$MH() {
        return cfapi_h$constants$27.LookupAccountSidLocalA$MH();
    }
    public static @C("BOOL") int LookupAccountSidLocalA (@C("PSID") Addressable Sid, @C("LPSTR") Addressable Name, @C("LPDWORD") Addressable cchName, @C("LPSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)cfapi_h$constants$27.LookupAccountSidLocalA$MH().invokeExact(Sid.address(), Name.address(), cchName.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupAccountSidLocalW$MH() {
        return cfapi_h$constants$27.LookupAccountSidLocalW$MH();
    }
    public static @C("BOOL") int LookupAccountSidLocalW (@C("PSID") Addressable Sid, @C("LPWSTR") Addressable Name, @C("LPDWORD") Addressable cchName, @C("LPWSTR") Addressable ReferencedDomainName, @C("LPDWORD") Addressable cchReferencedDomainName, @C("PSID_NAME_USE") Addressable peUse) {
        try {
            return (int)cfapi_h$constants$27.LookupAccountSidLocalW$MH().invokeExact(Sid.address(), Name.address(), cchName.address(), ReferencedDomainName.address(), cchReferencedDomainName.address(), peUse.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeValueA$MH() {
        return cfapi_h$constants$27.LookupPrivilegeValueA$MH();
    }
    public static @C("BOOL") int LookupPrivilegeValueA (@C("LPCSTR") Addressable lpSystemName, @C("LPCSTR") Addressable lpName, @C("PLUID") Addressable lpLuid) {
        try {
            return (int)cfapi_h$constants$27.LookupPrivilegeValueA$MH().invokeExact(lpSystemName.address(), lpName.address(), lpLuid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeValueW$MH() {
        return cfapi_h$constants$27.LookupPrivilegeValueW$MH();
    }
    public static @C("BOOL") int LookupPrivilegeValueW (@C("LPCWSTR") Addressable lpSystemName, @C("LPCWSTR") Addressable lpName, @C("PLUID") Addressable lpLuid) {
        try {
            return (int)cfapi_h$constants$27.LookupPrivilegeValueW$MH().invokeExact(lpSystemName.address(), lpName.address(), lpLuid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeNameA$MH() {
        return cfapi_h$constants$27.LookupPrivilegeNameA$MH();
    }
    public static @C("BOOL") int LookupPrivilegeNameA (@C("LPCSTR") Addressable lpSystemName, @C("PLUID") Addressable lpLuid, @C("LPSTR") Addressable lpName, @C("LPDWORD") Addressable cchName) {
        try {
            return (int)cfapi_h$constants$27.LookupPrivilegeNameA$MH().invokeExact(lpSystemName.address(), lpLuid.address(), lpName.address(), cchName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeNameW$MH() {
        return cfapi_h$constants$27.LookupPrivilegeNameW$MH();
    }
    public static @C("BOOL") int LookupPrivilegeNameW (@C("LPCWSTR") Addressable lpSystemName, @C("PLUID") Addressable lpLuid, @C("LPWSTR") Addressable lpName, @C("LPDWORD") Addressable cchName) {
        try {
            return (int)cfapi_h$constants$27.LookupPrivilegeNameW$MH().invokeExact(lpSystemName.address(), lpLuid.address(), lpName.address(), cchName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeDisplayNameA$MH() {
        return cfapi_h$constants$27.LookupPrivilegeDisplayNameA$MH();
    }
    public static @C("BOOL") int LookupPrivilegeDisplayNameA (@C("LPCSTR") Addressable lpSystemName, @C("LPCSTR") Addressable lpName, @C("LPSTR") Addressable lpDisplayName, @C("LPDWORD") Addressable cchDisplayName, @C("LPDWORD") Addressable lpLanguageId) {
        try {
            return (int)cfapi_h$constants$27.LookupPrivilegeDisplayNameA$MH().invokeExact(lpSystemName.address(), lpName.address(), lpDisplayName.address(), cchDisplayName.address(), lpLanguageId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LookupPrivilegeDisplayNameW$MH() {
        return cfapi_h$constants$27.LookupPrivilegeDisplayNameW$MH();
    }
    public static @C("BOOL") int LookupPrivilegeDisplayNameW (@C("LPCWSTR") Addressable lpSystemName, @C("LPCWSTR") Addressable lpName, @C("LPWSTR") Addressable lpDisplayName, @C("LPDWORD") Addressable cchDisplayName, @C("LPDWORD") Addressable lpLanguageId) {
        try {
            return (int)cfapi_h$constants$27.LookupPrivilegeDisplayNameW$MH().invokeExact(lpSystemName.address(), lpName.address(), lpDisplayName.address(), cchDisplayName.address(), lpLanguageId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BuildCommDCBA$MH() {
        return cfapi_h$constants$27.BuildCommDCBA$MH();
    }
    public static @C("BOOL") int BuildCommDCBA (@C("LPCSTR") Addressable lpDef, @C("LPDCB") Addressable lpDCB) {
        try {
            return (int)cfapi_h$constants$27.BuildCommDCBA$MH().invokeExact(lpDef.address(), lpDCB.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BuildCommDCBW$MH() {
        return cfapi_h$constants$27.BuildCommDCBW$MH();
    }
    public static @C("BOOL") int BuildCommDCBW (@C("LPCWSTR") Addressable lpDef, @C("LPDCB") Addressable lpDCB) {
        try {
            return (int)cfapi_h$constants$27.BuildCommDCBW$MH().invokeExact(lpDef.address(), lpDCB.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BuildCommDCBAndTimeoutsA$MH() {
        return cfapi_h$constants$27.BuildCommDCBAndTimeoutsA$MH();
    }
    public static @C("BOOL") int BuildCommDCBAndTimeoutsA (@C("LPCSTR") Addressable lpDef, @C("LPDCB") Addressable lpDCB, @C("LPCOMMTIMEOUTS") Addressable lpCommTimeouts) {
        try {
            return (int)cfapi_h$constants$27.BuildCommDCBAndTimeoutsA$MH().invokeExact(lpDef.address(), lpDCB.address(), lpCommTimeouts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BuildCommDCBAndTimeoutsW$MH() {
        return cfapi_h$constants$27.BuildCommDCBAndTimeoutsW$MH();
    }
    public static @C("BOOL") int BuildCommDCBAndTimeoutsW (@C("LPCWSTR") Addressable lpDef, @C("LPDCB") Addressable lpDCB, @C("LPCOMMTIMEOUTS") Addressable lpCommTimeouts) {
        try {
            return (int)cfapi_h$constants$27.BuildCommDCBAndTimeoutsW$MH().invokeExact(lpDef.address(), lpDCB.address(), lpCommTimeouts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CommConfigDialogA$MH() {
        return cfapi_h$constants$27.CommConfigDialogA$MH();
    }
    public static @C("BOOL") int CommConfigDialogA (@C("LPCSTR") Addressable lpszName, @C("HWND") Addressable hWnd, @C("LPCOMMCONFIG") Addressable lpCC) {
        try {
            return (int)cfapi_h$constants$27.CommConfigDialogA$MH().invokeExact(lpszName.address(), hWnd.address(), lpCC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CommConfigDialogW$MH() {
        return cfapi_h$constants$27.CommConfigDialogW$MH();
    }
    public static @C("BOOL") int CommConfigDialogW (@C("LPCWSTR") Addressable lpszName, @C("HWND") Addressable hWnd, @C("LPCOMMCONFIG") Addressable lpCC) {
        try {
            return (int)cfapi_h$constants$27.CommConfigDialogW$MH().invokeExact(lpszName.address(), hWnd.address(), lpCC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDefaultCommConfigA$MH() {
        return cfapi_h$constants$27.GetDefaultCommConfigA$MH();
    }
    public static @C("BOOL") int GetDefaultCommConfigA (@C("LPCSTR") Addressable lpszName, @C("LPCOMMCONFIG") Addressable lpCC, @C("LPDWORD") Addressable lpdwSize) {
        try {
            return (int)cfapi_h$constants$27.GetDefaultCommConfigA$MH().invokeExact(lpszName.address(), lpCC.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDefaultCommConfigW$MH() {
        return cfapi_h$constants$27.GetDefaultCommConfigW$MH();
    }
    public static @C("BOOL") int GetDefaultCommConfigW (@C("LPCWSTR") Addressable lpszName, @C("LPCOMMCONFIG") Addressable lpCC, @C("LPDWORD") Addressable lpdwSize) {
        try {
            return (int)cfapi_h$constants$27.GetDefaultCommConfigW$MH().invokeExact(lpszName.address(), lpCC.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDefaultCommConfigA$MH() {
        return cfapi_h$constants$27.SetDefaultCommConfigA$MH();
    }
    public static @C("BOOL") int SetDefaultCommConfigA (@C("LPCSTR") Addressable lpszName, @C("LPCOMMCONFIG") Addressable lpCC, @C("DWORD") int dwSize) {
        try {
            return (int)cfapi_h$constants$27.SetDefaultCommConfigA$MH().invokeExact(lpszName.address(), lpCC.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDefaultCommConfigW$MH() {
        return cfapi_h$constants$27.SetDefaultCommConfigW$MH();
    }
    public static @C("BOOL") int SetDefaultCommConfigW (@C("LPCWSTR") Addressable lpszName, @C("LPCOMMCONFIG") Addressable lpCC, @C("DWORD") int dwSize) {
        try {
            return (int)cfapi_h$constants$27.SetDefaultCommConfigW$MH().invokeExact(lpszName.address(), lpCC.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetComputerNameA$MH() {
        return cfapi_h$constants$27.GetComputerNameA$MH();
    }
    public static @C("BOOL") int GetComputerNameA (@C("LPSTR") Addressable lpBuffer, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)cfapi_h$constants$27.GetComputerNameA$MH().invokeExact(lpBuffer.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetComputerNameW$MH() {
        return cfapi_h$constants$27.GetComputerNameW$MH();
    }
    public static @C("BOOL") int GetComputerNameW (@C("LPWSTR") Addressable lpBuffer, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)cfapi_h$constants$27.GetComputerNameW$MH().invokeExact(lpBuffer.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DnsHostnameToComputerNameA$MH() {
        return cfapi_h$constants$27.DnsHostnameToComputerNameA$MH();
    }
    public static @C("BOOL") int DnsHostnameToComputerNameA (@C("LPCSTR") Addressable Hostname, @C("LPSTR") Addressable ComputerName, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)cfapi_h$constants$27.DnsHostnameToComputerNameA$MH().invokeExact(Hostname.address(), ComputerName.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DnsHostnameToComputerNameW$MH() {
        return cfapi_h$constants$27.DnsHostnameToComputerNameW$MH();
    }
    public static @C("BOOL") int DnsHostnameToComputerNameW (@C("LPCWSTR") Addressable Hostname, @C("LPWSTR") Addressable ComputerName, @C("LPDWORD") Addressable nSize) {
        try {
            return (int)cfapi_h$constants$27.DnsHostnameToComputerNameW$MH().invokeExact(Hostname.address(), ComputerName.address(), nSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserNameA$MH() {
        return cfapi_h$constants$27.GetUserNameA$MH();
    }
    public static @C("BOOL") int GetUserNameA (@C("LPSTR") Addressable lpBuffer, @C("LPDWORD") Addressable pcbBuffer) {
        try {
            return (int)cfapi_h$constants$27.GetUserNameA$MH().invokeExact(lpBuffer.address(), pcbBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserNameW$MH() {
        return cfapi_h$constants$27.GetUserNameW$MH();
    }
    public static @C("BOOL") int GetUserNameW (@C("LPWSTR") Addressable lpBuffer, @C("LPDWORD") Addressable pcbBuffer) {
        try {
            return (int)cfapi_h$constants$27.GetUserNameW$MH().invokeExact(lpBuffer.address(), pcbBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogonUserA$MH() {
        return cfapi_h$constants$27.LogonUserA$MH();
    }
    public static @C("BOOL") int LogonUserA (@C("LPCSTR") Addressable lpszUsername, @C("LPCSTR") Addressable lpszDomain, @C("LPCSTR") Addressable lpszPassword, @C("DWORD") int dwLogonType, @C("DWORD") int dwLogonProvider, @C("PHANDLE") Addressable phToken) {
        try {
            return (int)cfapi_h$constants$27.LogonUserA$MH().invokeExact(lpszUsername.address(), lpszDomain.address(), lpszPassword.address(), dwLogonType, dwLogonProvider, phToken.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogonUserW$MH() {
        return cfapi_h$constants$27.LogonUserW$MH();
    }
    public static @C("BOOL") int LogonUserW (@C("LPCWSTR") Addressable lpszUsername, @C("LPCWSTR") Addressable lpszDomain, @C("LPCWSTR") Addressable lpszPassword, @C("DWORD") int dwLogonType, @C("DWORD") int dwLogonProvider, @C("PHANDLE") Addressable phToken) {
        try {
            return (int)cfapi_h$constants$27.LogonUserW$MH().invokeExact(lpszUsername.address(), lpszDomain.address(), lpszPassword.address(), dwLogonType, dwLogonProvider, phToken.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogonUserExA$MH() {
        return cfapi_h$constants$27.LogonUserExA$MH();
    }
    public static @C("BOOL") int LogonUserExA (@C("LPCSTR") Addressable lpszUsername, @C("LPCSTR") Addressable lpszDomain, @C("LPCSTR") Addressable lpszPassword, @C("DWORD") int dwLogonType, @C("DWORD") int dwLogonProvider, @C("PHANDLE") Addressable phToken, @C("PSID*") Addressable ppLogonSid, @C("PVOID*") Addressable ppProfileBuffer, @C("LPDWORD") Addressable pdwProfileLength, @C("PQUOTA_LIMITS") Addressable pQuotaLimits) {
        try {
            return (int)cfapi_h$constants$27.LogonUserExA$MH().invokeExact(lpszUsername.address(), lpszDomain.address(), lpszPassword.address(), dwLogonType, dwLogonProvider, phToken.address(), ppLogonSid.address(), ppProfileBuffer.address(), pdwProfileLength.address(), pQuotaLimits.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LogonUserExW$MH() {
        return cfapi_h$constants$27.LogonUserExW$MH();
    }
    public static @C("BOOL") int LogonUserExW (@C("LPCWSTR") Addressable lpszUsername, @C("LPCWSTR") Addressable lpszDomain, @C("LPCWSTR") Addressable lpszPassword, @C("DWORD") int dwLogonType, @C("DWORD") int dwLogonProvider, @C("PHANDLE") Addressable phToken, @C("PSID*") Addressable ppLogonSid, @C("PVOID*") Addressable ppProfileBuffer, @C("LPDWORD") Addressable pdwProfileLength, @C("PQUOTA_LIMITS") Addressable pQuotaLimits) {
        try {
            return (int)cfapi_h$constants$27.LogonUserExW$MH().invokeExact(lpszUsername.address(), lpszDomain.address(), lpszPassword.address(), dwLogonType, dwLogonProvider, phToken.address(), ppLogonSid.address(), ppProfileBuffer.address(), pdwProfileLength.address(), pQuotaLimits.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateProcessWithLogonW$MH() {
        return cfapi_h$constants$28.CreateProcessWithLogonW$MH();
    }
    public static @C("BOOL") int CreateProcessWithLogonW (@C("LPCWSTR") Addressable lpUsername, @C("LPCWSTR") Addressable lpDomain, @C("LPCWSTR") Addressable lpPassword, @C("DWORD") int dwLogonFlags, @C("LPCWSTR") Addressable lpApplicationName, @C("LPWSTR") Addressable lpCommandLine, @C("DWORD") int dwCreationFlags, @C("LPVOID") Addressable lpEnvironment, @C("LPCWSTR") Addressable lpCurrentDirectory, @C("LPSTARTUPINFOW") Addressable lpStartupInfo, @C("LPPROCESS_INFORMATION") Addressable lpProcessInformation) {
        try {
            return (int)cfapi_h$constants$28.CreateProcessWithLogonW$MH().invokeExact(lpUsername.address(), lpDomain.address(), lpPassword.address(), dwLogonFlags, lpApplicationName.address(), lpCommandLine.address(), dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateProcessWithTokenW$MH() {
        return cfapi_h$constants$28.CreateProcessWithTokenW$MH();
    }
    public static @C("BOOL") int CreateProcessWithTokenW (@C("HANDLE") Addressable hToken, @C("DWORD") int dwLogonFlags, @C("LPCWSTR") Addressable lpApplicationName, @C("LPWSTR") Addressable lpCommandLine, @C("DWORD") int dwCreationFlags, @C("LPVOID") Addressable lpEnvironment, @C("LPCWSTR") Addressable lpCurrentDirectory, @C("LPSTARTUPINFOW") Addressable lpStartupInfo, @C("LPPROCESS_INFORMATION") Addressable lpProcessInformation) {
        try {
            return (int)cfapi_h$constants$28.CreateProcessWithTokenW$MH().invokeExact(hToken.address(), dwLogonFlags, lpApplicationName.address(), lpCommandLine.address(), dwCreationFlags, lpEnvironment.address(), lpCurrentDirectory.address(), lpStartupInfo.address(), lpProcessInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsTokenUntrusted$MH() {
        return cfapi_h$constants$28.IsTokenUntrusted$MH();
    }
    public static @C("BOOL") int IsTokenUntrusted (@C("HANDLE") Addressable TokenHandle) {
        try {
            return (int)cfapi_h$constants$28.IsTokenUntrusted$MH().invokeExact(TokenHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterWaitForSingleObject$MH() {
        return cfapi_h$constants$28.RegisterWaitForSingleObject$MH();
    }
    public static @C("BOOL") int RegisterWaitForSingleObject (@C("PHANDLE") Addressable phNewWaitObject, @C("HANDLE") Addressable hObject, @C("WAITORTIMERCALLBACK") Addressable Callback, @C("PVOID") Addressable Context, @C("ULONG") int dwMilliseconds, @C("ULONG") int dwFlags) {
        try {
            return (int)cfapi_h$constants$28.RegisterWaitForSingleObject$MH().invokeExact(phNewWaitObject.address(), hObject.address(), Callback.address(), Context.address(), dwMilliseconds, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterWait$MH() {
        return cfapi_h$constants$28.UnregisterWait$MH();
    }
    public static @C("BOOL") int UnregisterWait (@C("HANDLE") Addressable WaitHandle) {
        try {
            return (int)cfapi_h$constants$28.UnregisterWait$MH().invokeExact(WaitHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BindIoCompletionCallback$MH() {
        return cfapi_h$constants$28.BindIoCompletionCallback$MH();
    }
    public static @C("BOOL") int BindIoCompletionCallback (@C("HANDLE") Addressable FileHandle, @C("LPOVERLAPPED_COMPLETION_ROUTINE") Addressable Function, @C("ULONG") int Flags) {
        try {
            return (int)cfapi_h$constants$28.BindIoCompletionCallback$MH().invokeExact(FileHandle.address(), Function.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTimerQueueTimer$MH() {
        return cfapi_h$constants$28.SetTimerQueueTimer$MH();
    }
    public static @C("HANDLE") MemoryAddress SetTimerQueueTimer (@C("HANDLE") Addressable TimerQueue, @C("WAITORTIMERCALLBACK") Addressable Callback, @C("PVOID") Addressable Parameter, @C("DWORD") int DueTime, @C("DWORD") int Period, @C("BOOL") int PreferIo) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.SetTimerQueueTimer$MH().invokeExact(TimerQueue.address(), Callback.address(), Parameter.address(), DueTime, Period, PreferIo);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelTimerQueueTimer$MH() {
        return cfapi_h$constants$28.CancelTimerQueueTimer$MH();
    }
    public static @C("BOOL") int CancelTimerQueueTimer (@C("HANDLE") Addressable TimerQueue, @C("HANDLE") Addressable Timer) {
        try {
            return (int)cfapi_h$constants$28.CancelTimerQueueTimer$MH().invokeExact(TimerQueue.address(), Timer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteTimerQueue$MH() {
        return cfapi_h$constants$28.DeleteTimerQueue$MH();
    }
    public static @C("BOOL") int DeleteTimerQueue (@C("HANDLE") Addressable TimerQueue) {
        try {
            return (int)cfapi_h$constants$28.DeleteTimerQueue$MH().invokeExact(TimerQueue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeThreadpoolEnvironment$MH() {
        return cfapi_h$constants$28.InitializeThreadpoolEnvironment$MH();
    }
    public static void InitializeThreadpoolEnvironment (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            cfapi_h$constants$28.InitializeThreadpoolEnvironment$MH().invokeExact(pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackPool$MH() {
        return cfapi_h$constants$28.SetThreadpoolCallbackPool$MH();
    }
    public static void SetThreadpoolCallbackPool (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe, @C("PTP_POOL") Addressable ptpp) {
        try {
            cfapi_h$constants$28.SetThreadpoolCallbackPool$MH().invokeExact(pcbe.address(), ptpp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackCleanupGroup$MH() {
        return cfapi_h$constants$28.SetThreadpoolCallbackCleanupGroup$MH();
    }
    public static void SetThreadpoolCallbackCleanupGroup (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe, @C("PTP_CLEANUP_GROUP") Addressable ptpcg, @C("PTP_CLEANUP_GROUP_CANCEL_CALLBACK") Addressable pfng) {
        try {
            cfapi_h$constants$28.SetThreadpoolCallbackCleanupGroup$MH().invokeExact(pcbe.address(), ptpcg.address(), pfng.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackRunsLong$MH() {
        return cfapi_h$constants$28.SetThreadpoolCallbackRunsLong$MH();
    }
    public static void SetThreadpoolCallbackRunsLong (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            cfapi_h$constants$28.SetThreadpoolCallbackRunsLong$MH().invokeExact(pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackLibrary$MH() {
        return cfapi_h$constants$28.SetThreadpoolCallbackLibrary$MH();
    }
    public static void SetThreadpoolCallbackLibrary (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe, @C("PVOID") Addressable mod) {
        try {
            cfapi_h$constants$28.SetThreadpoolCallbackLibrary$MH().invokeExact(pcbe.address(), mod.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackPriority$MH() {
        return cfapi_h$constants$28.SetThreadpoolCallbackPriority$MH();
    }
    public static void SetThreadpoolCallbackPriority (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe, @C("TP_CALLBACK_PRIORITY") int Priority) {
        try {
            cfapi_h$constants$28.SetThreadpoolCallbackPriority$MH().invokeExact(pcbe.address(), Priority);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroyThreadpoolEnvironment$MH() {
        return cfapi_h$constants$28.DestroyThreadpoolEnvironment$MH();
    }
    public static void DestroyThreadpoolEnvironment (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            cfapi_h$constants$28.DestroyThreadpoolEnvironment$MH().invokeExact(pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolCallbackPersistent$MH() {
        return cfapi_h$constants$28.SetThreadpoolCallbackPersistent$MH();
    }
    public static void SetThreadpoolCallbackPersistent (@C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            cfapi_h$constants$28.SetThreadpoolCallbackPersistent$MH().invokeExact(pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePrivateNamespaceA$MH() {
        return cfapi_h$constants$28.CreatePrivateNamespaceA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreatePrivateNamespaceA (@C("LPSECURITY_ATTRIBUTES") Addressable lpPrivateNamespaceAttributes, @C("LPVOID") Addressable lpBoundaryDescriptor, @C("LPCSTR") Addressable lpAliasPrefix) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.CreatePrivateNamespaceA$MH().invokeExact(lpPrivateNamespaceAttributes.address(), lpBoundaryDescriptor.address(), lpAliasPrefix.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenPrivateNamespaceA$MH() {
        return cfapi_h$constants$28.OpenPrivateNamespaceA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenPrivateNamespaceA (@C("LPVOID") Addressable lpBoundaryDescriptor, @C("LPCSTR") Addressable lpAliasPrefix) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.OpenPrivateNamespaceA$MH().invokeExact(lpBoundaryDescriptor.address(), lpAliasPrefix.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateBoundaryDescriptorA$MH() {
        return cfapi_h$constants$28.CreateBoundaryDescriptorA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateBoundaryDescriptorA (@C("LPCSTR") Addressable Name, @C("ULONG") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.CreateBoundaryDescriptorA$MH().invokeExact(Name.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddIntegrityLabelToBoundaryDescriptor$MH() {
        return cfapi_h$constants$28.AddIntegrityLabelToBoundaryDescriptor$MH();
    }
    public static @C("BOOL") int AddIntegrityLabelToBoundaryDescriptor (@C("HANDLE*") Addressable BoundaryDescriptor, @C("PSID") Addressable IntegrityLabel) {
        try {
            return (int)cfapi_h$constants$28.AddIntegrityLabelToBoundaryDescriptor$MH().invokeExact(BoundaryDescriptor.address(), IntegrityLabel.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentHwProfileA$MH() {
        return cfapi_h$constants$28.GetCurrentHwProfileA$MH();
    }
    public static @C("BOOL") int GetCurrentHwProfileA (@C("LPHW_PROFILE_INFOA") Addressable lpHwProfileInfo) {
        try {
            return (int)cfapi_h$constants$28.GetCurrentHwProfileA$MH().invokeExact(lpHwProfileInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentHwProfileW$MH() {
        return cfapi_h$constants$28.GetCurrentHwProfileW$MH();
    }
    public static @C("BOOL") int GetCurrentHwProfileW (@C("LPHW_PROFILE_INFOW") Addressable lpHwProfileInfo) {
        try {
            return (int)cfapi_h$constants$28.GetCurrentHwProfileW$MH().invokeExact(lpHwProfileInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerifyVersionInfoA$MH() {
        return cfapi_h$constants$28.VerifyVersionInfoA$MH();
    }
    public static @C("BOOL") int VerifyVersionInfoA (@C("LPOSVERSIONINFOEXA") Addressable lpVersionInformation, @C("DWORD") int dwTypeMask, @C("DWORDLONG") long dwlConditionMask) {
        try {
            return (int)cfapi_h$constants$28.VerifyVersionInfoA$MH().invokeExact(lpVersionInformation.address(), dwTypeMask, dwlConditionMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VerifyVersionInfoW$MH() {
        return cfapi_h$constants$28.VerifyVersionInfoW$MH();
    }
    public static @C("BOOL") int VerifyVersionInfoW (@C("LPOSVERSIONINFOEXW") Addressable lpVersionInformation, @C("DWORD") int dwTypeMask, @C("DWORDLONG") long dwlConditionMask) {
        try {
            return (int)cfapi_h$constants$28.VerifyVersionInfoW$MH().invokeExact(lpVersionInformation.address(), dwTypeMask, dwlConditionMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HRESULT_FROM_WIN32$MH() {
        return cfapi_h$constants$28.HRESULT_FROM_WIN32$MH();
    }
    public static @C("HRESULT") int HRESULT_FROM_WIN32 (@C("unsigned long") int x) {
        try {
            return (int)cfapi_h$constants$28.HRESULT_FROM_WIN32$MH().invokeExact(x);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SystemTimeToTzSpecificLocalTime$MH() {
        return cfapi_h$constants$28.SystemTimeToTzSpecificLocalTime$MH();
    }
    public static @C("BOOL") int SystemTimeToTzSpecificLocalTime (@C("const TIME_ZONE_INFORMATION*") Addressable lpTimeZoneInformation, @C("const SYSTEMTIME*") Addressable lpUniversalTime, @C("LPSYSTEMTIME") Addressable lpLocalTime) {
        try {
            return (int)cfapi_h$constants$28.SystemTimeToTzSpecificLocalTime$MH().invokeExact(lpTimeZoneInformation.address(), lpUniversalTime.address(), lpLocalTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TzSpecificLocalTimeToSystemTime$MH() {
        return cfapi_h$constants$28.TzSpecificLocalTimeToSystemTime$MH();
    }
    public static @C("BOOL") int TzSpecificLocalTimeToSystemTime (@C("const TIME_ZONE_INFORMATION*") Addressable lpTimeZoneInformation, @C("const SYSTEMTIME*") Addressable lpLocalTime, @C("LPSYSTEMTIME") Addressable lpUniversalTime) {
        try {
            return (int)cfapi_h$constants$28.TzSpecificLocalTimeToSystemTime$MH().invokeExact(lpTimeZoneInformation.address(), lpLocalTime.address(), lpUniversalTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FileTimeToSystemTime$MH() {
        return cfapi_h$constants$28.FileTimeToSystemTime$MH();
    }
    public static @C("BOOL") int FileTimeToSystemTime (@C("const FILETIME*") Addressable lpFileTime, @C("LPSYSTEMTIME") Addressable lpSystemTime) {
        try {
            return (int)cfapi_h$constants$28.FileTimeToSystemTime$MH().invokeExact(lpFileTime.address(), lpSystemTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SystemTimeToFileTime$MH() {
        return cfapi_h$constants$28.SystemTimeToFileTime$MH();
    }
    public static @C("BOOL") int SystemTimeToFileTime (@C("const SYSTEMTIME*") Addressable lpSystemTime, @C("LPFILETIME") Addressable lpFileTime) {
        try {
            return (int)cfapi_h$constants$28.SystemTimeToFileTime$MH().invokeExact(lpSystemTime.address(), lpFileTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTimeZoneInformation$MH() {
        return cfapi_h$constants$28.GetTimeZoneInformation$MH();
    }
    public static @C("DWORD") int GetTimeZoneInformation (@C("LPTIME_ZONE_INFORMATION") Addressable lpTimeZoneInformation) {
        try {
            return (int)cfapi_h$constants$28.GetTimeZoneInformation$MH().invokeExact(lpTimeZoneInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTimeZoneInformation$MH() {
        return cfapi_h$constants$28.SetTimeZoneInformation$MH();
    }
    public static @C("BOOL") int SetTimeZoneInformation (@C("const TIME_ZONE_INFORMATION*") Addressable lpTimeZoneInformation) {
        try {
            return (int)cfapi_h$constants$28.SetTimeZoneInformation$MH().invokeExact(lpTimeZoneInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDynamicTimeZoneInformation$MH() {
        return cfapi_h$constants$28.SetDynamicTimeZoneInformation$MH();
    }
    public static @C("BOOL") int SetDynamicTimeZoneInformation (@C("const DYNAMIC_TIME_ZONE_INFORMATION*") Addressable lpTimeZoneInformation) {
        try {
            return (int)cfapi_h$constants$28.SetDynamicTimeZoneInformation$MH().invokeExact(lpTimeZoneInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDynamicTimeZoneInformation$MH() {
        return cfapi_h$constants$28.GetDynamicTimeZoneInformation$MH();
    }
    public static @C("DWORD") int GetDynamicTimeZoneInformation (@C("PDYNAMIC_TIME_ZONE_INFORMATION") Addressable pTimeZoneInformation) {
        try {
            return (int)cfapi_h$constants$28.GetDynamicTimeZoneInformation$MH().invokeExact(pTimeZoneInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTimeZoneInformationForYear$MH() {
        return cfapi_h$constants$28.GetTimeZoneInformationForYear$MH();
    }
    public static @C("BOOL") int GetTimeZoneInformationForYear (@C("USHORT") short wYear, @C("PDYNAMIC_TIME_ZONE_INFORMATION") Addressable pdtzi, @C("LPTIME_ZONE_INFORMATION") Addressable ptzi) {
        try {
            return (int)cfapi_h$constants$28.GetTimeZoneInformationForYear$MH().invokeExact(wYear, pdtzi.address(), ptzi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDynamicTimeZoneInformation$MH() {
        return cfapi_h$constants$28.EnumDynamicTimeZoneInformation$MH();
    }
    public static @C("DWORD") int EnumDynamicTimeZoneInformation (@C("const DWORD") int dwIndex, @C("PDYNAMIC_TIME_ZONE_INFORMATION") Addressable lpTimeZoneInformation) {
        try {
            return (int)cfapi_h$constants$28.EnumDynamicTimeZoneInformation$MH().invokeExact(dwIndex, lpTimeZoneInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDynamicTimeZoneInformationEffectiveYears$MH() {
        return cfapi_h$constants$28.GetDynamicTimeZoneInformationEffectiveYears$MH();
    }
    public static @C("DWORD") int GetDynamicTimeZoneInformationEffectiveYears (@C("const PDYNAMIC_TIME_ZONE_INFORMATION") Addressable lpTimeZoneInformation, @C("LPDWORD") Addressable FirstYear, @C("LPDWORD") Addressable LastYear) {
        try {
            return (int)cfapi_h$constants$28.GetDynamicTimeZoneInformationEffectiveYears$MH().invokeExact(lpTimeZoneInformation.address(), FirstYear.address(), LastYear.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SystemTimeToTzSpecificLocalTimeEx$MH() {
        return cfapi_h$constants$28.SystemTimeToTzSpecificLocalTimeEx$MH();
    }
    public static @C("BOOL") int SystemTimeToTzSpecificLocalTimeEx (@C("const DYNAMIC_TIME_ZONE_INFORMATION*") Addressable lpTimeZoneInformation, @C("const SYSTEMTIME*") Addressable lpUniversalTime, @C("LPSYSTEMTIME") Addressable lpLocalTime) {
        try {
            return (int)cfapi_h$constants$28.SystemTimeToTzSpecificLocalTimeEx$MH().invokeExact(lpTimeZoneInformation.address(), lpUniversalTime.address(), lpLocalTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TzSpecificLocalTimeToSystemTimeEx$MH() {
        return cfapi_h$constants$28.TzSpecificLocalTimeToSystemTimeEx$MH();
    }
    public static @C("BOOL") int TzSpecificLocalTimeToSystemTimeEx (@C("const DYNAMIC_TIME_ZONE_INFORMATION*") Addressable lpTimeZoneInformation, @C("const SYSTEMTIME*") Addressable lpLocalTime, @C("LPSYSTEMTIME") Addressable lpUniversalTime) {
        try {
            return (int)cfapi_h$constants$28.TzSpecificLocalTimeToSystemTimeEx$MH().invokeExact(lpTimeZoneInformation.address(), lpLocalTime.address(), lpUniversalTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalFileTimeToLocalSystemTime$MH() {
        return cfapi_h$constants$28.LocalFileTimeToLocalSystemTime$MH();
    }
    public static @C("BOOL") int LocalFileTimeToLocalSystemTime (@C("const TIME_ZONE_INFORMATION*") Addressable timeZoneInformation, @C("const FILETIME*") Addressable localFileTime, @C("SYSTEMTIME*") Addressable localSystemTime) {
        try {
            return (int)cfapi_h$constants$28.LocalFileTimeToLocalSystemTime$MH().invokeExact(timeZoneInformation.address(), localFileTime.address(), localSystemTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalSystemTimeToLocalFileTime$MH() {
        return cfapi_h$constants$28.LocalSystemTimeToLocalFileTime$MH();
    }
    public static @C("BOOL") int LocalSystemTimeToLocalFileTime (@C("const TIME_ZONE_INFORMATION*") Addressable timeZoneInformation, @C("const SYSTEMTIME*") Addressable localSystemTime, @C("FILETIME*") Addressable localFileTime) {
        try {
            return (int)cfapi_h$constants$28.LocalSystemTimeToLocalFileTime$MH().invokeExact(timeZoneInformation.address(), localSystemTime.address(), localFileTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSystemPowerState$MH() {
        return cfapi_h$constants$28.SetSystemPowerState$MH();
    }
    public static @C("BOOL") int SetSystemPowerState (@C("BOOL") int fSuspend, @C("BOOL") int fForce) {
        try {
            return (int)cfapi_h$constants$28.SetSystemPowerState$MH().invokeExact(fSuspend, fForce);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemPowerStatus$MH() {
        return cfapi_h$constants$28.GetSystemPowerStatus$MH();
    }
    public static @C("BOOL") int GetSystemPowerStatus (@C("LPSYSTEM_POWER_STATUS") Addressable lpSystemPowerStatus) {
        try {
            return (int)cfapi_h$constants$28.GetSystemPowerStatus$MH().invokeExact(lpSystemPowerStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapUserPhysicalPagesScatter$MH() {
        return cfapi_h$constants$28.MapUserPhysicalPagesScatter$MH();
    }
    public static @C("BOOL") int MapUserPhysicalPagesScatter (@C("PVOID*") Addressable VirtualAddresses, @C("ULONG_PTR") long NumberOfPages, @C("PULONG_PTR") Addressable PageArray) {
        try {
            return (int)cfapi_h$constants$28.MapUserPhysicalPagesScatter$MH().invokeExact(VirtualAddresses.address(), NumberOfPages, PageArray.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateJobObjectA$MH() {
        return cfapi_h$constants$28.CreateJobObjectA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateJobObjectA (@C("LPSECURITY_ATTRIBUTES") Addressable lpJobAttributes, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.CreateJobObjectA$MH().invokeExact(lpJobAttributes.address(), lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenJobObjectA$MH() {
        return cfapi_h$constants$28.OpenJobObjectA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenJobObjectA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.OpenJobObjectA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateJobSet$MH() {
        return cfapi_h$constants$28.CreateJobSet$MH();
    }
    public static @C("BOOL") int CreateJobSet (@C("ULONG") int NumJob, @C("PJOB_SET_ARRAY") Addressable UserJobSet, @C("ULONG") int Flags) {
        try {
            return (int)cfapi_h$constants$28.CreateJobSet$MH().invokeExact(NumJob, UserJobSet.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstVolumeA$MH() {
        return cfapi_h$constants$28.FindFirstVolumeA$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstVolumeA (@C("LPSTR") Addressable lpszVolumeName, @C("DWORD") int cchBufferLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.FindFirstVolumeA$MH().invokeExact(lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextVolumeA$MH() {
        return cfapi_h$constants$28.FindNextVolumeA$MH();
    }
    public static @C("BOOL") int FindNextVolumeA (@C("HANDLE") Addressable hFindVolume, @C("LPSTR") Addressable lpszVolumeName, @C("DWORD") int cchBufferLength) {
        try {
            return (int)cfapi_h$constants$28.FindNextVolumeA$MH().invokeExact(hFindVolume.address(), lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstVolumeMountPointA$MH() {
        return cfapi_h$constants$28.FindFirstVolumeMountPointA$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstVolumeMountPointA (@C("LPCSTR") Addressable lpszRootPathName, @C("LPSTR") Addressable lpszVolumeMountPoint, @C("DWORD") int cchBufferLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.FindFirstVolumeMountPointA$MH().invokeExact(lpszRootPathName.address(), lpszVolumeMountPoint.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstVolumeMountPointW$MH() {
        return cfapi_h$constants$28.FindFirstVolumeMountPointW$MH();
    }
    public static @C("HANDLE") MemoryAddress FindFirstVolumeMountPointW (@C("LPCWSTR") Addressable lpszRootPathName, @C("LPWSTR") Addressable lpszVolumeMountPoint, @C("DWORD") int cchBufferLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.FindFirstVolumeMountPointW$MH().invokeExact(lpszRootPathName.address(), lpszVolumeMountPoint.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextVolumeMountPointA$MH() {
        return cfapi_h$constants$28.FindNextVolumeMountPointA$MH();
    }
    public static @C("BOOL") int FindNextVolumeMountPointA (@C("HANDLE") Addressable hFindVolumeMountPoint, @C("LPSTR") Addressable lpszVolumeMountPoint, @C("DWORD") int cchBufferLength) {
        try {
            return (int)cfapi_h$constants$28.FindNextVolumeMountPointA$MH().invokeExact(hFindVolumeMountPoint.address(), lpszVolumeMountPoint.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindNextVolumeMountPointW$MH() {
        return cfapi_h$constants$28.FindNextVolumeMountPointW$MH();
    }
    public static @C("BOOL") int FindNextVolumeMountPointW (@C("HANDLE") Addressable hFindVolumeMountPoint, @C("LPWSTR") Addressable lpszVolumeMountPoint, @C("DWORD") int cchBufferLength) {
        try {
            return (int)cfapi_h$constants$28.FindNextVolumeMountPointW$MH().invokeExact(hFindVolumeMountPoint.address(), lpszVolumeMountPoint.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindVolumeMountPointClose$MH() {
        return cfapi_h$constants$28.FindVolumeMountPointClose$MH();
    }
    public static @C("BOOL") int FindVolumeMountPointClose (@C("HANDLE") Addressable hFindVolumeMountPoint) {
        try {
            return (int)cfapi_h$constants$28.FindVolumeMountPointClose$MH().invokeExact(hFindVolumeMountPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetVolumeMountPointA$MH() {
        return cfapi_h$constants$28.SetVolumeMountPointA$MH();
    }
    public static @C("BOOL") int SetVolumeMountPointA (@C("LPCSTR") Addressable lpszVolumeMountPoint, @C("LPCSTR") Addressable lpszVolumeName) {
        try {
            return (int)cfapi_h$constants$28.SetVolumeMountPointA$MH().invokeExact(lpszVolumeMountPoint.address(), lpszVolumeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetVolumeMountPointW$MH() {
        return cfapi_h$constants$28.SetVolumeMountPointW$MH();
    }
    public static @C("BOOL") int SetVolumeMountPointW (@C("LPCWSTR") Addressable lpszVolumeMountPoint, @C("LPCWSTR") Addressable lpszVolumeName) {
        try {
            return (int)cfapi_h$constants$28.SetVolumeMountPointW$MH().invokeExact(lpszVolumeMountPoint.address(), lpszVolumeName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteVolumeMountPointA$MH() {
        return cfapi_h$constants$28.DeleteVolumeMountPointA$MH();
    }
    public static @C("BOOL") int DeleteVolumeMountPointA (@C("LPCSTR") Addressable lpszVolumeMountPoint) {
        try {
            return (int)cfapi_h$constants$28.DeleteVolumeMountPointA$MH().invokeExact(lpszVolumeMountPoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumeNameForVolumeMountPointA$MH() {
        return cfapi_h$constants$28.GetVolumeNameForVolumeMountPointA$MH();
    }
    public static @C("BOOL") int GetVolumeNameForVolumeMountPointA (@C("LPCSTR") Addressable lpszVolumeMountPoint, @C("LPSTR") Addressable lpszVolumeName, @C("DWORD") int cchBufferLength) {
        try {
            return (int)cfapi_h$constants$28.GetVolumeNameForVolumeMountPointA$MH().invokeExact(lpszVolumeMountPoint.address(), lpszVolumeName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumePathNameA$MH() {
        return cfapi_h$constants$28.GetVolumePathNameA$MH();
    }
    public static @C("BOOL") int GetVolumePathNameA (@C("LPCSTR") Addressable lpszFileName, @C("LPSTR") Addressable lpszVolumePathName, @C("DWORD") int cchBufferLength) {
        try {
            return (int)cfapi_h$constants$28.GetVolumePathNameA$MH().invokeExact(lpszFileName.address(), lpszVolumePathName.address(), cchBufferLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetVolumePathNamesForVolumeNameA$MH() {
        return cfapi_h$constants$28.GetVolumePathNamesForVolumeNameA$MH();
    }
    public static @C("BOOL") int GetVolumePathNamesForVolumeNameA (@C("LPCSTR") Addressable lpszVolumeName, @C("LPCH") Addressable lpszVolumePathNames, @C("DWORD") int cchBufferLength, @C("PDWORD") Addressable lpcchReturnLength) {
        try {
            return (int)cfapi_h$constants$28.GetVolumePathNamesForVolumeNameA$MH().invokeExact(lpszVolumeName.address(), lpszVolumePathNames.address(), cchBufferLength, lpcchReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateActCtxA$MH() {
        return cfapi_h$constants$28.CreateActCtxA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateActCtxA (@C("PCACTCTXA") Addressable pActCtx) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.CreateActCtxA$MH().invokeExact(pActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateActCtxW$MH() {
        return cfapi_h$constants$28.CreateActCtxW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateActCtxW (@C("PCACTCTXW") Addressable pActCtx) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.CreateActCtxW$MH().invokeExact(pActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddRefActCtx$MH() {
        return cfapi_h$constants$28.AddRefActCtx$MH();
    }
    public static void AddRefActCtx (@C("HANDLE") Addressable hActCtx) {
        try {
            cfapi_h$constants$28.AddRefActCtx$MH().invokeExact(hActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseActCtx$MH() {
        return cfapi_h$constants$28.ReleaseActCtx$MH();
    }
    public static void ReleaseActCtx (@C("HANDLE") Addressable hActCtx) {
        try {
            cfapi_h$constants$28.ReleaseActCtx$MH().invokeExact(hActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ZombifyActCtx$MH() {
        return cfapi_h$constants$28.ZombifyActCtx$MH();
    }
    public static @C("BOOL") int ZombifyActCtx (@C("HANDLE") Addressable hActCtx) {
        try {
            return (int)cfapi_h$constants$28.ZombifyActCtx$MH().invokeExact(hActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ActivateActCtx$MH() {
        return cfapi_h$constants$28.ActivateActCtx$MH();
    }
    public static @C("BOOL") int ActivateActCtx (@C("HANDLE") Addressable hActCtx, @C("ULONG_PTR*") Addressable lpCookie) {
        try {
            return (int)cfapi_h$constants$28.ActivateActCtx$MH().invokeExact(hActCtx.address(), lpCookie.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeactivateActCtx$MH() {
        return cfapi_h$constants$28.DeactivateActCtx$MH();
    }
    public static @C("BOOL") int DeactivateActCtx (@C("DWORD") int dwFlags, @C("ULONG_PTR") long ulCookie) {
        try {
            return (int)cfapi_h$constants$28.DeactivateActCtx$MH().invokeExact(dwFlags, ulCookie);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentActCtx$MH() {
        return cfapi_h$constants$28.GetCurrentActCtx$MH();
    }
    public static @C("BOOL") int GetCurrentActCtx (@C("HANDLE*") Addressable lphActCtx) {
        try {
            return (int)cfapi_h$constants$28.GetCurrentActCtx$MH().invokeExact(lphActCtx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindActCtxSectionStringA$MH() {
        return cfapi_h$constants$28.FindActCtxSectionStringA$MH();
    }
    public static @C("BOOL") int FindActCtxSectionStringA (@C("DWORD") int dwFlags, @C("const GUID*") Addressable lpExtensionGuid, @C("ULONG") int ulSectionId, @C("LPCSTR") Addressable lpStringToFind, @C("PACTCTX_SECTION_KEYED_DATA") Addressable ReturnedData) {
        try {
            return (int)cfapi_h$constants$28.FindActCtxSectionStringA$MH().invokeExact(dwFlags, lpExtensionGuid.address(), ulSectionId, lpStringToFind.address(), ReturnedData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindActCtxSectionStringW$MH() {
        return cfapi_h$constants$28.FindActCtxSectionStringW$MH();
    }
    public static @C("BOOL") int FindActCtxSectionStringW (@C("DWORD") int dwFlags, @C("const GUID*") Addressable lpExtensionGuid, @C("ULONG") int ulSectionId, @C("LPCWSTR") Addressable lpStringToFind, @C("PACTCTX_SECTION_KEYED_DATA") Addressable ReturnedData) {
        try {
            return (int)cfapi_h$constants$28.FindActCtxSectionStringW$MH().invokeExact(dwFlags, lpExtensionGuid.address(), ulSectionId, lpStringToFind.address(), ReturnedData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindActCtxSectionGuid$MH() {
        return cfapi_h$constants$28.FindActCtxSectionGuid$MH();
    }
    public static @C("BOOL") int FindActCtxSectionGuid (@C("DWORD") int dwFlags, @C("const GUID*") Addressable lpExtensionGuid, @C("ULONG") int ulSectionId, @C("const GUID*") Addressable lpGuidToFind, @C("PACTCTX_SECTION_KEYED_DATA") Addressable ReturnedData) {
        try {
            return (int)cfapi_h$constants$28.FindActCtxSectionGuid$MH().invokeExact(dwFlags, lpExtensionGuid.address(), ulSectionId, lpGuidToFind.address(), ReturnedData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryActCtxW$MH() {
        return cfapi_h$constants$28.QueryActCtxW$MH();
    }
    public static @C("BOOL") int QueryActCtxW (@C("DWORD") int dwFlags, @C("HANDLE") Addressable hActCtx, @C("PVOID") Addressable pvSubInstance, @C("ULONG") int ulInfoClass, @C("PVOID") Addressable pvBuffer, @C("SIZE_T") long cbBuffer, @C("SIZE_T*") Addressable pcbWrittenOrRequired) {
        try {
            return (int)cfapi_h$constants$28.QueryActCtxW$MH().invokeExact(dwFlags, hActCtx.address(), pvSubInstance.address(), ulInfoClass, pvBuffer.address(), cbBuffer, pcbWrittenOrRequired.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WTSGetActiveConsoleSessionId$MH() {
        return cfapi_h$constants$28.WTSGetActiveConsoleSessionId$MH();
    }
    public static @C("DWORD") int WTSGetActiveConsoleSessionId () {
        try {
            return (int)cfapi_h$constants$28.WTSGetActiveConsoleSessionId$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WTSGetServiceSessionId$MH() {
        return cfapi_h$constants$28.WTSGetServiceSessionId$MH();
    }
    public static @C("DWORD") int WTSGetServiceSessionId () {
        try {
            return (int)cfapi_h$constants$28.WTSGetServiceSessionId$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WTSIsServerContainer$MH() {
        return cfapi_h$constants$28.WTSIsServerContainer$MH();
    }
    public static @C("BOOLEAN") byte WTSIsServerContainer () {
        try {
            return (byte)cfapi_h$constants$28.WTSIsServerContainer$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetActiveProcessorGroupCount$MH() {
        return cfapi_h$constants$28.GetActiveProcessorGroupCount$MH();
    }
    public static @C("WORD") short GetActiveProcessorGroupCount () {
        try {
            return (short)cfapi_h$constants$28.GetActiveProcessorGroupCount$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMaximumProcessorGroupCount$MH() {
        return cfapi_h$constants$28.GetMaximumProcessorGroupCount$MH();
    }
    public static @C("WORD") short GetMaximumProcessorGroupCount () {
        try {
            return (short)cfapi_h$constants$28.GetMaximumProcessorGroupCount$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetActiveProcessorCount$MH() {
        return cfapi_h$constants$28.GetActiveProcessorCount$MH();
    }
    public static @C("DWORD") int GetActiveProcessorCount (@C("WORD") short GroupNumber) {
        try {
            return (int)cfapi_h$constants$28.GetActiveProcessorCount$MH().invokeExact(GroupNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMaximumProcessorCount$MH() {
        return cfapi_h$constants$28.GetMaximumProcessorCount$MH();
    }
    public static @C("DWORD") int GetMaximumProcessorCount (@C("WORD") short GroupNumber) {
        try {
            return (int)cfapi_h$constants$28.GetMaximumProcessorCount$MH().invokeExact(GroupNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaProcessorNode$MH() {
        return cfapi_h$constants$28.GetNumaProcessorNode$MH();
    }
    public static @C("BOOL") int GetNumaProcessorNode (@C("UCHAR") byte Processor, @C("PUCHAR") Addressable NodeNumber) {
        try {
            return (int)cfapi_h$constants$28.GetNumaProcessorNode$MH().invokeExact(Processor, NodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaNodeNumberFromHandle$MH() {
        return cfapi_h$constants$28.GetNumaNodeNumberFromHandle$MH();
    }
    public static @C("BOOL") int GetNumaNodeNumberFromHandle (@C("HANDLE") Addressable hFile, @C("PUSHORT") Addressable NodeNumber) {
        try {
            return (int)cfapi_h$constants$28.GetNumaNodeNumberFromHandle$MH().invokeExact(hFile.address(), NodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaProcessorNodeEx$MH() {
        return cfapi_h$constants$28.GetNumaProcessorNodeEx$MH();
    }
    public static @C("BOOL") int GetNumaProcessorNodeEx (@C("PPROCESSOR_NUMBER") Addressable Processor, @C("PUSHORT") Addressable NodeNumber) {
        try {
            return (int)cfapi_h$constants$28.GetNumaProcessorNodeEx$MH().invokeExact(Processor.address(), NodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaNodeProcessorMask$MH() {
        return cfapi_h$constants$28.GetNumaNodeProcessorMask$MH();
    }
    public static @C("BOOL") int GetNumaNodeProcessorMask (@C("UCHAR") byte Node, @C("PULONGLONG") Addressable ProcessorMask) {
        try {
            return (int)cfapi_h$constants$28.GetNumaNodeProcessorMask$MH().invokeExact(Node, ProcessorMask.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaAvailableMemoryNode$MH() {
        return cfapi_h$constants$28.GetNumaAvailableMemoryNode$MH();
    }
    public static @C("BOOL") int GetNumaAvailableMemoryNode (@C("UCHAR") byte Node, @C("PULONGLONG") Addressable AvailableBytes) {
        try {
            return (int)cfapi_h$constants$28.GetNumaAvailableMemoryNode$MH().invokeExact(Node, AvailableBytes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaAvailableMemoryNodeEx$MH() {
        return cfapi_h$constants$28.GetNumaAvailableMemoryNodeEx$MH();
    }
    public static @C("BOOL") int GetNumaAvailableMemoryNodeEx (@C("USHORT") short Node, @C("PULONGLONG") Addressable AvailableBytes) {
        try {
            return (int)cfapi_h$constants$28.GetNumaAvailableMemoryNodeEx$MH().invokeExact(Node, AvailableBytes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaProximityNode$MH() {
        return cfapi_h$constants$28.GetNumaProximityNode$MH();
    }
    public static @C("BOOL") int GetNumaProximityNode (@C("ULONG") int ProximityId, @C("PUCHAR") Addressable NodeNumber) {
        try {
            return (int)cfapi_h$constants$28.GetNumaProximityNode$MH().invokeExact(ProximityId, NodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterApplicationRecoveryCallback$MH() {
        return cfapi_h$constants$28.RegisterApplicationRecoveryCallback$MH();
    }
    public static @C("HRESULT") int RegisterApplicationRecoveryCallback (@C("APPLICATION_RECOVERY_CALLBACK") Addressable pRecoveyCallback, @C("PVOID") Addressable pvParameter, @C("DWORD") int dwPingInterval, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$28.RegisterApplicationRecoveryCallback$MH().invokeExact(pRecoveyCallback.address(), pvParameter.address(), dwPingInterval, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterApplicationRecoveryCallback$MH() {
        return cfapi_h$constants$28.UnregisterApplicationRecoveryCallback$MH();
    }
    public static @C("HRESULT") int UnregisterApplicationRecoveryCallback () {
        try {
            return (int)cfapi_h$constants$28.UnregisterApplicationRecoveryCallback$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterApplicationRestart$MH() {
        return cfapi_h$constants$28.RegisterApplicationRestart$MH();
    }
    public static @C("HRESULT") int RegisterApplicationRestart (@C("PCWSTR") Addressable pwzCommandline, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$28.RegisterApplicationRestart$MH().invokeExact(pwzCommandline.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterApplicationRestart$MH() {
        return cfapi_h$constants$28.UnregisterApplicationRestart$MH();
    }
    public static @C("HRESULT") int UnregisterApplicationRestart () {
        try {
            return (int)cfapi_h$constants$28.UnregisterApplicationRestart$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetApplicationRecoveryCallback$MH() {
        return cfapi_h$constants$28.GetApplicationRecoveryCallback$MH();
    }
    public static @C("HRESULT") int GetApplicationRecoveryCallback (@C("HANDLE") Addressable hProcess, @C("APPLICATION_RECOVERY_CALLBACK*") Addressable pRecoveryCallback, @C("PVOID*") Addressable ppvParameter, @C("PDWORD") Addressable pdwPingInterval, @C("PDWORD") Addressable pdwFlags) {
        try {
            return (int)cfapi_h$constants$28.GetApplicationRecoveryCallback$MH().invokeExact(hProcess.address(), pRecoveryCallback.address(), ppvParameter.address(), pdwPingInterval.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetApplicationRestartSettings$MH() {
        return cfapi_h$constants$28.GetApplicationRestartSettings$MH();
    }
    public static @C("HRESULT") int GetApplicationRestartSettings (@C("HANDLE") Addressable hProcess, @C("PWSTR") Addressable pwzCommandline, @C("PDWORD") Addressable pcchSize, @C("PDWORD") Addressable pdwFlags) {
        try {
            return (int)cfapi_h$constants$28.GetApplicationRestartSettings$MH().invokeExact(hProcess.address(), pwzCommandline.address(), pcchSize.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ApplicationRecoveryInProgress$MH() {
        return cfapi_h$constants$28.ApplicationRecoveryInProgress$MH();
    }
    public static @C("HRESULT") int ApplicationRecoveryInProgress (@C("PBOOL") Addressable pbCancelled) {
        try {
            return (int)cfapi_h$constants$28.ApplicationRecoveryInProgress$MH().invokeExact(pbCancelled.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ApplicationRecoveryFinished$MH() {
        return cfapi_h$constants$28.ApplicationRecoveryFinished$MH();
    }
    public static void ApplicationRecoveryFinished (@C("BOOL") int bSuccess) {
        try {
            cfapi_h$constants$28.ApplicationRecoveryFinished$MH().invokeExact(bSuccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int IoPriorityHintVeryLow() {
        return cfapi_h$constants$28.IoPriorityHintVeryLow();
    }
    public static @C("int") int IoPriorityHintLow() {
        return cfapi_h$constants$28.IoPriorityHintLow();
    }
    public static @C("int") int IoPriorityHintNormal() {
        return cfapi_h$constants$28.IoPriorityHintNormal();
    }
    public static @C("int") int MaximumIoPriorityHintType() {
        return cfapi_h$constants$28.MaximumIoPriorityHintType();
    }
    public static  MethodHandle GetFileInformationByHandleEx$MH() {
        return cfapi_h$constants$28.GetFileInformationByHandleEx$MH();
    }
    public static @C("BOOL") int GetFileInformationByHandleEx (@C("HANDLE") Addressable hFile, @C("FILE_INFO_BY_HANDLE_CLASS") int FileInformationClass, @C("LPVOID") Addressable lpFileInformation, @C("DWORD") int dwBufferSize) {
        try {
            return (int)cfapi_h$constants$28.GetFileInformationByHandleEx$MH().invokeExact(hFile.address(), FileInformationClass, lpFileInformation.address(), dwBufferSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int FileIdType() {
        return cfapi_h$constants$28.FileIdType();
    }
    public static @C("int") int ObjectIdType() {
        return cfapi_h$constants$28.ObjectIdType();
    }
    public static @C("int") int ExtendedFileIdType() {
        return cfapi_h$constants$28.ExtendedFileIdType();
    }
    public static @C("int") int MaximumFileIdType() {
        return cfapi_h$constants$28.MaximumFileIdType();
    }
    public static  MethodHandle OpenFileById$MH() {
        return cfapi_h$constants$28.OpenFileById$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenFileById (@C("HANDLE") Addressable hVolumeHint, @C("LPFILE_ID_DESCRIPTOR") Addressable lpFileId, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwShareMode, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes, @C("DWORD") int dwFlagsAndAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.OpenFileById$MH().invokeExact(hVolumeHint.address(), lpFileId.address(), dwDesiredAccess, dwShareMode, lpSecurityAttributes.address(), dwFlagsAndAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSymbolicLinkA$MH() {
        return cfapi_h$constants$28.CreateSymbolicLinkA$MH();
    }
    public static @C("BOOLEAN") byte CreateSymbolicLinkA (@C("LPCSTR") Addressable lpSymlinkFileName, @C("LPCSTR") Addressable lpTargetFileName, @C("DWORD") int dwFlags) {
        try {
            return (byte)cfapi_h$constants$28.CreateSymbolicLinkA$MH().invokeExact(lpSymlinkFileName.address(), lpTargetFileName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSymbolicLinkW$MH() {
        return cfapi_h$constants$28.CreateSymbolicLinkW$MH();
    }
    public static @C("BOOLEAN") byte CreateSymbolicLinkW (@C("LPCWSTR") Addressable lpSymlinkFileName, @C("LPCWSTR") Addressable lpTargetFileName, @C("DWORD") int dwFlags) {
        try {
            return (byte)cfapi_h$constants$28.CreateSymbolicLinkW$MH().invokeExact(lpSymlinkFileName.address(), lpTargetFileName.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryActCtxSettingsW$MH() {
        return cfapi_h$constants$28.QueryActCtxSettingsW$MH();
    }
    public static @C("BOOL") int QueryActCtxSettingsW (@C("DWORD") int dwFlags, @C("HANDLE") Addressable hActCtx, @C("PCWSTR") Addressable settingsNameSpace, @C("PCWSTR") Addressable settingName, @C("PWSTR") Addressable pvBuffer, @C("SIZE_T") long dwBuffer, @C("SIZE_T*") Addressable pdwWrittenOrRequired) {
        try {
            return (int)cfapi_h$constants$28.QueryActCtxSettingsW$MH().invokeExact(dwFlags, hActCtx.address(), settingsNameSpace.address(), settingName.address(), pvBuffer.address(), dwBuffer, pdwWrittenOrRequired.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSymbolicLinkTransactedA$MH() {
        return cfapi_h$constants$28.CreateSymbolicLinkTransactedA$MH();
    }
    public static @C("BOOLEAN") byte CreateSymbolicLinkTransactedA (@C("LPCSTR") Addressable lpSymlinkFileName, @C("LPCSTR") Addressable lpTargetFileName, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (byte)cfapi_h$constants$28.CreateSymbolicLinkTransactedA$MH().invokeExact(lpSymlinkFileName.address(), lpTargetFileName.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSymbolicLinkTransactedW$MH() {
        return cfapi_h$constants$28.CreateSymbolicLinkTransactedW$MH();
    }
    public static @C("BOOLEAN") byte CreateSymbolicLinkTransactedW (@C("LPCWSTR") Addressable lpSymlinkFileName, @C("LPCWSTR") Addressable lpTargetFileName, @C("DWORD") int dwFlags, @C("HANDLE") Addressable hTransaction) {
        try {
            return (byte)cfapi_h$constants$28.CreateSymbolicLinkTransactedW$MH().invokeExact(lpSymlinkFileName.address(), lpTargetFileName.address(), dwFlags, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReplacePartitionUnit$MH() {
        return cfapi_h$constants$28.ReplacePartitionUnit$MH();
    }
    public static @C("BOOL") int ReplacePartitionUnit (@C("PWSTR") Addressable TargetPartition, @C("PWSTR") Addressable SparePartition, @C("ULONG") int Flags) {
        try {
            return (int)cfapi_h$constants$28.ReplacePartitionUnit$MH().invokeExact(TargetPartition.address(), SparePartition.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddSecureMemoryCacheCallback$MH() {
        return cfapi_h$constants$28.AddSecureMemoryCacheCallback$MH();
    }
    public static @C("BOOL") int AddSecureMemoryCacheCallback (@C("PSECURE_MEMORY_CACHE_CALLBACK") Addressable pfnCallBack) {
        try {
            return (int)cfapi_h$constants$28.AddSecureMemoryCacheCallback$MH().invokeExact(pfnCallBack.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveSecureMemoryCacheCallback$MH() {
        return cfapi_h$constants$28.RemoveSecureMemoryCacheCallback$MH();
    }
    public static @C("BOOL") int RemoveSecureMemoryCacheCallback (@C("PSECURE_MEMORY_CACHE_CALLBACK") Addressable pfnCallBack) {
        try {
            return (int)cfapi_h$constants$28.RemoveSecureMemoryCacheCallback$MH().invokeExact(pfnCallBack.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyContext$MH() {
        return cfapi_h$constants$28.CopyContext$MH();
    }
    public static @C("BOOL") int CopyContext (@C("PCONTEXT") Addressable Destination, @C("DWORD") int ContextFlags, @C("PCONTEXT") Addressable Source) {
        try {
            return (int)cfapi_h$constants$28.CopyContext$MH().invokeExact(Destination.address(), ContextFlags, Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeContext$MH() {
        return cfapi_h$constants$28.InitializeContext$MH();
    }
    public static @C("BOOL") int InitializeContext (@C("PVOID") Addressable Buffer, @C("DWORD") int ContextFlags, @C("PCONTEXT*") Addressable Context, @C("PDWORD") Addressable ContextLength) {
        try {
            return (int)cfapi_h$constants$28.InitializeContext$MH().invokeExact(Buffer.address(), ContextFlags, Context.address(), ContextLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeContext2$MH() {
        return cfapi_h$constants$28.InitializeContext2$MH();
    }
    public static @C("BOOL") int InitializeContext2 (@C("PVOID") Addressable Buffer, @C("DWORD") int ContextFlags, @C("PCONTEXT*") Addressable Context, @C("PDWORD") Addressable ContextLength, @C("ULONG64") long XStateCompactionMask) {
        try {
            return (int)cfapi_h$constants$28.InitializeContext2$MH().invokeExact(Buffer.address(), ContextFlags, Context.address(), ContextLength.address(), XStateCompactionMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnabledXStateFeatures$MH() {
        return cfapi_h$constants$28.GetEnabledXStateFeatures$MH();
    }
    public static @C("DWORD64") long GetEnabledXStateFeatures () {
        try {
            return (long)cfapi_h$constants$28.GetEnabledXStateFeatures$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetXStateFeaturesMask$MH() {
        return cfapi_h$constants$28.GetXStateFeaturesMask$MH();
    }
    public static @C("BOOL") int GetXStateFeaturesMask (@C("PCONTEXT") Addressable Context, @C("PDWORD64") Addressable FeatureMask) {
        try {
            return (int)cfapi_h$constants$28.GetXStateFeaturesMask$MH().invokeExact(Context.address(), FeatureMask.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocateXStateFeature$MH() {
        return cfapi_h$constants$28.LocateXStateFeature$MH();
    }
    public static @C("PVOID") MemoryAddress LocateXStateFeature (@C("PCONTEXT") Addressable Context, @C("DWORD") int FeatureId, @C("PDWORD") Addressable Length) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$28.LocateXStateFeature$MH().invokeExact(Context.address(), FeatureId, Length.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetXStateFeaturesMask$MH() {
        return cfapi_h$constants$28.SetXStateFeaturesMask$MH();
    }
    public static @C("BOOL") int SetXStateFeaturesMask (@C("PCONTEXT") Addressable Context, @C("DWORD64") long FeatureMask) {
        try {
            return (int)cfapi_h$constants$28.SetXStateFeaturesMask$MH().invokeExact(Context.address(), FeatureMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnableThreadProfiling$MH() {
        return cfapi_h$constants$28.EnableThreadProfiling$MH();
    }
    public static @C("DWORD") int EnableThreadProfiling (@C("HANDLE") Addressable ThreadHandle, @C("DWORD") int Flags, @C("DWORD64") long HardwareCounters, @C("HANDLE*") Addressable PerformanceDataHandle) {
        try {
            return (int)cfapi_h$constants$28.EnableThreadProfiling$MH().invokeExact(ThreadHandle.address(), Flags, HardwareCounters, PerformanceDataHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DisableThreadProfiling$MH() {
        return cfapi_h$constants$28.DisableThreadProfiling$MH();
    }
    public static @C("DWORD") int DisableThreadProfiling (@C("HANDLE") Addressable PerformanceDataHandle) {
        try {
            return (int)cfapi_h$constants$28.DisableThreadProfiling$MH().invokeExact(PerformanceDataHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryThreadProfiling$MH() {
        return cfapi_h$constants$28.QueryThreadProfiling$MH();
    }
    public static @C("DWORD") int QueryThreadProfiling (@C("HANDLE") Addressable ThreadHandle, @C("PBOOLEAN") Addressable Enabled) {
        try {
            return (int)cfapi_h$constants$28.QueryThreadProfiling$MH().invokeExact(ThreadHandle.address(), Enabled.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadThreadProfilingData$MH() {
        return cfapi_h$constants$28.ReadThreadProfilingData$MH();
    }
    public static @C("DWORD") int ReadThreadProfilingData (@C("HANDLE") Addressable PerformanceDataHandle, @C("DWORD") int Flags, @C("PPERFORMANCE_DATA") Addressable PerformanceData) {
        try {
            return (int)cfapi_h$constants$28.ReadThreadProfilingData$MH().invokeExact(PerformanceDataHandle.address(), Flags, PerformanceData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RaiseCustomSystemEventTrigger$MH() {
        return cfapi_h$constants$28.RaiseCustomSystemEventTrigger$MH();
    }
    public static @C("DWORD") int RaiseCustomSystemEventTrigger (@C("PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG") Addressable CustomSystemEventTriggerConfig) {
        try {
            return (int)cfapi_h$constants$28.RaiseCustomSystemEventTrigger$MH().invokeExact(CustomSystemEventTriggerConfig.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("long") ValueLayout LCSCSTYPE = C_LONG;
    public static @C("long") ValueLayout LCSGAMUTMATCH = C_LONG;
    public static @C("long") ValueLayout FXPT16DOT16 = C_LONG;
    public static @C("long") ValueLayout FXPT2DOT30 = C_LONG;
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL();
    }
    public static @C("int") int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32() {
        return cfapi_h$constants$30.DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32();
    }
    public static @C("int") int DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED();
    }
    public static @C("int") int DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE();
    }
    public static @C("int") int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED();
    }
    public static @C("int") int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST();
    }
    public static @C("int") int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST();
    }
    public static @C("int") int DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32();
    }
    public static @C("int") int DISPLAYCONFIG_SCALING_IDENTITY() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCALING_IDENTITY();
    }
    public static @C("int") int DISPLAYCONFIG_SCALING_CENTERED() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCALING_CENTERED();
    }
    public static @C("int") int DISPLAYCONFIG_SCALING_STRETCHED() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCALING_STRETCHED();
    }
    public static @C("int") int DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX();
    }
    public static @C("int") int DISPLAYCONFIG_SCALING_CUSTOM() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCALING_CUSTOM();
    }
    public static @C("int") int DISPLAYCONFIG_SCALING_PREFERRED() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCALING_PREFERRED();
    }
    public static @C("int") int DISPLAYCONFIG_SCALING_FORCE_UINT32() {
        return cfapi_h$constants$30.DISPLAYCONFIG_SCALING_FORCE_UINT32();
    }
    public static @C("int") int DISPLAYCONFIG_ROTATION_IDENTITY() {
        return cfapi_h$constants$30.DISPLAYCONFIG_ROTATION_IDENTITY();
    }
    public static @C("int") int DISPLAYCONFIG_ROTATION_ROTATE90() {
        return cfapi_h$constants$30.DISPLAYCONFIG_ROTATION_ROTATE90();
    }
    public static @C("int") int DISPLAYCONFIG_ROTATION_ROTATE180() {
        return cfapi_h$constants$30.DISPLAYCONFIG_ROTATION_ROTATE180();
    }
    public static @C("int") int DISPLAYCONFIG_ROTATION_ROTATE270() {
        return cfapi_h$constants$30.DISPLAYCONFIG_ROTATION_ROTATE270();
    }
    public static @C("int") int DISPLAYCONFIG_ROTATION_FORCE_UINT32() {
        return cfapi_h$constants$30.DISPLAYCONFIG_ROTATION_FORCE_UINT32();
    }
    public static @C("int") int DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE() {
        return cfapi_h$constants$30.DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE();
    }
    public static @C("int") int DISPLAYCONFIG_MODE_INFO_TYPE_TARGET() {
        return cfapi_h$constants$30.DISPLAYCONFIG_MODE_INFO_TYPE_TARGET();
    }
    public static @C("int") int DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE() {
        return cfapi_h$constants$30.DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE();
    }
    public static @C("int") int DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32() {
        return cfapi_h$constants$30.DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32();
    }
    public static @C("int") int DISPLAYCONFIG_PIXELFORMAT_8BPP() {
        return cfapi_h$constants$30.DISPLAYCONFIG_PIXELFORMAT_8BPP();
    }
    public static @C("int") int DISPLAYCONFIG_PIXELFORMAT_16BPP() {
        return cfapi_h$constants$30.DISPLAYCONFIG_PIXELFORMAT_16BPP();
    }
    public static @C("int") int DISPLAYCONFIG_PIXELFORMAT_24BPP() {
        return cfapi_h$constants$30.DISPLAYCONFIG_PIXELFORMAT_24BPP();
    }
    public static @C("int") int DISPLAYCONFIG_PIXELFORMAT_32BPP() {
        return cfapi_h$constants$30.DISPLAYCONFIG_PIXELFORMAT_32BPP();
    }
    public static @C("int") int DISPLAYCONFIG_PIXELFORMAT_NONGDI() {
        return cfapi_h$constants$30.DISPLAYCONFIG_PIXELFORMAT_NONGDI();
    }
    public static @C("int") int DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32() {
        return cfapi_h$constants$30.DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32();
    }
    public static @C("int") int DISPLAYCONFIG_TOPOLOGY_INTERNAL() {
        return cfapi_h$constants$31.DISPLAYCONFIG_TOPOLOGY_INTERNAL();
    }
    public static @C("int") int DISPLAYCONFIG_TOPOLOGY_CLONE() {
        return cfapi_h$constants$31.DISPLAYCONFIG_TOPOLOGY_CLONE();
    }
    public static @C("int") int DISPLAYCONFIG_TOPOLOGY_EXTEND() {
        return cfapi_h$constants$31.DISPLAYCONFIG_TOPOLOGY_EXTEND();
    }
    public static @C("int") int DISPLAYCONFIG_TOPOLOGY_EXTERNAL() {
        return cfapi_h$constants$31.DISPLAYCONFIG_TOPOLOGY_EXTERNAL();
    }
    public static @C("int") int DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32() {
        return cfapi_h$constants$31.DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL();
    }
    public static @C("int") int DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32() {
        return cfapi_h$constants$31.DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32();
    }
    public static @C("int") int DISPLAYCONFIG_COLOR_ENCODING_RGB() {
        return cfapi_h$constants$31.DISPLAYCONFIG_COLOR_ENCODING_RGB();
    }
    public static @C("int") int DISPLAYCONFIG_COLOR_ENCODING_YCBCR444() {
        return cfapi_h$constants$31.DISPLAYCONFIG_COLOR_ENCODING_YCBCR444();
    }
    public static @C("int") int DISPLAYCONFIG_COLOR_ENCODING_YCBCR422() {
        return cfapi_h$constants$31.DISPLAYCONFIG_COLOR_ENCODING_YCBCR422();
    }
    public static @C("int") int DISPLAYCONFIG_COLOR_ENCODING_YCBCR420() {
        return cfapi_h$constants$31.DISPLAYCONFIG_COLOR_ENCODING_YCBCR420();
    }
    public static @C("int") int DISPLAYCONFIG_COLOR_ENCODING_INTENSITY() {
        return cfapi_h$constants$31.DISPLAYCONFIG_COLOR_ENCODING_INTENSITY();
    }
    public static @C("int") int DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32() {
        return cfapi_h$constants$31.DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32();
    }
    public static  MethodHandle AddFontResourceA$MH() {
        return cfapi_h$constants$31.AddFontResourceA$MH();
    }
    public static @C("int") int AddFontResourceA (@C("LPCSTR") Addressable x0) {
        try {
            return (int)cfapi_h$constants$31.AddFontResourceA$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddFontResourceW$MH() {
        return cfapi_h$constants$31.AddFontResourceW$MH();
    }
    public static @C("int") int AddFontResourceW (@C("LPCWSTR") Addressable x0) {
        try {
            return (int)cfapi_h$constants$31.AddFontResourceW$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AnimatePalette$MH() {
        return cfapi_h$constants$31.AnimatePalette$MH();
    }
    public static @C("BOOL") int AnimatePalette (@C("HPALETTE") Addressable hPal, @C("UINT") int iStartIndex, @C("UINT") int cEntries, @C("const PALETTEENTRY*") Addressable ppe) {
        try {
            return (int)cfapi_h$constants$31.AnimatePalette$MH().invokeExact(hPal.address(), iStartIndex, cEntries, ppe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Arc$MH() {
        return cfapi_h$constants$31.Arc$MH();
    }
    public static @C("BOOL") int Arc (@C("HDC") Addressable hdc, @C("int") int x1, @C("int") int y1, @C("int") int x2, @C("int") int y2, @C("int") int x3, @C("int") int y3, @C("int") int x4, @C("int") int y4) {
        try {
            return (int)cfapi_h$constants$31.Arc$MH().invokeExact(hdc.address(), x1, y1, x2, y2, x3, y3, x4, y4);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BitBlt$MH() {
        return cfapi_h$constants$31.BitBlt$MH();
    }
    public static @C("BOOL") int BitBlt (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("int") int cx, @C("int") int cy, @C("HDC") Addressable hdcSrc, @C("int") int x1, @C("int") int y1, @C("DWORD") int rop) {
        try {
            return (int)cfapi_h$constants$31.BitBlt$MH().invokeExact(hdc.address(), x, y, cx, cy, hdcSrc.address(), x1, y1, rop);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelDC$MH() {
        return cfapi_h$constants$31.CancelDC$MH();
    }
    public static @C("BOOL") int CancelDC (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$31.CancelDC$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Chord$MH() {
        return cfapi_h$constants$31.Chord$MH();
    }
    public static @C("BOOL") int Chord (@C("HDC") Addressable hdc, @C("int") int x1, @C("int") int y1, @C("int") int x2, @C("int") int y2, @C("int") int x3, @C("int") int y3, @C("int") int x4, @C("int") int y4) {
        try {
            return (int)cfapi_h$constants$31.Chord$MH().invokeExact(hdc.address(), x1, y1, x2, y2, x3, y3, x4, y4);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChoosePixelFormat$MH() {
        return cfapi_h$constants$31.ChoosePixelFormat$MH();
    }
    public static @C("int") int ChoosePixelFormat (@C("HDC") Addressable hdc, @C("const PIXELFORMATDESCRIPTOR*") Addressable ppfd) {
        try {
            return (int)cfapi_h$constants$31.ChoosePixelFormat$MH().invokeExact(hdc.address(), ppfd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseMetaFile$MH() {
        return cfapi_h$constants$31.CloseMetaFile$MH();
    }
    public static @C("HMETAFILE") MemoryAddress CloseMetaFile (@C("HDC") Addressable hdc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CloseMetaFile$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CombineRgn$MH() {
        return cfapi_h$constants$31.CombineRgn$MH();
    }
    public static @C("int") int CombineRgn (@C("HRGN") Addressable hrgnDst, @C("HRGN") Addressable hrgnSrc1, @C("HRGN") Addressable hrgnSrc2, @C("int") int iMode) {
        try {
            return (int)cfapi_h$constants$31.CombineRgn$MH().invokeExact(hrgnDst.address(), hrgnSrc1.address(), hrgnSrc2.address(), iMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyMetaFileA$MH() {
        return cfapi_h$constants$31.CopyMetaFileA$MH();
    }
    public static @C("HMETAFILE") MemoryAddress CopyMetaFileA (@C("HMETAFILE") Addressable x0, @C("LPCSTR") Addressable x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CopyMetaFileA$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyMetaFileW$MH() {
        return cfapi_h$constants$31.CopyMetaFileW$MH();
    }
    public static @C("HMETAFILE") MemoryAddress CopyMetaFileW (@C("HMETAFILE") Addressable x0, @C("LPCWSTR") Addressable x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CopyMetaFileW$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateBitmap$MH() {
        return cfapi_h$constants$31.CreateBitmap$MH();
    }
    public static @C("HBITMAP") MemoryAddress CreateBitmap (@C("int") int nWidth, @C("int") int nHeight, @C("UINT") int nPlanes, @C("UINT") int nBitCount, @C("void*") Addressable lpBits) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateBitmap$MH().invokeExact(nWidth, nHeight, nPlanes, nBitCount, lpBits.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateBitmapIndirect$MH() {
        return cfapi_h$constants$31.CreateBitmapIndirect$MH();
    }
    public static @C("HBITMAP") MemoryAddress CreateBitmapIndirect (@C("const BITMAP*") Addressable pbm) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateBitmapIndirect$MH().invokeExact(pbm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateBrushIndirect$MH() {
        return cfapi_h$constants$31.CreateBrushIndirect$MH();
    }
    public static @C("HBRUSH") MemoryAddress CreateBrushIndirect (@C("const LOGBRUSH*") Addressable plbrush) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateBrushIndirect$MH().invokeExact(plbrush.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateCompatibleBitmap$MH() {
        return cfapi_h$constants$31.CreateCompatibleBitmap$MH();
    }
    public static @C("HBITMAP") MemoryAddress CreateCompatibleBitmap (@C("HDC") Addressable hdc, @C("int") int cx, @C("int") int cy) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateCompatibleBitmap$MH().invokeExact(hdc.address(), cx, cy);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDiscardableBitmap$MH() {
        return cfapi_h$constants$31.CreateDiscardableBitmap$MH();
    }
    public static @C("HBITMAP") MemoryAddress CreateDiscardableBitmap (@C("HDC") Addressable hdc, @C("int") int cx, @C("int") int cy) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateDiscardableBitmap$MH().invokeExact(hdc.address(), cx, cy);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateCompatibleDC$MH() {
        return cfapi_h$constants$31.CreateCompatibleDC$MH();
    }
    public static @C("HDC") MemoryAddress CreateCompatibleDC (@C("HDC") Addressable hdc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateCompatibleDC$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDCA$MH() {
        return cfapi_h$constants$31.CreateDCA$MH();
    }
    public static @C("HDC") MemoryAddress CreateDCA (@C("LPCSTR") Addressable pwszDriver, @C("LPCSTR") Addressable pwszDevice, @C("LPCSTR") Addressable pszPort, @C("const DEVMODEA*") Addressable pdm) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateDCA$MH().invokeExact(pwszDriver.address(), pwszDevice.address(), pszPort.address(), pdm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDCW$MH() {
        return cfapi_h$constants$31.CreateDCW$MH();
    }
    public static @C("HDC") MemoryAddress CreateDCW (@C("LPCWSTR") Addressable pwszDriver, @C("LPCWSTR") Addressable pwszDevice, @C("LPCWSTR") Addressable pszPort, @C("const DEVMODEW*") Addressable pdm) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateDCW$MH().invokeExact(pwszDriver.address(), pwszDevice.address(), pszPort.address(), pdm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDIBitmap$MH() {
        return cfapi_h$constants$31.CreateDIBitmap$MH();
    }
    public static @C("HBITMAP") MemoryAddress CreateDIBitmap (@C("HDC") Addressable hdc, @C("const BITMAPINFOHEADER*") Addressable pbmih, @C("DWORD") int flInit, @C("void*") Addressable pjBits, @C("const BITMAPINFO*") Addressable pbmi, @C("UINT") int iUsage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateDIBitmap$MH().invokeExact(hdc.address(), pbmih.address(), flInit, pjBits.address(), pbmi.address(), iUsage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDIBPatternBrush$MH() {
        return cfapi_h$constants$31.CreateDIBPatternBrush$MH();
    }
    public static @C("HBRUSH") MemoryAddress CreateDIBPatternBrush (@C("HGLOBAL") Addressable h, @C("UINT") int iUsage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateDIBPatternBrush$MH().invokeExact(h.address(), iUsage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDIBPatternBrushPt$MH() {
        return cfapi_h$constants$31.CreateDIBPatternBrushPt$MH();
    }
    public static @C("HBRUSH") MemoryAddress CreateDIBPatternBrushPt (@C("void*") Addressable lpPackedDIB, @C("UINT") int iUsage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateDIBPatternBrushPt$MH().invokeExact(lpPackedDIB.address(), iUsage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateEllipticRgn$MH() {
        return cfapi_h$constants$31.CreateEllipticRgn$MH();
    }
    public static @C("HRGN") MemoryAddress CreateEllipticRgn (@C("int") int x1, @C("int") int y1, @C("int") int x2, @C("int") int y2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateEllipticRgn$MH().invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateEllipticRgnIndirect$MH() {
        return cfapi_h$constants$31.CreateEllipticRgnIndirect$MH();
    }
    public static @C("HRGN") MemoryAddress CreateEllipticRgnIndirect (@C("const RECT*") Addressable lprect) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateEllipticRgnIndirect$MH().invokeExact(lprect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFontIndirectA$MH() {
        return cfapi_h$constants$31.CreateFontIndirectA$MH();
    }
    public static @C("HFONT") MemoryAddress CreateFontIndirectA (@C("const LOGFONTA*") Addressable lplf) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateFontIndirectA$MH().invokeExact(lplf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFontIndirectW$MH() {
        return cfapi_h$constants$31.CreateFontIndirectW$MH();
    }
    public static @C("HFONT") MemoryAddress CreateFontIndirectW (@C("const LOGFONTW*") Addressable lplf) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateFontIndirectW$MH().invokeExact(lplf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFontA$MH() {
        return cfapi_h$constants$31.CreateFontA$MH();
    }
    public static @C("HFONT") MemoryAddress CreateFontA (@C("int") int cHeight, @C("int") int cWidth, @C("int") int cEscapement, @C("int") int cOrientation, @C("int") int cWeight, @C("DWORD") int bItalic, @C("DWORD") int bUnderline, @C("DWORD") int bStrikeOut, @C("DWORD") int iCharSet, @C("DWORD") int iOutPrecision, @C("DWORD") int iClipPrecision, @C("DWORD") int iQuality, @C("DWORD") int iPitchAndFamily, @C("LPCSTR") Addressable pszFaceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateFontA$MH().invokeExact(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, pszFaceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFontW$MH() {
        return cfapi_h$constants$31.CreateFontW$MH();
    }
    public static @C("HFONT") MemoryAddress CreateFontW (@C("int") int cHeight, @C("int") int cWidth, @C("int") int cEscapement, @C("int") int cOrientation, @C("int") int cWeight, @C("DWORD") int bItalic, @C("DWORD") int bUnderline, @C("DWORD") int bStrikeOut, @C("DWORD") int iCharSet, @C("DWORD") int iOutPrecision, @C("DWORD") int iClipPrecision, @C("DWORD") int iQuality, @C("DWORD") int iPitchAndFamily, @C("LPCWSTR") Addressable pszFaceName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateFontW$MH().invokeExact(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, pszFaceName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHatchBrush$MH() {
        return cfapi_h$constants$31.CreateHatchBrush$MH();
    }
    public static @C("HBRUSH") MemoryAddress CreateHatchBrush (@C("int") int iHatch, @C("COLORREF") int color) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateHatchBrush$MH().invokeExact(iHatch, color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateICA$MH() {
        return cfapi_h$constants$31.CreateICA$MH();
    }
    public static @C("HDC") MemoryAddress CreateICA (@C("LPCSTR") Addressable pszDriver, @C("LPCSTR") Addressable pszDevice, @C("LPCSTR") Addressable pszPort, @C("const DEVMODEA*") Addressable pdm) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateICA$MH().invokeExact(pszDriver.address(), pszDevice.address(), pszPort.address(), pdm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateICW$MH() {
        return cfapi_h$constants$31.CreateICW$MH();
    }
    public static @C("HDC") MemoryAddress CreateICW (@C("LPCWSTR") Addressable pszDriver, @C("LPCWSTR") Addressable pszDevice, @C("LPCWSTR") Addressable pszPort, @C("const DEVMODEW*") Addressable pdm) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateICW$MH().invokeExact(pszDriver.address(), pszDevice.address(), pszPort.address(), pdm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMetaFileA$MH() {
        return cfapi_h$constants$31.CreateMetaFileA$MH();
    }
    public static @C("HDC") MemoryAddress CreateMetaFileA (@C("LPCSTR") Addressable pszFile) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateMetaFileA$MH().invokeExact(pszFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMetaFileW$MH() {
        return cfapi_h$constants$31.CreateMetaFileW$MH();
    }
    public static @C("HDC") MemoryAddress CreateMetaFileW (@C("LPCWSTR") Addressable pszFile) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateMetaFileW$MH().invokeExact(pszFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePalette$MH() {
        return cfapi_h$constants$31.CreatePalette$MH();
    }
    public static @C("HPALETTE") MemoryAddress CreatePalette (@C("const LOGPALETTE*") Addressable plpal) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreatePalette$MH().invokeExact(plpal.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePen$MH() {
        return cfapi_h$constants$31.CreatePen$MH();
    }
    public static @C("HPEN") MemoryAddress CreatePen (@C("int") int iStyle, @C("int") int cWidth, @C("COLORREF") int color) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreatePen$MH().invokeExact(iStyle, cWidth, color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePenIndirect$MH() {
        return cfapi_h$constants$31.CreatePenIndirect$MH();
    }
    public static @C("HPEN") MemoryAddress CreatePenIndirect (@C("const LOGPEN*") Addressable plpen) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreatePenIndirect$MH().invokeExact(plpen.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePolyPolygonRgn$MH() {
        return cfapi_h$constants$31.CreatePolyPolygonRgn$MH();
    }
    public static @C("HRGN") MemoryAddress CreatePolyPolygonRgn (@C("const POINT*") Addressable pptl, @C("const INT*") Addressable pc, @C("int") int cPoly, @C("int") int iMode) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreatePolyPolygonRgn$MH().invokeExact(pptl.address(), pc.address(), cPoly, iMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePatternBrush$MH() {
        return cfapi_h$constants$31.CreatePatternBrush$MH();
    }
    public static @C("HBRUSH") MemoryAddress CreatePatternBrush (@C("HBITMAP") Addressable hbm) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreatePatternBrush$MH().invokeExact(hbm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateRectRgn$MH() {
        return cfapi_h$constants$31.CreateRectRgn$MH();
    }
    public static @C("HRGN") MemoryAddress CreateRectRgn (@C("int") int x1, @C("int") int y1, @C("int") int x2, @C("int") int y2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateRectRgn$MH().invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateRectRgnIndirect$MH() {
        return cfapi_h$constants$31.CreateRectRgnIndirect$MH();
    }
    public static @C("HRGN") MemoryAddress CreateRectRgnIndirect (@C("const RECT*") Addressable lprect) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateRectRgnIndirect$MH().invokeExact(lprect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateRoundRectRgn$MH() {
        return cfapi_h$constants$31.CreateRoundRectRgn$MH();
    }
    public static @C("HRGN") MemoryAddress CreateRoundRectRgn (@C("int") int x1, @C("int") int y1, @C("int") int x2, @C("int") int y2, @C("int") int w, @C("int") int h) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateRoundRectRgn$MH().invokeExact(x1, y1, x2, y2, w, h);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateScalableFontResourceA$MH() {
        return cfapi_h$constants$31.CreateScalableFontResourceA$MH();
    }
    public static @C("BOOL") int CreateScalableFontResourceA (@C("DWORD") int fdwHidden, @C("LPCSTR") Addressable lpszFont, @C("LPCSTR") Addressable lpszFile, @C("LPCSTR") Addressable lpszPath) {
        try {
            return (int)cfapi_h$constants$31.CreateScalableFontResourceA$MH().invokeExact(fdwHidden, lpszFont.address(), lpszFile.address(), lpszPath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateScalableFontResourceW$MH() {
        return cfapi_h$constants$31.CreateScalableFontResourceW$MH();
    }
    public static @C("BOOL") int CreateScalableFontResourceW (@C("DWORD") int fdwHidden, @C("LPCWSTR") Addressable lpszFont, @C("LPCWSTR") Addressable lpszFile, @C("LPCWSTR") Addressable lpszPath) {
        try {
            return (int)cfapi_h$constants$31.CreateScalableFontResourceW$MH().invokeExact(fdwHidden, lpszFont.address(), lpszFile.address(), lpszPath.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSolidBrush$MH() {
        return cfapi_h$constants$31.CreateSolidBrush$MH();
    }
    public static @C("HBRUSH") MemoryAddress CreateSolidBrush (@C("COLORREF") int color) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.CreateSolidBrush$MH().invokeExact(color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteDC$MH() {
        return cfapi_h$constants$31.DeleteDC$MH();
    }
    public static @C("BOOL") int DeleteDC (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$31.DeleteDC$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteMetaFile$MH() {
        return cfapi_h$constants$31.DeleteMetaFile$MH();
    }
    public static @C("BOOL") int DeleteMetaFile (@C("HMETAFILE") Addressable hmf) {
        try {
            return (int)cfapi_h$constants$31.DeleteMetaFile$MH().invokeExact(hmf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteObject$MH() {
        return cfapi_h$constants$31.DeleteObject$MH();
    }
    public static @C("BOOL") int DeleteObject (@C("HGDIOBJ") Addressable ho) {
        try {
            return (int)cfapi_h$constants$31.DeleteObject$MH().invokeExact(ho.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DescribePixelFormat$MH() {
        return cfapi_h$constants$31.DescribePixelFormat$MH();
    }
    public static @C("int") int DescribePixelFormat (@C("HDC") Addressable hdc, @C("int") int iPixelFormat, @C("UINT") int nBytes, @C("LPPIXELFORMATDESCRIPTOR") Addressable ppfd) {
        try {
            return (int)cfapi_h$constants$31.DescribePixelFormat$MH().invokeExact(hdc.address(), iPixelFormat, nBytes, ppfd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeviceCapabilitiesA$MH() {
        return cfapi_h$constants$31.DeviceCapabilitiesA$MH();
    }
    public static @C("int") int DeviceCapabilitiesA (@C("LPCSTR") Addressable pDevice, @C("LPCSTR") Addressable pPort, @C("WORD") short fwCapability, @C("LPSTR") Addressable pOutput, @C("const DEVMODEA*") Addressable pDevMode) {
        try {
            return (int)cfapi_h$constants$31.DeviceCapabilitiesA$MH().invokeExact(pDevice.address(), pPort.address(), fwCapability, pOutput.address(), pDevMode.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeviceCapabilitiesW$MH() {
        return cfapi_h$constants$31.DeviceCapabilitiesW$MH();
    }
    public static @C("int") int DeviceCapabilitiesW (@C("LPCWSTR") Addressable pDevice, @C("LPCWSTR") Addressable pPort, @C("WORD") short fwCapability, @C("LPWSTR") Addressable pOutput, @C("const DEVMODEW*") Addressable pDevMode) {
        try {
            return (int)cfapi_h$constants$31.DeviceCapabilitiesW$MH().invokeExact(pDevice.address(), pPort.address(), fwCapability, pOutput.address(), pDevMode.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawEscape$MH() {
        return cfapi_h$constants$31.DrawEscape$MH();
    }
    public static @C("int") int DrawEscape (@C("HDC") Addressable hdc, @C("int") int iEscape, @C("int") int cjIn, @C("LPCSTR") Addressable lpIn) {
        try {
            return (int)cfapi_h$constants$31.DrawEscape$MH().invokeExact(hdc.address(), iEscape, cjIn, lpIn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Ellipse$MH() {
        return cfapi_h$constants$31.Ellipse$MH();
    }
    public static @C("BOOL") int Ellipse (@C("HDC") Addressable hdc, @C("int") int left, @C("int") int top, @C("int") int right, @C("int") int bottom) {
        try {
            return (int)cfapi_h$constants$31.Ellipse$MH().invokeExact(hdc.address(), left, top, right, bottom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumFontFamiliesExA$MH() {
        return cfapi_h$constants$31.EnumFontFamiliesExA$MH();
    }
    public static @C("int") int EnumFontFamiliesExA (@C("HDC") Addressable hdc, @C("LPLOGFONTA") Addressable lpLogfont, @C("FONTENUMPROCA") Addressable lpProc, @C("LPARAM") long lParam, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$31.EnumFontFamiliesExA$MH().invokeExact(hdc.address(), lpLogfont.address(), lpProc.address(), lParam, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumFontFamiliesExW$MH() {
        return cfapi_h$constants$31.EnumFontFamiliesExW$MH();
    }
    public static @C("int") int EnumFontFamiliesExW (@C("HDC") Addressable hdc, @C("LPLOGFONTW") Addressable lpLogfont, @C("FONTENUMPROCW") Addressable lpProc, @C("LPARAM") long lParam, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$31.EnumFontFamiliesExW$MH().invokeExact(hdc.address(), lpLogfont.address(), lpProc.address(), lParam, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumFontFamiliesA$MH() {
        return cfapi_h$constants$31.EnumFontFamiliesA$MH();
    }
    public static @C("int") int EnumFontFamiliesA (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpLogfont, @C("FONTENUMPROCA") Addressable lpProc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$31.EnumFontFamiliesA$MH().invokeExact(hdc.address(), lpLogfont.address(), lpProc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumFontFamiliesW$MH() {
        return cfapi_h$constants$31.EnumFontFamiliesW$MH();
    }
    public static @C("int") int EnumFontFamiliesW (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpLogfont, @C("FONTENUMPROCW") Addressable lpProc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$31.EnumFontFamiliesW$MH().invokeExact(hdc.address(), lpLogfont.address(), lpProc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumFontsA$MH() {
        return cfapi_h$constants$31.EnumFontsA$MH();
    }
    public static @C("int") int EnumFontsA (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpLogfont, @C("FONTENUMPROCA") Addressable lpProc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$31.EnumFontsA$MH().invokeExact(hdc.address(), lpLogfont.address(), lpProc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumFontsW$MH() {
        return cfapi_h$constants$31.EnumFontsW$MH();
    }
    public static @C("int") int EnumFontsW (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpLogfont, @C("FONTENUMPROCW") Addressable lpProc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$31.EnumFontsW$MH().invokeExact(hdc.address(), lpLogfont.address(), lpProc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumObjects$MH() {
        return cfapi_h$constants$31.EnumObjects$MH();
    }
    public static @C("int") int EnumObjects (@C("HDC") Addressable hdc, @C("int") int nType, @C("GOBJENUMPROC") Addressable lpFunc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$31.EnumObjects$MH().invokeExact(hdc.address(), nType, lpFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EqualRgn$MH() {
        return cfapi_h$constants$31.EqualRgn$MH();
    }
    public static @C("BOOL") int EqualRgn (@C("HRGN") Addressable hrgn1, @C("HRGN") Addressable hrgn2) {
        try {
            return (int)cfapi_h$constants$31.EqualRgn$MH().invokeExact(hrgn1.address(), hrgn2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Escape$MH() {
        return cfapi_h$constants$31.Escape$MH();
    }
    public static @C("int") int Escape (@C("HDC") Addressable hdc, @C("int") int iEscape, @C("int") int cjIn, @C("LPCSTR") Addressable pvIn, @C("LPVOID") Addressable pvOut) {
        try {
            return (int)cfapi_h$constants$31.Escape$MH().invokeExact(hdc.address(), iEscape, cjIn, pvIn.address(), pvOut.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExtEscape$MH() {
        return cfapi_h$constants$31.ExtEscape$MH();
    }
    public static @C("int") int ExtEscape (@C("HDC") Addressable hdc, @C("int") int iEscape, @C("int") int cjInput, @C("LPCSTR") Addressable lpInData, @C("int") int cjOutput, @C("LPSTR") Addressable lpOutData) {
        try {
            return (int)cfapi_h$constants$31.ExtEscape$MH().invokeExact(hdc.address(), iEscape, cjInput, lpInData.address(), cjOutput, lpOutData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExcludeClipRect$MH() {
        return cfapi_h$constants$31.ExcludeClipRect$MH();
    }
    public static @C("int") int ExcludeClipRect (@C("HDC") Addressable hdc, @C("int") int left, @C("int") int top, @C("int") int right, @C("int") int bottom) {
        try {
            return (int)cfapi_h$constants$31.ExcludeClipRect$MH().invokeExact(hdc.address(), left, top, right, bottom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExtCreateRegion$MH() {
        return cfapi_h$constants$31.ExtCreateRegion$MH();
    }
    public static @C("HRGN") MemoryAddress ExtCreateRegion (@C("const XFORM*") Addressable lpx, @C("DWORD") int nCount, @C("const RGNDATA*") Addressable lpData) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$31.ExtCreateRegion$MH().invokeExact(lpx.address(), nCount, lpData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExtFloodFill$MH() {
        return cfapi_h$constants$31.ExtFloodFill$MH();
    }
    public static @C("BOOL") int ExtFloodFill (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("COLORREF") int color, @C("UINT") int type) {
        try {
            return (int)cfapi_h$constants$31.ExtFloodFill$MH().invokeExact(hdc.address(), x, y, color, type);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FillRgn$MH() {
        return cfapi_h$constants$31.FillRgn$MH();
    }
    public static @C("BOOL") int FillRgn (@C("HDC") Addressable hdc, @C("HRGN") Addressable hrgn, @C("HBRUSH") Addressable hbr) {
        try {
            return (int)cfapi_h$constants$31.FillRgn$MH().invokeExact(hdc.address(), hrgn.address(), hbr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FloodFill$MH() {
        return cfapi_h$constants$31.FloodFill$MH();
    }
    public static @C("BOOL") int FloodFill (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("COLORREF") int color) {
        try {
            return (int)cfapi_h$constants$31.FloodFill$MH().invokeExact(hdc.address(), x, y, color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FrameRgn$MH() {
        return cfapi_h$constants$31.FrameRgn$MH();
    }
    public static @C("BOOL") int FrameRgn (@C("HDC") Addressable hdc, @C("HRGN") Addressable hrgn, @C("HBRUSH") Addressable hbr, @C("int") int w, @C("int") int h) {
        try {
            return (int)cfapi_h$constants$31.FrameRgn$MH().invokeExact(hdc.address(), hrgn.address(), hbr.address(), w, h);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetROP2$MH() {
        return cfapi_h$constants$31.GetROP2$MH();
    }
    public static @C("int") int GetROP2 (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$31.GetROP2$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAspectRatioFilterEx$MH() {
        return cfapi_h$constants$31.GetAspectRatioFilterEx$MH();
    }
    public static @C("BOOL") int GetAspectRatioFilterEx (@C("HDC") Addressable hdc, @C("LPSIZE") Addressable lpsize) {
        try {
            return (int)cfapi_h$constants$31.GetAspectRatioFilterEx$MH().invokeExact(hdc.address(), lpsize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBkColor$MH() {
        return cfapi_h$constants$31.GetBkColor$MH();
    }
    public static @C("COLORREF") int GetBkColor (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$31.GetBkColor$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDCBrushColor$MH() {
        return cfapi_h$constants$31.GetDCBrushColor$MH();
    }
    public static @C("COLORREF") int GetDCBrushColor (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$31.GetDCBrushColor$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDCPenColor$MH() {
        return cfapi_h$constants$31.GetDCPenColor$MH();
    }
    public static @C("COLORREF") int GetDCPenColor (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$31.GetDCPenColor$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBkMode$MH() {
        return cfapi_h$constants$31.GetBkMode$MH();
    }
    public static @C("int") int GetBkMode (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$31.GetBkMode$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBitmapBits$MH() {
        return cfapi_h$constants$31.GetBitmapBits$MH();
    }
    public static @C("LONG") int GetBitmapBits (@C("HBITMAP") Addressable hbit, @C("LONG") int cb, @C("LPVOID") Addressable lpvBits) {
        try {
            return (int)cfapi_h$constants$31.GetBitmapBits$MH().invokeExact(hbit.address(), cb, lpvBits.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBitmapDimensionEx$MH() {
        return cfapi_h$constants$31.GetBitmapDimensionEx$MH();
    }
    public static @C("BOOL") int GetBitmapDimensionEx (@C("HBITMAP") Addressable hbit, @C("LPSIZE") Addressable lpsize) {
        try {
            return (int)cfapi_h$constants$31.GetBitmapDimensionEx$MH().invokeExact(hbit.address(), lpsize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBoundsRect$MH() {
        return cfapi_h$constants$31.GetBoundsRect$MH();
    }
    public static @C("UINT") int GetBoundsRect (@C("HDC") Addressable hdc, @C("LPRECT") Addressable lprect, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$31.GetBoundsRect$MH().invokeExact(hdc.address(), lprect.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBrushOrgEx$MH() {
        return cfapi_h$constants$31.GetBrushOrgEx$MH();
    }
    public static @C("BOOL") int GetBrushOrgEx (@C("HDC") Addressable hdc, @C("LPPOINT") Addressable lppt) {
        try {
            return (int)cfapi_h$constants$31.GetBrushOrgEx$MH().invokeExact(hdc.address(), lppt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharWidthA$MH() {
        return cfapi_h$constants$31.GetCharWidthA$MH();
    }
    public static @C("BOOL") int GetCharWidthA (@C("HDC") Addressable hdc, @C("UINT") int iFirst, @C("UINT") int iLast, @C("LPINT") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$31.GetCharWidthA$MH().invokeExact(hdc.address(), iFirst, iLast, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharWidthW$MH() {
        return cfapi_h$constants$31.GetCharWidthW$MH();
    }
    public static @C("BOOL") int GetCharWidthW (@C("HDC") Addressable hdc, @C("UINT") int iFirst, @C("UINT") int iLast, @C("LPINT") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$31.GetCharWidthW$MH().invokeExact(hdc.address(), iFirst, iLast, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharWidth32A$MH() {
        return cfapi_h$constants$31.GetCharWidth32A$MH();
    }
    public static @C("BOOL") int GetCharWidth32A (@C("HDC") Addressable hdc, @C("UINT") int iFirst, @C("UINT") int iLast, @C("LPINT") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$31.GetCharWidth32A$MH().invokeExact(hdc.address(), iFirst, iLast, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharWidth32W$MH() {
        return cfapi_h$constants$31.GetCharWidth32W$MH();
    }
    public static @C("BOOL") int GetCharWidth32W (@C("HDC") Addressable hdc, @C("UINT") int iFirst, @C("UINT") int iLast, @C("LPINT") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$31.GetCharWidth32W$MH().invokeExact(hdc.address(), iFirst, iLast, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharWidthFloatA$MH() {
        return cfapi_h$constants$32.GetCharWidthFloatA$MH();
    }
    public static @C("BOOL") int GetCharWidthFloatA (@C("HDC") Addressable hdc, @C("UINT") int iFirst, @C("UINT") int iLast, @C("PFLOAT") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$32.GetCharWidthFloatA$MH().invokeExact(hdc.address(), iFirst, iLast, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharWidthFloatW$MH() {
        return cfapi_h$constants$32.GetCharWidthFloatW$MH();
    }
    public static @C("BOOL") int GetCharWidthFloatW (@C("HDC") Addressable hdc, @C("UINT") int iFirst, @C("UINT") int iLast, @C("PFLOAT") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$32.GetCharWidthFloatW$MH().invokeExact(hdc.address(), iFirst, iLast, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharABCWidthsA$MH() {
        return cfapi_h$constants$32.GetCharABCWidthsA$MH();
    }
    public static @C("BOOL") int GetCharABCWidthsA (@C("HDC") Addressable hdc, @C("UINT") int wFirst, @C("UINT") int wLast, @C("LPABC") Addressable lpABC) {
        try {
            return (int)cfapi_h$constants$32.GetCharABCWidthsA$MH().invokeExact(hdc.address(), wFirst, wLast, lpABC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharABCWidthsW$MH() {
        return cfapi_h$constants$32.GetCharABCWidthsW$MH();
    }
    public static @C("BOOL") int GetCharABCWidthsW (@C("HDC") Addressable hdc, @C("UINT") int wFirst, @C("UINT") int wLast, @C("LPABC") Addressable lpABC) {
        try {
            return (int)cfapi_h$constants$32.GetCharABCWidthsW$MH().invokeExact(hdc.address(), wFirst, wLast, lpABC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharABCWidthsFloatA$MH() {
        return cfapi_h$constants$32.GetCharABCWidthsFloatA$MH();
    }
    public static @C("BOOL") int GetCharABCWidthsFloatA (@C("HDC") Addressable hdc, @C("UINT") int iFirst, @C("UINT") int iLast, @C("LPABCFLOAT") Addressable lpABC) {
        try {
            return (int)cfapi_h$constants$32.GetCharABCWidthsFloatA$MH().invokeExact(hdc.address(), iFirst, iLast, lpABC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharABCWidthsFloatW$MH() {
        return cfapi_h$constants$32.GetCharABCWidthsFloatW$MH();
    }
    public static @C("BOOL") int GetCharABCWidthsFloatW (@C("HDC") Addressable hdc, @C("UINT") int iFirst, @C("UINT") int iLast, @C("LPABCFLOAT") Addressable lpABC) {
        try {
            return (int)cfapi_h$constants$32.GetCharABCWidthsFloatW$MH().invokeExact(hdc.address(), iFirst, iLast, lpABC.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClipBox$MH() {
        return cfapi_h$constants$32.GetClipBox$MH();
    }
    public static @C("int") int GetClipBox (@C("HDC") Addressable hdc, @C("LPRECT") Addressable lprect) {
        try {
            return (int)cfapi_h$constants$32.GetClipBox$MH().invokeExact(hdc.address(), lprect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClipRgn$MH() {
        return cfapi_h$constants$32.GetClipRgn$MH();
    }
    public static @C("int") int GetClipRgn (@C("HDC") Addressable hdc, @C("HRGN") Addressable hrgn) {
        try {
            return (int)cfapi_h$constants$32.GetClipRgn$MH().invokeExact(hdc.address(), hrgn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMetaRgn$MH() {
        return cfapi_h$constants$32.GetMetaRgn$MH();
    }
    public static @C("int") int GetMetaRgn (@C("HDC") Addressable hdc, @C("HRGN") Addressable hrgn) {
        try {
            return (int)cfapi_h$constants$32.GetMetaRgn$MH().invokeExact(hdc.address(), hrgn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentObject$MH() {
        return cfapi_h$constants$32.GetCurrentObject$MH();
    }
    public static @C("HGDIOBJ") MemoryAddress GetCurrentObject (@C("HDC") Addressable hdc, @C("UINT") int type) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.GetCurrentObject$MH().invokeExact(hdc.address(), type);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentPositionEx$MH() {
        return cfapi_h$constants$32.GetCurrentPositionEx$MH();
    }
    public static @C("BOOL") int GetCurrentPositionEx (@C("HDC") Addressable hdc, @C("LPPOINT") Addressable lppt) {
        try {
            return (int)cfapi_h$constants$32.GetCurrentPositionEx$MH().invokeExact(hdc.address(), lppt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDeviceCaps$MH() {
        return cfapi_h$constants$32.GetDeviceCaps$MH();
    }
    public static @C("int") int GetDeviceCaps (@C("HDC") Addressable hdc, @C("int") int index) {
        try {
            return (int)cfapi_h$constants$32.GetDeviceCaps$MH().invokeExact(hdc.address(), index);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDIBits$MH() {
        return cfapi_h$constants$32.GetDIBits$MH();
    }
    public static @C("int") int GetDIBits (@C("HDC") Addressable hdc, @C("HBITMAP") Addressable hbm, @C("UINT") int start, @C("UINT") int cLines, @C("LPVOID") Addressable lpvBits, @C("LPBITMAPINFO") Addressable lpbmi, @C("UINT") int usage) {
        try {
            return (int)cfapi_h$constants$32.GetDIBits$MH().invokeExact(hdc.address(), hbm.address(), start, cLines, lpvBits.address(), lpbmi.address(), usage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFontData$MH() {
        return cfapi_h$constants$32.GetFontData$MH();
    }
    public static @C("DWORD") int GetFontData (@C("HDC") Addressable hdc, @C("DWORD") int dwTable, @C("DWORD") int dwOffset, @C("PVOID") Addressable pvBuffer, @C("DWORD") int cjBuffer) {
        try {
            return (int)cfapi_h$constants$32.GetFontData$MH().invokeExact(hdc.address(), dwTable, dwOffset, pvBuffer.address(), cjBuffer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGlyphOutlineA$MH() {
        return cfapi_h$constants$32.GetGlyphOutlineA$MH();
    }
    public static @C("DWORD") int GetGlyphOutlineA (@C("HDC") Addressable hdc, @C("UINT") int uChar, @C("UINT") int fuFormat, @C("LPGLYPHMETRICS") Addressable lpgm, @C("DWORD") int cjBuffer, @C("LPVOID") Addressable pvBuffer, @C("const MAT2*") Addressable lpmat2) {
        try {
            return (int)cfapi_h$constants$32.GetGlyphOutlineA$MH().invokeExact(hdc.address(), uChar, fuFormat, lpgm.address(), cjBuffer, pvBuffer.address(), lpmat2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGlyphOutlineW$MH() {
        return cfapi_h$constants$32.GetGlyphOutlineW$MH();
    }
    public static @C("DWORD") int GetGlyphOutlineW (@C("HDC") Addressable hdc, @C("UINT") int uChar, @C("UINT") int fuFormat, @C("LPGLYPHMETRICS") Addressable lpgm, @C("DWORD") int cjBuffer, @C("LPVOID") Addressable pvBuffer, @C("const MAT2*") Addressable lpmat2) {
        try {
            return (int)cfapi_h$constants$32.GetGlyphOutlineW$MH().invokeExact(hdc.address(), uChar, fuFormat, lpgm.address(), cjBuffer, pvBuffer.address(), lpmat2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGraphicsMode$MH() {
        return cfapi_h$constants$32.GetGraphicsMode$MH();
    }
    public static @C("int") int GetGraphicsMode (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetGraphicsMode$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMapMode$MH() {
        return cfapi_h$constants$32.GetMapMode$MH();
    }
    public static @C("int") int GetMapMode (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetMapMode$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMetaFileBitsEx$MH() {
        return cfapi_h$constants$32.GetMetaFileBitsEx$MH();
    }
    public static @C("UINT") int GetMetaFileBitsEx (@C("HMETAFILE") Addressable hMF, @C("UINT") int cbBuffer, @C("LPVOID") Addressable lpData) {
        try {
            return (int)cfapi_h$constants$32.GetMetaFileBitsEx$MH().invokeExact(hMF.address(), cbBuffer, lpData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMetaFileA$MH() {
        return cfapi_h$constants$32.GetMetaFileA$MH();
    }
    public static @C("HMETAFILE") MemoryAddress GetMetaFileA (@C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.GetMetaFileA$MH().invokeExact(lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMetaFileW$MH() {
        return cfapi_h$constants$32.GetMetaFileW$MH();
    }
    public static @C("HMETAFILE") MemoryAddress GetMetaFileW (@C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.GetMetaFileW$MH().invokeExact(lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNearestColor$MH() {
        return cfapi_h$constants$32.GetNearestColor$MH();
    }
    public static @C("COLORREF") int GetNearestColor (@C("HDC") Addressable hdc, @C("COLORREF") int color) {
        try {
            return (int)cfapi_h$constants$32.GetNearestColor$MH().invokeExact(hdc.address(), color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNearestPaletteIndex$MH() {
        return cfapi_h$constants$32.GetNearestPaletteIndex$MH();
    }
    public static @C("UINT") int GetNearestPaletteIndex (@C("HPALETTE") Addressable h, @C("COLORREF") int color) {
        try {
            return (int)cfapi_h$constants$32.GetNearestPaletteIndex$MH().invokeExact(h.address(), color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetObjectType$MH() {
        return cfapi_h$constants$32.GetObjectType$MH();
    }
    public static @C("DWORD") int GetObjectType (@C("HGDIOBJ") Addressable h) {
        try {
            return (int)cfapi_h$constants$32.GetObjectType$MH().invokeExact(h.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOutlineTextMetricsA$MH() {
        return cfapi_h$constants$32.GetOutlineTextMetricsA$MH();
    }
    public static @C("UINT") int GetOutlineTextMetricsA (@C("HDC") Addressable hdc, @C("UINT") int cjCopy, @C("LPOUTLINETEXTMETRICA") Addressable potm) {
        try {
            return (int)cfapi_h$constants$32.GetOutlineTextMetricsA$MH().invokeExact(hdc.address(), cjCopy, potm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOutlineTextMetricsW$MH() {
        return cfapi_h$constants$32.GetOutlineTextMetricsW$MH();
    }
    public static @C("UINT") int GetOutlineTextMetricsW (@C("HDC") Addressable hdc, @C("UINT") int cjCopy, @C("LPOUTLINETEXTMETRICW") Addressable potm) {
        try {
            return (int)cfapi_h$constants$32.GetOutlineTextMetricsW$MH().invokeExact(hdc.address(), cjCopy, potm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPaletteEntries$MH() {
        return cfapi_h$constants$32.GetPaletteEntries$MH();
    }
    public static @C("UINT") int GetPaletteEntries (@C("HPALETTE") Addressable hpal, @C("UINT") int iStart, @C("UINT") int cEntries, @C("LPPALETTEENTRY") Addressable pPalEntries) {
        try {
            return (int)cfapi_h$constants$32.GetPaletteEntries$MH().invokeExact(hpal.address(), iStart, cEntries, pPalEntries.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPixel$MH() {
        return cfapi_h$constants$32.GetPixel$MH();
    }
    public static @C("COLORREF") int GetPixel (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y) {
        try {
            return (int)cfapi_h$constants$32.GetPixel$MH().invokeExact(hdc.address(), x, y);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPixelFormat$MH() {
        return cfapi_h$constants$32.GetPixelFormat$MH();
    }
    public static @C("int") int GetPixelFormat (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetPixelFormat$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPolyFillMode$MH() {
        return cfapi_h$constants$32.GetPolyFillMode$MH();
    }
    public static @C("int") int GetPolyFillMode (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetPolyFillMode$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRasterizerCaps$MH() {
        return cfapi_h$constants$32.GetRasterizerCaps$MH();
    }
    public static @C("BOOL") int GetRasterizerCaps (@C("LPRASTERIZER_STATUS") Addressable lpraststat, @C("UINT") int cjBytes) {
        try {
            return (int)cfapi_h$constants$32.GetRasterizerCaps$MH().invokeExact(lpraststat.address(), cjBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRandomRgn$MH() {
        return cfapi_h$constants$32.GetRandomRgn$MH();
    }
    public static @C("int") int GetRandomRgn (@C("HDC") Addressable hdc, @C("HRGN") Addressable hrgn, @C("INT") int i) {
        try {
            return (int)cfapi_h$constants$32.GetRandomRgn$MH().invokeExact(hdc.address(), hrgn.address(), i);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRegionData$MH() {
        return cfapi_h$constants$32.GetRegionData$MH();
    }
    public static @C("DWORD") int GetRegionData (@C("HRGN") Addressable hrgn, @C("DWORD") int nCount, @C("LPRGNDATA") Addressable lpRgnData) {
        try {
            return (int)cfapi_h$constants$32.GetRegionData$MH().invokeExact(hrgn.address(), nCount, lpRgnData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetRgnBox$MH() {
        return cfapi_h$constants$32.GetRgnBox$MH();
    }
    public static @C("int") int GetRgnBox (@C("HRGN") Addressable hrgn, @C("LPRECT") Addressable lprc) {
        try {
            return (int)cfapi_h$constants$32.GetRgnBox$MH().invokeExact(hrgn.address(), lprc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetStockObject$MH() {
        return cfapi_h$constants$32.GetStockObject$MH();
    }
    public static @C("HGDIOBJ") MemoryAddress GetStockObject (@C("int") int i) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.GetStockObject$MH().invokeExact(i);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetStretchBltMode$MH() {
        return cfapi_h$constants$32.GetStretchBltMode$MH();
    }
    public static @C("int") int GetStretchBltMode (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetStretchBltMode$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemPaletteEntries$MH() {
        return cfapi_h$constants$32.GetSystemPaletteEntries$MH();
    }
    public static @C("UINT") int GetSystemPaletteEntries (@C("HDC") Addressable hdc, @C("UINT") int iStart, @C("UINT") int cEntries, @C("LPPALETTEENTRY") Addressable pPalEntries) {
        try {
            return (int)cfapi_h$constants$32.GetSystemPaletteEntries$MH().invokeExact(hdc.address(), iStart, cEntries, pPalEntries.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemPaletteUse$MH() {
        return cfapi_h$constants$32.GetSystemPaletteUse$MH();
    }
    public static @C("UINT") int GetSystemPaletteUse (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetSystemPaletteUse$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextCharacterExtra$MH() {
        return cfapi_h$constants$32.GetTextCharacterExtra$MH();
    }
    public static @C("int") int GetTextCharacterExtra (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetTextCharacterExtra$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextAlign$MH() {
        return cfapi_h$constants$32.GetTextAlign$MH();
    }
    public static @C("UINT") int GetTextAlign (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetTextAlign$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextColor$MH() {
        return cfapi_h$constants$32.GetTextColor$MH();
    }
    public static @C("COLORREF") int GetTextColor (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetTextColor$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextExtentPointA$MH() {
        return cfapi_h$constants$32.GetTextExtentPointA$MH();
    }
    public static @C("BOOL") int GetTextExtentPointA (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpString, @C("int") int c, @C("LPSIZE") Addressable lpsz) {
        try {
            return (int)cfapi_h$constants$32.GetTextExtentPointA$MH().invokeExact(hdc.address(), lpString.address(), c, lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextExtentPointW$MH() {
        return cfapi_h$constants$32.GetTextExtentPointW$MH();
    }
    public static @C("BOOL") int GetTextExtentPointW (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpString, @C("int") int c, @C("LPSIZE") Addressable lpsz) {
        try {
            return (int)cfapi_h$constants$32.GetTextExtentPointW$MH().invokeExact(hdc.address(), lpString.address(), c, lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextExtentPoint32A$MH() {
        return cfapi_h$constants$32.GetTextExtentPoint32A$MH();
    }
    public static @C("BOOL") int GetTextExtentPoint32A (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpString, @C("int") int c, @C("LPSIZE") Addressable psizl) {
        try {
            return (int)cfapi_h$constants$32.GetTextExtentPoint32A$MH().invokeExact(hdc.address(), lpString.address(), c, psizl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextExtentPoint32W$MH() {
        return cfapi_h$constants$32.GetTextExtentPoint32W$MH();
    }
    public static @C("BOOL") int GetTextExtentPoint32W (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpString, @C("int") int c, @C("LPSIZE") Addressable psizl) {
        try {
            return (int)cfapi_h$constants$32.GetTextExtentPoint32W$MH().invokeExact(hdc.address(), lpString.address(), c, psizl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextExtentExPointA$MH() {
        return cfapi_h$constants$32.GetTextExtentExPointA$MH();
    }
    public static @C("BOOL") int GetTextExtentExPointA (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpszString, @C("int") int cchString, @C("int") int nMaxExtent, @C("LPINT") Addressable lpnFit, @C("LPINT") Addressable lpnDx, @C("LPSIZE") Addressable lpSize) {
        try {
            return (int)cfapi_h$constants$32.GetTextExtentExPointA$MH().invokeExact(hdc.address(), lpszString.address(), cchString, nMaxExtent, lpnFit.address(), lpnDx.address(), lpSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextExtentExPointW$MH() {
        return cfapi_h$constants$32.GetTextExtentExPointW$MH();
    }
    public static @C("BOOL") int GetTextExtentExPointW (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpszString, @C("int") int cchString, @C("int") int nMaxExtent, @C("LPINT") Addressable lpnFit, @C("LPINT") Addressable lpnDx, @C("LPSIZE") Addressable lpSize) {
        try {
            return (int)cfapi_h$constants$32.GetTextExtentExPointW$MH().invokeExact(hdc.address(), lpszString.address(), cchString, nMaxExtent, lpnFit.address(), lpnDx.address(), lpSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextCharset$MH() {
        return cfapi_h$constants$32.GetTextCharset$MH();
    }
    public static @C("int") int GetTextCharset (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetTextCharset$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextCharsetInfo$MH() {
        return cfapi_h$constants$32.GetTextCharsetInfo$MH();
    }
    public static @C("int") int GetTextCharsetInfo (@C("HDC") Addressable hdc, @C("LPFONTSIGNATURE") Addressable lpSig, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$32.GetTextCharsetInfo$MH().invokeExact(hdc.address(), lpSig.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TranslateCharsetInfo$MH() {
        return cfapi_h$constants$32.TranslateCharsetInfo$MH();
    }
    public static @C("BOOL") int TranslateCharsetInfo (@C("DWORD*") Addressable lpSrc, @C("LPCHARSETINFO") Addressable lpCs, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$32.TranslateCharsetInfo$MH().invokeExact(lpSrc.address(), lpCs.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFontLanguageInfo$MH() {
        return cfapi_h$constants$32.GetFontLanguageInfo$MH();
    }
    public static @C("DWORD") int GetFontLanguageInfo (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetFontLanguageInfo$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharacterPlacementA$MH() {
        return cfapi_h$constants$32.GetCharacterPlacementA$MH();
    }
    public static @C("DWORD") int GetCharacterPlacementA (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpString, @C("int") int nCount, @C("int") int nMexExtent, @C("LPGCP_RESULTSA") Addressable lpResults, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$32.GetCharacterPlacementA$MH().invokeExact(hdc.address(), lpString.address(), nCount, nMexExtent, lpResults.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharacterPlacementW$MH() {
        return cfapi_h$constants$32.GetCharacterPlacementW$MH();
    }
    public static @C("DWORD") int GetCharacterPlacementW (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpString, @C("int") int nCount, @C("int") int nMexExtent, @C("LPGCP_RESULTSW") Addressable lpResults, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$32.GetCharacterPlacementW$MH().invokeExact(hdc.address(), lpString.address(), nCount, nMexExtent, lpResults.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFontUnicodeRanges$MH() {
        return cfapi_h$constants$32.GetFontUnicodeRanges$MH();
    }
    public static @C("DWORD") int GetFontUnicodeRanges (@C("HDC") Addressable hdc, @C("LPGLYPHSET") Addressable lpgs) {
        try {
            return (int)cfapi_h$constants$32.GetFontUnicodeRanges$MH().invokeExact(hdc.address(), lpgs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGlyphIndicesA$MH() {
        return cfapi_h$constants$32.GetGlyphIndicesA$MH();
    }
    public static @C("DWORD") int GetGlyphIndicesA (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpstr, @C("int") int c, @C("LPWORD") Addressable pgi, @C("DWORD") int fl) {
        try {
            return (int)cfapi_h$constants$32.GetGlyphIndicesA$MH().invokeExact(hdc.address(), lpstr.address(), c, pgi.address(), fl);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetGlyphIndicesW$MH() {
        return cfapi_h$constants$32.GetGlyphIndicesW$MH();
    }
    public static @C("DWORD") int GetGlyphIndicesW (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpstr, @C("int") int c, @C("LPWORD") Addressable pgi, @C("DWORD") int fl) {
        try {
            return (int)cfapi_h$constants$32.GetGlyphIndicesW$MH().invokeExact(hdc.address(), lpstr.address(), c, pgi.address(), fl);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextExtentPointI$MH() {
        return cfapi_h$constants$32.GetTextExtentPointI$MH();
    }
    public static @C("BOOL") int GetTextExtentPointI (@C("HDC") Addressable hdc, @C("LPWORD") Addressable pgiIn, @C("int") int cgi, @C("LPSIZE") Addressable psize) {
        try {
            return (int)cfapi_h$constants$32.GetTextExtentPointI$MH().invokeExact(hdc.address(), pgiIn.address(), cgi, psize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextExtentExPointI$MH() {
        return cfapi_h$constants$32.GetTextExtentExPointI$MH();
    }
    public static @C("BOOL") int GetTextExtentExPointI (@C("HDC") Addressable hdc, @C("LPWORD") Addressable lpwszString, @C("int") int cwchString, @C("int") int nMaxExtent, @C("LPINT") Addressable lpnFit, @C("LPINT") Addressable lpnDx, @C("LPSIZE") Addressable lpSize) {
        try {
            return (int)cfapi_h$constants$32.GetTextExtentExPointI$MH().invokeExact(hdc.address(), lpwszString.address(), cwchString, nMaxExtent, lpnFit.address(), lpnDx.address(), lpSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharWidthI$MH() {
        return cfapi_h$constants$32.GetCharWidthI$MH();
    }
    public static @C("BOOL") int GetCharWidthI (@C("HDC") Addressable hdc, @C("UINT") int giFirst, @C("UINT") int cgi, @C("LPWORD") Addressable pgi, @C("LPINT") Addressable piWidths) {
        try {
            return (int)cfapi_h$constants$32.GetCharWidthI$MH().invokeExact(hdc.address(), giFirst, cgi, pgi.address(), piWidths.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCharABCWidthsI$MH() {
        return cfapi_h$constants$32.GetCharABCWidthsI$MH();
    }
    public static @C("BOOL") int GetCharABCWidthsI (@C("HDC") Addressable hdc, @C("UINT") int giFirst, @C("UINT") int cgi, @C("LPWORD") Addressable pgi, @C("LPABC") Addressable pabc) {
        try {
            return (int)cfapi_h$constants$32.GetCharABCWidthsI$MH().invokeExact(hdc.address(), giFirst, cgi, pgi.address(), pabc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddFontResourceExA$MH() {
        return cfapi_h$constants$32.AddFontResourceExA$MH();
    }
    public static @C("int") int AddFontResourceExA (@C("LPCSTR") Addressable name, @C("DWORD") int fl, @C("PVOID") Addressable res) {
        try {
            return (int)cfapi_h$constants$32.AddFontResourceExA$MH().invokeExact(name.address(), fl, res.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddFontResourceExW$MH() {
        return cfapi_h$constants$32.AddFontResourceExW$MH();
    }
    public static @C("int") int AddFontResourceExW (@C("LPCWSTR") Addressable name, @C("DWORD") int fl, @C("PVOID") Addressable res) {
        try {
            return (int)cfapi_h$constants$32.AddFontResourceExW$MH().invokeExact(name.address(), fl, res.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveFontResourceExA$MH() {
        return cfapi_h$constants$32.RemoveFontResourceExA$MH();
    }
    public static @C("BOOL") int RemoveFontResourceExA (@C("LPCSTR") Addressable name, @C("DWORD") int fl, @C("PVOID") Addressable pdv) {
        try {
            return (int)cfapi_h$constants$32.RemoveFontResourceExA$MH().invokeExact(name.address(), fl, pdv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveFontResourceExW$MH() {
        return cfapi_h$constants$32.RemoveFontResourceExW$MH();
    }
    public static @C("BOOL") int RemoveFontResourceExW (@C("LPCWSTR") Addressable name, @C("DWORD") int fl, @C("PVOID") Addressable pdv) {
        try {
            return (int)cfapi_h$constants$32.RemoveFontResourceExW$MH().invokeExact(name.address(), fl, pdv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddFontMemResourceEx$MH() {
        return cfapi_h$constants$32.AddFontMemResourceEx$MH();
    }
    public static @C("HANDLE") MemoryAddress AddFontMemResourceEx (@C("PVOID") Addressable pFileView, @C("DWORD") int cjSize, @C("PVOID") Addressable pvResrved, @C("DWORD*") Addressable pNumFonts) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.AddFontMemResourceEx$MH().invokeExact(pFileView.address(), cjSize, pvResrved.address(), pNumFonts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveFontMemResourceEx$MH() {
        return cfapi_h$constants$32.RemoveFontMemResourceEx$MH();
    }
    public static @C("BOOL") int RemoveFontMemResourceEx (@C("HANDLE") Addressable h) {
        try {
            return (int)cfapi_h$constants$32.RemoveFontMemResourceEx$MH().invokeExact(h.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFontIndirectExA$MH() {
        return cfapi_h$constants$32.CreateFontIndirectExA$MH();
    }
    public static @C("HFONT") MemoryAddress CreateFontIndirectExA (@C("const ENUMLOGFONTEXDVA*") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CreateFontIndirectExA$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFontIndirectExW$MH() {
        return cfapi_h$constants$32.CreateFontIndirectExW$MH();
    }
    public static @C("HFONT") MemoryAddress CreateFontIndirectExW (@C("const ENUMLOGFONTEXDVW*") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CreateFontIndirectExW$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetViewportExtEx$MH() {
        return cfapi_h$constants$32.GetViewportExtEx$MH();
    }
    public static @C("BOOL") int GetViewportExtEx (@C("HDC") Addressable hdc, @C("LPSIZE") Addressable lpsize) {
        try {
            return (int)cfapi_h$constants$32.GetViewportExtEx$MH().invokeExact(hdc.address(), lpsize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetViewportOrgEx$MH() {
        return cfapi_h$constants$32.GetViewportOrgEx$MH();
    }
    public static @C("BOOL") int GetViewportOrgEx (@C("HDC") Addressable hdc, @C("LPPOINT") Addressable lppoint) {
        try {
            return (int)cfapi_h$constants$32.GetViewportOrgEx$MH().invokeExact(hdc.address(), lppoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowExtEx$MH() {
        return cfapi_h$constants$32.GetWindowExtEx$MH();
    }
    public static @C("BOOL") int GetWindowExtEx (@C("HDC") Addressable hdc, @C("LPSIZE") Addressable lpsize) {
        try {
            return (int)cfapi_h$constants$32.GetWindowExtEx$MH().invokeExact(hdc.address(), lpsize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowOrgEx$MH() {
        return cfapi_h$constants$32.GetWindowOrgEx$MH();
    }
    public static @C("BOOL") int GetWindowOrgEx (@C("HDC") Addressable hdc, @C("LPPOINT") Addressable lppoint) {
        try {
            return (int)cfapi_h$constants$32.GetWindowOrgEx$MH().invokeExact(hdc.address(), lppoint.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IntersectClipRect$MH() {
        return cfapi_h$constants$32.IntersectClipRect$MH();
    }
    public static @C("int") int IntersectClipRect (@C("HDC") Addressable hdc, @C("int") int left, @C("int") int top, @C("int") int right, @C("int") int bottom) {
        try {
            return (int)cfapi_h$constants$32.IntersectClipRect$MH().invokeExact(hdc.address(), left, top, right, bottom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InvertRgn$MH() {
        return cfapi_h$constants$32.InvertRgn$MH();
    }
    public static @C("BOOL") int InvertRgn (@C("HDC") Addressable hdc, @C("HRGN") Addressable hrgn) {
        try {
            return (int)cfapi_h$constants$32.InvertRgn$MH().invokeExact(hdc.address(), hrgn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LineDDA$MH() {
        return cfapi_h$constants$32.LineDDA$MH();
    }
    public static @C("BOOL") int LineDDA (@C("int") int xStart, @C("int") int yStart, @C("int") int xEnd, @C("int") int yEnd, @C("LINEDDAPROC") Addressable lpProc, @C("LPARAM") long data) {
        try {
            return (int)cfapi_h$constants$32.LineDDA$MH().invokeExact(xStart, yStart, xEnd, yEnd, lpProc.address(), data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LineTo$MH() {
        return cfapi_h$constants$32.LineTo$MH();
    }
    public static @C("BOOL") int LineTo (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y) {
        try {
            return (int)cfapi_h$constants$32.LineTo$MH().invokeExact(hdc.address(), x, y);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MaskBlt$MH() {
        return cfapi_h$constants$32.MaskBlt$MH();
    }
    public static @C("BOOL") int MaskBlt (@C("HDC") Addressable hdcDest, @C("int") int xDest, @C("int") int yDest, @C("int") int width, @C("int") int height, @C("HDC") Addressable hdcSrc, @C("int") int xSrc, @C("int") int ySrc, @C("HBITMAP") Addressable hbmMask, @C("int") int xMask, @C("int") int yMask, @C("DWORD") int rop) {
        try {
            return (int)cfapi_h$constants$32.MaskBlt$MH().invokeExact(hdcDest.address(), xDest, yDest, width, height, hdcSrc.address(), xSrc, ySrc, hbmMask.address(), xMask, yMask, rop);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PlgBlt$MH() {
        return cfapi_h$constants$32.PlgBlt$MH();
    }
    public static @C("BOOL") int PlgBlt (@C("HDC") Addressable hdcDest, @C("const POINT*") Addressable lpPoint, @C("HDC") Addressable hdcSrc, @C("int") int xSrc, @C("int") int ySrc, @C("int") int width, @C("int") int height, @C("HBITMAP") Addressable hbmMask, @C("int") int xMask, @C("int") int yMask) {
        try {
            return (int)cfapi_h$constants$32.PlgBlt$MH().invokeExact(hdcDest.address(), lpPoint.address(), hdcSrc.address(), xSrc, ySrc, width, height, hbmMask.address(), xMask, yMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OffsetClipRgn$MH() {
        return cfapi_h$constants$32.OffsetClipRgn$MH();
    }
    public static @C("int") int OffsetClipRgn (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y) {
        try {
            return (int)cfapi_h$constants$32.OffsetClipRgn$MH().invokeExact(hdc.address(), x, y);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OffsetRgn$MH() {
        return cfapi_h$constants$32.OffsetRgn$MH();
    }
    public static @C("int") int OffsetRgn (@C("HRGN") Addressable hrgn, @C("int") int x, @C("int") int y) {
        try {
            return (int)cfapi_h$constants$32.OffsetRgn$MH().invokeExact(hrgn.address(), x, y);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PatBlt$MH() {
        return cfapi_h$constants$32.PatBlt$MH();
    }
    public static @C("BOOL") int PatBlt (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("int") int w, @C("int") int h, @C("DWORD") int rop) {
        try {
            return (int)cfapi_h$constants$32.PatBlt$MH().invokeExact(hdc.address(), x, y, w, h, rop);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Pie$MH() {
        return cfapi_h$constants$32.Pie$MH();
    }
    public static @C("BOOL") int Pie (@C("HDC") Addressable hdc, @C("int") int left, @C("int") int top, @C("int") int right, @C("int") int bottom, @C("int") int xr1, @C("int") int yr1, @C("int") int xr2, @C("int") int yr2) {
        try {
            return (int)cfapi_h$constants$32.Pie$MH().invokeExact(hdc.address(), left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PlayMetaFile$MH() {
        return cfapi_h$constants$32.PlayMetaFile$MH();
    }
    public static @C("BOOL") int PlayMetaFile (@C("HDC") Addressable hdc, @C("HMETAFILE") Addressable hmf) {
        try {
            return (int)cfapi_h$constants$32.PlayMetaFile$MH().invokeExact(hdc.address(), hmf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PaintRgn$MH() {
        return cfapi_h$constants$32.PaintRgn$MH();
    }
    public static @C("BOOL") int PaintRgn (@C("HDC") Addressable hdc, @C("HRGN") Addressable hrgn) {
        try {
            return (int)cfapi_h$constants$32.PaintRgn$MH().invokeExact(hdc.address(), hrgn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PolyPolygon$MH() {
        return cfapi_h$constants$32.PolyPolygon$MH();
    }
    public static @C("BOOL") int PolyPolygon (@C("HDC") Addressable hdc, @C("const POINT*") Addressable apt, @C("const INT*") Addressable asz, @C("int") int csz) {
        try {
            return (int)cfapi_h$constants$32.PolyPolygon$MH().invokeExact(hdc.address(), apt.address(), asz.address(), csz);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtInRegion$MH() {
        return cfapi_h$constants$32.PtInRegion$MH();
    }
    public static @C("BOOL") int PtInRegion (@C("HRGN") Addressable hrgn, @C("int") int x, @C("int") int y) {
        try {
            return (int)cfapi_h$constants$32.PtInRegion$MH().invokeExact(hrgn.address(), x, y);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtVisible$MH() {
        return cfapi_h$constants$32.PtVisible$MH();
    }
    public static @C("BOOL") int PtVisible (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y) {
        try {
            return (int)cfapi_h$constants$32.PtVisible$MH().invokeExact(hdc.address(), x, y);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RectInRegion$MH() {
        return cfapi_h$constants$32.RectInRegion$MH();
    }
    public static @C("BOOL") int RectInRegion (@C("HRGN") Addressable hrgn, @C("const RECT*") Addressable lprect) {
        try {
            return (int)cfapi_h$constants$32.RectInRegion$MH().invokeExact(hrgn.address(), lprect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RectVisible$MH() {
        return cfapi_h$constants$32.RectVisible$MH();
    }
    public static @C("BOOL") int RectVisible (@C("HDC") Addressable hdc, @C("const RECT*") Addressable lprect) {
        try {
            return (int)cfapi_h$constants$32.RectVisible$MH().invokeExact(hdc.address(), lprect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Rectangle$MH() {
        return cfapi_h$constants$32.Rectangle$MH();
    }
    public static @C("BOOL") int Rectangle (@C("HDC") Addressable hdc, @C("int") int left, @C("int") int top, @C("int") int right, @C("int") int bottom) {
        try {
            return (int)cfapi_h$constants$32.Rectangle$MH().invokeExact(hdc.address(), left, top, right, bottom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RestoreDC$MH() {
        return cfapi_h$constants$32.RestoreDC$MH();
    }
    public static @C("BOOL") int RestoreDC (@C("HDC") Addressable hdc, @C("int") int nSavedDC) {
        try {
            return (int)cfapi_h$constants$32.RestoreDC$MH().invokeExact(hdc.address(), nSavedDC);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ResetDCA$MH() {
        return cfapi_h$constants$32.ResetDCA$MH();
    }
    public static @C("HDC") MemoryAddress ResetDCA (@C("HDC") Addressable hdc, @C("const DEVMODEA*") Addressable lpdm) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.ResetDCA$MH().invokeExact(hdc.address(), lpdm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ResetDCW$MH() {
        return cfapi_h$constants$32.ResetDCW$MH();
    }
    public static @C("HDC") MemoryAddress ResetDCW (@C("HDC") Addressable hdc, @C("const DEVMODEW*") Addressable lpdm) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.ResetDCW$MH().invokeExact(hdc.address(), lpdm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RealizePalette$MH() {
        return cfapi_h$constants$32.RealizePalette$MH();
    }
    public static @C("UINT") int RealizePalette (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.RealizePalette$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveFontResourceA$MH() {
        return cfapi_h$constants$32.RemoveFontResourceA$MH();
    }
    public static @C("BOOL") int RemoveFontResourceA (@C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$32.RemoveFontResourceA$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveFontResourceW$MH() {
        return cfapi_h$constants$32.RemoveFontResourceW$MH();
    }
    public static @C("BOOL") int RemoveFontResourceW (@C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$32.RemoveFontResourceW$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RoundRect$MH() {
        return cfapi_h$constants$32.RoundRect$MH();
    }
    public static @C("BOOL") int RoundRect (@C("HDC") Addressable hdc, @C("int") int left, @C("int") int top, @C("int") int right, @C("int") int bottom, @C("int") int width, @C("int") int height) {
        try {
            return (int)cfapi_h$constants$32.RoundRect$MH().invokeExact(hdc.address(), left, top, right, bottom, width, height);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ResizePalette$MH() {
        return cfapi_h$constants$32.ResizePalette$MH();
    }
    public static @C("BOOL") int ResizePalette (@C("HPALETTE") Addressable hpal, @C("UINT") int n) {
        try {
            return (int)cfapi_h$constants$32.ResizePalette$MH().invokeExact(hpal.address(), n);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SaveDC$MH() {
        return cfapi_h$constants$32.SaveDC$MH();
    }
    public static @C("int") int SaveDC (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.SaveDC$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SelectClipRgn$MH() {
        return cfapi_h$constants$32.SelectClipRgn$MH();
    }
    public static @C("int") int SelectClipRgn (@C("HDC") Addressable hdc, @C("HRGN") Addressable hrgn) {
        try {
            return (int)cfapi_h$constants$32.SelectClipRgn$MH().invokeExact(hdc.address(), hrgn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExtSelectClipRgn$MH() {
        return cfapi_h$constants$32.ExtSelectClipRgn$MH();
    }
    public static @C("int") int ExtSelectClipRgn (@C("HDC") Addressable hdc, @C("HRGN") Addressable hrgn, @C("int") int mode) {
        try {
            return (int)cfapi_h$constants$32.ExtSelectClipRgn$MH().invokeExact(hdc.address(), hrgn.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMetaRgn$MH() {
        return cfapi_h$constants$32.SetMetaRgn$MH();
    }
    public static @C("int") int SetMetaRgn (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.SetMetaRgn$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SelectObject$MH() {
        return cfapi_h$constants$32.SelectObject$MH();
    }
    public static @C("HGDIOBJ") MemoryAddress SelectObject (@C("HDC") Addressable hdc, @C("HGDIOBJ") Addressable h) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.SelectObject$MH().invokeExact(hdc.address(), h.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SelectPalette$MH() {
        return cfapi_h$constants$32.SelectPalette$MH();
    }
    public static @C("HPALETTE") MemoryAddress SelectPalette (@C("HDC") Addressable hdc, @C("HPALETTE") Addressable hPal, @C("BOOL") int bForceBkgd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.SelectPalette$MH().invokeExact(hdc.address(), hPal.address(), bForceBkgd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetBkColor$MH() {
        return cfapi_h$constants$32.SetBkColor$MH();
    }
    public static @C("COLORREF") int SetBkColor (@C("HDC") Addressable hdc, @C("COLORREF") int color) {
        try {
            return (int)cfapi_h$constants$32.SetBkColor$MH().invokeExact(hdc.address(), color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDCBrushColor$MH() {
        return cfapi_h$constants$32.SetDCBrushColor$MH();
    }
    public static @C("COLORREF") int SetDCBrushColor (@C("HDC") Addressable hdc, @C("COLORREF") int color) {
        try {
            return (int)cfapi_h$constants$32.SetDCBrushColor$MH().invokeExact(hdc.address(), color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDCPenColor$MH() {
        return cfapi_h$constants$32.SetDCPenColor$MH();
    }
    public static @C("COLORREF") int SetDCPenColor (@C("HDC") Addressable hdc, @C("COLORREF") int color) {
        try {
            return (int)cfapi_h$constants$32.SetDCPenColor$MH().invokeExact(hdc.address(), color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetBkMode$MH() {
        return cfapi_h$constants$32.SetBkMode$MH();
    }
    public static @C("int") int SetBkMode (@C("HDC") Addressable hdc, @C("int") int mode) {
        try {
            return (int)cfapi_h$constants$32.SetBkMode$MH().invokeExact(hdc.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetBitmapBits$MH() {
        return cfapi_h$constants$32.SetBitmapBits$MH();
    }
    public static @C("LONG") int SetBitmapBits (@C("HBITMAP") Addressable hbm, @C("DWORD") int cb, @C("void*") Addressable pvBits) {
        try {
            return (int)cfapi_h$constants$32.SetBitmapBits$MH().invokeExact(hbm.address(), cb, pvBits.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetBoundsRect$MH() {
        return cfapi_h$constants$32.SetBoundsRect$MH();
    }
    public static @C("UINT") int SetBoundsRect (@C("HDC") Addressable hdc, @C("const RECT*") Addressable lprect, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$32.SetBoundsRect$MH().invokeExact(hdc.address(), lprect.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDIBits$MH() {
        return cfapi_h$constants$32.SetDIBits$MH();
    }
}


