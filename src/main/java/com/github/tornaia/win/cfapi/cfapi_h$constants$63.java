// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$63 extends cfapi_h$constants$62 {

    /* package-private */ cfapi_h$constants$63() {}
    static final MemoryLayout _PARTITION_INFORMATION_MBR$HiddenSectors$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_MBR$HiddenSectors$LAYOUT() { return _PARTITION_INFORMATION_MBR$HiddenSectors$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION_MBR$HiddenSectors$VH_ = _PARTITION_INFORMATION_MBR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HiddenSectors"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION_MBR$HiddenSectors$VH() { return _PARTITION_INFORMATION_MBR$HiddenSectors$VH_; }

    static final MemoryLayout _SET_PARTITION_INFORMATION_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("PartitionStyle"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_CHAR.withName("PartitionType")
        ).withName("Mbr"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("PartitionType"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("PartitionId"),
            C_LONGLONG.withName("Attributes"),
            MemoryLayout.ofSequence(36, C_SHORT).withName("Name")
        ).withName("Gpt")
    ).withName("_SET_PARTITION_INFORMATION_EX");
    static final jdk.incubator.foreign.MemoryLayout _SET_PARTITION_INFORMATION_EX$struct$LAYOUT() { return _SET_PARTITION_INFORMATION_EX$struct$LAYOUT_; }

    static final MemoryLayout _SET_PARTITION_INFORMATION_EX$PartitionStyle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SET_PARTITION_INFORMATION_EX$PartitionStyle$LAYOUT() { return _SET_PARTITION_INFORMATION_EX$PartitionStyle$LAYOUT_; }

    static final VarHandle _SET_PARTITION_INFORMATION_EX$PartitionStyle$VH_ = _SET_PARTITION_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionStyle"));
    static final java.lang.invoke.VarHandle _SET_PARTITION_INFORMATION_EX$PartitionStyle$VH() { return _SET_PARTITION_INFORMATION_EX$PartitionStyle$VH_; }

    static final MemoryLayout _CREATE_DISK_GPT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("DiskId"),
        C_LONG.withName("MaxPartitionCount")
    ).withName("_CREATE_DISK_GPT");
    static final jdk.incubator.foreign.MemoryLayout _CREATE_DISK_GPT$struct$LAYOUT() { return _CREATE_DISK_GPT$struct$LAYOUT_; }

    static final MemoryLayout _CREATE_DISK_GPT$MaxPartitionCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CREATE_DISK_GPT$MaxPartitionCount$LAYOUT() { return _CREATE_DISK_GPT$MaxPartitionCount$LAYOUT_; }

    static final VarHandle _CREATE_DISK_GPT$MaxPartitionCount$VH_ = _CREATE_DISK_GPT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxPartitionCount"));
    static final java.lang.invoke.VarHandle _CREATE_DISK_GPT$MaxPartitionCount$VH() { return _CREATE_DISK_GPT$MaxPartitionCount$VH_; }

    static final MemoryLayout _CREATE_DISK_MBR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Signature")
    ).withName("_CREATE_DISK_MBR");
    static final jdk.incubator.foreign.MemoryLayout _CREATE_DISK_MBR$struct$LAYOUT() { return _CREATE_DISK_MBR$struct$LAYOUT_; }

    static final MemoryLayout _CREATE_DISK_MBR$Signature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CREATE_DISK_MBR$Signature$LAYOUT() { return _CREATE_DISK_MBR$Signature$LAYOUT_; }

    static final VarHandle _CREATE_DISK_MBR$Signature$VH_ = _CREATE_DISK_MBR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    static final java.lang.invoke.VarHandle _CREATE_DISK_MBR$Signature$VH() { return _CREATE_DISK_MBR$Signature$VH_; }

    static final MemoryLayout _CREATE_DISK$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("PartitionStyle"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Signature")
        ).withName("Mbr"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("DiskId"),
            C_LONG.withName("MaxPartitionCount")
        ).withName("Gpt")
    ).withName("_CREATE_DISK");
    static final jdk.incubator.foreign.MemoryLayout _CREATE_DISK$struct$LAYOUT() { return _CREATE_DISK$struct$LAYOUT_; }

    static final MemoryLayout _CREATE_DISK$PartitionStyle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CREATE_DISK$PartitionStyle$LAYOUT() { return _CREATE_DISK$PartitionStyle$LAYOUT_; }

    static final VarHandle _CREATE_DISK$PartitionStyle$VH_ = _CREATE_DISK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionStyle"));
    static final java.lang.invoke.VarHandle _CREATE_DISK$PartitionStyle$VH() { return _CREATE_DISK$PartitionStyle$VH_; }

    static final MemoryLayout _GET_LENGTH_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Length")
    ).withName("_GET_LENGTH_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _GET_LENGTH_INFORMATION$struct$LAYOUT() { return _GET_LENGTH_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _PARTITION_INFORMATION_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("PartitionStyle"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PartitionLength"),
        C_LONG.withName("PartitionNumber"),
        C_CHAR.withName("RewritePartition"),
        C_CHAR.withName("IsServicePartition"),
        MemoryLayout.ofPaddingBits(16),
        MemoryLayout.ofStruct(
            C_CHAR.withName("PartitionType"),
            C_CHAR.withName("BootIndicator"),
            C_CHAR.withName("RecognizedPartition"),
            MemoryLayout.ofPaddingBits(8),
            C_LONG.withName("HiddenSectors"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("PartitionId")
        ).withName("Mbr"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("PartitionType"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("PartitionId"),
            C_LONGLONG.withName("Attributes"),
            MemoryLayout.ofSequence(36, C_SHORT).withName("Name")
        ).withName("Gpt")
    ).withName("_PARTITION_INFORMATION_EX");
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_EX$struct$LAYOUT() { return _PARTITION_INFORMATION_EX$struct$LAYOUT_; }

    static final MemoryLayout _PARTITION_INFORMATION_EX$PartitionStyle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_EX$PartitionStyle$LAYOUT() { return _PARTITION_INFORMATION_EX$PartitionStyle$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION_EX$PartitionStyle$VH_ = _PARTITION_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionStyle"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION_EX$PartitionStyle$VH() { return _PARTITION_INFORMATION_EX$PartitionStyle$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION_EX$PartitionNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_EX$PartitionNumber$LAYOUT() { return _PARTITION_INFORMATION_EX$PartitionNumber$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION_EX$PartitionNumber$VH_ = _PARTITION_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionNumber"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION_EX$PartitionNumber$VH() { return _PARTITION_INFORMATION_EX$PartitionNumber$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION_EX$RewritePartition$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_EX$RewritePartition$LAYOUT() { return _PARTITION_INFORMATION_EX$RewritePartition$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION_EX$RewritePartition$VH_ = _PARTITION_INFORMATION_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("RewritePartition"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION_EX$RewritePartition$VH() { return _PARTITION_INFORMATION_EX$RewritePartition$VH_; }

    static final MemoryLayout _PARTITION_INFORMATION_EX$IsServicePartition$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PARTITION_INFORMATION_EX$IsServicePartition$LAYOUT() { return _PARTITION_INFORMATION_EX$IsServicePartition$LAYOUT_; }

    static final VarHandle _PARTITION_INFORMATION_EX$IsServicePartition$VH_ = _PARTITION_INFORMATION_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsServicePartition"));
    static final java.lang.invoke.VarHandle _PARTITION_INFORMATION_EX$IsServicePartition$VH() { return _PARTITION_INFORMATION_EX$IsServicePartition$VH_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION_GPT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("DiskId"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingUsableOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("UsableLength"),
        C_LONG.withName("MaxPartitionCount"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_DRIVE_LAYOUT_INFORMATION_GPT");
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION_GPT$struct$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION_GPT$struct$LAYOUT_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION_GPT$MaxPartitionCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION_GPT$MaxPartitionCount$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION_GPT$MaxPartitionCount$LAYOUT_; }

    static final VarHandle _DRIVE_LAYOUT_INFORMATION_GPT$MaxPartitionCount$VH_ = _DRIVE_LAYOUT_INFORMATION_GPT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxPartitionCount"));
    static final java.lang.invoke.VarHandle _DRIVE_LAYOUT_INFORMATION_GPT$MaxPartitionCount$VH() { return _DRIVE_LAYOUT_INFORMATION_GPT$MaxPartitionCount$VH_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION_MBR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Signature"),
        C_LONG.withName("CheckSum")
    ).withName("_DRIVE_LAYOUT_INFORMATION_MBR");
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION_MBR$struct$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION_MBR$struct$LAYOUT_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION_MBR$Signature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION_MBR$Signature$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION_MBR$Signature$LAYOUT_; }

    static final VarHandle _DRIVE_LAYOUT_INFORMATION_MBR$Signature$VH_ = _DRIVE_LAYOUT_INFORMATION_MBR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    static final java.lang.invoke.VarHandle _DRIVE_LAYOUT_INFORMATION_MBR$Signature$VH() { return _DRIVE_LAYOUT_INFORMATION_MBR$Signature$VH_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION_MBR$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION_MBR$CheckSum$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION_MBR$CheckSum$LAYOUT_; }

    static final VarHandle _DRIVE_LAYOUT_INFORMATION_MBR$CheckSum$VH_ = _DRIVE_LAYOUT_INFORMATION_MBR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle _DRIVE_LAYOUT_INFORMATION_MBR$CheckSum$VH() { return _DRIVE_LAYOUT_INFORMATION_MBR$CheckSum$VH_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PartitionStyle"),
        C_LONG.withName("PartitionCount"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Signature"),
            C_LONG.withName("CheckSum")
        ).withName("Mbr"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("DiskId"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("StartingUsableOffset"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("UsableLength"),
            C_LONG.withName("MaxPartitionCount"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Gpt"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_INT.withName("PartitionStyle"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("StartingOffset"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("PartitionLength"),
            C_LONG.withName("PartitionNumber"),
            C_CHAR.withName("RewritePartition"),
            C_CHAR.withName("IsServicePartition"),
            MemoryLayout.ofPaddingBits(16),
            MemoryLayout.ofStruct(
                C_CHAR.withName("PartitionType"),
                C_CHAR.withName("BootIndicator"),
                C_CHAR.withName("RecognizedPartition"),
                MemoryLayout.ofPaddingBits(8),
                C_LONG.withName("HiddenSectors"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
                ).withName("PartitionId")
            ).withName("Mbr"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofStruct(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
                ).withName("PartitionType"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
                ).withName("PartitionId"),
                C_LONGLONG.withName("Attributes"),
                MemoryLayout.ofSequence(36, C_SHORT).withName("Name")
            ).withName("Gpt")
        ).withName("_PARTITION_INFORMATION_EX")).withName("PartitionEntry")
    ).withName("_DRIVE_LAYOUT_INFORMATION_EX");
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION_EX$struct$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION_EX$struct$LAYOUT_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION_EX$PartitionStyle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION_EX$PartitionStyle$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION_EX$PartitionStyle$LAYOUT_; }

    static final VarHandle _DRIVE_LAYOUT_INFORMATION_EX$PartitionStyle$VH_ = _DRIVE_LAYOUT_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionStyle"));
    static final java.lang.invoke.VarHandle _DRIVE_LAYOUT_INFORMATION_EX$PartitionStyle$VH() { return _DRIVE_LAYOUT_INFORMATION_EX$PartitionStyle$VH_; }

    static final MemoryLayout _DRIVE_LAYOUT_INFORMATION_EX$PartitionCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DRIVE_LAYOUT_INFORMATION_EX$PartitionCount$LAYOUT() { return _DRIVE_LAYOUT_INFORMATION_EX$PartitionCount$LAYOUT_; }

    static final VarHandle _DRIVE_LAYOUT_INFORMATION_EX$PartitionCount$VH_ = _DRIVE_LAYOUT_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionCount"));
    static final java.lang.invoke.VarHandle _DRIVE_LAYOUT_INFORMATION_EX$PartitionCount$VH() { return _DRIVE_LAYOUT_INFORMATION_EX$PartitionCount$VH_; }

    static final int DetectNone() { return (int)0L; }

    static final int DetectInt13() { return (int)1L; }

    static final int DetectExInt13() { return (int)2L; }

    static final MemoryLayout _DISK_INT13_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("DriveSelect"),
        MemoryLayout.ofPaddingBits(16),
        C_LONG.withName("MaxCylinders"),
        C_SHORT.withName("SectorsPerTrack"),
        C_SHORT.withName("MaxHeads"),
        C_SHORT.withName("NumberDrives"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_DISK_INT13_INFO");
    static final jdk.incubator.foreign.MemoryLayout _DISK_INT13_INFO$struct$LAYOUT() { return _DISK_INT13_INFO$struct$LAYOUT_; }

    static final MemoryLayout _DISK_INT13_INFO$DriveSelect$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_INT13_INFO$DriveSelect$LAYOUT() { return _DISK_INT13_INFO$DriveSelect$LAYOUT_; }

    static final VarHandle _DISK_INT13_INFO$DriveSelect$VH_ = _DISK_INT13_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DriveSelect"));
    static final java.lang.invoke.VarHandle _DISK_INT13_INFO$DriveSelect$VH() { return _DISK_INT13_INFO$DriveSelect$VH_; }

    static final MemoryLayout _DISK_INT13_INFO$MaxCylinders$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_INT13_INFO$MaxCylinders$LAYOUT() { return _DISK_INT13_INFO$MaxCylinders$LAYOUT_; }

    static final VarHandle _DISK_INT13_INFO$MaxCylinders$VH_ = _DISK_INT13_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxCylinders"));
    static final java.lang.invoke.VarHandle _DISK_INT13_INFO$MaxCylinders$VH() { return _DISK_INT13_INFO$MaxCylinders$VH_; }

    static final MemoryLayout _DISK_INT13_INFO$SectorsPerTrack$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_INT13_INFO$SectorsPerTrack$LAYOUT() { return _DISK_INT13_INFO$SectorsPerTrack$LAYOUT_; }

    static final VarHandle _DISK_INT13_INFO$SectorsPerTrack$VH_ = _DISK_INT13_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SectorsPerTrack"));
    static final java.lang.invoke.VarHandle _DISK_INT13_INFO$SectorsPerTrack$VH() { return _DISK_INT13_INFO$SectorsPerTrack$VH_; }

    static final MemoryLayout _DISK_INT13_INFO$MaxHeads$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_INT13_INFO$MaxHeads$LAYOUT() { return _DISK_INT13_INFO$MaxHeads$LAYOUT_; }

    static final VarHandle _DISK_INT13_INFO$MaxHeads$VH_ = _DISK_INT13_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxHeads"));
    static final java.lang.invoke.VarHandle _DISK_INT13_INFO$MaxHeads$VH() { return _DISK_INT13_INFO$MaxHeads$VH_; }

    static final MemoryLayout _DISK_INT13_INFO$NumberDrives$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_INT13_INFO$NumberDrives$LAYOUT() { return _DISK_INT13_INFO$NumberDrives$LAYOUT_; }

    static final VarHandle _DISK_INT13_INFO$NumberDrives$VH_ = _DISK_INT13_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberDrives"));
    static final java.lang.invoke.VarHandle _DISK_INT13_INFO$NumberDrives$VH() { return _DISK_INT13_INFO$NumberDrives$VH_; }

    static final MemoryLayout _DISK_EX_INT13_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("ExBufferSize"),
        C_SHORT.withName("ExFlags"),
        C_LONG.withName("ExCylinders"),
        C_LONG.withName("ExHeads"),
        C_LONG.withName("ExSectorsPerTrack"),
        C_LONGLONG.withName("ExSectorsPerDrive"),
        C_SHORT.withName("ExSectorSize"),
        C_SHORT.withName("ExReserved"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_DISK_EX_INT13_INFO");
    static final jdk.incubator.foreign.MemoryLayout _DISK_EX_INT13_INFO$struct$LAYOUT() { return _DISK_EX_INT13_INFO$struct$LAYOUT_; }

    static final MemoryLayout _DISK_EX_INT13_INFO$ExBufferSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_EX_INT13_INFO$ExBufferSize$LAYOUT() { return _DISK_EX_INT13_INFO$ExBufferSize$LAYOUT_; }

    static final VarHandle _DISK_EX_INT13_INFO$ExBufferSize$VH_ = _DISK_EX_INT13_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ExBufferSize"));
    static final java.lang.invoke.VarHandle _DISK_EX_INT13_INFO$ExBufferSize$VH() { return _DISK_EX_INT13_INFO$ExBufferSize$VH_; }

    static final MemoryLayout _DISK_EX_INT13_INFO$ExFlags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_EX_INT13_INFO$ExFlags$LAYOUT() { return _DISK_EX_INT13_INFO$ExFlags$LAYOUT_; }

    static final VarHandle _DISK_EX_INT13_INFO$ExFlags$VH_ = _DISK_EX_INT13_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ExFlags"));
    static final java.lang.invoke.VarHandle _DISK_EX_INT13_INFO$ExFlags$VH() { return _DISK_EX_INT13_INFO$ExFlags$VH_; }

    static final MemoryLayout _DISK_EX_INT13_INFO$ExCylinders$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_EX_INT13_INFO$ExCylinders$LAYOUT() { return _DISK_EX_INT13_INFO$ExCylinders$LAYOUT_; }

    static final VarHandle _DISK_EX_INT13_INFO$ExCylinders$VH_ = _DISK_EX_INT13_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExCylinders"));
    static final java.lang.invoke.VarHandle _DISK_EX_INT13_INFO$ExCylinders$VH() { return _DISK_EX_INT13_INFO$ExCylinders$VH_; }

    static final MemoryLayout _DISK_EX_INT13_INFO$ExHeads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_EX_INT13_INFO$ExHeads$LAYOUT() { return _DISK_EX_INT13_INFO$ExHeads$LAYOUT_; }

    static final VarHandle _DISK_EX_INT13_INFO$ExHeads$VH_ = _DISK_EX_INT13_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExHeads"));
    static final java.lang.invoke.VarHandle _DISK_EX_INT13_INFO$ExHeads$VH() { return _DISK_EX_INT13_INFO$ExHeads$VH_; }

    static final MemoryLayout _DISK_EX_INT13_INFO$ExSectorsPerTrack$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_EX_INT13_INFO$ExSectorsPerTrack$LAYOUT() { return _DISK_EX_INT13_INFO$ExSectorsPerTrack$LAYOUT_; }

    static final VarHandle _DISK_EX_INT13_INFO$ExSectorsPerTrack$VH_ = _DISK_EX_INT13_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExSectorsPerTrack"));
    static final java.lang.invoke.VarHandle _DISK_EX_INT13_INFO$ExSectorsPerTrack$VH() { return _DISK_EX_INT13_INFO$ExSectorsPerTrack$VH_; }

    static final MemoryLayout _DISK_EX_INT13_INFO$ExSectorsPerDrive$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_EX_INT13_INFO$ExSectorsPerDrive$LAYOUT() { return _DISK_EX_INT13_INFO$ExSectorsPerDrive$LAYOUT_; }

    static final VarHandle _DISK_EX_INT13_INFO$ExSectorsPerDrive$VH_ = _DISK_EX_INT13_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExSectorsPerDrive"));
    static final java.lang.invoke.VarHandle _DISK_EX_INT13_INFO$ExSectorsPerDrive$VH() { return _DISK_EX_INT13_INFO$ExSectorsPerDrive$VH_; }

    static final MemoryLayout _DISK_EX_INT13_INFO$ExSectorSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_EX_INT13_INFO$ExSectorSize$LAYOUT() { return _DISK_EX_INT13_INFO$ExSectorSize$LAYOUT_; }

    static final VarHandle _DISK_EX_INT13_INFO$ExSectorSize$VH_ = _DISK_EX_INT13_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ExSectorSize"));
    static final java.lang.invoke.VarHandle _DISK_EX_INT13_INFO$ExSectorSize$VH() { return _DISK_EX_INT13_INFO$ExSectorSize$VH_; }

    static final MemoryLayout _DISK_EX_INT13_INFO$ExReserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_EX_INT13_INFO$ExReserved$LAYOUT() { return _DISK_EX_INT13_INFO$ExReserved$LAYOUT_; }

    static final VarHandle _DISK_EX_INT13_INFO$ExReserved$VH_ = _DISK_EX_INT13_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ExReserved"));
    static final java.lang.invoke.VarHandle _DISK_EX_INT13_INFO$ExReserved$VH() { return _DISK_EX_INT13_INFO$ExReserved$VH_; }

    static final MemoryLayout _DISK_DETECTION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SizeOfDetectInfo"),
        C_INT.withName("DetectionType"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("DriveSelect"),
            MemoryLayout.ofPaddingBits(16),
            C_LONG.withName("MaxCylinders"),
            C_SHORT.withName("SectorsPerTrack"),
            C_SHORT.withName("MaxHeads"),
            C_SHORT.withName("NumberDrives"),
            MemoryLayout.ofPaddingBits(16)
        ).withName("Int13"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("ExBufferSize"),
            C_SHORT.withName("ExFlags"),
            C_LONG.withName("ExCylinders"),
            C_LONG.withName("ExHeads"),
            C_LONG.withName("ExSectorsPerTrack"),
            C_LONGLONG.withName("ExSectorsPerDrive"),
            C_SHORT.withName("ExSectorSize"),
            C_SHORT.withName("ExReserved"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("ExInt13")
    ).withName("_DISK_DETECTION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _DISK_DETECTION_INFO$struct$LAYOUT() { return _DISK_DETECTION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _DISK_DETECTION_INFO$SizeOfDetectInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_DETECTION_INFO$SizeOfDetectInfo$LAYOUT() { return _DISK_DETECTION_INFO$SizeOfDetectInfo$LAYOUT_; }

    static final VarHandle _DISK_DETECTION_INFO$SizeOfDetectInfo$VH_ = _DISK_DETECTION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfDetectInfo"));
    static final java.lang.invoke.VarHandle _DISK_DETECTION_INFO$SizeOfDetectInfo$VH() { return _DISK_DETECTION_INFO$SizeOfDetectInfo$VH_; }

    static final MemoryLayout _DISK_DETECTION_INFO$DetectionType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_DETECTION_INFO$DetectionType$LAYOUT() { return _DISK_DETECTION_INFO$DetectionType$LAYOUT_; }

    static final VarHandle _DISK_DETECTION_INFO$DetectionType$VH_ = _DISK_DETECTION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DetectionType"));
    static final java.lang.invoke.VarHandle _DISK_DETECTION_INFO$DetectionType$VH() { return _DISK_DETECTION_INFO$DetectionType$VH_; }

    static final MemoryLayout _DISK_PARTITION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SizeOfPartitionInfo"),
        C_INT.withName("PartitionStyle"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Signature"),
            C_LONG.withName("CheckSum")
        ).withName("Mbr"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("DiskId")
        ).withName("Gpt")
    ).withName("_DISK_PARTITION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _DISK_PARTITION_INFO$struct$LAYOUT() { return _DISK_PARTITION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _DISK_PARTITION_INFO$SizeOfPartitionInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_PARTITION_INFO$SizeOfPartitionInfo$LAYOUT() { return _DISK_PARTITION_INFO$SizeOfPartitionInfo$LAYOUT_; }

    static final VarHandle _DISK_PARTITION_INFO$SizeOfPartitionInfo$VH_ = _DISK_PARTITION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfPartitionInfo"));
    static final java.lang.invoke.VarHandle _DISK_PARTITION_INFO$SizeOfPartitionInfo$VH() { return _DISK_PARTITION_INFO$SizeOfPartitionInfo$VH_; }

    static final MemoryLayout _DISK_PARTITION_INFO$PartitionStyle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_PARTITION_INFO$PartitionStyle$LAYOUT() { return _DISK_PARTITION_INFO$PartitionStyle$LAYOUT_; }

    static final VarHandle _DISK_PARTITION_INFO$PartitionStyle$VH_ = _DISK_PARTITION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionStyle"));
    static final java.lang.invoke.VarHandle _DISK_PARTITION_INFO$PartitionStyle$VH() { return _DISK_PARTITION_INFO$PartitionStyle$VH_; }

    static final MemoryLayout Mbr$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Signature"),
        C_LONG.withName("CheckSum")
    );
    static final jdk.incubator.foreign.MemoryLayout Mbr$struct$LAYOUT() { return Mbr$struct$LAYOUT_; }

    static final MemoryLayout Mbr$Signature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Mbr$Signature$LAYOUT() { return Mbr$Signature$LAYOUT_; }

    static final VarHandle Mbr$Signature$VH_ = Mbr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    static final java.lang.invoke.VarHandle Mbr$Signature$VH() { return Mbr$Signature$VH_; }

    static final MemoryLayout Mbr$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout Mbr$CheckSum$LAYOUT() { return Mbr$CheckSum$LAYOUT_; }

    static final VarHandle Mbr$CheckSum$VH_ = Mbr$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle Mbr$CheckSum$VH() { return Mbr$CheckSum$VH_; }

    static final MemoryLayout Gpt$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("DiskId")
    );
    static final jdk.incubator.foreign.MemoryLayout Gpt$struct$LAYOUT() { return Gpt$struct$LAYOUT_; }

    static final MemoryLayout _DISK_GEOMETRY_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("Cylinders"),
            C_INT.withName("MediaType"),
            C_LONG.withName("TracksPerCylinder"),
            C_LONG.withName("SectorsPerTrack"),
            C_LONG.withName("BytesPerSector")
        ).withName("Geometry"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("DiskSize"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Data"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_DISK_GEOMETRY_EX");
    static final jdk.incubator.foreign.MemoryLayout _DISK_GEOMETRY_EX$struct$LAYOUT() { return _DISK_GEOMETRY_EX$struct$LAYOUT_; }

    static final MemoryLayout _DISK_CONTROLLER_NUMBER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ControllerNumber"),
        C_LONG.withName("DiskNumber")
    ).withName("_DISK_CONTROLLER_NUMBER");
    static final jdk.incubator.foreign.MemoryLayout _DISK_CONTROLLER_NUMBER$struct$LAYOUT() { return _DISK_CONTROLLER_NUMBER$struct$LAYOUT_; }

    static final MemoryLayout _DISK_CONTROLLER_NUMBER$ControllerNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_CONTROLLER_NUMBER$ControllerNumber$LAYOUT() { return _DISK_CONTROLLER_NUMBER$ControllerNumber$LAYOUT_; }

    static final VarHandle _DISK_CONTROLLER_NUMBER$ControllerNumber$VH_ = _DISK_CONTROLLER_NUMBER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControllerNumber"));
    static final java.lang.invoke.VarHandle _DISK_CONTROLLER_NUMBER$ControllerNumber$VH() { return _DISK_CONTROLLER_NUMBER$ControllerNumber$VH_; }

    static final MemoryLayout _DISK_CONTROLLER_NUMBER$DiskNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_CONTROLLER_NUMBER$DiskNumber$LAYOUT() { return _DISK_CONTROLLER_NUMBER$DiskNumber$LAYOUT_; }

    static final VarHandle _DISK_CONTROLLER_NUMBER$DiskNumber$VH_ = _DISK_CONTROLLER_NUMBER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DiskNumber"));
    static final java.lang.invoke.VarHandle _DISK_CONTROLLER_NUMBER$DiskNumber$VH() { return _DISK_CONTROLLER_NUMBER$DiskNumber$VH_; }

    static final int EqualPriority() { return (int)0L; }

    static final int KeepPrefetchedData() { return (int)1L; }

    static final int KeepReadData() { return (int)2L; }

    static final MemoryLayout _DISK_CACHE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("ParametersSavable"),
        C_CHAR.withName("ReadCacheEnabled"),
        C_CHAR.withName("WriteCacheEnabled"),
        MemoryLayout.ofPaddingBits(8),
        C_INT.withName("ReadRetentionPriority"),
        C_INT.withName("WriteRetentionPriority"),
        C_SHORT.withName("DisablePrefetchTransferLength"),
        C_CHAR.withName("PrefetchScalar"),
        MemoryLayout.ofPaddingBits(8),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Minimum"),
            C_SHORT.withName("Maximum"),
            C_SHORT.withName("MaximumBlocks")
        ).withName("ScalarPrefetch"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Minimum"),
            C_SHORT.withName("Maximum")
        ).withName("BlockPrefetch"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_DISK_CACHE_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _DISK_CACHE_INFORMATION$struct$LAYOUT() { return _DISK_CACHE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _DISK_CACHE_INFORMATION$ParametersSavable$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DISK_CACHE_INFORMATION$ParametersSavable$LAYOUT() { return _DISK_CACHE_INFORMATION$ParametersSavable$LAYOUT_; }

    static final VarHandle _DISK_CACHE_INFORMATION$ParametersSavable$VH_ = _DISK_CACHE_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ParametersSavable"));
    static final java.lang.invoke.VarHandle _DISK_CACHE_INFORMATION$ParametersSavable$VH() { return _DISK_CACHE_INFORMATION$ParametersSavable$VH_; }

    static final MemoryLayout _DISK_CACHE_INFORMATION$ReadCacheEnabled$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DISK_CACHE_INFORMATION$ReadCacheEnabled$LAYOUT() { return _DISK_CACHE_INFORMATION$ReadCacheEnabled$LAYOUT_; }

    static final VarHandle _DISK_CACHE_INFORMATION$ReadCacheEnabled$VH_ = _DISK_CACHE_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ReadCacheEnabled"));
    static final java.lang.invoke.VarHandle _DISK_CACHE_INFORMATION$ReadCacheEnabled$VH() { return _DISK_CACHE_INFORMATION$ReadCacheEnabled$VH_; }

    static final MemoryLayout _DISK_CACHE_INFORMATION$WriteCacheEnabled$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DISK_CACHE_INFORMATION$WriteCacheEnabled$LAYOUT() { return _DISK_CACHE_INFORMATION$WriteCacheEnabled$LAYOUT_; }

    static final VarHandle _DISK_CACHE_INFORMATION$WriteCacheEnabled$VH_ = _DISK_CACHE_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("WriteCacheEnabled"));
    static final java.lang.invoke.VarHandle _DISK_CACHE_INFORMATION$WriteCacheEnabled$VH() { return _DISK_CACHE_INFORMATION$WriteCacheEnabled$VH_; }

    static final MemoryLayout _DISK_CACHE_INFORMATION$ReadRetentionPriority$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_CACHE_INFORMATION$ReadRetentionPriority$LAYOUT() { return _DISK_CACHE_INFORMATION$ReadRetentionPriority$LAYOUT_; }

    static final VarHandle _DISK_CACHE_INFORMATION$ReadRetentionPriority$VH_ = _DISK_CACHE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReadRetentionPriority"));
    static final java.lang.invoke.VarHandle _DISK_CACHE_INFORMATION$ReadRetentionPriority$VH() { return _DISK_CACHE_INFORMATION$ReadRetentionPriority$VH_; }

    static final MemoryLayout _DISK_CACHE_INFORMATION$WriteRetentionPriority$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_CACHE_INFORMATION$WriteRetentionPriority$LAYOUT() { return _DISK_CACHE_INFORMATION$WriteRetentionPriority$LAYOUT_; }

    static final VarHandle _DISK_CACHE_INFORMATION$WriteRetentionPriority$VH_ = _DISK_CACHE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WriteRetentionPriority"));
    static final java.lang.invoke.VarHandle _DISK_CACHE_INFORMATION$WriteRetentionPriority$VH() { return _DISK_CACHE_INFORMATION$WriteRetentionPriority$VH_; }

    static final MemoryLayout _DISK_CACHE_INFORMATION$DisablePrefetchTransferLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _DISK_CACHE_INFORMATION$DisablePrefetchTransferLength$LAYOUT() { return _DISK_CACHE_INFORMATION$DisablePrefetchTransferLength$LAYOUT_; }

    static final VarHandle _DISK_CACHE_INFORMATION$DisablePrefetchTransferLength$VH_ = _DISK_CACHE_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DisablePrefetchTransferLength"));
    static final java.lang.invoke.VarHandle _DISK_CACHE_INFORMATION$DisablePrefetchTransferLength$VH() { return _DISK_CACHE_INFORMATION$DisablePrefetchTransferLength$VH_; }

    static final MemoryLayout _DISK_CACHE_INFORMATION$PrefetchScalar$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DISK_CACHE_INFORMATION$PrefetchScalar$LAYOUT() { return _DISK_CACHE_INFORMATION$PrefetchScalar$LAYOUT_; }

    static final VarHandle _DISK_CACHE_INFORMATION$PrefetchScalar$VH_ = _DISK_CACHE_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PrefetchScalar"));
    static final java.lang.invoke.VarHandle _DISK_CACHE_INFORMATION$PrefetchScalar$VH() { return _DISK_CACHE_INFORMATION$PrefetchScalar$VH_; }

    static final MemoryLayout ScalarPrefetch$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Minimum"),
        C_SHORT.withName("Maximum"),
        C_SHORT.withName("MaximumBlocks")
    );
    static final jdk.incubator.foreign.MemoryLayout ScalarPrefetch$struct$LAYOUT() { return ScalarPrefetch$struct$LAYOUT_; }

    static final MemoryLayout ScalarPrefetch$Minimum$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ScalarPrefetch$Minimum$LAYOUT() { return ScalarPrefetch$Minimum$LAYOUT_; }

    static final VarHandle ScalarPrefetch$Minimum$VH_ = ScalarPrefetch$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Minimum"));
    static final java.lang.invoke.VarHandle ScalarPrefetch$Minimum$VH() { return ScalarPrefetch$Minimum$VH_; }

    static final MemoryLayout ScalarPrefetch$Maximum$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ScalarPrefetch$Maximum$LAYOUT() { return ScalarPrefetch$Maximum$LAYOUT_; }

    static final VarHandle ScalarPrefetch$Maximum$VH_ = ScalarPrefetch$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Maximum"));
    static final java.lang.invoke.VarHandle ScalarPrefetch$Maximum$VH() { return ScalarPrefetch$Maximum$VH_; }

    static final MemoryLayout ScalarPrefetch$MaximumBlocks$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout ScalarPrefetch$MaximumBlocks$LAYOUT() { return ScalarPrefetch$MaximumBlocks$LAYOUT_; }

    static final VarHandle ScalarPrefetch$MaximumBlocks$VH_ = ScalarPrefetch$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaximumBlocks"));
    static final java.lang.invoke.VarHandle ScalarPrefetch$MaximumBlocks$VH() { return ScalarPrefetch$MaximumBlocks$VH_; }

    static final MemoryLayout BlockPrefetch$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Minimum"),
        C_SHORT.withName("Maximum")
    );
    static final jdk.incubator.foreign.MemoryLayout BlockPrefetch$struct$LAYOUT() { return BlockPrefetch$struct$LAYOUT_; }

    static final MemoryLayout BlockPrefetch$Minimum$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout BlockPrefetch$Minimum$LAYOUT() { return BlockPrefetch$Minimum$LAYOUT_; }

    static final VarHandle BlockPrefetch$Minimum$VH_ = BlockPrefetch$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Minimum"));
    static final java.lang.invoke.VarHandle BlockPrefetch$Minimum$VH() { return BlockPrefetch$Minimum$VH_; }

    static final MemoryLayout BlockPrefetch$Maximum$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout BlockPrefetch$Maximum$LAYOUT() { return BlockPrefetch$Maximum$LAYOUT_; }

    static final VarHandle BlockPrefetch$Maximum$VH_ = BlockPrefetch$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Maximum"));
    static final java.lang.invoke.VarHandle BlockPrefetch$Maximum$VH() { return BlockPrefetch$Maximum$VH_; }

    static final MemoryLayout _DISK_GROW_PARTITION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PartitionNumber"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("BytesToGrow")
    ).withName("_DISK_GROW_PARTITION");
    static final jdk.incubator.foreign.MemoryLayout _DISK_GROW_PARTITION$struct$LAYOUT() { return _DISK_GROW_PARTITION$struct$LAYOUT_; }

    static final MemoryLayout _DISK_GROW_PARTITION$PartitionNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_GROW_PARTITION$PartitionNumber$LAYOUT() { return _DISK_GROW_PARTITION$PartitionNumber$LAYOUT_; }

    static final VarHandle _DISK_GROW_PARTITION$PartitionNumber$VH_ = _DISK_GROW_PARTITION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PartitionNumber"));
    static final java.lang.invoke.VarHandle _DISK_GROW_PARTITION$PartitionNumber$VH() { return _DISK_GROW_PARTITION$PartitionNumber$VH_; }

    static final MemoryLayout _HISTOGRAM_BUCKET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Reads"),
        C_LONG.withName("Writes")
    ).withName("_HISTOGRAM_BUCKET");
    static final jdk.incubator.foreign.MemoryLayout _HISTOGRAM_BUCKET$struct$LAYOUT() { return _HISTOGRAM_BUCKET$struct$LAYOUT_; }

    static final MemoryLayout _HISTOGRAM_BUCKET$Reads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _HISTOGRAM_BUCKET$Reads$LAYOUT() { return _HISTOGRAM_BUCKET$Reads$LAYOUT_; }

    static final VarHandle _HISTOGRAM_BUCKET$Reads$VH_ = _HISTOGRAM_BUCKET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reads"));
    static final java.lang.invoke.VarHandle _HISTOGRAM_BUCKET$Reads$VH() { return _HISTOGRAM_BUCKET$Reads$VH_; }

    static final MemoryLayout _HISTOGRAM_BUCKET$Writes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _HISTOGRAM_BUCKET$Writes$LAYOUT() { return _HISTOGRAM_BUCKET$Writes$LAYOUT_; }

    static final VarHandle _HISTOGRAM_BUCKET$Writes$VH_ = _HISTOGRAM_BUCKET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Writes"));
    static final java.lang.invoke.VarHandle _HISTOGRAM_BUCKET$Writes$VH() { return _HISTOGRAM_BUCKET$Writes$VH_; }

    static final MemoryLayout _DISK_HISTOGRAM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("DiskSize"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Start"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("End"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Average"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AverageRead"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AverageWrite"),
        C_LONG.withName("Granularity"),
        C_LONG.withName("Size"),
        C_LONG.withName("ReadCount"),
        C_LONG.withName("WriteCount"),
        C_POINTER.withName("Histogram")
    ).withName("_DISK_HISTOGRAM");
    static final jdk.incubator.foreign.MemoryLayout _DISK_HISTOGRAM$struct$LAYOUT() { return _DISK_HISTOGRAM$struct$LAYOUT_; }

    static final MemoryLayout _DISK_HISTOGRAM$Granularity$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_HISTOGRAM$Granularity$LAYOUT() { return _DISK_HISTOGRAM$Granularity$LAYOUT_; }

    static final VarHandle _DISK_HISTOGRAM$Granularity$VH_ = _DISK_HISTOGRAM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Granularity"));
    static final java.lang.invoke.VarHandle _DISK_HISTOGRAM$Granularity$VH() { return _DISK_HISTOGRAM$Granularity$VH_; }

    static final MemoryLayout _DISK_HISTOGRAM$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_HISTOGRAM$Size$LAYOUT() { return _DISK_HISTOGRAM$Size$LAYOUT_; }

    static final VarHandle _DISK_HISTOGRAM$Size$VH_ = _DISK_HISTOGRAM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _DISK_HISTOGRAM$Size$VH() { return _DISK_HISTOGRAM$Size$VH_; }

    static final MemoryLayout _DISK_HISTOGRAM$ReadCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_HISTOGRAM$ReadCount$LAYOUT() { return _DISK_HISTOGRAM$ReadCount$LAYOUT_; }

    static final VarHandle _DISK_HISTOGRAM$ReadCount$VH_ = _DISK_HISTOGRAM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReadCount"));
    static final java.lang.invoke.VarHandle _DISK_HISTOGRAM$ReadCount$VH() { return _DISK_HISTOGRAM$ReadCount$VH_; }

    static final MemoryLayout _DISK_HISTOGRAM$WriteCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_HISTOGRAM$WriteCount$LAYOUT() { return _DISK_HISTOGRAM$WriteCount$LAYOUT_; }

    static final VarHandle _DISK_HISTOGRAM$WriteCount$VH_ = _DISK_HISTOGRAM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WriteCount"));
    static final java.lang.invoke.VarHandle _DISK_HISTOGRAM$WriteCount$VH() { return _DISK_HISTOGRAM$WriteCount$VH_; }

    static final MemoryLayout _DISK_HISTOGRAM$Histogram$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DISK_HISTOGRAM$Histogram$LAYOUT() { return _DISK_HISTOGRAM$Histogram$LAYOUT_; }

    static final VarHandle _DISK_HISTOGRAM$Histogram$VH_ = MemoryHandles.asAddressVarHandle(_DISK_HISTOGRAM$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Histogram")));
    static final java.lang.invoke.VarHandle _DISK_HISTOGRAM$Histogram$VH() { return _DISK_HISTOGRAM$Histogram$VH_; }

    static final MemoryLayout _DISK_PERFORMANCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("BytesRead"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("BytesWritten"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ReadTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("WriteTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("IdleTime"),
        C_LONG.withName("ReadCount"),
        C_LONG.withName("WriteCount"),
        C_LONG.withName("QueueDepth"),
        C_LONG.withName("SplitCount"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("QueryTime"),
        C_LONG.withName("StorageDeviceNumber"),
        MemoryLayout.ofSequence(8, C_SHORT).withName("StorageManagerName"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_DISK_PERFORMANCE");
    static final jdk.incubator.foreign.MemoryLayout _DISK_PERFORMANCE$struct$LAYOUT() { return _DISK_PERFORMANCE$struct$LAYOUT_; }

    static final MemoryLayout _DISK_PERFORMANCE$ReadCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_PERFORMANCE$ReadCount$LAYOUT() { return _DISK_PERFORMANCE$ReadCount$LAYOUT_; }

    static final VarHandle _DISK_PERFORMANCE$ReadCount$VH_ = _DISK_PERFORMANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReadCount"));
    static final java.lang.invoke.VarHandle _DISK_PERFORMANCE$ReadCount$VH() { return _DISK_PERFORMANCE$ReadCount$VH_; }

    static final MemoryLayout _DISK_PERFORMANCE$WriteCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_PERFORMANCE$WriteCount$LAYOUT() { return _DISK_PERFORMANCE$WriteCount$LAYOUT_; }

    static final VarHandle _DISK_PERFORMANCE$WriteCount$VH_ = _DISK_PERFORMANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WriteCount"));
    static final java.lang.invoke.VarHandle _DISK_PERFORMANCE$WriteCount$VH() { return _DISK_PERFORMANCE$WriteCount$VH_; }

    static final MemoryLayout _DISK_PERFORMANCE$QueueDepth$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_PERFORMANCE$QueueDepth$LAYOUT() { return _DISK_PERFORMANCE$QueueDepth$LAYOUT_; }

    static final VarHandle _DISK_PERFORMANCE$QueueDepth$VH_ = _DISK_PERFORMANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("QueueDepth"));
    static final java.lang.invoke.VarHandle _DISK_PERFORMANCE$QueueDepth$VH() { return _DISK_PERFORMANCE$QueueDepth$VH_; }

    static final MemoryLayout _DISK_PERFORMANCE$SplitCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_PERFORMANCE$SplitCount$LAYOUT() { return _DISK_PERFORMANCE$SplitCount$LAYOUT_; }

    static final VarHandle _DISK_PERFORMANCE$SplitCount$VH_ = _DISK_PERFORMANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SplitCount"));
    static final java.lang.invoke.VarHandle _DISK_PERFORMANCE$SplitCount$VH() { return _DISK_PERFORMANCE$SplitCount$VH_; }

    static final MemoryLayout _DISK_PERFORMANCE$StorageDeviceNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_PERFORMANCE$StorageDeviceNumber$LAYOUT() { return _DISK_PERFORMANCE$StorageDeviceNumber$LAYOUT_; }

    static final VarHandle _DISK_PERFORMANCE$StorageDeviceNumber$VH_ = _DISK_PERFORMANCE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StorageDeviceNumber"));
    static final java.lang.invoke.VarHandle _DISK_PERFORMANCE$StorageDeviceNumber$VH() { return _DISK_PERFORMANCE$StorageDeviceNumber$VH_; }

    static final MemoryLayout _DISK_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ByteOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("EndTime"),
        C_POINTER.withName("VirtualAddress"),
        C_LONG.withName("NumberOfBytes"),
        C_CHAR.withName("DeviceNumber"),
        C_CHAR.withName("ReadRequest"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_DISK_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _DISK_RECORD$struct$LAYOUT() { return _DISK_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _DISK_RECORD$VirtualAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DISK_RECORD$VirtualAddress$LAYOUT() { return _DISK_RECORD$VirtualAddress$LAYOUT_; }

    static final VarHandle _DISK_RECORD$VirtualAddress$VH_ = MemoryHandles.asAddressVarHandle(_DISK_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VirtualAddress")));
    static final java.lang.invoke.VarHandle _DISK_RECORD$VirtualAddress$VH() { return _DISK_RECORD$VirtualAddress$VH_; }

    static final MemoryLayout _DISK_RECORD$NumberOfBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_RECORD$NumberOfBytes$LAYOUT() { return _DISK_RECORD$NumberOfBytes$LAYOUT_; }

    static final VarHandle _DISK_RECORD$NumberOfBytes$VH_ = _DISK_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfBytes"));
    static final java.lang.invoke.VarHandle _DISK_RECORD$NumberOfBytes$VH() { return _DISK_RECORD$NumberOfBytes$VH_; }

    static final MemoryLayout _DISK_RECORD$DeviceNumber$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DISK_RECORD$DeviceNumber$LAYOUT() { return _DISK_RECORD$DeviceNumber$LAYOUT_; }

    static final VarHandle _DISK_RECORD$DeviceNumber$VH_ = _DISK_RECORD$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DeviceNumber"));
    static final java.lang.invoke.VarHandle _DISK_RECORD$DeviceNumber$VH() { return _DISK_RECORD$DeviceNumber$VH_; }

    static final MemoryLayout _DISK_RECORD$ReadRequest$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DISK_RECORD$ReadRequest$LAYOUT() { return _DISK_RECORD$ReadRequest$LAYOUT_; }

    static final VarHandle _DISK_RECORD$ReadRequest$VH_ = _DISK_RECORD$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ReadRequest"));
    static final java.lang.invoke.VarHandle _DISK_RECORD$ReadRequest$VH() { return _DISK_RECORD$ReadRequest$VH_; }

    static final MemoryLayout _DISK_LOGGING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Function"),
        MemoryLayout.ofPaddingBits(56),
        C_POINTER.withName("BufferAddress"),
        C_LONG.withName("BufferSize"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_DISK_LOGGING");
    static final jdk.incubator.foreign.MemoryLayout _DISK_LOGGING$struct$LAYOUT() { return _DISK_LOGGING$struct$LAYOUT_; }

    static final MemoryLayout _DISK_LOGGING$Function$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DISK_LOGGING$Function$LAYOUT() { return _DISK_LOGGING$Function$LAYOUT_; }

    static final VarHandle _DISK_LOGGING$Function$VH_ = _DISK_LOGGING$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Function"));
    static final java.lang.invoke.VarHandle _DISK_LOGGING$Function$VH() { return _DISK_LOGGING$Function$VH_; }

    static final MemoryLayout _DISK_LOGGING$BufferAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DISK_LOGGING$BufferAddress$LAYOUT() { return _DISK_LOGGING$BufferAddress$LAYOUT_; }

    static final VarHandle _DISK_LOGGING$BufferAddress$VH_ = MemoryHandles.asAddressVarHandle(_DISK_LOGGING$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferAddress")));
    static final java.lang.invoke.VarHandle _DISK_LOGGING$BufferAddress$VH() { return _DISK_LOGGING$BufferAddress$VH_; }

    static final MemoryLayout _DISK_LOGGING$BufferSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DISK_LOGGING$BufferSize$LAYOUT() { return _DISK_LOGGING$BufferSize$LAYOUT_; }

    static final VarHandle _DISK_LOGGING$BufferSize$VH_ = _DISK_LOGGING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferSize"));
    static final java.lang.invoke.VarHandle _DISK_LOGGING$BufferSize$VH() { return _DISK_LOGGING$BufferSize$VH_; }

    static final int RequestSize() { return (int)0L; }

    static final int RequestLocation() { return (int)1L; }

    static final MemoryLayout _BIN_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartValue"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Length")
    ).withName("_BIN_RANGE");
    static final jdk.incubator.foreign.MemoryLayout _BIN_RANGE$struct$LAYOUT() { return _BIN_RANGE$struct$LAYOUT_; }

    static final MemoryLayout _PERF_BIN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfBins"),
        C_LONG.withName("TypeOfBin"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("StartValue"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("Length")
        ).withName("_BIN_RANGE")).withName("BinsRanges")
    ).withName("_PERF_BIN");
    static final jdk.incubator.foreign.MemoryLayout _PERF_BIN$struct$LAYOUT() { return _PERF_BIN$struct$LAYOUT_; }

    static final MemoryLayout _PERF_BIN$NumberOfBins$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PERF_BIN$NumberOfBins$LAYOUT() { return _PERF_BIN$NumberOfBins$LAYOUT_; }

    static final VarHandle _PERF_BIN$NumberOfBins$VH_ = _PERF_BIN$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfBins"));
    static final java.lang.invoke.VarHandle _PERF_BIN$NumberOfBins$VH() { return _PERF_BIN$NumberOfBins$VH_; }

    static final MemoryLayout _PERF_BIN$TypeOfBin$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PERF_BIN$TypeOfBin$LAYOUT() { return _PERF_BIN$TypeOfBin$LAYOUT_; }

    static final VarHandle _PERF_BIN$TypeOfBin$VH_ = _PERF_BIN$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TypeOfBin"));
    static final java.lang.invoke.VarHandle _PERF_BIN$TypeOfBin$VH() { return _PERF_BIN$TypeOfBin$VH_; }

    static final MemoryLayout _BIN_COUNT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("StartValue"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("Length")
        ).withName("BinRange"),
        C_LONG.withName("BinCount"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_BIN_COUNT");
    static final jdk.incubator.foreign.MemoryLayout _BIN_COUNT$struct$LAYOUT() { return _BIN_COUNT$struct$LAYOUT_; }

    static final MemoryLayout _BIN_COUNT$BinCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BIN_COUNT$BinCount$LAYOUT() { return _BIN_COUNT$BinCount$LAYOUT_; }

    static final VarHandle _BIN_COUNT$BinCount$VH_ = _BIN_COUNT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BinCount"));
    static final java.lang.invoke.VarHandle _BIN_COUNT$BinCount$VH() { return _BIN_COUNT$BinCount$VH_; }

    static final MemoryLayout _BIN_RESULTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfBins"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                MemoryLayout.ofUnion(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_LONG.withName("LowPart"),
                        C_LONG.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("StartValue"),
                MemoryLayout.ofUnion(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_LONG.withName("LowPart"),
                        C_LONG.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("Length")
            ).withName("BinRange"),
            C_LONG.withName("BinCount"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("_BIN_COUNT")).withName("BinCounts")
    ).withName("_BIN_RESULTS");
    static final jdk.incubator.foreign.MemoryLayout _BIN_RESULTS$struct$LAYOUT() { return _BIN_RESULTS$struct$LAYOUT_; }

    static final MemoryLayout _BIN_RESULTS$NumberOfBins$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BIN_RESULTS$NumberOfBins$LAYOUT() { return _BIN_RESULTS$NumberOfBins$LAYOUT_; }

    static final VarHandle _BIN_RESULTS$NumberOfBins$VH_ = _BIN_RESULTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfBins"));
    static final java.lang.invoke.VarHandle _BIN_RESULTS$NumberOfBins$VH() { return _BIN_RESULTS$NumberOfBins$VH_; }

    static final MemoryLayout _GETVERSIONINPARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("bVersion"),
        C_CHAR.withName("bRevision"),
        C_CHAR.withName("bReserved"),
        C_CHAR.withName("bIDEDeviceMap"),
        C_LONG.withName("fCapabilities"),
        MemoryLayout.ofSequence(4, C_LONG).withName("dwReserved")
    ).withName("_GETVERSIONINPARAMS");
    static final jdk.incubator.foreign.MemoryLayout _GETVERSIONINPARAMS$struct$LAYOUT() { return _GETVERSIONINPARAMS$struct$LAYOUT_; }

    static final MemoryLayout _GETVERSIONINPARAMS$bVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GETVERSIONINPARAMS$bVersion$LAYOUT() { return _GETVERSIONINPARAMS$bVersion$LAYOUT_; }

    static final VarHandle _GETVERSIONINPARAMS$bVersion$VH_ = _GETVERSIONINPARAMS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bVersion"));
    static final java.lang.invoke.VarHandle _GETVERSIONINPARAMS$bVersion$VH() { return _GETVERSIONINPARAMS$bVersion$VH_; }

    static final MemoryLayout _GETVERSIONINPARAMS$bRevision$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GETVERSIONINPARAMS$bRevision$LAYOUT() { return _GETVERSIONINPARAMS$bRevision$LAYOUT_; }

    static final VarHandle _GETVERSIONINPARAMS$bRevision$VH_ = _GETVERSIONINPARAMS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bRevision"));
    static final java.lang.invoke.VarHandle _GETVERSIONINPARAMS$bRevision$VH() { return _GETVERSIONINPARAMS$bRevision$VH_; }

    static final MemoryLayout _GETVERSIONINPARAMS$bReserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GETVERSIONINPARAMS$bReserved$LAYOUT() { return _GETVERSIONINPARAMS$bReserved$LAYOUT_; }

    static final VarHandle _GETVERSIONINPARAMS$bReserved$VH_ = _GETVERSIONINPARAMS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bReserved"));
    static final java.lang.invoke.VarHandle _GETVERSIONINPARAMS$bReserved$VH() { return _GETVERSIONINPARAMS$bReserved$VH_; }

    static final MemoryLayout _GETVERSIONINPARAMS$bIDEDeviceMap$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GETVERSIONINPARAMS$bIDEDeviceMap$LAYOUT() { return _GETVERSIONINPARAMS$bIDEDeviceMap$LAYOUT_; }

    static final VarHandle _GETVERSIONINPARAMS$bIDEDeviceMap$VH_ = _GETVERSIONINPARAMS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bIDEDeviceMap"));
    static final java.lang.invoke.VarHandle _GETVERSIONINPARAMS$bIDEDeviceMap$VH() { return _GETVERSIONINPARAMS$bIDEDeviceMap$VH_; }

    static final MemoryLayout _GETVERSIONINPARAMS$fCapabilities$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GETVERSIONINPARAMS$fCapabilities$LAYOUT() { return _GETVERSIONINPARAMS$fCapabilities$LAYOUT_; }

    static final VarHandle _GETVERSIONINPARAMS$fCapabilities$VH_ = _GETVERSIONINPARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fCapabilities"));
    static final java.lang.invoke.VarHandle _GETVERSIONINPARAMS$fCapabilities$VH() { return _GETVERSIONINPARAMS$fCapabilities$VH_; }

    static final MemoryLayout _IDEREGS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("bFeaturesReg"),
        C_CHAR.withName("bSectorCountReg"),
        C_CHAR.withName("bSectorNumberReg"),
        C_CHAR.withName("bCylLowReg"),
        C_CHAR.withName("bCylHighReg"),
        C_CHAR.withName("bDriveHeadReg"),
        C_CHAR.withName("bCommandReg"),
        C_CHAR.withName("bReserved")
    ).withName("_IDEREGS");
    static final jdk.incubator.foreign.MemoryLayout _IDEREGS$struct$LAYOUT() { return _IDEREGS$struct$LAYOUT_; }

    static final MemoryLayout _IDEREGS$bFeaturesReg$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IDEREGS$bFeaturesReg$LAYOUT() { return _IDEREGS$bFeaturesReg$LAYOUT_; }

    static final VarHandle _IDEREGS$bFeaturesReg$VH_ = _IDEREGS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bFeaturesReg"));
    static final java.lang.invoke.VarHandle _IDEREGS$bFeaturesReg$VH() { return _IDEREGS$bFeaturesReg$VH_; }

    static final MemoryLayout _IDEREGS$bSectorCountReg$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IDEREGS$bSectorCountReg$LAYOUT() { return _IDEREGS$bSectorCountReg$LAYOUT_; }

    static final VarHandle _IDEREGS$bSectorCountReg$VH_ = _IDEREGS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bSectorCountReg"));
    static final java.lang.invoke.VarHandle _IDEREGS$bSectorCountReg$VH() { return _IDEREGS$bSectorCountReg$VH_; }

    static final MemoryLayout _IDEREGS$bSectorNumberReg$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IDEREGS$bSectorNumberReg$LAYOUT() { return _IDEREGS$bSectorNumberReg$LAYOUT_; }

    static final VarHandle _IDEREGS$bSectorNumberReg$VH_ = _IDEREGS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bSectorNumberReg"));
    static final java.lang.invoke.VarHandle _IDEREGS$bSectorNumberReg$VH() { return _IDEREGS$bSectorNumberReg$VH_; }

    static final MemoryLayout _IDEREGS$bCylLowReg$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IDEREGS$bCylLowReg$LAYOUT() { return _IDEREGS$bCylLowReg$LAYOUT_; }

    static final VarHandle _IDEREGS$bCylLowReg$VH_ = _IDEREGS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bCylLowReg"));
    static final java.lang.invoke.VarHandle _IDEREGS$bCylLowReg$VH() { return _IDEREGS$bCylLowReg$VH_; }

    static final MemoryLayout _IDEREGS$bCylHighReg$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IDEREGS$bCylHighReg$LAYOUT() { return _IDEREGS$bCylHighReg$LAYOUT_; }

    static final VarHandle _IDEREGS$bCylHighReg$VH_ = _IDEREGS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bCylHighReg"));
    static final java.lang.invoke.VarHandle _IDEREGS$bCylHighReg$VH() { return _IDEREGS$bCylHighReg$VH_; }

    static final MemoryLayout _IDEREGS$bDriveHeadReg$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IDEREGS$bDriveHeadReg$LAYOUT() { return _IDEREGS$bDriveHeadReg$LAYOUT_; }

    static final VarHandle _IDEREGS$bDriveHeadReg$VH_ = _IDEREGS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bDriveHeadReg"));
    static final java.lang.invoke.VarHandle _IDEREGS$bDriveHeadReg$VH() { return _IDEREGS$bDriveHeadReg$VH_; }

    static final MemoryLayout _IDEREGS$bCommandReg$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IDEREGS$bCommandReg$LAYOUT() { return _IDEREGS$bCommandReg$LAYOUT_; }

    static final VarHandle _IDEREGS$bCommandReg$VH_ = _IDEREGS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bCommandReg"));
    static final java.lang.invoke.VarHandle _IDEREGS$bCommandReg$VH() { return _IDEREGS$bCommandReg$VH_; }

    static final MemoryLayout _IDEREGS$bReserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IDEREGS$bReserved$LAYOUT() { return _IDEREGS$bReserved$LAYOUT_; }

    static final VarHandle _IDEREGS$bReserved$VH_ = _IDEREGS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bReserved"));
    static final java.lang.invoke.VarHandle _IDEREGS$bReserved$VH() { return _IDEREGS$bReserved$VH_; }

    static final MemoryLayout _SENDCMDINPARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cBufferSize"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("bFeaturesReg"),
            C_CHAR.withName("bSectorCountReg"),
            C_CHAR.withName("bSectorNumberReg"),
            C_CHAR.withName("bCylLowReg"),
            C_CHAR.withName("bCylHighReg"),
            C_CHAR.withName("bDriveHeadReg"),
            C_CHAR.withName("bCommandReg"),
            C_CHAR.withName("bReserved")
        ).withName("irDriveRegs"),
        C_CHAR.withName("bDriveNumber"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("bReserved"),
        MemoryLayout.ofSequence(4, C_LONG).withName("dwReserved"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("bBuffer")
    ).withName("_SENDCMDINPARAMS");
    static final jdk.incubator.foreign.MemoryLayout _SENDCMDINPARAMS$struct$LAYOUT() { return _SENDCMDINPARAMS$struct$LAYOUT_; }

    static final MemoryLayout _SENDCMDINPARAMS$cBufferSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SENDCMDINPARAMS$cBufferSize$LAYOUT() { return _SENDCMDINPARAMS$cBufferSize$LAYOUT_; }

    static final VarHandle _SENDCMDINPARAMS$cBufferSize$VH_ = _SENDCMDINPARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cBufferSize"));
    static final java.lang.invoke.VarHandle _SENDCMDINPARAMS$cBufferSize$VH() { return _SENDCMDINPARAMS$cBufferSize$VH_; }

    static final MemoryLayout _SENDCMDINPARAMS$bDriveNumber$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SENDCMDINPARAMS$bDriveNumber$LAYOUT() { return _SENDCMDINPARAMS$bDriveNumber$LAYOUT_; }

    static final VarHandle _SENDCMDINPARAMS$bDriveNumber$VH_ = _SENDCMDINPARAMS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bDriveNumber"));
    static final java.lang.invoke.VarHandle _SENDCMDINPARAMS$bDriveNumber$VH() { return _SENDCMDINPARAMS$bDriveNumber$VH_; }

    static final MemoryLayout _DRIVERSTATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("bDriverError"),
        C_CHAR.withName("bIDEError"),
        MemoryLayout.ofSequence(2, C_CHAR).withName("bReserved"),
        MemoryLayout.ofSequence(2, C_LONG).withName("dwReserved")
    ).withName("_DRIVERSTATUS");
    static final jdk.incubator.foreign.MemoryLayout _DRIVERSTATUS$struct$LAYOUT() { return _DRIVERSTATUS$struct$LAYOUT_; }

    static final MemoryLayout _DRIVERSTATUS$bDriverError$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DRIVERSTATUS$bDriverError$LAYOUT() { return _DRIVERSTATUS$bDriverError$LAYOUT_; }

    static final VarHandle _DRIVERSTATUS$bDriverError$VH_ = _DRIVERSTATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bDriverError"));
    static final java.lang.invoke.VarHandle _DRIVERSTATUS$bDriverError$VH() { return _DRIVERSTATUS$bDriverError$VH_; }

    static final MemoryLayout _DRIVERSTATUS$bIDEError$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _DRIVERSTATUS$bIDEError$LAYOUT() { return _DRIVERSTATUS$bIDEError$LAYOUT_; }

    static final VarHandle _DRIVERSTATUS$bIDEError$VH_ = _DRIVERSTATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("bIDEError"));
    static final java.lang.invoke.VarHandle _DRIVERSTATUS$bIDEError$VH() { return _DRIVERSTATUS$bIDEError$VH_; }

    static final MemoryLayout _SENDCMDOUTPARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cBufferSize"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("bDriverError"),
            C_CHAR.withName("bIDEError"),
            MemoryLayout.ofSequence(2, C_CHAR).withName("bReserved"),
            MemoryLayout.ofSequence(2, C_LONG).withName("dwReserved")
        ).withName("DriverStatus"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("bBuffer")
    ).withName("_SENDCMDOUTPARAMS");
    static final jdk.incubator.foreign.MemoryLayout _SENDCMDOUTPARAMS$struct$LAYOUT() { return _SENDCMDOUTPARAMS$struct$LAYOUT_; }

    static final MemoryLayout _SENDCMDOUTPARAMS$cBufferSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SENDCMDOUTPARAMS$cBufferSize$LAYOUT() { return _SENDCMDOUTPARAMS$cBufferSize$LAYOUT_; }

    static final VarHandle _SENDCMDOUTPARAMS$cBufferSize$VH_ = _SENDCMDOUTPARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cBufferSize"));
    static final java.lang.invoke.VarHandle _SENDCMDOUTPARAMS$cBufferSize$VH() { return _SENDCMDOUTPARAMS$cBufferSize$VH_; }

    static final MemoryLayout _GET_DISK_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Reserved1"),
        C_LONGLONG.withName("Attributes")
    ).withName("_GET_DISK_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _GET_DISK_ATTRIBUTES$struct$LAYOUT() { return _GET_DISK_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _GET_DISK_ATTRIBUTES$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GET_DISK_ATTRIBUTES$Version$LAYOUT() { return _GET_DISK_ATTRIBUTES$Version$LAYOUT_; }

    static final VarHandle _GET_DISK_ATTRIBUTES$Version$VH_ = _GET_DISK_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _GET_DISK_ATTRIBUTES$Version$VH() { return _GET_DISK_ATTRIBUTES$Version$VH_; }

    static final MemoryLayout _GET_DISK_ATTRIBUTES$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GET_DISK_ATTRIBUTES$Reserved1$LAYOUT() { return _GET_DISK_ATTRIBUTES$Reserved1$LAYOUT_; }

    static final VarHandle _GET_DISK_ATTRIBUTES$Reserved1$VH_ = _GET_DISK_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _GET_DISK_ATTRIBUTES$Reserved1$VH() { return _GET_DISK_ATTRIBUTES$Reserved1$VH_; }

    static final MemoryLayout _GET_DISK_ATTRIBUTES$Attributes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _GET_DISK_ATTRIBUTES$Attributes$LAYOUT() { return _GET_DISK_ATTRIBUTES$Attributes$LAYOUT_; }

    static final VarHandle _GET_DISK_ATTRIBUTES$Attributes$VH_ = _GET_DISK_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Attributes"));
    static final java.lang.invoke.VarHandle _GET_DISK_ATTRIBUTES$Attributes$VH() { return _GET_DISK_ATTRIBUTES$Attributes$VH_; }

    static final MemoryLayout _SET_DISK_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_CHAR.withName("Persist"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Reserved1"),
        C_LONGLONG.withName("Attributes"),
        C_LONGLONG.withName("AttributesMask"),
        MemoryLayout.ofSequence(4, C_LONG).withName("Reserved2")
    ).withName("_SET_DISK_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _SET_DISK_ATTRIBUTES$struct$LAYOUT() { return _SET_DISK_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _SET_DISK_ATTRIBUTES$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SET_DISK_ATTRIBUTES$Version$LAYOUT() { return _SET_DISK_ATTRIBUTES$Version$LAYOUT_; }

    static final VarHandle _SET_DISK_ATTRIBUTES$Version$VH_ = _SET_DISK_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _SET_DISK_ATTRIBUTES$Version$VH() { return _SET_DISK_ATTRIBUTES$Version$VH_; }

    static final MemoryLayout _SET_DISK_ATTRIBUTES$Persist$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SET_DISK_ATTRIBUTES$Persist$LAYOUT() { return _SET_DISK_ATTRIBUTES$Persist$LAYOUT_; }

    static final VarHandle _SET_DISK_ATTRIBUTES$Persist$VH_ = _SET_DISK_ATTRIBUTES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Persist"));
    static final java.lang.invoke.VarHandle _SET_DISK_ATTRIBUTES$Persist$VH() { return _SET_DISK_ATTRIBUTES$Persist$VH_; }

    static final MemoryLayout _SET_DISK_ATTRIBUTES$Attributes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SET_DISK_ATTRIBUTES$Attributes$LAYOUT() { return _SET_DISK_ATTRIBUTES$Attributes$LAYOUT_; }

    static final VarHandle _SET_DISK_ATTRIBUTES$Attributes$VH_ = _SET_DISK_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Attributes"));
    static final java.lang.invoke.VarHandle _SET_DISK_ATTRIBUTES$Attributes$VH() { return _SET_DISK_ATTRIBUTES$Attributes$VH_; }

    static final MemoryLayout _SET_DISK_ATTRIBUTES$AttributesMask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SET_DISK_ATTRIBUTES$AttributesMask$LAYOUT() { return _SET_DISK_ATTRIBUTES$AttributesMask$LAYOUT_; }

    static final VarHandle _SET_DISK_ATTRIBUTES$AttributesMask$VH_ = _SET_DISK_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AttributesMask"));
    static final java.lang.invoke.VarHandle _SET_DISK_ATTRIBUTES$AttributesMask$VH() { return _SET_DISK_ATTRIBUTES$AttributesMask$VH_; }

    static final int AllElements() { return (int)0L; }

    static final int ChangerTransport() { return (int)1L; }

    static final int ChangerSlot() { return (int)2L; }

    static final int ChangerIEPort() { return (int)3L; }

    static final int ChangerDrive() { return (int)4L; }

    static final int ChangerDoor() { return (int)5L; }

    static final int ChangerKeypad() { return (int)6L; }

    static final int ChangerMaxElement() { return (int)7L; }

    static final MemoryLayout _CHANGER_ELEMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("ElementType"),
        C_LONG.withName("ElementAddress")
    ).withName("_CHANGER_ELEMENT");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT$struct$LAYOUT() { return _CHANGER_ELEMENT$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_ELEMENT$ElementType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT$ElementType$LAYOUT() { return _CHANGER_ELEMENT$ElementType$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT$ElementType$VH_ = _CHANGER_ELEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ElementType"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT$ElementType$VH() { return _CHANGER_ELEMENT$ElementType$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT$ElementAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT$ElementAddress$LAYOUT() { return _CHANGER_ELEMENT$ElementAddress$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT$ElementAddress$VH_ = _CHANGER_ELEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ElementAddress"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT$ElementAddress$VH() { return _CHANGER_ELEMENT$ElementAddress$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Element"),
        C_LONG.withName("NumberOfElements")
    ).withName("_CHANGER_ELEMENT_LIST");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_LIST$struct$LAYOUT() { return _CHANGER_ELEMENT_LIST$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_ELEMENT_LIST$NumberOfElements$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_LIST$NumberOfElements$LAYOUT() { return _CHANGER_ELEMENT_LIST$NumberOfElements$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_LIST$NumberOfElements$VH_ = _CHANGER_ELEMENT_LIST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfElements"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_LIST$NumberOfElements$VH() { return _CHANGER_ELEMENT_LIST$NumberOfElements$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_SHORT.withName("NumberTransportElements"),
        C_SHORT.withName("NumberStorageElements"),
        C_SHORT.withName("NumberCleanerSlots"),
        C_SHORT.withName("NumberIEElements"),
        C_SHORT.withName("NumberDataTransferElements"),
        C_SHORT.withName("NumberOfDoors"),
        C_SHORT.withName("FirstSlotNumber"),
        C_SHORT.withName("FirstDriveNumber"),
        C_SHORT.withName("FirstTransportNumber"),
        C_SHORT.withName("FirstIEPortNumber"),
        C_SHORT.withName("FirstCleanerSlotAddress"),
        C_SHORT.withName("MagazineSize"),
        C_LONG.withName("DriveCleanTimeout"),
        C_LONG.withName("Features0"),
        C_LONG.withName("Features1"),
        C_CHAR.withName("MoveFromTransport"),
        C_CHAR.withName("MoveFromSlot"),
        C_CHAR.withName("MoveFromIePort"),
        C_CHAR.withName("MoveFromDrive"),
        C_CHAR.withName("ExchangeFromTransport"),
        C_CHAR.withName("ExchangeFromSlot"),
        C_CHAR.withName("ExchangeFromIePort"),
        C_CHAR.withName("ExchangeFromDrive"),
        C_CHAR.withName("LockUnlockCapabilities"),
        C_CHAR.withName("PositionCapabilities"),
        MemoryLayout.ofSequence(2, C_CHAR).withName("Reserved1"),
        MemoryLayout.ofSequence(2, C_LONG).withName("Reserved2")
    ).withName("_GET_CHANGER_PARAMETERS");
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$struct$LAYOUT() { return _GET_CHANGER_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$Size$LAYOUT() { return _GET_CHANGER_PARAMETERS$Size$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$Size$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$Size$VH() { return _GET_CHANGER_PARAMETERS$Size$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$NumberTransportElements$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$NumberTransportElements$LAYOUT() { return _GET_CHANGER_PARAMETERS$NumberTransportElements$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$NumberTransportElements$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberTransportElements"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$NumberTransportElements$VH() { return _GET_CHANGER_PARAMETERS$NumberTransportElements$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$NumberStorageElements$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$NumberStorageElements$LAYOUT() { return _GET_CHANGER_PARAMETERS$NumberStorageElements$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$NumberStorageElements$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberStorageElements"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$NumberStorageElements$VH() { return _GET_CHANGER_PARAMETERS$NumberStorageElements$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$NumberCleanerSlots$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$NumberCleanerSlots$LAYOUT() { return _GET_CHANGER_PARAMETERS$NumberCleanerSlots$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$NumberCleanerSlots$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberCleanerSlots"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$NumberCleanerSlots$VH() { return _GET_CHANGER_PARAMETERS$NumberCleanerSlots$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$NumberIEElements$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$NumberIEElements$LAYOUT() { return _GET_CHANGER_PARAMETERS$NumberIEElements$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$NumberIEElements$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberIEElements"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$NumberIEElements$VH() { return _GET_CHANGER_PARAMETERS$NumberIEElements$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$NumberDataTransferElements$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$NumberDataTransferElements$LAYOUT() { return _GET_CHANGER_PARAMETERS$NumberDataTransferElements$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$NumberDataTransferElements$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberDataTransferElements"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$NumberDataTransferElements$VH() { return _GET_CHANGER_PARAMETERS$NumberDataTransferElements$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$NumberOfDoors$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$NumberOfDoors$LAYOUT() { return _GET_CHANGER_PARAMETERS$NumberOfDoors$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$NumberOfDoors$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfDoors"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$NumberOfDoors$VH() { return _GET_CHANGER_PARAMETERS$NumberOfDoors$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$FirstSlotNumber$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$FirstSlotNumber$LAYOUT() { return _GET_CHANGER_PARAMETERS$FirstSlotNumber$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$FirstSlotNumber$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FirstSlotNumber"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$FirstSlotNumber$VH() { return _GET_CHANGER_PARAMETERS$FirstSlotNumber$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$FirstDriveNumber$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$FirstDriveNumber$LAYOUT() { return _GET_CHANGER_PARAMETERS$FirstDriveNumber$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$FirstDriveNumber$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FirstDriveNumber"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$FirstDriveNumber$VH() { return _GET_CHANGER_PARAMETERS$FirstDriveNumber$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$FirstTransportNumber$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$FirstTransportNumber$LAYOUT() { return _GET_CHANGER_PARAMETERS$FirstTransportNumber$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$FirstTransportNumber$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FirstTransportNumber"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$FirstTransportNumber$VH() { return _GET_CHANGER_PARAMETERS$FirstTransportNumber$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$FirstIEPortNumber$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$FirstIEPortNumber$LAYOUT() { return _GET_CHANGER_PARAMETERS$FirstIEPortNumber$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$FirstIEPortNumber$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FirstIEPortNumber"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$FirstIEPortNumber$VH() { return _GET_CHANGER_PARAMETERS$FirstIEPortNumber$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$FirstCleanerSlotAddress$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$FirstCleanerSlotAddress$LAYOUT() { return _GET_CHANGER_PARAMETERS$FirstCleanerSlotAddress$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$FirstCleanerSlotAddress$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FirstCleanerSlotAddress"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$FirstCleanerSlotAddress$VH() { return _GET_CHANGER_PARAMETERS$FirstCleanerSlotAddress$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$MagazineSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$MagazineSize$LAYOUT() { return _GET_CHANGER_PARAMETERS$MagazineSize$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$MagazineSize$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MagazineSize"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$MagazineSize$VH() { return _GET_CHANGER_PARAMETERS$MagazineSize$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$DriveCleanTimeout$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$DriveCleanTimeout$LAYOUT() { return _GET_CHANGER_PARAMETERS$DriveCleanTimeout$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$DriveCleanTimeout$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DriveCleanTimeout"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$DriveCleanTimeout$VH() { return _GET_CHANGER_PARAMETERS$DriveCleanTimeout$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$Features0$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$Features0$LAYOUT() { return _GET_CHANGER_PARAMETERS$Features0$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$Features0$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Features0"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$Features0$VH() { return _GET_CHANGER_PARAMETERS$Features0$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$Features1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$Features1$LAYOUT() { return _GET_CHANGER_PARAMETERS$Features1$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$Features1$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Features1"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$Features1$VH() { return _GET_CHANGER_PARAMETERS$Features1$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$MoveFromTransport$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$MoveFromTransport$LAYOUT() { return _GET_CHANGER_PARAMETERS$MoveFromTransport$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$MoveFromTransport$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MoveFromTransport"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$MoveFromTransport$VH() { return _GET_CHANGER_PARAMETERS$MoveFromTransport$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$MoveFromSlot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$MoveFromSlot$LAYOUT() { return _GET_CHANGER_PARAMETERS$MoveFromSlot$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$MoveFromSlot$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MoveFromSlot"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$MoveFromSlot$VH() { return _GET_CHANGER_PARAMETERS$MoveFromSlot$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$MoveFromIePort$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$MoveFromIePort$LAYOUT() { return _GET_CHANGER_PARAMETERS$MoveFromIePort$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$MoveFromIePort$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MoveFromIePort"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$MoveFromIePort$VH() { return _GET_CHANGER_PARAMETERS$MoveFromIePort$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$MoveFromDrive$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$MoveFromDrive$LAYOUT() { return _GET_CHANGER_PARAMETERS$MoveFromDrive$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$MoveFromDrive$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MoveFromDrive"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$MoveFromDrive$VH() { return _GET_CHANGER_PARAMETERS$MoveFromDrive$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$ExchangeFromTransport$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$ExchangeFromTransport$LAYOUT() { return _GET_CHANGER_PARAMETERS$ExchangeFromTransport$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$ExchangeFromTransport$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ExchangeFromTransport"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$ExchangeFromTransport$VH() { return _GET_CHANGER_PARAMETERS$ExchangeFromTransport$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$ExchangeFromSlot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$ExchangeFromSlot$LAYOUT() { return _GET_CHANGER_PARAMETERS$ExchangeFromSlot$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$ExchangeFromSlot$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ExchangeFromSlot"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$ExchangeFromSlot$VH() { return _GET_CHANGER_PARAMETERS$ExchangeFromSlot$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$ExchangeFromIePort$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$ExchangeFromIePort$LAYOUT() { return _GET_CHANGER_PARAMETERS$ExchangeFromIePort$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$ExchangeFromIePort$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ExchangeFromIePort"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$ExchangeFromIePort$VH() { return _GET_CHANGER_PARAMETERS$ExchangeFromIePort$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$ExchangeFromDrive$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$ExchangeFromDrive$LAYOUT() { return _GET_CHANGER_PARAMETERS$ExchangeFromDrive$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$ExchangeFromDrive$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ExchangeFromDrive"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$ExchangeFromDrive$VH() { return _GET_CHANGER_PARAMETERS$ExchangeFromDrive$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$LockUnlockCapabilities$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$LockUnlockCapabilities$LAYOUT() { return _GET_CHANGER_PARAMETERS$LockUnlockCapabilities$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$LockUnlockCapabilities$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LockUnlockCapabilities"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$LockUnlockCapabilities$VH() { return _GET_CHANGER_PARAMETERS$LockUnlockCapabilities$VH_; }

    static final MemoryLayout _GET_CHANGER_PARAMETERS$PositionCapabilities$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _GET_CHANGER_PARAMETERS$PositionCapabilities$LAYOUT() { return _GET_CHANGER_PARAMETERS$PositionCapabilities$LAYOUT_; }

    static final VarHandle _GET_CHANGER_PARAMETERS$PositionCapabilities$VH_ = _GET_CHANGER_PARAMETERS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("PositionCapabilities"));
    static final java.lang.invoke.VarHandle _GET_CHANGER_PARAMETERS$PositionCapabilities$VH() { return _GET_CHANGER_PARAMETERS$PositionCapabilities$VH_; }

    static final MemoryLayout _CHANGER_PRODUCT_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(8, C_CHAR).withName("VendorId"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("ProductId"),
        MemoryLayout.ofSequence(4, C_CHAR).withName("Revision"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("SerialNumber"),
        C_CHAR.withName("DeviceType")
    ).withName("_CHANGER_PRODUCT_DATA");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_PRODUCT_DATA$struct$LAYOUT() { return _CHANGER_PRODUCT_DATA$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_PRODUCT_DATA$DeviceType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_PRODUCT_DATA$DeviceType$LAYOUT() { return _CHANGER_PRODUCT_DATA$DeviceType$LAYOUT_; }

    static final VarHandle _CHANGER_PRODUCT_DATA$DeviceType$VH_ = _CHANGER_PRODUCT_DATA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DeviceType"));
    static final java.lang.invoke.VarHandle _CHANGER_PRODUCT_DATA$DeviceType$VH() { return _CHANGER_PRODUCT_DATA$DeviceType$VH_; }

    static final MemoryLayout _CHANGER_SET_ACCESS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Element"),
        C_LONG.withName("Control")
    ).withName("_CHANGER_SET_ACCESS");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_SET_ACCESS$struct$LAYOUT() { return _CHANGER_SET_ACCESS$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_SET_ACCESS$Control$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_SET_ACCESS$Control$LAYOUT() { return _CHANGER_SET_ACCESS$Control$LAYOUT_; }

    static final VarHandle _CHANGER_SET_ACCESS$Control$VH_ = _CHANGER_SET_ACCESS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Control"));
    static final java.lang.invoke.VarHandle _CHANGER_SET_ACCESS$Control$VH() { return _CHANGER_SET_ACCESS$Control$VH_; }

    static final MemoryLayout _CHANGER_READ_ELEMENT_STATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("ElementType"),
                C_LONG.withName("ElementAddress")
            ).withName("Element"),
            C_LONG.withName("NumberOfElements")
        ).withName("ElementList"),
        C_CHAR.withName("VolumeTagInfo"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_CHANGER_READ_ELEMENT_STATUS");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_READ_ELEMENT_STATUS$struct$LAYOUT() { return _CHANGER_READ_ELEMENT_STATUS$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_READ_ELEMENT_STATUS$VolumeTagInfo$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_READ_ELEMENT_STATUS$VolumeTagInfo$LAYOUT() { return _CHANGER_READ_ELEMENT_STATUS$VolumeTagInfo$LAYOUT_; }

    static final VarHandle _CHANGER_READ_ELEMENT_STATUS$VolumeTagInfo$VH_ = _CHANGER_READ_ELEMENT_STATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("VolumeTagInfo"));
    static final java.lang.invoke.VarHandle _CHANGER_READ_ELEMENT_STATUS$VolumeTagInfo$VH() { return _CHANGER_READ_ELEMENT_STATUS$VolumeTagInfo$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Element"),
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("SrcElementAddress"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ExceptionCode"),
        C_CHAR.withName("TargetId"),
        C_CHAR.withName("Lun"),
        C_SHORT.withName("Reserved"),
        MemoryLayout.ofSequence(36, C_CHAR).withName("PrimaryVolumeID"),
        MemoryLayout.ofSequence(36, C_CHAR).withName("AlternateVolumeID")
    ).withName("_CHANGER_ELEMENT_STATUS");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS$struct$LAYOUT() { return _CHANGER_ELEMENT_STATUS$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS$Flags$LAYOUT() { return _CHANGER_ELEMENT_STATUS$Flags$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS$Flags$VH_ = _CHANGER_ELEMENT_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS$Flags$VH() { return _CHANGER_ELEMENT_STATUS$Flags$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS$ExceptionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS$ExceptionCode$LAYOUT() { return _CHANGER_ELEMENT_STATUS$ExceptionCode$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS$ExceptionCode$VH_ = _CHANGER_ELEMENT_STATUS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionCode"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS$ExceptionCode$VH() { return _CHANGER_ELEMENT_STATUS$ExceptionCode$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS$TargetId$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS$TargetId$LAYOUT() { return _CHANGER_ELEMENT_STATUS$TargetId$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS$TargetId$VH_ = _CHANGER_ELEMENT_STATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("TargetId"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS$TargetId$VH() { return _CHANGER_ELEMENT_STATUS$TargetId$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS$Lun$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS$Lun$LAYOUT() { return _CHANGER_ELEMENT_STATUS$Lun$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS$Lun$VH_ = _CHANGER_ELEMENT_STATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Lun"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS$Lun$VH() { return _CHANGER_ELEMENT_STATUS$Lun$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS$Reserved$LAYOUT() { return _CHANGER_ELEMENT_STATUS$Reserved$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS$Reserved$VH_ = _CHANGER_ELEMENT_STATUS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS$Reserved$VH() { return _CHANGER_ELEMENT_STATUS$Reserved$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Element"),
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("SrcElementAddress"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ExceptionCode"),
        C_CHAR.withName("TargetId"),
        C_CHAR.withName("Lun"),
        C_SHORT.withName("Reserved"),
        MemoryLayout.ofSequence(36, C_CHAR).withName("PrimaryVolumeID"),
        MemoryLayout.ofSequence(36, C_CHAR).withName("AlternateVolumeID"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("VendorIdentification"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("ProductIdentification"),
        MemoryLayout.ofSequence(32, C_CHAR).withName("SerialNumber")
    ).withName("_CHANGER_ELEMENT_STATUS_EX");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS_EX$struct$LAYOUT() { return _CHANGER_ELEMENT_STATUS_EX$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS_EX$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS_EX$Flags$LAYOUT() { return _CHANGER_ELEMENT_STATUS_EX$Flags$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS_EX$Flags$VH_ = _CHANGER_ELEMENT_STATUS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS_EX$Flags$VH() { return _CHANGER_ELEMENT_STATUS_EX$Flags$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS_EX$ExceptionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS_EX$ExceptionCode$LAYOUT() { return _CHANGER_ELEMENT_STATUS_EX$ExceptionCode$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS_EX$ExceptionCode$VH_ = _CHANGER_ELEMENT_STATUS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionCode"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS_EX$ExceptionCode$VH() { return _CHANGER_ELEMENT_STATUS_EX$ExceptionCode$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS_EX$TargetId$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS_EX$TargetId$LAYOUT() { return _CHANGER_ELEMENT_STATUS_EX$TargetId$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS_EX$TargetId$VH_ = _CHANGER_ELEMENT_STATUS_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("TargetId"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS_EX$TargetId$VH() { return _CHANGER_ELEMENT_STATUS_EX$TargetId$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS_EX$Lun$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS_EX$Lun$LAYOUT() { return _CHANGER_ELEMENT_STATUS_EX$Lun$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS_EX$Lun$VH_ = _CHANGER_ELEMENT_STATUS_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Lun"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS_EX$Lun$VH() { return _CHANGER_ELEMENT_STATUS_EX$Lun$VH_; }

    static final MemoryLayout _CHANGER_ELEMENT_STATUS_EX$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_ELEMENT_STATUS_EX$Reserved$LAYOUT() { return _CHANGER_ELEMENT_STATUS_EX$Reserved$LAYOUT_; }

    static final VarHandle _CHANGER_ELEMENT_STATUS_EX$Reserved$VH_ = _CHANGER_ELEMENT_STATUS_EX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _CHANGER_ELEMENT_STATUS_EX$Reserved$VH() { return _CHANGER_ELEMENT_STATUS_EX$Reserved$VH_; }

    static final MemoryLayout _CHANGER_INITIALIZE_ELEMENT_STATUS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("ElementType"),
                C_LONG.withName("ElementAddress")
            ).withName("Element"),
            C_LONG.withName("NumberOfElements")
        ).withName("ElementList"),
        C_CHAR.withName("BarCodeScan"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_CHANGER_INITIALIZE_ELEMENT_STATUS");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_INITIALIZE_ELEMENT_STATUS$struct$LAYOUT() { return _CHANGER_INITIALIZE_ELEMENT_STATUS$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_INITIALIZE_ELEMENT_STATUS$BarCodeScan$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_INITIALIZE_ELEMENT_STATUS$BarCodeScan$LAYOUT() { return _CHANGER_INITIALIZE_ELEMENT_STATUS$BarCodeScan$LAYOUT_; }

    static final VarHandle _CHANGER_INITIALIZE_ELEMENT_STATUS$BarCodeScan$VH_ = _CHANGER_INITIALIZE_ELEMENT_STATUS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BarCodeScan"));
    static final java.lang.invoke.VarHandle _CHANGER_INITIALIZE_ELEMENT_STATUS$BarCodeScan$VH() { return _CHANGER_INITIALIZE_ELEMENT_STATUS$BarCodeScan$VH_; }

    static final MemoryLayout _CHANGER_SET_POSITION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Transport"),
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Destination"),
        C_CHAR.withName("Flip"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_CHANGER_SET_POSITION");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_SET_POSITION$struct$LAYOUT() { return _CHANGER_SET_POSITION$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_SET_POSITION$Flip$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_SET_POSITION$Flip$LAYOUT() { return _CHANGER_SET_POSITION$Flip$LAYOUT_; }

    static final VarHandle _CHANGER_SET_POSITION$Flip$VH_ = _CHANGER_SET_POSITION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flip"));
    static final java.lang.invoke.VarHandle _CHANGER_SET_POSITION$Flip$VH() { return _CHANGER_SET_POSITION$Flip$VH_; }

    static final MemoryLayout _CHANGER_EXCHANGE_MEDIUM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Transport"),
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Source"),
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Destination1"),
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Destination2"),
        C_CHAR.withName("Flip1"),
        C_CHAR.withName("Flip2"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_CHANGER_EXCHANGE_MEDIUM");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_EXCHANGE_MEDIUM$struct$LAYOUT() { return _CHANGER_EXCHANGE_MEDIUM$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_EXCHANGE_MEDIUM$Flip1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_EXCHANGE_MEDIUM$Flip1$LAYOUT() { return _CHANGER_EXCHANGE_MEDIUM$Flip1$LAYOUT_; }

    static final VarHandle _CHANGER_EXCHANGE_MEDIUM$Flip1$VH_ = _CHANGER_EXCHANGE_MEDIUM$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flip1"));
    static final java.lang.invoke.VarHandle _CHANGER_EXCHANGE_MEDIUM$Flip1$VH() { return _CHANGER_EXCHANGE_MEDIUM$Flip1$VH_; }

    static final MemoryLayout _CHANGER_EXCHANGE_MEDIUM$Flip2$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_EXCHANGE_MEDIUM$Flip2$LAYOUT() { return _CHANGER_EXCHANGE_MEDIUM$Flip2$LAYOUT_; }

    static final VarHandle _CHANGER_EXCHANGE_MEDIUM$Flip2$VH_ = _CHANGER_EXCHANGE_MEDIUM$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flip2"));
    static final java.lang.invoke.VarHandle _CHANGER_EXCHANGE_MEDIUM$Flip2$VH() { return _CHANGER_EXCHANGE_MEDIUM$Flip2$VH_; }

    static final MemoryLayout _CHANGER_MOVE_MEDIUM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Transport"),
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Source"),
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("Destination"),
        C_CHAR.withName("Flip"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_CHANGER_MOVE_MEDIUM");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_MOVE_MEDIUM$struct$LAYOUT() { return _CHANGER_MOVE_MEDIUM$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_MOVE_MEDIUM$Flip$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_MOVE_MEDIUM$Flip$LAYOUT() { return _CHANGER_MOVE_MEDIUM$Flip$LAYOUT_; }

    static final VarHandle _CHANGER_MOVE_MEDIUM$Flip$VH_ = _CHANGER_MOVE_MEDIUM$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flip"));
    static final java.lang.invoke.VarHandle _CHANGER_MOVE_MEDIUM$Flip$VH() { return _CHANGER_MOVE_MEDIUM$Flip$VH_; }

    static final MemoryLayout _CHANGER_SEND_VOLUME_TAG_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_INT.withName("ElementType"),
            C_LONG.withName("ElementAddress")
        ).withName("StartingElement"),
        C_LONG.withName("ActionCode"),
        MemoryLayout.ofSequence(40, C_CHAR).withName("VolumeIDTemplate")
    ).withName("_CHANGER_SEND_VOLUME_TAG_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_SEND_VOLUME_TAG_INFORMATION$struct$LAYOUT() { return _CHANGER_SEND_VOLUME_TAG_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _CHANGER_SEND_VOLUME_TAG_INFORMATION$ActionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CHANGER_SEND_VOLUME_TAG_INFORMATION$ActionCode$LAYOUT() { return _CHANGER_SEND_VOLUME_TAG_INFORMATION$ActionCode$LAYOUT_; }

    static final VarHandle _CHANGER_SEND_VOLUME_TAG_INFORMATION$ActionCode$VH_ = _CHANGER_SEND_VOLUME_TAG_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ActionCode"));
    static final java.lang.invoke.VarHandle _CHANGER_SEND_VOLUME_TAG_INFORMATION$ActionCode$VH() { return _CHANGER_SEND_VOLUME_TAG_INFORMATION$ActionCode$VH_; }

    static final MemoryLayout _READ_ELEMENT_ADDRESS_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfElements"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_INT.withName("ElementType"),
                C_LONG.withName("ElementAddress")
            ).withName("Element"),
            MemoryLayout.ofStruct(
                C_INT.withName("ElementType"),
                C_LONG.withName("ElementAddress")
            ).withName("SrcElementAddress"),
            C_LONG.withName("Flags"),
            C_LONG.withName("ExceptionCode"),
            C_CHAR.withName("TargetId"),
            C_CHAR.withName("Lun"),
            C_SHORT.withName("Reserved"),
            MemoryLayout.ofSequence(36, C_CHAR).withName("PrimaryVolumeID"),
            MemoryLayout.ofSequence(36, C_CHAR).withName("AlternateVolumeID")
        ).withName("_CHANGER_ELEMENT_STATUS")).withName("ElementStatus")
    ).withName("_READ_ELEMENT_ADDRESS_INFO");
    static final jdk.incubator.foreign.MemoryLayout _READ_ELEMENT_ADDRESS_INFO$struct$LAYOUT() { return _READ_ELEMENT_ADDRESS_INFO$struct$LAYOUT_; }

    static final MemoryLayout _READ_ELEMENT_ADDRESS_INFO$NumberOfElements$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _READ_ELEMENT_ADDRESS_INFO$NumberOfElements$LAYOUT() { return _READ_ELEMENT_ADDRESS_INFO$NumberOfElements$LAYOUT_; }

    static final VarHandle _READ_ELEMENT_ADDRESS_INFO$NumberOfElements$VH_ = _READ_ELEMENT_ADDRESS_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfElements"));
    static final java.lang.invoke.VarHandle _READ_ELEMENT_ADDRESS_INFO$NumberOfElements$VH() { return _READ_ELEMENT_ADDRESS_INFO$NumberOfElements$VH_; }

    static final int DeviceProblemNone() { return (int)0L; }

    static final int DeviceProblemHardware() { return (int)1L; }

    static final int DeviceProblemCHMError() { return (int)2L; }

    static final int DeviceProblemDoorOpen() { return (int)3L; }

    static final int DeviceProblemCalibrationError() { return (int)4L; }

    static final int DeviceProblemTargetFailure() { return (int)5L; }

    static final int DeviceProblemCHMMoveError() { return (int)6L; }

    static final int DeviceProblemCHMZeroError() { return (int)7L; }

    static final int DeviceProblemCartridgeInsertError() { return (int)8L; }

    static final int DeviceProblemPositionError() { return (int)9L; }

    static final int DeviceProblemSensorError() { return (int)10L; }

    static final int DeviceProblemCartridgeEjectError() { return (int)11L; }

    static final int DeviceProblemGripperError() { return (int)12L; }

    static final int DeviceProblemDriveError() { return (int)13L; }

    static final MemoryLayout _PATHNAME_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PathNameLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("Name"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_PATHNAME_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _PATHNAME_BUFFER$struct$LAYOUT() { return _PATHNAME_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _PATHNAME_BUFFER$PathNameLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PATHNAME_BUFFER$PathNameLength$LAYOUT() { return _PATHNAME_BUFFER$PathNameLength$LAYOUT_; }

    static final VarHandle _PATHNAME_BUFFER$PathNameLength$VH_ = _PATHNAME_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PathNameLength"));
    static final java.lang.invoke.VarHandle _PATHNAME_BUFFER$PathNameLength$VH() { return _PATHNAME_BUFFER$PathNameLength$VH_; }

    static final MemoryLayout _FSCTL_QUERY_FAT_BPB_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(36, C_CHAR).withName("First0x24BytesOfBootSector")
    ).withName("_FSCTL_QUERY_FAT_BPB_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_FAT_BPB_BUFFER$struct$LAYOUT() { return _FSCTL_QUERY_FAT_BPB_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout NTFS_VOLUME_DATA_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("VolumeSerialNumber"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("NumberSectors"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TotalClusters"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FreeClusters"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TotalReserved"),
        C_LONG.withName("BytesPerSector"),
        C_LONG.withName("BytesPerCluster"),
        C_LONG.withName("BytesPerFileRecordSegment"),
        C_LONG.withName("ClustersPerFileRecordSegment"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("MftValidDataLength"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("MftStartLcn"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Mft2StartLcn"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("MftZoneStart"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("MftZoneEnd")
    );
    static final jdk.incubator.foreign.MemoryLayout NTFS_VOLUME_DATA_BUFFER$struct$LAYOUT() { return NTFS_VOLUME_DATA_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout NTFS_VOLUME_DATA_BUFFER$BytesPerSector$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_VOLUME_DATA_BUFFER$BytesPerSector$LAYOUT() { return NTFS_VOLUME_DATA_BUFFER$BytesPerSector$LAYOUT_; }

    static final VarHandle NTFS_VOLUME_DATA_BUFFER$BytesPerSector$VH_ = NTFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerSector"));
    static final java.lang.invoke.VarHandle NTFS_VOLUME_DATA_BUFFER$BytesPerSector$VH() { return NTFS_VOLUME_DATA_BUFFER$BytesPerSector$VH_; }

    static final MemoryLayout NTFS_VOLUME_DATA_BUFFER$BytesPerCluster$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_VOLUME_DATA_BUFFER$BytesPerCluster$LAYOUT() { return NTFS_VOLUME_DATA_BUFFER$BytesPerCluster$LAYOUT_; }

    static final VarHandle NTFS_VOLUME_DATA_BUFFER$BytesPerCluster$VH_ = NTFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerCluster"));
    static final java.lang.invoke.VarHandle NTFS_VOLUME_DATA_BUFFER$BytesPerCluster$VH() { return NTFS_VOLUME_DATA_BUFFER$BytesPerCluster$VH_; }

    static final MemoryLayout NTFS_VOLUME_DATA_BUFFER$BytesPerFileRecordSegment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_VOLUME_DATA_BUFFER$BytesPerFileRecordSegment$LAYOUT() { return NTFS_VOLUME_DATA_BUFFER$BytesPerFileRecordSegment$LAYOUT_; }

    static final VarHandle NTFS_VOLUME_DATA_BUFFER$BytesPerFileRecordSegment$VH_ = NTFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerFileRecordSegment"));
    static final java.lang.invoke.VarHandle NTFS_VOLUME_DATA_BUFFER$BytesPerFileRecordSegment$VH() { return NTFS_VOLUME_DATA_BUFFER$BytesPerFileRecordSegment$VH_; }

    static final MemoryLayout NTFS_VOLUME_DATA_BUFFER$ClustersPerFileRecordSegment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_VOLUME_DATA_BUFFER$ClustersPerFileRecordSegment$LAYOUT() { return NTFS_VOLUME_DATA_BUFFER$ClustersPerFileRecordSegment$LAYOUT_; }

    static final VarHandle NTFS_VOLUME_DATA_BUFFER$ClustersPerFileRecordSegment$VH_ = NTFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ClustersPerFileRecordSegment"));
    static final java.lang.invoke.VarHandle NTFS_VOLUME_DATA_BUFFER$ClustersPerFileRecordSegment$VH() { return NTFS_VOLUME_DATA_BUFFER$ClustersPerFileRecordSegment$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ByteCount"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_LONG.withName("BytesPerPhysicalSector"),
        C_SHORT.withName("LfsMajorVersion"),
        C_SHORT.withName("LfsMinorVersion"),
        C_LONG.withName("MaxDeviceTrimExtentCount"),
        C_LONG.withName("MaxDeviceTrimByteCount"),
        C_LONG.withName("MaxVolumeTrimExtentCount"),
        C_LONG.withName("MaxVolumeTrimByteCount")
    );
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$ByteCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$ByteCount$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$ByteCount$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$ByteCount$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ByteCount"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$ByteCount$VH() { return NTFS_EXTENDED_VOLUME_DATA$ByteCount$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MajorVersion$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$MajorVersion$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$MajorVersion$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$MajorVersion$VH() { return NTFS_EXTENDED_VOLUME_DATA$MajorVersion$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MinorVersion$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$MinorVersion$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$MinorVersion$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$MinorVersion$VH() { return NTFS_EXTENDED_VOLUME_DATA$MinorVersion$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$BytesPerPhysicalSector$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$BytesPerPhysicalSector$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$BytesPerPhysicalSector$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$BytesPerPhysicalSector$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerPhysicalSector"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$BytesPerPhysicalSector$VH() { return NTFS_EXTENDED_VOLUME_DATA$BytesPerPhysicalSector$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$LfsMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$LfsMajorVersion$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$LfsMajorVersion$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$LfsMajorVersion$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LfsMajorVersion"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$LfsMajorVersion$VH() { return NTFS_EXTENDED_VOLUME_DATA$LfsMajorVersion$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$LfsMinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$LfsMinorVersion$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$LfsMinorVersion$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$LfsMinorVersion$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LfsMinorVersion"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$LfsMinorVersion$VH() { return NTFS_EXTENDED_VOLUME_DATA$LfsMinorVersion$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimExtentCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimExtentCount$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimExtentCount$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimExtentCount$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxDeviceTrimExtentCount"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimExtentCount$VH() { return NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimExtentCount$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimByteCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimByteCount$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimByteCount$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimByteCount$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxDeviceTrimByteCount"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimByteCount$VH() { return NTFS_EXTENDED_VOLUME_DATA$MaxDeviceTrimByteCount$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimExtentCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimExtentCount$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimExtentCount$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimExtentCount$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxVolumeTrimExtentCount"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimExtentCount$VH() { return NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimExtentCount$VH_; }

    static final MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimByteCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimByteCount$LAYOUT() { return NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimByteCount$LAYOUT_; }

    static final VarHandle NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimByteCount$VH_ = NTFS_EXTENDED_VOLUME_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxVolumeTrimByteCount"));
    static final java.lang.invoke.VarHandle NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimByteCount$VH() { return NTFS_EXTENDED_VOLUME_DATA$MaxVolumeTrimByteCount$VH_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ByteCount"),
        C_LONG.withName("MajorVersion"),
        C_LONG.withName("MinorVersion"),
        C_LONG.withName("BytesPerPhysicalSector"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("VolumeSerialNumber"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("NumberSectors"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TotalClusters"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FreeClusters"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TotalReserved"),
        C_LONG.withName("BytesPerSector"),
        C_LONG.withName("BytesPerCluster"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("MaximumSizeOfResidentFile"),
        C_SHORT.withName("FastTierDataFillRatio"),
        C_SHORT.withName("SlowTierDataFillRatio"),
        C_LONG.withName("DestagesFastTierToSlowTierRate"),
        MemoryLayout.ofSequence(9, MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER")).withName("Reserved")
    );
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$struct$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$ByteCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$ByteCount$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$ByteCount$LAYOUT_; }

    static final VarHandle REFS_VOLUME_DATA_BUFFER$ByteCount$VH_ = REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ByteCount"));
    static final java.lang.invoke.VarHandle REFS_VOLUME_DATA_BUFFER$ByteCount$VH() { return REFS_VOLUME_DATA_BUFFER$ByteCount$VH_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$MajorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$MajorVersion$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$MajorVersion$LAYOUT_; }

    static final VarHandle REFS_VOLUME_DATA_BUFFER$MajorVersion$VH_ = REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle REFS_VOLUME_DATA_BUFFER$MajorVersion$VH() { return REFS_VOLUME_DATA_BUFFER$MajorVersion$VH_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$MinorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$MinorVersion$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$MinorVersion$LAYOUT_; }

    static final VarHandle REFS_VOLUME_DATA_BUFFER$MinorVersion$VH_ = REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle REFS_VOLUME_DATA_BUFFER$MinorVersion$VH() { return REFS_VOLUME_DATA_BUFFER$MinorVersion$VH_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$BytesPerPhysicalSector$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$BytesPerPhysicalSector$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$BytesPerPhysicalSector$LAYOUT_; }

    static final VarHandle REFS_VOLUME_DATA_BUFFER$BytesPerPhysicalSector$VH_ = REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerPhysicalSector"));
    static final java.lang.invoke.VarHandle REFS_VOLUME_DATA_BUFFER$BytesPerPhysicalSector$VH() { return REFS_VOLUME_DATA_BUFFER$BytesPerPhysicalSector$VH_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$BytesPerSector$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$BytesPerSector$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$BytesPerSector$LAYOUT_; }

    static final VarHandle REFS_VOLUME_DATA_BUFFER$BytesPerSector$VH_ = REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerSector"));
    static final java.lang.invoke.VarHandle REFS_VOLUME_DATA_BUFFER$BytesPerSector$VH() { return REFS_VOLUME_DATA_BUFFER$BytesPerSector$VH_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$BytesPerCluster$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$BytesPerCluster$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$BytesPerCluster$LAYOUT_; }

    static final VarHandle REFS_VOLUME_DATA_BUFFER$BytesPerCluster$VH_ = REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BytesPerCluster"));
    static final java.lang.invoke.VarHandle REFS_VOLUME_DATA_BUFFER$BytesPerCluster$VH() { return REFS_VOLUME_DATA_BUFFER$BytesPerCluster$VH_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$FastTierDataFillRatio$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$FastTierDataFillRatio$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$FastTierDataFillRatio$LAYOUT_; }

    static final VarHandle REFS_VOLUME_DATA_BUFFER$FastTierDataFillRatio$VH_ = REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FastTierDataFillRatio"));
    static final java.lang.invoke.VarHandle REFS_VOLUME_DATA_BUFFER$FastTierDataFillRatio$VH() { return REFS_VOLUME_DATA_BUFFER$FastTierDataFillRatio$VH_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$SlowTierDataFillRatio$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$SlowTierDataFillRatio$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$SlowTierDataFillRatio$LAYOUT_; }

    static final VarHandle REFS_VOLUME_DATA_BUFFER$SlowTierDataFillRatio$VH_ = REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SlowTierDataFillRatio"));
    static final java.lang.invoke.VarHandle REFS_VOLUME_DATA_BUFFER$SlowTierDataFillRatio$VH() { return REFS_VOLUME_DATA_BUFFER$SlowTierDataFillRatio$VH_; }

    static final MemoryLayout REFS_VOLUME_DATA_BUFFER$DestagesFastTierToSlowTierRate$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout REFS_VOLUME_DATA_BUFFER$DestagesFastTierToSlowTierRate$LAYOUT() { return REFS_VOLUME_DATA_BUFFER$DestagesFastTierToSlowTierRate$LAYOUT_; }

    static final VarHandle REFS_VOLUME_DATA_BUFFER$DestagesFastTierToSlowTierRate$VH_ = REFS_VOLUME_DATA_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DestagesFastTierToSlowTierRate"));
    static final java.lang.invoke.VarHandle REFS_VOLUME_DATA_BUFFER$DestagesFastTierToSlowTierRate$VH() { return REFS_VOLUME_DATA_BUFFER$DestagesFastTierToSlowTierRate$VH_; }

    static final MemoryLayout STARTING_LCN_INPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingLcn")
    );
    static final jdk.incubator.foreign.MemoryLayout STARTING_LCN_INPUT_BUFFER$struct$LAYOUT() { return STARTING_LCN_INPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout STARTING_LCN_INPUT_BUFFER_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingLcn"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout STARTING_LCN_INPUT_BUFFER_EX$struct$LAYOUT() { return STARTING_LCN_INPUT_BUFFER_EX$struct$LAYOUT_; }

    static final MemoryLayout STARTING_LCN_INPUT_BUFFER_EX$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout STARTING_LCN_INPUT_BUFFER_EX$Flags$LAYOUT() { return STARTING_LCN_INPUT_BUFFER_EX$Flags$LAYOUT_; }

    static final VarHandle STARTING_LCN_INPUT_BUFFER_EX$Flags$VH_ = STARTING_LCN_INPUT_BUFFER_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle STARTING_LCN_INPUT_BUFFER_EX$Flags$VH() { return STARTING_LCN_INPUT_BUFFER_EX$Flags$VH_; }

    static final MemoryLayout VOLUME_BITMAP_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingLcn"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("BitmapSize"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Buffer"),
        MemoryLayout.ofPaddingBits(56)
    );
    static final jdk.incubator.foreign.MemoryLayout VOLUME_BITMAP_BUFFER$struct$LAYOUT() { return VOLUME_BITMAP_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout STARTING_VCN_INPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingVcn")
    );
    static final jdk.incubator.foreign.MemoryLayout STARTING_VCN_INPUT_BUFFER$struct$LAYOUT() { return STARTING_VCN_INPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout RETRIEVAL_POINTERS_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExtentCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingVcn"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("NextVcn"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("Lcn")
        )).withName("Extents")
    ).withName("RETRIEVAL_POINTERS_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout RETRIEVAL_POINTERS_BUFFER$struct$LAYOUT() { return RETRIEVAL_POINTERS_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout RETRIEVAL_POINTERS_BUFFER$ExtentCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout RETRIEVAL_POINTERS_BUFFER$ExtentCount$LAYOUT() { return RETRIEVAL_POINTERS_BUFFER$ExtentCount$LAYOUT_; }

    static final VarHandle RETRIEVAL_POINTERS_BUFFER$ExtentCount$VH_ = RETRIEVAL_POINTERS_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtentCount"));
    static final java.lang.invoke.VarHandle RETRIEVAL_POINTERS_BUFFER$ExtentCount$VH() { return RETRIEVAL_POINTERS_BUFFER$ExtentCount$VH_; }

    static final MemoryLayout RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExtentCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingVcn"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("NextVcn"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("Lcn"),
            C_LONG.withName("ReferenceCount"),
            MemoryLayout.ofPaddingBits(32)
        )).withName("Extents")
    ).withName("RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$struct$LAYOUT() { return RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$ExtentCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$ExtentCount$LAYOUT() { return RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$ExtentCount$LAYOUT_; }

    static final VarHandle RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$ExtentCount$VH_ = RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtentCount"));
    static final java.lang.invoke.VarHandle RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$ExtentCount$VH() { return RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER$ExtentCount$VH_; }

    static final MemoryLayout RETRIEVAL_POINTER_COUNT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExtentCount")
    ).withName("RETRIEVAL_POINTER_COUNT");
    static final jdk.incubator.foreign.MemoryLayout RETRIEVAL_POINTER_COUNT$struct$LAYOUT() { return RETRIEVAL_POINTER_COUNT$struct$LAYOUT_; }

    static final MemoryLayout RETRIEVAL_POINTER_COUNT$ExtentCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout RETRIEVAL_POINTER_COUNT$ExtentCount$LAYOUT() { return RETRIEVAL_POINTER_COUNT$ExtentCount$LAYOUT_; }

    static final VarHandle RETRIEVAL_POINTER_COUNT$ExtentCount$VH_ = RETRIEVAL_POINTER_COUNT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtentCount"));
    static final java.lang.invoke.VarHandle RETRIEVAL_POINTER_COUNT$ExtentCount$VH() { return RETRIEVAL_POINTER_COUNT$ExtentCount$VH_; }

    static final MemoryLayout NTFS_FILE_RECORD_INPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileReferenceNumber")
    );
    static final jdk.incubator.foreign.MemoryLayout NTFS_FILE_RECORD_INPUT_BUFFER$struct$LAYOUT() { return NTFS_FILE_RECORD_INPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout NTFS_FILE_RECORD_OUTPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileReferenceNumber"),
        C_LONG.withName("FileRecordLength"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("FileRecordBuffer"),
        MemoryLayout.ofPaddingBits(24)
    );
    static final jdk.incubator.foreign.MemoryLayout NTFS_FILE_RECORD_OUTPUT_BUFFER$struct$LAYOUT() { return NTFS_FILE_RECORD_OUTPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout NTFS_FILE_RECORD_OUTPUT_BUFFER$FileRecordLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NTFS_FILE_RECORD_OUTPUT_BUFFER$FileRecordLength$LAYOUT() { return NTFS_FILE_RECORD_OUTPUT_BUFFER$FileRecordLength$LAYOUT_; }

    static final VarHandle NTFS_FILE_RECORD_OUTPUT_BUFFER$FileRecordLength$VH_ = NTFS_FILE_RECORD_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileRecordLength"));
    static final java.lang.invoke.VarHandle NTFS_FILE_RECORD_OUTPUT_BUFFER$FileRecordLength$VH() { return NTFS_FILE_RECORD_OUTPUT_BUFFER$FileRecordLength$VH_; }

    static final MemoryLayout MOVE_FILE_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("FileHandle"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingVcn"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingLcn"),
        C_LONG.withName("ClusterCount"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout MOVE_FILE_DATA$struct$LAYOUT() { return MOVE_FILE_DATA$struct$LAYOUT_; }

    static final MemoryLayout MOVE_FILE_DATA$FileHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout MOVE_FILE_DATA$FileHandle$LAYOUT() { return MOVE_FILE_DATA$FileHandle$LAYOUT_; }

    static final VarHandle MOVE_FILE_DATA$FileHandle$VH_ = MemoryHandles.asAddressVarHandle(MOVE_FILE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileHandle")));
    static final java.lang.invoke.VarHandle MOVE_FILE_DATA$FileHandle$VH() { return MOVE_FILE_DATA$FileHandle$VH_; }

    static final MemoryLayout MOVE_FILE_DATA$ClusterCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout MOVE_FILE_DATA$ClusterCount$LAYOUT() { return MOVE_FILE_DATA$ClusterCount$LAYOUT_; }

    static final VarHandle MOVE_FILE_DATA$ClusterCount$VH_ = MOVE_FILE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ClusterCount"));
    static final java.lang.invoke.VarHandle MOVE_FILE_DATA$ClusterCount$VH() { return MOVE_FILE_DATA$ClusterCount$VH_; }

    static final MemoryLayout MOVE_FILE_RECORD_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("FileHandle"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("SourceFileRecord"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TargetFileRecord")
    );
    static final jdk.incubator.foreign.MemoryLayout MOVE_FILE_RECORD_DATA$struct$LAYOUT() { return MOVE_FILE_RECORD_DATA$struct$LAYOUT_; }

    static final MemoryLayout MOVE_FILE_RECORD_DATA$FileHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout MOVE_FILE_RECORD_DATA$FileHandle$LAYOUT() { return MOVE_FILE_RECORD_DATA$FileHandle$LAYOUT_; }

    static final VarHandle MOVE_FILE_RECORD_DATA$FileHandle$VH_ = MemoryHandles.asAddressVarHandle(MOVE_FILE_RECORD_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileHandle")));
    static final java.lang.invoke.VarHandle MOVE_FILE_RECORD_DATA$FileHandle$VH() { return MOVE_FILE_RECORD_DATA$FileHandle$VH_; }

    static final MemoryLayout _MOVE_FILE_DATA32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FileHandle"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingVcn"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingLcn"),
        C_LONG.withName("ClusterCount"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_MOVE_FILE_DATA32");
    static final jdk.incubator.foreign.MemoryLayout _MOVE_FILE_DATA32$struct$LAYOUT() { return _MOVE_FILE_DATA32$struct$LAYOUT_; }

    static final MemoryLayout _MOVE_FILE_DATA32$FileHandle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _MOVE_FILE_DATA32$FileHandle$LAYOUT() { return _MOVE_FILE_DATA32$FileHandle$LAYOUT_; }

    static final VarHandle _MOVE_FILE_DATA32$FileHandle$VH_ = _MOVE_FILE_DATA32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileHandle"));
    static final java.lang.invoke.VarHandle _MOVE_FILE_DATA32$FileHandle$VH() { return _MOVE_FILE_DATA32$FileHandle$VH_; }

    static final MemoryLayout _MOVE_FILE_DATA32$ClusterCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MOVE_FILE_DATA32$ClusterCount$LAYOUT() { return _MOVE_FILE_DATA32$ClusterCount$LAYOUT_; }

    static final VarHandle _MOVE_FILE_DATA32$ClusterCount$VH_ = _MOVE_FILE_DATA32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ClusterCount"));
    static final java.lang.invoke.VarHandle _MOVE_FILE_DATA32$ClusterCount$VH() { return _MOVE_FILE_DATA32$ClusterCount$VH_; }

    static final MemoryLayout FIND_BY_SID_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Restart"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Revision"),
            C_CHAR.withName("SubAuthorityCount"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(6, C_CHAR).withName("Value")
            ).withName("IdentifierAuthority"),
            MemoryLayout.ofSequence(1, C_LONG).withName("SubAuthority")
        ).withName("Sid")
    );
    static final jdk.incubator.foreign.MemoryLayout FIND_BY_SID_DATA$struct$LAYOUT() { return FIND_BY_SID_DATA$struct$LAYOUT_; }

    static final MemoryLayout FIND_BY_SID_DATA$Restart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout FIND_BY_SID_DATA$Restart$LAYOUT() { return FIND_BY_SID_DATA$Restart$LAYOUT_; }

    static final VarHandle FIND_BY_SID_DATA$Restart$VH_ = FIND_BY_SID_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Restart"));
    static final java.lang.invoke.VarHandle FIND_BY_SID_DATA$Restart$VH() { return FIND_BY_SID_DATA$Restart$VH_; }

}

