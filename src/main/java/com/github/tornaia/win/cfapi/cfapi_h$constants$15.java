// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$15 extends cfapi_h$constants$14 {

    /* package-private */ cfapi_h$constants$15() {}
    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidCount"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidCount$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidLength"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$SidLength$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Sids$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Sids$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$Sids$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sids")));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$Sids$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RestrictedSidCount"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidCount$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RestrictedSidLength"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSidLength$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RestrictedSids")));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$RestrictedSids$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeCount$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH_ = _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeLength"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$PrivilegeLength$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Privileges")));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH() { return _TOKEN_GROUPS_AND_PRIVILEGES$Privileges$VH_; }

    static final MemoryLayout _TOKEN_LINKED_TOKEN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("LinkedToken")
    ).withName("_TOKEN_LINKED_TOKEN");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_LINKED_TOKEN$struct$LAYOUT() { return _TOKEN_LINKED_TOKEN$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_LINKED_TOKEN$LinkedToken$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_LINKED_TOKEN$LinkedToken$LAYOUT() { return _TOKEN_LINKED_TOKEN$LinkedToken$LAYOUT_; }

    static final VarHandle _TOKEN_LINKED_TOKEN$LinkedToken$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_LINKED_TOKEN$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LinkedToken")));
    static final java.lang.invoke.VarHandle _TOKEN_LINKED_TOKEN$LinkedToken$VH() { return _TOKEN_LINKED_TOKEN$LinkedToken$VH_; }

    static final MemoryLayout _TOKEN_ELEVATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("TokenIsElevated")
    ).withName("_TOKEN_ELEVATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ELEVATION$struct$LAYOUT() { return _TOKEN_ELEVATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_ELEVATION$TokenIsElevated$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ELEVATION$TokenIsElevated$LAYOUT() { return _TOKEN_ELEVATION$TokenIsElevated$LAYOUT_; }

    static final VarHandle _TOKEN_ELEVATION$TokenIsElevated$VH_ = _TOKEN_ELEVATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenIsElevated"));
    static final java.lang.invoke.VarHandle _TOKEN_ELEVATION$TokenIsElevated$VH() { return _TOKEN_ELEVATION$TokenIsElevated$VH_; }

    static final MemoryLayout _TOKEN_MANDATORY_LABEL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_LONG.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("Label")
    ).withName("_TOKEN_MANDATORY_LABEL");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_MANDATORY_LABEL$struct$LAYOUT() { return _TOKEN_MANDATORY_LABEL$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_MANDATORY_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Policy")
    ).withName("_TOKEN_MANDATORY_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_MANDATORY_POLICY$struct$LAYOUT() { return _TOKEN_MANDATORY_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_MANDATORY_POLICY$Policy$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_MANDATORY_POLICY$Policy$LAYOUT() { return _TOKEN_MANDATORY_POLICY$Policy$LAYOUT_; }

    static final VarHandle _TOKEN_MANDATORY_POLICY$Policy$VH_ = _TOKEN_MANDATORY_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Policy"));
    static final java.lang.invoke.VarHandle _TOKEN_MANDATORY_POLICY$Policy$VH() { return _TOKEN_MANDATORY_POLICY$Policy$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("SidHash"),
        C_POINTER.withName("RestrictedSidHash"),
        C_POINTER.withName("Privileges"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("AuthenticationId"),
        C_INT.withName("TokenType"),
        C_INT.withName("ImpersonationLevel"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Policy")
        ).withName("MandatoryPolicy"),
        C_LONG.withName("Flags"),
        C_LONG.withName("AppContainerNumber"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("PackageSid"),
        C_POINTER.withName("CapabilitiesHash"),
        C_POINTER.withName("TrustLevelSid"),
        C_POINTER.withName("SecurityAttributes")
    ).withName("_TOKEN_ACCESS_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$struct$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$SidHash$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$SidHash$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$SidHash$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$SidHash$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SidHash")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$SidHash$VH() { return _TOKEN_ACCESS_INFORMATION$SidHash$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RestrictedSidHash")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH() { return _TOKEN_ACCESS_INFORMATION$RestrictedSidHash$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$Privileges$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$Privileges$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$Privileges$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$Privileges$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Privileges")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$Privileges$VH() { return _TOKEN_ACCESS_INFORMATION$Privileges$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$TokenType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$TokenType$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$TokenType$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$TokenType$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenType"));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$TokenType$VH() { return _TOKEN_ACCESS_INFORMATION$TokenType$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH() { return _TOKEN_ACCESS_INFORMATION$ImpersonationLevel$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$Flags$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$Flags$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$Flags$VH() { return _TOKEN_ACCESS_INFORMATION$Flags$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$AppContainerNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$AppContainerNumber$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$AppContainerNumber$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH_ = _TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AppContainerNumber"));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH() { return _TOKEN_ACCESS_INFORMATION$AppContainerNumber$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$PackageSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$PackageSid$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$PackageSid$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$PackageSid$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PackageSid")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$PackageSid$VH() { return _TOKEN_ACCESS_INFORMATION$PackageSid$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CapabilitiesHash")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH() { return _TOKEN_ACCESS_INFORMATION$CapabilitiesHash$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$TrustLevelSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$TrustLevelSid$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$TrustLevelSid$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TrustLevelSid")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH() { return _TOKEN_ACCESS_INFORMATION$TrustLevelSid$VH_; }

    static final MemoryLayout _TOKEN_ACCESS_INFORMATION$SecurityAttributes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ACCESS_INFORMATION$SecurityAttributes$LAYOUT() { return _TOKEN_ACCESS_INFORMATION$SecurityAttributes$LAYOUT_; }

    static final VarHandle _TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_ACCESS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SecurityAttributes")));
    static final java.lang.invoke.VarHandle _TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH() { return _TOKEN_ACCESS_INFORMATION$SecurityAttributes$VH_; }

    static final MemoryLayout _TOKEN_AUDIT_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(30, C_CHAR).withName("PerUserPolicy")
    ).withName("_TOKEN_AUDIT_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_AUDIT_POLICY$struct$LAYOUT() { return _TOKEN_AUDIT_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_SOURCE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(8, C_CHAR).withName("SourceName"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("SourceIdentifier")
    ).withName("_TOKEN_SOURCE");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_SOURCE$struct$LAYOUT() { return _TOKEN_SOURCE$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_STATISTICS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("TokenId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("AuthenticationId"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ExpirationTime"),
        C_INT.withName("TokenType"),
        C_INT.withName("ImpersonationLevel"),
        C_LONG.withName("DynamicCharged"),
        C_LONG.withName("DynamicAvailable"),
        C_LONG.withName("GroupCount"),
        C_LONG.withName("PrivilegeCount"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("ModifiedId")
    ).withName("_TOKEN_STATISTICS");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$struct$LAYOUT() { return _TOKEN_STATISTICS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_STATISTICS$TokenType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$TokenType$LAYOUT() { return _TOKEN_STATISTICS$TokenType$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$TokenType$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenType"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$TokenType$VH() { return _TOKEN_STATISTICS$TokenType$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$ImpersonationLevel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$ImpersonationLevel$LAYOUT() { return _TOKEN_STATISTICS$ImpersonationLevel$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$ImpersonationLevel$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$ImpersonationLevel$VH() { return _TOKEN_STATISTICS$ImpersonationLevel$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$DynamicCharged$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$DynamicCharged$LAYOUT() { return _TOKEN_STATISTICS$DynamicCharged$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$DynamicCharged$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DynamicCharged"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$DynamicCharged$VH() { return _TOKEN_STATISTICS$DynamicCharged$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$DynamicAvailable$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$DynamicAvailable$LAYOUT() { return _TOKEN_STATISTICS$DynamicAvailable$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$DynamicAvailable$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DynamicAvailable"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$DynamicAvailable$VH() { return _TOKEN_STATISTICS$DynamicAvailable$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$GroupCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$GroupCount$LAYOUT() { return _TOKEN_STATISTICS$GroupCount$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$GroupCount$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GroupCount"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$GroupCount$VH() { return _TOKEN_STATISTICS$GroupCount$VH_; }

    static final MemoryLayout _TOKEN_STATISTICS$PrivilegeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_STATISTICS$PrivilegeCount$LAYOUT() { return _TOKEN_STATISTICS$PrivilegeCount$LAYOUT_; }

    static final VarHandle _TOKEN_STATISTICS$PrivilegeCount$VH_ = _TOKEN_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    static final java.lang.invoke.VarHandle _TOKEN_STATISTICS$PrivilegeCount$VH() { return _TOKEN_STATISTICS$PrivilegeCount$VH_; }

    static final MemoryLayout _TOKEN_CONTROL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("TokenId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("AuthenticationId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("ModifiedId"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(8, C_CHAR).withName("SourceName"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("SourceIdentifier")
        ).withName("TokenSource")
    ).withName("_TOKEN_CONTROL");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_CONTROL$struct$LAYOUT() { return _TOKEN_CONTROL$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_ORIGIN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("OriginatingLogonSession")
    ).withName("_TOKEN_ORIGIN");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_ORIGIN$struct$LAYOUT() { return _TOKEN_ORIGIN$struct$LAYOUT_; }

    static final int MandatoryLevelUntrusted() { return (int)0L; }

    static final int MandatoryLevelLow() { return (int)1L; }

    static final int MandatoryLevelMedium() { return (int)2L; }

    static final int MandatoryLevelHigh() { return (int)3L; }

    static final int MandatoryLevelSystem() { return (int)4L; }

    static final int MandatoryLevelSecureProcess() { return (int)5L; }

    static final int MandatoryLevelCount() { return (int)6L; }

    static final MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("TokenAppContainer")
    ).withName("_TOKEN_APPCONTAINER_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT() { return _TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$LAYOUT() { return _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$LAYOUT_; }

    static final VarHandle _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_APPCONTAINER_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TokenAppContainer")));
    static final java.lang.invoke.VarHandle _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH() { return _TOKEN_APPCONTAINER_INFORMATION$TokenAppContainer$VH_; }

    static final MemoryLayout _TOKEN_SID_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Sid")
    ).withName("_TOKEN_SID_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_SID_INFORMATION$struct$LAYOUT() { return _TOKEN_SID_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_SID_INFORMATION$Sid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_SID_INFORMATION$Sid$LAYOUT() { return _TOKEN_SID_INFORMATION$Sid$LAYOUT_; }

    static final VarHandle _TOKEN_SID_INFORMATION$Sid$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_SID_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sid")));
    static final java.lang.invoke.VarHandle _TOKEN_SID_INFORMATION$Sid$VH() { return _TOKEN_SID_INFORMATION$Sid$VH_; }

    static final MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("IsolationPrefix"),
        C_CHAR.withName("IsolationEnabled"),
        MemoryLayout.ofPaddingBits(56)
    ).withName("_TOKEN_BNO_ISOLATION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT() { return _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$LAYOUT() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$LAYOUT_; }

    static final VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsolationPrefix")));
    static final java.lang.invoke.VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationPrefix$VH_; }

    static final MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$LAYOUT() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$LAYOUT_; }

    static final VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH_ = _TOKEN_BNO_ISOLATION_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsolationEnabled"));
    static final java.lang.invoke.VarHandle _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH() { return _TOKEN_BNO_ISOLATION_INFORMATION$IsolationEnabled$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Version"),
        C_POINTER.withName("Name")
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH_ = _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Version$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Name")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH() { return _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE$Name$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pValue"),
        C_LONG.withName("ValueLength"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pValue")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$pValue$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH_ = _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ValueLength"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH() { return _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE$ValueLength$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Name"),
        C_SHORT.withName("ValueType"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ValueCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_POINTER.withName("pInt64"),
            C_POINTER.withName("pUint64"),
            C_POINTER.withName("ppString"),
            C_POINTER.withName("pFqbn"),
            C_POINTER.withName("pOctetString")
        ).withName("Values")
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_V1");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Name$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Name$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Name$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Name")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Name$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ValueType"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueType$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Reserved$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Flags$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH_ = _CLAIM_SECURITY_ATTRIBUTE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ValueCount"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$ValueCount$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("pInt64"),
        C_POINTER.withName("pUint64"),
        C_POINTER.withName("ppString"),
        C_POINTER.withName("pFqbn"),
        C_POINTER.withName("pOctetString")
    );
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pInt64")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pInt64$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUint64")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pUint64$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ppString")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$ppString$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pFqbn")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pFqbn$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTE_V1$Values$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pOctetString")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH() { return _CLAIM_SECURITY_ATTRIBUTE_V1$Values$pOctetString$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Name"),
        C_SHORT.withName("ValueType"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ValueCount"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofSequence(1, C_LONG).withName("pInt64"),
            MemoryLayout.ofSequence(1, C_LONG).withName("pUint64"),
            MemoryLayout.ofSequence(1, C_LONG).withName("ppString"),
            MemoryLayout.ofSequence(1, C_LONG).withName("pFqbn"),
            MemoryLayout.ofSequence(1, C_LONG).withName("pOctetString")
        ).withName("Values")
    ).withName("_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Name"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Name$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ValueType"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueType$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Reserved$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Flags$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH_ = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ValueCount"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$ValueCount$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Values$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofSequence(1, C_LONG).withName("pInt64"),
        MemoryLayout.ofSequence(1, C_LONG).withName("pUint64"),
        MemoryLayout.ofSequence(1, C_LONG).withName("ppString"),
        MemoryLayout.ofSequence(1, C_LONG).withName("pFqbn"),
        MemoryLayout.ofSequence(1, C_LONG).withName("pOctetString")
    );
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Values$union$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1$Values$union$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Version"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("AttributeCount"),
        MemoryLayout.ofUnion(
            C_POINTER.withName("pAttributeV1")
        ).withName("Attribute")
    ).withName("_CLAIM_SECURITY_ATTRIBUTES_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH_ = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Version$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH_ = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Reserved$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH_ = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AttributeCount"));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$AttributeCount$VH_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("pAttributeV1")
    );
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$union$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$union$LAYOUT_; }

    static final MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$LAYOUT() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$LAYOUT_; }

    static final VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH_ = MemoryHandles.asAddressVarHandle(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$union$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAttributeV1")));
    static final java.lang.invoke.VarHandle _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH() { return _CLAIM_SECURITY_ATTRIBUTES_INFORMATION$Attribute$pAttributeV1$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Length"),
        C_INT.withName("ImpersonationLevel"),
        C_CHAR.withName("ContextTrackingMode"),
        C_CHAR.withName("EffectiveOnly"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_SECURITY_QUALITY_OF_SERVICE");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$Length$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$Length$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$Length$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$Length$VH() { return _SECURITY_QUALITY_OF_SERVICE$Length$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    static final java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH() { return _SECURITY_QUALITY_OF_SERVICE$ImpersonationLevel$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ContextTrackingMode"));
    static final java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH() { return _SECURITY_QUALITY_OF_SERVICE$ContextTrackingMode$VH_; }

    static final MemoryLayout _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$LAYOUT() { return _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$LAYOUT_; }

    static final VarHandle _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH_ = _SECURITY_QUALITY_OF_SERVICE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EffectiveOnly"));
    static final java.lang.invoke.VarHandle _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH() { return _SECURITY_QUALITY_OF_SERVICE$EffectiveOnly$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Token"),
        C_CHAR.withName("CopyOnOpen"),
        C_CHAR.withName("EffectiveOnly"),
        MemoryLayout.ofPaddingBits(16),
        C_INT.withName("Level")
    ).withName("_SE_IMPERSONATION_STATE");
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$struct$LAYOUT() { return _SE_IMPERSONATION_STATE$struct$LAYOUT_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$Token$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$Token$LAYOUT() { return _SE_IMPERSONATION_STATE$Token$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$Token$VH_ = MemoryHandles.asAddressVarHandle(_SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Token")));
    static final java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$Token$VH() { return _SE_IMPERSONATION_STATE$Token$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$CopyOnOpen$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$CopyOnOpen$LAYOUT() { return _SE_IMPERSONATION_STATE$CopyOnOpen$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$CopyOnOpen$VH_ = _SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("CopyOnOpen"));
    static final java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$CopyOnOpen$VH() { return _SE_IMPERSONATION_STATE$CopyOnOpen$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$EffectiveOnly$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$EffectiveOnly$LAYOUT() { return _SE_IMPERSONATION_STATE$EffectiveOnly$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$EffectiveOnly$VH_ = _SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EffectiveOnly"));
    static final java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$EffectiveOnly$VH() { return _SE_IMPERSONATION_STATE$EffectiveOnly$VH_; }

    static final MemoryLayout _SE_IMPERSONATION_STATE$Level$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SE_IMPERSONATION_STATE$Level$LAYOUT() { return _SE_IMPERSONATION_STATE$Level$LAYOUT_; }

    static final VarHandle _SE_IMPERSONATION_STATE$Level$VH_ = _SE_IMPERSONATION_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Level"));
    static final java.lang.invoke.VarHandle _SE_IMPERSONATION_STATE$Level$VH() { return _SE_IMPERSONATION_STATE$Level$VH_; }

    static final int SeImageSignatureNone() { return (int)0L; }

    static final int SeImageSignatureEmbedded() { return (int)1L; }

    static final int SeImageSignatureCache() { return (int)2L; }

    static final int SeImageSignatureCatalogCached() { return (int)3L; }

    static final int SeImageSignatureCatalogNotCached() { return (int)4L; }

    static final int SeImageSignatureCatalogHint() { return (int)5L; }

    static final int SeImageSignaturePackageCatalog() { return (int)6L; }

    static final int SeLearningModeInvalidType() { return (int)0L; }

    static final int SeLearningModeSettings() { return (int)1L; }

    static final int SeLearningModeMax() { return (int)2L; }

    static final MemoryLayout _SECURITY_CAPABILITIES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("AppContainerSid"),
        C_POINTER.withName("Capabilities"),
        C_LONG.withName("CapabilityCount"),
        C_LONG.withName("Reserved")
    ).withName("_SECURITY_CAPABILITIES");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$struct$LAYOUT() { return _SECURITY_CAPABILITIES$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$AppContainerSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$AppContainerSid$LAYOUT() { return _SECURITY_CAPABILITIES$AppContainerSid$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$AppContainerSid$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AppContainerSid")));
    static final java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$AppContainerSid$VH() { return _SECURITY_CAPABILITIES$AppContainerSid$VH_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$Capabilities$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$Capabilities$LAYOUT() { return _SECURITY_CAPABILITIES$Capabilities$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$Capabilities$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Capabilities")));
    static final java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$Capabilities$VH() { return _SECURITY_CAPABILITIES$Capabilities$VH_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$CapabilityCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$CapabilityCount$LAYOUT() { return _SECURITY_CAPABILITIES$CapabilityCount$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$CapabilityCount$VH_ = _SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CapabilityCount"));
    static final java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$CapabilityCount$VH() { return _SECURITY_CAPABILITIES$CapabilityCount$VH_; }

    static final MemoryLayout _SECURITY_CAPABILITIES$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_CAPABILITIES$Reserved$LAYOUT() { return _SECURITY_CAPABILITIES$Reserved$LAYOUT_; }

    static final VarHandle _SECURITY_CAPABILITIES$Reserved$VH_ = _SECURITY_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _SECURITY_CAPABILITIES$Reserved$VH() { return _SECURITY_CAPABILITIES$Reserved$VH_; }

    static final MemoryLayout _JOB_SET_ARRAY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("JobHandle"),
        C_LONG.withName("MemberLevel"),
        C_LONG.withName("Flags")
    ).withName("_JOB_SET_ARRAY");
    static final jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$struct$LAYOUT() { return _JOB_SET_ARRAY$struct$LAYOUT_; }

    static final MemoryLayout _JOB_SET_ARRAY$JobHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$JobHandle$LAYOUT() { return _JOB_SET_ARRAY$JobHandle$LAYOUT_; }

    static final VarHandle _JOB_SET_ARRAY$JobHandle$VH_ = MemoryHandles.asAddressVarHandle(_JOB_SET_ARRAY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobHandle")));
    static final java.lang.invoke.VarHandle _JOB_SET_ARRAY$JobHandle$VH() { return _JOB_SET_ARRAY$JobHandle$VH_; }

    static final MemoryLayout _JOB_SET_ARRAY$MemberLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$MemberLevel$LAYOUT() { return _JOB_SET_ARRAY$MemberLevel$LAYOUT_; }

    static final VarHandle _JOB_SET_ARRAY$MemberLevel$VH_ = _JOB_SET_ARRAY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MemberLevel"));
    static final java.lang.invoke.VarHandle _JOB_SET_ARRAY$MemberLevel$VH() { return _JOB_SET_ARRAY$MemberLevel$VH_; }

    static final MemoryLayout _JOB_SET_ARRAY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOB_SET_ARRAY$Flags$LAYOUT() { return _JOB_SET_ARRAY$Flags$LAYOUT_; }

    static final VarHandle _JOB_SET_ARRAY$Flags$VH_ = _JOB_SET_ARRAY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _JOB_SET_ARRAY$Flags$VH() { return _JOB_SET_ARRAY$Flags$VH_; }

    static final MemoryLayout _EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Next"),
        C_POINTER.withName("Handler")
    ).withName("_EXCEPTION_REGISTRATION_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT() { return _EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Next$LAYOUT() { return _EXCEPTION_REGISTRATION_RECORD$Next$LAYOUT_; }

    static final VarHandle _EXCEPTION_REGISTRATION_RECORD$Next$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    static final java.lang.invoke.VarHandle _EXCEPTION_REGISTRATION_RECORD$Next$VH() { return _EXCEPTION_REGISTRATION_RECORD$Next$VH_; }

    static final MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Handler$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_REGISTRATION_RECORD$Handler$LAYOUT() { return _EXCEPTION_REGISTRATION_RECORD$Handler$LAYOUT_; }

    static final VarHandle _EXCEPTION_REGISTRATION_RECORD$Handler$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_REGISTRATION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Handler")));
    static final java.lang.invoke.VarHandle _EXCEPTION_REGISTRATION_RECORD$Handler$VH() { return _EXCEPTION_REGISTRATION_RECORD$Handler$VH_; }

    static final MemoryLayout _NT_TIB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("ExceptionList"),
        C_POINTER.withName("StackBase"),
        C_POINTER.withName("StackLimit"),
        C_POINTER.withName("SubSystemTib"),
        C_POINTER.withName("FiberData"),
        C_LONG.withName("Version"),
        C_POINTER.withName("ArbitraryUserPointer"),
        C_POINTER.withName("Self")
    ).withName("_NT_TIB");
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$struct$LAYOUT() { return _NT_TIB$struct$LAYOUT_; }

    static final MemoryLayout _NT_TIB$ExceptionList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$ExceptionList$LAYOUT() { return _NT_TIB$ExceptionList$LAYOUT_; }

    static final VarHandle _NT_TIB$ExceptionList$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionList")));
    static final java.lang.invoke.VarHandle _NT_TIB$ExceptionList$VH() { return _NT_TIB$ExceptionList$VH_; }

    static final MemoryLayout _NT_TIB$StackBase$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$StackBase$LAYOUT() { return _NT_TIB$StackBase$LAYOUT_; }

    static final VarHandle _NT_TIB$StackBase$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackBase")));
    static final java.lang.invoke.VarHandle _NT_TIB$StackBase$VH() { return _NT_TIB$StackBase$VH_; }

    static final MemoryLayout _NT_TIB$StackLimit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$StackLimit$LAYOUT() { return _NT_TIB$StackLimit$LAYOUT_; }

    static final VarHandle _NT_TIB$StackLimit$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackLimit")));
    static final java.lang.invoke.VarHandle _NT_TIB$StackLimit$VH() { return _NT_TIB$StackLimit$VH_; }

    static final MemoryLayout _NT_TIB$SubSystemTib$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$SubSystemTib$LAYOUT() { return _NT_TIB$SubSystemTib$LAYOUT_; }

    static final VarHandle _NT_TIB$SubSystemTib$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SubSystemTib")));
    static final java.lang.invoke.VarHandle _NT_TIB$SubSystemTib$VH() { return _NT_TIB$SubSystemTib$VH_; }

    static final MemoryLayout _NT_TIB$FiberData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$FiberData$LAYOUT() { return _NT_TIB$FiberData$LAYOUT_; }

    static final VarHandle _NT_TIB$FiberData$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FiberData")));
    static final java.lang.invoke.VarHandle _NT_TIB$FiberData$VH() { return _NT_TIB$FiberData$VH_; }

    static final MemoryLayout _NT_TIB$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$Version$LAYOUT() { return _NT_TIB$Version$LAYOUT_; }

    static final VarHandle _NT_TIB$Version$VH_ = _NT_TIB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NT_TIB$Version$VH() { return _NT_TIB$Version$VH_; }

    static final MemoryLayout _NT_TIB$ArbitraryUserPointer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$ArbitraryUserPointer$LAYOUT() { return _NT_TIB$ArbitraryUserPointer$LAYOUT_; }

    static final VarHandle _NT_TIB$ArbitraryUserPointer$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ArbitraryUserPointer")));
    static final java.lang.invoke.VarHandle _NT_TIB$ArbitraryUserPointer$VH() { return _NT_TIB$ArbitraryUserPointer$VH_; }

    static final MemoryLayout _NT_TIB$Self$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB$Self$LAYOUT() { return _NT_TIB$Self$LAYOUT_; }

    static final VarHandle _NT_TIB$Self$VH_ = MemoryHandles.asAddressVarHandle(_NT_TIB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Self")));
    static final java.lang.invoke.VarHandle _NT_TIB$Self$VH() { return _NT_TIB$Self$VH_; }

    static final MemoryLayout _NT_TIB32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExceptionList"),
        C_LONG.withName("StackBase"),
        C_LONG.withName("StackLimit"),
        C_LONG.withName("SubSystemTib"),
        C_LONG.withName("FiberData"),
        C_LONG.withName("Version"),
        C_LONG.withName("ArbitraryUserPointer"),
        C_LONG.withName("Self")
    ).withName("_NT_TIB32");
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$struct$LAYOUT() { return _NT_TIB32$struct$LAYOUT_; }

    static final MemoryLayout _NT_TIB32$ExceptionList$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$ExceptionList$LAYOUT() { return _NT_TIB32$ExceptionList$LAYOUT_; }

    static final VarHandle _NT_TIB32$ExceptionList$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionList"));
    static final java.lang.invoke.VarHandle _NT_TIB32$ExceptionList$VH() { return _NT_TIB32$ExceptionList$VH_; }

    static final MemoryLayout _NT_TIB32$StackBase$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$StackBase$LAYOUT() { return _NT_TIB32$StackBase$LAYOUT_; }

    static final VarHandle _NT_TIB32$StackBase$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StackBase"));
    static final java.lang.invoke.VarHandle _NT_TIB32$StackBase$VH() { return _NT_TIB32$StackBase$VH_; }

    static final MemoryLayout _NT_TIB32$StackLimit$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$StackLimit$LAYOUT() { return _NT_TIB32$StackLimit$LAYOUT_; }

    static final VarHandle _NT_TIB32$StackLimit$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StackLimit"));
    static final java.lang.invoke.VarHandle _NT_TIB32$StackLimit$VH() { return _NT_TIB32$StackLimit$VH_; }

    static final MemoryLayout _NT_TIB32$SubSystemTib$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$SubSystemTib$LAYOUT() { return _NT_TIB32$SubSystemTib$LAYOUT_; }

    static final VarHandle _NT_TIB32$SubSystemTib$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SubSystemTib"));
    static final java.lang.invoke.VarHandle _NT_TIB32$SubSystemTib$VH() { return _NT_TIB32$SubSystemTib$VH_; }

    static final MemoryLayout _NT_TIB32$FiberData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$FiberData$LAYOUT() { return _NT_TIB32$FiberData$LAYOUT_; }

    static final VarHandle _NT_TIB32$FiberData$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FiberData"));
    static final java.lang.invoke.VarHandle _NT_TIB32$FiberData$VH() { return _NT_TIB32$FiberData$VH_; }

    static final MemoryLayout _NT_TIB32$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$Version$LAYOUT() { return _NT_TIB32$Version$LAYOUT_; }

    static final VarHandle _NT_TIB32$Version$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NT_TIB32$Version$VH() { return _NT_TIB32$Version$VH_; }

    static final MemoryLayout _NT_TIB32$ArbitraryUserPointer$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$ArbitraryUserPointer$LAYOUT() { return _NT_TIB32$ArbitraryUserPointer$LAYOUT_; }

    static final VarHandle _NT_TIB32$ArbitraryUserPointer$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ArbitraryUserPointer"));
    static final java.lang.invoke.VarHandle _NT_TIB32$ArbitraryUserPointer$VH() { return _NT_TIB32$ArbitraryUserPointer$VH_; }

    static final MemoryLayout _NT_TIB32$Self$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB32$Self$LAYOUT() { return _NT_TIB32$Self$LAYOUT_; }

    static final VarHandle _NT_TIB32$Self$VH_ = _NT_TIB32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Self"));
    static final java.lang.invoke.VarHandle _NT_TIB32$Self$VH() { return _NT_TIB32$Self$VH_; }

    static final MemoryLayout _NT_TIB64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ExceptionList"),
        C_LONGLONG.withName("StackBase"),
        C_LONGLONG.withName("StackLimit"),
        C_LONGLONG.withName("SubSystemTib"),
        C_LONGLONG.withName("FiberData"),
        C_LONG.withName("Version"),
        C_LONGLONG.withName("ArbitraryUserPointer"),
        C_LONGLONG.withName("Self")
    ).withName("_NT_TIB64");
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$struct$LAYOUT() { return _NT_TIB64$struct$LAYOUT_; }

    static final MemoryLayout _NT_TIB64$ExceptionList$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$ExceptionList$LAYOUT() { return _NT_TIB64$ExceptionList$LAYOUT_; }

    static final VarHandle _NT_TIB64$ExceptionList$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionList"));
    static final java.lang.invoke.VarHandle _NT_TIB64$ExceptionList$VH() { return _NT_TIB64$ExceptionList$VH_; }

    static final MemoryLayout _NT_TIB64$StackBase$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$StackBase$LAYOUT() { return _NT_TIB64$StackBase$LAYOUT_; }

    static final VarHandle _NT_TIB64$StackBase$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackBase"));
    static final java.lang.invoke.VarHandle _NT_TIB64$StackBase$VH() { return _NT_TIB64$StackBase$VH_; }

    static final MemoryLayout _NT_TIB64$StackLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$StackLimit$LAYOUT() { return _NT_TIB64$StackLimit$LAYOUT_; }

    static final VarHandle _NT_TIB64$StackLimit$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackLimit"));
    static final java.lang.invoke.VarHandle _NT_TIB64$StackLimit$VH() { return _NT_TIB64$StackLimit$VH_; }

    static final MemoryLayout _NT_TIB64$SubSystemTib$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$SubSystemTib$LAYOUT() { return _NT_TIB64$SubSystemTib$LAYOUT_; }

    static final VarHandle _NT_TIB64$SubSystemTib$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SubSystemTib"));
    static final java.lang.invoke.VarHandle _NT_TIB64$SubSystemTib$VH() { return _NT_TIB64$SubSystemTib$VH_; }

    static final MemoryLayout _NT_TIB64$FiberData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$FiberData$LAYOUT() { return _NT_TIB64$FiberData$LAYOUT_; }

    static final VarHandle _NT_TIB64$FiberData$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FiberData"));
    static final java.lang.invoke.VarHandle _NT_TIB64$FiberData$VH() { return _NT_TIB64$FiberData$VH_; }

    static final MemoryLayout _NT_TIB64$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$Version$LAYOUT() { return _NT_TIB64$Version$LAYOUT_; }

    static final VarHandle _NT_TIB64$Version$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _NT_TIB64$Version$VH() { return _NT_TIB64$Version$VH_; }

    static final MemoryLayout _NT_TIB64$ArbitraryUserPointer$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$ArbitraryUserPointer$LAYOUT() { return _NT_TIB64$ArbitraryUserPointer$LAYOUT_; }

    static final VarHandle _NT_TIB64$ArbitraryUserPointer$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ArbitraryUserPointer"));
    static final java.lang.invoke.VarHandle _NT_TIB64$ArbitraryUserPointer$VH() { return _NT_TIB64$ArbitraryUserPointer$VH_; }

    static final MemoryLayout _NT_TIB64$Self$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NT_TIB64$Self$LAYOUT() { return _NT_TIB64$Self$LAYOUT_; }

    static final VarHandle _NT_TIB64$Self$VH_ = _NT_TIB64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Self"));
    static final java.lang.invoke.VarHandle _NT_TIB64$Self$VH() { return _NT_TIB64$Self$VH_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("UmsVersion"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("UmsContext"),
        C_POINTER.withName("UmsCompletionList")
    ).withName("_UMS_CREATE_THREAD_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$LAYOUT_; }

    static final VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH_ = _UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UmsVersion"));
    static final java.lang.invoke.VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsVersion$VH_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$LAYOUT_; }

    static final VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH_ = MemoryHandles.asAddressVarHandle(_UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UmsContext")));
    static final java.lang.invoke.VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsContext$VH_; }

    static final MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$LAYOUT() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$LAYOUT_; }

    static final VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH_ = MemoryHandles.asAddressVarHandle(_UMS_CREATE_THREAD_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UmsCompletionList")));
    static final java.lang.invoke.VarHandle _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH() { return _UMS_CREATE_THREAD_ATTRIBUTES$UmsCompletionList$VH_; }

    static final MemoryLayout _WOW64_ARCHITECTURE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    ).withName("_WOW64_ARCHITECTURE_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _WOW64_ARCHITECTURE_INFORMATION$struct$LAYOUT() { return _WOW64_ARCHITECTURE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("TargetAddress"),
        C_LONGLONG.withName("Flags")
    ).withName("_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TargetAddress"));
    static final java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$TargetAddress$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET$Flags$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("NumberOfTargets"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("Reserved2"),
        C_POINTER.withName("Targets")
    ).withName("_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfTargets"));
    static final java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$NumberOfTargets$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH_ = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Reserved2$VH_; }

    static final MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$LAYOUT() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$LAYOUT_; }

    static final VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH_ = MemoryHandles.asAddressVarHandle(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Targets")));
    static final java.lang.invoke.VarHandle _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH() { return _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION$Targets$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("PagedPoolLimit"),
        C_LONGLONG.withName("NonPagedPoolLimit"),
        C_LONGLONG.withName("MinimumWorkingSetSize"),
        C_LONGLONG.withName("MaximumWorkingSetSize"),
        C_LONGLONG.withName("PagefileLimit"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TimeLimit")
    ).withName("_QUOTA_LIMITS");
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$struct$LAYOUT() { return _QUOTA_LIMITS$struct$LAYOUT_; }

    static final MemoryLayout _QUOTA_LIMITS$PagedPoolLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$PagedPoolLimit$LAYOUT() { return _QUOTA_LIMITS$PagedPoolLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$PagedPoolLimit$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PagedPoolLimit"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS$PagedPoolLimit$VH() { return _QUOTA_LIMITS$PagedPoolLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$NonPagedPoolLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$NonPagedPoolLimit$LAYOUT() { return _QUOTA_LIMITS$NonPagedPoolLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$NonPagedPoolLimit$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NonPagedPoolLimit"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS$NonPagedPoolLimit$VH() { return _QUOTA_LIMITS$NonPagedPoolLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$MinimumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$MinimumWorkingSetSize$LAYOUT() { return _QUOTA_LIMITS$MinimumWorkingSetSize$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$MinimumWorkingSetSize$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MinimumWorkingSetSize"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS$MinimumWorkingSetSize$VH() { return _QUOTA_LIMITS$MinimumWorkingSetSize$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$MaximumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$MaximumWorkingSetSize$LAYOUT() { return _QUOTA_LIMITS$MaximumWorkingSetSize$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$MaximumWorkingSetSize$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumWorkingSetSize"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS$MaximumWorkingSetSize$VH() { return _QUOTA_LIMITS$MaximumWorkingSetSize$VH_; }

    static final MemoryLayout _QUOTA_LIMITS$PagefileLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS$PagefileLimit$LAYOUT() { return _QUOTA_LIMITS$PagefileLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS$PagefileLimit$VH_ = _QUOTA_LIMITS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PagefileLimit"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS$PagefileLimit$VH() { return _QUOTA_LIMITS$PagefileLimit$VH_; }

    static final MemoryLayout _RATE_QUOTA_LIMIT$union$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONG.withName("RateData"),
        C_INT
    ).withName("_RATE_QUOTA_LIMIT");
    static final jdk.incubator.foreign.MemoryLayout _RATE_QUOTA_LIMIT$union$LAYOUT() { return _RATE_QUOTA_LIMIT$union$LAYOUT_; }

    static final MemoryLayout _RATE_QUOTA_LIMIT$RateData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RATE_QUOTA_LIMIT$RateData$LAYOUT() { return _RATE_QUOTA_LIMIT$RateData$LAYOUT_; }

    static final VarHandle _RATE_QUOTA_LIMIT$RateData$VH_ = _RATE_QUOTA_LIMIT$union$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateData"));
    static final java.lang.invoke.VarHandle _RATE_QUOTA_LIMIT$RateData$VH() { return _RATE_QUOTA_LIMIT$RateData$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("PagedPoolLimit"),
        C_LONGLONG.withName("NonPagedPoolLimit"),
        C_LONGLONG.withName("MinimumWorkingSetSize"),
        C_LONGLONG.withName("MaximumWorkingSetSize"),
        C_LONGLONG.withName("PagefileLimit"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TimeLimit"),
        C_LONGLONG.withName("WorkingSetLimit"),
        C_LONGLONG.withName("Reserved2"),
        C_LONGLONG.withName("Reserved3"),
        C_LONGLONG.withName("Reserved4"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofUnion(
            C_LONG.withName("RateData"),
            C_INT
        ).withName("CpuRateLimit")
    ).withName("_QUOTA_LIMITS_EX");
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$struct$LAYOUT() { return _QUOTA_LIMITS_EX$struct$LAYOUT_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$PagedPoolLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$PagedPoolLimit$LAYOUT() { return _QUOTA_LIMITS_EX$PagedPoolLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$PagedPoolLimit$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PagedPoolLimit"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$PagedPoolLimit$VH() { return _QUOTA_LIMITS_EX$PagedPoolLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$NonPagedPoolLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$NonPagedPoolLimit$LAYOUT() { return _QUOTA_LIMITS_EX$NonPagedPoolLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$NonPagedPoolLimit$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NonPagedPoolLimit"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$NonPagedPoolLimit$VH() { return _QUOTA_LIMITS_EX$NonPagedPoolLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$MinimumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$MinimumWorkingSetSize$LAYOUT() { return _QUOTA_LIMITS_EX$MinimumWorkingSetSize$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MinimumWorkingSetSize"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH() { return _QUOTA_LIMITS_EX$MinimumWorkingSetSize$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$MaximumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$MaximumWorkingSetSize$LAYOUT() { return _QUOTA_LIMITS_EX$MaximumWorkingSetSize$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumWorkingSetSize"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH() { return _QUOTA_LIMITS_EX$MaximumWorkingSetSize$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$PagefileLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$PagefileLimit$LAYOUT() { return _QUOTA_LIMITS_EX$PagefileLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$PagefileLimit$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PagefileLimit"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$PagefileLimit$VH() { return _QUOTA_LIMITS_EX$PagefileLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$WorkingSetLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$WorkingSetLimit$LAYOUT() { return _QUOTA_LIMITS_EX$WorkingSetLimit$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$WorkingSetLimit$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("WorkingSetLimit"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$WorkingSetLimit$VH() { return _QUOTA_LIMITS_EX$WorkingSetLimit$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$Reserved2$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$Reserved2$LAYOUT() { return _QUOTA_LIMITS_EX$Reserved2$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$Reserved2$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$Reserved2$VH() { return _QUOTA_LIMITS_EX$Reserved2$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$Reserved3$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$Reserved3$LAYOUT() { return _QUOTA_LIMITS_EX$Reserved3$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$Reserved3$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved3"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$Reserved3$VH() { return _QUOTA_LIMITS_EX$Reserved3$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$Reserved4$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$Reserved4$LAYOUT() { return _QUOTA_LIMITS_EX$Reserved4$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$Reserved4$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved4"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$Reserved4$VH() { return _QUOTA_LIMITS_EX$Reserved4$VH_; }

    static final MemoryLayout _QUOTA_LIMITS_EX$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUOTA_LIMITS_EX$Flags$LAYOUT() { return _QUOTA_LIMITS_EX$Flags$LAYOUT_; }

    static final VarHandle _QUOTA_LIMITS_EX$Flags$VH_ = _QUOTA_LIMITS_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _QUOTA_LIMITS_EX$Flags$VH() { return _QUOTA_LIMITS_EX$Flags$VH_; }

    static final MemoryLayout _IO_COUNTERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ReadOperationCount"),
        C_LONGLONG.withName("WriteOperationCount"),
        C_LONGLONG.withName("OtherOperationCount"),
        C_LONGLONG.withName("ReadTransferCount"),
        C_LONGLONG.withName("WriteTransferCount"),
        C_LONGLONG.withName("OtherTransferCount")
    ).withName("_IO_COUNTERS");
    static final jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$struct$LAYOUT() { return _IO_COUNTERS$struct$LAYOUT_; }

    static final MemoryLayout _IO_COUNTERS$ReadOperationCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$ReadOperationCount$LAYOUT() { return _IO_COUNTERS$ReadOperationCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$ReadOperationCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReadOperationCount"));
    static final java.lang.invoke.VarHandle _IO_COUNTERS$ReadOperationCount$VH() { return _IO_COUNTERS$ReadOperationCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$WriteOperationCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$WriteOperationCount$LAYOUT() { return _IO_COUNTERS$WriteOperationCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$WriteOperationCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("WriteOperationCount"));
    static final java.lang.invoke.VarHandle _IO_COUNTERS$WriteOperationCount$VH() { return _IO_COUNTERS$WriteOperationCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$OtherOperationCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$OtherOperationCount$LAYOUT() { return _IO_COUNTERS$OtherOperationCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$OtherOperationCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OtherOperationCount"));
    static final java.lang.invoke.VarHandle _IO_COUNTERS$OtherOperationCount$VH() { return _IO_COUNTERS$OtherOperationCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$ReadTransferCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$ReadTransferCount$LAYOUT() { return _IO_COUNTERS$ReadTransferCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$ReadTransferCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReadTransferCount"));
    static final java.lang.invoke.VarHandle _IO_COUNTERS$ReadTransferCount$VH() { return _IO_COUNTERS$ReadTransferCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$WriteTransferCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$WriteTransferCount$LAYOUT() { return _IO_COUNTERS$WriteTransferCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$WriteTransferCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("WriteTransferCount"));
    static final java.lang.invoke.VarHandle _IO_COUNTERS$WriteTransferCount$VH() { return _IO_COUNTERS$WriteTransferCount$VH_; }

    static final MemoryLayout _IO_COUNTERS$OtherTransferCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IO_COUNTERS$OtherTransferCount$LAYOUT() { return _IO_COUNTERS$OtherTransferCount$LAYOUT_; }

    static final VarHandle _IO_COUNTERS$OtherTransferCount$VH_ = _IO_COUNTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OtherTransferCount"));
    static final java.lang.invoke.VarHandle _IO_COUNTERS$OtherTransferCount$VH() { return _IO_COUNTERS$OtherTransferCount$VH_; }

    static final int PMCCounter() { return (int)0L; }

    static final int MaxHardwareCounterType() { return (int)1L; }

    static final int ProcessDEPPolicy() { return (int)0L; }

    static final int ProcessASLRPolicy() { return (int)1L; }

    static final int ProcessDynamicCodePolicy() { return (int)2L; }

    static final int ProcessStrictHandleCheckPolicy() { return (int)3L; }

    static final int ProcessSystemCallDisablePolicy() { return (int)4L; }

    static final int ProcessMitigationOptionsMask() { return (int)5L; }

    static final int ProcessExtensionPointDisablePolicy() { return (int)6L; }

    static final int ProcessControlFlowGuardPolicy() { return (int)7L; }

    static final int ProcessSignaturePolicy() { return (int)8L; }

    static final int ProcessFontDisablePolicy() { return (int)9L; }

    static final int ProcessImageLoadPolicy() { return (int)10L; }

    static final int ProcessSystemCallFilterPolicy() { return (int)11L; }

    static final int ProcessPayloadRestrictionPolicy() { return (int)12L; }

    static final int ProcessChildProcessPolicy() { return (int)13L; }

    static final int ProcessSideChannelIsolationPolicy() { return (int)14L; }

    static final int ProcessUserShadowStackPolicy() { return (int)15L; }

    static final int MaxProcessMitigationPolicy() { return (int)16L; }

    static final MemoryLayout _PROCESS_MITIGATION_ASLR_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_ASLR_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_ASLR_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_ASLR_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_ASLR_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_ASLR_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_ASLR_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_ASLR_POLICY$Flags$VH_ = _PROCESS_MITIGATION_ASLR_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_ASLR_POLICY$Flags$VH() { return _PROCESS_MITIGATION_ASLR_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT,
        C_CHAR.withName("Permanent"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_PROCESS_MITIGATION_DEP_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_DEP_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_DEP_POLICY$Flags$VH_ = _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_DEP_POLICY$Flags$VH() { return _PROCESS_MITIGATION_DEP_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$Permanent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DEP_POLICY$Permanent$LAYOUT() { return _PROCESS_MITIGATION_DEP_POLICY$Permanent$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_DEP_POLICY$Permanent$VH_ = _PROCESS_MITIGATION_DEP_POLICY$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Permanent"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_DEP_POLICY$Permanent$VH() { return _PROCESS_MITIGATION_DEP_POLICY$Permanent$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH_ = _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH() { return _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH_ = _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH() { return _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_FONT_DISABLE_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_FONT_DISABLE_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_FONT_DISABLE_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_FONT_DISABLE_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH_ = _PROCESS_MITIGATION_FONT_DISABLE_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH() { return _PROCESS_MITIGATION_FONT_DISABLE_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_IMAGE_LOAD_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH_ = _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH() { return _PROCESS_MITIGATION_IMAGE_LOAD_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH_ = _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH() { return _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH_ = _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH() { return _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_CHILD_PROCESS_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH_ = _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH() { return _PROCESS_MITIGATION_CHILD_PROCESS_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH_ = _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH() { return _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY$Flags$VH_; }

    static final MemoryLayout _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_INT
    ).withName("_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY");
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$struct$LAYOUT() { return _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$struct$LAYOUT_; }

    static final MemoryLayout _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$LAYOUT() { return _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$LAYOUT_; }

    static final VarHandle _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH_ = _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH() { return _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY$Flags$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TotalUserTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TotalKernelTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ThisPeriodTotalUserTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ThisPeriodTotalKernelTime"),
        C_LONG.withName("TotalPageFaultCount"),
        C_LONG.withName("TotalProcesses"),
        C_LONG.withName("ActiveProcesses"),
        C_LONG.withName("TotalTerminatedProcesses")
    ).withName("_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH_ = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalPageFaultCount"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalPageFaultCount$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH_ = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalProcesses"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalProcesses$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH_ = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ActiveProcesses"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$ActiveProcesses$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$LAYOUT() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH_ = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalTerminatedProcesses"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH() { return _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION$TotalTerminatedProcesses$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerProcessUserTimeLimit"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONG.withName("LimitFlags"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("MinimumWorkingSetSize"),
        C_LONGLONG.withName("MaximumWorkingSetSize"),
        C_LONG.withName("ActiveProcessLimit"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Affinity"),
        C_LONG.withName("PriorityClass"),
        C_LONG.withName("SchedulingClass")
    ).withName("_JOBOBJECT_BASIC_LIMIT_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$LimitFlags$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MinimumWorkingSetSize"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$MinimumWorkingSetSize$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumWorkingSetSize"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$MaximumWorkingSetSize$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ActiveProcessLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$ActiveProcessLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Affinity"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$Affinity$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PriorityClass"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$PriorityClass$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$LAYOUT() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH_ = _JOBOBJECT_BASIC_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SchedulingClass"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH() { return _JOBOBJECT_BASIC_LIMIT_INFORMATION$SchedulingClass$VH_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("PerProcessUserTimeLimit"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("PerJobUserTimeLimit"),
            C_LONG.withName("LimitFlags"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("MinimumWorkingSetSize"),
            C_LONGLONG.withName("MaximumWorkingSetSize"),
            C_LONG.withName("ActiveProcessLimit"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("Affinity"),
            C_LONG.withName("PriorityClass"),
            C_LONG.withName("SchedulingClass")
        ).withName("BasicLimitInformation"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("ReadOperationCount"),
            C_LONGLONG.withName("WriteOperationCount"),
            C_LONGLONG.withName("OtherOperationCount"),
            C_LONGLONG.withName("ReadTransferCount"),
            C_LONGLONG.withName("WriteTransferCount"),
            C_LONGLONG.withName("OtherTransferCount")
        ).withName("IoInfo"),
        C_LONGLONG.withName("ProcessMemoryLimit"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_LONGLONG.withName("PeakProcessMemoryUsed"),
        C_LONGLONG.withName("PeakJobMemoryUsed")
    ).withName("_JOBOBJECT_EXTENDED_LIMIT_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH_ = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessMemoryLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$ProcessMemoryLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH_ = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$JobMemoryLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$LAYOUT_; }

    static final VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH_ = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PeakProcessMemoryUsed"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakProcessMemoryUsed$VH_; }

    static final MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$LAYOUT() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$LAYOUT_; }

    static final VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH_ = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PeakJobMemoryUsed"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH() { return _JOBOBJECT_EXTENDED_LIMIT_INFORMATION$PeakJobMemoryUsed$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfAssignedProcesses"),
        C_LONG.withName("NumberOfProcessIdsInList"),
        MemoryLayout.ofSequence(1, C_LONGLONG).withName("ProcessIdList")
    ).withName("_JOBOBJECT_BASIC_PROCESS_ID_LIST");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$LAYOUT() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH_ = _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfAssignedProcesses"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfAssignedProcesses$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$LAYOUT() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH_ = _JOBOBJECT_BASIC_PROCESS_ID_LIST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfProcessIdsInList"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH() { return _JOBOBJECT_BASIC_PROCESS_ID_LIST$NumberOfProcessIdsInList$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_UI_RESTRICTIONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("UIRestrictionsClass")
    ).withName("_JOBOBJECT_BASIC_UI_RESTRICTIONS");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_UI_RESTRICTIONS$struct$LAYOUT() { return _JOBOBJECT_BASIC_UI_RESTRICTIONS$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$LAYOUT() { return _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$LAYOUT_; }

    static final VarHandle _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH_ = _JOBOBJECT_BASIC_UI_RESTRICTIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UIRestrictionsClass"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH() { return _JOBOBJECT_BASIC_UI_RESTRICTIONS$UIRestrictionsClass$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SecurityLimitFlags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("JobToken"),
        C_POINTER.withName("SidsToDisable"),
        C_POINTER.withName("PrivilegesToDelete"),
        C_POINTER.withName("RestrictedSids")
    ).withName("_JOBOBJECT_SECURITY_LIMIT_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH_ = _JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityLimitFlags"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SecurityLimitFlags$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobToken")));
    static final java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$JobToken$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SidsToDisable")));
    static final java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$SidsToDisable$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrivilegesToDelete")));
    static final java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$PrivilegesToDelete$VH_; }

    static final MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$LAYOUT() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$LAYOUT_; }

    static final VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_SECURITY_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RestrictedSids")));
    static final java.lang.invoke.VarHandle _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH() { return _JOBOBJECT_SECURITY_LIMIT_INFORMATION$RestrictedSids$VH_; }

    static final MemoryLayout _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("EndOfJobTimeAction")
    ).withName("_JOBOBJECT_END_OF_JOB_TIME_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$LAYOUT() { return _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$LAYOUT_; }

    static final VarHandle _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH_ = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EndOfJobTimeAction"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH() { return _JOBOBJECT_END_OF_JOB_TIME_INFORMATION$EndOfJobTimeAction$VH_; }

    static final MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("CompletionKey"),
        C_POINTER.withName("CompletionPort")
    ).withName("_JOBOBJECT_ASSOCIATE_COMPLETION_PORT");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$LAYOUT() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$LAYOUT_; }

    static final VarHandle _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompletionKey")));
    static final java.lang.invoke.VarHandle _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionKey$VH_; }

    static final MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$LAYOUT() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$LAYOUT_; }

    static final VarHandle _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH_ = MemoryHandles.asAddressVarHandle(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompletionPort")));
    static final java.lang.invoke.VarHandle _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH() { return _JOBOBJECT_ASSOCIATE_COMPLETION_PORT$CompletionPort$VH_; }

    static final MemoryLayout _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("TotalUserTime"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("TotalKernelTime"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("ThisPeriodTotalUserTime"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("ThisPeriodTotalKernelTime"),
            C_LONG.withName("TotalPageFaultCount"),
            C_LONG.withName("TotalProcesses"),
            C_LONG.withName("ActiveProcesses"),
            C_LONG.withName("TotalTerminatedProcesses")
        ).withName("BasicInfo"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("ReadOperationCount"),
            C_LONGLONG.withName("WriteOperationCount"),
            C_LONGLONG.withName("OtherOperationCount"),
            C_LONGLONG.withName("ReadTransferCount"),
            C_LONGLONG.withName("WriteTransferCount"),
            C_LONGLONG.withName("OtherTransferCount")
        ).withName("IoInfo")
    ).withName("_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_JOBSET_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("MemberLevel")
    ).withName("_JOBOBJECT_JOBSET_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_JOBSET_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_JOBSET_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$LAYOUT() { return _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$LAYOUT_; }

    static final VarHandle _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH_ = _JOBOBJECT_JOBSET_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MemberLevel"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH() { return _JOBOBJECT_JOBSET_INFORMATION$MemberLevel$VH_; }

    static final int ToleranceLow() { return (int)1L; }

    static final int ToleranceMedium() { return (int)2L; }

    static final int ToleranceHigh() { return (int)3L; }

    static final int ToleranceIntervalShort() { return (int)1L; }

    static final int ToleranceIntervalMedium() { return (int)2L; }

    static final int ToleranceIntervalLong() { return (int)3L; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("IoReadBytesLimit"),
        C_LONGLONG.withName("IoWriteBytesLimit"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_INT.withName("RateControlTolerance"),
        C_INT.withName("RateControlToleranceInterval"),
        C_LONG.withName("LimitFlags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytesLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoReadBytesLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytesLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$IoWriteBytesLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$JobMemoryLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlTolerance"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlTolerance$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlToleranceInterval"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$RateControlToleranceInterval$VH_; }

    static final MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$LAYOUT() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH_ = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH() { return _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION$LimitFlags$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("IoReadBytesLimit"),
        C_LONGLONG.withName("IoWriteBytesLimit"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONGLONG.withName("JobHighMemoryLimit"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_INT.withName("RateControlTolerance"),
        C_INT.withName("CpuRateControlTolerance"),
        C_INT.withName("RateControlToleranceInterval"),
        C_INT.withName("CpuRateControlToleranceInterval"),
        C_LONG.withName("LimitFlags"),
        C_INT.withName("IoRateControlTolerance"),
        C_LONGLONG.withName("JobLowMemoryLimit"),
        C_INT.withName("IoRateControlToleranceInterval"),
        C_INT.withName("NetRateControlTolerance"),
        C_INT.withName("NetRateControlToleranceInterval"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2");
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytesLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoReadBytesLimit$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytesLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoWriteBytesLimit$VH_; }

}

