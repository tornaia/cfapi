// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$16 extends cfapi_h$constants$15 {

    /* package-private */ cfapi_h$constants$16() {}
    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobHighMemoryLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobHighMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlTolerance"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRateControlTolerance"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlToleranceInterval"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$RateControlToleranceInterval$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRateControlToleranceInterval"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$CpuRateControlToleranceInterval$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$LimitFlags$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IoRateControlTolerance"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobLowMemoryLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$JobLowMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IoRateControlToleranceInterval"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$IoRateControlToleranceInterval$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NetRateControlTolerance"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$LAYOUT() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$LAYOUT_; }

    static final VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH_ = JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NetRateControlToleranceInterval"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH() { return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2$NetRateControlToleranceInterval$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LimitFlags"),
        C_LONG.withName("ViolationLimitFlags"),
        C_LONGLONG.withName("IoReadBytes"),
        C_LONGLONG.withName("IoReadBytesLimit"),
        C_LONGLONG.withName("IoWriteBytes"),
        C_LONGLONG.withName("IoWriteBytesLimit"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONGLONG.withName("JobMemory"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_INT.withName("RateControlTolerance"),
        C_INT.withName("RateControlToleranceLimit")
    ).withName("_JOBOBJECT_LIMIT_VIOLATION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$LimitFlags$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViolationLimitFlags"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$ViolationLimitFlags$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytes"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytes$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytesLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoReadBytesLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytes"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytes$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytesLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$IoWriteBytesLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemory"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemory$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$JobMemoryLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlTolerance"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlTolerance$VH_; }

    static final MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$LAYOUT() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$LAYOUT_; }

    static final VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH_ = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlToleranceLimit"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH() { return _JOBOBJECT_LIMIT_VIOLATION_INFORMATION$RateControlToleranceLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LimitFlags"),
        C_LONG.withName("ViolationLimitFlags"),
        C_LONGLONG.withName("IoReadBytes"),
        C_LONGLONG.withName("IoReadBytesLimit"),
        C_LONGLONG.withName("IoWriteBytes"),
        C_LONGLONG.withName("IoWriteBytesLimit"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        C_LONGLONG.withName("JobMemory"),
        C_LONGLONG.withName("JobHighMemoryLimit"),
        C_LONGLONG.withName("JobMemoryLimit"),
        C_INT.withName("RateControlTolerance"),
        C_INT.withName("CpuRateControlTolerance"),
        C_INT.withName("RateControlToleranceLimit"),
        C_INT.withName("CpuRateControlToleranceLimit"),
        C_LONGLONG.withName("JobLowMemoryLimit"),
        C_INT.withName("IoRateControlTolerance"),
        C_INT.withName("IoRateControlToleranceLimit"),
        C_INT.withName("NetRateControlTolerance"),
        C_INT.withName("NetRateControlToleranceLimit")
    ).withName("JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2");
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LimitFlags"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$LimitFlags$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ViolationLimitFlags"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$ViolationLimitFlags$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytes"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytes$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoReadBytesLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoReadBytesLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytes"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytes$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoWriteBytesLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoWriteBytesLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemory"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemory$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobHighMemoryLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobHighMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlTolerance"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRateControlTolerance"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RateControlToleranceLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$RateControlToleranceLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRateControlToleranceLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$CpuRateControlToleranceLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("JobLowMemoryLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$JobLowMemoryLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IoRateControlTolerance"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IoRateControlToleranceLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$IoRateControlToleranceLimit$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NetRateControlTolerance"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlTolerance$VH_; }

    static final MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$LAYOUT() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$LAYOUT_; }

    static final VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH_ = JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NetRateControlToleranceLimit"));
    static final java.lang.invoke.VarHandle JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH() { return JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2$NetRateControlToleranceLimit$VH_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ControlFlags"),
        C_LONG.withName("CpuRate"),
        C_LONG.withName("Weight"),
        C_SHORT.withName("MinRate"),
        C_SHORT.withName("MaxRate")
    ).withName("_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$ControlFlags$VH_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CpuRate"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$CpuRate$VH_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Weight"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$Weight$VH_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinRate"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MinRate$VH_; }

    static final MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$LAYOUT() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$LAYOUT_; }

    static final VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH_ = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxRate"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH() { return _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION$MaxRate$VH_; }

    static final int JOB_OBJECT_NET_RATE_CONTROL_ENABLE() { return (int)1L; }

    static final int JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH() { return (int)2L; }

    static final int JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG() { return (int)4L; }

    static final int JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS() { return (int)7L; }

    static final MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxBandwidth"),
        C_INT.withName("ControlFlags"),
        C_CHAR.withName("DscpTag"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("JOBOBJECT_NET_RATE_CONTROL_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$LAYOUT() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH_ = JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$MaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH_ = JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$ControlFlags$VH_; }

    static final MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$LAYOUT() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$LAYOUT_; }

    static final VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH_ = JOBOBJECT_NET_RATE_CONTROL_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DscpTag"));
    static final java.lang.invoke.VarHandle JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH() { return JOBOBJECT_NET_RATE_CONTROL_INFORMATION$DscpTag$VH_; }

    static final int JOB_OBJECT_IO_RATE_CONTROL_ENABLE() { return (int)1L; }

    static final int JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME() { return (int)2L; }

    static final int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL() { return (int)4L; }

    static final int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP() { return (int)8L; }

    static final int JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS() { return (int)15L; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxIops"),
        C_LONGLONG.withName("MaxBandwidth"),
        C_LONGLONG.withName("ReservationIops"),
        C_POINTER.withName("VolumeName"),
        C_LONG.withName("BaseIoSize"),
        C_INT.withName("ControlFlags"),
        C_SHORT.withName("VolumeNameLength"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE");
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$MaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH_ = MemoryHandles.asAddressVarHandle(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeName")));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeName$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseIoSize"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$BaseIoSize$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$ControlFlags$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("VolumeNameLength"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE$VolumeNameLength$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxIops"),
        C_LONGLONG.withName("MaxBandwidth"),
        C_LONGLONG.withName("ReservationIops"),
        C_POINTER.withName("VolumeName"),
        C_LONG.withName("BaseIoSize"),
        C_INT.withName("ControlFlags"),
        C_SHORT.withName("VolumeNameLength"),
        MemoryLayout.ofPaddingBits(48),
        C_LONGLONG.withName("CriticalReservationIops"),
        C_LONGLONG.withName("ReservationBandwidth"),
        C_LONGLONG.withName("CriticalReservationBandwidth"),
        C_LONGLONG.withName("MaxTimePercent"),
        C_LONGLONG.withName("ReservationTimePercent"),
        C_LONGLONG.withName("CriticalReservationTimePercent")
    ).withName("JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2");
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH_ = MemoryHandles.asAddressVarHandle(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeName")));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeName$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseIoSize"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$BaseIoSize$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ControlFlags$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("VolumeNameLength"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$VolumeNameLength$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxTimePercent"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$MaxTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationTimePercent"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$ReservationTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationTimePercent"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2$CriticalReservationTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxIops"),
        C_LONGLONG.withName("MaxBandwidth"),
        C_LONGLONG.withName("ReservationIops"),
        C_POINTER.withName("VolumeName"),
        C_LONG.withName("BaseIoSize"),
        C_INT.withName("ControlFlags"),
        C_SHORT.withName("VolumeNameLength"),
        MemoryLayout.ofPaddingBits(48),
        C_LONGLONG.withName("CriticalReservationIops"),
        C_LONGLONG.withName("ReservationBandwidth"),
        C_LONGLONG.withName("CriticalReservationBandwidth"),
        C_LONGLONG.withName("MaxTimePercent"),
        C_LONGLONG.withName("ReservationTimePercent"),
        C_LONGLONG.withName("CriticalReservationTimePercent"),
        C_LONGLONG.withName("SoftMaxIops"),
        C_LONGLONG.withName("SoftMaxBandwidth"),
        C_LONGLONG.withName("SoftMaxTimePercent"),
        C_LONGLONG.withName("LimitExcessNotifyIops"),
        C_LONGLONG.withName("LimitExcessNotifyBandwidth"),
        C_LONGLONG.withName("LimitExcessNotifyTimePercent")
    ).withName("JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3");
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH_ = MemoryHandles.asAddressVarHandle(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeName")));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeName$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseIoSize"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$BaseIoSize$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ControlFlags$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("VolumeNameLength"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$VolumeNameLength$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxTimePercent"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$MaxTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReservationTimePercent"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$ReservationTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalReservationTimePercent"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$CriticalReservationTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SoftMaxIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SoftMaxBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SoftMaxTimePercent"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$SoftMaxTimePercent$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LimitExcessNotifyIops"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyIops$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LimitExcessNotifyBandwidth"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyBandwidth$VH_; }

    static final MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$LAYOUT() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$LAYOUT_; }

    static final VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH_ = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LimitExcessNotifyTimePercent"));
    static final java.lang.invoke.VarHandle JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH() { return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3$LimitExcessNotifyTimePercent$VH_; }

    static final int JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE() { return (int)1L; }

    static final int JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE() { return (int)2L; }

    static final int JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS() { return (int)3L; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("IoCount"),
        C_LONGLONG.withName("TotalNonOverlappedQueueTime"),
        C_LONGLONG.withName("TotalNonOverlappedServiceTime"),
        C_LONGLONG.withName("TotalSize")
    ).withName("_JOBOBJECT_IO_ATTRIBUTION_STATS");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH_ = _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IoCount"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$IoCount$VH_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH_ = _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalNonOverlappedQueueTime"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedQueueTime$VH_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH_ = _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalNonOverlappedServiceTime"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalNonOverlappedServiceTime$VH_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH_ = _JOBOBJECT_IO_ATTRIBUTION_STATS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TotalSize"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH() { return _JOBOBJECT_IO_ATTRIBUTION_STATS$TotalSize$VH_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ControlFlags"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("IoCount"),
            C_LONGLONG.withName("TotalNonOverlappedQueueTime"),
            C_LONGLONG.withName("TotalNonOverlappedServiceTime"),
            C_LONGLONG.withName("TotalSize")
        ).withName("ReadStats"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("IoCount"),
            C_LONGLONG.withName("TotalNonOverlappedQueueTime"),
            C_LONGLONG.withName("TotalNonOverlappedServiceTime"),
            C_LONGLONG.withName("TotalSize")
        ).withName("WriteStats")
    ).withName("_JOBOBJECT_IO_ATTRIBUTION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$struct$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$LAYOUT() { return _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$LAYOUT_; }

    static final VarHandle _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH_ = _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    static final java.lang.invoke.VarHandle _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH() { return _JOBOBJECT_IO_ATTRIBUTION_INFORMATION$ControlFlags$VH_; }

    static final int JobObjectBasicAccountingInformation() { return (int)1L; }

    static final int JobObjectBasicLimitInformation() { return (int)2L; }

    static final int JobObjectBasicProcessIdList() { return (int)3L; }

    static final int JobObjectBasicUIRestrictions() { return (int)4L; }

    static final int JobObjectSecurityLimitInformation() { return (int)5L; }

    static final int JobObjectEndOfJobTimeInformation() { return (int)6L; }

    static final int JobObjectAssociateCompletionPortInformation() { return (int)7L; }

    static final int JobObjectBasicAndIoAccountingInformation() { return (int)8L; }

    static final int JobObjectExtendedLimitInformation() { return (int)9L; }

    static final int JobObjectJobSetInformation() { return (int)10L; }

    static final int JobObjectGroupInformation() { return (int)11L; }

    static final int JobObjectNotificationLimitInformation() { return (int)12L; }

    static final int JobObjectLimitViolationInformation() { return (int)13L; }

    static final int JobObjectGroupInformationEx() { return (int)14L; }

    static final int JobObjectCpuRateControlInformation() { return (int)15L; }

    static final int JobObjectCompletionFilter() { return (int)16L; }

    static final int JobObjectCompletionCounter() { return (int)17L; }

    static final int JobObjectReserved1Information() { return (int)18L; }

    static final int JobObjectReserved2Information() { return (int)19L; }

    static final int JobObjectReserved3Information() { return (int)20L; }

    static final int JobObjectReserved4Information() { return (int)21L; }

    static final int JobObjectReserved5Information() { return (int)22L; }

    static final int JobObjectReserved6Information() { return (int)23L; }

    static final int JobObjectReserved7Information() { return (int)24L; }

    static final int JobObjectReserved8Information() { return (int)25L; }

    static final int JobObjectReserved9Information() { return (int)26L; }

    static final int JobObjectReserved10Information() { return (int)27L; }

    static final int JobObjectReserved11Information() { return (int)28L; }

    static final int JobObjectReserved12Information() { return (int)29L; }

    static final int JobObjectReserved13Information() { return (int)30L; }

    static final int JobObjectReserved14Information() { return (int)31L; }

    static final int JobObjectNetRateControlInformation() { return (int)32L; }

    static final int JobObjectNotificationLimitInformation2() { return (int)33L; }

    static final int JobObjectLimitViolationInformation2() { return (int)34L; }

    static final int JobObjectCreateSilo() { return (int)35L; }

    static final int JobObjectSiloBasicInformation() { return (int)36L; }

    static final int JobObjectReserved15Information() { return (int)37L; }

    static final int JobObjectReserved16Information() { return (int)38L; }

    static final int JobObjectReserved17Information() { return (int)39L; }

    static final int JobObjectReserved18Information() { return (int)40L; }

    static final int JobObjectReserved19Information() { return (int)41L; }

    static final int JobObjectReserved20Information() { return (int)42L; }

    static final int JobObjectReserved21Information() { return (int)43L; }

    static final int JobObjectReserved22Information() { return (int)44L; }

    static final int JobObjectReserved23Information() { return (int)45L; }

    static final int JobObjectReserved24Information() { return (int)46L; }

    static final int JobObjectReserved25Information() { return (int)47L; }

    static final int MaxJobObjectInfoClass() { return (int)48L; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SiloId"),
        C_LONG.withName("SiloParentId"),
        C_LONG.withName("NumberOfProcesses"),
        C_CHAR.withName("IsInServerSilo"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Reserved")
    ).withName("_SILOOBJECT_BASIC_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$SiloId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$SiloId$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$SiloId$LAYOUT_; }

    static final VarHandle _SILOOBJECT_BASIC_INFORMATION$SiloId$VH_ = _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SiloId"));
    static final java.lang.invoke.VarHandle _SILOOBJECT_BASIC_INFORMATION$SiloId$VH() { return _SILOOBJECT_BASIC_INFORMATION$SiloId$VH_; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$SiloParentId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$SiloParentId$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$SiloParentId$LAYOUT_; }

    static final VarHandle _SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH_ = _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SiloParentId"));
    static final java.lang.invoke.VarHandle _SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH() { return _SILOOBJECT_BASIC_INFORMATION$SiloParentId$VH_; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$LAYOUT_; }

    static final VarHandle _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH_ = _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfProcesses"));
    static final java.lang.invoke.VarHandle _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH() { return _SILOOBJECT_BASIC_INFORMATION$NumberOfProcesses$VH_; }

    static final MemoryLayout _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$LAYOUT() { return _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$LAYOUT_; }

    static final VarHandle _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH_ = _SILOOBJECT_BASIC_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsInServerSilo"));
    static final java.lang.invoke.VarHandle _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH() { return _SILOOBJECT_BASIC_INFORMATION$IsInServerSilo$VH_; }

    static final int SERVERSILO_INITING() { return (int)0L; }

    static final int SERVERSILO_STARTED() { return (int)1L; }

    static final int SERVERSILO_SHUTTING_DOWN() { return (int)2L; }

    static final int SERVERSILO_TERMINATING() { return (int)3L; }

    static final int SERVERSILO_TERMINATED() { return (int)4L; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ServiceSessionId"),
        C_INT.withName("State"),
        C_LONG.withName("ExitStatus"),
        C_CHAR.withName("IsDownlevelContainer"),
        MemoryLayout.ofPaddingBits(24),
        C_POINTER.withName("ApiSetSchema"),
        C_POINTER.withName("HostApiSetSchema")
    ).withName("_SERVERSILO_BASIC_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ServiceSessionId"));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH() { return _SERVERSILO_BASIC_INFORMATION$ServiceSessionId$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$State$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$State$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$State$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$State$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$State$VH() { return _SERVERSILO_BASIC_INFORMATION$State$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$ExitStatus$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$ExitStatus$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$ExitStatus$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$ExitStatus$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExitStatus"));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$ExitStatus$VH() { return _SERVERSILO_BASIC_INFORMATION$ExitStatus$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH_ = _SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsDownlevelContainer"));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH() { return _SERVERSILO_BASIC_INFORMATION$IsDownlevelContainer$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH_ = MemoryHandles.asAddressVarHandle(_SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ApiSetSchema")));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH() { return _SERVERSILO_BASIC_INFORMATION$ApiSetSchema$VH_; }

    static final MemoryLayout _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$LAYOUT() { return _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$LAYOUT_; }

    static final VarHandle _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH_ = MemoryHandles.asAddressVarHandle(_SERVERSILO_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HostApiSetSchema")));
    static final java.lang.invoke.VarHandle _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH() { return _SERVERSILO_BASIC_INFORMATION$HostApiSetSchema$VH_; }

    static final int FirmwareTypeUnknown() { return (int)0L; }

    static final int FirmwareTypeBios() { return (int)1L; }

    static final int FirmwareTypeUefi() { return (int)2L; }

    static final int FirmwareTypeMax() { return (int)3L; }

    static final int RelationProcessorCore() { return (int)0L; }

    static final int RelationNumaNode() { return (int)1L; }

    static final int RelationCache() { return (int)2L; }

    static final int RelationProcessorPackage() { return (int)3L; }

    static final int RelationGroup() { return (int)4L; }

    static final int RelationAll() { return (int)65535L; }

    static final int CacheUnified() { return (int)0L; }

    static final int CacheInstruction() { return (int)1L; }

    static final int CacheData() { return (int)2L; }

    static final int CacheTrace() { return (int)3L; }

    static final MemoryLayout _CACHE_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Level"),
        C_CHAR.withName("Associativity"),
        C_SHORT.withName("LineSize"),
        C_LONG.withName("Size"),
        C_INT.withName("Type")
    ).withName("_CACHE_DESCRIPTOR");
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$struct$LAYOUT() { return _CACHE_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Level$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Level$LAYOUT() { return _CACHE_DESCRIPTOR$Level$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Level$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Level"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Level$VH() { return _CACHE_DESCRIPTOR$Level$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Associativity$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Associativity$LAYOUT() { return _CACHE_DESCRIPTOR$Associativity$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Associativity$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Associativity"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Associativity$VH() { return _CACHE_DESCRIPTOR$Associativity$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$LineSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$LineSize$LAYOUT() { return _CACHE_DESCRIPTOR$LineSize$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$LineSize$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LineSize"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$LineSize$VH() { return _CACHE_DESCRIPTOR$LineSize$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Size$LAYOUT() { return _CACHE_DESCRIPTOR$Size$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Size$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Size$VH() { return _CACHE_DESCRIPTOR$Size$VH_; }

    static final MemoryLayout _CACHE_DESCRIPTOR$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_DESCRIPTOR$Type$LAYOUT() { return _CACHE_DESCRIPTOR$Type$LAYOUT_; }

    static final VarHandle _CACHE_DESCRIPTOR$Type$VH_ = _CACHE_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _CACHE_DESCRIPTOR$Type$VH() { return _CACHE_DESCRIPTOR$Type$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("ProcessorMask"),
        C_INT.withName("Relationship"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Flags")
        ).withName("ProcessorCore"),
        MemoryLayout.ofStruct(
            C_LONG.withName("NodeNumber")
        ).withName("NumaNode"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Level"),
            C_CHAR.withName("Associativity"),
            C_SHORT.withName("LineSize"),
            C_LONG.withName("Size"),
            C_INT.withName("Type")
        ).withName("Cache"),
        MemoryLayout.ofSequence(2, C_LONGLONG).withName("Reserved")
    ).withName("_SYSTEM_LOGICAL_PROCESSOR_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProcessorMask"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$ProcessorMask$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Relationship"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION$Relationship$VH_; }

    static final MemoryLayout ProcessorCore$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Flags")
    );
    static final jdk.incubator.foreign.MemoryLayout ProcessorCore$struct$LAYOUT() { return ProcessorCore$struct$LAYOUT_; }

    static final MemoryLayout ProcessorCore$Flags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout ProcessorCore$Flags$LAYOUT() { return ProcessorCore$Flags$LAYOUT_; }

    static final VarHandle ProcessorCore$Flags$VH_ = ProcessorCore$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle ProcessorCore$Flags$VH() { return ProcessorCore$Flags$VH_; }

    static final MemoryLayout NumaNode$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NodeNumber")
    );
    static final jdk.incubator.foreign.MemoryLayout NumaNode$struct$LAYOUT() { return NumaNode$struct$LAYOUT_; }

    static final MemoryLayout NumaNode$NodeNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout NumaNode$NodeNumber$LAYOUT() { return NumaNode$NodeNumber$LAYOUT_; }

    static final VarHandle NumaNode$NodeNumber$VH_ = NumaNode$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeNumber"));
    static final java.lang.invoke.VarHandle NumaNode$NodeNumber$VH() { return NumaNode$NodeNumber$VH_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Flags"),
        C_CHAR.withName("EfficiencyClass"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
        C_SHORT.withName("GroupCount"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_SHORT.withName("Group"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
        ).withName("_GROUP_AFFINITY")).withName("GroupMask")
    ).withName("_PROCESSOR_RELATIONSHIP");
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$struct$LAYOUT() { return _PROCESSOR_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$Flags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$Flags$LAYOUT() { return _PROCESSOR_RELATIONSHIP$Flags$LAYOUT_; }

    static final VarHandle _PROCESSOR_RELATIONSHIP$Flags$VH_ = _PROCESSOR_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _PROCESSOR_RELATIONSHIP$Flags$VH() { return _PROCESSOR_RELATIONSHIP$Flags$VH_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$EfficiencyClass$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$EfficiencyClass$LAYOUT() { return _PROCESSOR_RELATIONSHIP$EfficiencyClass$LAYOUT_; }

    static final VarHandle _PROCESSOR_RELATIONSHIP$EfficiencyClass$VH_ = _PROCESSOR_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EfficiencyClass"));
    static final java.lang.invoke.VarHandle _PROCESSOR_RELATIONSHIP$EfficiencyClass$VH() { return _PROCESSOR_RELATIONSHIP$EfficiencyClass$VH_; }

    static final MemoryLayout _PROCESSOR_RELATIONSHIP$GroupCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_RELATIONSHIP$GroupCount$LAYOUT() { return _PROCESSOR_RELATIONSHIP$GroupCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_RELATIONSHIP$GroupCount$VH_ = _PROCESSOR_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("GroupCount"));
    static final java.lang.invoke.VarHandle _PROCESSOR_RELATIONSHIP$GroupCount$VH() { return _PROCESSOR_RELATIONSHIP$GroupCount$VH_; }

    static final MemoryLayout _NUMA_NODE_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NodeNumber"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_SHORT.withName("Group"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
        ).withName("GroupMask")
    ).withName("_NUMA_NODE_RELATIONSHIP");
    static final jdk.incubator.foreign.MemoryLayout _NUMA_NODE_RELATIONSHIP$struct$LAYOUT() { return _NUMA_NODE_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _NUMA_NODE_RELATIONSHIP$NodeNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NUMA_NODE_RELATIONSHIP$NodeNumber$LAYOUT() { return _NUMA_NODE_RELATIONSHIP$NodeNumber$LAYOUT_; }

    static final VarHandle _NUMA_NODE_RELATIONSHIP$NodeNumber$VH_ = _NUMA_NODE_RELATIONSHIP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NodeNumber"));
    static final java.lang.invoke.VarHandle _NUMA_NODE_RELATIONSHIP$NodeNumber$VH() { return _NUMA_NODE_RELATIONSHIP$NodeNumber$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Level"),
        C_CHAR.withName("Associativity"),
        C_SHORT.withName("LineSize"),
        C_LONG.withName("CacheSize"),
        C_INT.withName("Type"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("Mask"),
            C_SHORT.withName("Group"),
            MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
        ).withName("GroupMask")
    ).withName("_CACHE_RELATIONSHIP");
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$struct$LAYOUT() { return _CACHE_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$Level$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$Level$LAYOUT() { return _CACHE_RELATIONSHIP$Level$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$Level$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Level"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$Level$VH() { return _CACHE_RELATIONSHIP$Level$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$Associativity$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$Associativity$LAYOUT() { return _CACHE_RELATIONSHIP$Associativity$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$Associativity$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Associativity"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$Associativity$VH() { return _CACHE_RELATIONSHIP$Associativity$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$LineSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$LineSize$LAYOUT() { return _CACHE_RELATIONSHIP$LineSize$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$LineSize$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LineSize"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$LineSize$VH() { return _CACHE_RELATIONSHIP$LineSize$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$CacheSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$CacheSize$LAYOUT() { return _CACHE_RELATIONSHIP$CacheSize$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$CacheSize$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CacheSize"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$CacheSize$VH() { return _CACHE_RELATIONSHIP$CacheSize$VH_; }

    static final MemoryLayout _CACHE_RELATIONSHIP$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CACHE_RELATIONSHIP$Type$LAYOUT() { return _CACHE_RELATIONSHIP$Type$LAYOUT_; }

    static final VarHandle _CACHE_RELATIONSHIP$Type$VH_ = _CACHE_RELATIONSHIP$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _CACHE_RELATIONSHIP$Type$VH() { return _CACHE_RELATIONSHIP$Type$VH_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("MaximumProcessorCount"),
        C_CHAR.withName("ActiveProcessorCount"),
        MemoryLayout.ofSequence(38, C_CHAR).withName("Reserved"),
        C_LONGLONG.withName("ActiveProcessorMask")
    ).withName("_PROCESSOR_GROUP_INFO");
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$struct$LAYOUT() { return _PROCESSOR_GROUP_INFO$struct$LAYOUT_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$MaximumProcessorCount$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$MaximumProcessorCount$LAYOUT() { return _PROCESSOR_GROUP_INFO$MaximumProcessorCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH_ = _PROCESSOR_GROUP_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MaximumProcessorCount"));
    static final java.lang.invoke.VarHandle _PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH() { return _PROCESSOR_GROUP_INFO$MaximumProcessorCount$VH_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorCount$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorCount$LAYOUT() { return _PROCESSOR_GROUP_INFO$ActiveProcessorCount$LAYOUT_; }

    static final VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH_ = _PROCESSOR_GROUP_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ActiveProcessorCount"));
    static final java.lang.invoke.VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH() { return _PROCESSOR_GROUP_INFO$ActiveProcessorCount$VH_; }

    static final MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorMask$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _PROCESSOR_GROUP_INFO$ActiveProcessorMask$LAYOUT() { return _PROCESSOR_GROUP_INFO$ActiveProcessorMask$LAYOUT_; }

    static final VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH_ = _PROCESSOR_GROUP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ActiveProcessorMask"));
    static final java.lang.invoke.VarHandle _PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH() { return _PROCESSOR_GROUP_INFO$ActiveProcessorMask$VH_; }

    static final MemoryLayout _GROUP_RELATIONSHIP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("MaximumGroupCount"),
        C_SHORT.withName("ActiveGroupCount"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_CHAR.withName("MaximumProcessorCount"),
            C_CHAR.withName("ActiveProcessorCount"),
            MemoryLayout.ofSequence(38, C_CHAR).withName("Reserved"),
            C_LONGLONG.withName("ActiveProcessorMask")
        ).withName("_PROCESSOR_GROUP_INFO")).withName("GroupInfo")
    ).withName("_GROUP_RELATIONSHIP");
    static final jdk.incubator.foreign.MemoryLayout _GROUP_RELATIONSHIP$struct$LAYOUT() { return _GROUP_RELATIONSHIP$struct$LAYOUT_; }

    static final MemoryLayout _GROUP_RELATIONSHIP$MaximumGroupCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GROUP_RELATIONSHIP$MaximumGroupCount$LAYOUT() { return _GROUP_RELATIONSHIP$MaximumGroupCount$LAYOUT_; }

    static final VarHandle _GROUP_RELATIONSHIP$MaximumGroupCount$VH_ = _GROUP_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaximumGroupCount"));
    static final java.lang.invoke.VarHandle _GROUP_RELATIONSHIP$MaximumGroupCount$VH() { return _GROUP_RELATIONSHIP$MaximumGroupCount$VH_; }

    static final MemoryLayout _GROUP_RELATIONSHIP$ActiveGroupCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _GROUP_RELATIONSHIP$ActiveGroupCount$LAYOUT() { return _GROUP_RELATIONSHIP$ActiveGroupCount$LAYOUT_; }

    static final VarHandle _GROUP_RELATIONSHIP$ActiveGroupCount$VH_ = _GROUP_RELATIONSHIP$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ActiveGroupCount"));
    static final java.lang.invoke.VarHandle _GROUP_RELATIONSHIP$ActiveGroupCount$VH() { return _GROUP_RELATIONSHIP$ActiveGroupCount$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Relationship"),
        C_LONG.withName("Size"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Flags"),
            C_CHAR.withName("EfficiencyClass"),
            MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
            C_SHORT.withName("GroupCount"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Mask"),
                C_SHORT.withName("Group"),
                MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
            ).withName("_GROUP_AFFINITY")).withName("GroupMask")
        ).withName("Processor"),
        MemoryLayout.ofStruct(
            C_LONG.withName("NodeNumber"),
            MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
            MemoryLayout.ofStruct(
                C_LONGLONG.withName("Mask"),
                C_SHORT.withName("Group"),
                MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
            ).withName("GroupMask")
        ).withName("NumaNode"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Level"),
            C_CHAR.withName("Associativity"),
            C_SHORT.withName("LineSize"),
            C_LONG.withName("CacheSize"),
            C_INT.withName("Type"),
            MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
            MemoryLayout.ofStruct(
                C_LONGLONG.withName("Mask"),
                C_SHORT.withName("Group"),
                MemoryLayout.ofSequence(3, C_SHORT).withName("Reserved")
            ).withName("GroupMask")
        ).withName("Cache"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("MaximumGroupCount"),
            C_SHORT.withName("ActiveGroupCount"),
            MemoryLayout.ofSequence(20, C_CHAR).withName("Reserved"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                C_CHAR.withName("MaximumProcessorCount"),
                C_CHAR.withName("ActiveProcessorCount"),
                MemoryLayout.ofSequence(38, C_CHAR).withName("Reserved"),
                C_LONGLONG.withName("ActiveProcessorMask")
            ).withName("_PROCESSOR_GROUP_INFO")).withName("GroupInfo")
        ).withName("Group")
    ).withName("_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Relationship"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Relationship$VH_; }

    static final MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$LAYOUT() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$LAYOUT_; }

    static final VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH_ = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH() { return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX$Size$VH_; }

    static final int CpuSetInformation() { return (int)0L; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_INT.withName("Type"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Id"),
            C_SHORT.withName("Group"),
            C_CHAR.withName("LogicalProcessorIndex"),
            C_CHAR.withName("CoreIndex"),
            C_CHAR.withName("LastLevelCacheIndex"),
            C_CHAR.withName("NumaNodeIndex"),
            C_CHAR.withName("EfficiencyClass"),
            C_CHAR.withName("AllFlags"),
            C_CHAR,
            C_LONG.withName("Reserved"),
            C_CHAR.withName("SchedulingClass"),
            C_LONGLONG.withName("AllocationTag")
        ).withName("CpuSet")
    ).withName("_SYSTEM_CPU_SET_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Size$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$Size$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$Size$VH_ = _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$Size$VH() { return _SYSTEM_CPU_SET_INFORMATION$Size$VH_; }

    static final MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_CPU_SET_INFORMATION$Type$LAYOUT() { return _SYSTEM_CPU_SET_INFORMATION$Type$LAYOUT_; }

    static final VarHandle _SYSTEM_CPU_SET_INFORMATION$Type$VH_ = _SYSTEM_CPU_SET_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _SYSTEM_CPU_SET_INFORMATION$Type$VH() { return _SYSTEM_CPU_SET_INFORMATION$Type$VH_; }

    static final MemoryLayout CpuSet$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Id"),
        C_SHORT.withName("Group"),
        C_CHAR.withName("LogicalProcessorIndex"),
        C_CHAR.withName("CoreIndex"),
        C_CHAR.withName("LastLevelCacheIndex"),
        C_CHAR.withName("NumaNodeIndex"),
        C_CHAR.withName("EfficiencyClass"),
        C_CHAR.withName("AllFlags"),
        C_CHAR,
        C_LONG.withName("Reserved"),
        C_CHAR.withName("SchedulingClass"),
        C_LONGLONG.withName("AllocationTag")
    );
    static final jdk.incubator.foreign.MemoryLayout CpuSet$struct$LAYOUT() { return CpuSet$struct$LAYOUT_; }

    static final MemoryLayout CpuSet$Id$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$Id$LAYOUT() { return CpuSet$Id$LAYOUT_; }

    static final VarHandle CpuSet$Id$VH_ = CpuSet$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Id"));
    static final java.lang.invoke.VarHandle CpuSet$Id$VH() { return CpuSet$Id$VH_; }

    static final MemoryLayout CpuSet$Group$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$Group$LAYOUT() { return CpuSet$Group$LAYOUT_; }

    static final VarHandle CpuSet$Group$VH_ = CpuSet$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Group"));
    static final java.lang.invoke.VarHandle CpuSet$Group$VH() { return CpuSet$Group$VH_; }

    static final MemoryLayout CpuSet$LogicalProcessorIndex$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$LogicalProcessorIndex$LAYOUT() { return CpuSet$LogicalProcessorIndex$LAYOUT_; }

    static final VarHandle CpuSet$LogicalProcessorIndex$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LogicalProcessorIndex"));
    static final java.lang.invoke.VarHandle CpuSet$LogicalProcessorIndex$VH() { return CpuSet$LogicalProcessorIndex$VH_; }

    static final MemoryLayout CpuSet$CoreIndex$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$CoreIndex$LAYOUT() { return CpuSet$CoreIndex$LAYOUT_; }

    static final VarHandle CpuSet$CoreIndex$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("CoreIndex"));
    static final java.lang.invoke.VarHandle CpuSet$CoreIndex$VH() { return CpuSet$CoreIndex$VH_; }

    static final MemoryLayout CpuSet$LastLevelCacheIndex$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$LastLevelCacheIndex$LAYOUT() { return CpuSet$LastLevelCacheIndex$LAYOUT_; }

    static final VarHandle CpuSet$LastLevelCacheIndex$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("LastLevelCacheIndex"));
    static final java.lang.invoke.VarHandle CpuSet$LastLevelCacheIndex$VH() { return CpuSet$LastLevelCacheIndex$VH_; }

    static final MemoryLayout CpuSet$NumaNodeIndex$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$NumaNodeIndex$LAYOUT() { return CpuSet$NumaNodeIndex$LAYOUT_; }

    static final VarHandle CpuSet$NumaNodeIndex$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("NumaNodeIndex"));
    static final java.lang.invoke.VarHandle CpuSet$NumaNodeIndex$VH() { return CpuSet$NumaNodeIndex$VH_; }

    static final MemoryLayout CpuSet$EfficiencyClass$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$EfficiencyClass$LAYOUT() { return CpuSet$EfficiencyClass$LAYOUT_; }

    static final VarHandle CpuSet$EfficiencyClass$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EfficiencyClass"));
    static final java.lang.invoke.VarHandle CpuSet$EfficiencyClass$VH() { return CpuSet$EfficiencyClass$VH_; }

    static final MemoryLayout CpuSet$AllFlags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$AllFlags$LAYOUT() { return CpuSet$AllFlags$LAYOUT_; }

    static final VarHandle CpuSet$AllFlags$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AllFlags"));
    static final java.lang.invoke.VarHandle CpuSet$AllFlags$VH() { return CpuSet$AllFlags$VH_; }

    static final MemoryLayout CpuSet$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$Reserved$LAYOUT() { return CpuSet$Reserved$LAYOUT_; }

    static final VarHandle CpuSet$Reserved$VH_ = CpuSet$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle CpuSet$Reserved$VH() { return CpuSet$Reserved$VH_; }

    static final MemoryLayout CpuSet$SchedulingClass$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$SchedulingClass$LAYOUT() { return CpuSet$SchedulingClass$LAYOUT_; }

    static final VarHandle CpuSet$SchedulingClass$VH_ = CpuSet$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SchedulingClass"));
    static final java.lang.invoke.VarHandle CpuSet$SchedulingClass$VH() { return CpuSet$SchedulingClass$VH_; }

    static final MemoryLayout CpuSet$AllocationTag$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout CpuSet$AllocationTag$LAYOUT() { return CpuSet$AllocationTag$LAYOUT_; }

    static final VarHandle CpuSet$AllocationTag$VH_ = CpuSet$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationTag"));
    static final java.lang.invoke.VarHandle CpuSet$AllocationTag$VH() { return CpuSet$AllocationTag$VH_; }

    static final MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("CycleTime")
    ).withName("_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT() { return _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$LAYOUT() { return _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$LAYOUT_; }

    static final VarHandle _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH_ = _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CycleTime"));
    static final java.lang.invoke.VarHandle _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH() { return _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION$CycleTime$VH_; }

    static final MemoryLayout _XSTATE_FEATURE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Offset"),
        C_LONG.withName("Size")
    ).withName("_XSTATE_FEATURE");
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_FEATURE$struct$LAYOUT() { return _XSTATE_FEATURE$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_FEATURE$Offset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_FEATURE$Offset$LAYOUT() { return _XSTATE_FEATURE$Offset$LAYOUT_; }

    static final VarHandle _XSTATE_FEATURE$Offset$VH_ = _XSTATE_FEATURE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _XSTATE_FEATURE$Offset$VH() { return _XSTATE_FEATURE$Offset$VH_; }

    static final MemoryLayout _XSTATE_FEATURE$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_FEATURE$Size$LAYOUT() { return _XSTATE_FEATURE$Size$LAYOUT_; }

    static final VarHandle _XSTATE_FEATURE$Size$VH_ = _XSTATE_FEATURE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _XSTATE_FEATURE$Size$VH() { return _XSTATE_FEATURE$Size$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("EnabledFeatures"),
        C_LONGLONG.withName("EnabledVolatileFeatures"),
        C_LONG.withName("Size"),
        C_LONG.withName("ControlFlags"),
        C_INT,
        MemoryLayout.ofSequence(64, MemoryLayout.ofStruct(
            C_LONG.withName("Offset"),
            C_LONG.withName("Size")
        ).withName("_XSTATE_FEATURE")).withName("Features"),
        C_LONGLONG.withName("EnabledSupervisorFeatures"),
        C_LONGLONG.withName("AlignedFeatures"),
        C_LONG.withName("AllFeatureSize"),
        MemoryLayout.ofSequence(64, C_LONG).withName("AllFeatures"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("EnabledUserVisibleSupervisorFeatures")
    ).withName("_XSTATE_CONFIGURATION");
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$struct$LAYOUT() { return _XSTATE_CONFIGURATION$struct$LAYOUT_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledVolatileFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledVolatileFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledVolatileFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledVolatileFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledVolatileFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$Size$LAYOUT() { return _XSTATE_CONFIGURATION$Size$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$Size$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$Size$VH() { return _XSTATE_CONFIGURATION$Size$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$ControlFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$ControlFlags$LAYOUT() { return _XSTATE_CONFIGURATION$ControlFlags$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$ControlFlags$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ControlFlags"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$ControlFlags$VH() { return _XSTATE_CONFIGURATION$ControlFlags$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledSupervisorFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledSupervisorFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$AlignedFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$AlignedFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$AlignedFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$AlignedFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AlignedFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$AlignedFeatures$VH() { return _XSTATE_CONFIGURATION$AlignedFeatures$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$AllFeatureSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$AllFeatureSize$LAYOUT() { return _XSTATE_CONFIGURATION$AllFeatureSize$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$AllFeatureSize$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllFeatureSize"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$AllFeatureSize$VH() { return _XSTATE_CONFIGURATION$AllFeatureSize$VH_; }

    static final MemoryLayout _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$LAYOUT() { return _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$LAYOUT_; }

    static final VarHandle _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH_ = _XSTATE_CONFIGURATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnabledUserVisibleSupervisorFeatures"));
    static final java.lang.invoke.VarHandle _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH() { return _XSTATE_CONFIGURATION$EnabledUserVisibleSupervisorFeatures$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("BaseAddress"),
        C_POINTER.withName("AllocationBase"),
        C_LONG.withName("AllocationProtect"),
        C_SHORT.withName("PartitionId"),
        MemoryLayout.ofPaddingBits(16),
        C_LONGLONG.withName("RegionSize"),
        C_LONG.withName("State"),
        C_LONG.withName("Protect"),
        C_LONG.withName("Type"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_MEMORY_BASIC_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$struct$LAYOUT() { return _MEMORY_BASIC_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$BaseAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$BaseAddress$LAYOUT() { return _MEMORY_BASIC_INFORMATION$BaseAddress$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$BaseAddress$VH_ = MemoryHandles.asAddressVarHandle(_MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseAddress")));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$BaseAddress$VH() { return _MEMORY_BASIC_INFORMATION$BaseAddress$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationBase$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationBase$LAYOUT() { return _MEMORY_BASIC_INFORMATION$AllocationBase$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$AllocationBase$VH_ = MemoryHandles.asAddressVarHandle(_MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationBase")));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$AllocationBase$VH() { return _MEMORY_BASIC_INFORMATION$AllocationBase$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationProtect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$AllocationProtect$LAYOUT() { return _MEMORY_BASIC_INFORMATION$AllocationProtect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$AllocationProtect$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$AllocationProtect$VH() { return _MEMORY_BASIC_INFORMATION$AllocationProtect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$PartitionId$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$PartitionId$LAYOUT() { return _MEMORY_BASIC_INFORMATION$PartitionId$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$PartitionId$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("PartitionId"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$PartitionId$VH() { return _MEMORY_BASIC_INFORMATION$PartitionId$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$RegionSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$RegionSize$LAYOUT() { return _MEMORY_BASIC_INFORMATION$RegionSize$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$RegionSize$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$RegionSize$VH() { return _MEMORY_BASIC_INFORMATION$RegionSize$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$State$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$State$LAYOUT() { return _MEMORY_BASIC_INFORMATION$State$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$State$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$State$VH() { return _MEMORY_BASIC_INFORMATION$State$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$Protect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$Protect$LAYOUT() { return _MEMORY_BASIC_INFORMATION$Protect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$Protect$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$Protect$VH() { return _MEMORY_BASIC_INFORMATION$Protect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION$Type$LAYOUT() { return _MEMORY_BASIC_INFORMATION$Type$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION$Type$VH_ = _MEMORY_BASIC_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION$Type$VH() { return _MEMORY_BASIC_INFORMATION$Type$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("BaseAddress"),
        C_LONG.withName("AllocationBase"),
        C_LONG.withName("AllocationProtect"),
        C_LONG.withName("RegionSize"),
        C_LONG.withName("State"),
        C_LONG.withName("Protect"),
        C_LONG.withName("Type")
    ).withName("_MEMORY_BASIC_INFORMATION32");
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$struct$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$BaseAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$BaseAddress$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$BaseAddress$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$BaseAddress$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseAddress"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$BaseAddress$VH() { return _MEMORY_BASIC_INFORMATION32$BaseAddress$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationBase$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationBase$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$AllocationBase$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$AllocationBase$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationBase"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$AllocationBase$VH() { return _MEMORY_BASIC_INFORMATION32$AllocationBase$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationProtect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$AllocationProtect$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$AllocationProtect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$AllocationProtect$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$AllocationProtect$VH() { return _MEMORY_BASIC_INFORMATION32$AllocationProtect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$RegionSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$RegionSize$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$RegionSize$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$RegionSize$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$RegionSize$VH() { return _MEMORY_BASIC_INFORMATION32$RegionSize$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$State$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$State$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$State$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$State$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$State$VH() { return _MEMORY_BASIC_INFORMATION32$State$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$Protect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$Protect$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$Protect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$Protect$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$Protect$VH() { return _MEMORY_BASIC_INFORMATION32$Protect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION32$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION32$Type$LAYOUT() { return _MEMORY_BASIC_INFORMATION32$Type$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION32$Type$VH_ = _MEMORY_BASIC_INFORMATION32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION32$Type$VH() { return _MEMORY_BASIC_INFORMATION32$Type$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("BaseAddress"),
        C_LONGLONG.withName("AllocationBase"),
        C_LONG.withName("AllocationProtect"),
        C_LONG.withName("__alignment1"),
        C_LONGLONG.withName("RegionSize"),
        C_LONG.withName("State"),
        C_LONG.withName("Protect"),
        C_LONG.withName("Type"),
        C_LONG.withName("__alignment2")
    ).withName("_MEMORY_BASIC_INFORMATION64");
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$struct$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$BaseAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$BaseAddress$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$BaseAddress$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$BaseAddress$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseAddress"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$BaseAddress$VH() { return _MEMORY_BASIC_INFORMATION64$BaseAddress$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationBase$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationBase$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$AllocationBase$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$AllocationBase$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationBase"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$AllocationBase$VH() { return _MEMORY_BASIC_INFORMATION64$AllocationBase$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationProtect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$AllocationProtect$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$AllocationProtect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$AllocationProtect$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AllocationProtect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$AllocationProtect$VH() { return _MEMORY_BASIC_INFORMATION64$AllocationProtect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment1$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$__alignment1$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$__alignment1$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("__alignment1"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$__alignment1$VH() { return _MEMORY_BASIC_INFORMATION64$__alignment1$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$RegionSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$RegionSize$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$RegionSize$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$RegionSize$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegionSize"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$RegionSize$VH() { return _MEMORY_BASIC_INFORMATION64$RegionSize$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$State$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$State$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$State$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$State$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("State"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$State$VH() { return _MEMORY_BASIC_INFORMATION64$State$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$Protect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$Protect$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$Protect$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$Protect$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Protect"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$Protect$VH() { return _MEMORY_BASIC_INFORMATION64$Protect$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$Type$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$Type$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$Type$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$Type$VH() { return _MEMORY_BASIC_INFORMATION64$Type$VH_; }

    static final MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MEMORY_BASIC_INFORMATION64$__alignment2$LAYOUT() { return _MEMORY_BASIC_INFORMATION64$__alignment2$LAYOUT_; }

    static final VarHandle _MEMORY_BASIC_INFORMATION64$__alignment2$VH_ = _MEMORY_BASIC_INFORMATION64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("__alignment2"));
    static final java.lang.invoke.VarHandle _MEMORY_BASIC_INFORMATION64$__alignment2$VH() { return _MEMORY_BASIC_INFORMATION64$__alignment2$VH_; }

    static final MemoryLayout _CFG_CALL_TARGET_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("Flags")
    ).withName("_CFG_CALL_TARGET_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CFG_CALL_TARGET_INFO$struct$LAYOUT() { return _CFG_CALL_TARGET_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CFG_CALL_TARGET_INFO$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CFG_CALL_TARGET_INFO$Offset$LAYOUT() { return _CFG_CALL_TARGET_INFO$Offset$LAYOUT_; }

    static final VarHandle _CFG_CALL_TARGET_INFO$Offset$VH_ = _CFG_CALL_TARGET_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _CFG_CALL_TARGET_INFO$Offset$VH() { return _CFG_CALL_TARGET_INFO$Offset$VH_; }

    static final MemoryLayout _CFG_CALL_TARGET_INFO$Flags$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CFG_CALL_TARGET_INFO$Flags$LAYOUT() { return _CFG_CALL_TARGET_INFO$Flags$LAYOUT_; }

    static final VarHandle _CFG_CALL_TARGET_INFO$Flags$VH_ = _CFG_CALL_TARGET_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CFG_CALL_TARGET_INFO$Flags$VH() { return _CFG_CALL_TARGET_INFO$Flags$VH_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("LowestStartingAddress"),
        C_POINTER.withName("HighestEndingAddress"),
        C_LONGLONG.withName("Alignment")
    ).withName("_MEM_ADDRESS_REQUIREMENTS");
    static final jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_; }

    static final MemoryLayout _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$LAYOUT() { return _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$LAYOUT_; }

    static final VarHandle _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH_ = MemoryHandles.asAddressVarHandle(_MEM_ADDRESS_REQUIREMENTS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowestStartingAddress")));
    static final java.lang.invoke.VarHandle _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH() { return _MEM_ADDRESS_REQUIREMENTS$LowestStartingAddress$VH_; }

}

