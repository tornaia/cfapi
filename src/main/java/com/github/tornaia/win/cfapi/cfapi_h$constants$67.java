// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$67 extends cfapi_h$constants$66 {

    /* package-private */ cfapi_h$constants$67() {}
    static final MemoryLayout _CLUSTER_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingCluster"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ClusterCount")
    ).withName("_CLUSTER_RANGE");
    static final jdk.incubator.foreign.MemoryLayout _CLUSTER_RANGE$struct$LAYOUT() { return _CLUSTER_RANGE$struct$LAYOUT_; }

    static final MemoryLayout _FILE_REFERENCE_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartingFileReferenceNumber"),
        C_LONGLONG.withName("EndingFileReferenceNumber")
    ).withName("_FILE_REFERENCE_RANGE");
    static final jdk.incubator.foreign.MemoryLayout _FILE_REFERENCE_RANGE$struct$LAYOUT() { return _FILE_REFERENCE_RANGE$struct$LAYOUT_; }

    static final MemoryLayout _FILE_REFERENCE_RANGE$StartingFileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REFERENCE_RANGE$StartingFileReferenceNumber$LAYOUT() { return _FILE_REFERENCE_RANGE$StartingFileReferenceNumber$LAYOUT_; }

    static final VarHandle _FILE_REFERENCE_RANGE$StartingFileReferenceNumber$VH_ = _FILE_REFERENCE_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartingFileReferenceNumber"));
    static final java.lang.invoke.VarHandle _FILE_REFERENCE_RANGE$StartingFileReferenceNumber$VH() { return _FILE_REFERENCE_RANGE$StartingFileReferenceNumber$VH_; }

    static final MemoryLayout _FILE_REFERENCE_RANGE$EndingFileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REFERENCE_RANGE$EndingFileReferenceNumber$LAYOUT() { return _FILE_REFERENCE_RANGE$EndingFileReferenceNumber$LAYOUT_; }

    static final VarHandle _FILE_REFERENCE_RANGE$EndingFileReferenceNumber$VH_ = _FILE_REFERENCE_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EndingFileReferenceNumber"));
    static final java.lang.invoke.VarHandle _FILE_REFERENCE_RANGE$EndingFileReferenceNumber$VH() { return _FILE_REFERENCE_RANGE$EndingFileReferenceNumber$VH_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("FilterEntryCount"),
        C_LONG.withName("NumberOfPairs"),
        C_LONG.withName("Flags"),
        C_INT.withName("FilterType"),
        C_LONG.withName("Reserved"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                MemoryLayout.ofUnion(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_LONG.withName("LowPart"),
                        C_LONG.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("StartingCluster"),
                MemoryLayout.ofUnion(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_LONG.withName("LowPart"),
                        C_LONG.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("ClusterCount")
            ).withName("_CLUSTER_RANGE")).withName("ClusterRanges"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                C_LONGLONG.withName("StartingFileReferenceNumber"),
                C_LONGLONG.withName("EndingFileReferenceNumber")
            ).withName("_FILE_REFERENCE_RANGE")).withName("FileReferenceRanges"),
            MemoryLayout.ofSequence(1, C_INT).withName("StorageReserveIds")
        ).withName("Filter")
    ).withName("_QUERY_FILE_LAYOUT_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_INPUT$struct$LAYOUT() { return _QUERY_FILE_LAYOUT_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_INPUT$FilterEntryCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_INPUT$FilterEntryCount$LAYOUT() { return _QUERY_FILE_LAYOUT_INPUT$FilterEntryCount$LAYOUT_; }

    static final VarHandle _QUERY_FILE_LAYOUT_INPUT$FilterEntryCount$VH_ = _QUERY_FILE_LAYOUT_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FilterEntryCount"));
    static final java.lang.invoke.VarHandle _QUERY_FILE_LAYOUT_INPUT$FilterEntryCount$VH() { return _QUERY_FILE_LAYOUT_INPUT$FilterEntryCount$VH_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_INPUT$NumberOfPairs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_INPUT$NumberOfPairs$LAYOUT() { return _QUERY_FILE_LAYOUT_INPUT$NumberOfPairs$LAYOUT_; }

    static final VarHandle _QUERY_FILE_LAYOUT_INPUT$NumberOfPairs$VH_ = _QUERY_FILE_LAYOUT_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfPairs"));
    static final java.lang.invoke.VarHandle _QUERY_FILE_LAYOUT_INPUT$NumberOfPairs$VH() { return _QUERY_FILE_LAYOUT_INPUT$NumberOfPairs$VH_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_INPUT$Flags$LAYOUT() { return _QUERY_FILE_LAYOUT_INPUT$Flags$LAYOUT_; }

    static final VarHandle _QUERY_FILE_LAYOUT_INPUT$Flags$VH_ = _QUERY_FILE_LAYOUT_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _QUERY_FILE_LAYOUT_INPUT$Flags$VH() { return _QUERY_FILE_LAYOUT_INPUT$Flags$VH_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_INPUT$FilterType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_INPUT$FilterType$LAYOUT() { return _QUERY_FILE_LAYOUT_INPUT$FilterType$LAYOUT_; }

    static final VarHandle _QUERY_FILE_LAYOUT_INPUT$FilterType$VH_ = _QUERY_FILE_LAYOUT_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FilterType"));
    static final java.lang.invoke.VarHandle _QUERY_FILE_LAYOUT_INPUT$FilterType$VH() { return _QUERY_FILE_LAYOUT_INPUT$FilterType$VH_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_INPUT$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_INPUT$Reserved$LAYOUT() { return _QUERY_FILE_LAYOUT_INPUT$Reserved$LAYOUT_; }

    static final VarHandle _QUERY_FILE_LAYOUT_INPUT$Reserved$VH_ = _QUERY_FILE_LAYOUT_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _QUERY_FILE_LAYOUT_INPUT$Reserved$VH() { return _QUERY_FILE_LAYOUT_INPUT$Reserved$VH_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_INPUT$Filter$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("StartingCluster"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("ClusterCount")
        ).withName("_CLUSTER_RANGE")).withName("ClusterRanges"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("StartingFileReferenceNumber"),
            C_LONGLONG.withName("EndingFileReferenceNumber")
        ).withName("_FILE_REFERENCE_RANGE")).withName("FileReferenceRanges"),
        MemoryLayout.ofSequence(1, C_INT).withName("StorageReserveIds")
    );
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_INPUT$Filter$union$LAYOUT() { return _QUERY_FILE_LAYOUT_INPUT$Filter$union$LAYOUT_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("FileEntryCount"),
        C_LONG.withName("FirstFileOffset"),
        C_LONG.withName("Flags"),
        C_LONG.withName("Reserved")
    ).withName("_QUERY_FILE_LAYOUT_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$struct$LAYOUT() { return _QUERY_FILE_LAYOUT_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$FileEntryCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$FileEntryCount$LAYOUT() { return _QUERY_FILE_LAYOUT_OUTPUT$FileEntryCount$LAYOUT_; }

    static final VarHandle _QUERY_FILE_LAYOUT_OUTPUT$FileEntryCount$VH_ = _QUERY_FILE_LAYOUT_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileEntryCount"));
    static final java.lang.invoke.VarHandle _QUERY_FILE_LAYOUT_OUTPUT$FileEntryCount$VH() { return _QUERY_FILE_LAYOUT_OUTPUT$FileEntryCount$VH_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$FirstFileOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$FirstFileOffset$LAYOUT() { return _QUERY_FILE_LAYOUT_OUTPUT$FirstFileOffset$LAYOUT_; }

    static final VarHandle _QUERY_FILE_LAYOUT_OUTPUT$FirstFileOffset$VH_ = _QUERY_FILE_LAYOUT_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstFileOffset"));
    static final java.lang.invoke.VarHandle _QUERY_FILE_LAYOUT_OUTPUT$FirstFileOffset$VH() { return _QUERY_FILE_LAYOUT_OUTPUT$FirstFileOffset$VH_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$Flags$LAYOUT() { return _QUERY_FILE_LAYOUT_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _QUERY_FILE_LAYOUT_OUTPUT$Flags$VH_ = _QUERY_FILE_LAYOUT_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _QUERY_FILE_LAYOUT_OUTPUT$Flags$VH() { return _QUERY_FILE_LAYOUT_OUTPUT$Flags$VH_; }

    static final MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_FILE_LAYOUT_OUTPUT$Reserved$LAYOUT() { return _QUERY_FILE_LAYOUT_OUTPUT$Reserved$LAYOUT_; }

    static final VarHandle _QUERY_FILE_LAYOUT_OUTPUT$Reserved$VH_ = _QUERY_FILE_LAYOUT_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _QUERY_FILE_LAYOUT_OUTPUT$Reserved$VH() { return _QUERY_FILE_LAYOUT_OUTPUT$Reserved$VH_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("NextFileOffset"),
        C_LONG.withName("Flags"),
        C_LONG.withName("FileAttributes"),
        C_LONGLONG.withName("FileReferenceNumber"),
        C_LONG.withName("FirstNameOffset"),
        C_LONG.withName("FirstStreamOffset"),
        C_LONG.withName("ExtraInfoOffset"),
        C_LONG.withName("ExtraInfoLength")
    ).withName("_FILE_LAYOUT_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$struct$LAYOUT() { return _FILE_LAYOUT_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$Version$LAYOUT() { return _FILE_LAYOUT_ENTRY$Version$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_ENTRY$Version$VH_ = _FILE_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_ENTRY$Version$VH() { return _FILE_LAYOUT_ENTRY$Version$VH_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$NextFileOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$NextFileOffset$LAYOUT() { return _FILE_LAYOUT_ENTRY$NextFileOffset$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_ENTRY$NextFileOffset$VH_ = _FILE_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextFileOffset"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_ENTRY$NextFileOffset$VH() { return _FILE_LAYOUT_ENTRY$NextFileOffset$VH_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$Flags$LAYOUT() { return _FILE_LAYOUT_ENTRY$Flags$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_ENTRY$Flags$VH_ = _FILE_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_ENTRY$Flags$VH() { return _FILE_LAYOUT_ENTRY$Flags$VH_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$FileAttributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$FileAttributes$LAYOUT() { return _FILE_LAYOUT_ENTRY$FileAttributes$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_ENTRY$FileAttributes$VH_ = _FILE_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_ENTRY$FileAttributes$VH() { return _FILE_LAYOUT_ENTRY$FileAttributes$VH_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$FileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$FileReferenceNumber$LAYOUT() { return _FILE_LAYOUT_ENTRY$FileReferenceNumber$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_ENTRY$FileReferenceNumber$VH_ = _FILE_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileReferenceNumber"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_ENTRY$FileReferenceNumber$VH() { return _FILE_LAYOUT_ENTRY$FileReferenceNumber$VH_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$FirstNameOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$FirstNameOffset$LAYOUT() { return _FILE_LAYOUT_ENTRY$FirstNameOffset$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_ENTRY$FirstNameOffset$VH_ = _FILE_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstNameOffset"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_ENTRY$FirstNameOffset$VH() { return _FILE_LAYOUT_ENTRY$FirstNameOffset$VH_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$FirstStreamOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$FirstStreamOffset$LAYOUT() { return _FILE_LAYOUT_ENTRY$FirstStreamOffset$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_ENTRY$FirstStreamOffset$VH_ = _FILE_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstStreamOffset"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_ENTRY$FirstStreamOffset$VH() { return _FILE_LAYOUT_ENTRY$FirstStreamOffset$VH_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$ExtraInfoOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$ExtraInfoOffset$LAYOUT() { return _FILE_LAYOUT_ENTRY$ExtraInfoOffset$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_ENTRY$ExtraInfoOffset$VH_ = _FILE_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtraInfoOffset"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_ENTRY$ExtraInfoOffset$VH() { return _FILE_LAYOUT_ENTRY$ExtraInfoOffset$VH_; }

    static final MemoryLayout _FILE_LAYOUT_ENTRY$ExtraInfoLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_ENTRY$ExtraInfoLength$LAYOUT() { return _FILE_LAYOUT_ENTRY$ExtraInfoLength$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_ENTRY$ExtraInfoLength$VH_ = _FILE_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtraInfoLength"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_ENTRY$ExtraInfoLength$VH() { return _FILE_LAYOUT_ENTRY$ExtraInfoLength$VH_; }

    static final MemoryLayout _FILE_LAYOUT_NAME_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NextNameOffset"),
        C_LONG.withName("Flags"),
        C_LONGLONG.withName("ParentFileReferenceNumber"),
        C_LONG.withName("FileNameLength"),
        C_LONG.withName("Reserved"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_FILE_LAYOUT_NAME_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_NAME_ENTRY$struct$LAYOUT() { return _FILE_LAYOUT_NAME_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _FILE_LAYOUT_NAME_ENTRY$NextNameOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_NAME_ENTRY$NextNameOffset$LAYOUT() { return _FILE_LAYOUT_NAME_ENTRY$NextNameOffset$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_NAME_ENTRY$NextNameOffset$VH_ = _FILE_LAYOUT_NAME_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextNameOffset"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_NAME_ENTRY$NextNameOffset$VH() { return _FILE_LAYOUT_NAME_ENTRY$NextNameOffset$VH_; }

    static final MemoryLayout _FILE_LAYOUT_NAME_ENTRY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_NAME_ENTRY$Flags$LAYOUT() { return _FILE_LAYOUT_NAME_ENTRY$Flags$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_NAME_ENTRY$Flags$VH_ = _FILE_LAYOUT_NAME_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_NAME_ENTRY$Flags$VH() { return _FILE_LAYOUT_NAME_ENTRY$Flags$VH_; }

    static final MemoryLayout _FILE_LAYOUT_NAME_ENTRY$ParentFileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_NAME_ENTRY$ParentFileReferenceNumber$LAYOUT() { return _FILE_LAYOUT_NAME_ENTRY$ParentFileReferenceNumber$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_NAME_ENTRY$ParentFileReferenceNumber$VH_ = _FILE_LAYOUT_NAME_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParentFileReferenceNumber"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_NAME_ENTRY$ParentFileReferenceNumber$VH() { return _FILE_LAYOUT_NAME_ENTRY$ParentFileReferenceNumber$VH_; }

    static final MemoryLayout _FILE_LAYOUT_NAME_ENTRY$FileNameLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_NAME_ENTRY$FileNameLength$LAYOUT() { return _FILE_LAYOUT_NAME_ENTRY$FileNameLength$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_NAME_ENTRY$FileNameLength$VH_ = _FILE_LAYOUT_NAME_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_NAME_ENTRY$FileNameLength$VH() { return _FILE_LAYOUT_NAME_ENTRY$FileNameLength$VH_; }

    static final MemoryLayout _FILE_LAYOUT_NAME_ENTRY$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_NAME_ENTRY$Reserved$LAYOUT() { return _FILE_LAYOUT_NAME_ENTRY$Reserved$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_NAME_ENTRY$Reserved$VH_ = _FILE_LAYOUT_NAME_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_NAME_ENTRY$Reserved$VH() { return _FILE_LAYOUT_NAME_ENTRY$Reserved$VH_; }

    static final MemoryLayout _FILE_LAYOUT_INFO_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("CreationTime"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("LastAccessTime"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("LastWriteTime"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("ChangeTime"),
            C_LONG.withName("FileAttributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("BasicInformation"),
        C_LONG.withName("OwnerId"),
        C_LONG.withName("SecurityId"),
        C_LONGLONG.withName("Usn"),
        C_INT.withName("StorageReserveId"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_FILE_LAYOUT_INFO_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_INFO_ENTRY$struct$LAYOUT() { return _FILE_LAYOUT_INFO_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _FILE_LAYOUT_INFO_ENTRY$BasicInformation$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("CreationTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastAccessTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastWriteTime"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ChangeTime"),
        C_LONG.withName("FileAttributes"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_INFO_ENTRY$BasicInformation$struct$LAYOUT() { return _FILE_LAYOUT_INFO_ENTRY$BasicInformation$struct$LAYOUT_; }

    static final MemoryLayout _FILE_LAYOUT_INFO_ENTRY$BasicInformation$FileAttributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_INFO_ENTRY$BasicInformation$FileAttributes$LAYOUT() { return _FILE_LAYOUT_INFO_ENTRY$BasicInformation$FileAttributes$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_INFO_ENTRY$BasicInformation$FileAttributes$VH_ = _FILE_LAYOUT_INFO_ENTRY$BasicInformation$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_INFO_ENTRY$BasicInformation$FileAttributes$VH() { return _FILE_LAYOUT_INFO_ENTRY$BasicInformation$FileAttributes$VH_; }

    static final MemoryLayout _FILE_LAYOUT_INFO_ENTRY$OwnerId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_INFO_ENTRY$OwnerId$LAYOUT() { return _FILE_LAYOUT_INFO_ENTRY$OwnerId$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_INFO_ENTRY$OwnerId$VH_ = _FILE_LAYOUT_INFO_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OwnerId"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_INFO_ENTRY$OwnerId$VH() { return _FILE_LAYOUT_INFO_ENTRY$OwnerId$VH_; }

    static final MemoryLayout _FILE_LAYOUT_INFO_ENTRY$SecurityId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_INFO_ENTRY$SecurityId$LAYOUT() { return _FILE_LAYOUT_INFO_ENTRY$SecurityId$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_INFO_ENTRY$SecurityId$VH_ = _FILE_LAYOUT_INFO_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityId"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_INFO_ENTRY$SecurityId$VH() { return _FILE_LAYOUT_INFO_ENTRY$SecurityId$VH_; }

    static final MemoryLayout _FILE_LAYOUT_INFO_ENTRY$Usn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_INFO_ENTRY$Usn$LAYOUT() { return _FILE_LAYOUT_INFO_ENTRY$Usn$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_INFO_ENTRY$Usn$VH_ = _FILE_LAYOUT_INFO_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Usn"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_INFO_ENTRY$Usn$VH() { return _FILE_LAYOUT_INFO_ENTRY$Usn$VH_; }

    static final MemoryLayout _FILE_LAYOUT_INFO_ENTRY$StorageReserveId$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LAYOUT_INFO_ENTRY$StorageReserveId$LAYOUT() { return _FILE_LAYOUT_INFO_ENTRY$StorageReserveId$LAYOUT_; }

    static final VarHandle _FILE_LAYOUT_INFO_ENTRY$StorageReserveId$VH_ = _FILE_LAYOUT_INFO_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StorageReserveId"));
    static final java.lang.invoke.VarHandle _FILE_LAYOUT_INFO_ENTRY$StorageReserveId$VH() { return _FILE_LAYOUT_INFO_ENTRY$StorageReserveId$VH_; }

    static final MemoryLayout _STREAM_LAYOUT_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("NextStreamOffset"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ExtentInformationOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("AllocationSize"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("EndOfFile"),
        C_LONG.withName("StreamInformationOffset"),
        C_LONG.withName("AttributeTypeCode"),
        C_LONG.withName("AttributeFlags"),
        C_LONG.withName("StreamIdentifierLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("StreamIdentifier"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_STREAM_LAYOUT_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _STREAM_LAYOUT_ENTRY$struct$LAYOUT() { return _STREAM_LAYOUT_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _STREAM_LAYOUT_ENTRY$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_LAYOUT_ENTRY$Version$LAYOUT() { return _STREAM_LAYOUT_ENTRY$Version$LAYOUT_; }

    static final VarHandle _STREAM_LAYOUT_ENTRY$Version$VH_ = _STREAM_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _STREAM_LAYOUT_ENTRY$Version$VH() { return _STREAM_LAYOUT_ENTRY$Version$VH_; }

    static final MemoryLayout _STREAM_LAYOUT_ENTRY$NextStreamOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_LAYOUT_ENTRY$NextStreamOffset$LAYOUT() { return _STREAM_LAYOUT_ENTRY$NextStreamOffset$LAYOUT_; }

    static final VarHandle _STREAM_LAYOUT_ENTRY$NextStreamOffset$VH_ = _STREAM_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextStreamOffset"));
    static final java.lang.invoke.VarHandle _STREAM_LAYOUT_ENTRY$NextStreamOffset$VH() { return _STREAM_LAYOUT_ENTRY$NextStreamOffset$VH_; }

    static final MemoryLayout _STREAM_LAYOUT_ENTRY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_LAYOUT_ENTRY$Flags$LAYOUT() { return _STREAM_LAYOUT_ENTRY$Flags$LAYOUT_; }

    static final VarHandle _STREAM_LAYOUT_ENTRY$Flags$VH_ = _STREAM_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STREAM_LAYOUT_ENTRY$Flags$VH() { return _STREAM_LAYOUT_ENTRY$Flags$VH_; }

    static final MemoryLayout _STREAM_LAYOUT_ENTRY$ExtentInformationOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_LAYOUT_ENTRY$ExtentInformationOffset$LAYOUT() { return _STREAM_LAYOUT_ENTRY$ExtentInformationOffset$LAYOUT_; }

    static final VarHandle _STREAM_LAYOUT_ENTRY$ExtentInformationOffset$VH_ = _STREAM_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtentInformationOffset"));
    static final java.lang.invoke.VarHandle _STREAM_LAYOUT_ENTRY$ExtentInformationOffset$VH() { return _STREAM_LAYOUT_ENTRY$ExtentInformationOffset$VH_; }

    static final MemoryLayout _STREAM_LAYOUT_ENTRY$StreamInformationOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_LAYOUT_ENTRY$StreamInformationOffset$LAYOUT() { return _STREAM_LAYOUT_ENTRY$StreamInformationOffset$LAYOUT_; }

    static final VarHandle _STREAM_LAYOUT_ENTRY$StreamInformationOffset$VH_ = _STREAM_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StreamInformationOffset"));
    static final java.lang.invoke.VarHandle _STREAM_LAYOUT_ENTRY$StreamInformationOffset$VH() { return _STREAM_LAYOUT_ENTRY$StreamInformationOffset$VH_; }

    static final MemoryLayout _STREAM_LAYOUT_ENTRY$AttributeTypeCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_LAYOUT_ENTRY$AttributeTypeCode$LAYOUT() { return _STREAM_LAYOUT_ENTRY$AttributeTypeCode$LAYOUT_; }

    static final VarHandle _STREAM_LAYOUT_ENTRY$AttributeTypeCode$VH_ = _STREAM_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AttributeTypeCode"));
    static final java.lang.invoke.VarHandle _STREAM_LAYOUT_ENTRY$AttributeTypeCode$VH() { return _STREAM_LAYOUT_ENTRY$AttributeTypeCode$VH_; }

    static final MemoryLayout _STREAM_LAYOUT_ENTRY$AttributeFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_LAYOUT_ENTRY$AttributeFlags$LAYOUT() { return _STREAM_LAYOUT_ENTRY$AttributeFlags$LAYOUT_; }

    static final VarHandle _STREAM_LAYOUT_ENTRY$AttributeFlags$VH_ = _STREAM_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AttributeFlags"));
    static final java.lang.invoke.VarHandle _STREAM_LAYOUT_ENTRY$AttributeFlags$VH() { return _STREAM_LAYOUT_ENTRY$AttributeFlags$VH_; }

    static final MemoryLayout _STREAM_LAYOUT_ENTRY$StreamIdentifierLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_LAYOUT_ENTRY$StreamIdentifierLength$LAYOUT() { return _STREAM_LAYOUT_ENTRY$StreamIdentifierLength$LAYOUT_; }

    static final VarHandle _STREAM_LAYOUT_ENTRY$StreamIdentifierLength$VH_ = _STREAM_LAYOUT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StreamIdentifierLength"));
    static final java.lang.invoke.VarHandle _STREAM_LAYOUT_ENTRY$StreamIdentifierLength$VH() { return _STREAM_LAYOUT_ENTRY$StreamIdentifierLength$VH_; }

    static final MemoryLayout _STREAM_EXTENT_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_LONG.withName("ExtentCount"),
                MemoryLayout.ofPaddingBits(32),
                MemoryLayout.ofUnion(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_LONG.withName("LowPart"),
                        C_LONG.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("StartingVcn"),
                MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                    MemoryLayout.ofUnion(
                        C_LONG.withName("LowPart"),
                        C_LONG.withName("HighPart"),
                        MemoryLayout.ofStruct(
                            C_LONG.withName("LowPart"),
                            C_LONG.withName("HighPart")
                        ).withName("u"),
                        C_LONGLONG.withName("QuadPart")
                    ).withName("NextVcn"),
                    MemoryLayout.ofUnion(
                        C_LONG.withName("LowPart"),
                        C_LONG.withName("HighPart"),
                        MemoryLayout.ofStruct(
                            C_LONG.withName("LowPart"),
                            C_LONG.withName("HighPart")
                        ).withName("u"),
                        C_LONGLONG.withName("QuadPart")
                    ).withName("Lcn")
                )).withName("Extents")
            ).withName("RetrievalPointers")
        ).withName("ExtentInformation")
    ).withName("_STREAM_EXTENT_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _STREAM_EXTENT_ENTRY$struct$LAYOUT() { return _STREAM_EXTENT_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _STREAM_EXTENT_ENTRY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_EXTENT_ENTRY$Flags$LAYOUT() { return _STREAM_EXTENT_ENTRY$Flags$LAYOUT_; }

    static final VarHandle _STREAM_EXTENT_ENTRY$Flags$VH_ = _STREAM_EXTENT_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STREAM_EXTENT_ENTRY$Flags$VH() { return _STREAM_EXTENT_ENTRY$Flags$VH_; }

    static final MemoryLayout _STREAM_EXTENT_ENTRY$ExtentInformation$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_LONG.withName("ExtentCount"),
            MemoryLayout.ofPaddingBits(32),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("StartingVcn"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                MemoryLayout.ofUnion(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_LONG.withName("LowPart"),
                        C_LONG.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("NextVcn"),
                MemoryLayout.ofUnion(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart"),
                    MemoryLayout.ofStruct(
                        C_LONG.withName("LowPart"),
                        C_LONG.withName("HighPart")
                    ).withName("u"),
                    C_LONGLONG.withName("QuadPart")
                ).withName("Lcn")
            )).withName("Extents")
        ).withName("RetrievalPointers")
    );
    static final jdk.incubator.foreign.MemoryLayout _STREAM_EXTENT_ENTRY$ExtentInformation$union$LAYOUT() { return _STREAM_EXTENT_ENTRY$ExtentInformation$union$LAYOUT_; }

    static final MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("ChecksumAlgorithm"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("Flags"),
        C_LONG.withName("ChecksumChunkSizeInBytes"),
        C_LONG.withName("ClusterSizeInBytes")
    ).withName("_FSCTL_GET_INTEGRITY_INFORMATION_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$LAYOUT() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$LAYOUT_; }

    static final VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$VH_ = _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ChecksumAlgorithm"));
    static final java.lang.invoke.VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$VH() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$VH_; }

    static final MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Reserved$LAYOUT() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Reserved$LAYOUT_; }

    static final VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Reserved$VH_ = _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Reserved$VH() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Reserved$VH_; }

    static final MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Flags$LAYOUT() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Flags$VH_ = _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Flags$VH() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$Flags$VH_; }

    static final MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumChunkSizeInBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumChunkSizeInBytes$LAYOUT() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumChunkSizeInBytes$LAYOUT_; }

    static final VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumChunkSizeInBytes$VH_ = _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ChecksumChunkSizeInBytes"));
    static final java.lang.invoke.VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumChunkSizeInBytes$VH() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ChecksumChunkSizeInBytes$VH_; }

    static final MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ClusterSizeInBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ClusterSizeInBytes$LAYOUT() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ClusterSizeInBytes$LAYOUT_; }

    static final VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ClusterSizeInBytes$VH_ = _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ClusterSizeInBytes"));
    static final java.lang.invoke.VarHandle _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ClusterSizeInBytes$VH() { return _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER$ClusterSizeInBytes$VH_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("ChecksumAlgorithm"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("Flags")
    ).withName("_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$LAYOUT_; }

    static final VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$VH_ = _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ChecksumAlgorithm"));
    static final java.lang.invoke.VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$VH() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$ChecksumAlgorithm$VH_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Reserved$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Reserved$LAYOUT_; }

    static final VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Reserved$VH_ = _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Reserved$VH() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Reserved$VH_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Flags$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Flags$VH_ = _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Flags$VH() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER$Flags$VH_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("EnableIntegrity"),
        C_CHAR.withName("KeepIntegrityStateUnchanged"),
        C_SHORT.withName("Reserved"),
        C_LONG.withName("Flags"),
        C_CHAR.withName("Version"),
        MemoryLayout.ofSequence(7, C_CHAR).withName("Reserved2")
    ).withName("_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$struct$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$EnableIntegrity$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$EnableIntegrity$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$EnableIntegrity$LAYOUT_; }

    static final VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$EnableIntegrity$VH_ = _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("EnableIntegrity"));
    static final java.lang.invoke.VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$EnableIntegrity$VH() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$EnableIntegrity$VH_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$KeepIntegrityStateUnchanged$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$KeepIntegrityStateUnchanged$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$KeepIntegrityStateUnchanged$LAYOUT_; }

    static final VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$KeepIntegrityStateUnchanged$VH_ = _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("KeepIntegrityStateUnchanged"));
    static final java.lang.invoke.VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$KeepIntegrityStateUnchanged$VH() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$KeepIntegrityStateUnchanged$VH_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Reserved$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Reserved$LAYOUT_; }

    static final VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Reserved$VH_ = _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Reserved$VH() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Reserved$VH_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Flags$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Flags$VH_ = _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Flags$VH() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Flags$VH_; }

    static final MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Version$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Version$LAYOUT() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Version$LAYOUT_; }

    static final VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Version$VH_ = _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Version$VH() { return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX$Version$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONG.withName("TokenTimeToLive"),
        C_LONG.withName("Reserved"),
        C_LONGLONG.withName("FileOffset"),
        C_LONGLONG.withName("CopyLength")
    ).withName("_FSCTL_OFFLOAD_READ_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$struct$LAYOUT() { return _FSCTL_OFFLOAD_READ_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$Size$LAYOUT() { return _FSCTL_OFFLOAD_READ_INPUT$Size$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_READ_INPUT$Size$VH_ = _FSCTL_OFFLOAD_READ_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_READ_INPUT$Size$VH() { return _FSCTL_OFFLOAD_READ_INPUT$Size$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$Flags$LAYOUT() { return _FSCTL_OFFLOAD_READ_INPUT$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_READ_INPUT$Flags$VH_ = _FSCTL_OFFLOAD_READ_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_READ_INPUT$Flags$VH() { return _FSCTL_OFFLOAD_READ_INPUT$Flags$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$TokenTimeToLive$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$TokenTimeToLive$LAYOUT() { return _FSCTL_OFFLOAD_READ_INPUT$TokenTimeToLive$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_READ_INPUT$TokenTimeToLive$VH_ = _FSCTL_OFFLOAD_READ_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TokenTimeToLive"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_READ_INPUT$TokenTimeToLive$VH() { return _FSCTL_OFFLOAD_READ_INPUT$TokenTimeToLive$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$Reserved$LAYOUT() { return _FSCTL_OFFLOAD_READ_INPUT$Reserved$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_READ_INPUT$Reserved$VH_ = _FSCTL_OFFLOAD_READ_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_READ_INPUT$Reserved$VH() { return _FSCTL_OFFLOAD_READ_INPUT$Reserved$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$FileOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$FileOffset$LAYOUT() { return _FSCTL_OFFLOAD_READ_INPUT$FileOffset$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_READ_INPUT$FileOffset$VH_ = _FSCTL_OFFLOAD_READ_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileOffset"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_READ_INPUT$FileOffset$VH() { return _FSCTL_OFFLOAD_READ_INPUT$FileOffset$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$CopyLength$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_INPUT$CopyLength$LAYOUT() { return _FSCTL_OFFLOAD_READ_INPUT$CopyLength$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_READ_INPUT$CopyLength$VH_ = _FSCTL_OFFLOAD_READ_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CopyLength"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_READ_INPUT$CopyLength$VH() { return _FSCTL_OFFLOAD_READ_INPUT$CopyLength$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONGLONG.withName("TransferLength"),
        MemoryLayout.ofSequence(512, C_CHAR).withName("Token")
    ).withName("_FSCTL_OFFLOAD_READ_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_OUTPUT$struct$LAYOUT() { return _FSCTL_OFFLOAD_READ_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_OUTPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_OUTPUT$Size$LAYOUT() { return _FSCTL_OFFLOAD_READ_OUTPUT$Size$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_READ_OUTPUT$Size$VH_ = _FSCTL_OFFLOAD_READ_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_READ_OUTPUT$Size$VH() { return _FSCTL_OFFLOAD_READ_OUTPUT$Size$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_OUTPUT$Flags$LAYOUT() { return _FSCTL_OFFLOAD_READ_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_READ_OUTPUT$Flags$VH_ = _FSCTL_OFFLOAD_READ_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_READ_OUTPUT$Flags$VH() { return _FSCTL_OFFLOAD_READ_OUTPUT$Flags$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_READ_OUTPUT$TransferLength$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_READ_OUTPUT$TransferLength$LAYOUT() { return _FSCTL_OFFLOAD_READ_OUTPUT$TransferLength$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_READ_OUTPUT$TransferLength$VH_ = _FSCTL_OFFLOAD_READ_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TransferLength"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_READ_OUTPUT$TransferLength$VH() { return _FSCTL_OFFLOAD_READ_OUTPUT$TransferLength$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONGLONG.withName("FileOffset"),
        C_LONGLONG.withName("CopyLength"),
        C_LONGLONG.withName("TransferOffset"),
        MemoryLayout.ofSequence(512, C_CHAR).withName("Token")
    ).withName("_FSCTL_OFFLOAD_WRITE_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$struct$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$Size$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_INPUT$Size$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$Size$VH_ = _FSCTL_OFFLOAD_WRITE_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$Size$VH() { return _FSCTL_OFFLOAD_WRITE_INPUT$Size$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$Flags$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_INPUT$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$Flags$VH_ = _FSCTL_OFFLOAD_WRITE_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$Flags$VH() { return _FSCTL_OFFLOAD_WRITE_INPUT$Flags$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$FileOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$FileOffset$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_INPUT$FileOffset$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$FileOffset$VH_ = _FSCTL_OFFLOAD_WRITE_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileOffset"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$FileOffset$VH() { return _FSCTL_OFFLOAD_WRITE_INPUT$FileOffset$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$CopyLength$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$CopyLength$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_INPUT$CopyLength$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$CopyLength$VH_ = _FSCTL_OFFLOAD_WRITE_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CopyLength"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$CopyLength$VH() { return _FSCTL_OFFLOAD_WRITE_INPUT$CopyLength$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$TransferOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_INPUT$TransferOffset$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_INPUT$TransferOffset$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$TransferOffset$VH_ = _FSCTL_OFFLOAD_WRITE_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TransferOffset"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_WRITE_INPUT$TransferOffset$VH() { return _FSCTL_OFFLOAD_WRITE_INPUT$TransferOffset$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONGLONG.withName("LengthWritten")
    ).withName("_FSCTL_OFFLOAD_WRITE_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_OUTPUT$struct$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_OUTPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_OUTPUT$Size$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_OUTPUT$Size$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_WRITE_OUTPUT$Size$VH_ = _FSCTL_OFFLOAD_WRITE_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_WRITE_OUTPUT$Size$VH() { return _FSCTL_OFFLOAD_WRITE_OUTPUT$Size$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_OUTPUT$Flags$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_WRITE_OUTPUT$Flags$VH_ = _FSCTL_OFFLOAD_WRITE_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_WRITE_OUTPUT$Flags$VH() { return _FSCTL_OFFLOAD_WRITE_OUTPUT$Flags$VH_; }

    static final MemoryLayout _FSCTL_OFFLOAD_WRITE_OUTPUT$LengthWritten$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_OFFLOAD_WRITE_OUTPUT$LengthWritten$LAYOUT() { return _FSCTL_OFFLOAD_WRITE_OUTPUT$LengthWritten$LAYOUT_; }

    static final VarHandle _FSCTL_OFFLOAD_WRITE_OUTPUT$LengthWritten$VH_ = _FSCTL_OFFLOAD_WRITE_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LengthWritten"));
    static final java.lang.invoke.VarHandle _FSCTL_OFFLOAD_WRITE_OUTPUT$LengthWritten$VH() { return _FSCTL_OFFLOAD_WRITE_OUTPUT$LengthWritten$VH_; }

    static final MemoryLayout _SET_PURGE_FAILURE_MODE_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags")
    ).withName("_SET_PURGE_FAILURE_MODE_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SET_PURGE_FAILURE_MODE_INPUT$struct$LAYOUT() { return _SET_PURGE_FAILURE_MODE_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SET_PURGE_FAILURE_MODE_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SET_PURGE_FAILURE_MODE_INPUT$Flags$LAYOUT() { return _SET_PURGE_FAILURE_MODE_INPUT$Flags$LAYOUT_; }

    static final VarHandle _SET_PURGE_FAILURE_MODE_INPUT$Flags$VH_ = _SET_PURGE_FAILURE_MODE_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SET_PURGE_FAILURE_MODE_INPUT$Flags$VH() { return _SET_PURGE_FAILURE_MODE_INPUT$Flags$VH_; }

    static final MemoryLayout _REPAIR_COPIES_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileOffset"),
        C_LONG.withName("Length"),
        C_LONG.withName("SourceCopy"),
        C_LONG.withName("NumberOfRepairCopies"),
        MemoryLayout.ofSequence(1, C_LONG).withName("RepairCopies")
    ).withName("_REPAIR_COPIES_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _REPAIR_COPIES_INPUT$struct$LAYOUT() { return _REPAIR_COPIES_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _REPAIR_COPIES_INPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REPAIR_COPIES_INPUT$Size$LAYOUT() { return _REPAIR_COPIES_INPUT$Size$LAYOUT_; }

    static final VarHandle _REPAIR_COPIES_INPUT$Size$VH_ = _REPAIR_COPIES_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _REPAIR_COPIES_INPUT$Size$VH() { return _REPAIR_COPIES_INPUT$Size$VH_; }

    static final MemoryLayout _REPAIR_COPIES_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REPAIR_COPIES_INPUT$Flags$LAYOUT() { return _REPAIR_COPIES_INPUT$Flags$LAYOUT_; }

    static final VarHandle _REPAIR_COPIES_INPUT$Flags$VH_ = _REPAIR_COPIES_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _REPAIR_COPIES_INPUT$Flags$VH() { return _REPAIR_COPIES_INPUT$Flags$VH_; }

    static final MemoryLayout _REPAIR_COPIES_INPUT$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REPAIR_COPIES_INPUT$Length$LAYOUT() { return _REPAIR_COPIES_INPUT$Length$LAYOUT_; }

    static final VarHandle _REPAIR_COPIES_INPUT$Length$VH_ = _REPAIR_COPIES_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _REPAIR_COPIES_INPUT$Length$VH() { return _REPAIR_COPIES_INPUT$Length$VH_; }

    static final MemoryLayout _REPAIR_COPIES_INPUT$SourceCopy$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REPAIR_COPIES_INPUT$SourceCopy$LAYOUT() { return _REPAIR_COPIES_INPUT$SourceCopy$LAYOUT_; }

    static final VarHandle _REPAIR_COPIES_INPUT$SourceCopy$VH_ = _REPAIR_COPIES_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SourceCopy"));
    static final java.lang.invoke.VarHandle _REPAIR_COPIES_INPUT$SourceCopy$VH() { return _REPAIR_COPIES_INPUT$SourceCopy$VH_; }

    static final MemoryLayout _REPAIR_COPIES_INPUT$NumberOfRepairCopies$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REPAIR_COPIES_INPUT$NumberOfRepairCopies$LAYOUT() { return _REPAIR_COPIES_INPUT$NumberOfRepairCopies$LAYOUT_; }

    static final VarHandle _REPAIR_COPIES_INPUT$NumberOfRepairCopies$VH_ = _REPAIR_COPIES_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfRepairCopies"));
    static final java.lang.invoke.VarHandle _REPAIR_COPIES_INPUT$NumberOfRepairCopies$VH() { return _REPAIR_COPIES_INPUT$NumberOfRepairCopies$VH_; }

    static final MemoryLayout _REPAIR_COPIES_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Status"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ResumeFileOffset")
    ).withName("_REPAIR_COPIES_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _REPAIR_COPIES_OUTPUT$struct$LAYOUT() { return _REPAIR_COPIES_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _REPAIR_COPIES_OUTPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REPAIR_COPIES_OUTPUT$Size$LAYOUT() { return _REPAIR_COPIES_OUTPUT$Size$LAYOUT_; }

    static final VarHandle _REPAIR_COPIES_OUTPUT$Size$VH_ = _REPAIR_COPIES_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _REPAIR_COPIES_OUTPUT$Size$VH() { return _REPAIR_COPIES_OUTPUT$Size$VH_; }

    static final MemoryLayout _REPAIR_COPIES_OUTPUT$Status$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REPAIR_COPIES_OUTPUT$Status$LAYOUT() { return _REPAIR_COPIES_OUTPUT$Status$LAYOUT_; }

    static final VarHandle _REPAIR_COPIES_OUTPUT$Status$VH_ = _REPAIR_COPIES_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Status"));
    static final java.lang.invoke.VarHandle _REPAIR_COPIES_OUTPUT$Status$VH() { return _REPAIR_COPIES_OUTPUT$Status$VH_; }

    static final MemoryLayout _FILE_REGION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("FileOffset"),
        C_LONGLONG.withName("Length"),
        C_LONG.withName("Usage"),
        C_LONG.withName("Reserved")
    ).withName("_FILE_REGION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_INFO$struct$LAYOUT() { return _FILE_REGION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _FILE_REGION_INFO$FileOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_INFO$FileOffset$LAYOUT() { return _FILE_REGION_INFO$FileOffset$LAYOUT_; }

    static final VarHandle _FILE_REGION_INFO$FileOffset$VH_ = _FILE_REGION_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileOffset"));
    static final java.lang.invoke.VarHandle _FILE_REGION_INFO$FileOffset$VH() { return _FILE_REGION_INFO$FileOffset$VH_; }

    static final MemoryLayout _FILE_REGION_INFO$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_INFO$Length$LAYOUT() { return _FILE_REGION_INFO$Length$LAYOUT_; }

    static final VarHandle _FILE_REGION_INFO$Length$VH_ = _FILE_REGION_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _FILE_REGION_INFO$Length$VH() { return _FILE_REGION_INFO$Length$VH_; }

    static final MemoryLayout _FILE_REGION_INFO$Usage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_INFO$Usage$LAYOUT() { return _FILE_REGION_INFO$Usage$LAYOUT_; }

    static final VarHandle _FILE_REGION_INFO$Usage$VH_ = _FILE_REGION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Usage"));
    static final java.lang.invoke.VarHandle _FILE_REGION_INFO$Usage$VH() { return _FILE_REGION_INFO$Usage$VH_; }

    static final MemoryLayout _FILE_REGION_INFO$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_INFO$Reserved$LAYOUT() { return _FILE_REGION_INFO$Reserved$LAYOUT_; }

    static final VarHandle _FILE_REGION_INFO$Reserved$VH_ = _FILE_REGION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _FILE_REGION_INFO$Reserved$VH() { return _FILE_REGION_INFO$Reserved$VH_; }

    static final MemoryLayout _FILE_REGION_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("TotalRegionEntryCount"),
        C_LONG.withName("RegionEntryCount"),
        C_LONG.withName("Reserved"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("FileOffset"),
            C_LONGLONG.withName("Length"),
            C_LONG.withName("Usage"),
            C_LONG.withName("Reserved")
        ).withName("_FILE_REGION_INFO")).withName("Region")
    ).withName("_FILE_REGION_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_OUTPUT$struct$LAYOUT() { return _FILE_REGION_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _FILE_REGION_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_OUTPUT$Flags$LAYOUT() { return _FILE_REGION_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _FILE_REGION_OUTPUT$Flags$VH_ = _FILE_REGION_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FILE_REGION_OUTPUT$Flags$VH() { return _FILE_REGION_OUTPUT$Flags$VH_; }

    static final MemoryLayout _FILE_REGION_OUTPUT$TotalRegionEntryCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_OUTPUT$TotalRegionEntryCount$LAYOUT() { return _FILE_REGION_OUTPUT$TotalRegionEntryCount$LAYOUT_; }

    static final VarHandle _FILE_REGION_OUTPUT$TotalRegionEntryCount$VH_ = _FILE_REGION_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalRegionEntryCount"));
    static final java.lang.invoke.VarHandle _FILE_REGION_OUTPUT$TotalRegionEntryCount$VH() { return _FILE_REGION_OUTPUT$TotalRegionEntryCount$VH_; }

    static final MemoryLayout _FILE_REGION_OUTPUT$RegionEntryCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_OUTPUT$RegionEntryCount$LAYOUT() { return _FILE_REGION_OUTPUT$RegionEntryCount$LAYOUT_; }

    static final VarHandle _FILE_REGION_OUTPUT$RegionEntryCount$VH_ = _FILE_REGION_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RegionEntryCount"));
    static final java.lang.invoke.VarHandle _FILE_REGION_OUTPUT$RegionEntryCount$VH() { return _FILE_REGION_OUTPUT$RegionEntryCount$VH_; }

    static final MemoryLayout _FILE_REGION_OUTPUT$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_OUTPUT$Reserved$LAYOUT() { return _FILE_REGION_OUTPUT$Reserved$LAYOUT_; }

    static final VarHandle _FILE_REGION_OUTPUT$Reserved$VH_ = _FILE_REGION_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _FILE_REGION_OUTPUT$Reserved$VH() { return _FILE_REGION_OUTPUT$Reserved$VH_; }

    static final MemoryLayout _FILE_REGION_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("FileOffset"),
        C_LONGLONG.withName("Length"),
        C_LONG.withName("DesiredUsage"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_FILE_REGION_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_INPUT$struct$LAYOUT() { return _FILE_REGION_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _FILE_REGION_INPUT$FileOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_INPUT$FileOffset$LAYOUT() { return _FILE_REGION_INPUT$FileOffset$LAYOUT_; }

    static final VarHandle _FILE_REGION_INPUT$FileOffset$VH_ = _FILE_REGION_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileOffset"));
    static final java.lang.invoke.VarHandle _FILE_REGION_INPUT$FileOffset$VH() { return _FILE_REGION_INPUT$FileOffset$VH_; }

    static final MemoryLayout _FILE_REGION_INPUT$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_INPUT$Length$LAYOUT() { return _FILE_REGION_INPUT$Length$LAYOUT_; }

    static final VarHandle _FILE_REGION_INPUT$Length$VH_ = _FILE_REGION_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _FILE_REGION_INPUT$Length$VH() { return _FILE_REGION_INPUT$Length$VH_; }

    static final MemoryLayout _FILE_REGION_INPUT$DesiredUsage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_REGION_INPUT$DesiredUsage$LAYOUT() { return _FILE_REGION_INPUT$DesiredUsage$LAYOUT_; }

    static final VarHandle _FILE_REGION_INPUT$DesiredUsage$VH_ = _FILE_REGION_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DesiredUsage"));
    static final java.lang.invoke.VarHandle _FILE_REGION_INPUT$DesiredUsage$VH() { return _FILE_REGION_INPUT$DesiredUsage$VH_; }

    static final MemoryLayout _WRITE_USN_REASON_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("UsnReasonToWrite")
    ).withName("_WRITE_USN_REASON_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _WRITE_USN_REASON_INPUT$struct$LAYOUT() { return _WRITE_USN_REASON_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _WRITE_USN_REASON_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WRITE_USN_REASON_INPUT$Flags$LAYOUT() { return _WRITE_USN_REASON_INPUT$Flags$LAYOUT_; }

    static final VarHandle _WRITE_USN_REASON_INPUT$Flags$VH_ = _WRITE_USN_REASON_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _WRITE_USN_REASON_INPUT$Flags$VH() { return _WRITE_USN_REASON_INPUT$Flags$VH_; }

    static final MemoryLayout _WRITE_USN_REASON_INPUT$UsnReasonToWrite$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WRITE_USN_REASON_INPUT$UsnReasonToWrite$LAYOUT() { return _WRITE_USN_REASON_INPUT$UsnReasonToWrite$LAYOUT_; }

    static final VarHandle _WRITE_USN_REASON_INPUT$UsnReasonToWrite$VH_ = _WRITE_USN_REASON_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UsnReasonToWrite"));
    static final java.lang.invoke.VarHandle _WRITE_USN_REASON_INPUT$UsnReasonToWrite$VH() { return _WRITE_USN_REASON_INPUT$UsnReasonToWrite$VH_; }

    static final int FileStorageTierMediaTypeUnspecified() { return (int)0L; }

    static final int FileStorageTierMediaTypeDisk() { return (int)1L; }

    static final int FileStorageTierMediaTypeSsd() { return (int)2L; }

    static final int FileStorageTierMediaTypeScm() { return (int)4L; }

    static final int FileStorageTierMediaTypeMax() { return (int)5L; }

    static final int FileStorageTierClassUnspecified() { return (int)0L; }

    static final int FileStorageTierClassCapacity() { return (int)1L; }

    static final int FileStorageTierClassPerformance() { return (int)2L; }

    static final int FileStorageTierClassMax() { return (int)3L; }

    static final MemoryLayout _FILE_STORAGE_TIER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("Id"),
        MemoryLayout.ofSequence(256, C_SHORT).withName("Name"),
        MemoryLayout.ofSequence(256, C_SHORT).withName("Description"),
        C_LONGLONG.withName("Flags"),
        C_LONGLONG.withName("ProvisionedCapacity"),
        C_INT.withName("MediaType"),
        C_INT.withName("Class")
    ).withName("_FILE_STORAGE_TIER");
    static final jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_TIER$struct$LAYOUT() { return _FILE_STORAGE_TIER$struct$LAYOUT_; }

    static final MemoryLayout _FILE_STORAGE_TIER$Flags$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_TIER$Flags$LAYOUT() { return _FILE_STORAGE_TIER$Flags$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_TIER$Flags$VH_ = _FILE_STORAGE_TIER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FILE_STORAGE_TIER$Flags$VH() { return _FILE_STORAGE_TIER$Flags$VH_; }

    static final MemoryLayout _FILE_STORAGE_TIER$ProvisionedCapacity$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_TIER$ProvisionedCapacity$LAYOUT() { return _FILE_STORAGE_TIER$ProvisionedCapacity$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_TIER$ProvisionedCapacity$VH_ = _FILE_STORAGE_TIER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProvisionedCapacity"));
    static final java.lang.invoke.VarHandle _FILE_STORAGE_TIER$ProvisionedCapacity$VH() { return _FILE_STORAGE_TIER$ProvisionedCapacity$VH_; }

    static final MemoryLayout _FILE_STORAGE_TIER$MediaType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_TIER$MediaType$LAYOUT() { return _FILE_STORAGE_TIER$MediaType$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_TIER$MediaType$VH_ = _FILE_STORAGE_TIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MediaType"));
    static final java.lang.invoke.VarHandle _FILE_STORAGE_TIER$MediaType$VH() { return _FILE_STORAGE_TIER$MediaType$VH_; }

    static final MemoryLayout _FILE_STORAGE_TIER$Class$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_TIER$Class$LAYOUT() { return _FILE_STORAGE_TIER$Class$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_TIER$Class$VH_ = _FILE_STORAGE_TIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Class"));
    static final java.lang.invoke.VarHandle _FILE_STORAGE_TIER$Class$VH() { return _FILE_STORAGE_TIER$Class$VH_; }

    static final MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONG.withName("TotalNumberOfTiers"),
        C_LONG.withName("NumberOfTiersReturned"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("Id"),
            MemoryLayout.ofSequence(256, C_SHORT).withName("Name"),
            MemoryLayout.ofSequence(256, C_SHORT).withName("Description"),
            C_LONGLONG.withName("Flags"),
            C_LONGLONG.withName("ProvisionedCapacity"),
            C_INT.withName("MediaType"),
            C_INT.withName("Class")
        ).withName("_FILE_STORAGE_TIER")).withName("Tiers")
    ).withName("_FSCTL_QUERY_STORAGE_CLASSES_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$struct$LAYOUT() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Version$LAYOUT() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Version$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Version$VH_ = _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Version$VH() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Version$VH_; }

    static final MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Size$LAYOUT() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Size$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Size$VH_ = _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Size$VH() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Size$VH_; }

    static final MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Flags$LAYOUT() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Flags$VH_ = _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Flags$VH() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$Flags$VH_; }

    static final MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$TotalNumberOfTiers$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$TotalNumberOfTiers$LAYOUT() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$TotalNumberOfTiers$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$TotalNumberOfTiers$VH_ = _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalNumberOfTiers"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$TotalNumberOfTiers$VH() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$TotalNumberOfTiers$VH_; }

    static final MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$NumberOfTiersReturned$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$NumberOfTiersReturned$LAYOUT() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$NumberOfTiersReturned$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$NumberOfTiersReturned$VH_ = _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfTiersReturned"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$NumberOfTiersReturned$VH() { return _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT$NumberOfTiersReturned$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_INT.withName("Class"),
                C_LONG.withName("Flags")
            ).withName("DesiredStorageClass"),
            MemoryLayout.ofStruct(
                C_SHORT.withName("Length"),
                C_SHORT.withName("Flags"),
                C_LONG.withName("Reserved"),
                C_LONGLONG.withName("Vdl")
            ).withName("DataStream"),
            MemoryLayout.ofStruct(
                C_SHORT.withName("Length"),
                C_SHORT.withName("Flags"),
                C_LONG.withName("ReparseDataSize"),
                C_LONG.withName("ReparseDataOffset")
            ).withName("Reparse"),
            MemoryLayout.ofStruct(
                C_SHORT.withName("Length"),
                C_SHORT.withName("Flags"),
                C_LONG.withName("EaSize"),
                C_LONG.withName("EaInformationOffset")
            ).withName("Ea")
        ).withName("StreamInformation")
    ).withName("_STREAM_INFORMATION_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$struct$LAYOUT() { return _STREAM_INFORMATION_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$Version$LAYOUT() { return _STREAM_INFORMATION_ENTRY$Version$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$Version$VH_ = _STREAM_INFORMATION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$Version$VH() { return _STREAM_INFORMATION_ENTRY$Version$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$Flags$LAYOUT() { return _STREAM_INFORMATION_ENTRY$Flags$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$Flags$VH_ = _STREAM_INFORMATION_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$Flags$VH() { return _STREAM_INFORMATION_ENTRY$Flags$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_INT.withName("Class"),
            C_LONG.withName("Flags")
        ).withName("DesiredStorageClass"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Length"),
            C_SHORT.withName("Flags"),
            C_LONG.withName("Reserved"),
            C_LONGLONG.withName("Vdl")
        ).withName("DataStream"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Length"),
            C_SHORT.withName("Flags"),
            C_LONG.withName("ReparseDataSize"),
            C_LONG.withName("ReparseDataOffset")
        ).withName("Reparse"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Length"),
            C_SHORT.withName("Flags"),
            C_LONG.withName("EaSize"),
            C_LONG.withName("EaInformationOffset")
        ).withName("Ea")
    ).withName("_StreamInformation");
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$union$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$union$LAYOUT_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Class"),
        C_LONG.withName("Flags")
    ).withName("_DesiredStorageClass");
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$struct$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$struct$LAYOUT_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Class$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Class$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Class$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Class$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Class"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Class$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Class$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Flags$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Flags$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Flags$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Flags$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DesiredStorageClass$Flags$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Length"),
        C_SHORT.withName("Flags"),
        C_LONG.withName("Reserved"),
        C_LONGLONG.withName("Vdl")
    ).withName("_DataStream");
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$struct$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$struct$LAYOUT_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Length$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Length$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Length$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Length$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Length$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Length$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Flags$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Flags$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Flags$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Flags$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Flags$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Reserved$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Reserved$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Reserved$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Reserved$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Reserved$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Vdl$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Vdl$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Vdl$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Vdl$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Vdl"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Vdl$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_DataStream$Vdl$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Length"),
        C_SHORT.withName("Flags"),
        C_LONG.withName("ReparseDataSize"),
        C_LONG.withName("ReparseDataOffset")
    ).withName("_Reparse");
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$struct$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$struct$LAYOUT_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Length$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Length$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Length$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Length$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Length$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Length$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Flags$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Flags$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Flags$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Flags$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$Flags$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataSize$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataSize$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataSize$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReparseDataSize"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataSize$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataSize$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataOffset$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataOffset$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataOffset$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReparseDataOffset"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataOffset$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Reparse$ReparseDataOffset$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Length"),
        C_SHORT.withName("Flags"),
        C_LONG.withName("EaSize"),
        C_LONG.withName("EaInformationOffset")
    ).withName("_Ea");
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$struct$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$struct$LAYOUT_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Length$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Length$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Length$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Length$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Length$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Length$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Flags$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Flags$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Flags$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Flags$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$Flags$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaSize$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaSize$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaSize$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EaSize"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaSize$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaSize$VH_; }

    static final MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaInformationOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaInformationOffset$LAYOUT() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaInformationOffset$LAYOUT_; }

    static final VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaInformationOffset$VH_ = _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EaInformationOffset"));
    static final java.lang.invoke.VarHandle _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaInformationOffset$VH() { return _STREAM_INFORMATION_ENTRY$_StreamInformation$_Ea$EaInformationOffset$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONG.withName("NumberOfTierIds"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("_GUID")).withName("TierIds")
    ).withName("_FSCTL_QUERY_REGION_INFO_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$struct$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$Version$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_INPUT$Version$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_INPUT$Version$VH_ = _FSCTL_QUERY_REGION_INFO_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_INPUT$Version$VH() { return _FSCTL_QUERY_REGION_INFO_INPUT$Version$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$Size$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_INPUT$Size$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_INPUT$Size$VH_ = _FSCTL_QUERY_REGION_INFO_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_INPUT$Size$VH() { return _FSCTL_QUERY_REGION_INFO_INPUT$Size$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$Flags$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_INPUT$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_INPUT$Flags$VH_ = _FSCTL_QUERY_REGION_INFO_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_INPUT$Flags$VH() { return _FSCTL_QUERY_REGION_INFO_INPUT$Flags$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$NumberOfTierIds$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_INPUT$NumberOfTierIds$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_INPUT$NumberOfTierIds$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_INPUT$NumberOfTierIds$VH_ = _FSCTL_QUERY_REGION_INFO_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfTierIds"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_INPUT$NumberOfTierIds$VH() { return _FSCTL_QUERY_REGION_INFO_INPUT$NumberOfTierIds$VH_; }

    static final MemoryLayout _FILE_STORAGE_TIER_REGION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("TierId"),
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("Length")
    ).withName("_FILE_STORAGE_TIER_REGION");
    static final jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_TIER_REGION$struct$LAYOUT() { return _FILE_STORAGE_TIER_REGION$struct$LAYOUT_; }

    static final MemoryLayout _FILE_STORAGE_TIER_REGION$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_TIER_REGION$Offset$LAYOUT() { return _FILE_STORAGE_TIER_REGION$Offset$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_TIER_REGION$Offset$VH_ = _FILE_STORAGE_TIER_REGION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _FILE_STORAGE_TIER_REGION$Offset$VH() { return _FILE_STORAGE_TIER_REGION$Offset$VH_; }

    static final MemoryLayout _FILE_STORAGE_TIER_REGION$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_STORAGE_TIER_REGION$Length$LAYOUT() { return _FILE_STORAGE_TIER_REGION$Length$LAYOUT_; }

    static final VarHandle _FILE_STORAGE_TIER_REGION$Length$VH_ = _FILE_STORAGE_TIER_REGION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _FILE_STORAGE_TIER_REGION$Length$VH() { return _FILE_STORAGE_TIER_REGION$Length$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_LONG.withName("Reserved"),
        C_LONGLONG.withName("Alignment"),
        C_LONG.withName("TotalNumberOfRegions"),
        C_LONG.withName("NumberOfRegionsReturned"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("TierId"),
            C_LONGLONG.withName("Offset"),
            C_LONGLONG.withName("Length")
        ).withName("_FILE_STORAGE_TIER_REGION")).withName("Regions")
    ).withName("_FSCTL_QUERY_REGION_INFO_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Version$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Version$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Version$VH_ = _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Version$VH() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Version$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Size$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Size$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Size$VH_ = _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Size$VH() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Size$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Flags$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Flags$VH_ = _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Flags$VH() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Flags$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Reserved$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Reserved$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Reserved$VH_ = _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Reserved$VH() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Reserved$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Alignment$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$Alignment$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Alignment$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Alignment$VH_ = _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Alignment"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$Alignment$VH() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$Alignment$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$TotalNumberOfRegions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$TotalNumberOfRegions$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$TotalNumberOfRegions$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$TotalNumberOfRegions$VH_ = _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TotalNumberOfRegions"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$TotalNumberOfRegions$VH() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$TotalNumberOfRegions$VH_; }

    static final MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$NumberOfRegionsReturned$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FSCTL_QUERY_REGION_INFO_OUTPUT$NumberOfRegionsReturned$LAYOUT() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$NumberOfRegionsReturned$LAYOUT_; }

    static final VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$NumberOfRegionsReturned$VH_ = _FSCTL_QUERY_REGION_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfRegionsReturned"));
    static final java.lang.invoke.VarHandle _FSCTL_QUERY_REGION_INFO_OUTPUT$NumberOfRegionsReturned$VH() { return _FSCTL_QUERY_REGION_INFO_OUTPUT$NumberOfRegionsReturned$VH_; }

    static final MemoryLayout _FILE_DESIRED_STORAGE_CLASS_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Class"),
        C_LONG.withName("Flags")
    ).withName("_FILE_DESIRED_STORAGE_CLASS_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _FILE_DESIRED_STORAGE_CLASS_INFORMATION$struct$LAYOUT() { return _FILE_DESIRED_STORAGE_CLASS_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Class$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Class$LAYOUT() { return _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Class$LAYOUT_; }

    static final VarHandle _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Class$VH_ = _FILE_DESIRED_STORAGE_CLASS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Class"));
    static final java.lang.invoke.VarHandle _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Class$VH() { return _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Class$VH_; }

    static final MemoryLayout _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Flags$LAYOUT() { return _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Flags$VH_ = _FILE_DESIRED_STORAGE_CLASS_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Flags$VH() { return _FILE_DESIRED_STORAGE_CLASS_INFORMATION$Flags$VH_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("FileHandle"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("SourceFileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TargetFileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ByteCount")
    ).withName("_DUPLICATE_EXTENTS_DATA");
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA$struct$LAYOUT() { return _DUPLICATE_EXTENTS_DATA$struct$LAYOUT_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA$FileHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA$FileHandle$LAYOUT() { return _DUPLICATE_EXTENTS_DATA$FileHandle$LAYOUT_; }

    static final VarHandle _DUPLICATE_EXTENTS_DATA$FileHandle$VH_ = MemoryHandles.asAddressVarHandle(_DUPLICATE_EXTENTS_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileHandle")));
    static final java.lang.invoke.VarHandle _DUPLICATE_EXTENTS_DATA$FileHandle$VH() { return _DUPLICATE_EXTENTS_DATA$FileHandle$VH_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("FileHandle"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("SourceFileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TargetFileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ByteCount")
    ).withName("_DUPLICATE_EXTENTS_DATA32");
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA32$struct$LAYOUT() { return _DUPLICATE_EXTENTS_DATA32$struct$LAYOUT_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA32$FileHandle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA32$FileHandle$LAYOUT() { return _DUPLICATE_EXTENTS_DATA32$FileHandle$LAYOUT_; }

    static final VarHandle _DUPLICATE_EXTENTS_DATA32$FileHandle$VH_ = _DUPLICATE_EXTENTS_DATA32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileHandle"));
    static final java.lang.invoke.VarHandle _DUPLICATE_EXTENTS_DATA32$FileHandle$VH() { return _DUPLICATE_EXTENTS_DATA32$FileHandle$VH_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Size"),
        C_POINTER.withName("FileHandle"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("SourceFileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TargetFileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ByteCount"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_DUPLICATE_EXTENTS_DATA_EX");
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA_EX$struct$LAYOUT() { return _DUPLICATE_EXTENTS_DATA_EX$struct$LAYOUT_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA_EX$Size$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA_EX$Size$LAYOUT() { return _DUPLICATE_EXTENTS_DATA_EX$Size$LAYOUT_; }

    static final VarHandle _DUPLICATE_EXTENTS_DATA_EX$Size$VH_ = _DUPLICATE_EXTENTS_DATA_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _DUPLICATE_EXTENTS_DATA_EX$Size$VH() { return _DUPLICATE_EXTENTS_DATA_EX$Size$VH_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA_EX$FileHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA_EX$FileHandle$LAYOUT() { return _DUPLICATE_EXTENTS_DATA_EX$FileHandle$LAYOUT_; }

    static final VarHandle _DUPLICATE_EXTENTS_DATA_EX$FileHandle$VH_ = MemoryHandles.asAddressVarHandle(_DUPLICATE_EXTENTS_DATA_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileHandle")));
    static final java.lang.invoke.VarHandle _DUPLICATE_EXTENTS_DATA_EX$FileHandle$VH() { return _DUPLICATE_EXTENTS_DATA_EX$FileHandle$VH_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA_EX$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA_EX$Flags$LAYOUT() { return _DUPLICATE_EXTENTS_DATA_EX$Flags$LAYOUT_; }

    static final VarHandle _DUPLICATE_EXTENTS_DATA_EX$Flags$VH_ = _DUPLICATE_EXTENTS_DATA_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _DUPLICATE_EXTENTS_DATA_EX$Flags$VH() { return _DUPLICATE_EXTENTS_DATA_EX$Flags$VH_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA_EX32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Size"),
        C_INT.withName("FileHandle"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("SourceFileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TargetFileOffset"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("ByteCount"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_DUPLICATE_EXTENTS_DATA_EX32");
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA_EX32$struct$LAYOUT() { return _DUPLICATE_EXTENTS_DATA_EX32$struct$LAYOUT_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA_EX32$Size$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA_EX32$Size$LAYOUT() { return _DUPLICATE_EXTENTS_DATA_EX32$Size$LAYOUT_; }

    static final VarHandle _DUPLICATE_EXTENTS_DATA_EX32$Size$VH_ = _DUPLICATE_EXTENTS_DATA_EX32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _DUPLICATE_EXTENTS_DATA_EX32$Size$VH() { return _DUPLICATE_EXTENTS_DATA_EX32$Size$VH_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA_EX32$FileHandle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA_EX32$FileHandle$LAYOUT() { return _DUPLICATE_EXTENTS_DATA_EX32$FileHandle$LAYOUT_; }

    static final VarHandle _DUPLICATE_EXTENTS_DATA_EX32$FileHandle$VH_ = _DUPLICATE_EXTENTS_DATA_EX32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileHandle"));
    static final java.lang.invoke.VarHandle _DUPLICATE_EXTENTS_DATA_EX32$FileHandle$VH() { return _DUPLICATE_EXTENTS_DATA_EX32$FileHandle$VH_; }

    static final MemoryLayout _DUPLICATE_EXTENTS_DATA_EX32$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DUPLICATE_EXTENTS_DATA_EX32$Flags$LAYOUT() { return _DUPLICATE_EXTENTS_DATA_EX32$Flags$LAYOUT_; }

    static final VarHandle _DUPLICATE_EXTENTS_DATA_EX32$Flags$VH_ = _DUPLICATE_EXTENTS_DATA_EX32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _DUPLICATE_EXTENTS_DATA_EX32$Flags$VH() { return _DUPLICATE_EXTENTS_DATA_EX32$Flags$VH_; }

    static final int SmrGcStateInactive() { return (int)0L; }

    static final int SmrGcStatePaused() { return (int)1L; }

    static final int SmrGcStateActive() { return (int)2L; }

    static final int SmrGcStateActiveFullSpeed() { return (int)3L; }

    static final MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("SizeOfRandomlyWritableTier"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FreeSpaceInRandomlyWritableTier"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("SizeofSMRTier"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FreeSpaceInSMRTier"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("UsableFreeSpaceInSMRTier"),
        C_INT.withName("VolumeGcState"),
        C_LONG.withName("VolumeGcLastStatus"),
        MemoryLayout.ofSequence(7, C_LONGLONG).withName("Unused")
    ).withName("_REFS_SMR_VOLUME_INFO_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$struct$LAYOUT() { return _REFS_SMR_VOLUME_INFO_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$Version$LAYOUT() { return _REFS_SMR_VOLUME_INFO_OUTPUT$Version$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_INFO_OUTPUT$Version$VH_ = _REFS_SMR_VOLUME_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_INFO_OUTPUT$Version$VH() { return _REFS_SMR_VOLUME_INFO_OUTPUT$Version$VH_; }

    static final MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$Flags$LAYOUT() { return _REFS_SMR_VOLUME_INFO_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_INFO_OUTPUT$Flags$VH_ = _REFS_SMR_VOLUME_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_INFO_OUTPUT$Flags$VH() { return _REFS_SMR_VOLUME_INFO_OUTPUT$Flags$VH_; }

    static final MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcState$LAYOUT() { return _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcState$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcState$VH_ = _REFS_SMR_VOLUME_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VolumeGcState"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcState$VH() { return _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcState$VH_; }

    static final MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcLastStatus$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcLastStatus$LAYOUT() { return _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcLastStatus$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcLastStatus$VH_ = _REFS_SMR_VOLUME_INFO_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VolumeGcLastStatus"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcLastStatus$VH() { return _REFS_SMR_VOLUME_INFO_OUTPUT$VolumeGcLastStatus$VH_; }

    static final int SmrGcActionStart() { return (int)1L; }

    static final int SmrGcActionStartFullSpeed() { return (int)2L; }

    static final int SmrGcActionPause() { return (int)3L; }

    static final int SmrGcActionStop() { return (int)4L; }

    static final int SmrGcMethodCompaction() { return (int)1L; }

    static final int SmrGcMethodCompression() { return (int)2L; }

    static final int SmrGcMethodRotation() { return (int)3L; }

    static final MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Flags"),
        C_INT.withName("Action"),
        C_INT.withName("Method"),
        C_LONG.withName("IoGranularity"),
        C_LONG.withName("CompressionFormat"),
        MemoryLayout.ofSequence(8, C_LONGLONG).withName("Unused")
    ).withName("_REFS_SMR_VOLUME_GC_PARAMETERS");
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$struct$LAYOUT() { return _REFS_SMR_VOLUME_GC_PARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$Version$LAYOUT() { return _REFS_SMR_VOLUME_GC_PARAMETERS$Version$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$Version$VH_ = _REFS_SMR_VOLUME_GC_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$Version$VH() { return _REFS_SMR_VOLUME_GC_PARAMETERS$Version$VH_; }

    static final MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$Flags$LAYOUT() { return _REFS_SMR_VOLUME_GC_PARAMETERS$Flags$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$Flags$VH_ = _REFS_SMR_VOLUME_GC_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$Flags$VH() { return _REFS_SMR_VOLUME_GC_PARAMETERS$Flags$VH_; }

    static final MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$Action$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$Action$LAYOUT() { return _REFS_SMR_VOLUME_GC_PARAMETERS$Action$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$Action$VH_ = _REFS_SMR_VOLUME_GC_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Action"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$Action$VH() { return _REFS_SMR_VOLUME_GC_PARAMETERS$Action$VH_; }

    static final MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$Method$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$Method$LAYOUT() { return _REFS_SMR_VOLUME_GC_PARAMETERS$Method$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$Method$VH_ = _REFS_SMR_VOLUME_GC_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Method"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$Method$VH() { return _REFS_SMR_VOLUME_GC_PARAMETERS$Method$VH_; }

    static final MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$IoGranularity$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$IoGranularity$LAYOUT() { return _REFS_SMR_VOLUME_GC_PARAMETERS$IoGranularity$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$IoGranularity$VH_ = _REFS_SMR_VOLUME_GC_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IoGranularity"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$IoGranularity$VH() { return _REFS_SMR_VOLUME_GC_PARAMETERS$IoGranularity$VH_; }

    static final MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$CompressionFormat$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REFS_SMR_VOLUME_GC_PARAMETERS$CompressionFormat$LAYOUT() { return _REFS_SMR_VOLUME_GC_PARAMETERS$CompressionFormat$LAYOUT_; }

    static final VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$CompressionFormat$VH_ = _REFS_SMR_VOLUME_GC_PARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CompressionFormat"));
    static final java.lang.invoke.VarHandle _REFS_SMR_VOLUME_GC_PARAMETERS$CompressionFormat$VH() { return _REFS_SMR_VOLUME_GC_PARAMETERS$CompressionFormat$VH_; }

    static final MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("OptimalWriteSize"),
        C_LONG.withName("StreamGranularitySize"),
        C_LONG.withName("StreamIdMin"),
        C_LONG.withName("StreamIdMax")
    ).withName("_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$struct$LAYOUT() { return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$OptimalWriteSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$OptimalWriteSize$LAYOUT() { return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$OptimalWriteSize$LAYOUT_; }

    static final VarHandle _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$OptimalWriteSize$VH_ = _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OptimalWriteSize"));
    static final java.lang.invoke.VarHandle _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$OptimalWriteSize$VH() { return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$OptimalWriteSize$VH_; }

    static final MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamGranularitySize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamGranularitySize$LAYOUT() { return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamGranularitySize$LAYOUT_; }

    static final VarHandle _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamGranularitySize$VH_ = _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StreamGranularitySize"));
    static final java.lang.invoke.VarHandle _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamGranularitySize$VH() { return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamGranularitySize$VH_; }

    static final MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMin$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMin$LAYOUT() { return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMin$LAYOUT_; }

    static final VarHandle _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMin$VH_ = _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StreamIdMin"));
    static final java.lang.invoke.VarHandle _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMin$VH() { return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMin$VH_; }

    static final MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMax$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMax$LAYOUT() { return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMax$LAYOUT_; }

    static final VarHandle _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMax$VH_ = _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StreamIdMax"));
    static final java.lang.invoke.VarHandle _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMax$VH() { return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER$StreamIdMax$VH_; }

    static final MemoryLayout _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("StreamId")
    ).withName("_STREAMS_ASSOCIATE_ID_INPUT_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$struct$LAYOUT() { return _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$Flags$LAYOUT() { return _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$Flags$LAYOUT_; }

    static final VarHandle _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$Flags$VH_ = _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$Flags$VH() { return _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$Flags$VH_; }

    static final MemoryLayout _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$StreamId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$StreamId$LAYOUT() { return _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$StreamId$LAYOUT_; }

    static final VarHandle _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$StreamId$VH_ = _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StreamId"));
    static final java.lang.invoke.VarHandle _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$StreamId$VH() { return _STREAMS_ASSOCIATE_ID_INPUT_BUFFER$StreamId$VH_; }

    static final MemoryLayout _STREAMS_QUERY_ID_OUTPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("StreamId")
    ).withName("_STREAMS_QUERY_ID_OUTPUT_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_QUERY_ID_OUTPUT_BUFFER$struct$LAYOUT() { return _STREAMS_QUERY_ID_OUTPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _STREAMS_QUERY_ID_OUTPUT_BUFFER$StreamId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STREAMS_QUERY_ID_OUTPUT_BUFFER$StreamId$LAYOUT() { return _STREAMS_QUERY_ID_OUTPUT_BUFFER$StreamId$LAYOUT_; }

    static final VarHandle _STREAMS_QUERY_ID_OUTPUT_BUFFER$StreamId$VH_ = _STREAMS_QUERY_ID_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StreamId"));
    static final java.lang.invoke.VarHandle _STREAMS_QUERY_ID_OUTPUT_BUFFER$StreamId$VH() { return _STREAMS_QUERY_ID_OUTPUT_BUFFER$StreamId$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_INPUT_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartOffset"),
        C_LONGLONG.withName("LengthInBytes")
    ).withName("_QUERY_BAD_RANGES_INPUT_RANGE");
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_INPUT_RANGE$struct$LAYOUT() { return _QUERY_BAD_RANGES_INPUT_RANGE$struct$LAYOUT_; }

    static final MemoryLayout _QUERY_BAD_RANGES_INPUT_RANGE$StartOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_INPUT_RANGE$StartOffset$LAYOUT() { return _QUERY_BAD_RANGES_INPUT_RANGE$StartOffset$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_INPUT_RANGE$StartOffset$VH_ = _QUERY_BAD_RANGES_INPUT_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartOffset"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_INPUT_RANGE$StartOffset$VH() { return _QUERY_BAD_RANGES_INPUT_RANGE$StartOffset$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_INPUT_RANGE$LengthInBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_INPUT_RANGE$LengthInBytes$LAYOUT() { return _QUERY_BAD_RANGES_INPUT_RANGE$LengthInBytes$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_INPUT_RANGE$LengthInBytes$VH_ = _QUERY_BAD_RANGES_INPUT_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LengthInBytes"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_INPUT_RANGE$LengthInBytes$VH() { return _QUERY_BAD_RANGES_INPUT_RANGE$LengthInBytes$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("NumRanges"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("StartOffset"),
            C_LONGLONG.withName("LengthInBytes")
        ).withName("_QUERY_BAD_RANGES_INPUT_RANGE")).withName("Ranges")
    ).withName("_QUERY_BAD_RANGES_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_INPUT$struct$LAYOUT() { return _QUERY_BAD_RANGES_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _QUERY_BAD_RANGES_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_INPUT$Flags$LAYOUT() { return _QUERY_BAD_RANGES_INPUT$Flags$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_INPUT$Flags$VH_ = _QUERY_BAD_RANGES_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_INPUT$Flags$VH() { return _QUERY_BAD_RANGES_INPUT$Flags$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_INPUT$NumRanges$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_INPUT$NumRanges$LAYOUT() { return _QUERY_BAD_RANGES_INPUT$NumRanges$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_INPUT$NumRanges$VH_ = _QUERY_BAD_RANGES_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumRanges"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_INPUT$NumRanges$VH() { return _QUERY_BAD_RANGES_INPUT$NumRanges$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("Reserved"),
        C_LONGLONG.withName("StartOffset"),
        C_LONGLONG.withName("LengthInBytes")
    ).withName("_QUERY_BAD_RANGES_OUTPUT_RANGE");
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$struct$LAYOUT() { return _QUERY_BAD_RANGES_OUTPUT_RANGE$struct$LAYOUT_; }

    static final MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$Flags$LAYOUT() { return _QUERY_BAD_RANGES_OUTPUT_RANGE$Flags$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_OUTPUT_RANGE$Flags$VH_ = _QUERY_BAD_RANGES_OUTPUT_RANGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_OUTPUT_RANGE$Flags$VH() { return _QUERY_BAD_RANGES_OUTPUT_RANGE$Flags$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$Reserved$LAYOUT() { return _QUERY_BAD_RANGES_OUTPUT_RANGE$Reserved$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_OUTPUT_RANGE$Reserved$VH_ = _QUERY_BAD_RANGES_OUTPUT_RANGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_OUTPUT_RANGE$Reserved$VH() { return _QUERY_BAD_RANGES_OUTPUT_RANGE$Reserved$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$StartOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$StartOffset$LAYOUT() { return _QUERY_BAD_RANGES_OUTPUT_RANGE$StartOffset$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_OUTPUT_RANGE$StartOffset$VH_ = _QUERY_BAD_RANGES_OUTPUT_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartOffset"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_OUTPUT_RANGE$StartOffset$VH() { return _QUERY_BAD_RANGES_OUTPUT_RANGE$StartOffset$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$LengthInBytes$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_OUTPUT_RANGE$LengthInBytes$LAYOUT() { return _QUERY_BAD_RANGES_OUTPUT_RANGE$LengthInBytes$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_OUTPUT_RANGE$LengthInBytes$VH_ = _QUERY_BAD_RANGES_OUTPUT_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LengthInBytes"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_OUTPUT_RANGE$LengthInBytes$VH() { return _QUERY_BAD_RANGES_OUTPUT_RANGE$LengthInBytes$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("NumBadRanges"),
        C_LONGLONG.withName("NextOffsetToLookUp"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Flags"),
            C_LONG.withName("Reserved"),
            C_LONGLONG.withName("StartOffset"),
            C_LONGLONG.withName("LengthInBytes")
        ).withName("_QUERY_BAD_RANGES_OUTPUT_RANGE")).withName("BadRanges")
    ).withName("_QUERY_BAD_RANGES_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_OUTPUT$struct$LAYOUT() { return _QUERY_BAD_RANGES_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _QUERY_BAD_RANGES_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_OUTPUT$Flags$LAYOUT() { return _QUERY_BAD_RANGES_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_OUTPUT$Flags$VH_ = _QUERY_BAD_RANGES_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_OUTPUT$Flags$VH() { return _QUERY_BAD_RANGES_OUTPUT$Flags$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_OUTPUT$NumBadRanges$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_OUTPUT$NumBadRanges$LAYOUT() { return _QUERY_BAD_RANGES_OUTPUT$NumBadRanges$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_OUTPUT$NumBadRanges$VH_ = _QUERY_BAD_RANGES_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumBadRanges"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_OUTPUT$NumBadRanges$VH() { return _QUERY_BAD_RANGES_OUTPUT$NumBadRanges$VH_; }

    static final MemoryLayout _QUERY_BAD_RANGES_OUTPUT$NextOffsetToLookUp$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _QUERY_BAD_RANGES_OUTPUT$NextOffsetToLookUp$LAYOUT() { return _QUERY_BAD_RANGES_OUTPUT$NextOffsetToLookUp$LAYOUT_; }

    static final VarHandle _QUERY_BAD_RANGES_OUTPUT$NextOffsetToLookUp$VH_ = _QUERY_BAD_RANGES_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NextOffsetToLookUp"));
    static final java.lang.invoke.VarHandle _QUERY_BAD_RANGES_OUTPUT$NextOffsetToLookUp$VH() { return _QUERY_BAD_RANGES_OUTPUT$NextOffsetToLookUp$VH_; }

    static final MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("AlignmentShift"),
        C_LONGLONG.withName("FileOffsetToAlign"),
        C_LONG.withName("FallbackAlignmentShift"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$struct$LAYOUT() { return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$Flags$LAYOUT() { return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$Flags$LAYOUT_; }

    static final VarHandle _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$Flags$VH_ = _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$Flags$VH() { return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$Flags$VH_; }

    static final MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$AlignmentShift$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$AlignmentShift$LAYOUT() { return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$AlignmentShift$LAYOUT_; }

    static final VarHandle _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$AlignmentShift$VH_ = _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AlignmentShift"));
    static final java.lang.invoke.VarHandle _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$AlignmentShift$VH() { return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$AlignmentShift$VH_; }

    static final MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FileOffsetToAlign$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FileOffsetToAlign$LAYOUT() { return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FileOffsetToAlign$LAYOUT_; }

    static final VarHandle _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FileOffsetToAlign$VH_ = _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileOffsetToAlign"));
    static final java.lang.invoke.VarHandle _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FileOffsetToAlign$VH() { return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FileOffsetToAlign$VH_; }

    static final MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FallbackAlignmentShift$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FallbackAlignmentShift$LAYOUT() { return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FallbackAlignmentShift$LAYOUT_; }

    static final VarHandle _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FallbackAlignmentShift$VH_ = _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FallbackAlignmentShift"));
    static final java.lang.invoke.VarHandle _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FallbackAlignmentShift$VH() { return _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT$FallbackAlignmentShift$VH_; }

    static final int VirtualStorageBehaviorUndefined() { return (int)0L; }

    static final int VirtualStorageBehaviorCacheWriteThrough() { return (int)1L; }

    static final int VirtualStorageBehaviorCacheWriteBack() { return (int)2L; }

    static final MemoryLayout _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_INT.withName("BehaviorCode")
    ).withName("_VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$struct$LAYOUT() { return _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$Size$LAYOUT() { return _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$Size$LAYOUT_; }

    static final VarHandle _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$Size$VH_ = _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$Size$VH() { return _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$Size$VH_; }

    static final MemoryLayout _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$BehaviorCode$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$BehaviorCode$LAYOUT() { return _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$BehaviorCode$LAYOUT_; }

    static final VarHandle _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$BehaviorCode$VH_ = _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BehaviorCode"));
    static final java.lang.invoke.VarHandle _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$BehaviorCode$VH() { return _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT$BehaviorCode$VH_; }

    static final MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("HeaderSize"),
        C_LONG.withName("StructureSize"),
        C_SHORT.withName("KeyOffset"),
        C_SHORT.withName("KeySize"),
        C_LONG.withName("DplLock"),
        C_LONGLONG.withName("DplUserId"),
        C_LONGLONG.withName("DplCredentialId")
    ).withName("_ENCRYPTION_KEY_CTRL_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT() { return _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$HeaderSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$HeaderSize$LAYOUT() { return _ENCRYPTION_KEY_CTRL_INPUT$HeaderSize$LAYOUT_; }

    static final VarHandle _ENCRYPTION_KEY_CTRL_INPUT$HeaderSize$VH_ = _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HeaderSize"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_KEY_CTRL_INPUT$HeaderSize$VH() { return _ENCRYPTION_KEY_CTRL_INPUT$HeaderSize$VH_; }

    static final MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$StructureSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$StructureSize$LAYOUT() { return _ENCRYPTION_KEY_CTRL_INPUT$StructureSize$LAYOUT_; }

    static final VarHandle _ENCRYPTION_KEY_CTRL_INPUT$StructureSize$VH_ = _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("StructureSize"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_KEY_CTRL_INPUT$StructureSize$VH() { return _ENCRYPTION_KEY_CTRL_INPUT$StructureSize$VH_; }

    static final MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$KeyOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$KeyOffset$LAYOUT() { return _ENCRYPTION_KEY_CTRL_INPUT$KeyOffset$LAYOUT_; }

    static final VarHandle _ENCRYPTION_KEY_CTRL_INPUT$KeyOffset$VH_ = _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("KeyOffset"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_KEY_CTRL_INPUT$KeyOffset$VH() { return _ENCRYPTION_KEY_CTRL_INPUT$KeyOffset$VH_; }

    static final MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$KeySize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$KeySize$LAYOUT() { return _ENCRYPTION_KEY_CTRL_INPUT$KeySize$LAYOUT_; }

    static final VarHandle _ENCRYPTION_KEY_CTRL_INPUT$KeySize$VH_ = _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("KeySize"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_KEY_CTRL_INPUT$KeySize$VH() { return _ENCRYPTION_KEY_CTRL_INPUT$KeySize$VH_; }

    static final MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$DplLock$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$DplLock$LAYOUT() { return _ENCRYPTION_KEY_CTRL_INPUT$DplLock$LAYOUT_; }

    static final VarHandle _ENCRYPTION_KEY_CTRL_INPUT$DplLock$VH_ = _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DplLock"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_KEY_CTRL_INPUT$DplLock$VH() { return _ENCRYPTION_KEY_CTRL_INPUT$DplLock$VH_; }

    static final MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$DplUserId$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$DplUserId$LAYOUT() { return _ENCRYPTION_KEY_CTRL_INPUT$DplUserId$LAYOUT_; }

    static final VarHandle _ENCRYPTION_KEY_CTRL_INPUT$DplUserId$VH_ = _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DplUserId"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_KEY_CTRL_INPUT$DplUserId$VH() { return _ENCRYPTION_KEY_CTRL_INPUT$DplUserId$VH_; }

    static final MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$DplCredentialId$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_KEY_CTRL_INPUT$DplCredentialId$LAYOUT() { return _ENCRYPTION_KEY_CTRL_INPUT$DplCredentialId$LAYOUT_; }

    static final VarHandle _ENCRYPTION_KEY_CTRL_INPUT$DplCredentialId$VH_ = _ENCRYPTION_KEY_CTRL_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DplCredentialId"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_KEY_CTRL_INPUT$DplCredentialId$VH() { return _ENCRYPTION_KEY_CTRL_INPUT$DplCredentialId$VH_; }

    static final MemoryLayout _WOF_EXTERNAL_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Provider")
    ).withName("_WOF_EXTERNAL_INFO");
    static final jdk.incubator.foreign.MemoryLayout _WOF_EXTERNAL_INFO$struct$LAYOUT() { return _WOF_EXTERNAL_INFO$struct$LAYOUT_; }

    static final MemoryLayout _WOF_EXTERNAL_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOF_EXTERNAL_INFO$Version$LAYOUT() { return _WOF_EXTERNAL_INFO$Version$LAYOUT_; }

    static final VarHandle _WOF_EXTERNAL_INFO$Version$VH_ = _WOF_EXTERNAL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _WOF_EXTERNAL_INFO$Version$VH() { return _WOF_EXTERNAL_INFO$Version$VH_; }

    static final MemoryLayout _WOF_EXTERNAL_INFO$Provider$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOF_EXTERNAL_INFO$Provider$LAYOUT() { return _WOF_EXTERNAL_INFO$Provider$LAYOUT_; }

    static final VarHandle _WOF_EXTERNAL_INFO$Provider$VH_ = _WOF_EXTERNAL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Provider"));
    static final java.lang.invoke.VarHandle _WOF_EXTERNAL_INFO$Provider$VH() { return _WOF_EXTERNAL_INFO$Provider$VH_; }

    static final MemoryLayout _WOF_EXTERNAL_FILE_ID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
        ).withName("FileId")
    ).withName("_WOF_EXTERNAL_FILE_ID");
    static final jdk.incubator.foreign.MemoryLayout _WOF_EXTERNAL_FILE_ID$struct$LAYOUT() { return _WOF_EXTERNAL_FILE_ID$struct$LAYOUT_; }

    static final MemoryLayout _WOF_VERSION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("WofVersion")
    ).withName("_WOF_VERSION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _WOF_VERSION_INFO$struct$LAYOUT() { return _WOF_VERSION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _WOF_VERSION_INFO$WofVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOF_VERSION_INFO$WofVersion$LAYOUT() { return _WOF_VERSION_INFO$WofVersion$LAYOUT_; }

    static final VarHandle _WOF_VERSION_INFO$WofVersion$VH_ = _WOF_VERSION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("WofVersion"));
    static final java.lang.invoke.VarHandle _WOF_VERSION_INFO$WofVersion$VH() { return _WOF_VERSION_INFO$WofVersion$VH_; }

    static final MemoryLayout _WIM_PROVIDER_EXTERNAL_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("DataSourceId"),
        MemoryLayout.ofSequence(20, C_CHAR).withName("ResourceHash"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_WIM_PROVIDER_EXTERNAL_INFO");
    static final jdk.incubator.foreign.MemoryLayout _WIM_PROVIDER_EXTERNAL_INFO$struct$LAYOUT() { return _WIM_PROVIDER_EXTERNAL_INFO$struct$LAYOUT_; }

    static final MemoryLayout _WIM_PROVIDER_EXTERNAL_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WIM_PROVIDER_EXTERNAL_INFO$Version$LAYOUT() { return _WIM_PROVIDER_EXTERNAL_INFO$Version$LAYOUT_; }

    static final VarHandle _WIM_PROVIDER_EXTERNAL_INFO$Version$VH_ = _WIM_PROVIDER_EXTERNAL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _WIM_PROVIDER_EXTERNAL_INFO$Version$VH() { return _WIM_PROVIDER_EXTERNAL_INFO$Version$VH_; }

    static final MemoryLayout _WIM_PROVIDER_EXTERNAL_INFO$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WIM_PROVIDER_EXTERNAL_INFO$Flags$LAYOUT() { return _WIM_PROVIDER_EXTERNAL_INFO$Flags$LAYOUT_; }

    static final VarHandle _WIM_PROVIDER_EXTERNAL_INFO$Flags$VH_ = _WIM_PROVIDER_EXTERNAL_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _WIM_PROVIDER_EXTERNAL_INFO$Flags$VH() { return _WIM_PROVIDER_EXTERNAL_INFO$Flags$VH_; }

}

