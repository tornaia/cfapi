// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$56 extends cfapi_h$constants$55 {

    /* package-private */ cfapi_h$constants$56() {}
    static final MemoryLayout _CRYPT_TIMESTAMP_RESPONSE$rgFreeText$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_RESPONSE$rgFreeText$LAYOUT() { return _CRYPT_TIMESTAMP_RESPONSE$rgFreeText$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_RESPONSE$rgFreeText$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIMESTAMP_RESPONSE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgFreeText")));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_RESPONSE$rgFreeText$VH() { return _CRYPT_TIMESTAMP_RESPONSE$rgFreeText$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_ACCURACY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwSeconds"),
        C_LONG.withName("dwMillis"),
        C_LONG.withName("dwMicros")
    ).withName("_CRYPT_TIMESTAMP_ACCURACY");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_ACCURACY$struct$LAYOUT() { return _CRYPT_TIMESTAMP_ACCURACY$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_ACCURACY$dwSeconds$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_ACCURACY$dwSeconds$LAYOUT() { return _CRYPT_TIMESTAMP_ACCURACY$dwSeconds$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_ACCURACY$dwSeconds$VH_ = _CRYPT_TIMESTAMP_ACCURACY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSeconds"));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_ACCURACY$dwSeconds$VH() { return _CRYPT_TIMESTAMP_ACCURACY$dwSeconds$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_ACCURACY$dwMillis$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_ACCURACY$dwMillis$LAYOUT() { return _CRYPT_TIMESTAMP_ACCURACY$dwMillis$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_ACCURACY$dwMillis$VH_ = _CRYPT_TIMESTAMP_ACCURACY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMillis"));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_ACCURACY$dwMillis$VH() { return _CRYPT_TIMESTAMP_ACCURACY$dwMillis$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_ACCURACY$dwMicros$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_ACCURACY$dwMicros$LAYOUT() { return _CRYPT_TIMESTAMP_ACCURACY$dwMicros$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_ACCURACY$dwMicros$VH_ = _CRYPT_TIMESTAMP_ACCURACY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMicros"));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_ACCURACY$dwMicros$VH() { return _CRYPT_TIMESTAMP_ACCURACY$dwMicros$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pszTSAPolicyId"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("pszObjId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("cbData"),
                MemoryLayout.ofPaddingBits(32),
                C_POINTER.withName("pbData")
            ).withName("Parameters")
        ).withName("HashAlgorithm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("HashedMessage"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("SerialNumber"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dwLowDateTime"),
            C_LONG.withName("dwHighDateTime")
        ).withName("ftTime"),
        C_POINTER.withName("pvAccuracy"),
        C_INT.withName("fOrdering"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Nonce"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Tsa"),
        C_LONG.withName("cExtension"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgExtension")
    ).withName("_CRYPT_TIMESTAMP_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_INFO$struct$LAYOUT() { return _CRYPT_TIMESTAMP_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_INFO$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_INFO$dwVersion$LAYOUT() { return _CRYPT_TIMESTAMP_INFO$dwVersion$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_INFO$dwVersion$VH_ = _CRYPT_TIMESTAMP_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_INFO$dwVersion$VH() { return _CRYPT_TIMESTAMP_INFO$dwVersion$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_INFO$pszTSAPolicyId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_INFO$pszTSAPolicyId$LAYOUT() { return _CRYPT_TIMESTAMP_INFO$pszTSAPolicyId$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_INFO$pszTSAPolicyId$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIMESTAMP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszTSAPolicyId")));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_INFO$pszTSAPolicyId$VH() { return _CRYPT_TIMESTAMP_INFO$pszTSAPolicyId$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_INFO$pvAccuracy$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_INFO$pvAccuracy$LAYOUT() { return _CRYPT_TIMESTAMP_INFO$pvAccuracy$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_INFO$pvAccuracy$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIMESTAMP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvAccuracy")));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_INFO$pvAccuracy$VH() { return _CRYPT_TIMESTAMP_INFO$pvAccuracy$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_INFO$fOrdering$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_INFO$fOrdering$LAYOUT() { return _CRYPT_TIMESTAMP_INFO$fOrdering$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_INFO$fOrdering$VH_ = _CRYPT_TIMESTAMP_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fOrdering"));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_INFO$fOrdering$VH() { return _CRYPT_TIMESTAMP_INFO$fOrdering$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_INFO$cExtension$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_INFO$cExtension$LAYOUT() { return _CRYPT_TIMESTAMP_INFO$cExtension$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_INFO$cExtension$VH_ = _CRYPT_TIMESTAMP_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cExtension"));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_INFO$cExtension$VH() { return _CRYPT_TIMESTAMP_INFO$cExtension$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_INFO$rgExtension$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_INFO$rgExtension$LAYOUT() { return _CRYPT_TIMESTAMP_INFO$rgExtension$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_INFO$rgExtension$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIMESTAMP_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgExtension")));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_INFO$rgExtension$VH() { return _CRYPT_TIMESTAMP_INFO$rgExtension$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_CONTEXT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbEncoded"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbEncoded"),
        C_POINTER.withName("pTimeStamp")
    ).withName("_CRYPT_TIMESTAMP_CONTEXT");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_CONTEXT$struct$LAYOUT() { return _CRYPT_TIMESTAMP_CONTEXT$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_CONTEXT$cbEncoded$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_CONTEXT$cbEncoded$LAYOUT() { return _CRYPT_TIMESTAMP_CONTEXT$cbEncoded$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_CONTEXT$cbEncoded$VH_ = _CRYPT_TIMESTAMP_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbEncoded"));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_CONTEXT$cbEncoded$VH() { return _CRYPT_TIMESTAMP_CONTEXT$cbEncoded$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_CONTEXT$pbEncoded$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_CONTEXT$pbEncoded$LAYOUT() { return _CRYPT_TIMESTAMP_CONTEXT$pbEncoded$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_CONTEXT$pbEncoded$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIMESTAMP_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbEncoded")));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_CONTEXT$pbEncoded$VH() { return _CRYPT_TIMESTAMP_CONTEXT$pbEncoded$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_CONTEXT$pTimeStamp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_CONTEXT$pTimeStamp$LAYOUT() { return _CRYPT_TIMESTAMP_CONTEXT$pTimeStamp$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_CONTEXT$pTimeStamp$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIMESTAMP_CONTEXT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pTimeStamp")));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_CONTEXT$pTimeStamp$VH() { return _CRYPT_TIMESTAMP_CONTEXT$pTimeStamp$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_PARA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pszTSAPolicyId"),
        C_INT.withName("fRequestCerts"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            C_LONG.withName("cbData"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("pbData")
        ).withName("Nonce"),
        C_LONG.withName("cExtension"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("rgExtension")
    ).withName("_CRYPT_TIMESTAMP_PARA");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_PARA$struct$LAYOUT() { return _CRYPT_TIMESTAMP_PARA$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_PARA$pszTSAPolicyId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_PARA$pszTSAPolicyId$LAYOUT() { return _CRYPT_TIMESTAMP_PARA$pszTSAPolicyId$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_PARA$pszTSAPolicyId$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIMESTAMP_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pszTSAPolicyId")));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_PARA$pszTSAPolicyId$VH() { return _CRYPT_TIMESTAMP_PARA$pszTSAPolicyId$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_PARA$fRequestCerts$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_PARA$fRequestCerts$LAYOUT() { return _CRYPT_TIMESTAMP_PARA$fRequestCerts$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_PARA$fRequestCerts$VH_ = _CRYPT_TIMESTAMP_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fRequestCerts"));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_PARA$fRequestCerts$VH() { return _CRYPT_TIMESTAMP_PARA$fRequestCerts$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_PARA$cExtension$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_PARA$cExtension$LAYOUT() { return _CRYPT_TIMESTAMP_PARA$cExtension$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_PARA$cExtension$VH_ = _CRYPT_TIMESTAMP_PARA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cExtension"));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_PARA$cExtension$VH() { return _CRYPT_TIMESTAMP_PARA$cExtension$VH_; }

    static final MemoryLayout _CRYPT_TIMESTAMP_PARA$rgExtension$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_TIMESTAMP_PARA$rgExtension$LAYOUT() { return _CRYPT_TIMESTAMP_PARA$rgExtension$LAYOUT_; }

    static final VarHandle _CRYPT_TIMESTAMP_PARA$rgExtension$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_TIMESTAMP_PARA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("rgExtension")));
    static final java.lang.invoke.VarHandle _CRYPT_TIMESTAMP_PARA$rgExtension$VH() { return _CRYPT_TIMESTAMP_PARA$rgExtension$VH_; }

    static final FunctionDescriptor CryptRetrieveTimeStamp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptRetrieveTimeStamp$FUNC() { return CryptRetrieveTimeStamp$FUNC_; }

    static final MethodHandle CryptRetrieveTimeStamp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptRetrieveTimeStamp",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptRetrieveTimeStamp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptRetrieveTimeStamp$MH() { return CryptRetrieveTimeStamp$MH_; }

    static final FunctionDescriptor CryptVerifyTimeStampSignature$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptVerifyTimeStampSignature$FUNC() { return CryptVerifyTimeStampSignature$FUNC_; }

    static final MethodHandle CryptVerifyTimeStampSignature$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptVerifyTimeStampSignature",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptVerifyTimeStampSignature$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptVerifyTimeStampSignature$MH() { return CryptVerifyTimeStampSignature$MH_; }

    static final MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pfnGet"),
        C_POINTER.withName("pfnRelease"),
        C_POINTER.withName("pfnFreePassword"),
        C_POINTER.withName("pfnFree"),
        C_POINTER.withName("pfnFreeIdentifier")
    ).withName("_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE");
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$struct$LAYOUT() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$struct$LAYOUT_; }

    static final MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$cbSize$LAYOUT() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$cbSize$LAYOUT_; }

    static final VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$cbSize$VH_ = _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$cbSize$VH() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$cbSize$VH_; }

    static final MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnGet$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnGet$LAYOUT() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnGet$LAYOUT_; }

    static final VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnGet$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnGet")));
    static final java.lang.invoke.VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnGet$VH() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnGet$VH_; }

    static final MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnRelease$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnRelease$LAYOUT() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnRelease$LAYOUT_; }

    static final VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnRelease$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnRelease")));
    static final java.lang.invoke.VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnRelease$VH() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnRelease$VH_; }

    static final MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreePassword$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreePassword$LAYOUT() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreePassword$LAYOUT_; }

    static final VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreePassword$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFreePassword")));
    static final java.lang.invoke.VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreePassword$VH() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreePassword$VH_; }

    static final MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFree$LAYOUT() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFree$LAYOUT_; }

    static final VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFree$VH() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFree$VH_; }

    static final MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreeIdentifier$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreeIdentifier$LAYOUT() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreeIdentifier$LAYOUT_; }

    static final VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreeIdentifier$VH_ = MemoryHandles.asAddressVarHandle(_CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFreeIdentifier")));
    static final java.lang.invoke.VarHandle _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreeIdentifier$VH() { return _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE$pfnFreeIdentifier$VH_; }

    static final FunctionDescriptor CertIsWeakHash$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CertIsWeakHash$FUNC() { return CertIsWeakHash$FUNC_; }

    static final MethodHandle CertIsWeakHash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CertIsWeakHash",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CertIsWeakHash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CertIsWeakHash$MH() { return CertIsWeakHash$MH_; }

    static final MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("dwPromptFlags"),
        C_POINTER.withName("hwndApp"),
        C_POINTER.withName("szPrompt")
    ).withName("_CRYPTPROTECT_PROMPTSTRUCT");
    static final jdk.incubator.foreign.MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$struct$LAYOUT() { return _CRYPTPROTECT_PROMPTSTRUCT$struct$LAYOUT_; }

    static final MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$cbSize$LAYOUT() { return _CRYPTPROTECT_PROMPTSTRUCT$cbSize$LAYOUT_; }

    static final VarHandle _CRYPTPROTECT_PROMPTSTRUCT$cbSize$VH_ = _CRYPTPROTECT_PROMPTSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CRYPTPROTECT_PROMPTSTRUCT$cbSize$VH() { return _CRYPTPROTECT_PROMPTSTRUCT$cbSize$VH_; }

    static final MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$dwPromptFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$dwPromptFlags$LAYOUT() { return _CRYPTPROTECT_PROMPTSTRUCT$dwPromptFlags$LAYOUT_; }

    static final VarHandle _CRYPTPROTECT_PROMPTSTRUCT$dwPromptFlags$VH_ = _CRYPTPROTECT_PROMPTSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPromptFlags"));
    static final java.lang.invoke.VarHandle _CRYPTPROTECT_PROMPTSTRUCT$dwPromptFlags$VH() { return _CRYPTPROTECT_PROMPTSTRUCT$dwPromptFlags$VH_; }

    static final MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$hwndApp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$hwndApp$LAYOUT() { return _CRYPTPROTECT_PROMPTSTRUCT$hwndApp$LAYOUT_; }

    static final VarHandle _CRYPTPROTECT_PROMPTSTRUCT$hwndApp$VH_ = MemoryHandles.asAddressVarHandle(_CRYPTPROTECT_PROMPTSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndApp")));
    static final java.lang.invoke.VarHandle _CRYPTPROTECT_PROMPTSTRUCT$hwndApp$VH() { return _CRYPTPROTECT_PROMPTSTRUCT$hwndApp$VH_; }

    static final MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$szPrompt$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CRYPTPROTECT_PROMPTSTRUCT$szPrompt$LAYOUT() { return _CRYPTPROTECT_PROMPTSTRUCT$szPrompt$LAYOUT_; }

    static final VarHandle _CRYPTPROTECT_PROMPTSTRUCT$szPrompt$VH_ = MemoryHandles.asAddressVarHandle(_CRYPTPROTECT_PROMPTSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("szPrompt")));
    static final java.lang.invoke.VarHandle _CRYPTPROTECT_PROMPTSTRUCT$szPrompt$VH() { return _CRYPTPROTECT_PROMPTSTRUCT$szPrompt$VH_; }

    static final FunctionDescriptor CryptProtectData$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptProtectData$FUNC() { return CryptProtectData$FUNC_; }

    static final MethodHandle CryptProtectData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptProtectData",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptProtectData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptProtectData$MH() { return CryptProtectData$MH_; }

    static final FunctionDescriptor CryptUnprotectData$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptUnprotectData$FUNC() { return CryptUnprotectData$FUNC_; }

    static final MethodHandle CryptUnprotectData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptUnprotectData",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptUnprotectData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptUnprotectData$MH() { return CryptUnprotectData$MH_; }

    static final FunctionDescriptor CryptProtectDataNoUI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptProtectDataNoUI$FUNC() { return CryptProtectDataNoUI$FUNC_; }

    static final MethodHandle CryptProtectDataNoUI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptProtectDataNoUI",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptProtectDataNoUI$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptProtectDataNoUI$MH() { return CryptProtectDataNoUI$MH_; }

    static final FunctionDescriptor CryptUnprotectDataNoUI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptUnprotectDataNoUI$FUNC() { return CryptUnprotectDataNoUI$FUNC_; }

    static final MethodHandle CryptUnprotectDataNoUI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptUnprotectDataNoUI",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CryptUnprotectDataNoUI$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptUnprotectDataNoUI$MH() { return CryptUnprotectDataNoUI$MH_; }

    static final FunctionDescriptor CryptUpdateProtectedState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptUpdateProtectedState$FUNC() { return CryptUpdateProtectedState$FUNC_; }

    static final MethodHandle CryptUpdateProtectedState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptUpdateProtectedState",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CryptUpdateProtectedState$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptUpdateProtectedState$MH() { return CryptUpdateProtectedState$MH_; }

    static final FunctionDescriptor CryptProtectMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptProtectMemory$FUNC() { return CryptProtectMemory$FUNC_; }

    static final MethodHandle CryptProtectMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptProtectMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        CryptProtectMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptProtectMemory$MH() { return CryptProtectMemory$MH_; }

    static final FunctionDescriptor CryptUnprotectMemory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CryptUnprotectMemory$FUNC() { return CryptUnprotectMemory$FUNC_; }

    static final MethodHandle CryptUnprotectMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CryptUnprotectMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        CryptUnprotectMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CryptUnprotectMemory$MH() { return CryptUnprotectMemory$MH_; }

    static final MemoryLayout _CERTIFICATE_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwCertEncodingType"),
        C_LONG.withName("cbData"),
        C_POINTER.withName("pbData")
    ).withName("_CERTIFICATE_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _CERTIFICATE_BLOB$struct$LAYOUT() { return _CERTIFICATE_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _CERTIFICATE_BLOB$dwCertEncodingType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERTIFICATE_BLOB$dwCertEncodingType$LAYOUT() { return _CERTIFICATE_BLOB$dwCertEncodingType$LAYOUT_; }

    static final VarHandle _CERTIFICATE_BLOB$dwCertEncodingType$VH_ = _CERTIFICATE_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCertEncodingType"));
    static final java.lang.invoke.VarHandle _CERTIFICATE_BLOB$dwCertEncodingType$VH() { return _CERTIFICATE_BLOB$dwCertEncodingType$VH_; }

    static final MemoryLayout _CERTIFICATE_BLOB$cbData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CERTIFICATE_BLOB$cbData$LAYOUT() { return _CERTIFICATE_BLOB$cbData$LAYOUT_; }

    static final VarHandle _CERTIFICATE_BLOB$cbData$VH_ = _CERTIFICATE_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbData"));
    static final java.lang.invoke.VarHandle _CERTIFICATE_BLOB$cbData$VH() { return _CERTIFICATE_BLOB$cbData$VH_; }

    static final MemoryLayout _CERTIFICATE_BLOB$pbData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CERTIFICATE_BLOB$pbData$LAYOUT() { return _CERTIFICATE_BLOB$pbData$LAYOUT_; }

    static final VarHandle _CERTIFICATE_BLOB$pbData$VH_ = MemoryHandles.asAddressVarHandle(_CERTIFICATE_BLOB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbData")));
    static final java.lang.invoke.VarHandle _CERTIFICATE_BLOB$pbData$VH() { return _CERTIFICATE_BLOB$pbData$VH_; }

    static final MemoryLayout _EFS_HASH_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbData"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbData")
    ).withName("_EFS_HASH_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _EFS_HASH_BLOB$struct$LAYOUT() { return _EFS_HASH_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _EFS_HASH_BLOB$cbData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_HASH_BLOB$cbData$LAYOUT() { return _EFS_HASH_BLOB$cbData$LAYOUT_; }

    static final VarHandle _EFS_HASH_BLOB$cbData$VH_ = _EFS_HASH_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbData"));
    static final java.lang.invoke.VarHandle _EFS_HASH_BLOB$cbData$VH() { return _EFS_HASH_BLOB$cbData$VH_; }

    static final MemoryLayout _EFS_HASH_BLOB$pbData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EFS_HASH_BLOB$pbData$LAYOUT() { return _EFS_HASH_BLOB$pbData$LAYOUT_; }

    static final VarHandle _EFS_HASH_BLOB$pbData$VH_ = MemoryHandles.asAddressVarHandle(_EFS_HASH_BLOB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbData")));
    static final java.lang.invoke.VarHandle _EFS_HASH_BLOB$pbData$VH() { return _EFS_HASH_BLOB$pbData$VH_; }

    static final MemoryLayout _EFS_RPC_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbData"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pbData")
    ).withName("_EFS_RPC_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _EFS_RPC_BLOB$struct$LAYOUT() { return _EFS_RPC_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _EFS_RPC_BLOB$cbData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_RPC_BLOB$cbData$LAYOUT() { return _EFS_RPC_BLOB$cbData$LAYOUT_; }

    static final VarHandle _EFS_RPC_BLOB$cbData$VH_ = _EFS_RPC_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbData"));
    static final java.lang.invoke.VarHandle _EFS_RPC_BLOB$cbData$VH() { return _EFS_RPC_BLOB$cbData$VH_; }

    static final MemoryLayout _EFS_RPC_BLOB$pbData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EFS_RPC_BLOB$pbData$LAYOUT() { return _EFS_RPC_BLOB$pbData$LAYOUT_; }

    static final VarHandle _EFS_RPC_BLOB$pbData$VH_ = MemoryHandles.asAddressVarHandle(_EFS_RPC_BLOB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbData")));
    static final java.lang.invoke.VarHandle _EFS_RPC_BLOB$pbData$VH() { return _EFS_RPC_BLOB$pbData$VH_; }

    static final MemoryLayout _EFS_PIN_BLOB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbPadding"),
        C_LONG.withName("cbData"),
        C_POINTER.withName("pbData")
    ).withName("_EFS_PIN_BLOB");
    static final jdk.incubator.foreign.MemoryLayout _EFS_PIN_BLOB$struct$LAYOUT() { return _EFS_PIN_BLOB$struct$LAYOUT_; }

    static final MemoryLayout _EFS_PIN_BLOB$cbPadding$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_PIN_BLOB$cbPadding$LAYOUT() { return _EFS_PIN_BLOB$cbPadding$LAYOUT_; }

    static final VarHandle _EFS_PIN_BLOB$cbPadding$VH_ = _EFS_PIN_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbPadding"));
    static final java.lang.invoke.VarHandle _EFS_PIN_BLOB$cbPadding$VH() { return _EFS_PIN_BLOB$cbPadding$VH_; }

    static final MemoryLayout _EFS_PIN_BLOB$cbData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_PIN_BLOB$cbData$LAYOUT() { return _EFS_PIN_BLOB$cbData$LAYOUT_; }

    static final VarHandle _EFS_PIN_BLOB$cbData$VH_ = _EFS_PIN_BLOB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbData"));
    static final java.lang.invoke.VarHandle _EFS_PIN_BLOB$cbData$VH() { return _EFS_PIN_BLOB$cbData$VH_; }

    static final MemoryLayout _EFS_PIN_BLOB$pbData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EFS_PIN_BLOB$pbData$LAYOUT() { return _EFS_PIN_BLOB$pbData$LAYOUT_; }

    static final VarHandle _EFS_PIN_BLOB$pbData$VH_ = MemoryHandles.asAddressVarHandle(_EFS_PIN_BLOB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pbData")));
    static final java.lang.invoke.VarHandle _EFS_PIN_BLOB$pbData$VH() { return _EFS_PIN_BLOB$pbData$VH_; }

    static final MemoryLayout _EFS_KEY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwVersion"),
        C_LONG.withName("Entropy"),
        C_INT.withName("Algorithm"),
        C_LONG.withName("KeyLength")
    ).withName("_EFS_KEY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _EFS_KEY_INFO$struct$LAYOUT() { return _EFS_KEY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _EFS_KEY_INFO$dwVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_KEY_INFO$dwVersion$LAYOUT() { return _EFS_KEY_INFO$dwVersion$LAYOUT_; }

    static final VarHandle _EFS_KEY_INFO$dwVersion$VH_ = _EFS_KEY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwVersion"));
    static final java.lang.invoke.VarHandle _EFS_KEY_INFO$dwVersion$VH() { return _EFS_KEY_INFO$dwVersion$VH_; }

    static final MemoryLayout _EFS_KEY_INFO$Entropy$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_KEY_INFO$Entropy$LAYOUT() { return _EFS_KEY_INFO$Entropy$LAYOUT_; }

    static final VarHandle _EFS_KEY_INFO$Entropy$VH_ = _EFS_KEY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Entropy"));
    static final java.lang.invoke.VarHandle _EFS_KEY_INFO$Entropy$VH() { return _EFS_KEY_INFO$Entropy$VH_; }

    static final MemoryLayout _EFS_KEY_INFO$Algorithm$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _EFS_KEY_INFO$Algorithm$LAYOUT() { return _EFS_KEY_INFO$Algorithm$LAYOUT_; }

    static final VarHandle _EFS_KEY_INFO$Algorithm$VH_ = _EFS_KEY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Algorithm"));
    static final java.lang.invoke.VarHandle _EFS_KEY_INFO$Algorithm$VH() { return _EFS_KEY_INFO$Algorithm$VH_; }

    static final MemoryLayout _EFS_KEY_INFO$KeyLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_KEY_INFO$KeyLength$LAYOUT() { return _EFS_KEY_INFO$KeyLength$LAYOUT_; }

    static final VarHandle _EFS_KEY_INFO$KeyLength$VH_ = _EFS_KEY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("KeyLength"));
    static final java.lang.invoke.VarHandle _EFS_KEY_INFO$KeyLength$VH() { return _EFS_KEY_INFO$KeyLength$VH_; }

    static final MemoryLayout _EFS_COMPATIBILITY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("EfsVersion")
    ).withName("_EFS_COMPATIBILITY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _EFS_COMPATIBILITY_INFO$struct$LAYOUT() { return _EFS_COMPATIBILITY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _EFS_COMPATIBILITY_INFO$EfsVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_COMPATIBILITY_INFO$EfsVersion$LAYOUT() { return _EFS_COMPATIBILITY_INFO$EfsVersion$LAYOUT_; }

    static final VarHandle _EFS_COMPATIBILITY_INFO$EfsVersion$VH_ = _EFS_COMPATIBILITY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EfsVersion"));
    static final java.lang.invoke.VarHandle _EFS_COMPATIBILITY_INFO$EfsVersion$VH() { return _EFS_COMPATIBILITY_INFO$EfsVersion$VH_; }

    static final MemoryLayout _EFS_VERSION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("EfsVersion"),
        C_LONG.withName("SubVersion")
    ).withName("_EFS_VERSION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _EFS_VERSION_INFO$struct$LAYOUT() { return _EFS_VERSION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _EFS_VERSION_INFO$EfsVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_VERSION_INFO$EfsVersion$LAYOUT() { return _EFS_VERSION_INFO$EfsVersion$LAYOUT_; }

    static final VarHandle _EFS_VERSION_INFO$EfsVersion$VH_ = _EFS_VERSION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EfsVersion"));
    static final java.lang.invoke.VarHandle _EFS_VERSION_INFO$EfsVersion$VH() { return _EFS_VERSION_INFO$EfsVersion$VH_; }

    static final MemoryLayout _EFS_VERSION_INFO$SubVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_VERSION_INFO$SubVersion$LAYOUT() { return _EFS_VERSION_INFO$SubVersion$LAYOUT_; }

    static final VarHandle _EFS_VERSION_INFO$SubVersion$VH_ = _EFS_VERSION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SubVersion"));
    static final java.lang.invoke.VarHandle _EFS_VERSION_INFO$SubVersion$VH() { return _EFS_VERSION_INFO$SubVersion$VH_; }

    static final MemoryLayout _EFS_DECRYPTION_STATUS_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwDecryptionError"),
        C_LONG.withName("dwHashOffset"),
        C_LONG.withName("cbHash")
    ).withName("_EFS_DECRYPTION_STATUS_INFO");
    static final jdk.incubator.foreign.MemoryLayout _EFS_DECRYPTION_STATUS_INFO$struct$LAYOUT() { return _EFS_DECRYPTION_STATUS_INFO$struct$LAYOUT_; }

    static final MemoryLayout _EFS_DECRYPTION_STATUS_INFO$dwDecryptionError$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_DECRYPTION_STATUS_INFO$dwDecryptionError$LAYOUT() { return _EFS_DECRYPTION_STATUS_INFO$dwDecryptionError$LAYOUT_; }

    static final VarHandle _EFS_DECRYPTION_STATUS_INFO$dwDecryptionError$VH_ = _EFS_DECRYPTION_STATUS_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDecryptionError"));
    static final java.lang.invoke.VarHandle _EFS_DECRYPTION_STATUS_INFO$dwDecryptionError$VH() { return _EFS_DECRYPTION_STATUS_INFO$dwDecryptionError$VH_; }

    static final MemoryLayout _EFS_DECRYPTION_STATUS_INFO$dwHashOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_DECRYPTION_STATUS_INFO$dwHashOffset$LAYOUT() { return _EFS_DECRYPTION_STATUS_INFO$dwHashOffset$LAYOUT_; }

    static final VarHandle _EFS_DECRYPTION_STATUS_INFO$dwHashOffset$VH_ = _EFS_DECRYPTION_STATUS_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwHashOffset"));
    static final java.lang.invoke.VarHandle _EFS_DECRYPTION_STATUS_INFO$dwHashOffset$VH() { return _EFS_DECRYPTION_STATUS_INFO$dwHashOffset$VH_; }

    static final MemoryLayout _EFS_DECRYPTION_STATUS_INFO$cbHash$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_DECRYPTION_STATUS_INFO$cbHash$LAYOUT() { return _EFS_DECRYPTION_STATUS_INFO$cbHash$LAYOUT_; }

    static final VarHandle _EFS_DECRYPTION_STATUS_INFO$cbHash$VH_ = _EFS_DECRYPTION_STATUS_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbHash"));
    static final java.lang.invoke.VarHandle _EFS_DECRYPTION_STATUS_INFO$cbHash$VH() { return _EFS_DECRYPTION_STATUS_INFO$cbHash$VH_; }

    static final MemoryLayout _EFS_ENCRYPTION_STATUS_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("bHasCurrentKey"),
        C_LONG.withName("dwEncryptionError")
    ).withName("_EFS_ENCRYPTION_STATUS_INFO");
    static final jdk.incubator.foreign.MemoryLayout _EFS_ENCRYPTION_STATUS_INFO$struct$LAYOUT() { return _EFS_ENCRYPTION_STATUS_INFO$struct$LAYOUT_; }

    static final MemoryLayout _EFS_ENCRYPTION_STATUS_INFO$bHasCurrentKey$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _EFS_ENCRYPTION_STATUS_INFO$bHasCurrentKey$LAYOUT() { return _EFS_ENCRYPTION_STATUS_INFO$bHasCurrentKey$LAYOUT_; }

    static final VarHandle _EFS_ENCRYPTION_STATUS_INFO$bHasCurrentKey$VH_ = _EFS_ENCRYPTION_STATUS_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bHasCurrentKey"));
    static final java.lang.invoke.VarHandle _EFS_ENCRYPTION_STATUS_INFO$bHasCurrentKey$VH() { return _EFS_ENCRYPTION_STATUS_INFO$bHasCurrentKey$VH_; }

    static final MemoryLayout _EFS_ENCRYPTION_STATUS_INFO$dwEncryptionError$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EFS_ENCRYPTION_STATUS_INFO$dwEncryptionError$LAYOUT() { return _EFS_ENCRYPTION_STATUS_INFO$dwEncryptionError$LAYOUT_; }

    static final VarHandle _EFS_ENCRYPTION_STATUS_INFO$dwEncryptionError$VH_ = _EFS_ENCRYPTION_STATUS_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwEncryptionError"));
    static final java.lang.invoke.VarHandle _EFS_ENCRYPTION_STATUS_INFO$dwEncryptionError$VH() { return _EFS_ENCRYPTION_STATUS_INFO$dwEncryptionError$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbTotalLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pUserSid"),
        C_POINTER.withName("pCertBlob")
    ).withName("_ENCRYPTION_CERTIFICATE");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE$struct$LAYOUT() { return _ENCRYPTION_CERTIFICATE$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE$cbTotalLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE$cbTotalLength$LAYOUT() { return _ENCRYPTION_CERTIFICATE$cbTotalLength$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE$cbTotalLength$VH_ = _ENCRYPTION_CERTIFICATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbTotalLength"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE$cbTotalLength$VH() { return _ENCRYPTION_CERTIFICATE$cbTotalLength$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE$pUserSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE$pUserSid$LAYOUT() { return _ENCRYPTION_CERTIFICATE$pUserSid$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE$pUserSid$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_CERTIFICATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUserSid")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE$pUserSid$VH() { return _ENCRYPTION_CERTIFICATE$pUserSid$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE$pCertBlob$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE$pCertBlob$LAYOUT() { return _ENCRYPTION_CERTIFICATE$pCertBlob$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE$pCertBlob$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_CERTIFICATE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pCertBlob")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE$pCertBlob$VH() { return _ENCRYPTION_CERTIFICATE$pCertBlob$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbTotalLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pUserSid"),
        C_POINTER.withName("pHash"),
        C_POINTER.withName("lpDisplayInformation")
    ).withName("_ENCRYPTION_CERTIFICATE_HASH");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$struct$LAYOUT() { return _ENCRYPTION_CERTIFICATE_HASH$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$cbTotalLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$cbTotalLength$LAYOUT() { return _ENCRYPTION_CERTIFICATE_HASH$cbTotalLength$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE_HASH$cbTotalLength$VH_ = _ENCRYPTION_CERTIFICATE_HASH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbTotalLength"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE_HASH$cbTotalLength$VH() { return _ENCRYPTION_CERTIFICATE_HASH$cbTotalLength$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$pUserSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$pUserSid$LAYOUT() { return _ENCRYPTION_CERTIFICATE_HASH$pUserSid$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE_HASH$pUserSid$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_CERTIFICATE_HASH$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUserSid")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE_HASH$pUserSid$VH() { return _ENCRYPTION_CERTIFICATE_HASH$pUserSid$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$pHash$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$pHash$LAYOUT() { return _ENCRYPTION_CERTIFICATE_HASH$pHash$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE_HASH$pHash$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_CERTIFICATE_HASH$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pHash")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE_HASH$pHash$VH() { return _ENCRYPTION_CERTIFICATE_HASH$pHash$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$lpDisplayInformation$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_HASH$lpDisplayInformation$LAYOUT() { return _ENCRYPTION_CERTIFICATE_HASH$lpDisplayInformation$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE_HASH$lpDisplayInformation$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_CERTIFICATE_HASH$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpDisplayInformation")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE_HASH$lpDisplayInformation$VH() { return _ENCRYPTION_CERTIFICATE_HASH$lpDisplayInformation$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_HASH_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("nCert_Hash"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pUsers")
    ).withName("_ENCRYPTION_CERTIFICATE_HASH_LIST");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_HASH_LIST$struct$LAYOUT() { return _ENCRYPTION_CERTIFICATE_HASH_LIST$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_HASH_LIST$nCert_Hash$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_HASH_LIST$nCert_Hash$LAYOUT() { return _ENCRYPTION_CERTIFICATE_HASH_LIST$nCert_Hash$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE_HASH_LIST$nCert_Hash$VH_ = _ENCRYPTION_CERTIFICATE_HASH_LIST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nCert_Hash"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE_HASH_LIST$nCert_Hash$VH() { return _ENCRYPTION_CERTIFICATE_HASH_LIST$nCert_Hash$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_HASH_LIST$pUsers$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_HASH_LIST$pUsers$LAYOUT() { return _ENCRYPTION_CERTIFICATE_HASH_LIST$pUsers$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE_HASH_LIST$pUsers$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_CERTIFICATE_HASH_LIST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUsers")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE_HASH_LIST$pUsers$VH() { return _ENCRYPTION_CERTIFICATE_HASH_LIST$pUsers$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("nUsers"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pUsers")
    ).withName("_ENCRYPTION_CERTIFICATE_LIST");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_LIST$struct$LAYOUT() { return _ENCRYPTION_CERTIFICATE_LIST$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_LIST$nUsers$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_LIST$nUsers$LAYOUT() { return _ENCRYPTION_CERTIFICATE_LIST$nUsers$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE_LIST$nUsers$VH_ = _ENCRYPTION_CERTIFICATE_LIST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nUsers"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE_LIST$nUsers$VH() { return _ENCRYPTION_CERTIFICATE_LIST$nUsers$VH_; }

    static final MemoryLayout _ENCRYPTION_CERTIFICATE_LIST$pUsers$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_CERTIFICATE_LIST$pUsers$LAYOUT() { return _ENCRYPTION_CERTIFICATE_LIST$pUsers$LAYOUT_; }

    static final VarHandle _ENCRYPTION_CERTIFICATE_LIST$pUsers$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_CERTIFICATE_LIST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUsers")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_CERTIFICATE_LIST$pUsers$VH() { return _ENCRYPTION_CERTIFICATE_LIST$pUsers$VH_; }

    static final MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwEfsAccessType"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pCertificatesAdded"),
        C_POINTER.withName("pEncryptionCertificate"),
        C_POINTER.withName("pEfsStreamSignature")
    ).withName("_ENCRYPTED_FILE_METADATA_SIGNATURE");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$struct$LAYOUT() { return _ENCRYPTED_FILE_METADATA_SIGNATURE$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$dwEfsAccessType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$dwEfsAccessType$LAYOUT() { return _ENCRYPTED_FILE_METADATA_SIGNATURE$dwEfsAccessType$LAYOUT_; }

    static final VarHandle _ENCRYPTED_FILE_METADATA_SIGNATURE$dwEfsAccessType$VH_ = _ENCRYPTED_FILE_METADATA_SIGNATURE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwEfsAccessType"));
    static final java.lang.invoke.VarHandle _ENCRYPTED_FILE_METADATA_SIGNATURE$dwEfsAccessType$VH() { return _ENCRYPTED_FILE_METADATA_SIGNATURE$dwEfsAccessType$VH_; }

    static final MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$pCertificatesAdded$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$pCertificatesAdded$LAYOUT() { return _ENCRYPTED_FILE_METADATA_SIGNATURE$pCertificatesAdded$LAYOUT_; }

    static final VarHandle _ENCRYPTED_FILE_METADATA_SIGNATURE$pCertificatesAdded$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTED_FILE_METADATA_SIGNATURE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pCertificatesAdded")));
    static final java.lang.invoke.VarHandle _ENCRYPTED_FILE_METADATA_SIGNATURE$pCertificatesAdded$VH() { return _ENCRYPTED_FILE_METADATA_SIGNATURE$pCertificatesAdded$VH_; }

    static final MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$pEncryptionCertificate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$pEncryptionCertificate$LAYOUT() { return _ENCRYPTED_FILE_METADATA_SIGNATURE$pEncryptionCertificate$LAYOUT_; }

    static final VarHandle _ENCRYPTED_FILE_METADATA_SIGNATURE$pEncryptionCertificate$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTED_FILE_METADATA_SIGNATURE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pEncryptionCertificate")));
    static final java.lang.invoke.VarHandle _ENCRYPTED_FILE_METADATA_SIGNATURE$pEncryptionCertificate$VH() { return _ENCRYPTED_FILE_METADATA_SIGNATURE$pEncryptionCertificate$VH_; }

    static final MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$pEfsStreamSignature$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTED_FILE_METADATA_SIGNATURE$pEfsStreamSignature$LAYOUT() { return _ENCRYPTED_FILE_METADATA_SIGNATURE$pEfsStreamSignature$LAYOUT_; }

    static final VarHandle _ENCRYPTED_FILE_METADATA_SIGNATURE$pEfsStreamSignature$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTED_FILE_METADATA_SIGNATURE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pEfsStreamSignature")));
    static final java.lang.invoke.VarHandle _ENCRYPTED_FILE_METADATA_SIGNATURE$pEfsStreamSignature$VH() { return _ENCRYPTED_FILE_METADATA_SIGNATURE$pEfsStreamSignature$VH_; }

    static final MemoryLayout _ENCRYPTION_PROTECTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbTotalLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pUserSid"),
        C_POINTER.withName("lpProtectorDescriptor")
    ).withName("_ENCRYPTION_PROTECTOR");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_PROTECTOR$struct$LAYOUT() { return _ENCRYPTION_PROTECTOR$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTION_PROTECTOR$cbTotalLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_PROTECTOR$cbTotalLength$LAYOUT() { return _ENCRYPTION_PROTECTOR$cbTotalLength$LAYOUT_; }

    static final VarHandle _ENCRYPTION_PROTECTOR$cbTotalLength$VH_ = _ENCRYPTION_PROTECTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbTotalLength"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_PROTECTOR$cbTotalLength$VH() { return _ENCRYPTION_PROTECTOR$cbTotalLength$VH_; }

    static final MemoryLayout _ENCRYPTION_PROTECTOR$pUserSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_PROTECTOR$pUserSid$LAYOUT() { return _ENCRYPTION_PROTECTOR$pUserSid$LAYOUT_; }

    static final VarHandle _ENCRYPTION_PROTECTOR$pUserSid$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_PROTECTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUserSid")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_PROTECTOR$pUserSid$VH() { return _ENCRYPTION_PROTECTOR$pUserSid$VH_; }

    static final MemoryLayout _ENCRYPTION_PROTECTOR$lpProtectorDescriptor$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_PROTECTOR$lpProtectorDescriptor$LAYOUT() { return _ENCRYPTION_PROTECTOR$lpProtectorDescriptor$LAYOUT_; }

    static final VarHandle _ENCRYPTION_PROTECTOR$lpProtectorDescriptor$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_PROTECTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpProtectorDescriptor")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_PROTECTOR$lpProtectorDescriptor$VH() { return _ENCRYPTION_PROTECTOR$lpProtectorDescriptor$VH_; }

    static final MemoryLayout _ENCRYPTION_PROTECTOR_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("nProtectors"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pProtectors")
    ).withName("_ENCRYPTION_PROTECTOR_LIST");
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_PROTECTOR_LIST$struct$LAYOUT() { return _ENCRYPTION_PROTECTOR_LIST$struct$LAYOUT_; }

    static final MemoryLayout _ENCRYPTION_PROTECTOR_LIST$nProtectors$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_PROTECTOR_LIST$nProtectors$LAYOUT() { return _ENCRYPTION_PROTECTOR_LIST$nProtectors$LAYOUT_; }

    static final VarHandle _ENCRYPTION_PROTECTOR_LIST$nProtectors$VH_ = _ENCRYPTION_PROTECTOR_LIST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nProtectors"));
    static final java.lang.invoke.VarHandle _ENCRYPTION_PROTECTOR_LIST$nProtectors$VH() { return _ENCRYPTION_PROTECTOR_LIST$nProtectors$VH_; }

    static final MemoryLayout _ENCRYPTION_PROTECTOR_LIST$pProtectors$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ENCRYPTION_PROTECTOR_LIST$pProtectors$LAYOUT() { return _ENCRYPTION_PROTECTOR_LIST$pProtectors$LAYOUT_; }

    static final VarHandle _ENCRYPTION_PROTECTOR_LIST$pProtectors$VH_ = MemoryHandles.asAddressVarHandle(_ENCRYPTION_PROTECTOR_LIST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pProtectors")));
    static final java.lang.invoke.VarHandle _ENCRYPTION_PROTECTOR_LIST$pProtectors$VH() { return _ENCRYPTION_PROTECTOR_LIST$pProtectors$VH_; }

    static final FunctionDescriptor QueryUsersOnEncryptedFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor QueryUsersOnEncryptedFile$FUNC() { return QueryUsersOnEncryptedFile$FUNC_; }

    static final MethodHandle QueryUsersOnEncryptedFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryUsersOnEncryptedFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryUsersOnEncryptedFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle QueryUsersOnEncryptedFile$MH() { return QueryUsersOnEncryptedFile$MH_; }

    static final FunctionDescriptor QueryRecoveryAgentsOnEncryptedFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor QueryRecoveryAgentsOnEncryptedFile$FUNC() { return QueryRecoveryAgentsOnEncryptedFile$FUNC_; }

    static final MethodHandle QueryRecoveryAgentsOnEncryptedFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryRecoveryAgentsOnEncryptedFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryRecoveryAgentsOnEncryptedFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle QueryRecoveryAgentsOnEncryptedFile$MH() { return QueryRecoveryAgentsOnEncryptedFile$MH_; }

    static final FunctionDescriptor RemoveUsersFromEncryptedFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RemoveUsersFromEncryptedFile$FUNC() { return RemoveUsersFromEncryptedFile$FUNC_; }

    static final MethodHandle RemoveUsersFromEncryptedFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveUsersFromEncryptedFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveUsersFromEncryptedFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RemoveUsersFromEncryptedFile$MH() { return RemoveUsersFromEncryptedFile$MH_; }

    static final FunctionDescriptor AddUsersToEncryptedFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AddUsersToEncryptedFile$FUNC() { return AddUsersToEncryptedFile$FUNC_; }

    static final MethodHandle AddUsersToEncryptedFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddUsersToEncryptedFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AddUsersToEncryptedFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AddUsersToEncryptedFile$MH() { return AddUsersToEncryptedFile$MH_; }

    static final FunctionDescriptor SetUserFileEncryptionKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetUserFileEncryptionKey$FUNC() { return SetUserFileEncryptionKey$FUNC_; }

    static final MethodHandle SetUserFileEncryptionKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetUserFileEncryptionKey",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetUserFileEncryptionKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetUserFileEncryptionKey$MH() { return SetUserFileEncryptionKey$MH_; }

    static final FunctionDescriptor SetUserFileEncryptionKeyEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetUserFileEncryptionKeyEx$FUNC() { return SetUserFileEncryptionKeyEx$FUNC_; }

    static final MethodHandle SetUserFileEncryptionKeyEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetUserFileEncryptionKeyEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetUserFileEncryptionKeyEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetUserFileEncryptionKeyEx$MH() { return SetUserFileEncryptionKeyEx$MH_; }

    static final FunctionDescriptor FreeEncryptionCertificateHashList$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FreeEncryptionCertificateHashList$FUNC() { return FreeEncryptionCertificateHashList$FUNC_; }

    static final MethodHandle FreeEncryptionCertificateHashList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeEncryptionCertificateHashList",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FreeEncryptionCertificateHashList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FreeEncryptionCertificateHashList$MH() { return FreeEncryptionCertificateHashList$MH_; }

    static final FunctionDescriptor EncryptionDisable$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor EncryptionDisable$FUNC() { return EncryptionDisable$FUNC_; }

    static final MethodHandle EncryptionDisable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EncryptionDisable",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EncryptionDisable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EncryptionDisable$MH() { return EncryptionDisable$MH_; }

    static final FunctionDescriptor DuplicateEncryptionInfoFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DuplicateEncryptionInfoFile$FUNC() { return DuplicateEncryptionInfoFile$FUNC_; }

    static final MethodHandle DuplicateEncryptionInfoFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DuplicateEncryptionInfoFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        DuplicateEncryptionInfoFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DuplicateEncryptionInfoFile$MH() { return DuplicateEncryptionInfoFile$MH_; }

    static final FunctionDescriptor GetEncryptedFileMetadata$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEncryptedFileMetadata$FUNC() { return GetEncryptedFileMetadata$FUNC_; }

    static final MethodHandle GetEncryptedFileMetadata$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEncryptedFileMetadata",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetEncryptedFileMetadata$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEncryptedFileMetadata$MH() { return GetEncryptedFileMetadata$MH_; }

    static final FunctionDescriptor SetEncryptedFileMetadata$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetEncryptedFileMetadata$FUNC() { return SetEncryptedFileMetadata$FUNC_; }

    static final MethodHandle SetEncryptedFileMetadata$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEncryptedFileMetadata",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetEncryptedFileMetadata$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetEncryptedFileMetadata$MH() { return SetEncryptedFileMetadata$MH_; }

    static final FunctionDescriptor FreeEncryptedFileMetadata$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FreeEncryptedFileMetadata$FUNC() { return FreeEncryptedFileMetadata$FUNC_; }

    static final MethodHandle FreeEncryptedFileMetadata$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeEncryptedFileMetadata",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        FreeEncryptedFileMetadata$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FreeEncryptedFileMetadata$MH() { return FreeEncryptedFileMetadata$MH_; }

    static final MemoryLayout RPC_IMPORT_CONTEXT_P$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("LookupContext"),
        C_POINTER.withName("ProposedHandle"),
        C_POINTER.withName("Bindings")
    );
    static final jdk.incubator.foreign.MemoryLayout RPC_IMPORT_CONTEXT_P$struct$LAYOUT() { return RPC_IMPORT_CONTEXT_P$struct$LAYOUT_; }

    static final MemoryLayout RPC_IMPORT_CONTEXT_P$LookupContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout RPC_IMPORT_CONTEXT_P$LookupContext$LAYOUT() { return RPC_IMPORT_CONTEXT_P$LookupContext$LAYOUT_; }

    static final VarHandle RPC_IMPORT_CONTEXT_P$LookupContext$VH_ = MemoryHandles.asAddressVarHandle(RPC_IMPORT_CONTEXT_P$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LookupContext")));
    static final java.lang.invoke.VarHandle RPC_IMPORT_CONTEXT_P$LookupContext$VH() { return RPC_IMPORT_CONTEXT_P$LookupContext$VH_; }

    static final MemoryLayout RPC_IMPORT_CONTEXT_P$ProposedHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout RPC_IMPORT_CONTEXT_P$ProposedHandle$LAYOUT() { return RPC_IMPORT_CONTEXT_P$ProposedHandle$LAYOUT_; }

    static final VarHandle RPC_IMPORT_CONTEXT_P$ProposedHandle$VH_ = MemoryHandles.asAddressVarHandle(RPC_IMPORT_CONTEXT_P$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ProposedHandle")));
    static final java.lang.invoke.VarHandle RPC_IMPORT_CONTEXT_P$ProposedHandle$VH() { return RPC_IMPORT_CONTEXT_P$ProposedHandle$VH_; }

    static final MemoryLayout RPC_IMPORT_CONTEXT_P$Bindings$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout RPC_IMPORT_CONTEXT_P$Bindings$LAYOUT() { return RPC_IMPORT_CONTEXT_P$Bindings$LAYOUT_; }

    static final VarHandle RPC_IMPORT_CONTEXT_P$Bindings$VH_ = MemoryHandles.asAddressVarHandle(RPC_IMPORT_CONTEXT_P$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Bindings")));
    static final java.lang.invoke.VarHandle RPC_IMPORT_CONTEXT_P$Bindings$VH() { return RPC_IMPORT_CONTEXT_P$Bindings$VH_; }

    static final FunctionDescriptor I_RpcNsGetBuffer$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor I_RpcNsGetBuffer$FUNC() { return I_RpcNsGetBuffer$FUNC_; }

    static final MethodHandle I_RpcNsGetBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "I_RpcNsGetBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        I_RpcNsGetBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle I_RpcNsGetBuffer$MH() { return I_RpcNsGetBuffer$MH_; }

    static final FunctionDescriptor I_RpcNsSendReceive$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor I_RpcNsSendReceive$FUNC() { return I_RpcNsSendReceive$FUNC_; }

    static final MethodHandle I_RpcNsSendReceive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "I_RpcNsSendReceive",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        I_RpcNsSendReceive$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle I_RpcNsSendReceive$MH() { return I_RpcNsSendReceive$MH_; }

    static final FunctionDescriptor I_RpcNsRaiseException$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor I_RpcNsRaiseException$FUNC() { return I_RpcNsRaiseException$FUNC_; }

    static final MethodHandle I_RpcNsRaiseException$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "I_RpcNsRaiseException",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        I_RpcNsRaiseException$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle I_RpcNsRaiseException$MH() { return I_RpcNsRaiseException$MH_; }

    static final FunctionDescriptor I_RpcReBindBuffer$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor I_RpcReBindBuffer$FUNC() { return I_RpcReBindBuffer$FUNC_; }

    static final MethodHandle I_RpcReBindBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "I_RpcReBindBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        I_RpcReBindBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle I_RpcReBindBuffer$MH() { return I_RpcReBindBuffer$MH_; }

    static final FunctionDescriptor I_NsServerBindSearch$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor I_NsServerBindSearch$FUNC() { return I_NsServerBindSearch$FUNC_; }

    static final MethodHandle I_NsServerBindSearch$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "I_NsServerBindSearch",
        "()I",
        I_NsServerBindSearch$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle I_NsServerBindSearch$MH() { return I_NsServerBindSearch$MH_; }

    static final FunctionDescriptor I_NsClientBindSearch$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor I_NsClientBindSearch$FUNC() { return I_NsClientBindSearch$FUNC_; }

    static final MethodHandle I_NsClientBindSearch$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "I_NsClientBindSearch",
        "()I",
        I_NsClientBindSearch$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle I_NsClientBindSearch$MH() { return I_NsClientBindSearch$MH_; }

    static final FunctionDescriptor I_NsClientBindDone$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor I_NsClientBindDone$FUNC() { return I_NsClientBindDone$FUNC_; }

    static final MethodHandle I_NsClientBindDone$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "I_NsClientBindDone",
        "()V",
        I_NsClientBindDone$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle I_NsClientBindDone$MH() { return I_NsClientBindDone$MH_; }

    static final FunctionDescriptor MIDL_user_allocate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor MIDL_user_allocate$FUNC() { return MIDL_user_allocate$FUNC_; }

    static final MethodHandle MIDL_user_allocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MIDL_user_allocate",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        MIDL_user_allocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MIDL_user_allocate$MH() { return MIDL_user_allocate$MH_; }

    static final FunctionDescriptor MIDL_user_free$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor MIDL_user_free$FUNC() { return MIDL_user_free$FUNC_; }

    static final MethodHandle MIDL_user_free$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MIDL_user_free",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        MIDL_user_free$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MIDL_user_free$MH() { return MIDL_user_free$MH_; }

    static final FunctionDescriptor I_RpcDefaultAllocate$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor I_RpcDefaultAllocate$FUNC() { return I_RpcDefaultAllocate$FUNC_; }

    static final MethodHandle I_RpcDefaultAllocate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "I_RpcDefaultAllocate",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        I_RpcDefaultAllocate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle I_RpcDefaultAllocate$MH() { return I_RpcDefaultAllocate$MH_; }

    static final FunctionDescriptor I_RpcDefaultAllocate$RealAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor I_RpcDefaultAllocate$RealAlloc$FUNC() { return I_RpcDefaultAllocate$RealAlloc$FUNC_; }

    static final FunctionDescriptor I_RpcDefaultFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor I_RpcDefaultFree$FUNC() { return I_RpcDefaultFree$FUNC_; }

    static final MethodHandle I_RpcDefaultFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "I_RpcDefaultFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        I_RpcDefaultFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle I_RpcDefaultFree$MH() { return I_RpcDefaultFree$MH_; }

    static final FunctionDescriptor I_RpcDefaultFree$RealFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor I_RpcDefaultFree$RealFree$FUNC() { return I_RpcDefaultFree$RealFree$FUNC_; }

    static final MemoryLayout _SCONTEXT_QUEUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfObjects"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ArrayOfObjects")
    ).withName("_SCONTEXT_QUEUE");
    static final jdk.incubator.foreign.MemoryLayout _SCONTEXT_QUEUE$struct$LAYOUT() { return _SCONTEXT_QUEUE$struct$LAYOUT_; }

    static final MemoryLayout _SCONTEXT_QUEUE$NumberOfObjects$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SCONTEXT_QUEUE$NumberOfObjects$LAYOUT() { return _SCONTEXT_QUEUE$NumberOfObjects$LAYOUT_; }

    static final VarHandle _SCONTEXT_QUEUE$NumberOfObjects$VH_ = _SCONTEXT_QUEUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfObjects"));
    static final java.lang.invoke.VarHandle _SCONTEXT_QUEUE$NumberOfObjects$VH() { return _SCONTEXT_QUEUE$NumberOfObjects$VH_; }

    static final MemoryLayout _SCONTEXT_QUEUE$ArrayOfObjects$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SCONTEXT_QUEUE$ArrayOfObjects$LAYOUT() { return _SCONTEXT_QUEUE$ArrayOfObjects$LAYOUT_; }

    static final VarHandle _SCONTEXT_QUEUE$ArrayOfObjects$VH_ = MemoryHandles.asAddressVarHandle(_SCONTEXT_QUEUE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ArrayOfObjects")));
    static final java.lang.invoke.VarHandle _SCONTEXT_QUEUE$ArrayOfObjects$VH() { return _SCONTEXT_QUEUE$ArrayOfObjects$VH_; }

    static final FunctionDescriptor NDRCContextBinding$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRCContextBinding$FUNC() { return NDRCContextBinding$FUNC_; }

    static final MethodHandle NDRCContextBinding$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRCContextBinding",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        NDRCContextBinding$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRCContextBinding$MH() { return NDRCContextBinding$MH_; }

    static final FunctionDescriptor NDRCContextMarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRCContextMarshall$FUNC() { return NDRCContextMarshall$FUNC_; }

    static final MethodHandle NDRCContextMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRCContextMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NDRCContextMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRCContextMarshall$MH() { return NDRCContextMarshall$MH_; }

    static final FunctionDescriptor NDRCContextUnmarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRCContextUnmarshall$FUNC() { return NDRCContextUnmarshall$FUNC_; }

    static final MethodHandle NDRCContextUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRCContextUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        NDRCContextUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRCContextUnmarshall$MH() { return NDRCContextUnmarshall$MH_; }

    static final FunctionDescriptor NDRCContextUnmarshall2$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRCContextUnmarshall2$FUNC() { return NDRCContextUnmarshall2$FUNC_; }

    static final MethodHandle NDRCContextUnmarshall2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRCContextUnmarshall2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        NDRCContextUnmarshall2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRCContextUnmarshall2$MH() { return NDRCContextUnmarshall2$MH_; }

    static final FunctionDescriptor NDRSContextMarshall$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRSContextMarshall$FUNC() { return NDRSContextMarshall$FUNC_; }

    static final MethodHandle NDRSContextMarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRSContextMarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NDRSContextMarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRSContextMarshall$MH() { return NDRSContextMarshall$MH_; }

    static final FunctionDescriptor NDRSContextMarshall$userRunDownIn$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRSContextMarshall$userRunDownIn$FUNC() { return NDRSContextMarshall$userRunDownIn$FUNC_; }

    static final FunctionDescriptor NDRSContextUnmarshall$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRSContextUnmarshall$FUNC() { return NDRSContextUnmarshall$FUNC_; }

    static final MethodHandle NDRSContextUnmarshall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRSContextUnmarshall",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        NDRSContextUnmarshall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRSContextUnmarshall$MH() { return NDRSContextUnmarshall$MH_; }

    static final FunctionDescriptor NDRSContextMarshallEx$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRSContextMarshallEx$FUNC() { return NDRSContextMarshallEx$FUNC_; }

    static final MethodHandle NDRSContextMarshallEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRSContextMarshallEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        NDRSContextMarshallEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRSContextMarshallEx$MH() { return NDRSContextMarshallEx$MH_; }

    static final FunctionDescriptor NDRSContextMarshallEx$userRunDownIn$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRSContextMarshallEx$userRunDownIn$FUNC() { return NDRSContextMarshallEx$userRunDownIn$FUNC_; }

    static final FunctionDescriptor NDRSContextMarshall2$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRSContextMarshall2$FUNC() { return NDRSContextMarshall2$FUNC_; }

    static final MethodHandle NDRSContextMarshall2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRSContextMarshall2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
        NDRSContextMarshall2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRSContextMarshall2$MH() { return NDRSContextMarshall2$MH_; }

    static final FunctionDescriptor NDRSContextMarshall2$userRunDownIn$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRSContextMarshall2$userRunDownIn$FUNC() { return NDRSContextMarshall2$userRunDownIn$FUNC_; }

    static final FunctionDescriptor NDRSContextUnmarshallEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRSContextUnmarshallEx$FUNC() { return NDRSContextUnmarshallEx$FUNC_; }

    static final MethodHandle NDRSContextUnmarshallEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRSContextUnmarshallEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        NDRSContextUnmarshallEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRSContextUnmarshallEx$MH() { return NDRSContextUnmarshallEx$MH_; }

    static final FunctionDescriptor NDRSContextUnmarshall2$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NDRSContextUnmarshall2$FUNC() { return NDRSContextUnmarshall2$FUNC_; }

    static final MethodHandle NDRSContextUnmarshall2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NDRSContextUnmarshall2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        NDRSContextUnmarshall2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NDRSContextUnmarshall2$MH() { return NDRSContextUnmarshall2$MH_; }

    static final FunctionDescriptor RpcSsDestroyClientContext$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcSsDestroyClientContext$FUNC() { return RpcSsDestroyClientContext$FUNC_; }

    static final MethodHandle RpcSsDestroyClientContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcSsDestroyClientContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RpcSsDestroyClientContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcSsDestroyClientContext$MH() { return RpcSsDestroyClientContext$MH_; }

    static final MemoryLayout ARRAY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Dimension"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("BufferConformanceMark"),
        C_POINTER.withName("BufferVarianceMark"),
        C_POINTER.withName("MaxCountArray"),
        C_POINTER.withName("OffsetArray"),
        C_POINTER.withName("ActualCountArray")
    );
    static final jdk.incubator.foreign.MemoryLayout ARRAY_INFO$struct$LAYOUT() { return ARRAY_INFO$struct$LAYOUT_; }

    static final MemoryLayout ARRAY_INFO$Dimension$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout ARRAY_INFO$Dimension$LAYOUT() { return ARRAY_INFO$Dimension$LAYOUT_; }

    static final VarHandle ARRAY_INFO$Dimension$VH_ = ARRAY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dimension"));
    static final java.lang.invoke.VarHandle ARRAY_INFO$Dimension$VH() { return ARRAY_INFO$Dimension$VH_; }

    static final MemoryLayout ARRAY_INFO$BufferConformanceMark$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ARRAY_INFO$BufferConformanceMark$LAYOUT() { return ARRAY_INFO$BufferConformanceMark$LAYOUT_; }

    static final VarHandle ARRAY_INFO$BufferConformanceMark$VH_ = MemoryHandles.asAddressVarHandle(ARRAY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferConformanceMark")));
    static final java.lang.invoke.VarHandle ARRAY_INFO$BufferConformanceMark$VH() { return ARRAY_INFO$BufferConformanceMark$VH_; }

    static final MemoryLayout ARRAY_INFO$BufferVarianceMark$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ARRAY_INFO$BufferVarianceMark$LAYOUT() { return ARRAY_INFO$BufferVarianceMark$LAYOUT_; }

    static final VarHandle ARRAY_INFO$BufferVarianceMark$VH_ = MemoryHandles.asAddressVarHandle(ARRAY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferVarianceMark")));
    static final java.lang.invoke.VarHandle ARRAY_INFO$BufferVarianceMark$VH() { return ARRAY_INFO$BufferVarianceMark$VH_; }

    static final MemoryLayout ARRAY_INFO$MaxCountArray$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ARRAY_INFO$MaxCountArray$LAYOUT() { return ARRAY_INFO$MaxCountArray$LAYOUT_; }

    static final VarHandle ARRAY_INFO$MaxCountArray$VH_ = MemoryHandles.asAddressVarHandle(ARRAY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxCountArray")));
    static final java.lang.invoke.VarHandle ARRAY_INFO$MaxCountArray$VH() { return ARRAY_INFO$MaxCountArray$VH_; }

    static final MemoryLayout ARRAY_INFO$OffsetArray$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ARRAY_INFO$OffsetArray$LAYOUT() { return ARRAY_INFO$OffsetArray$LAYOUT_; }

    static final VarHandle ARRAY_INFO$OffsetArray$VH_ = MemoryHandles.asAddressVarHandle(ARRAY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OffsetArray")));
    static final java.lang.invoke.VarHandle ARRAY_INFO$OffsetArray$VH() { return ARRAY_INFO$OffsetArray$VH_; }

    static final MemoryLayout ARRAY_INFO$ActualCountArray$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ARRAY_INFO$ActualCountArray$LAYOUT() { return ARRAY_INFO$ActualCountArray$LAYOUT_; }

    static final VarHandle ARRAY_INFO$ActualCountArray$VH_ = MemoryHandles.asAddressVarHandle(ARRAY_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ActualCountArray")));
    static final java.lang.invoke.VarHandle ARRAY_INFO$ActualCountArray$VH() { return ARRAY_INFO$ActualCountArray$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("RpcMsg"),
        C_POINTER.withName("Buffer"),
        C_POINTER.withName("BufferStart"),
        C_POINTER.withName("BufferEnd"),
        C_POINTER.withName("BufferMark"),
        C_LONG.withName("BufferLength"),
        C_LONG.withName("MemorySize"),
        C_POINTER.withName("Memory"),
        C_CHAR.withName("IsClient"),
        C_CHAR.withName("Pad"),
        C_SHORT.withName("uFlags2"),
        C_INT.withName("ReuseBuffer"),
        C_POINTER.withName("pAllocAllNodesContext"),
        C_POINTER.withName("pPointerQueueState"),
        C_INT.withName("IgnoreEmbeddedPointers"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("PointerBufferMark"),
        C_CHAR.withName("CorrDespIncrement"),
        C_CHAR.withName("uFlags"),
        C_SHORT.withName("UniquePtrCount"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("MaxCount"),
        C_LONG.withName("Offset"),
        C_LONG.withName("ActualCount"),
        C_POINTER.withName("pfnAllocate"),
        C_POINTER.withName("pfnFree"),
        C_POINTER.withName("StackTop"),
        C_POINTER.withName("pPresentedType"),
        C_POINTER.withName("pTransmitType"),
        C_POINTER.withName("SavedHandle"),
        C_POINTER.withName("StubDesc"),
        C_POINTER.withName("FullPtrXlatTables"),
        C_LONG.withName("FullPtrRefId"),
        C_LONG.withName("PointerLength"),
        C_INT,
        C_LONG.withName("dwDestContext"),
        C_POINTER.withName("pvDestContext"),
        C_POINTER.withName("SavedContextHandles"),
        C_LONG.withName("ParamNumber"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pRpcChannelBuffer"),
        C_POINTER.withName("pArrayInfo"),
        C_POINTER.withName("SizePtrCountArray"),
        C_POINTER.withName("SizePtrOffsetArray"),
        C_POINTER.withName("SizePtrLengthArray"),
        C_POINTER.withName("pArgQueue"),
        C_LONG.withName("dwStubPhase"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("LowStackMark"),
        C_POINTER.withName("pAsyncMsg"),
        C_POINTER.withName("pCorrInfo"),
        C_POINTER.withName("pCorrMemory"),
        C_POINTER.withName("pMemoryList"),
        C_LONGLONG.withName("pCSInfo"),
        C_POINTER.withName("ConformanceMark"),
        C_POINTER.withName("VarianceMark"),
        C_LONGLONG.withName("Unused"),
        C_POINTER.withName("pContext"),
        C_POINTER.withName("ContextHandleHash"),
        C_POINTER.withName("pUserMarshalList"),
        C_LONGLONG.withName("Reserved51_3"),
        C_LONGLONG.withName("Reserved51_4"),
        C_LONGLONG.withName("Reserved51_5")
    ).withName("_MIDL_STUB_MESSAGE");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$struct$LAYOUT() { return _MIDL_STUB_MESSAGE$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$RpcMsg$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$RpcMsg$LAYOUT() { return _MIDL_STUB_MESSAGE$RpcMsg$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$RpcMsg$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RpcMsg")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$RpcMsg$VH() { return _MIDL_STUB_MESSAGE$RpcMsg$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$Buffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$Buffer$LAYOUT() { return _MIDL_STUB_MESSAGE$Buffer$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$Buffer$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Buffer")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$Buffer$VH() { return _MIDL_STUB_MESSAGE$Buffer$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$BufferStart$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$BufferStart$LAYOUT() { return _MIDL_STUB_MESSAGE$BufferStart$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$BufferStart$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferStart")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$BufferStart$VH() { return _MIDL_STUB_MESSAGE$BufferStart$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$BufferEnd$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$BufferEnd$LAYOUT() { return _MIDL_STUB_MESSAGE$BufferEnd$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$BufferEnd$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferEnd")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$BufferEnd$VH() { return _MIDL_STUB_MESSAGE$BufferEnd$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$BufferMark$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$BufferMark$LAYOUT() { return _MIDL_STUB_MESSAGE$BufferMark$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$BufferMark$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferMark")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$BufferMark$VH() { return _MIDL_STUB_MESSAGE$BufferMark$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$BufferLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$BufferLength$LAYOUT() { return _MIDL_STUB_MESSAGE$BufferLength$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$BufferLength$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferLength"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$BufferLength$VH() { return _MIDL_STUB_MESSAGE$BufferLength$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$MemorySize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$MemorySize$LAYOUT() { return _MIDL_STUB_MESSAGE$MemorySize$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$MemorySize$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MemorySize"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$MemorySize$VH() { return _MIDL_STUB_MESSAGE$MemorySize$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$Memory$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$Memory$LAYOUT() { return _MIDL_STUB_MESSAGE$Memory$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$Memory$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Memory")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$Memory$VH() { return _MIDL_STUB_MESSAGE$Memory$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$IsClient$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$IsClient$LAYOUT() { return _MIDL_STUB_MESSAGE$IsClient$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$IsClient$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsClient"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$IsClient$VH() { return _MIDL_STUB_MESSAGE$IsClient$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$Pad$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$Pad$LAYOUT() { return _MIDL_STUB_MESSAGE$Pad$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$Pad$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Pad"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$Pad$VH() { return _MIDL_STUB_MESSAGE$Pad$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$uFlags2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$uFlags2$LAYOUT() { return _MIDL_STUB_MESSAGE$uFlags2$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$uFlags2$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("uFlags2"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$uFlags2$VH() { return _MIDL_STUB_MESSAGE$uFlags2$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$ReuseBuffer$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$ReuseBuffer$LAYOUT() { return _MIDL_STUB_MESSAGE$ReuseBuffer$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$ReuseBuffer$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReuseBuffer"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$ReuseBuffer$VH() { return _MIDL_STUB_MESSAGE$ReuseBuffer$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pAllocAllNodesContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pAllocAllNodesContext$LAYOUT() { return _MIDL_STUB_MESSAGE$pAllocAllNodesContext$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pAllocAllNodesContext$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAllocAllNodesContext")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pAllocAllNodesContext$VH() { return _MIDL_STUB_MESSAGE$pAllocAllNodesContext$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pPointerQueueState$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pPointerQueueState$LAYOUT() { return _MIDL_STUB_MESSAGE$pPointerQueueState$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pPointerQueueState$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pPointerQueueState")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pPointerQueueState$VH() { return _MIDL_STUB_MESSAGE$pPointerQueueState$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$IgnoreEmbeddedPointers$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$IgnoreEmbeddedPointers$LAYOUT() { return _MIDL_STUB_MESSAGE$IgnoreEmbeddedPointers$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$IgnoreEmbeddedPointers$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IgnoreEmbeddedPointers"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$IgnoreEmbeddedPointers$VH() { return _MIDL_STUB_MESSAGE$IgnoreEmbeddedPointers$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$PointerBufferMark$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$PointerBufferMark$LAYOUT() { return _MIDL_STUB_MESSAGE$PointerBufferMark$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$PointerBufferMark$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PointerBufferMark")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$PointerBufferMark$VH() { return _MIDL_STUB_MESSAGE$PointerBufferMark$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$CorrDespIncrement$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$CorrDespIncrement$LAYOUT() { return _MIDL_STUB_MESSAGE$CorrDespIncrement$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$CorrDespIncrement$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("CorrDespIncrement"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$CorrDespIncrement$VH() { return _MIDL_STUB_MESSAGE$CorrDespIncrement$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$uFlags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$uFlags$LAYOUT() { return _MIDL_STUB_MESSAGE$uFlags$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$uFlags$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("uFlags"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$uFlags$VH() { return _MIDL_STUB_MESSAGE$uFlags$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$UniquePtrCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$UniquePtrCount$LAYOUT() { return _MIDL_STUB_MESSAGE$UniquePtrCount$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$UniquePtrCount$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("UniquePtrCount"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$UniquePtrCount$VH() { return _MIDL_STUB_MESSAGE$UniquePtrCount$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$MaxCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$MaxCount$LAYOUT() { return _MIDL_STUB_MESSAGE$MaxCount$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$MaxCount$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxCount"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$MaxCount$VH() { return _MIDL_STUB_MESSAGE$MaxCount$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$Offset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$Offset$LAYOUT() { return _MIDL_STUB_MESSAGE$Offset$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$Offset$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$Offset$VH() { return _MIDL_STUB_MESSAGE$Offset$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$ActualCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$ActualCount$LAYOUT() { return _MIDL_STUB_MESSAGE$ActualCount$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$ActualCount$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ActualCount"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$ActualCount$VH() { return _MIDL_STUB_MESSAGE$ActualCount$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pfnAllocate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pfnAllocate$LAYOUT() { return _MIDL_STUB_MESSAGE$pfnAllocate$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pfnAllocate$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnAllocate")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pfnAllocate$VH() { return _MIDL_STUB_MESSAGE$pfnAllocate$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pfnFree$LAYOUT() { return _MIDL_STUB_MESSAGE$pfnFree$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pfnFree$VH() { return _MIDL_STUB_MESSAGE$pfnFree$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$StackTop$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$StackTop$LAYOUT() { return _MIDL_STUB_MESSAGE$StackTop$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$StackTop$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StackTop")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$StackTop$VH() { return _MIDL_STUB_MESSAGE$StackTop$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pPresentedType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pPresentedType$LAYOUT() { return _MIDL_STUB_MESSAGE$pPresentedType$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pPresentedType$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pPresentedType")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pPresentedType$VH() { return _MIDL_STUB_MESSAGE$pPresentedType$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pTransmitType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pTransmitType$LAYOUT() { return _MIDL_STUB_MESSAGE$pTransmitType$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pTransmitType$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pTransmitType")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pTransmitType$VH() { return _MIDL_STUB_MESSAGE$pTransmitType$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$SavedHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$SavedHandle$LAYOUT() { return _MIDL_STUB_MESSAGE$SavedHandle$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$SavedHandle$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SavedHandle")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$SavedHandle$VH() { return _MIDL_STUB_MESSAGE$SavedHandle$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$StubDesc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$StubDesc$LAYOUT() { return _MIDL_STUB_MESSAGE$StubDesc$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$StubDesc$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StubDesc")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$StubDesc$VH() { return _MIDL_STUB_MESSAGE$StubDesc$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$FullPtrXlatTables$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$FullPtrXlatTables$LAYOUT() { return _MIDL_STUB_MESSAGE$FullPtrXlatTables$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$FullPtrXlatTables$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FullPtrXlatTables")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$FullPtrXlatTables$VH() { return _MIDL_STUB_MESSAGE$FullPtrXlatTables$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$FullPtrRefId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$FullPtrRefId$LAYOUT() { return _MIDL_STUB_MESSAGE$FullPtrRefId$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$FullPtrRefId$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FullPtrRefId"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$FullPtrRefId$VH() { return _MIDL_STUB_MESSAGE$FullPtrRefId$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$PointerLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$PointerLength$LAYOUT() { return _MIDL_STUB_MESSAGE$PointerLength$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$PointerLength$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerLength"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$PointerLength$VH() { return _MIDL_STUB_MESSAGE$PointerLength$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$dwDestContext$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$dwDestContext$LAYOUT() { return _MIDL_STUB_MESSAGE$dwDestContext$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$dwDestContext$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDestContext"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$dwDestContext$VH() { return _MIDL_STUB_MESSAGE$dwDestContext$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pvDestContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pvDestContext$LAYOUT() { return _MIDL_STUB_MESSAGE$pvDestContext$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pvDestContext$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvDestContext")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pvDestContext$VH() { return _MIDL_STUB_MESSAGE$pvDestContext$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$SavedContextHandles$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$SavedContextHandles$LAYOUT() { return _MIDL_STUB_MESSAGE$SavedContextHandles$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$SavedContextHandles$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SavedContextHandles")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$SavedContextHandles$VH() { return _MIDL_STUB_MESSAGE$SavedContextHandles$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$ParamNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$ParamNumber$LAYOUT() { return _MIDL_STUB_MESSAGE$ParamNumber$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$ParamNumber$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ParamNumber"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$ParamNumber$VH() { return _MIDL_STUB_MESSAGE$ParamNumber$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pRpcChannelBuffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pRpcChannelBuffer$LAYOUT() { return _MIDL_STUB_MESSAGE$pRpcChannelBuffer$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pRpcChannelBuffer$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pRpcChannelBuffer")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pRpcChannelBuffer$VH() { return _MIDL_STUB_MESSAGE$pRpcChannelBuffer$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pArrayInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pArrayInfo$LAYOUT() { return _MIDL_STUB_MESSAGE$pArrayInfo$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pArrayInfo$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pArrayInfo")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pArrayInfo$VH() { return _MIDL_STUB_MESSAGE$pArrayInfo$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$SizePtrCountArray$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$SizePtrCountArray$LAYOUT() { return _MIDL_STUB_MESSAGE$SizePtrCountArray$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$SizePtrCountArray$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizePtrCountArray")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$SizePtrCountArray$VH() { return _MIDL_STUB_MESSAGE$SizePtrCountArray$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$SizePtrOffsetArray$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$SizePtrOffsetArray$LAYOUT() { return _MIDL_STUB_MESSAGE$SizePtrOffsetArray$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$SizePtrOffsetArray$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizePtrOffsetArray")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$SizePtrOffsetArray$VH() { return _MIDL_STUB_MESSAGE$SizePtrOffsetArray$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$SizePtrLengthArray$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$SizePtrLengthArray$LAYOUT() { return _MIDL_STUB_MESSAGE$SizePtrLengthArray$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$SizePtrLengthArray$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizePtrLengthArray")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$SizePtrLengthArray$VH() { return _MIDL_STUB_MESSAGE$SizePtrLengthArray$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pArgQueue$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pArgQueue$LAYOUT() { return _MIDL_STUB_MESSAGE$pArgQueue$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pArgQueue$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pArgQueue")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pArgQueue$VH() { return _MIDL_STUB_MESSAGE$pArgQueue$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$dwStubPhase$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$dwStubPhase$LAYOUT() { return _MIDL_STUB_MESSAGE$dwStubPhase$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$dwStubPhase$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStubPhase"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$dwStubPhase$VH() { return _MIDL_STUB_MESSAGE$dwStubPhase$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$LowStackMark$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$LowStackMark$LAYOUT() { return _MIDL_STUB_MESSAGE$LowStackMark$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$LowStackMark$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowStackMark")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$LowStackMark$VH() { return _MIDL_STUB_MESSAGE$LowStackMark$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pAsyncMsg$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pAsyncMsg$LAYOUT() { return _MIDL_STUB_MESSAGE$pAsyncMsg$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pAsyncMsg$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pAsyncMsg")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pAsyncMsg$VH() { return _MIDL_STUB_MESSAGE$pAsyncMsg$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pCorrInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pCorrInfo$LAYOUT() { return _MIDL_STUB_MESSAGE$pCorrInfo$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pCorrInfo$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pCorrInfo")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pCorrInfo$VH() { return _MIDL_STUB_MESSAGE$pCorrInfo$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pCorrMemory$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pCorrMemory$LAYOUT() { return _MIDL_STUB_MESSAGE$pCorrMemory$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pCorrMemory$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pCorrMemory")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pCorrMemory$VH() { return _MIDL_STUB_MESSAGE$pCorrMemory$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pMemoryList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pMemoryList$LAYOUT() { return _MIDL_STUB_MESSAGE$pMemoryList$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pMemoryList$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pMemoryList")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pMemoryList$VH() { return _MIDL_STUB_MESSAGE$pMemoryList$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pCSInfo$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pCSInfo$LAYOUT() { return _MIDL_STUB_MESSAGE$pCSInfo$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pCSInfo$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pCSInfo"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pCSInfo$VH() { return _MIDL_STUB_MESSAGE$pCSInfo$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$ConformanceMark$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$ConformanceMark$LAYOUT() { return _MIDL_STUB_MESSAGE$ConformanceMark$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$ConformanceMark$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ConformanceMark")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$ConformanceMark$VH() { return _MIDL_STUB_MESSAGE$ConformanceMark$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$VarianceMark$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$VarianceMark$LAYOUT() { return _MIDL_STUB_MESSAGE$VarianceMark$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$VarianceMark$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VarianceMark")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$VarianceMark$VH() { return _MIDL_STUB_MESSAGE$VarianceMark$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$Unused$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$Unused$LAYOUT() { return _MIDL_STUB_MESSAGE$Unused$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$Unused$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Unused"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$Unused$VH() { return _MIDL_STUB_MESSAGE$Unused$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pContext$LAYOUT() { return _MIDL_STUB_MESSAGE$pContext$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pContext$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pContext")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pContext$VH() { return _MIDL_STUB_MESSAGE$pContext$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$ContextHandleHash$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$ContextHandleHash$LAYOUT() { return _MIDL_STUB_MESSAGE$ContextHandleHash$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$ContextHandleHash$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ContextHandleHash")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$ContextHandleHash$VH() { return _MIDL_STUB_MESSAGE$ContextHandleHash$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$pUserMarshalList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$pUserMarshalList$LAYOUT() { return _MIDL_STUB_MESSAGE$pUserMarshalList$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$pUserMarshalList$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pUserMarshalList")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$pUserMarshalList$VH() { return _MIDL_STUB_MESSAGE$pUserMarshalList$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$Reserved51_3$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$Reserved51_3$LAYOUT() { return _MIDL_STUB_MESSAGE$Reserved51_3$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$Reserved51_3$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved51_3"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$Reserved51_3$VH() { return _MIDL_STUB_MESSAGE$Reserved51_3$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$Reserved51_4$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$Reserved51_4$LAYOUT() { return _MIDL_STUB_MESSAGE$Reserved51_4$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$Reserved51_4$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved51_4"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$Reserved51_4$VH() { return _MIDL_STUB_MESSAGE$Reserved51_4$VH_; }

    static final MemoryLayout _MIDL_STUB_MESSAGE$Reserved51_5$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_MESSAGE$Reserved51_5$LAYOUT() { return _MIDL_STUB_MESSAGE$Reserved51_5$LAYOUT_; }

    static final VarHandle _MIDL_STUB_MESSAGE$Reserved51_5$VH_ = _MIDL_STUB_MESSAGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved51_5"));
    static final java.lang.invoke.VarHandle _MIDL_STUB_MESSAGE$Reserved51_5$VH() { return _MIDL_STUB_MESSAGE$Reserved51_5$VH_; }

    static final MemoryLayout _GENERIC_BINDING_ROUTINE_PAIR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pfnBind"),
        C_POINTER.withName("pfnUnbind")
    ).withName("_GENERIC_BINDING_ROUTINE_PAIR");
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_BINDING_ROUTINE_PAIR$struct$LAYOUT() { return _GENERIC_BINDING_ROUTINE_PAIR$struct$LAYOUT_; }

    static final MemoryLayout _GENERIC_BINDING_ROUTINE_PAIR$pfnBind$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_BINDING_ROUTINE_PAIR$pfnBind$LAYOUT() { return _GENERIC_BINDING_ROUTINE_PAIR$pfnBind$LAYOUT_; }

    static final VarHandle _GENERIC_BINDING_ROUTINE_PAIR$pfnBind$VH_ = MemoryHandles.asAddressVarHandle(_GENERIC_BINDING_ROUTINE_PAIR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnBind")));
    static final java.lang.invoke.VarHandle _GENERIC_BINDING_ROUTINE_PAIR$pfnBind$VH() { return _GENERIC_BINDING_ROUTINE_PAIR$pfnBind$VH_; }

    static final MemoryLayout _GENERIC_BINDING_ROUTINE_PAIR$pfnUnbind$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_BINDING_ROUTINE_PAIR$pfnUnbind$LAYOUT() { return _GENERIC_BINDING_ROUTINE_PAIR$pfnUnbind$LAYOUT_; }

    static final VarHandle _GENERIC_BINDING_ROUTINE_PAIR$pfnUnbind$VH_ = MemoryHandles.asAddressVarHandle(_GENERIC_BINDING_ROUTINE_PAIR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnUnbind")));
    static final java.lang.invoke.VarHandle _GENERIC_BINDING_ROUTINE_PAIR$pfnUnbind$VH() { return _GENERIC_BINDING_ROUTINE_PAIR$pfnUnbind$VH_; }

    static final MemoryLayout __GENERIC_BINDING_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pObj"),
        C_INT.withName("Size"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pfnBind"),
        C_POINTER.withName("pfnUnbind")
    ).withName("__GENERIC_BINDING_INFO");
    static final jdk.incubator.foreign.MemoryLayout __GENERIC_BINDING_INFO$struct$LAYOUT() { return __GENERIC_BINDING_INFO$struct$LAYOUT_; }

    static final MemoryLayout __GENERIC_BINDING_INFO$pObj$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __GENERIC_BINDING_INFO$pObj$LAYOUT() { return __GENERIC_BINDING_INFO$pObj$LAYOUT_; }

    static final VarHandle __GENERIC_BINDING_INFO$pObj$VH_ = MemoryHandles.asAddressVarHandle(__GENERIC_BINDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pObj")));
    static final java.lang.invoke.VarHandle __GENERIC_BINDING_INFO$pObj$VH() { return __GENERIC_BINDING_INFO$pObj$VH_; }

    static final MemoryLayout __GENERIC_BINDING_INFO$Size$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout __GENERIC_BINDING_INFO$Size$LAYOUT() { return __GENERIC_BINDING_INFO$Size$LAYOUT_; }

    static final VarHandle __GENERIC_BINDING_INFO$Size$VH_ = __GENERIC_BINDING_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle __GENERIC_BINDING_INFO$Size$VH() { return __GENERIC_BINDING_INFO$Size$VH_; }

    static final MemoryLayout __GENERIC_BINDING_INFO$pfnBind$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __GENERIC_BINDING_INFO$pfnBind$LAYOUT() { return __GENERIC_BINDING_INFO$pfnBind$LAYOUT_; }

    static final VarHandle __GENERIC_BINDING_INFO$pfnBind$VH_ = MemoryHandles.asAddressVarHandle(__GENERIC_BINDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnBind")));
    static final java.lang.invoke.VarHandle __GENERIC_BINDING_INFO$pfnBind$VH() { return __GENERIC_BINDING_INFO$pfnBind$VH_; }

    static final MemoryLayout __GENERIC_BINDING_INFO$pfnUnbind$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __GENERIC_BINDING_INFO$pfnUnbind$LAYOUT() { return __GENERIC_BINDING_INFO$pfnUnbind$LAYOUT_; }

    static final VarHandle __GENERIC_BINDING_INFO$pfnUnbind$VH_ = MemoryHandles.asAddressVarHandle(__GENERIC_BINDING_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnUnbind")));
    static final java.lang.invoke.VarHandle __GENERIC_BINDING_INFO$pfnUnbind$VH() { return __GENERIC_BINDING_INFO$pfnUnbind$VH_; }

    static final MemoryLayout _XMIT_ROUTINE_QUINTUPLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pfnTranslateToXmit"),
        C_POINTER.withName("pfnTranslateFromXmit"),
        C_POINTER.withName("pfnFreeXmit"),
        C_POINTER.withName("pfnFreeInst")
    ).withName("_XMIT_ROUTINE_QUINTUPLE");
    static final jdk.incubator.foreign.MemoryLayout _XMIT_ROUTINE_QUINTUPLE$struct$LAYOUT() { return _XMIT_ROUTINE_QUINTUPLE$struct$LAYOUT_; }

    static final MemoryLayout _XMIT_ROUTINE_QUINTUPLE$pfnTranslateToXmit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _XMIT_ROUTINE_QUINTUPLE$pfnTranslateToXmit$LAYOUT() { return _XMIT_ROUTINE_QUINTUPLE$pfnTranslateToXmit$LAYOUT_; }

    static final VarHandle _XMIT_ROUTINE_QUINTUPLE$pfnTranslateToXmit$VH_ = MemoryHandles.asAddressVarHandle(_XMIT_ROUTINE_QUINTUPLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnTranslateToXmit")));
    static final java.lang.invoke.VarHandle _XMIT_ROUTINE_QUINTUPLE$pfnTranslateToXmit$VH() { return _XMIT_ROUTINE_QUINTUPLE$pfnTranslateToXmit$VH_; }

    static final MemoryLayout _XMIT_ROUTINE_QUINTUPLE$pfnTranslateFromXmit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _XMIT_ROUTINE_QUINTUPLE$pfnTranslateFromXmit$LAYOUT() { return _XMIT_ROUTINE_QUINTUPLE$pfnTranslateFromXmit$LAYOUT_; }

    static final VarHandle _XMIT_ROUTINE_QUINTUPLE$pfnTranslateFromXmit$VH_ = MemoryHandles.asAddressVarHandle(_XMIT_ROUTINE_QUINTUPLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnTranslateFromXmit")));
    static final java.lang.invoke.VarHandle _XMIT_ROUTINE_QUINTUPLE$pfnTranslateFromXmit$VH() { return _XMIT_ROUTINE_QUINTUPLE$pfnTranslateFromXmit$VH_; }

    static final MemoryLayout _XMIT_ROUTINE_QUINTUPLE$pfnFreeXmit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _XMIT_ROUTINE_QUINTUPLE$pfnFreeXmit$LAYOUT() { return _XMIT_ROUTINE_QUINTUPLE$pfnFreeXmit$LAYOUT_; }

    static final VarHandle _XMIT_ROUTINE_QUINTUPLE$pfnFreeXmit$VH_ = MemoryHandles.asAddressVarHandle(_XMIT_ROUTINE_QUINTUPLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFreeXmit")));
    static final java.lang.invoke.VarHandle _XMIT_ROUTINE_QUINTUPLE$pfnFreeXmit$VH() { return _XMIT_ROUTINE_QUINTUPLE$pfnFreeXmit$VH_; }

    static final MemoryLayout _XMIT_ROUTINE_QUINTUPLE$pfnFreeInst$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _XMIT_ROUTINE_QUINTUPLE$pfnFreeInst$LAYOUT() { return _XMIT_ROUTINE_QUINTUPLE$pfnFreeInst$LAYOUT_; }

    static final VarHandle _XMIT_ROUTINE_QUINTUPLE$pfnFreeInst$VH_ = MemoryHandles.asAddressVarHandle(_XMIT_ROUTINE_QUINTUPLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFreeInst")));
    static final java.lang.invoke.VarHandle _XMIT_ROUTINE_QUINTUPLE$pfnFreeInst$VH() { return _XMIT_ROUTINE_QUINTUPLE$pfnFreeInst$VH_; }

    static final MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pfnBufferSize"),
        C_POINTER.withName("pfnMarshall"),
        C_POINTER.withName("pfnUnmarshall"),
        C_POINTER.withName("pfnFree")
    ).withName("_USER_MARSHAL_ROUTINE_QUADRUPLE");
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$struct$LAYOUT() { return _USER_MARSHAL_ROUTINE_QUADRUPLE$struct$LAYOUT_; }

    static final MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnBufferSize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnBufferSize$LAYOUT() { return _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnBufferSize$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnBufferSize$VH_ = MemoryHandles.asAddressVarHandle(_USER_MARSHAL_ROUTINE_QUADRUPLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnBufferSize")));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnBufferSize$VH() { return _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnBufferSize$VH_; }

    static final MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnMarshall$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnMarshall$LAYOUT() { return _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnMarshall$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnMarshall$VH_ = MemoryHandles.asAddressVarHandle(_USER_MARSHAL_ROUTINE_QUADRUPLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnMarshall")));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnMarshall$VH() { return _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnMarshall$VH_; }

    static final MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnUnmarshall$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnUnmarshall$LAYOUT() { return _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnUnmarshall$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnUnmarshall$VH_ = MemoryHandles.asAddressVarHandle(_USER_MARSHAL_ROUTINE_QUADRUPLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnUnmarshall")));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnUnmarshall$VH() { return _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnUnmarshall$VH_; }

    static final MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnFree$LAYOUT() { return _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnFree$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(_USER_MARSHAL_ROUTINE_QUADRUPLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnFree$VH() { return _USER_MARSHAL_ROUTINE_QUADRUPLE$pfnFree$VH_; }

    static final int USER_MARSHAL_CB_BUFFER_SIZE() { return (int)0L; }

    static final int USER_MARSHAL_CB_MARSHALL() { return (int)1L; }

    static final int USER_MARSHAL_CB_UNMARSHALL() { return (int)2L; }

    static final int USER_MARSHAL_CB_FREE() { return (int)3L; }

    static final MemoryLayout _USER_MARSHAL_CB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pStubMsg"),
        C_POINTER.withName("pReserve"),
        C_LONG.withName("Signature"),
        C_INT.withName("CBType"),
        C_POINTER.withName("pFormat"),
        C_POINTER.withName("pTypeFormat")
    ).withName("_USER_MARSHAL_CB");
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_CB$struct$LAYOUT() { return _USER_MARSHAL_CB$struct$LAYOUT_; }

    static final MemoryLayout _USER_MARSHAL_CB$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_CB$Flags$LAYOUT() { return _USER_MARSHAL_CB$Flags$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_CB$Flags$VH_ = _USER_MARSHAL_CB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_CB$Flags$VH() { return _USER_MARSHAL_CB$Flags$VH_; }

    static final MemoryLayout _USER_MARSHAL_CB$pStubMsg$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_CB$pStubMsg$LAYOUT() { return _USER_MARSHAL_CB$pStubMsg$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_CB$pStubMsg$VH_ = MemoryHandles.asAddressVarHandle(_USER_MARSHAL_CB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pStubMsg")));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_CB$pStubMsg$VH() { return _USER_MARSHAL_CB$pStubMsg$VH_; }

    static final MemoryLayout _USER_MARSHAL_CB$pReserve$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_CB$pReserve$LAYOUT() { return _USER_MARSHAL_CB$pReserve$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_CB$pReserve$VH_ = MemoryHandles.asAddressVarHandle(_USER_MARSHAL_CB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pReserve")));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_CB$pReserve$VH() { return _USER_MARSHAL_CB$pReserve$VH_; }

    static final MemoryLayout _USER_MARSHAL_CB$Signature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_CB$Signature$LAYOUT() { return _USER_MARSHAL_CB$Signature$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_CB$Signature$VH_ = _USER_MARSHAL_CB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Signature"));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_CB$Signature$VH() { return _USER_MARSHAL_CB$Signature$VH_; }

    static final MemoryLayout _USER_MARSHAL_CB$CBType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_CB$CBType$LAYOUT() { return _USER_MARSHAL_CB$CBType$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_CB$CBType$VH_ = _USER_MARSHAL_CB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CBType"));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_CB$CBType$VH() { return _USER_MARSHAL_CB$CBType$VH_; }

    static final MemoryLayout _USER_MARSHAL_CB$pFormat$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_CB$pFormat$LAYOUT() { return _USER_MARSHAL_CB$pFormat$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_CB$pFormat$VH_ = MemoryHandles.asAddressVarHandle(_USER_MARSHAL_CB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pFormat")));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_CB$pFormat$VH() { return _USER_MARSHAL_CB$pFormat$VH_; }

    static final MemoryLayout _USER_MARSHAL_CB$pTypeFormat$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _USER_MARSHAL_CB$pTypeFormat$LAYOUT() { return _USER_MARSHAL_CB$pTypeFormat$LAYOUT_; }

    static final VarHandle _USER_MARSHAL_CB$pTypeFormat$VH_ = MemoryHandles.asAddressVarHandle(_USER_MARSHAL_CB$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pTypeFormat")));
    static final java.lang.invoke.VarHandle _USER_MARSHAL_CB$pTypeFormat$VH() { return _USER_MARSHAL_CB$pTypeFormat$VH_; }

    static final MemoryLayout _MALLOC_FREE_STRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pfnAllocate"),
        C_POINTER.withName("pfnFree")
    ).withName("_MALLOC_FREE_STRUCT");
    static final jdk.incubator.foreign.MemoryLayout _MALLOC_FREE_STRUCT$struct$LAYOUT() { return _MALLOC_FREE_STRUCT$struct$LAYOUT_; }

    static final MemoryLayout _MALLOC_FREE_STRUCT$pfnAllocate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MALLOC_FREE_STRUCT$pfnAllocate$LAYOUT() { return _MALLOC_FREE_STRUCT$pfnAllocate$LAYOUT_; }

    static final VarHandle _MALLOC_FREE_STRUCT$pfnAllocate$VH_ = MemoryHandles.asAddressVarHandle(_MALLOC_FREE_STRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnAllocate")));
    static final java.lang.invoke.VarHandle _MALLOC_FREE_STRUCT$pfnAllocate$VH() { return _MALLOC_FREE_STRUCT$pfnAllocate$VH_; }

    static final MemoryLayout _MALLOC_FREE_STRUCT$pfnFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MALLOC_FREE_STRUCT$pfnFree$LAYOUT() { return _MALLOC_FREE_STRUCT$pfnFree$LAYOUT_; }

    static final VarHandle _MALLOC_FREE_STRUCT$pfnFree$VH_ = MemoryHandles.asAddressVarHandle(_MALLOC_FREE_STRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFree")));
    static final java.lang.invoke.VarHandle _MALLOC_FREE_STRUCT$pfnFree$VH() { return _MALLOC_FREE_STRUCT$pfnFree$VH_; }

    static final MemoryLayout _COMM_FAULT_OFFSETS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("CommOffset"),
        C_SHORT.withName("FaultOffset")
    ).withName("_COMM_FAULT_OFFSETS");
    static final jdk.incubator.foreign.MemoryLayout _COMM_FAULT_OFFSETS$struct$LAYOUT() { return _COMM_FAULT_OFFSETS$struct$LAYOUT_; }

    static final MemoryLayout _COMM_FAULT_OFFSETS$CommOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COMM_FAULT_OFFSETS$CommOffset$LAYOUT() { return _COMM_FAULT_OFFSETS$CommOffset$LAYOUT_; }

    static final VarHandle _COMM_FAULT_OFFSETS$CommOffset$VH_ = _COMM_FAULT_OFFSETS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CommOffset"));
    static final java.lang.invoke.VarHandle _COMM_FAULT_OFFSETS$CommOffset$VH() { return _COMM_FAULT_OFFSETS$CommOffset$VH_; }

    static final MemoryLayout _COMM_FAULT_OFFSETS$FaultOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COMM_FAULT_OFFSETS$FaultOffset$LAYOUT() { return _COMM_FAULT_OFFSETS$FaultOffset$LAYOUT_; }

    static final VarHandle _COMM_FAULT_OFFSETS$FaultOffset$VH_ = _COMM_FAULT_OFFSETS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FaultOffset"));
    static final java.lang.invoke.VarHandle _COMM_FAULT_OFFSETS$FaultOffset$VH() { return _COMM_FAULT_OFFSETS$FaultOffset$VH_; }

    static final int IDL_CS_NO_CONVERT() { return (int)0L; }

    static final int IDL_CS_IN_PLACE_CONVERT() { return (int)1L; }

    static final int IDL_CS_NEW_BUFFER_CONVERT() { return (int)2L; }

    static final FunctionDescriptor RpcCsGetTags$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RpcCsGetTags$FUNC() { return RpcCsGetTags$FUNC_; }

    static final MethodHandle RpcCsGetTags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RpcCsGetTags",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RpcCsGetTags$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RpcCsGetTags$MH() { return RpcCsGetTags$MH_; }

    static final MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pfnNetSize"),
        C_POINTER.withName("pfnToNetCs"),
        C_POINTER.withName("pfnLocalSize"),
        C_POINTER.withName("pfnFromNetCs")
    ).withName("_NDR_CS_SIZE_CONVERT_ROUTINES");
    static final jdk.incubator.foreign.MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$struct$LAYOUT() { return _NDR_CS_SIZE_CONVERT_ROUTINES$struct$LAYOUT_; }

    static final MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$pfnNetSize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$pfnNetSize$LAYOUT() { return _NDR_CS_SIZE_CONVERT_ROUTINES$pfnNetSize$LAYOUT_; }

    static final VarHandle _NDR_CS_SIZE_CONVERT_ROUTINES$pfnNetSize$VH_ = MemoryHandles.asAddressVarHandle(_NDR_CS_SIZE_CONVERT_ROUTINES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnNetSize")));
    static final java.lang.invoke.VarHandle _NDR_CS_SIZE_CONVERT_ROUTINES$pfnNetSize$VH() { return _NDR_CS_SIZE_CONVERT_ROUTINES$pfnNetSize$VH_; }

    static final MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$pfnToNetCs$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$pfnToNetCs$LAYOUT() { return _NDR_CS_SIZE_CONVERT_ROUTINES$pfnToNetCs$LAYOUT_; }

    static final VarHandle _NDR_CS_SIZE_CONVERT_ROUTINES$pfnToNetCs$VH_ = MemoryHandles.asAddressVarHandle(_NDR_CS_SIZE_CONVERT_ROUTINES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnToNetCs")));
    static final java.lang.invoke.VarHandle _NDR_CS_SIZE_CONVERT_ROUTINES$pfnToNetCs$VH() { return _NDR_CS_SIZE_CONVERT_ROUTINES$pfnToNetCs$VH_; }

    static final MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$pfnLocalSize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$pfnLocalSize$LAYOUT() { return _NDR_CS_SIZE_CONVERT_ROUTINES$pfnLocalSize$LAYOUT_; }

    static final VarHandle _NDR_CS_SIZE_CONVERT_ROUTINES$pfnLocalSize$VH_ = MemoryHandles.asAddressVarHandle(_NDR_CS_SIZE_CONVERT_ROUTINES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnLocalSize")));
    static final java.lang.invoke.VarHandle _NDR_CS_SIZE_CONVERT_ROUTINES$pfnLocalSize$VH() { return _NDR_CS_SIZE_CONVERT_ROUTINES$pfnLocalSize$VH_; }

    static final MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$pfnFromNetCs$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_CS_SIZE_CONVERT_ROUTINES$pfnFromNetCs$LAYOUT() { return _NDR_CS_SIZE_CONVERT_ROUTINES$pfnFromNetCs$LAYOUT_; }

    static final VarHandle _NDR_CS_SIZE_CONVERT_ROUTINES$pfnFromNetCs$VH_ = MemoryHandles.asAddressVarHandle(_NDR_CS_SIZE_CONVERT_ROUTINES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pfnFromNetCs")));
    static final java.lang.invoke.VarHandle _NDR_CS_SIZE_CONVERT_ROUTINES$pfnFromNetCs$VH() { return _NDR_CS_SIZE_CONVERT_ROUTINES$pfnFromNetCs$VH_; }

    static final MemoryLayout _NDR_CS_ROUTINES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pSizeConvertRoutines"),
        C_POINTER.withName("pTagGettingRoutines")
    ).withName("_NDR_CS_ROUTINES");
    static final jdk.incubator.foreign.MemoryLayout _NDR_CS_ROUTINES$struct$LAYOUT() { return _NDR_CS_ROUTINES$struct$LAYOUT_; }

    static final MemoryLayout _NDR_CS_ROUTINES$pSizeConvertRoutines$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_CS_ROUTINES$pSizeConvertRoutines$LAYOUT() { return _NDR_CS_ROUTINES$pSizeConvertRoutines$LAYOUT_; }

    static final VarHandle _NDR_CS_ROUTINES$pSizeConvertRoutines$VH_ = MemoryHandles.asAddressVarHandle(_NDR_CS_ROUTINES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pSizeConvertRoutines")));
    static final java.lang.invoke.VarHandle _NDR_CS_ROUTINES$pSizeConvertRoutines$VH() { return _NDR_CS_ROUTINES$pSizeConvertRoutines$VH_; }

    static final MemoryLayout _NDR_CS_ROUTINES$pTagGettingRoutines$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_CS_ROUTINES$pTagGettingRoutines$LAYOUT() { return _NDR_CS_ROUTINES$pTagGettingRoutines$LAYOUT_; }

    static final VarHandle _NDR_CS_ROUTINES$pTagGettingRoutines$VH_ = MemoryHandles.asAddressVarHandle(_NDR_CS_ROUTINES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pTagGettingRoutines")));
    static final java.lang.invoke.VarHandle _NDR_CS_ROUTINES$pTagGettingRoutines$VH() { return _NDR_CS_ROUTINES$pTagGettingRoutines$VH_; }

    static final MemoryLayout _NDR_EXPR_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pOffset"),
        C_POINTER.withName("pFormatExpr")
    ).withName("_NDR_EXPR_DESC");
    static final jdk.incubator.foreign.MemoryLayout _NDR_EXPR_DESC$struct$LAYOUT() { return _NDR_EXPR_DESC$struct$LAYOUT_; }

    static final MemoryLayout _NDR_EXPR_DESC$pOffset$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_EXPR_DESC$pOffset$LAYOUT() { return _NDR_EXPR_DESC$pOffset$LAYOUT_; }

    static final VarHandle _NDR_EXPR_DESC$pOffset$VH_ = MemoryHandles.asAddressVarHandle(_NDR_EXPR_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pOffset")));
    static final java.lang.invoke.VarHandle _NDR_EXPR_DESC$pOffset$VH() { return _NDR_EXPR_DESC$pOffset$VH_; }

    static final MemoryLayout _NDR_EXPR_DESC$pFormatExpr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NDR_EXPR_DESC$pFormatExpr$LAYOUT() { return _NDR_EXPR_DESC$pFormatExpr$LAYOUT_; }

    static final VarHandle _NDR_EXPR_DESC$pFormatExpr$VH_ = MemoryHandles.asAddressVarHandle(_NDR_EXPR_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pFormatExpr")));
    static final java.lang.invoke.VarHandle _NDR_EXPR_DESC$pFormatExpr$VH() { return _NDR_EXPR_DESC$pFormatExpr$VH_; }

    static final MemoryLayout _MIDL_STUB_DESC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("RpcInterfaceInformation"),
        C_POINTER.withName("pfnAllocate"),
        C_POINTER.withName("pfnFree"),
        MemoryLayout.ofUnion(
            C_POINTER.withName("pAutoHandle"),
            C_POINTER.withName("pPrimitiveHandle"),
            C_POINTER.withName("pGenericBindingInfo")
        ).withName("IMPLICIT_HANDLE_INFO"),
        C_POINTER.withName("apfnNdrRundownRoutines"),
        C_POINTER.withName("aGenericBindingRoutinePairs"),
        C_POINTER.withName("apfnExprEval"),
        C_POINTER.withName("aXmitQuintuple"),
        C_POINTER.withName("pFormatTypes"),
        C_INT.withName("fCheckBounds"),
        C_LONG.withName("Version"),
        C_POINTER.withName("pMallocFreeStruct"),
        C_LONG.withName("MIDLVersion"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("CommFaultOffsets"),
        C_POINTER.withName("aUserMarshalQuadruple"),
        C_POINTER.withName("NotifyRoutineTable"),
        C_LONGLONG.withName("mFlags"),
        C_POINTER.withName("CsRoutineTables"),
        C_POINTER.withName("ProxyServerInfo"),
        C_POINTER.withName("pExprInfo")
    ).withName("_MIDL_STUB_DESC");
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$struct$LAYOUT() { return _MIDL_STUB_DESC$struct$LAYOUT_; }

    static final MemoryLayout _MIDL_STUB_DESC$RpcInterfaceInformation$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _MIDL_STUB_DESC$RpcInterfaceInformation$LAYOUT() { return _MIDL_STUB_DESC$RpcInterfaceInformation$LAYOUT_; }

    static final VarHandle _MIDL_STUB_DESC$RpcInterfaceInformation$VH_ = MemoryHandles.asAddressVarHandle(_MIDL_STUB_DESC$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RpcInterfaceInformation")));
    static final java.lang.invoke.VarHandle _MIDL_STUB_DESC$RpcInterfaceInformation$VH() { return _MIDL_STUB_DESC$RpcInterfaceInformation$VH_; }

}

