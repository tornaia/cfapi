// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$66 extends cfapi_h$constants$65 {

    /* package-private */ cfapi_h$constants$66() {}
    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$CurrentLsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$CurrentLsn$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$CurrentLsn$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$CurrentLsn$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CurrentLsn"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$CurrentLsn$VH() { return _TXFS_QUERY_RM_INFORMATION$CurrentLsn$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$ArchiveTailLsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$ArchiveTailLsn$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$ArchiveTailLsn$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$ArchiveTailLsn$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ArchiveTailLsn"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$ArchiveTailLsn$VH() { return _TXFS_QUERY_RM_INFORMATION$ArchiveTailLsn$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogContainerSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogContainerSize$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$LogContainerSize$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$LogContainerSize$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LogContainerSize"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$LogContainerSize$VH() { return _TXFS_QUERY_RM_INFORMATION$LogContainerSize$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogContainerCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogContainerCount$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$LogContainerCount$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$LogContainerCount$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogContainerCount"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$LogContainerCount$VH() { return _TXFS_QUERY_RM_INFORMATION$LogContainerCount$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogContainerCountMax$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogContainerCountMax$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$LogContainerCountMax$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$LogContainerCountMax$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogContainerCountMax"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$LogContainerCountMax$VH() { return _TXFS_QUERY_RM_INFORMATION$LogContainerCountMax$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogContainerCountMin$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogContainerCountMin$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$LogContainerCountMin$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$LogContainerCountMin$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogContainerCountMin"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$LogContainerCountMin$VH() { return _TXFS_QUERY_RM_INFORMATION$LogContainerCountMin$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogGrowthIncrement$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogGrowthIncrement$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$LogGrowthIncrement$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$LogGrowthIncrement$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogGrowthIncrement"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$LogGrowthIncrement$VH() { return _TXFS_QUERY_RM_INFORMATION$LogGrowthIncrement$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogAutoShrinkPercentage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogAutoShrinkPercentage$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$LogAutoShrinkPercentage$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$LogAutoShrinkPercentage$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogAutoShrinkPercentage"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$LogAutoShrinkPercentage$VH() { return _TXFS_QUERY_RM_INFORMATION$LogAutoShrinkPercentage$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$Flags$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$Flags$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$Flags$VH() { return _TXFS_QUERY_RM_INFORMATION$Flags$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$LoggingMode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$LoggingMode$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$LoggingMode$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$LoggingMode$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LoggingMode"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$LoggingMode$VH() { return _TXFS_QUERY_RM_INFORMATION$LoggingMode$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$Reserved$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$Reserved$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$Reserved$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$Reserved$VH() { return _TXFS_QUERY_RM_INFORMATION$Reserved$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$RmState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$RmState$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$RmState$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$RmState$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RmState"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$RmState$VH() { return _TXFS_QUERY_RM_INFORMATION$RmState$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogCapacity$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogCapacity$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$LogCapacity$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$LogCapacity$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LogCapacity"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$LogCapacity$VH() { return _TXFS_QUERY_RM_INFORMATION$LogCapacity$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogFree$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$LogFree$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$LogFree$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$LogFree$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LogFree"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$LogFree$VH() { return _TXFS_QUERY_RM_INFORMATION$LogFree$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$TopsSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$TopsSize$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$TopsSize$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$TopsSize$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TopsSize"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$TopsSize$VH() { return _TXFS_QUERY_RM_INFORMATION$TopsSize$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$TopsUsed$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$TopsUsed$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$TopsUsed$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$TopsUsed$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TopsUsed"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$TopsUsed$VH() { return _TXFS_QUERY_RM_INFORMATION$TopsUsed$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$TransactionCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$TransactionCount$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$TransactionCount$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$TransactionCount$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TransactionCount"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$TransactionCount$VH() { return _TXFS_QUERY_RM_INFORMATION$TransactionCount$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$OnePCCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$OnePCCount$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$OnePCCount$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$OnePCCount$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnePCCount"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$OnePCCount$VH() { return _TXFS_QUERY_RM_INFORMATION$OnePCCount$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$TwoPCCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$TwoPCCount$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$TwoPCCount$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$TwoPCCount$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TwoPCCount"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$TwoPCCount$VH() { return _TXFS_QUERY_RM_INFORMATION$TwoPCCount$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$NumberLogFileFull$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$NumberLogFileFull$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$NumberLogFileFull$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$NumberLogFileFull$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumberLogFileFull"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$NumberLogFileFull$VH() { return _TXFS_QUERY_RM_INFORMATION$NumberLogFileFull$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$OldestTransactionAge$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$OldestTransactionAge$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$OldestTransactionAge$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$OldestTransactionAge$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OldestTransactionAge"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$OldestTransactionAge$VH() { return _TXFS_QUERY_RM_INFORMATION$OldestTransactionAge$VH_; }

    static final MemoryLayout _TXFS_QUERY_RM_INFORMATION$TmLogPathOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_QUERY_RM_INFORMATION$TmLogPathOffset$LAYOUT() { return _TXFS_QUERY_RM_INFORMATION$TmLogPathOffset$LAYOUT_; }

    static final VarHandle _TXFS_QUERY_RM_INFORMATION$TmLogPathOffset$VH_ = _TXFS_QUERY_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TmLogPathOffset"));
    static final java.lang.invoke.VarHandle _TXFS_QUERY_RM_INFORMATION$TmLogPathOffset$VH() { return _TXFS_QUERY_RM_INFORMATION$TmLogPathOffset$VH_; }

    static final MemoryLayout _TXFS_ROLLFORWARD_REDO_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("LastVirtualClock"),
        C_LONGLONG.withName("LastRedoLsn"),
        C_LONGLONG.withName("HighestRecoveryLsn"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_TXFS_ROLLFORWARD_REDO_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_ROLLFORWARD_REDO_INFORMATION$struct$LAYOUT() { return _TXFS_ROLLFORWARD_REDO_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_ROLLFORWARD_REDO_INFORMATION$LastRedoLsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_ROLLFORWARD_REDO_INFORMATION$LastRedoLsn$LAYOUT() { return _TXFS_ROLLFORWARD_REDO_INFORMATION$LastRedoLsn$LAYOUT_; }

    static final VarHandle _TXFS_ROLLFORWARD_REDO_INFORMATION$LastRedoLsn$VH_ = _TXFS_ROLLFORWARD_REDO_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LastRedoLsn"));
    static final java.lang.invoke.VarHandle _TXFS_ROLLFORWARD_REDO_INFORMATION$LastRedoLsn$VH() { return _TXFS_ROLLFORWARD_REDO_INFORMATION$LastRedoLsn$VH_; }

    static final MemoryLayout _TXFS_ROLLFORWARD_REDO_INFORMATION$HighestRecoveryLsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_ROLLFORWARD_REDO_INFORMATION$HighestRecoveryLsn$LAYOUT() { return _TXFS_ROLLFORWARD_REDO_INFORMATION$HighestRecoveryLsn$LAYOUT_; }

    static final VarHandle _TXFS_ROLLFORWARD_REDO_INFORMATION$HighestRecoveryLsn$VH_ = _TXFS_ROLLFORWARD_REDO_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighestRecoveryLsn"));
    static final java.lang.invoke.VarHandle _TXFS_ROLLFORWARD_REDO_INFORMATION$HighestRecoveryLsn$VH() { return _TXFS_ROLLFORWARD_REDO_INFORMATION$HighestRecoveryLsn$VH_; }

    static final MemoryLayout _TXFS_ROLLFORWARD_REDO_INFORMATION$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_ROLLFORWARD_REDO_INFORMATION$Flags$LAYOUT() { return _TXFS_ROLLFORWARD_REDO_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _TXFS_ROLLFORWARD_REDO_INFORMATION$Flags$VH_ = _TXFS_ROLLFORWARD_REDO_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _TXFS_ROLLFORWARD_REDO_INFORMATION$Flags$VH() { return _TXFS_ROLLFORWARD_REDO_INFORMATION$Flags$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("LogContainerSize"),
        C_LONG.withName("LogContainerCountMin"),
        C_LONG.withName("LogContainerCountMax"),
        C_LONG.withName("LogGrowthIncrement"),
        C_LONG.withName("LogAutoShrinkPercentage"),
        C_LONG.withName("TmLogPathOffset"),
        C_SHORT.withName("TmLogPathLength"),
        C_SHORT.withName("LoggingMode"),
        C_SHORT.withName("LogPathLength"),
        C_SHORT.withName("Reserved"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("LogPath"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_TXFS_START_RM_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$struct$LAYOUT() { return _TXFS_START_RM_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$Flags$LAYOUT() { return _TXFS_START_RM_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$Flags$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$Flags$VH() { return _TXFS_START_RM_INFORMATION$Flags$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$LogContainerSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$LogContainerSize$LAYOUT() { return _TXFS_START_RM_INFORMATION$LogContainerSize$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$LogContainerSize$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LogContainerSize"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$LogContainerSize$VH() { return _TXFS_START_RM_INFORMATION$LogContainerSize$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$LogContainerCountMin$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$LogContainerCountMin$LAYOUT() { return _TXFS_START_RM_INFORMATION$LogContainerCountMin$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$LogContainerCountMin$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogContainerCountMin"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$LogContainerCountMin$VH() { return _TXFS_START_RM_INFORMATION$LogContainerCountMin$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$LogContainerCountMax$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$LogContainerCountMax$LAYOUT() { return _TXFS_START_RM_INFORMATION$LogContainerCountMax$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$LogContainerCountMax$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogContainerCountMax"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$LogContainerCountMax$VH() { return _TXFS_START_RM_INFORMATION$LogContainerCountMax$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$LogGrowthIncrement$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$LogGrowthIncrement$LAYOUT() { return _TXFS_START_RM_INFORMATION$LogGrowthIncrement$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$LogGrowthIncrement$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogGrowthIncrement"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$LogGrowthIncrement$VH() { return _TXFS_START_RM_INFORMATION$LogGrowthIncrement$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$LogAutoShrinkPercentage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$LogAutoShrinkPercentage$LAYOUT() { return _TXFS_START_RM_INFORMATION$LogAutoShrinkPercentage$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$LogAutoShrinkPercentage$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogAutoShrinkPercentage"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$LogAutoShrinkPercentage$VH() { return _TXFS_START_RM_INFORMATION$LogAutoShrinkPercentage$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$TmLogPathOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$TmLogPathOffset$LAYOUT() { return _TXFS_START_RM_INFORMATION$TmLogPathOffset$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$TmLogPathOffset$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TmLogPathOffset"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$TmLogPathOffset$VH() { return _TXFS_START_RM_INFORMATION$TmLogPathOffset$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$TmLogPathLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$TmLogPathLength$LAYOUT() { return _TXFS_START_RM_INFORMATION$TmLogPathLength$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$TmLogPathLength$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("TmLogPathLength"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$TmLogPathLength$VH() { return _TXFS_START_RM_INFORMATION$TmLogPathLength$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$LoggingMode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$LoggingMode$LAYOUT() { return _TXFS_START_RM_INFORMATION$LoggingMode$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$LoggingMode$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LoggingMode"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$LoggingMode$VH() { return _TXFS_START_RM_INFORMATION$LoggingMode$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$LogPathLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$LogPathLength$LAYOUT() { return _TXFS_START_RM_INFORMATION$LogPathLength$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$LogPathLength$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LogPathLength"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$LogPathLength$VH() { return _TXFS_START_RM_INFORMATION$LogPathLength$VH_; }

    static final MemoryLayout _TXFS_START_RM_INFORMATION$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_START_RM_INFORMATION$Reserved$LAYOUT() { return _TXFS_START_RM_INFORMATION$Reserved$LAYOUT_; }

    static final VarHandle _TXFS_START_RM_INFORMATION$Reserved$VH_ = _TXFS_START_RM_INFORMATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _TXFS_START_RM_INFORMATION$Reserved$VH() { return _TXFS_START_RM_INFORMATION$Reserved$VH_; }

    static final MemoryLayout _TXFS_GET_METADATA_INFO_OUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("LowPart"),
            C_LONGLONG.withName("HighPart")
        ).withName("TxfFileId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("LockingTransaction"),
        C_LONGLONG.withName("LastLsn"),
        C_LONG.withName("TransactionState"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_TXFS_GET_METADATA_INFO_OUT");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_METADATA_INFO_OUT$struct$LAYOUT() { return _TXFS_GET_METADATA_INFO_OUT$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_GET_METADATA_INFO_OUT$TxfFileId$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("LowPart"),
        C_LONGLONG.withName("HighPart")
    );
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_METADATA_INFO_OUT$TxfFileId$struct$LAYOUT() { return _TXFS_GET_METADATA_INFO_OUT$TxfFileId$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_GET_METADATA_INFO_OUT$TxfFileId$LowPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_METADATA_INFO_OUT$TxfFileId$LowPart$LAYOUT() { return _TXFS_GET_METADATA_INFO_OUT$TxfFileId$LowPart$LAYOUT_; }

    static final VarHandle _TXFS_GET_METADATA_INFO_OUT$TxfFileId$LowPart$VH_ = _TXFS_GET_METADATA_INFO_OUT$TxfFileId$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowPart"));
    static final java.lang.invoke.VarHandle _TXFS_GET_METADATA_INFO_OUT$TxfFileId$LowPart$VH() { return _TXFS_GET_METADATA_INFO_OUT$TxfFileId$LowPart$VH_; }

    static final MemoryLayout _TXFS_GET_METADATA_INFO_OUT$TxfFileId$HighPart$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_METADATA_INFO_OUT$TxfFileId$HighPart$LAYOUT() { return _TXFS_GET_METADATA_INFO_OUT$TxfFileId$HighPart$LAYOUT_; }

    static final VarHandle _TXFS_GET_METADATA_INFO_OUT$TxfFileId$HighPart$VH_ = _TXFS_GET_METADATA_INFO_OUT$TxfFileId$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighPart"));
    static final java.lang.invoke.VarHandle _TXFS_GET_METADATA_INFO_OUT$TxfFileId$HighPart$VH() { return _TXFS_GET_METADATA_INFO_OUT$TxfFileId$HighPart$VH_; }

    static final MemoryLayout _TXFS_GET_METADATA_INFO_OUT$LastLsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_METADATA_INFO_OUT$LastLsn$LAYOUT() { return _TXFS_GET_METADATA_INFO_OUT$LastLsn$LAYOUT_; }

    static final VarHandle _TXFS_GET_METADATA_INFO_OUT$LastLsn$VH_ = _TXFS_GET_METADATA_INFO_OUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LastLsn"));
    static final java.lang.invoke.VarHandle _TXFS_GET_METADATA_INFO_OUT$LastLsn$VH() { return _TXFS_GET_METADATA_INFO_OUT$LastLsn$VH_; }

    static final MemoryLayout _TXFS_GET_METADATA_INFO_OUT$TransactionState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_METADATA_INFO_OUT$TransactionState$LAYOUT() { return _TXFS_GET_METADATA_INFO_OUT$TransactionState$LAYOUT_; }

    static final VarHandle _TXFS_GET_METADATA_INFO_OUT$TransactionState$VH_ = _TXFS_GET_METADATA_INFO_OUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TransactionState"));
    static final java.lang.invoke.VarHandle _TXFS_GET_METADATA_INFO_OUT$TransactionState$VH() { return _TXFS_GET_METADATA_INFO_OUT$TransactionState$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Offset"),
        C_LONG.withName("NameFlags"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("FileId"),
        C_LONG.withName("Reserved1"),
        C_LONG.withName("Reserved2"),
        C_LONGLONG.withName("Reserved3"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$struct$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Offset$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Offset$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Offset$VH_ = _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Offset$VH() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Offset$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$NameFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$NameFlags$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$NameFlags$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$NameFlags$VH_ = _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NameFlags"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$NameFlags$VH() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$NameFlags$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$FileId$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$FileId$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$FileId$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$FileId$VH_ = _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileId"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$FileId$VH() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$FileId$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved1$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved1$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved1$VH_ = _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved1$VH() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved1$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved2$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved2$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved2$VH_ = _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved2$VH() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved2$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved3$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved3$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved3$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved3$VH_ = _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved3"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved3$VH() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY$Reserved3$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("KtmTransaction"),
        C_LONGLONG.withName("NumberOfFiles"),
        C_LONGLONG.withName("BufferSizeRequired"),
        C_LONGLONG.withName("Offset")
    ).withName("_TXFS_LIST_TRANSACTION_LOCKED_FILES");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES$struct$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES$NumberOfFiles$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES$NumberOfFiles$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES$NumberOfFiles$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES$NumberOfFiles$VH_ = _TXFS_LIST_TRANSACTION_LOCKED_FILES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumberOfFiles"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES$NumberOfFiles$VH() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES$NumberOfFiles$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES$BufferSizeRequired$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES$BufferSizeRequired$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES$BufferSizeRequired$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES$BufferSizeRequired$VH_ = _TXFS_LIST_TRANSACTION_LOCKED_FILES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferSizeRequired"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES$BufferSizeRequired$VH() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES$BufferSizeRequired$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTION_LOCKED_FILES$Offset$LAYOUT() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES$Offset$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES$Offset$VH_ = _TXFS_LIST_TRANSACTION_LOCKED_FILES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTION_LOCKED_FILES$Offset$VH() { return _TXFS_LIST_TRANSACTION_LOCKED_FILES$Offset$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("TransactionId"),
        C_LONG.withName("TransactionState"),
        C_LONG.withName("Reserved1"),
        C_LONG.withName("Reserved2"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Reserved3")
    ).withName("_TXFS_LIST_TRANSACTIONS_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$struct$LAYOUT() { return _TXFS_LIST_TRANSACTIONS_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$TransactionState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$TransactionState$LAYOUT() { return _TXFS_LIST_TRANSACTIONS_ENTRY$TransactionState$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTIONS_ENTRY$TransactionState$VH_ = _TXFS_LIST_TRANSACTIONS_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TransactionState"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTIONS_ENTRY$TransactionState$VH() { return _TXFS_LIST_TRANSACTIONS_ENTRY$TransactionState$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved1$LAYOUT() { return _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved1$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved1$VH_ = _TXFS_LIST_TRANSACTIONS_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved1$VH() { return _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved1$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved2$LAYOUT() { return _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved2$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved2$VH_ = _TXFS_LIST_TRANSACTIONS_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved2$VH() { return _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved2$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved3$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved3$LAYOUT() { return _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved3$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved3$VH_ = _TXFS_LIST_TRANSACTIONS_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reserved3"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved3$VH() { return _TXFS_LIST_TRANSACTIONS_ENTRY$Reserved3$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTIONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("NumberOfTransactions"),
        C_LONGLONG.withName("BufferSizeRequired")
    ).withName("_TXFS_LIST_TRANSACTIONS");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTIONS$struct$LAYOUT() { return _TXFS_LIST_TRANSACTIONS$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTIONS$NumberOfTransactions$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTIONS$NumberOfTransactions$LAYOUT() { return _TXFS_LIST_TRANSACTIONS$NumberOfTransactions$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTIONS$NumberOfTransactions$VH_ = _TXFS_LIST_TRANSACTIONS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumberOfTransactions"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTIONS$NumberOfTransactions$VH() { return _TXFS_LIST_TRANSACTIONS$NumberOfTransactions$VH_; }

    static final MemoryLayout _TXFS_LIST_TRANSACTIONS$BufferSizeRequired$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_LIST_TRANSACTIONS$BufferSizeRequired$LAYOUT() { return _TXFS_LIST_TRANSACTIONS$BufferSizeRequired$LAYOUT_; }

    static final VarHandle _TXFS_LIST_TRANSACTIONS$BufferSizeRequired$VH_ = _TXFS_LIST_TRANSACTIONS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BufferSizeRequired"));
    static final java.lang.invoke.VarHandle _TXFS_LIST_TRANSACTIONS$BufferSizeRequired$VH() { return _TXFS_LIST_TRANSACTIONS$BufferSizeRequired$VH_; }

    static final MemoryLayout _TXFS_READ_BACKUP_INFORMATION_OUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("BufferLength"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Buffer")
    ).withName("_TXFS_READ_BACKUP_INFORMATION_OUT");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_READ_BACKUP_INFORMATION_OUT$struct$LAYOUT() { return _TXFS_READ_BACKUP_INFORMATION_OUT$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_READ_BACKUP_INFORMATION_OUT$BufferLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_READ_BACKUP_INFORMATION_OUT$BufferLength$LAYOUT() { return _TXFS_READ_BACKUP_INFORMATION_OUT$BufferLength$LAYOUT_; }

    static final VarHandle _TXFS_READ_BACKUP_INFORMATION_OUT$BufferLength$VH_ = _TXFS_READ_BACKUP_INFORMATION_OUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferLength"));
    static final java.lang.invoke.VarHandle _TXFS_READ_BACKUP_INFORMATION_OUT$BufferLength$VH() { return _TXFS_READ_BACKUP_INFORMATION_OUT$BufferLength$VH_; }

    static final MemoryLayout _TXFS_WRITE_BACKUP_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(1, C_CHAR).withName("Buffer")
    ).withName("_TXFS_WRITE_BACKUP_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_WRITE_BACKUP_INFORMATION$struct$LAYOUT() { return _TXFS_WRITE_BACKUP_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_GET_TRANSACTED_VERSION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ThisBaseVersion"),
        C_LONG.withName("LatestVersion"),
        C_SHORT.withName("ThisMiniVersion"),
        C_SHORT.withName("FirstMiniVersion"),
        C_SHORT.withName("LatestMiniVersion"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_TXFS_GET_TRANSACTED_VERSION");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_TRANSACTED_VERSION$struct$LAYOUT() { return _TXFS_GET_TRANSACTED_VERSION$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_GET_TRANSACTED_VERSION$ThisBaseVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_TRANSACTED_VERSION$ThisBaseVersion$LAYOUT() { return _TXFS_GET_TRANSACTED_VERSION$ThisBaseVersion$LAYOUT_; }

    static final VarHandle _TXFS_GET_TRANSACTED_VERSION$ThisBaseVersion$VH_ = _TXFS_GET_TRANSACTED_VERSION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ThisBaseVersion"));
    static final java.lang.invoke.VarHandle _TXFS_GET_TRANSACTED_VERSION$ThisBaseVersion$VH() { return _TXFS_GET_TRANSACTED_VERSION$ThisBaseVersion$VH_; }

    static final MemoryLayout _TXFS_GET_TRANSACTED_VERSION$LatestVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_TRANSACTED_VERSION$LatestVersion$LAYOUT() { return _TXFS_GET_TRANSACTED_VERSION$LatestVersion$LAYOUT_; }

    static final VarHandle _TXFS_GET_TRANSACTED_VERSION$LatestVersion$VH_ = _TXFS_GET_TRANSACTED_VERSION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LatestVersion"));
    static final java.lang.invoke.VarHandle _TXFS_GET_TRANSACTED_VERSION$LatestVersion$VH() { return _TXFS_GET_TRANSACTED_VERSION$LatestVersion$VH_; }

    static final MemoryLayout _TXFS_GET_TRANSACTED_VERSION$ThisMiniVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_TRANSACTED_VERSION$ThisMiniVersion$LAYOUT() { return _TXFS_GET_TRANSACTED_VERSION$ThisMiniVersion$LAYOUT_; }

    static final VarHandle _TXFS_GET_TRANSACTED_VERSION$ThisMiniVersion$VH_ = _TXFS_GET_TRANSACTED_VERSION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ThisMiniVersion"));
    static final java.lang.invoke.VarHandle _TXFS_GET_TRANSACTED_VERSION$ThisMiniVersion$VH() { return _TXFS_GET_TRANSACTED_VERSION$ThisMiniVersion$VH_; }

    static final MemoryLayout _TXFS_GET_TRANSACTED_VERSION$FirstMiniVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_TRANSACTED_VERSION$FirstMiniVersion$LAYOUT() { return _TXFS_GET_TRANSACTED_VERSION$FirstMiniVersion$LAYOUT_; }

    static final VarHandle _TXFS_GET_TRANSACTED_VERSION$FirstMiniVersion$VH_ = _TXFS_GET_TRANSACTED_VERSION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FirstMiniVersion"));
    static final java.lang.invoke.VarHandle _TXFS_GET_TRANSACTED_VERSION$FirstMiniVersion$VH() { return _TXFS_GET_TRANSACTED_VERSION$FirstMiniVersion$VH_; }

    static final MemoryLayout _TXFS_GET_TRANSACTED_VERSION$LatestMiniVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_GET_TRANSACTED_VERSION$LatestMiniVersion$LAYOUT() { return _TXFS_GET_TRANSACTED_VERSION$LatestMiniVersion$LAYOUT_; }

    static final VarHandle _TXFS_GET_TRANSACTED_VERSION$LatestMiniVersion$VH_ = _TXFS_GET_TRANSACTED_VERSION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LatestMiniVersion"));
    static final java.lang.invoke.VarHandle _TXFS_GET_TRANSACTED_VERSION$LatestMiniVersion$VH() { return _TXFS_GET_TRANSACTED_VERSION$LatestMiniVersion$VH_; }

    static final MemoryLayout _TXFS_SAVEPOINT_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("KtmTransaction"),
        C_LONG.withName("ActionCode"),
        C_LONG.withName("SavepointId")
    ).withName("_TXFS_SAVEPOINT_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_SAVEPOINT_INFORMATION$struct$LAYOUT() { return _TXFS_SAVEPOINT_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_SAVEPOINT_INFORMATION$KtmTransaction$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_SAVEPOINT_INFORMATION$KtmTransaction$LAYOUT() { return _TXFS_SAVEPOINT_INFORMATION$KtmTransaction$LAYOUT_; }

    static final VarHandle _TXFS_SAVEPOINT_INFORMATION$KtmTransaction$VH_ = MemoryHandles.asAddressVarHandle(_TXFS_SAVEPOINT_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("KtmTransaction")));
    static final java.lang.invoke.VarHandle _TXFS_SAVEPOINT_INFORMATION$KtmTransaction$VH() { return _TXFS_SAVEPOINT_INFORMATION$KtmTransaction$VH_; }

    static final MemoryLayout _TXFS_SAVEPOINT_INFORMATION$ActionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_SAVEPOINT_INFORMATION$ActionCode$LAYOUT() { return _TXFS_SAVEPOINT_INFORMATION$ActionCode$LAYOUT_; }

    static final VarHandle _TXFS_SAVEPOINT_INFORMATION$ActionCode$VH_ = _TXFS_SAVEPOINT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ActionCode"));
    static final java.lang.invoke.VarHandle _TXFS_SAVEPOINT_INFORMATION$ActionCode$VH() { return _TXFS_SAVEPOINT_INFORMATION$ActionCode$VH_; }

    static final MemoryLayout _TXFS_SAVEPOINT_INFORMATION$SavepointId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_SAVEPOINT_INFORMATION$SavepointId$LAYOUT() { return _TXFS_SAVEPOINT_INFORMATION$SavepointId$LAYOUT_; }

    static final VarHandle _TXFS_SAVEPOINT_INFORMATION$SavepointId$VH_ = _TXFS_SAVEPOINT_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SavepointId"));
    static final java.lang.invoke.VarHandle _TXFS_SAVEPOINT_INFORMATION$SavepointId$VH() { return _TXFS_SAVEPOINT_INFORMATION$SavepointId$VH_; }

    static final MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("StructureVersion"),
        C_SHORT.withName("StructureLength"),
        C_LONG.withName("BaseVersion"),
        C_SHORT.withName("MiniVersion"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_TXFS_CREATE_MINIVERSION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$struct$LAYOUT() { return _TXFS_CREATE_MINIVERSION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$StructureVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$StructureVersion$LAYOUT() { return _TXFS_CREATE_MINIVERSION_INFO$StructureVersion$LAYOUT_; }

    static final VarHandle _TXFS_CREATE_MINIVERSION_INFO$StructureVersion$VH_ = _TXFS_CREATE_MINIVERSION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StructureVersion"));
    static final java.lang.invoke.VarHandle _TXFS_CREATE_MINIVERSION_INFO$StructureVersion$VH() { return _TXFS_CREATE_MINIVERSION_INFO$StructureVersion$VH_; }

    static final MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$StructureLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$StructureLength$LAYOUT() { return _TXFS_CREATE_MINIVERSION_INFO$StructureLength$LAYOUT_; }

    static final VarHandle _TXFS_CREATE_MINIVERSION_INFO$StructureLength$VH_ = _TXFS_CREATE_MINIVERSION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StructureLength"));
    static final java.lang.invoke.VarHandle _TXFS_CREATE_MINIVERSION_INFO$StructureLength$VH() { return _TXFS_CREATE_MINIVERSION_INFO$StructureLength$VH_; }

    static final MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$BaseVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$BaseVersion$LAYOUT() { return _TXFS_CREATE_MINIVERSION_INFO$BaseVersion$LAYOUT_; }

    static final VarHandle _TXFS_CREATE_MINIVERSION_INFO$BaseVersion$VH_ = _TXFS_CREATE_MINIVERSION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseVersion"));
    static final java.lang.invoke.VarHandle _TXFS_CREATE_MINIVERSION_INFO$BaseVersion$VH() { return _TXFS_CREATE_MINIVERSION_INFO$BaseVersion$VH_; }

    static final MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$MiniVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_CREATE_MINIVERSION_INFO$MiniVersion$LAYOUT() { return _TXFS_CREATE_MINIVERSION_INFO$MiniVersion$LAYOUT_; }

    static final VarHandle _TXFS_CREATE_MINIVERSION_INFO$MiniVersion$VH_ = _TXFS_CREATE_MINIVERSION_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MiniVersion"));
    static final java.lang.invoke.VarHandle _TXFS_CREATE_MINIVERSION_INFO$MiniVersion$VH() { return _TXFS_CREATE_MINIVERSION_INFO$MiniVersion$VH_; }

    static final MemoryLayout _TXFS_TRANSACTION_ACTIVE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("TransactionsActiveAtSnapshot")
    ).withName("_TXFS_TRANSACTION_ACTIVE_INFO");
    static final jdk.incubator.foreign.MemoryLayout _TXFS_TRANSACTION_ACTIVE_INFO$struct$LAYOUT() { return _TXFS_TRANSACTION_ACTIVE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _TXFS_TRANSACTION_ACTIVE_INFO$TransactionsActiveAtSnapshot$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _TXFS_TRANSACTION_ACTIVE_INFO$TransactionsActiveAtSnapshot$LAYOUT() { return _TXFS_TRANSACTION_ACTIVE_INFO$TransactionsActiveAtSnapshot$LAYOUT_; }

    static final VarHandle _TXFS_TRANSACTION_ACTIVE_INFO$TransactionsActiveAtSnapshot$VH_ = _TXFS_TRANSACTION_ACTIVE_INFO$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("TransactionsActiveAtSnapshot"));
    static final java.lang.invoke.VarHandle _TXFS_TRANSACTION_ACTIVE_INFO$TransactionsActiveAtSnapshot$VH() { return _TXFS_TRANSACTION_ACTIVE_INFO$TransactionsActiveAtSnapshot$VH_; }

    static final MemoryLayout _BOOT_AREA_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("BootSectorCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(2, MemoryLayout.ofStruct(
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("Offset")
        )).withName("BootSectors")
    ).withName("_BOOT_AREA_INFO");
    static final jdk.incubator.foreign.MemoryLayout _BOOT_AREA_INFO$struct$LAYOUT() { return _BOOT_AREA_INFO$struct$LAYOUT_; }

    static final MemoryLayout _BOOT_AREA_INFO$BootSectorCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _BOOT_AREA_INFO$BootSectorCount$LAYOUT() { return _BOOT_AREA_INFO$BootSectorCount$LAYOUT_; }

    static final VarHandle _BOOT_AREA_INFO$BootSectorCount$VH_ = _BOOT_AREA_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BootSectorCount"));
    static final java.lang.invoke.VarHandle _BOOT_AREA_INFO$BootSectorCount$VH() { return _BOOT_AREA_INFO$BootSectorCount$VH_; }

    static final MemoryLayout _RETRIEVAL_POINTER_BASE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("FileAreaOffset")
    ).withName("_RETRIEVAL_POINTER_BASE");
    static final jdk.incubator.foreign.MemoryLayout _RETRIEVAL_POINTER_BASE$struct$LAYOUT() { return _RETRIEVAL_POINTER_BASE$struct$LAYOUT_; }

    static final MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("VolumeFlags"),
        C_LONG.withName("FlagMask"),
        C_LONG.withName("Version"),
        C_LONG.withName("Reserved")
    ).withName("_FILE_FS_PERSISTENT_VOLUME_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$struct$LAYOUT() { return _FILE_FS_PERSISTENT_VOLUME_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$VolumeFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$VolumeFlags$LAYOUT() { return _FILE_FS_PERSISTENT_VOLUME_INFORMATION$VolumeFlags$LAYOUT_; }

    static final VarHandle _FILE_FS_PERSISTENT_VOLUME_INFORMATION$VolumeFlags$VH_ = _FILE_FS_PERSISTENT_VOLUME_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VolumeFlags"));
    static final java.lang.invoke.VarHandle _FILE_FS_PERSISTENT_VOLUME_INFORMATION$VolumeFlags$VH() { return _FILE_FS_PERSISTENT_VOLUME_INFORMATION$VolumeFlags$VH_; }

    static final MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$FlagMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$FlagMask$LAYOUT() { return _FILE_FS_PERSISTENT_VOLUME_INFORMATION$FlagMask$LAYOUT_; }

    static final VarHandle _FILE_FS_PERSISTENT_VOLUME_INFORMATION$FlagMask$VH_ = _FILE_FS_PERSISTENT_VOLUME_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FlagMask"));
    static final java.lang.invoke.VarHandle _FILE_FS_PERSISTENT_VOLUME_INFORMATION$FlagMask$VH() { return _FILE_FS_PERSISTENT_VOLUME_INFORMATION$FlagMask$VH_; }

    static final MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Version$LAYOUT() { return _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Version$LAYOUT_; }

    static final VarHandle _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Version$VH_ = _FILE_FS_PERSISTENT_VOLUME_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Version$VH() { return _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Version$VH_; }

    static final MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Reserved$LAYOUT() { return _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Reserved$LAYOUT_; }

    static final VarHandle _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Reserved$VH_ = _FILE_FS_PERSISTENT_VOLUME_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Reserved$VH() { return _FILE_FS_PERSISTENT_VOLUME_INFORMATION$Reserved$VH_; }

    static final MemoryLayout _FILE_SYSTEM_RECOGNITION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(9, C_CHAR).withName("FileSystem")
    ).withName("_FILE_SYSTEM_RECOGNITION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _FILE_SYSTEM_RECOGNITION_INFORMATION$struct$LAYOUT() { return _FILE_SYSTEM_RECOGNITION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("StructureVersion"),
        C_SHORT.withName("StructureLength"),
        C_LONG.withName("RequestedOplockLevel"),
        C_LONG.withName("Flags")
    ).withName("_REQUEST_OPLOCK_INPUT_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$struct$LAYOUT() { return _REQUEST_OPLOCK_INPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$StructureVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$StructureVersion$LAYOUT() { return _REQUEST_OPLOCK_INPUT_BUFFER$StructureVersion$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_INPUT_BUFFER$StructureVersion$VH_ = _REQUEST_OPLOCK_INPUT_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StructureVersion"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_INPUT_BUFFER$StructureVersion$VH() { return _REQUEST_OPLOCK_INPUT_BUFFER$StructureVersion$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$StructureLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$StructureLength$LAYOUT() { return _REQUEST_OPLOCK_INPUT_BUFFER$StructureLength$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_INPUT_BUFFER$StructureLength$VH_ = _REQUEST_OPLOCK_INPUT_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StructureLength"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_INPUT_BUFFER$StructureLength$VH() { return _REQUEST_OPLOCK_INPUT_BUFFER$StructureLength$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$RequestedOplockLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$RequestedOplockLevel$LAYOUT() { return _REQUEST_OPLOCK_INPUT_BUFFER$RequestedOplockLevel$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_INPUT_BUFFER$RequestedOplockLevel$VH_ = _REQUEST_OPLOCK_INPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RequestedOplockLevel"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_INPUT_BUFFER$RequestedOplockLevel$VH() { return _REQUEST_OPLOCK_INPUT_BUFFER$RequestedOplockLevel$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_INPUT_BUFFER$Flags$LAYOUT() { return _REQUEST_OPLOCK_INPUT_BUFFER$Flags$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_INPUT_BUFFER$Flags$VH_ = _REQUEST_OPLOCK_INPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_INPUT_BUFFER$Flags$VH() { return _REQUEST_OPLOCK_INPUT_BUFFER$Flags$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("StructureVersion"),
        C_SHORT.withName("StructureLength"),
        C_LONG.withName("OriginalOplockLevel"),
        C_LONG.withName("NewOplockLevel"),
        C_LONG.withName("Flags"),
        C_LONG.withName("AccessMode"),
        C_SHORT.withName("ShareMode"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_REQUEST_OPLOCK_OUTPUT_BUFFER");
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT_; }

    static final MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureVersion$LAYOUT() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureVersion$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureVersion$VH_ = _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StructureVersion"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureVersion$VH() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureVersion$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureLength$LAYOUT() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureLength$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureLength$VH_ = _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("StructureLength"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureLength$VH() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$StructureLength$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$OriginalOplockLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$OriginalOplockLevel$LAYOUT() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$OriginalOplockLevel$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$OriginalOplockLevel$VH_ = _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OriginalOplockLevel"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$OriginalOplockLevel$VH() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$OriginalOplockLevel$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$NewOplockLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$NewOplockLevel$LAYOUT() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$NewOplockLevel$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$NewOplockLevel$VH_ = _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NewOplockLevel"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$NewOplockLevel$VH() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$NewOplockLevel$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$Flags$LAYOUT() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$Flags$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$Flags$VH_ = _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$Flags$VH() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$Flags$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$AccessMode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$AccessMode$LAYOUT() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$AccessMode$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$AccessMode$VH_ = _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AccessMode"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$AccessMode$VH() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$AccessMode$VH_; }

    static final MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$ShareMode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _REQUEST_OPLOCK_OUTPUT_BUFFER$ShareMode$LAYOUT() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$ShareMode$LAYOUT_; }

    static final VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$ShareMode$VH_ = _REQUEST_OPLOCK_OUTPUT_BUFFER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ShareMode"));
    static final java.lang.invoke.VarHandle _REQUEST_OPLOCK_OUTPUT_BUFFER$ShareMode$VH() { return _REQUEST_OPLOCK_OUTPUT_BUFFER$ShareMode$VH_; }

    static final MemoryLayout _VIRTUAL_STORAGE_TYPE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("DeviceId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("VendorId")
    ).withName("_VIRTUAL_STORAGE_TYPE");
    static final jdk.incubator.foreign.MemoryLayout _VIRTUAL_STORAGE_TYPE$struct$LAYOUT() { return _VIRTUAL_STORAGE_TYPE$struct$LAYOUT_; }

    static final MemoryLayout _VIRTUAL_STORAGE_TYPE$DeviceId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIRTUAL_STORAGE_TYPE$DeviceId$LAYOUT() { return _VIRTUAL_STORAGE_TYPE$DeviceId$LAYOUT_; }

    static final VarHandle _VIRTUAL_STORAGE_TYPE$DeviceId$VH_ = _VIRTUAL_STORAGE_TYPE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeviceId"));
    static final java.lang.invoke.VarHandle _VIRTUAL_STORAGE_TYPE$DeviceId$VH() { return _VIRTUAL_STORAGE_TYPE$DeviceId$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("RequestLevel"),
        C_LONG.withName("RequestFlags")
    ).withName("_STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST");
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$struct$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$struct$LAYOUT_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestLevel$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestLevel$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestLevel$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RequestLevel"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestLevel$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestLevel$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestFlags$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestFlags$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestFlags$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RequestFlags"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestFlags$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST$RequestFlags$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("EntryLength"),
        C_LONG.withName("DependencyTypeFlags"),
        C_LONG.withName("ProviderSpecificFlags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("DeviceId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("VendorId")
        ).withName("VirtualStorageType")
    ).withName("_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$struct$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$EntryLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$EntryLength$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$EntryLength$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$EntryLength$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryLength"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$EntryLength$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$EntryLength$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$DependencyTypeFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$DependencyTypeFlags$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$DependencyTypeFlags$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$DependencyTypeFlags$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DependencyTypeFlags"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$DependencyTypeFlags$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$DependencyTypeFlags$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$ProviderSpecificFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$ProviderSpecificFlags$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$ProviderSpecificFlags$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$ProviderSpecificFlags$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProviderSpecificFlags"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$ProviderSpecificFlags$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY$ProviderSpecificFlags$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("EntryLength"),
        C_LONG.withName("DependencyTypeFlags"),
        C_LONG.withName("ProviderSpecificFlags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("DeviceId"),
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("VendorId")
        ).withName("VirtualStorageType"),
        C_LONG.withName("AncestorLevel"),
        C_LONG.withName("HostVolumeNameOffset"),
        C_LONG.withName("HostVolumeNameSize"),
        C_LONG.withName("DependentVolumeNameOffset"),
        C_LONG.withName("DependentVolumeNameSize"),
        C_LONG.withName("RelativePathOffset"),
        C_LONG.withName("RelativePathSize"),
        C_LONG.withName("DependentDeviceNameOffset"),
        C_LONG.withName("DependentDeviceNameSize")
    ).withName("_STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$EntryLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$EntryLength$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$EntryLength$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$EntryLength$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryLength"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$EntryLength$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$EntryLength$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependencyTypeFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependencyTypeFlags$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependencyTypeFlags$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependencyTypeFlags$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DependencyTypeFlags"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependencyTypeFlags$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependencyTypeFlags$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$ProviderSpecificFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$ProviderSpecificFlags$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$ProviderSpecificFlags$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$ProviderSpecificFlags$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ProviderSpecificFlags"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$ProviderSpecificFlags$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$ProviderSpecificFlags$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$AncestorLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$AncestorLevel$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$AncestorLevel$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$AncestorLevel$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AncestorLevel"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$AncestorLevel$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$AncestorLevel$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameOffset$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameOffset$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameOffset$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HostVolumeNameOffset"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameOffset$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameOffset$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameSize$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameSize$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameSize$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HostVolumeNameSize"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameSize$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$HostVolumeNameSize$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameOffset$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameOffset$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameOffset$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DependentVolumeNameOffset"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameOffset$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameOffset$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameSize$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameSize$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameSize$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DependentVolumeNameSize"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameSize$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentVolumeNameSize$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathOffset$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathOffset$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathOffset$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RelativePathOffset"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathOffset$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathOffset$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathSize$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathSize$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathSize$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RelativePathSize"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathSize$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$RelativePathSize$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameOffset$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameOffset$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameOffset$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DependentDeviceNameOffset"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameOffset$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameOffset$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameSize$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameSize$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameSize$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DependentDeviceNameSize"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameSize$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY$DependentDeviceNameSize$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ResponseLevel"),
        C_LONG.withName("NumberEntries"),
        MemoryLayout.ofSequence(MemoryLayout.ofStruct(
            C_LONG.withName("EntryLength"),
            C_LONG.withName("DependencyTypeFlags"),
            C_LONG.withName("ProviderSpecificFlags"),
            MemoryLayout.ofStruct(
                C_LONG.withName("DeviceId"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
                ).withName("VendorId")
            ).withName("VirtualStorageType")
        ).withName("_STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY")).withName("Lev1Depends"),
        MemoryLayout.ofSequence(MemoryLayout.ofStruct(
            C_LONG.withName("EntryLength"),
            C_LONG.withName("DependencyTypeFlags"),
            C_LONG.withName("ProviderSpecificFlags"),
            MemoryLayout.ofStruct(
                C_LONG.withName("DeviceId"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("Data1"),
                    C_SHORT.withName("Data2"),
                    C_SHORT.withName("Data3"),
                    MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
                ).withName("VendorId")
            ).withName("VirtualStorageType"),
            C_LONG.withName("AncestorLevel"),
            C_LONG.withName("HostVolumeNameOffset"),
            C_LONG.withName("HostVolumeNameSize"),
            C_LONG.withName("DependentVolumeNameOffset"),
            C_LONG.withName("DependentVolumeNameSize"),
            C_LONG.withName("RelativePathOffset"),
            C_LONG.withName("RelativePathSize"),
            C_LONG.withName("DependentDeviceNameOffset"),
            C_LONG.withName("DependentDeviceNameSize")
        ).withName("_STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY")).withName("Lev2Depends"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE");
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$struct$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$struct$LAYOUT_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$ResponseLevel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$ResponseLevel$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$ResponseLevel$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$ResponseLevel$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ResponseLevel"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$ResponseLevel$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$ResponseLevel$VH_; }

    static final MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$NumberEntries$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$NumberEntries$LAYOUT() { return _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$NumberEntries$LAYOUT_; }

    static final VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$NumberEntries$VH_ = _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberEntries"));
    static final java.lang.invoke.VarHandle _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$NumberEntries$VH() { return _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE$NumberEntries$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("CurrentMachineSIDOffset"),
        C_SHORT.withName("CurrentMachineSIDLength"),
        C_SHORT.withName("NewMachineSIDOffset"),
        C_SHORT.withName("NewMachineSIDLength")
    ).withName("_SD_CHANGE_MACHINE_SID_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$struct$LAYOUT() { return _SD_CHANGE_MACHINE_SID_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDOffset$LAYOUT() { return _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDOffset$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDOffset$VH_ = _SD_CHANGE_MACHINE_SID_INPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CurrentMachineSIDOffset"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDOffset$VH() { return _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDOffset$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDLength$LAYOUT() { return _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDLength$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDLength$VH_ = _SD_CHANGE_MACHINE_SID_INPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CurrentMachineSIDLength"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDLength$VH() { return _SD_CHANGE_MACHINE_SID_INPUT$CurrentMachineSIDLength$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDOffset$LAYOUT() { return _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDOffset$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDOffset$VH_ = _SD_CHANGE_MACHINE_SID_INPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NewMachineSIDOffset"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDOffset$VH() { return _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDOffset$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDLength$LAYOUT() { return _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDLength$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDLength$VH_ = _SD_CHANGE_MACHINE_SID_INPUT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NewMachineSIDLength"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDLength$VH() { return _SD_CHANGE_MACHINE_SID_INPUT$NewMachineSIDLength$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("NumSDChangedSuccess"),
        C_LONGLONG.withName("NumSDChangedFail"),
        C_LONGLONG.withName("NumSDUnused"),
        C_LONGLONG.withName("NumSDTotal"),
        C_LONGLONG.withName("NumMftSDChangedSuccess"),
        C_LONGLONG.withName("NumMftSDChangedFail"),
        C_LONGLONG.withName("NumMftSDTotal")
    ).withName("_SD_CHANGE_MACHINE_SID_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT() { return _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedSuccess$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedSuccess$LAYOUT() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedSuccess$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedSuccess$VH_ = _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumSDChangedSuccess"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedSuccess$VH() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedSuccess$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedFail$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedFail$LAYOUT() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedFail$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedFail$VH_ = _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumSDChangedFail"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedFail$VH() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDChangedFail$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDUnused$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDUnused$LAYOUT() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDUnused$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDUnused$VH_ = _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumSDUnused"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDUnused$VH() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDUnused$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDTotal$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDTotal$LAYOUT() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDTotal$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDTotal$VH_ = _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumSDTotal"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDTotal$VH() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumSDTotal$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedSuccess$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedSuccess$LAYOUT() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedSuccess$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedSuccess$VH_ = _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumMftSDChangedSuccess"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedSuccess$VH() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedSuccess$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedFail$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedFail$LAYOUT() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedFail$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedFail$VH_ = _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumMftSDChangedFail"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedFail$VH() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDChangedFail$VH_; }

    static final MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDTotal$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDTotal$LAYOUT() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDTotal$LAYOUT_; }

    static final VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDTotal$VH_ = _SD_CHANGE_MACHINE_SID_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumMftSDTotal"));
    static final java.lang.invoke.VarHandle _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDTotal$VH() { return _SD_CHANGE_MACHINE_SID_OUTPUT$NumMftSDTotal$VH_; }

    static final MemoryLayout _SD_QUERY_STATS_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Reserved")
    ).withName("_SD_QUERY_STATS_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_INPUT$struct$LAYOUT() { return _SD_QUERY_STATS_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SD_QUERY_STATS_INPUT$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_INPUT$Reserved$LAYOUT() { return _SD_QUERY_STATS_INPUT$Reserved$LAYOUT_; }

    static final VarHandle _SD_QUERY_STATS_INPUT$Reserved$VH_ = _SD_QUERY_STATS_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _SD_QUERY_STATS_INPUT$Reserved$VH() { return _SD_QUERY_STATS_INPUT$Reserved$VH_; }

    static final MemoryLayout _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("SdsStreamSize"),
        C_LONGLONG.withName("SdsAllocationSize"),
        C_LONGLONG.withName("SiiStreamSize"),
        C_LONGLONG.withName("SiiAllocationSize"),
        C_LONGLONG.withName("SdhStreamSize"),
        C_LONGLONG.withName("SdhAllocationSize"),
        C_LONGLONG.withName("NumSDTotal"),
        C_LONGLONG.withName("NumSDUnused")
    ).withName("_SD_QUERY_STATS_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_OUTPUT$struct$LAYOUT() { return _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _SD_QUERY_STATS_OUTPUT$SdsStreamSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_OUTPUT$SdsStreamSize$LAYOUT() { return _SD_QUERY_STATS_OUTPUT$SdsStreamSize$LAYOUT_; }

    static final VarHandle _SD_QUERY_STATS_OUTPUT$SdsStreamSize$VH_ = _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SdsStreamSize"));
    static final java.lang.invoke.VarHandle _SD_QUERY_STATS_OUTPUT$SdsStreamSize$VH() { return _SD_QUERY_STATS_OUTPUT$SdsStreamSize$VH_; }

    static final MemoryLayout _SD_QUERY_STATS_OUTPUT$SdsAllocationSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_OUTPUT$SdsAllocationSize$LAYOUT() { return _SD_QUERY_STATS_OUTPUT$SdsAllocationSize$LAYOUT_; }

    static final VarHandle _SD_QUERY_STATS_OUTPUT$SdsAllocationSize$VH_ = _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SdsAllocationSize"));
    static final java.lang.invoke.VarHandle _SD_QUERY_STATS_OUTPUT$SdsAllocationSize$VH() { return _SD_QUERY_STATS_OUTPUT$SdsAllocationSize$VH_; }

    static final MemoryLayout _SD_QUERY_STATS_OUTPUT$SiiStreamSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_OUTPUT$SiiStreamSize$LAYOUT() { return _SD_QUERY_STATS_OUTPUT$SiiStreamSize$LAYOUT_; }

    static final VarHandle _SD_QUERY_STATS_OUTPUT$SiiStreamSize$VH_ = _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SiiStreamSize"));
    static final java.lang.invoke.VarHandle _SD_QUERY_STATS_OUTPUT$SiiStreamSize$VH() { return _SD_QUERY_STATS_OUTPUT$SiiStreamSize$VH_; }

    static final MemoryLayout _SD_QUERY_STATS_OUTPUT$SiiAllocationSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_OUTPUT$SiiAllocationSize$LAYOUT() { return _SD_QUERY_STATS_OUTPUT$SiiAllocationSize$LAYOUT_; }

    static final VarHandle _SD_QUERY_STATS_OUTPUT$SiiAllocationSize$VH_ = _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SiiAllocationSize"));
    static final java.lang.invoke.VarHandle _SD_QUERY_STATS_OUTPUT$SiiAllocationSize$VH() { return _SD_QUERY_STATS_OUTPUT$SiiAllocationSize$VH_; }

    static final MemoryLayout _SD_QUERY_STATS_OUTPUT$SdhStreamSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_OUTPUT$SdhStreamSize$LAYOUT() { return _SD_QUERY_STATS_OUTPUT$SdhStreamSize$LAYOUT_; }

    static final VarHandle _SD_QUERY_STATS_OUTPUT$SdhStreamSize$VH_ = _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SdhStreamSize"));
    static final java.lang.invoke.VarHandle _SD_QUERY_STATS_OUTPUT$SdhStreamSize$VH() { return _SD_QUERY_STATS_OUTPUT$SdhStreamSize$VH_; }

    static final MemoryLayout _SD_QUERY_STATS_OUTPUT$SdhAllocationSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_OUTPUT$SdhAllocationSize$LAYOUT() { return _SD_QUERY_STATS_OUTPUT$SdhAllocationSize$LAYOUT_; }

    static final VarHandle _SD_QUERY_STATS_OUTPUT$SdhAllocationSize$VH_ = _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SdhAllocationSize"));
    static final java.lang.invoke.VarHandle _SD_QUERY_STATS_OUTPUT$SdhAllocationSize$VH() { return _SD_QUERY_STATS_OUTPUT$SdhAllocationSize$VH_; }

    static final MemoryLayout _SD_QUERY_STATS_OUTPUT$NumSDTotal$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_OUTPUT$NumSDTotal$LAYOUT() { return _SD_QUERY_STATS_OUTPUT$NumSDTotal$LAYOUT_; }

    static final VarHandle _SD_QUERY_STATS_OUTPUT$NumSDTotal$VH_ = _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumSDTotal"));
    static final java.lang.invoke.VarHandle _SD_QUERY_STATS_OUTPUT$NumSDTotal$VH() { return _SD_QUERY_STATS_OUTPUT$NumSDTotal$VH_; }

    static final MemoryLayout _SD_QUERY_STATS_OUTPUT$NumSDUnused$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_QUERY_STATS_OUTPUT$NumSDUnused$LAYOUT() { return _SD_QUERY_STATS_OUTPUT$NumSDUnused$LAYOUT_; }

    static final VarHandle _SD_QUERY_STATS_OUTPUT$NumSDUnused$VH_ = _SD_QUERY_STATS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumSDUnused"));
    static final java.lang.invoke.VarHandle _SD_QUERY_STATS_OUTPUT$NumSDUnused$VH() { return _SD_QUERY_STATS_OUTPUT$NumSDUnused$VH_; }

    static final MemoryLayout _SD_ENUM_SDS_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartingOffset"),
        C_LONGLONG.withName("MaxSDEntriesToReturn")
    ).withName("_SD_ENUM_SDS_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_INPUT$struct$LAYOUT() { return _SD_ENUM_SDS_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SD_ENUM_SDS_INPUT$StartingOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_INPUT$StartingOffset$LAYOUT() { return _SD_ENUM_SDS_INPUT$StartingOffset$LAYOUT_; }

    static final VarHandle _SD_ENUM_SDS_INPUT$StartingOffset$VH_ = _SD_ENUM_SDS_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartingOffset"));
    static final java.lang.invoke.VarHandle _SD_ENUM_SDS_INPUT$StartingOffset$VH() { return _SD_ENUM_SDS_INPUT$StartingOffset$VH_; }

    static final MemoryLayout _SD_ENUM_SDS_INPUT$MaxSDEntriesToReturn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_INPUT$MaxSDEntriesToReturn$LAYOUT() { return _SD_ENUM_SDS_INPUT$MaxSDEntriesToReturn$LAYOUT_; }

    static final VarHandle _SD_ENUM_SDS_INPUT$MaxSDEntriesToReturn$VH_ = _SD_ENUM_SDS_INPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxSDEntriesToReturn"));
    static final java.lang.invoke.VarHandle _SD_ENUM_SDS_INPUT$MaxSDEntriesToReturn$VH() { return _SD_ENUM_SDS_INPUT$MaxSDEntriesToReturn$VH_; }

    static final MemoryLayout _SD_ENUM_SDS_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Hash"),
        C_LONG.withName("SecurityId"),
        C_LONGLONG.withName("Offset"),
        C_LONG.withName("Length"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Descriptor"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_SD_ENUM_SDS_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_ENTRY$struct$LAYOUT() { return _SD_ENUM_SDS_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _SD_ENUM_SDS_ENTRY$Hash$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_ENTRY$Hash$LAYOUT() { return _SD_ENUM_SDS_ENTRY$Hash$LAYOUT_; }

    static final VarHandle _SD_ENUM_SDS_ENTRY$Hash$VH_ = _SD_ENUM_SDS_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Hash"));
    static final java.lang.invoke.VarHandle _SD_ENUM_SDS_ENTRY$Hash$VH() { return _SD_ENUM_SDS_ENTRY$Hash$VH_; }

    static final MemoryLayout _SD_ENUM_SDS_ENTRY$SecurityId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_ENTRY$SecurityId$LAYOUT() { return _SD_ENUM_SDS_ENTRY$SecurityId$LAYOUT_; }

    static final VarHandle _SD_ENUM_SDS_ENTRY$SecurityId$VH_ = _SD_ENUM_SDS_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityId"));
    static final java.lang.invoke.VarHandle _SD_ENUM_SDS_ENTRY$SecurityId$VH() { return _SD_ENUM_SDS_ENTRY$SecurityId$VH_; }

    static final MemoryLayout _SD_ENUM_SDS_ENTRY$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_ENTRY$Offset$LAYOUT() { return _SD_ENUM_SDS_ENTRY$Offset$LAYOUT_; }

    static final VarHandle _SD_ENUM_SDS_ENTRY$Offset$VH_ = _SD_ENUM_SDS_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _SD_ENUM_SDS_ENTRY$Offset$VH() { return _SD_ENUM_SDS_ENTRY$Offset$VH_; }

    static final MemoryLayout _SD_ENUM_SDS_ENTRY$Length$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_ENTRY$Length$LAYOUT() { return _SD_ENUM_SDS_ENTRY$Length$LAYOUT_; }

    static final VarHandle _SD_ENUM_SDS_ENTRY$Length$VH_ = _SD_ENUM_SDS_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _SD_ENUM_SDS_ENTRY$Length$VH() { return _SD_ENUM_SDS_ENTRY$Length$VH_; }

    static final MemoryLayout _SD_ENUM_SDS_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("NextOffset"),
        C_LONGLONG.withName("NumSDEntriesReturned"),
        C_LONGLONG.withName("NumSDBytesReturned"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Hash"),
            C_LONG.withName("SecurityId"),
            C_LONGLONG.withName("Offset"),
            C_LONG.withName("Length"),
            MemoryLayout.ofSequence(1, C_CHAR).withName("Descriptor"),
            MemoryLayout.ofPaddingBits(24)
        ).withName("_SD_ENUM_SDS_ENTRY")).withName("SDEntry")
    ).withName("_SD_ENUM_SDS_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_OUTPUT$struct$LAYOUT() { return _SD_ENUM_SDS_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _SD_ENUM_SDS_OUTPUT$NextOffset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_OUTPUT$NextOffset$LAYOUT() { return _SD_ENUM_SDS_OUTPUT$NextOffset$LAYOUT_; }

    static final VarHandle _SD_ENUM_SDS_OUTPUT$NextOffset$VH_ = _SD_ENUM_SDS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NextOffset"));
    static final java.lang.invoke.VarHandle _SD_ENUM_SDS_OUTPUT$NextOffset$VH() { return _SD_ENUM_SDS_OUTPUT$NextOffset$VH_; }

    static final MemoryLayout _SD_ENUM_SDS_OUTPUT$NumSDEntriesReturned$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_OUTPUT$NumSDEntriesReturned$LAYOUT() { return _SD_ENUM_SDS_OUTPUT$NumSDEntriesReturned$LAYOUT_; }

    static final VarHandle _SD_ENUM_SDS_OUTPUT$NumSDEntriesReturned$VH_ = _SD_ENUM_SDS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumSDEntriesReturned"));
    static final java.lang.invoke.VarHandle _SD_ENUM_SDS_OUTPUT$NumSDEntriesReturned$VH() { return _SD_ENUM_SDS_OUTPUT$NumSDEntriesReturned$VH_; }

    static final MemoryLayout _SD_ENUM_SDS_OUTPUT$NumSDBytesReturned$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_ENUM_SDS_OUTPUT$NumSDBytesReturned$LAYOUT() { return _SD_ENUM_SDS_OUTPUT$NumSDBytesReturned$LAYOUT_; }

    static final VarHandle _SD_ENUM_SDS_OUTPUT$NumSDBytesReturned$VH_ = _SD_ENUM_SDS_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NumSDBytesReturned"));
    static final java.lang.invoke.VarHandle _SD_ENUM_SDS_OUTPUT$NumSDBytesReturned$VH() { return _SD_ENUM_SDS_OUTPUT$NumSDBytesReturned$VH_; }

    static final MemoryLayout _SD_GLOBAL_CHANGE_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("ChangeType"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("CurrentMachineSIDOffset"),
            C_SHORT.withName("CurrentMachineSIDLength"),
            C_SHORT.withName("NewMachineSIDOffset"),
            C_SHORT.withName("NewMachineSIDLength")
        ).withName("SdChange"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Reserved")
        ).withName("SdQueryStats"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("StartingOffset"),
            C_LONGLONG.withName("MaxSDEntriesToReturn")
        ).withName("SdEnumSds")
    ).withName("_SD_GLOBAL_CHANGE_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _SD_GLOBAL_CHANGE_INPUT$struct$LAYOUT() { return _SD_GLOBAL_CHANGE_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _SD_GLOBAL_CHANGE_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_GLOBAL_CHANGE_INPUT$Flags$LAYOUT() { return _SD_GLOBAL_CHANGE_INPUT$Flags$LAYOUT_; }

    static final VarHandle _SD_GLOBAL_CHANGE_INPUT$Flags$VH_ = _SD_GLOBAL_CHANGE_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SD_GLOBAL_CHANGE_INPUT$Flags$VH() { return _SD_GLOBAL_CHANGE_INPUT$Flags$VH_; }

    static final MemoryLayout _SD_GLOBAL_CHANGE_INPUT$ChangeType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_GLOBAL_CHANGE_INPUT$ChangeType$LAYOUT() { return _SD_GLOBAL_CHANGE_INPUT$ChangeType$LAYOUT_; }

    static final VarHandle _SD_GLOBAL_CHANGE_INPUT$ChangeType$VH_ = _SD_GLOBAL_CHANGE_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ChangeType"));
    static final java.lang.invoke.VarHandle _SD_GLOBAL_CHANGE_INPUT$ChangeType$VH() { return _SD_GLOBAL_CHANGE_INPUT$ChangeType$VH_; }

    static final MemoryLayout _SD_GLOBAL_CHANGE_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("ChangeType"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("NumSDChangedSuccess"),
            C_LONGLONG.withName("NumSDChangedFail"),
            C_LONGLONG.withName("NumSDUnused"),
            C_LONGLONG.withName("NumSDTotal"),
            C_LONGLONG.withName("NumMftSDChangedSuccess"),
            C_LONGLONG.withName("NumMftSDChangedFail"),
            C_LONGLONG.withName("NumMftSDTotal")
        ).withName("SdChange"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("SdsStreamSize"),
            C_LONGLONG.withName("SdsAllocationSize"),
            C_LONGLONG.withName("SiiStreamSize"),
            C_LONGLONG.withName("SiiAllocationSize"),
            C_LONGLONG.withName("SdhStreamSize"),
            C_LONGLONG.withName("SdhAllocationSize"),
            C_LONGLONG.withName("NumSDTotal"),
            C_LONGLONG.withName("NumSDUnused")
        ).withName("SdQueryStats"),
        MemoryLayout.ofStruct(
            C_LONGLONG.withName("NextOffset"),
            C_LONGLONG.withName("NumSDEntriesReturned"),
            C_LONGLONG.withName("NumSDBytesReturned"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                C_LONG.withName("Hash"),
                C_LONG.withName("SecurityId"),
                C_LONGLONG.withName("Offset"),
                C_LONG.withName("Length"),
                MemoryLayout.ofSequence(1, C_CHAR).withName("Descriptor"),
                MemoryLayout.ofPaddingBits(24)
            ).withName("_SD_ENUM_SDS_ENTRY")).withName("SDEntry")
        ).withName("SdEnumSds")
    ).withName("_SD_GLOBAL_CHANGE_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _SD_GLOBAL_CHANGE_OUTPUT$struct$LAYOUT() { return _SD_GLOBAL_CHANGE_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _SD_GLOBAL_CHANGE_OUTPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_GLOBAL_CHANGE_OUTPUT$Flags$LAYOUT() { return _SD_GLOBAL_CHANGE_OUTPUT$Flags$LAYOUT_; }

    static final VarHandle _SD_GLOBAL_CHANGE_OUTPUT$Flags$VH_ = _SD_GLOBAL_CHANGE_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SD_GLOBAL_CHANGE_OUTPUT$Flags$VH() { return _SD_GLOBAL_CHANGE_OUTPUT$Flags$VH_; }

    static final MemoryLayout _SD_GLOBAL_CHANGE_OUTPUT$ChangeType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SD_GLOBAL_CHANGE_OUTPUT$ChangeType$LAYOUT() { return _SD_GLOBAL_CHANGE_OUTPUT$ChangeType$LAYOUT_; }

    static final VarHandle _SD_GLOBAL_CHANGE_OUTPUT$ChangeType$VH_ = _SD_GLOBAL_CHANGE_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ChangeType"));
    static final java.lang.invoke.VarHandle _SD_GLOBAL_CHANGE_OUTPUT$ChangeType$VH() { return _SD_GLOBAL_CHANGE_OUTPUT$ChangeType$VH_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("NumberOfClusters"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER")).withName("Cluster")
    ).withName("_LOOKUP_STREAM_FROM_CLUSTER_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_INPUT$struct$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_INPUT$Flags$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_INPUT$Flags$LAYOUT_; }

    static final VarHandle _LOOKUP_STREAM_FROM_CLUSTER_INPUT$Flags$VH_ = _LOOKUP_STREAM_FROM_CLUSTER_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _LOOKUP_STREAM_FROM_CLUSTER_INPUT$Flags$VH() { return _LOOKUP_STREAM_FROM_CLUSTER_INPUT$Flags$VH_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_INPUT$NumberOfClusters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_INPUT$NumberOfClusters$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_INPUT$NumberOfClusters$LAYOUT_; }

    static final VarHandle _LOOKUP_STREAM_FROM_CLUSTER_INPUT$NumberOfClusters$VH_ = _LOOKUP_STREAM_FROM_CLUSTER_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfClusters"));
    static final java.lang.invoke.VarHandle _LOOKUP_STREAM_FROM_CLUSTER_INPUT$NumberOfClusters$VH() { return _LOOKUP_STREAM_FROM_CLUSTER_INPUT$NumberOfClusters$VH_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Offset"),
        C_LONG.withName("NumberOfMatches"),
        C_LONG.withName("BufferSizeRequired")
    ).withName("_LOOKUP_STREAM_FROM_CLUSTER_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$struct$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$Offset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$Offset$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$Offset$LAYOUT_; }

    static final VarHandle _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$Offset$VH_ = _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$Offset$VH() { return _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$Offset$VH_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$NumberOfMatches$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$NumberOfMatches$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$NumberOfMatches$LAYOUT_; }

    static final VarHandle _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$NumberOfMatches$VH_ = _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfMatches"));
    static final java.lang.invoke.VarHandle _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$NumberOfMatches$VH() { return _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$NumberOfMatches$VH_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$BufferSizeRequired$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$BufferSizeRequired$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$BufferSizeRequired$LAYOUT_; }

    static final VarHandle _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$BufferSizeRequired$VH_ = _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BufferSizeRequired"));
    static final java.lang.invoke.VarHandle _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$BufferSizeRequired$VH() { return _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT$BufferSizeRequired$VH_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("OffsetToNext"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Reserved"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("Cluster"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(48)
    ).withName("_LOOKUP_STREAM_FROM_CLUSTER_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$struct$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$OffsetToNext$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$OffsetToNext$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$OffsetToNext$LAYOUT_; }

    static final VarHandle _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$OffsetToNext$VH_ = _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OffsetToNext"));
    static final java.lang.invoke.VarHandle _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$OffsetToNext$VH() { return _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$OffsetToNext$VH_; }

    static final MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$Flags$LAYOUT() { return _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$Flags$LAYOUT_; }

    static final VarHandle _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$Flags$VH_ = _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$Flags$VH() { return _LOOKUP_STREAM_FROM_CLUSTER_ENTRY$Flags$VH_; }

    static final MemoryLayout _FILE_TYPE_NOTIFICATION_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("NumFileTypeIDs"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("_GUID")).withName("FileTypeID")
    ).withName("_FILE_TYPE_NOTIFICATION_INPUT");
    static final jdk.incubator.foreign.MemoryLayout _FILE_TYPE_NOTIFICATION_INPUT$struct$LAYOUT() { return _FILE_TYPE_NOTIFICATION_INPUT$struct$LAYOUT_; }

    static final MemoryLayout _FILE_TYPE_NOTIFICATION_INPUT$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_TYPE_NOTIFICATION_INPUT$Flags$LAYOUT() { return _FILE_TYPE_NOTIFICATION_INPUT$Flags$LAYOUT_; }

    static final VarHandle _FILE_TYPE_NOTIFICATION_INPUT$Flags$VH_ = _FILE_TYPE_NOTIFICATION_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _FILE_TYPE_NOTIFICATION_INPUT$Flags$VH() { return _FILE_TYPE_NOTIFICATION_INPUT$Flags$VH_; }

    static final MemoryLayout _FILE_TYPE_NOTIFICATION_INPUT$NumFileTypeIDs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_TYPE_NOTIFICATION_INPUT$NumFileTypeIDs$LAYOUT() { return _FILE_TYPE_NOTIFICATION_INPUT$NumFileTypeIDs$LAYOUT_; }

    static final VarHandle _FILE_TYPE_NOTIFICATION_INPUT$NumFileTypeIDs$VH_ = _FILE_TYPE_NOTIFICATION_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumFileTypeIDs"));
    static final java.lang.invoke.VarHandle _FILE_TYPE_NOTIFICATION_INPUT$NumFileTypeIDs$VH() { return _FILE_TYPE_NOTIFICATION_INPUT$NumFileTypeIDs$VH_; }

    static final MemoryLayout FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$LAYOUT() { return FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$LAYOUT_; }

    static final MemorySegment FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE", FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$SEGMENT() { return FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE$SEGMENT_; }

    static final MemoryLayout FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$LAYOUT() { return FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$LAYOUT_; }

    static final MemorySegment FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE", FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$SEGMENT() { return FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE$SEGMENT_; }

    static final MemoryLayout FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$LAYOUT() { return FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$LAYOUT_; }

    static final MemorySegment FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE", FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$SEGMENT() { return FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE$SEGMENT_; }

    static final MemoryLayout _CSV_MGMT_LOCK$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags")
    ).withName("_CSV_MGMT_LOCK");
    static final jdk.incubator.foreign.MemoryLayout _CSV_MGMT_LOCK$struct$LAYOUT() { return _CSV_MGMT_LOCK$struct$LAYOUT_; }

    static final MemoryLayout _CSV_MGMT_LOCK$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_MGMT_LOCK$Flags$LAYOUT() { return _CSV_MGMT_LOCK$Flags$LAYOUT_; }

    static final VarHandle _CSV_MGMT_LOCK$Flags$VH_ = _CSV_MGMT_LOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CSV_MGMT_LOCK$Flags$VH() { return _CSV_MGMT_LOCK$Flags$VH_; }

    static final MemoryLayout _CSV_NAMESPACE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("DeviceNumber"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("StartingOffset"),
        C_LONG.withName("SectorSize"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CSV_NAMESPACE_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CSV_NAMESPACE_INFO$struct$LAYOUT() { return _CSV_NAMESPACE_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CSV_NAMESPACE_INFO$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_NAMESPACE_INFO$Version$LAYOUT() { return _CSV_NAMESPACE_INFO$Version$LAYOUT_; }

    static final VarHandle _CSV_NAMESPACE_INFO$Version$VH_ = _CSV_NAMESPACE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _CSV_NAMESPACE_INFO$Version$VH() { return _CSV_NAMESPACE_INFO$Version$VH_; }

    static final MemoryLayout _CSV_NAMESPACE_INFO$DeviceNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_NAMESPACE_INFO$DeviceNumber$LAYOUT() { return _CSV_NAMESPACE_INFO$DeviceNumber$LAYOUT_; }

    static final VarHandle _CSV_NAMESPACE_INFO$DeviceNumber$VH_ = _CSV_NAMESPACE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeviceNumber"));
    static final java.lang.invoke.VarHandle _CSV_NAMESPACE_INFO$DeviceNumber$VH() { return _CSV_NAMESPACE_INFO$DeviceNumber$VH_; }

    static final MemoryLayout _CSV_NAMESPACE_INFO$SectorSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_NAMESPACE_INFO$SectorSize$LAYOUT() { return _CSV_NAMESPACE_INFO$SectorSize$LAYOUT_; }

    static final VarHandle _CSV_NAMESPACE_INFO$SectorSize$VH_ = _CSV_NAMESPACE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectorSize"));
    static final java.lang.invoke.VarHandle _CSV_NAMESPACE_INFO$SectorSize$VH() { return _CSV_NAMESPACE_INFO$SectorSize$VH_; }

    static final int CsvControlStartRedirectFile() { return (int)2L; }

    static final int CsvControlStopRedirectFile() { return (int)3L; }

    static final int CsvControlQueryRedirectState() { return (int)4L; }

    static final int CsvControlQueryFileRevision() { return (int)6L; }

    static final int CsvControlQueryMdsPath() { return (int)8L; }

    static final int CsvControlQueryFileRevisionFileId128() { return (int)9L; }

    static final int CsvControlQueryVolumeRedirectState() { return (int)10L; }

    static final int CsvControlEnableUSNRangeModificationTracking() { return (int)13L; }

    static final int CsvControlMarkHandleLocalVolumeMount() { return (int)14L; }

    static final int CsvControlUnmarkHandleLocalVolumeMount() { return (int)15L; }

    static final int CsvControlGetCsvFsMdsPathV2() { return (int)18L; }

    static final int CsvControlDisableCaching() { return (int)19L; }

    static final int CsvControlEnableCaching() { return (int)20L; }

    static final int CsvControlStartForceDFO() { return (int)21L; }

    static final int CsvControlStopForceDFO() { return (int)22L; }

    static final MemoryLayout _CSV_CONTROL_PARAM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Operation"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("Unused")
    ).withName("_CSV_CONTROL_PARAM");
    static final jdk.incubator.foreign.MemoryLayout _CSV_CONTROL_PARAM$struct$LAYOUT() { return _CSV_CONTROL_PARAM$struct$LAYOUT_; }

    static final MemoryLayout _CSV_CONTROL_PARAM$Operation$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CSV_CONTROL_PARAM$Operation$LAYOUT() { return _CSV_CONTROL_PARAM$Operation$LAYOUT_; }

    static final VarHandle _CSV_CONTROL_PARAM$Operation$VH_ = _CSV_CONTROL_PARAM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Operation"));
    static final java.lang.invoke.VarHandle _CSV_CONTROL_PARAM$Operation$VH() { return _CSV_CONTROL_PARAM$Operation$VH_; }

    static final MemoryLayout _CSV_CONTROL_PARAM$Unused$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_CONTROL_PARAM$Unused$LAYOUT() { return _CSV_CONTROL_PARAM$Unused$LAYOUT_; }

    static final VarHandle _CSV_CONTROL_PARAM$Unused$VH_ = _CSV_CONTROL_PARAM$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Unused"));
    static final java.lang.invoke.VarHandle _CSV_CONTROL_PARAM$Unused$VH() { return _CSV_CONTROL_PARAM$Unused$VH_; }

    static final MemoryLayout _CSV_QUERY_REDIRECT_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("MdsNodeId"),
        C_LONG.withName("DsNodeId"),
        C_CHAR.withName("FileRedirected"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("_CSV_QUERY_REDIRECT_STATE");
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_REDIRECT_STATE$struct$LAYOUT() { return _CSV_QUERY_REDIRECT_STATE$struct$LAYOUT_; }

    static final MemoryLayout _CSV_QUERY_REDIRECT_STATE$MdsNodeId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_REDIRECT_STATE$MdsNodeId$LAYOUT() { return _CSV_QUERY_REDIRECT_STATE$MdsNodeId$LAYOUT_; }

    static final VarHandle _CSV_QUERY_REDIRECT_STATE$MdsNodeId$VH_ = _CSV_QUERY_REDIRECT_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MdsNodeId"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_REDIRECT_STATE$MdsNodeId$VH() { return _CSV_QUERY_REDIRECT_STATE$MdsNodeId$VH_; }

    static final MemoryLayout _CSV_QUERY_REDIRECT_STATE$DsNodeId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_REDIRECT_STATE$DsNodeId$LAYOUT() { return _CSV_QUERY_REDIRECT_STATE$DsNodeId$LAYOUT_; }

    static final VarHandle _CSV_QUERY_REDIRECT_STATE$DsNodeId$VH_ = _CSV_QUERY_REDIRECT_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DsNodeId"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_REDIRECT_STATE$DsNodeId$VH() { return _CSV_QUERY_REDIRECT_STATE$DsNodeId$VH_; }

    static final MemoryLayout _CSV_QUERY_REDIRECT_STATE$FileRedirected$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_REDIRECT_STATE$FileRedirected$LAYOUT() { return _CSV_QUERY_REDIRECT_STATE$FileRedirected$LAYOUT_; }

    static final VarHandle _CSV_QUERY_REDIRECT_STATE$FileRedirected$VH_ = _CSV_QUERY_REDIRECT_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("FileRedirected"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_REDIRECT_STATE$FileRedirected$VH() { return _CSV_QUERY_REDIRECT_STATE$FileRedirected$VH_; }

    static final MemoryLayout _CSV_QUERY_FILE_REVISION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("FileId"),
        MemoryLayout.ofSequence(3, C_LONGLONG).withName("FileRevision")
    ).withName("_CSV_QUERY_FILE_REVISION");
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_FILE_REVISION$struct$LAYOUT() { return _CSV_QUERY_FILE_REVISION$struct$LAYOUT_; }

    static final MemoryLayout _CSV_QUERY_FILE_REVISION$FileId$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_FILE_REVISION$FileId$LAYOUT() { return _CSV_QUERY_FILE_REVISION$FileId$LAYOUT_; }

    static final VarHandle _CSV_QUERY_FILE_REVISION$FileId$VH_ = _CSV_QUERY_FILE_REVISION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileId"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_FILE_REVISION$FileId$VH() { return _CSV_QUERY_FILE_REVISION$FileId$VH_; }

    static final MemoryLayout _CSV_QUERY_FILE_REVISION_FILE_ID_128$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
        ).withName("FileId"),
        MemoryLayout.ofSequence(3, C_LONGLONG).withName("FileRevision")
    ).withName("_CSV_QUERY_FILE_REVISION_FILE_ID_128");
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_FILE_REVISION_FILE_ID_128$struct$LAYOUT() { return _CSV_QUERY_FILE_REVISION_FILE_ID_128$struct$LAYOUT_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("MdsNodeId"),
        C_LONG.withName("DsNodeId"),
        C_LONG.withName("PathLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("Path"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("_CSV_QUERY_MDS_PATH");
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH$struct$LAYOUT() { return _CSV_QUERY_MDS_PATH$struct$LAYOUT_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH$MdsNodeId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH$MdsNodeId$LAYOUT() { return _CSV_QUERY_MDS_PATH$MdsNodeId$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH$MdsNodeId$VH_ = _CSV_QUERY_MDS_PATH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MdsNodeId"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH$MdsNodeId$VH() { return _CSV_QUERY_MDS_PATH$MdsNodeId$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH$DsNodeId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH$DsNodeId$LAYOUT() { return _CSV_QUERY_MDS_PATH$DsNodeId$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH$DsNodeId$VH_ = _CSV_QUERY_MDS_PATH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DsNodeId"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH$DsNodeId$VH() { return _CSV_QUERY_MDS_PATH$DsNodeId$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH$PathLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH$PathLength$LAYOUT() { return _CSV_QUERY_MDS_PATH$PathLength$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH$PathLength$VH_ = _CSV_QUERY_MDS_PATH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PathLength"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH$PathLength$VH() { return _CSV_QUERY_MDS_PATH$PathLength$VH_; }

    static final int CsvFsDiskConnectivityNone() { return (int)0L; }

    static final int CsvFsDiskConnectivityMdsNodeOnly() { return (int)1L; }

    static final int CsvFsDiskConnectivitySubsetOfNodes() { return (int)2L; }

    static final int CsvFsDiskConnectivityAllNodes() { return (int)3L; }

    static final MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("MdsNodeId"),
        C_LONG.withName("DsNodeId"),
        C_CHAR.withName("IsDiskConnected"),
        C_CHAR.withName("ClusterEnableDirectIo"),
        MemoryLayout.ofPaddingBits(16),
        C_INT.withName("DiskConnectivity")
    ).withName("_CSV_QUERY_VOLUME_REDIRECT_STATE");
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$struct$LAYOUT() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$struct$LAYOUT_; }

    static final MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$MdsNodeId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$MdsNodeId$LAYOUT() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$MdsNodeId$LAYOUT_; }

    static final VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$MdsNodeId$VH_ = _CSV_QUERY_VOLUME_REDIRECT_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MdsNodeId"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$MdsNodeId$VH() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$MdsNodeId$VH_; }

    static final MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$DsNodeId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$DsNodeId$LAYOUT() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$DsNodeId$LAYOUT_; }

    static final VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$DsNodeId$VH_ = _CSV_QUERY_VOLUME_REDIRECT_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DsNodeId"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$DsNodeId$VH() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$DsNodeId$VH_; }

    static final MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$IsDiskConnected$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$IsDiskConnected$LAYOUT() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$IsDiskConnected$LAYOUT_; }

    static final VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$IsDiskConnected$VH_ = _CSV_QUERY_VOLUME_REDIRECT_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("IsDiskConnected"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$IsDiskConnected$VH() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$IsDiskConnected$VH_; }

    static final MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$ClusterEnableDirectIo$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$ClusterEnableDirectIo$LAYOUT() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$ClusterEnableDirectIo$LAYOUT_; }

    static final VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$ClusterEnableDirectIo$VH_ = _CSV_QUERY_VOLUME_REDIRECT_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ClusterEnableDirectIo"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$ClusterEnableDirectIo$VH() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$ClusterEnableDirectIo$VH_; }

    static final MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$DiskConnectivity$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_VOLUME_REDIRECT_STATE$DiskConnectivity$LAYOUT() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$DiskConnectivity$LAYOUT_; }

    static final VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$DiskConnectivity$VH_ = _CSV_QUERY_VOLUME_REDIRECT_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DiskConnectivity"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_VOLUME_REDIRECT_STATE$DiskConnectivity$VH() { return _CSV_QUERY_VOLUME_REDIRECT_STATE$DiskConnectivity$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Version"),
        C_LONG.withName("RequiredSize"),
        C_LONG.withName("MdsNodeId"),
        C_LONG.withName("DsNodeId"),
        C_LONG.withName("Flags"),
        C_INT.withName("DiskConnectivity"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("VolumeId"),
        C_LONG.withName("IpAddressOffset"),
        C_LONG.withName("IpAddressLength"),
        C_LONG.withName("PathOffset"),
        C_LONG.withName("PathLength"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_CSV_QUERY_MDS_PATH_V2");
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$Version$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$Version$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$Version$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$Version$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$Version$VH() { return _CSV_QUERY_MDS_PATH_V2$Version$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$RequiredSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$RequiredSize$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$RequiredSize$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$RequiredSize$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RequiredSize"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$RequiredSize$VH() { return _CSV_QUERY_MDS_PATH_V2$RequiredSize$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$MdsNodeId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$MdsNodeId$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$MdsNodeId$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$MdsNodeId$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MdsNodeId"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$MdsNodeId$VH() { return _CSV_QUERY_MDS_PATH_V2$MdsNodeId$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$DsNodeId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$DsNodeId$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$DsNodeId$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$DsNodeId$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DsNodeId"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$DsNodeId$VH() { return _CSV_QUERY_MDS_PATH_V2$DsNodeId$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$Flags$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$Flags$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$Flags$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$Flags$VH() { return _CSV_QUERY_MDS_PATH_V2$Flags$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$DiskConnectivity$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$DiskConnectivity$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$DiskConnectivity$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$DiskConnectivity$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DiskConnectivity"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$DiskConnectivity$VH() { return _CSV_QUERY_MDS_PATH_V2$DiskConnectivity$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$IpAddressOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$IpAddressOffset$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$IpAddressOffset$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$IpAddressOffset$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IpAddressOffset"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$IpAddressOffset$VH() { return _CSV_QUERY_MDS_PATH_V2$IpAddressOffset$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$IpAddressLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$IpAddressLength$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$IpAddressLength$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$IpAddressLength$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("IpAddressLength"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$IpAddressLength$VH() { return _CSV_QUERY_MDS_PATH_V2$IpAddressLength$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$PathOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$PathOffset$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$PathOffset$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$PathOffset$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PathOffset"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$PathOffset$VH() { return _CSV_QUERY_MDS_PATH_V2$PathOffset$VH_; }

    static final MemoryLayout _CSV_QUERY_MDS_PATH_V2$PathLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_MDS_PATH_V2$PathLength$LAYOUT() { return _CSV_QUERY_MDS_PATH_V2$PathLength$LAYOUT_; }

    static final VarHandle _CSV_QUERY_MDS_PATH_V2$PathLength$VH_ = _CSV_QUERY_MDS_PATH_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PathLength"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_MDS_PATH_V2$PathLength$VH() { return _CSV_QUERY_MDS_PATH_V2$PathLength$VH_; }

    static final MemoryLayout _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("VetoedFromAltitudeIntegral"),
        C_LONGLONG.withName("VetoedFromAltitudeDecimal"),
        MemoryLayout.ofSequence(256, C_SHORT).withName("Reason")
    ).withName("_CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$struct$LAYOUT() { return _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeIntegral$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeIntegral$LAYOUT() { return _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeIntegral$LAYOUT_; }

    static final VarHandle _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeIntegral$VH_ = _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VetoedFromAltitudeIntegral"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeIntegral$VH() { return _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeIntegral$VH_; }

    static final MemoryLayout _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeDecimal$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeDecimal$LAYOUT() { return _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeDecimal$LAYOUT_; }

    static final VarHandle _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeDecimal$VH_ = _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VetoedFromAltitudeDecimal"));
    static final java.lang.invoke.VarHandle _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeDecimal$VH() { return _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT$VetoedFromAltitudeDecimal$VH_; }

    static final int StorageReserveIdNone() { return (int)0L; }

    static final int StorageReserveIdHard() { return (int)1L; }

    static final int StorageReserveIdSoft() { return (int)2L; }

    static final int StorageReserveIdUpdateScratch() { return (int)3L; }

    static final int StorageReserveIdMax() { return (int)4L; }

    static final MemoryLayout _CSV_IS_OWNED_BY_CSVFS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("OwnedByCSVFS")
    ).withName("_CSV_IS_OWNED_BY_CSVFS");
    static final jdk.incubator.foreign.MemoryLayout _CSV_IS_OWNED_BY_CSVFS$struct$LAYOUT() { return _CSV_IS_OWNED_BY_CSVFS$struct$LAYOUT_; }

    static final MemoryLayout _CSV_IS_OWNED_BY_CSVFS$OwnedByCSVFS$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _CSV_IS_OWNED_BY_CSVFS$OwnedByCSVFS$LAYOUT() { return _CSV_IS_OWNED_BY_CSVFS$OwnedByCSVFS$LAYOUT_; }

    static final VarHandle _CSV_IS_OWNED_BY_CSVFS$OwnedByCSVFS$VH_ = _CSV_IS_OWNED_BY_CSVFS$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("OwnedByCSVFS"));
    static final java.lang.invoke.VarHandle _CSV_IS_OWNED_BY_CSVFS$OwnedByCSVFS$VH() { return _CSV_IS_OWNED_BY_CSVFS$OwnedByCSVFS$VH_; }

    static final MemoryLayout _FILE_LEVEL_TRIM_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("Length")
    ).withName("_FILE_LEVEL_TRIM_RANGE");
    static final jdk.incubator.foreign.MemoryLayout _FILE_LEVEL_TRIM_RANGE$struct$LAYOUT() { return _FILE_LEVEL_TRIM_RANGE$struct$LAYOUT_; }

    static final MemoryLayout _FILE_LEVEL_TRIM_RANGE$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LEVEL_TRIM_RANGE$Offset$LAYOUT() { return _FILE_LEVEL_TRIM_RANGE$Offset$LAYOUT_; }

    static final VarHandle _FILE_LEVEL_TRIM_RANGE$Offset$VH_ = _FILE_LEVEL_TRIM_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle _FILE_LEVEL_TRIM_RANGE$Offset$VH() { return _FILE_LEVEL_TRIM_RANGE$Offset$VH_; }

    static final MemoryLayout _FILE_LEVEL_TRIM_RANGE$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LEVEL_TRIM_RANGE$Length$LAYOUT() { return _FILE_LEVEL_TRIM_RANGE$Length$LAYOUT_; }

    static final VarHandle _FILE_LEVEL_TRIM_RANGE$Length$VH_ = _FILE_LEVEL_TRIM_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _FILE_LEVEL_TRIM_RANGE$Length$VH() { return _FILE_LEVEL_TRIM_RANGE$Length$VH_; }

    static final MemoryLayout _FILE_LEVEL_TRIM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Key"),
        C_LONG.withName("NumRanges"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Offset"),
            C_LONGLONG.withName("Length")
        ).withName("_FILE_LEVEL_TRIM_RANGE")).withName("Ranges")
    ).withName("_FILE_LEVEL_TRIM");
    static final jdk.incubator.foreign.MemoryLayout _FILE_LEVEL_TRIM$struct$LAYOUT() { return _FILE_LEVEL_TRIM$struct$LAYOUT_; }

    static final MemoryLayout _FILE_LEVEL_TRIM$Key$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LEVEL_TRIM$Key$LAYOUT() { return _FILE_LEVEL_TRIM$Key$LAYOUT_; }

    static final VarHandle _FILE_LEVEL_TRIM$Key$VH_ = _FILE_LEVEL_TRIM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Key"));
    static final java.lang.invoke.VarHandle _FILE_LEVEL_TRIM$Key$VH() { return _FILE_LEVEL_TRIM$Key$VH_; }

    static final MemoryLayout _FILE_LEVEL_TRIM$NumRanges$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LEVEL_TRIM$NumRanges$LAYOUT() { return _FILE_LEVEL_TRIM$NumRanges$LAYOUT_; }

    static final VarHandle _FILE_LEVEL_TRIM$NumRanges$VH_ = _FILE_LEVEL_TRIM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumRanges"));
    static final java.lang.invoke.VarHandle _FILE_LEVEL_TRIM$NumRanges$VH() { return _FILE_LEVEL_TRIM$NumRanges$VH_; }

    static final MemoryLayout _FILE_LEVEL_TRIM_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumRangesProcessed")
    ).withName("_FILE_LEVEL_TRIM_OUTPUT");
    static final jdk.incubator.foreign.MemoryLayout _FILE_LEVEL_TRIM_OUTPUT$struct$LAYOUT() { return _FILE_LEVEL_TRIM_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout _FILE_LEVEL_TRIM_OUTPUT$NumRangesProcessed$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_LEVEL_TRIM_OUTPUT$NumRangesProcessed$LAYOUT() { return _FILE_LEVEL_TRIM_OUTPUT$NumRangesProcessed$LAYOUT_; }

    static final VarHandle _FILE_LEVEL_TRIM_OUTPUT$NumRangesProcessed$VH_ = _FILE_LEVEL_TRIM_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumRangesProcessed"));
    static final java.lang.invoke.VarHandle _FILE_LEVEL_TRIM_OUTPUT$NumRangesProcessed$VH() { return _FILE_LEVEL_TRIM_OUTPUT$NumRangesProcessed$VH_; }

    static final int QUERY_FILE_LAYOUT_FILTER_TYPE_NONE() { return (int)0L; }

    static final int QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS() { return (int)1L; }

    static final int QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID() { return (int)2L; }

    static final int QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID() { return (int)3L; }

    static final int QUERY_FILE_LAYOUT_NUM_FILTER_TYPES() { return (int)4L; }

}

