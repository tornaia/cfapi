// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$64 extends cfapi_h$constants$63 {

    /* package-private */ cfapi_h$constants$64() {}
    static final MemoryLayout FIND_BY_SID_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NextEntryOffset"),
        C_LONG.withName("FileIndex"),
        C_LONG.withName("FileNameLength"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    );
    static final jdk.incubator.foreign.MemoryLayout FIND_BY_SID_OUTPUT$struct$LAYOUT() { return FIND_BY_SID_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout FIND_BY_SID_OUTPUT$NextEntryOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout FIND_BY_SID_OUTPUT$NextEntryOffset$LAYOUT() { return FIND_BY_SID_OUTPUT$NextEntryOffset$LAYOUT_; }

    static final VarHandle FIND_BY_SID_OUTPUT$NextEntryOffset$VH_ = FIND_BY_SID_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NextEntryOffset"));
    static final java.lang.invoke.VarHandle FIND_BY_SID_OUTPUT$NextEntryOffset$VH() { return FIND_BY_SID_OUTPUT$NextEntryOffset$VH_; }

    static final MemoryLayout FIND_BY_SID_OUTPUT$FileIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout FIND_BY_SID_OUTPUT$FileIndex$LAYOUT() { return FIND_BY_SID_OUTPUT$FileIndex$LAYOUT_; }

    static final VarHandle FIND_BY_SID_OUTPUT$FileIndex$VH_ = FIND_BY_SID_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileIndex"));
    static final java.lang.invoke.VarHandle FIND_BY_SID_OUTPUT$FileIndex$VH() { return FIND_BY_SID_OUTPUT$FileIndex$VH_; }

    static final MemoryLayout FIND_BY_SID_OUTPUT$FileNameLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout FIND_BY_SID_OUTPUT$FileNameLength$LAYOUT() { return FIND_BY_SID_OUTPUT$FileNameLength$LAYOUT_; }

    static final VarHandle FIND_BY_SID_OUTPUT$FileNameLength$VH_ = FIND_BY_SID_OUTPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    static final java.lang.invoke.VarHandle FIND_BY_SID_OUTPUT$FileNameLength$VH() { return FIND_BY_SID_OUTPUT$FileNameLength$VH_; }

    static final MemoryLayout MFT_ENUM_DATA_V0$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartFileReferenceNumber"),
        C_LONGLONG.withName("LowUsn"),
        C_LONGLONG.withName("HighUsn")
    );
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V0$struct$LAYOUT() { return MFT_ENUM_DATA_V0$struct$LAYOUT_; }

    static final MemoryLayout MFT_ENUM_DATA_V0$StartFileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V0$StartFileReferenceNumber$LAYOUT() { return MFT_ENUM_DATA_V0$StartFileReferenceNumber$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA_V0$StartFileReferenceNumber$VH_ = MFT_ENUM_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartFileReferenceNumber"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA_V0$StartFileReferenceNumber$VH() { return MFT_ENUM_DATA_V0$StartFileReferenceNumber$VH_; }

    static final MemoryLayout MFT_ENUM_DATA_V0$LowUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V0$LowUsn$LAYOUT() { return MFT_ENUM_DATA_V0$LowUsn$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA_V0$LowUsn$VH_ = MFT_ENUM_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowUsn"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA_V0$LowUsn$VH() { return MFT_ENUM_DATA_V0$LowUsn$VH_; }

    static final MemoryLayout MFT_ENUM_DATA_V0$HighUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V0$HighUsn$LAYOUT() { return MFT_ENUM_DATA_V0$HighUsn$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA_V0$HighUsn$VH_ = MFT_ENUM_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighUsn"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA_V0$HighUsn$VH() { return MFT_ENUM_DATA_V0$HighUsn$VH_; }

    static final MemoryLayout MFT_ENUM_DATA_V1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartFileReferenceNumber"),
        C_LONGLONG.withName("LowUsn"),
        C_LONGLONG.withName("HighUsn"),
        C_SHORT.withName("MinMajorVersion"),
        C_SHORT.withName("MaxMajorVersion"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V1$struct$LAYOUT() { return MFT_ENUM_DATA_V1$struct$LAYOUT_; }

    static final MemoryLayout MFT_ENUM_DATA_V1$StartFileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V1$StartFileReferenceNumber$LAYOUT() { return MFT_ENUM_DATA_V1$StartFileReferenceNumber$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA_V1$StartFileReferenceNumber$VH_ = MFT_ENUM_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartFileReferenceNumber"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA_V1$StartFileReferenceNumber$VH() { return MFT_ENUM_DATA_V1$StartFileReferenceNumber$VH_; }

    static final MemoryLayout MFT_ENUM_DATA_V1$LowUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V1$LowUsn$LAYOUT() { return MFT_ENUM_DATA_V1$LowUsn$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA_V1$LowUsn$VH_ = MFT_ENUM_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowUsn"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA_V1$LowUsn$VH() { return MFT_ENUM_DATA_V1$LowUsn$VH_; }

    static final MemoryLayout MFT_ENUM_DATA_V1$HighUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V1$HighUsn$LAYOUT() { return MFT_ENUM_DATA_V1$HighUsn$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA_V1$HighUsn$VH_ = MFT_ENUM_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighUsn"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA_V1$HighUsn$VH() { return MFT_ENUM_DATA_V1$HighUsn$VH_; }

    static final MemoryLayout MFT_ENUM_DATA_V1$MinMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V1$MinMajorVersion$LAYOUT() { return MFT_ENUM_DATA_V1$MinMajorVersion$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA_V1$MinMajorVersion$VH_ = MFT_ENUM_DATA_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinMajorVersion"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA_V1$MinMajorVersion$VH() { return MFT_ENUM_DATA_V1$MinMajorVersion$VH_; }

    static final MemoryLayout MFT_ENUM_DATA_V1$MaxMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA_V1$MaxMajorVersion$LAYOUT() { return MFT_ENUM_DATA_V1$MaxMajorVersion$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA_V1$MaxMajorVersion$VH_ = MFT_ENUM_DATA_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxMajorVersion"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA_V1$MaxMajorVersion$VH() { return MFT_ENUM_DATA_V1$MaxMajorVersion$VH_; }

    static final MemoryLayout MFT_ENUM_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartFileReferenceNumber"),
        C_LONGLONG.withName("LowUsn"),
        C_LONGLONG.withName("HighUsn"),
        C_SHORT.withName("MinMajorVersion"),
        C_SHORT.withName("MaxMajorVersion"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA$struct$LAYOUT() { return MFT_ENUM_DATA$struct$LAYOUT_; }

    static final MemoryLayout MFT_ENUM_DATA$StartFileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA$StartFileReferenceNumber$LAYOUT() { return MFT_ENUM_DATA$StartFileReferenceNumber$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA$StartFileReferenceNumber$VH_ = MFT_ENUM_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartFileReferenceNumber"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA$StartFileReferenceNumber$VH() { return MFT_ENUM_DATA$StartFileReferenceNumber$VH_; }

    static final MemoryLayout MFT_ENUM_DATA$LowUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA$LowUsn$LAYOUT() { return MFT_ENUM_DATA$LowUsn$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA$LowUsn$VH_ = MFT_ENUM_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowUsn"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA$LowUsn$VH() { return MFT_ENUM_DATA$LowUsn$VH_; }

    static final MemoryLayout MFT_ENUM_DATA$HighUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA$HighUsn$LAYOUT() { return MFT_ENUM_DATA$HighUsn$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA$HighUsn$VH_ = MFT_ENUM_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("HighUsn"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA$HighUsn$VH() { return MFT_ENUM_DATA$HighUsn$VH_; }

    static final MemoryLayout MFT_ENUM_DATA$MinMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA$MinMajorVersion$LAYOUT() { return MFT_ENUM_DATA$MinMajorVersion$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA$MinMajorVersion$VH_ = MFT_ENUM_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinMajorVersion"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA$MinMajorVersion$VH() { return MFT_ENUM_DATA$MinMajorVersion$VH_; }

    static final MemoryLayout MFT_ENUM_DATA$MaxMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout MFT_ENUM_DATA$MaxMajorVersion$LAYOUT() { return MFT_ENUM_DATA$MaxMajorVersion$LAYOUT_; }

    static final VarHandle MFT_ENUM_DATA$MaxMajorVersion$VH_ = MFT_ENUM_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxMajorVersion"));
    static final java.lang.invoke.VarHandle MFT_ENUM_DATA$MaxMajorVersion$VH() { return MFT_ENUM_DATA$MaxMajorVersion$VH_; }

    static final MemoryLayout CREATE_USN_JOURNAL_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaximumSize"),
        C_LONGLONG.withName("AllocationDelta")
    );
    static final jdk.incubator.foreign.MemoryLayout CREATE_USN_JOURNAL_DATA$struct$LAYOUT() { return CREATE_USN_JOURNAL_DATA$struct$LAYOUT_; }

    static final MemoryLayout CREATE_USN_JOURNAL_DATA$MaximumSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout CREATE_USN_JOURNAL_DATA$MaximumSize$LAYOUT() { return CREATE_USN_JOURNAL_DATA$MaximumSize$LAYOUT_; }

    static final VarHandle CREATE_USN_JOURNAL_DATA$MaximumSize$VH_ = CREATE_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumSize"));
    static final java.lang.invoke.VarHandle CREATE_USN_JOURNAL_DATA$MaximumSize$VH() { return CREATE_USN_JOURNAL_DATA$MaximumSize$VH_; }

    static final MemoryLayout CREATE_USN_JOURNAL_DATA$AllocationDelta$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout CREATE_USN_JOURNAL_DATA$AllocationDelta$LAYOUT() { return CREATE_USN_JOURNAL_DATA$AllocationDelta$LAYOUT_; }

    static final VarHandle CREATE_USN_JOURNAL_DATA$AllocationDelta$VH_ = CREATE_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationDelta"));
    static final java.lang.invoke.VarHandle CREATE_USN_JOURNAL_DATA$AllocationDelta$VH() { return CREATE_USN_JOURNAL_DATA$AllocationDelta$VH_; }

    static final MemoryLayout READ_FILE_USN_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("MinMajorVersion"),
        C_SHORT.withName("MaxMajorVersion")
    );
    static final jdk.incubator.foreign.MemoryLayout READ_FILE_USN_DATA$struct$LAYOUT() { return READ_FILE_USN_DATA$struct$LAYOUT_; }

    static final MemoryLayout READ_FILE_USN_DATA$MinMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout READ_FILE_USN_DATA$MinMajorVersion$LAYOUT() { return READ_FILE_USN_DATA$MinMajorVersion$LAYOUT_; }

    static final VarHandle READ_FILE_USN_DATA$MinMajorVersion$VH_ = READ_FILE_USN_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinMajorVersion"));
    static final java.lang.invoke.VarHandle READ_FILE_USN_DATA$MinMajorVersion$VH() { return READ_FILE_USN_DATA$MinMajorVersion$VH_; }

    static final MemoryLayout READ_FILE_USN_DATA$MaxMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout READ_FILE_USN_DATA$MaxMajorVersion$LAYOUT() { return READ_FILE_USN_DATA$MaxMajorVersion$LAYOUT_; }

    static final VarHandle READ_FILE_USN_DATA$MaxMajorVersion$VH_ = READ_FILE_USN_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxMajorVersion"));
    static final java.lang.invoke.VarHandle READ_FILE_USN_DATA$MaxMajorVersion$VH() { return READ_FILE_USN_DATA$MaxMajorVersion$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V0$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartUsn"),
        C_LONG.withName("ReasonMask"),
        C_LONG.withName("ReturnOnlyOnClose"),
        C_LONGLONG.withName("Timeout"),
        C_LONGLONG.withName("BytesToWaitFor"),
        C_LONGLONG.withName("UsnJournalID")
    );
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V0$struct$LAYOUT() { return READ_USN_JOURNAL_DATA_V0$struct$LAYOUT_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V0$StartUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V0$StartUsn$LAYOUT() { return READ_USN_JOURNAL_DATA_V0$StartUsn$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V0$StartUsn$VH_ = READ_USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartUsn"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V0$StartUsn$VH() { return READ_USN_JOURNAL_DATA_V0$StartUsn$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V0$ReasonMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V0$ReasonMask$LAYOUT() { return READ_USN_JOURNAL_DATA_V0$ReasonMask$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V0$ReasonMask$VH_ = READ_USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReasonMask"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V0$ReasonMask$VH() { return READ_USN_JOURNAL_DATA_V0$ReasonMask$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V0$ReturnOnlyOnClose$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V0$ReturnOnlyOnClose$LAYOUT() { return READ_USN_JOURNAL_DATA_V0$ReturnOnlyOnClose$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V0$ReturnOnlyOnClose$VH_ = READ_USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReturnOnlyOnClose"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V0$ReturnOnlyOnClose$VH() { return READ_USN_JOURNAL_DATA_V0$ReturnOnlyOnClose$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V0$Timeout$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V0$Timeout$LAYOUT() { return READ_USN_JOURNAL_DATA_V0$Timeout$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V0$Timeout$VH_ = READ_USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Timeout"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V0$Timeout$VH() { return READ_USN_JOURNAL_DATA_V0$Timeout$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V0$BytesToWaitFor$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V0$BytesToWaitFor$LAYOUT() { return READ_USN_JOURNAL_DATA_V0$BytesToWaitFor$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V0$BytesToWaitFor$VH_ = READ_USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BytesToWaitFor"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V0$BytesToWaitFor$VH() { return READ_USN_JOURNAL_DATA_V0$BytesToWaitFor$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V0$UsnJournalID$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V0$UsnJournalID$LAYOUT() { return READ_USN_JOURNAL_DATA_V0$UsnJournalID$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V0$UsnJournalID$VH_ = READ_USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UsnJournalID"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V0$UsnJournalID$VH() { return READ_USN_JOURNAL_DATA_V0$UsnJournalID$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartUsn"),
        C_LONG.withName("ReasonMask"),
        C_LONG.withName("ReturnOnlyOnClose"),
        C_LONGLONG.withName("Timeout"),
        C_LONGLONG.withName("BytesToWaitFor"),
        C_LONGLONG.withName("UsnJournalID"),
        C_SHORT.withName("MinMajorVersion"),
        C_SHORT.withName("MaxMajorVersion"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V1$struct$LAYOUT() { return READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V1$StartUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V1$StartUsn$LAYOUT() { return READ_USN_JOURNAL_DATA_V1$StartUsn$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V1$StartUsn$VH_ = READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartUsn"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V1$StartUsn$VH() { return READ_USN_JOURNAL_DATA_V1$StartUsn$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V1$ReasonMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V1$ReasonMask$LAYOUT() { return READ_USN_JOURNAL_DATA_V1$ReasonMask$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V1$ReasonMask$VH_ = READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReasonMask"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V1$ReasonMask$VH() { return READ_USN_JOURNAL_DATA_V1$ReasonMask$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V1$ReturnOnlyOnClose$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V1$ReturnOnlyOnClose$LAYOUT() { return READ_USN_JOURNAL_DATA_V1$ReturnOnlyOnClose$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V1$ReturnOnlyOnClose$VH_ = READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReturnOnlyOnClose"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V1$ReturnOnlyOnClose$VH() { return READ_USN_JOURNAL_DATA_V1$ReturnOnlyOnClose$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V1$Timeout$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V1$Timeout$LAYOUT() { return READ_USN_JOURNAL_DATA_V1$Timeout$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V1$Timeout$VH_ = READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Timeout"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V1$Timeout$VH() { return READ_USN_JOURNAL_DATA_V1$Timeout$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V1$BytesToWaitFor$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V1$BytesToWaitFor$LAYOUT() { return READ_USN_JOURNAL_DATA_V1$BytesToWaitFor$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V1$BytesToWaitFor$VH_ = READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BytesToWaitFor"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V1$BytesToWaitFor$VH() { return READ_USN_JOURNAL_DATA_V1$BytesToWaitFor$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V1$UsnJournalID$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V1$UsnJournalID$LAYOUT() { return READ_USN_JOURNAL_DATA_V1$UsnJournalID$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V1$UsnJournalID$VH_ = READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UsnJournalID"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V1$UsnJournalID$VH() { return READ_USN_JOURNAL_DATA_V1$UsnJournalID$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V1$MinMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V1$MinMajorVersion$LAYOUT() { return READ_USN_JOURNAL_DATA_V1$MinMajorVersion$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V1$MinMajorVersion$VH_ = READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinMajorVersion"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V1$MinMajorVersion$VH() { return READ_USN_JOURNAL_DATA_V1$MinMajorVersion$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA_V1$MaxMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA_V1$MaxMajorVersion$LAYOUT() { return READ_USN_JOURNAL_DATA_V1$MaxMajorVersion$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA_V1$MaxMajorVersion$VH_ = READ_USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxMajorVersion"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA_V1$MaxMajorVersion$VH() { return READ_USN_JOURNAL_DATA_V1$MaxMajorVersion$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("StartUsn"),
        C_LONG.withName("ReasonMask"),
        C_LONG.withName("ReturnOnlyOnClose"),
        C_LONGLONG.withName("Timeout"),
        C_LONGLONG.withName("BytesToWaitFor"),
        C_LONGLONG.withName("UsnJournalID"),
        C_SHORT.withName("MinMajorVersion"),
        C_SHORT.withName("MaxMajorVersion"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA$struct$LAYOUT() { return READ_USN_JOURNAL_DATA$struct$LAYOUT_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA$StartUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA$StartUsn$LAYOUT() { return READ_USN_JOURNAL_DATA$StartUsn$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA$StartUsn$VH_ = READ_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("StartUsn"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA$StartUsn$VH() { return READ_USN_JOURNAL_DATA$StartUsn$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA$ReasonMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA$ReasonMask$LAYOUT() { return READ_USN_JOURNAL_DATA$ReasonMask$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA$ReasonMask$VH_ = READ_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReasonMask"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA$ReasonMask$VH() { return READ_USN_JOURNAL_DATA$ReasonMask$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA$ReturnOnlyOnClose$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA$ReturnOnlyOnClose$LAYOUT() { return READ_USN_JOURNAL_DATA$ReturnOnlyOnClose$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA$ReturnOnlyOnClose$VH_ = READ_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ReturnOnlyOnClose"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA$ReturnOnlyOnClose$VH() { return READ_USN_JOURNAL_DATA$ReturnOnlyOnClose$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA$Timeout$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA$Timeout$LAYOUT() { return READ_USN_JOURNAL_DATA$Timeout$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA$Timeout$VH_ = READ_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Timeout"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA$Timeout$VH() { return READ_USN_JOURNAL_DATA$Timeout$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA$BytesToWaitFor$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA$BytesToWaitFor$LAYOUT() { return READ_USN_JOURNAL_DATA$BytesToWaitFor$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA$BytesToWaitFor$VH_ = READ_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BytesToWaitFor"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA$BytesToWaitFor$VH() { return READ_USN_JOURNAL_DATA$BytesToWaitFor$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA$UsnJournalID$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA$UsnJournalID$LAYOUT() { return READ_USN_JOURNAL_DATA$UsnJournalID$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA$UsnJournalID$VH_ = READ_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UsnJournalID"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA$UsnJournalID$VH() { return READ_USN_JOURNAL_DATA$UsnJournalID$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA$MinMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA$MinMajorVersion$LAYOUT() { return READ_USN_JOURNAL_DATA$MinMajorVersion$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA$MinMajorVersion$VH_ = READ_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinMajorVersion"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA$MinMajorVersion$VH() { return READ_USN_JOURNAL_DATA$MinMajorVersion$VH_; }

    static final MemoryLayout READ_USN_JOURNAL_DATA$MaxMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout READ_USN_JOURNAL_DATA$MaxMajorVersion$LAYOUT() { return READ_USN_JOURNAL_DATA$MaxMajorVersion$LAYOUT_; }

    static final VarHandle READ_USN_JOURNAL_DATA$MaxMajorVersion$VH_ = READ_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxMajorVersion"));
    static final java.lang.invoke.VarHandle READ_USN_JOURNAL_DATA$MaxMajorVersion$VH() { return READ_USN_JOURNAL_DATA$MaxMajorVersion$VH_; }

    static final MemoryLayout USN_TRACK_MODIFIED_RANGES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Flags"),
        C_LONG.withName("Unused"),
        C_LONGLONG.withName("ChunkSize"),
        C_LONGLONG.withName("FileSizeThreshold")
    );
    static final jdk.incubator.foreign.MemoryLayout USN_TRACK_MODIFIED_RANGES$struct$LAYOUT() { return USN_TRACK_MODIFIED_RANGES$struct$LAYOUT_; }

    static final MemoryLayout USN_TRACK_MODIFIED_RANGES$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_TRACK_MODIFIED_RANGES$Flags$LAYOUT() { return USN_TRACK_MODIFIED_RANGES$Flags$LAYOUT_; }

    static final VarHandle USN_TRACK_MODIFIED_RANGES$Flags$VH_ = USN_TRACK_MODIFIED_RANGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle USN_TRACK_MODIFIED_RANGES$Flags$VH() { return USN_TRACK_MODIFIED_RANGES$Flags$VH_; }

    static final MemoryLayout USN_TRACK_MODIFIED_RANGES$Unused$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_TRACK_MODIFIED_RANGES$Unused$LAYOUT() { return USN_TRACK_MODIFIED_RANGES$Unused$LAYOUT_; }

    static final VarHandle USN_TRACK_MODIFIED_RANGES$Unused$VH_ = USN_TRACK_MODIFIED_RANGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Unused"));
    static final java.lang.invoke.VarHandle USN_TRACK_MODIFIED_RANGES$Unused$VH() { return USN_TRACK_MODIFIED_RANGES$Unused$VH_; }

    static final MemoryLayout USN_TRACK_MODIFIED_RANGES$ChunkSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_TRACK_MODIFIED_RANGES$ChunkSize$LAYOUT() { return USN_TRACK_MODIFIED_RANGES$ChunkSize$LAYOUT_; }

    static final VarHandle USN_TRACK_MODIFIED_RANGES$ChunkSize$VH_ = USN_TRACK_MODIFIED_RANGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ChunkSize"));
    static final java.lang.invoke.VarHandle USN_TRACK_MODIFIED_RANGES$ChunkSize$VH() { return USN_TRACK_MODIFIED_RANGES$ChunkSize$VH_; }

    static final MemoryLayout USN_TRACK_MODIFIED_RANGES$FileSizeThreshold$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_TRACK_MODIFIED_RANGES$FileSizeThreshold$LAYOUT() { return USN_TRACK_MODIFIED_RANGES$FileSizeThreshold$LAYOUT_; }

    static final VarHandle USN_TRACK_MODIFIED_RANGES$FileSizeThreshold$VH_ = USN_TRACK_MODIFIED_RANGES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileSizeThreshold"));
    static final java.lang.invoke.VarHandle USN_TRACK_MODIFIED_RANGES$FileSizeThreshold$VH() { return USN_TRACK_MODIFIED_RANGES$FileSizeThreshold$VH_; }

    static final MemoryLayout USN_RANGE_TRACK_OUTPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Usn")
    );
    static final jdk.incubator.foreign.MemoryLayout USN_RANGE_TRACK_OUTPUT$struct$LAYOUT() { return USN_RANGE_TRACK_OUTPUT$struct$LAYOUT_; }

    static final MemoryLayout USN_RANGE_TRACK_OUTPUT$Usn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RANGE_TRACK_OUTPUT$Usn$LAYOUT() { return USN_RANGE_TRACK_OUTPUT$Usn$LAYOUT_; }

    static final VarHandle USN_RANGE_TRACK_OUTPUT$Usn$VH_ = USN_RANGE_TRACK_OUTPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Usn"));
    static final java.lang.invoke.VarHandle USN_RANGE_TRACK_OUTPUT$Usn$VH() { return USN_RANGE_TRACK_OUTPUT$Usn$VH_; }

    static final MemoryLayout USN_RECORD_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("RecordLength"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_LONGLONG.withName("FileReferenceNumber"),
        C_LONGLONG.withName("ParentFileReferenceNumber"),
        C_LONGLONG.withName("Usn"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TimeStamp"),
        C_LONG.withName("Reason"),
        C_LONG.withName("SourceInfo"),
        C_LONG.withName("SecurityId"),
        C_LONG.withName("FileAttributes"),
        C_SHORT.withName("FileNameLength"),
        C_SHORT.withName("FileNameOffset"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    );
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$struct$LAYOUT() { return USN_RECORD_V2$struct$LAYOUT_; }

    static final MemoryLayout USN_RECORD_V2$RecordLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$RecordLength$LAYOUT() { return USN_RECORD_V2$RecordLength$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$RecordLength$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RecordLength"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$RecordLength$VH() { return USN_RECORD_V2$RecordLength$VH_; }

    static final MemoryLayout USN_RECORD_V2$MajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$MajorVersion$LAYOUT() { return USN_RECORD_V2$MajorVersion$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$MajorVersion$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$MajorVersion$VH() { return USN_RECORD_V2$MajorVersion$VH_; }

    static final MemoryLayout USN_RECORD_V2$MinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$MinorVersion$LAYOUT() { return USN_RECORD_V2$MinorVersion$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$MinorVersion$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$MinorVersion$VH() { return USN_RECORD_V2$MinorVersion$VH_; }

    static final MemoryLayout USN_RECORD_V2$FileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$FileReferenceNumber$LAYOUT() { return USN_RECORD_V2$FileReferenceNumber$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$FileReferenceNumber$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileReferenceNumber"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$FileReferenceNumber$VH() { return USN_RECORD_V2$FileReferenceNumber$VH_; }

    static final MemoryLayout USN_RECORD_V2$ParentFileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$ParentFileReferenceNumber$LAYOUT() { return USN_RECORD_V2$ParentFileReferenceNumber$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$ParentFileReferenceNumber$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParentFileReferenceNumber"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$ParentFileReferenceNumber$VH() { return USN_RECORD_V2$ParentFileReferenceNumber$VH_; }

    static final MemoryLayout USN_RECORD_V2$Usn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$Usn$LAYOUT() { return USN_RECORD_V2$Usn$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$Usn$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Usn"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$Usn$VH() { return USN_RECORD_V2$Usn$VH_; }

    static final MemoryLayout USN_RECORD_V2$Reason$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$Reason$LAYOUT() { return USN_RECORD_V2$Reason$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$Reason$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reason"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$Reason$VH() { return USN_RECORD_V2$Reason$VH_; }

    static final MemoryLayout USN_RECORD_V2$SourceInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$SourceInfo$LAYOUT() { return USN_RECORD_V2$SourceInfo$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$SourceInfo$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SourceInfo"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$SourceInfo$VH() { return USN_RECORD_V2$SourceInfo$VH_; }

    static final MemoryLayout USN_RECORD_V2$SecurityId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$SecurityId$LAYOUT() { return USN_RECORD_V2$SecurityId$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$SecurityId$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityId"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$SecurityId$VH() { return USN_RECORD_V2$SecurityId$VH_; }

    static final MemoryLayout USN_RECORD_V2$FileAttributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$FileAttributes$LAYOUT() { return USN_RECORD_V2$FileAttributes$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$FileAttributes$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$FileAttributes$VH() { return USN_RECORD_V2$FileAttributes$VH_; }

    static final MemoryLayout USN_RECORD_V2$FileNameLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$FileNameLength$LAYOUT() { return USN_RECORD_V2$FileNameLength$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$FileNameLength$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$FileNameLength$VH() { return USN_RECORD_V2$FileNameLength$VH_; }

    static final MemoryLayout USN_RECORD_V2$FileNameOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V2$FileNameOffset$LAYOUT() { return USN_RECORD_V2$FileNameOffset$LAYOUT_; }

    static final VarHandle USN_RECORD_V2$FileNameOffset$VH_ = USN_RECORD_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileNameOffset"));
    static final java.lang.invoke.VarHandle USN_RECORD_V2$FileNameOffset$VH() { return USN_RECORD_V2$FileNameOffset$VH_; }

    static final MemoryLayout USN_RECORD_V3$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("RecordLength"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
        ).withName("FileReferenceNumber"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
        ).withName("ParentFileReferenceNumber"),
        C_LONGLONG.withName("Usn"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TimeStamp"),
        C_LONG.withName("Reason"),
        C_LONG.withName("SourceInfo"),
        C_LONG.withName("SecurityId"),
        C_LONG.withName("FileAttributes"),
        C_SHORT.withName("FileNameLength"),
        C_SHORT.withName("FileNameOffset"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    );
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$struct$LAYOUT() { return USN_RECORD_V3$struct$LAYOUT_; }

    static final MemoryLayout USN_RECORD_V3$RecordLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$RecordLength$LAYOUT() { return USN_RECORD_V3$RecordLength$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$RecordLength$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RecordLength"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$RecordLength$VH() { return USN_RECORD_V3$RecordLength$VH_; }

    static final MemoryLayout USN_RECORD_V3$MajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$MajorVersion$LAYOUT() { return USN_RECORD_V3$MajorVersion$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$MajorVersion$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$MajorVersion$VH() { return USN_RECORD_V3$MajorVersion$VH_; }

    static final MemoryLayout USN_RECORD_V3$MinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$MinorVersion$LAYOUT() { return USN_RECORD_V3$MinorVersion$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$MinorVersion$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$MinorVersion$VH() { return USN_RECORD_V3$MinorVersion$VH_; }

    static final MemoryLayout USN_RECORD_V3$Usn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$Usn$LAYOUT() { return USN_RECORD_V3$Usn$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$Usn$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Usn"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$Usn$VH() { return USN_RECORD_V3$Usn$VH_; }

    static final MemoryLayout USN_RECORD_V3$Reason$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$Reason$LAYOUT() { return USN_RECORD_V3$Reason$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$Reason$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reason"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$Reason$VH() { return USN_RECORD_V3$Reason$VH_; }

    static final MemoryLayout USN_RECORD_V3$SourceInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$SourceInfo$LAYOUT() { return USN_RECORD_V3$SourceInfo$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$SourceInfo$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SourceInfo"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$SourceInfo$VH() { return USN_RECORD_V3$SourceInfo$VH_; }

    static final MemoryLayout USN_RECORD_V3$SecurityId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$SecurityId$LAYOUT() { return USN_RECORD_V3$SecurityId$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$SecurityId$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityId"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$SecurityId$VH() { return USN_RECORD_V3$SecurityId$VH_; }

    static final MemoryLayout USN_RECORD_V3$FileAttributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$FileAttributes$LAYOUT() { return USN_RECORD_V3$FileAttributes$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$FileAttributes$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$FileAttributes$VH() { return USN_RECORD_V3$FileAttributes$VH_; }

    static final MemoryLayout USN_RECORD_V3$FileNameLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$FileNameLength$LAYOUT() { return USN_RECORD_V3$FileNameLength$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$FileNameLength$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$FileNameLength$VH() { return USN_RECORD_V3$FileNameLength$VH_; }

    static final MemoryLayout USN_RECORD_V3$FileNameOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V3$FileNameOffset$LAYOUT() { return USN_RECORD_V3$FileNameOffset$LAYOUT_; }

    static final VarHandle USN_RECORD_V3$FileNameOffset$VH_ = USN_RECORD_V3$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileNameOffset"));
    static final java.lang.invoke.VarHandle USN_RECORD_V3$FileNameOffset$VH() { return USN_RECORD_V3$FileNameOffset$VH_; }

    static final MemoryLayout USN_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("RecordLength"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion"),
        C_LONGLONG.withName("FileReferenceNumber"),
        C_LONGLONG.withName("ParentFileReferenceNumber"),
        C_LONGLONG.withName("Usn"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("TimeStamp"),
        C_LONG.withName("Reason"),
        C_LONG.withName("SourceInfo"),
        C_LONG.withName("SecurityId"),
        C_LONG.withName("FileAttributes"),
        C_SHORT.withName("FileNameLength"),
        C_SHORT.withName("FileNameOffset"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
        MemoryLayout.ofPaddingBits(16)
    );
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$struct$LAYOUT() { return USN_RECORD$struct$LAYOUT_; }

    static final MemoryLayout USN_RECORD$RecordLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$RecordLength$LAYOUT() { return USN_RECORD$RecordLength$LAYOUT_; }

    static final VarHandle USN_RECORD$RecordLength$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RecordLength"));
    static final java.lang.invoke.VarHandle USN_RECORD$RecordLength$VH() { return USN_RECORD$RecordLength$VH_; }

    static final MemoryLayout USN_RECORD$MajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$MajorVersion$LAYOUT() { return USN_RECORD$MajorVersion$LAYOUT_; }

    static final VarHandle USN_RECORD$MajorVersion$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle USN_RECORD$MajorVersion$VH() { return USN_RECORD$MajorVersion$VH_; }

    static final MemoryLayout USN_RECORD$MinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$MinorVersion$LAYOUT() { return USN_RECORD$MinorVersion$LAYOUT_; }

    static final VarHandle USN_RECORD$MinorVersion$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle USN_RECORD$MinorVersion$VH() { return USN_RECORD$MinorVersion$VH_; }

    static final MemoryLayout USN_RECORD$FileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$FileReferenceNumber$LAYOUT() { return USN_RECORD$FileReferenceNumber$LAYOUT_; }

    static final VarHandle USN_RECORD$FileReferenceNumber$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FileReferenceNumber"));
    static final java.lang.invoke.VarHandle USN_RECORD$FileReferenceNumber$VH() { return USN_RECORD$FileReferenceNumber$VH_; }

    static final MemoryLayout USN_RECORD$ParentFileReferenceNumber$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$ParentFileReferenceNumber$LAYOUT() { return USN_RECORD$ParentFileReferenceNumber$LAYOUT_; }

    static final VarHandle USN_RECORD$ParentFileReferenceNumber$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParentFileReferenceNumber"));
    static final java.lang.invoke.VarHandle USN_RECORD$ParentFileReferenceNumber$VH() { return USN_RECORD$ParentFileReferenceNumber$VH_; }

    static final MemoryLayout USN_RECORD$Usn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$Usn$LAYOUT() { return USN_RECORD$Usn$LAYOUT_; }

    static final VarHandle USN_RECORD$Usn$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Usn"));
    static final java.lang.invoke.VarHandle USN_RECORD$Usn$VH() { return USN_RECORD$Usn$VH_; }

    static final MemoryLayout USN_RECORD$Reason$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$Reason$LAYOUT() { return USN_RECORD$Reason$LAYOUT_; }

    static final VarHandle USN_RECORD$Reason$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reason"));
    static final java.lang.invoke.VarHandle USN_RECORD$Reason$VH() { return USN_RECORD$Reason$VH_; }

    static final MemoryLayout USN_RECORD$SourceInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$SourceInfo$LAYOUT() { return USN_RECORD$SourceInfo$LAYOUT_; }

    static final VarHandle USN_RECORD$SourceInfo$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SourceInfo"));
    static final java.lang.invoke.VarHandle USN_RECORD$SourceInfo$VH() { return USN_RECORD$SourceInfo$VH_; }

    static final MemoryLayout USN_RECORD$SecurityId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$SecurityId$LAYOUT() { return USN_RECORD$SecurityId$LAYOUT_; }

    static final VarHandle USN_RECORD$SecurityId$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SecurityId"));
    static final java.lang.invoke.VarHandle USN_RECORD$SecurityId$VH() { return USN_RECORD$SecurityId$VH_; }

    static final MemoryLayout USN_RECORD$FileAttributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$FileAttributes$LAYOUT() { return USN_RECORD$FileAttributes$LAYOUT_; }

    static final VarHandle USN_RECORD$FileAttributes$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAttributes"));
    static final java.lang.invoke.VarHandle USN_RECORD$FileAttributes$VH() { return USN_RECORD$FileAttributes$VH_; }

    static final MemoryLayout USN_RECORD$FileNameLength$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$FileNameLength$LAYOUT() { return USN_RECORD$FileNameLength$LAYOUT_; }

    static final VarHandle USN_RECORD$FileNameLength$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileNameLength"));
    static final java.lang.invoke.VarHandle USN_RECORD$FileNameLength$VH() { return USN_RECORD$FileNameLength$VH_; }

    static final MemoryLayout USN_RECORD$FileNameOffset$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD$FileNameOffset$LAYOUT() { return USN_RECORD$FileNameOffset$LAYOUT_; }

    static final VarHandle USN_RECORD$FileNameOffset$VH_ = USN_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileNameOffset"));
    static final java.lang.invoke.VarHandle USN_RECORD$FileNameOffset$VH() { return USN_RECORD$FileNameOffset$VH_; }

    static final MemoryLayout USN_RECORD_COMMON_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("RecordLength"),
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion")
    );
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_COMMON_HEADER$struct$LAYOUT() { return USN_RECORD_COMMON_HEADER$struct$LAYOUT_; }

    static final MemoryLayout USN_RECORD_COMMON_HEADER$RecordLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_COMMON_HEADER$RecordLength$LAYOUT() { return USN_RECORD_COMMON_HEADER$RecordLength$LAYOUT_; }

    static final VarHandle USN_RECORD_COMMON_HEADER$RecordLength$VH_ = USN_RECORD_COMMON_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RecordLength"));
    static final java.lang.invoke.VarHandle USN_RECORD_COMMON_HEADER$RecordLength$VH() { return USN_RECORD_COMMON_HEADER$RecordLength$VH_; }

    static final MemoryLayout USN_RECORD_COMMON_HEADER$MajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_COMMON_HEADER$MajorVersion$LAYOUT() { return USN_RECORD_COMMON_HEADER$MajorVersion$LAYOUT_; }

    static final VarHandle USN_RECORD_COMMON_HEADER$MajorVersion$VH_ = USN_RECORD_COMMON_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle USN_RECORD_COMMON_HEADER$MajorVersion$VH() { return USN_RECORD_COMMON_HEADER$MajorVersion$VH_; }

    static final MemoryLayout USN_RECORD_COMMON_HEADER$MinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_COMMON_HEADER$MinorVersion$LAYOUT() { return USN_RECORD_COMMON_HEADER$MinorVersion$LAYOUT_; }

    static final VarHandle USN_RECORD_COMMON_HEADER$MinorVersion$VH_ = USN_RECORD_COMMON_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle USN_RECORD_COMMON_HEADER$MinorVersion$VH() { return USN_RECORD_COMMON_HEADER$MinorVersion$VH_; }

    static final MemoryLayout USN_RECORD_EXTENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("Offset"),
        C_LONGLONG.withName("Length")
    );
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_EXTENT$struct$LAYOUT() { return USN_RECORD_EXTENT$struct$LAYOUT_; }

    static final MemoryLayout USN_RECORD_EXTENT$Offset$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_EXTENT$Offset$LAYOUT() { return USN_RECORD_EXTENT$Offset$LAYOUT_; }

    static final VarHandle USN_RECORD_EXTENT$Offset$VH_ = USN_RECORD_EXTENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Offset"));
    static final java.lang.invoke.VarHandle USN_RECORD_EXTENT$Offset$VH() { return USN_RECORD_EXTENT$Offset$VH_; }

    static final MemoryLayout USN_RECORD_EXTENT$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_EXTENT$Length$LAYOUT() { return USN_RECORD_EXTENT$Length$LAYOUT_; }

    static final VarHandle USN_RECORD_EXTENT$Length$VH_ = USN_RECORD_EXTENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle USN_RECORD_EXTENT$Length$VH() { return USN_RECORD_EXTENT$Length$VH_; }

    static final MemoryLayout USN_RECORD_V4$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("RecordLength"),
            C_SHORT.withName("MajorVersion"),
            C_SHORT.withName("MinorVersion")
        ).withName("Header"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
        ).withName("FileReferenceNumber"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
        ).withName("ParentFileReferenceNumber"),
        C_LONGLONG.withName("Usn"),
        C_LONG.withName("Reason"),
        C_LONG.withName("SourceInfo"),
        C_LONG.withName("RemainingExtents"),
        C_SHORT.withName("NumberOfExtents"),
        C_SHORT.withName("ExtentSize"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONGLONG.withName("Offset"),
            C_LONGLONG.withName("Length")
        )).withName("Extents")
    );
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V4$struct$LAYOUT() { return USN_RECORD_V4$struct$LAYOUT_; }

    static final MemoryLayout USN_RECORD_V4$Usn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V4$Usn$LAYOUT() { return USN_RECORD_V4$Usn$LAYOUT_; }

    static final VarHandle USN_RECORD_V4$Usn$VH_ = USN_RECORD_V4$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Usn"));
    static final java.lang.invoke.VarHandle USN_RECORD_V4$Usn$VH() { return USN_RECORD_V4$Usn$VH_; }

    static final MemoryLayout USN_RECORD_V4$Reason$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V4$Reason$LAYOUT() { return USN_RECORD_V4$Reason$LAYOUT_; }

    static final VarHandle USN_RECORD_V4$Reason$VH_ = USN_RECORD_V4$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reason"));
    static final java.lang.invoke.VarHandle USN_RECORD_V4$Reason$VH() { return USN_RECORD_V4$Reason$VH_; }

    static final MemoryLayout USN_RECORD_V4$SourceInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V4$SourceInfo$LAYOUT() { return USN_RECORD_V4$SourceInfo$LAYOUT_; }

    static final VarHandle USN_RECORD_V4$SourceInfo$VH_ = USN_RECORD_V4$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SourceInfo"));
    static final java.lang.invoke.VarHandle USN_RECORD_V4$SourceInfo$VH() { return USN_RECORD_V4$SourceInfo$VH_; }

    static final MemoryLayout USN_RECORD_V4$RemainingExtents$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V4$RemainingExtents$LAYOUT() { return USN_RECORD_V4$RemainingExtents$LAYOUT_; }

    static final VarHandle USN_RECORD_V4$RemainingExtents$VH_ = USN_RECORD_V4$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RemainingExtents"));
    static final java.lang.invoke.VarHandle USN_RECORD_V4$RemainingExtents$VH() { return USN_RECORD_V4$RemainingExtents$VH_; }

    static final MemoryLayout USN_RECORD_V4$NumberOfExtents$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V4$NumberOfExtents$LAYOUT() { return USN_RECORD_V4$NumberOfExtents$LAYOUT_; }

    static final VarHandle USN_RECORD_V4$NumberOfExtents$VH_ = USN_RECORD_V4$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfExtents"));
    static final java.lang.invoke.VarHandle USN_RECORD_V4$NumberOfExtents$VH() { return USN_RECORD_V4$NumberOfExtents$VH_; }

    static final MemoryLayout USN_RECORD_V4$ExtentSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_V4$ExtentSize$LAYOUT() { return USN_RECORD_V4$ExtentSize$LAYOUT_; }

    static final VarHandle USN_RECORD_V4$ExtentSize$VH_ = USN_RECORD_V4$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ExtentSize"));
    static final java.lang.invoke.VarHandle USN_RECORD_V4$ExtentSize$VH() { return USN_RECORD_V4$ExtentSize$VH_; }

    static final MemoryLayout USN_RECORD_UNION$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_LONG.withName("RecordLength"),
            C_SHORT.withName("MajorVersion"),
            C_SHORT.withName("MinorVersion")
        ).withName("Header"),
        MemoryLayout.ofStruct(
            C_LONG.withName("RecordLength"),
            C_SHORT.withName("MajorVersion"),
            C_SHORT.withName("MinorVersion"),
            C_LONGLONG.withName("FileReferenceNumber"),
            C_LONGLONG.withName("ParentFileReferenceNumber"),
            C_LONGLONG.withName("Usn"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("TimeStamp"),
            C_LONG.withName("Reason"),
            C_LONG.withName("SourceInfo"),
            C_LONG.withName("SecurityId"),
            C_LONG.withName("FileAttributes"),
            C_SHORT.withName("FileNameLength"),
            C_SHORT.withName("FileNameOffset"),
            MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
            MemoryLayout.ofPaddingBits(16)
        ).withName("V2"),
        MemoryLayout.ofStruct(
            C_LONG.withName("RecordLength"),
            C_SHORT.withName("MajorVersion"),
            C_SHORT.withName("MinorVersion"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
            ).withName("FileReferenceNumber"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
            ).withName("ParentFileReferenceNumber"),
            C_LONGLONG.withName("Usn"),
            MemoryLayout.ofUnion(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("LowPart"),
                    C_LONG.withName("HighPart")
                ).withName("u"),
                C_LONGLONG.withName("QuadPart")
            ).withName("TimeStamp"),
            C_LONG.withName("Reason"),
            C_LONG.withName("SourceInfo"),
            C_LONG.withName("SecurityId"),
            C_LONG.withName("FileAttributes"),
            C_SHORT.withName("FileNameLength"),
            C_SHORT.withName("FileNameOffset"),
            MemoryLayout.ofSequence(1, C_SHORT).withName("FileName"),
            MemoryLayout.ofPaddingBits(16)
        ).withName("V3"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("RecordLength"),
                C_SHORT.withName("MajorVersion"),
                C_SHORT.withName("MinorVersion")
            ).withName("Header"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
            ).withName("FileReferenceNumber"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(16, C_CHAR).withName("Identifier")
            ).withName("ParentFileReferenceNumber"),
            C_LONGLONG.withName("Usn"),
            C_LONG.withName("Reason"),
            C_LONG.withName("SourceInfo"),
            C_LONG.withName("RemainingExtents"),
            C_SHORT.withName("NumberOfExtents"),
            C_SHORT.withName("ExtentSize"),
            MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
                C_LONGLONG.withName("Offset"),
                C_LONGLONG.withName("Length")
            )).withName("Extents")
        ).withName("V4")
    );
    static final jdk.incubator.foreign.MemoryLayout USN_RECORD_UNION$union$LAYOUT() { return USN_RECORD_UNION$union$LAYOUT_; }

    static final MemoryLayout USN_JOURNAL_DATA_V0$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("UsnJournalID"),
        C_LONGLONG.withName("FirstUsn"),
        C_LONGLONG.withName("NextUsn"),
        C_LONGLONG.withName("LowestValidUsn"),
        C_LONGLONG.withName("MaxUsn"),
        C_LONGLONG.withName("MaximumSize"),
        C_LONGLONG.withName("AllocationDelta")
    );
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V0$struct$LAYOUT() { return USN_JOURNAL_DATA_V0$struct$LAYOUT_; }

    static final MemoryLayout USN_JOURNAL_DATA_V0$UsnJournalID$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V0$UsnJournalID$LAYOUT() { return USN_JOURNAL_DATA_V0$UsnJournalID$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V0$UsnJournalID$VH_ = USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UsnJournalID"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V0$UsnJournalID$VH() { return USN_JOURNAL_DATA_V0$UsnJournalID$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V0$FirstUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V0$FirstUsn$LAYOUT() { return USN_JOURNAL_DATA_V0$FirstUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V0$FirstUsn$VH_ = USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FirstUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V0$FirstUsn$VH() { return USN_JOURNAL_DATA_V0$FirstUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V0$NextUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V0$NextUsn$LAYOUT() { return USN_JOURNAL_DATA_V0$NextUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V0$NextUsn$VH_ = USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NextUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V0$NextUsn$VH() { return USN_JOURNAL_DATA_V0$NextUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V0$LowestValidUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V0$LowestValidUsn$LAYOUT() { return USN_JOURNAL_DATA_V0$LowestValidUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V0$LowestValidUsn$VH_ = USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowestValidUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V0$LowestValidUsn$VH() { return USN_JOURNAL_DATA_V0$LowestValidUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V0$MaxUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V0$MaxUsn$LAYOUT() { return USN_JOURNAL_DATA_V0$MaxUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V0$MaxUsn$VH_ = USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V0$MaxUsn$VH() { return USN_JOURNAL_DATA_V0$MaxUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V0$MaximumSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V0$MaximumSize$LAYOUT() { return USN_JOURNAL_DATA_V0$MaximumSize$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V0$MaximumSize$VH_ = USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumSize"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V0$MaximumSize$VH() { return USN_JOURNAL_DATA_V0$MaximumSize$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V0$AllocationDelta$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V0$AllocationDelta$LAYOUT() { return USN_JOURNAL_DATA_V0$AllocationDelta$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V0$AllocationDelta$VH_ = USN_JOURNAL_DATA_V0$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationDelta"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V0$AllocationDelta$VH() { return USN_JOURNAL_DATA_V0$AllocationDelta$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("UsnJournalID"),
        C_LONGLONG.withName("FirstUsn"),
        C_LONGLONG.withName("NextUsn"),
        C_LONGLONG.withName("LowestValidUsn"),
        C_LONGLONG.withName("MaxUsn"),
        C_LONGLONG.withName("MaximumSize"),
        C_LONGLONG.withName("AllocationDelta"),
        C_SHORT.withName("MinSupportedMajorVersion"),
        C_SHORT.withName("MaxSupportedMajorVersion"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$struct$LAYOUT() { return USN_JOURNAL_DATA_V1$struct$LAYOUT_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$UsnJournalID$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$UsnJournalID$LAYOUT() { return USN_JOURNAL_DATA_V1$UsnJournalID$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V1$UsnJournalID$VH_ = USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UsnJournalID"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V1$UsnJournalID$VH() { return USN_JOURNAL_DATA_V1$UsnJournalID$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$FirstUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$FirstUsn$LAYOUT() { return USN_JOURNAL_DATA_V1$FirstUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V1$FirstUsn$VH_ = USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FirstUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V1$FirstUsn$VH() { return USN_JOURNAL_DATA_V1$FirstUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$NextUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$NextUsn$LAYOUT() { return USN_JOURNAL_DATA_V1$NextUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V1$NextUsn$VH_ = USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NextUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V1$NextUsn$VH() { return USN_JOURNAL_DATA_V1$NextUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$LowestValidUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$LowestValidUsn$LAYOUT() { return USN_JOURNAL_DATA_V1$LowestValidUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V1$LowestValidUsn$VH_ = USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowestValidUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V1$LowestValidUsn$VH() { return USN_JOURNAL_DATA_V1$LowestValidUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$MaxUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$MaxUsn$LAYOUT() { return USN_JOURNAL_DATA_V1$MaxUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V1$MaxUsn$VH_ = USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V1$MaxUsn$VH() { return USN_JOURNAL_DATA_V1$MaxUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$MaximumSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$MaximumSize$LAYOUT() { return USN_JOURNAL_DATA_V1$MaximumSize$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V1$MaximumSize$VH_ = USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumSize"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V1$MaximumSize$VH() { return USN_JOURNAL_DATA_V1$MaximumSize$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$AllocationDelta$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$AllocationDelta$LAYOUT() { return USN_JOURNAL_DATA_V1$AllocationDelta$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V1$AllocationDelta$VH_ = USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationDelta"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V1$AllocationDelta$VH() { return USN_JOURNAL_DATA_V1$AllocationDelta$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$MinSupportedMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$MinSupportedMajorVersion$LAYOUT() { return USN_JOURNAL_DATA_V1$MinSupportedMajorVersion$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V1$MinSupportedMajorVersion$VH_ = USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinSupportedMajorVersion"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V1$MinSupportedMajorVersion$VH() { return USN_JOURNAL_DATA_V1$MinSupportedMajorVersion$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V1$MaxSupportedMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V1$MaxSupportedMajorVersion$LAYOUT() { return USN_JOURNAL_DATA_V1$MaxSupportedMajorVersion$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V1$MaxSupportedMajorVersion$VH_ = USN_JOURNAL_DATA_V1$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxSupportedMajorVersion"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V1$MaxSupportedMajorVersion$VH() { return USN_JOURNAL_DATA_V1$MaxSupportedMajorVersion$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("UsnJournalID"),
        C_LONGLONG.withName("FirstUsn"),
        C_LONGLONG.withName("NextUsn"),
        C_LONGLONG.withName("LowestValidUsn"),
        C_LONGLONG.withName("MaxUsn"),
        C_LONGLONG.withName("MaximumSize"),
        C_LONGLONG.withName("AllocationDelta"),
        C_SHORT.withName("MinSupportedMajorVersion"),
        C_SHORT.withName("MaxSupportedMajorVersion"),
        C_LONG.withName("Flags"),
        C_LONGLONG.withName("RangeTrackChunkSize"),
        C_LONGLONG.withName("RangeTrackFileSizeThreshold")
    );
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$struct$LAYOUT() { return USN_JOURNAL_DATA_V2$struct$LAYOUT_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$UsnJournalID$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$UsnJournalID$LAYOUT() { return USN_JOURNAL_DATA_V2$UsnJournalID$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$UsnJournalID$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UsnJournalID"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$UsnJournalID$VH() { return USN_JOURNAL_DATA_V2$UsnJournalID$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$FirstUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$FirstUsn$LAYOUT() { return USN_JOURNAL_DATA_V2$FirstUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$FirstUsn$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FirstUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$FirstUsn$VH() { return USN_JOURNAL_DATA_V2$FirstUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$NextUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$NextUsn$LAYOUT() { return USN_JOURNAL_DATA_V2$NextUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$NextUsn$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NextUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$NextUsn$VH() { return USN_JOURNAL_DATA_V2$NextUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$LowestValidUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$LowestValidUsn$LAYOUT() { return USN_JOURNAL_DATA_V2$LowestValidUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$LowestValidUsn$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowestValidUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$LowestValidUsn$VH() { return USN_JOURNAL_DATA_V2$LowestValidUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$MaxUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$MaxUsn$LAYOUT() { return USN_JOURNAL_DATA_V2$MaxUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$MaxUsn$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$MaxUsn$VH() { return USN_JOURNAL_DATA_V2$MaxUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$MaximumSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$MaximumSize$LAYOUT() { return USN_JOURNAL_DATA_V2$MaximumSize$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$MaximumSize$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumSize"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$MaximumSize$VH() { return USN_JOURNAL_DATA_V2$MaximumSize$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$AllocationDelta$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$AllocationDelta$LAYOUT() { return USN_JOURNAL_DATA_V2$AllocationDelta$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$AllocationDelta$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationDelta"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$AllocationDelta$VH() { return USN_JOURNAL_DATA_V2$AllocationDelta$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$MinSupportedMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$MinSupportedMajorVersion$LAYOUT() { return USN_JOURNAL_DATA_V2$MinSupportedMajorVersion$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$MinSupportedMajorVersion$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinSupportedMajorVersion"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$MinSupportedMajorVersion$VH() { return USN_JOURNAL_DATA_V2$MinSupportedMajorVersion$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$MaxSupportedMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$MaxSupportedMajorVersion$LAYOUT() { return USN_JOURNAL_DATA_V2$MaxSupportedMajorVersion$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$MaxSupportedMajorVersion$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxSupportedMajorVersion"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$MaxSupportedMajorVersion$VH() { return USN_JOURNAL_DATA_V2$MaxSupportedMajorVersion$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$Flags$LAYOUT() { return USN_JOURNAL_DATA_V2$Flags$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$Flags$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$Flags$VH() { return USN_JOURNAL_DATA_V2$Flags$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$RangeTrackChunkSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$RangeTrackChunkSize$LAYOUT() { return USN_JOURNAL_DATA_V2$RangeTrackChunkSize$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$RangeTrackChunkSize$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RangeTrackChunkSize"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$RangeTrackChunkSize$VH() { return USN_JOURNAL_DATA_V2$RangeTrackChunkSize$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA_V2$RangeTrackFileSizeThreshold$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA_V2$RangeTrackFileSizeThreshold$LAYOUT() { return USN_JOURNAL_DATA_V2$RangeTrackFileSizeThreshold$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA_V2$RangeTrackFileSizeThreshold$VH_ = USN_JOURNAL_DATA_V2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RangeTrackFileSizeThreshold"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA_V2$RangeTrackFileSizeThreshold$VH() { return USN_JOURNAL_DATA_V2$RangeTrackFileSizeThreshold$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("UsnJournalID"),
        C_LONGLONG.withName("FirstUsn"),
        C_LONGLONG.withName("NextUsn"),
        C_LONGLONG.withName("LowestValidUsn"),
        C_LONGLONG.withName("MaxUsn"),
        C_LONGLONG.withName("MaximumSize"),
        C_LONGLONG.withName("AllocationDelta"),
        C_SHORT.withName("MinSupportedMajorVersion"),
        C_SHORT.withName("MaxSupportedMajorVersion"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$struct$LAYOUT() { return USN_JOURNAL_DATA$struct$LAYOUT_; }

    static final MemoryLayout USN_JOURNAL_DATA$UsnJournalID$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$UsnJournalID$LAYOUT() { return USN_JOURNAL_DATA$UsnJournalID$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA$UsnJournalID$VH_ = USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UsnJournalID"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA$UsnJournalID$VH() { return USN_JOURNAL_DATA$UsnJournalID$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA$FirstUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$FirstUsn$LAYOUT() { return USN_JOURNAL_DATA$FirstUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA$FirstUsn$VH_ = USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("FirstUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA$FirstUsn$VH() { return USN_JOURNAL_DATA$FirstUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA$NextUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$NextUsn$LAYOUT() { return USN_JOURNAL_DATA$NextUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA$NextUsn$VH_ = USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NextUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA$NextUsn$VH() { return USN_JOURNAL_DATA$NextUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA$LowestValidUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$LowestValidUsn$LAYOUT() { return USN_JOURNAL_DATA$LowestValidUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA$LowestValidUsn$VH_ = USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LowestValidUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA$LowestValidUsn$VH() { return USN_JOURNAL_DATA$LowestValidUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA$MaxUsn$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$MaxUsn$LAYOUT() { return USN_JOURNAL_DATA$MaxUsn$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA$MaxUsn$VH_ = USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxUsn"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA$MaxUsn$VH() { return USN_JOURNAL_DATA$MaxUsn$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA$MaximumSize$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$MaximumSize$LAYOUT() { return USN_JOURNAL_DATA$MaximumSize$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA$MaximumSize$VH_ = USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaximumSize"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA$MaximumSize$VH() { return USN_JOURNAL_DATA$MaximumSize$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA$AllocationDelta$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$AllocationDelta$LAYOUT() { return USN_JOURNAL_DATA$AllocationDelta$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA$AllocationDelta$VH_ = USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AllocationDelta"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA$AllocationDelta$VH() { return USN_JOURNAL_DATA$AllocationDelta$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA$MinSupportedMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$MinSupportedMajorVersion$LAYOUT() { return USN_JOURNAL_DATA$MinSupportedMajorVersion$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA$MinSupportedMajorVersion$VH_ = USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinSupportedMajorVersion"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA$MinSupportedMajorVersion$VH() { return USN_JOURNAL_DATA$MinSupportedMajorVersion$VH_; }

    static final MemoryLayout USN_JOURNAL_DATA$MaxSupportedMajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout USN_JOURNAL_DATA$MaxSupportedMajorVersion$LAYOUT() { return USN_JOURNAL_DATA$MaxSupportedMajorVersion$LAYOUT_; }

    static final VarHandle USN_JOURNAL_DATA$MaxSupportedMajorVersion$VH_ = USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MaxSupportedMajorVersion"));
    static final java.lang.invoke.VarHandle USN_JOURNAL_DATA$MaxSupportedMajorVersion$VH() { return USN_JOURNAL_DATA$MaxSupportedMajorVersion$VH_; }

    static final MemoryLayout DELETE_USN_JOURNAL_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("UsnJournalID"),
        C_LONG.withName("DeleteFlags"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout DELETE_USN_JOURNAL_DATA$struct$LAYOUT() { return DELETE_USN_JOURNAL_DATA$struct$LAYOUT_; }

    static final MemoryLayout DELETE_USN_JOURNAL_DATA$UsnJournalID$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout DELETE_USN_JOURNAL_DATA$UsnJournalID$LAYOUT() { return DELETE_USN_JOURNAL_DATA$UsnJournalID$LAYOUT_; }

    static final VarHandle DELETE_USN_JOURNAL_DATA$UsnJournalID$VH_ = DELETE_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UsnJournalID"));
    static final java.lang.invoke.VarHandle DELETE_USN_JOURNAL_DATA$UsnJournalID$VH() { return DELETE_USN_JOURNAL_DATA$UsnJournalID$VH_; }

    static final MemoryLayout DELETE_USN_JOURNAL_DATA$DeleteFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout DELETE_USN_JOURNAL_DATA$DeleteFlags$LAYOUT() { return DELETE_USN_JOURNAL_DATA$DeleteFlags$LAYOUT_; }

    static final VarHandle DELETE_USN_JOURNAL_DATA$DeleteFlags$VH_ = DELETE_USN_JOURNAL_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DeleteFlags"));
    static final java.lang.invoke.VarHandle DELETE_USN_JOURNAL_DATA$DeleteFlags$VH() { return DELETE_USN_JOURNAL_DATA$DeleteFlags$VH_; }

    static final MemoryLayout MARK_HANDLE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("UsnSourceInfo"),
        C_LONG.withName("CopyNumber"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("VolumeHandle"),
        C_LONG.withName("HandleInfo"),
        MemoryLayout.ofPaddingBits(32)
    );
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO$struct$LAYOUT() { return MARK_HANDLE_INFO$struct$LAYOUT_; }

    static final MemoryLayout MARK_HANDLE_INFO$UsnSourceInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO$UsnSourceInfo$LAYOUT() { return MARK_HANDLE_INFO$UsnSourceInfo$LAYOUT_; }

    static final VarHandle MARK_HANDLE_INFO$UsnSourceInfo$VH_ = MARK_HANDLE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UsnSourceInfo"));
    static final java.lang.invoke.VarHandle MARK_HANDLE_INFO$UsnSourceInfo$VH() { return MARK_HANDLE_INFO$UsnSourceInfo$VH_; }

    static final MemoryLayout MARK_HANDLE_INFO$CopyNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO$CopyNumber$LAYOUT() { return MARK_HANDLE_INFO$CopyNumber$LAYOUT_; }

    static final VarHandle MARK_HANDLE_INFO$CopyNumber$VH_ = MARK_HANDLE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CopyNumber"));
    static final java.lang.invoke.VarHandle MARK_HANDLE_INFO$CopyNumber$VH() { return MARK_HANDLE_INFO$CopyNumber$VH_; }

    static final MemoryLayout MARK_HANDLE_INFO$VolumeHandle$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO$VolumeHandle$LAYOUT() { return MARK_HANDLE_INFO$VolumeHandle$LAYOUT_; }

    static final VarHandle MARK_HANDLE_INFO$VolumeHandle$VH_ = MemoryHandles.asAddressVarHandle(MARK_HANDLE_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("VolumeHandle")));
    static final java.lang.invoke.VarHandle MARK_HANDLE_INFO$VolumeHandle$VH() { return MARK_HANDLE_INFO$VolumeHandle$VH_; }

    static final MemoryLayout MARK_HANDLE_INFO$HandleInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO$HandleInfo$LAYOUT() { return MARK_HANDLE_INFO$HandleInfo$LAYOUT_; }

    static final VarHandle MARK_HANDLE_INFO$HandleInfo$VH_ = MARK_HANDLE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HandleInfo"));
    static final java.lang.invoke.VarHandle MARK_HANDLE_INFO$HandleInfo$VH() { return MARK_HANDLE_INFO$HandleInfo$VH_; }

    static final MemoryLayout MARK_HANDLE_INFO32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("UsnSourceInfo"),
        C_LONG.withName("CopyNumber"),
        C_INT.withName("VolumeHandle"),
        C_LONG.withName("HandleInfo")
    );
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO32$struct$LAYOUT() { return MARK_HANDLE_INFO32$struct$LAYOUT_; }

    static final MemoryLayout MARK_HANDLE_INFO32$UsnSourceInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO32$UsnSourceInfo$LAYOUT() { return MARK_HANDLE_INFO32$UsnSourceInfo$LAYOUT_; }

    static final VarHandle MARK_HANDLE_INFO32$UsnSourceInfo$VH_ = MARK_HANDLE_INFO32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UsnSourceInfo"));
    static final java.lang.invoke.VarHandle MARK_HANDLE_INFO32$UsnSourceInfo$VH() { return MARK_HANDLE_INFO32$UsnSourceInfo$VH_; }

    static final MemoryLayout MARK_HANDLE_INFO32$CopyNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO32$CopyNumber$LAYOUT() { return MARK_HANDLE_INFO32$CopyNumber$LAYOUT_; }

    static final VarHandle MARK_HANDLE_INFO32$CopyNumber$VH_ = MARK_HANDLE_INFO32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CopyNumber"));
    static final java.lang.invoke.VarHandle MARK_HANDLE_INFO32$CopyNumber$VH() { return MARK_HANDLE_INFO32$CopyNumber$VH_; }

    static final MemoryLayout MARK_HANDLE_INFO32$VolumeHandle$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO32$VolumeHandle$LAYOUT() { return MARK_HANDLE_INFO32$VolumeHandle$LAYOUT_; }

    static final VarHandle MARK_HANDLE_INFO32$VolumeHandle$VH_ = MARK_HANDLE_INFO32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VolumeHandle"));
    static final java.lang.invoke.VarHandle MARK_HANDLE_INFO32$VolumeHandle$VH() { return MARK_HANDLE_INFO32$VolumeHandle$VH_; }

    static final MemoryLayout MARK_HANDLE_INFO32$HandleInfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout MARK_HANDLE_INFO32$HandleInfo$LAYOUT() { return MARK_HANDLE_INFO32$HandleInfo$LAYOUT_; }

    static final VarHandle MARK_HANDLE_INFO32$HandleInfo$VH_ = MARK_HANDLE_INFO32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HandleInfo"));
    static final java.lang.invoke.VarHandle MARK_HANDLE_INFO32$HandleInfo$VH() { return MARK_HANDLE_INFO32$HandleInfo$VH_; }

    static final MemoryLayout BULK_SECURITY_TEST_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("DesiredAccess"),
        MemoryLayout.ofSequence(1, C_LONG).withName("SecurityIds")
    );
    static final jdk.incubator.foreign.MemoryLayout BULK_SECURITY_TEST_DATA$struct$LAYOUT() { return BULK_SECURITY_TEST_DATA$struct$LAYOUT_; }

    static final MemoryLayout BULK_SECURITY_TEST_DATA$DesiredAccess$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout BULK_SECURITY_TEST_DATA$DesiredAccess$LAYOUT() { return BULK_SECURITY_TEST_DATA$DesiredAccess$LAYOUT_; }

    static final VarHandle BULK_SECURITY_TEST_DATA$DesiredAccess$VH_ = BULK_SECURITY_TEST_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DesiredAccess"));
    static final java.lang.invoke.VarHandle BULK_SECURITY_TEST_DATA$DesiredAccess$VH() { return BULK_SECURITY_TEST_DATA$DesiredAccess$VH_; }

    static final MemoryLayout _FILE_PREFETCH$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Type"),
        C_LONG.withName("Count"),
        MemoryLayout.ofSequence(1, C_LONGLONG).withName("Prefetch")
    ).withName("_FILE_PREFETCH");
    static final jdk.incubator.foreign.MemoryLayout _FILE_PREFETCH$struct$LAYOUT() { return _FILE_PREFETCH$struct$LAYOUT_; }

    static final MemoryLayout _FILE_PREFETCH$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_PREFETCH$Type$LAYOUT() { return _FILE_PREFETCH$Type$LAYOUT_; }

    static final VarHandle _FILE_PREFETCH$Type$VH_ = _FILE_PREFETCH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _FILE_PREFETCH$Type$VH() { return _FILE_PREFETCH$Type$VH_; }

    static final MemoryLayout _FILE_PREFETCH$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_PREFETCH$Count$LAYOUT() { return _FILE_PREFETCH$Count$LAYOUT_; }

    static final VarHandle _FILE_PREFETCH$Count$VH_ = _FILE_PREFETCH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _FILE_PREFETCH$Count$VH() { return _FILE_PREFETCH$Count$VH_; }

    static final MemoryLayout _FILE_PREFETCH_EX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Type"),
        C_LONG.withName("Count"),
        C_POINTER.withName("Context"),
        MemoryLayout.ofSequence(1, C_LONGLONG).withName("Prefetch")
    ).withName("_FILE_PREFETCH_EX");
    static final jdk.incubator.foreign.MemoryLayout _FILE_PREFETCH_EX$struct$LAYOUT() { return _FILE_PREFETCH_EX$struct$LAYOUT_; }

    static final MemoryLayout _FILE_PREFETCH_EX$Type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_PREFETCH_EX$Type$LAYOUT() { return _FILE_PREFETCH_EX$Type$LAYOUT_; }

    static final VarHandle _FILE_PREFETCH_EX$Type$VH_ = _FILE_PREFETCH_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _FILE_PREFETCH_EX$Type$VH() { return _FILE_PREFETCH_EX$Type$VH_; }

    static final MemoryLayout _FILE_PREFETCH_EX$Count$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILE_PREFETCH_EX$Count$LAYOUT() { return _FILE_PREFETCH_EX$Count$LAYOUT_; }

    static final VarHandle _FILE_PREFETCH_EX$Count$VH_ = _FILE_PREFETCH_EX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Count"));
    static final java.lang.invoke.VarHandle _FILE_PREFETCH_EX$Count$VH() { return _FILE_PREFETCH_EX$Count$VH_; }

    static final MemoryLayout _FILE_PREFETCH_EX$Context$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _FILE_PREFETCH_EX$Context$LAYOUT() { return _FILE_PREFETCH_EX$Context$LAYOUT_; }

    static final VarHandle _FILE_PREFETCH_EX$Context$VH_ = MemoryHandles.asAddressVarHandle(_FILE_PREFETCH_EX$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Context")));
    static final java.lang.invoke.VarHandle _FILE_PREFETCH_EX$Context$VH() { return _FILE_PREFETCH_EX$Context$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("FileSystemType"),
        C_SHORT.withName("Version"),
        C_LONG.withName("SizeOfCompleteStructure"),
        C_LONG.withName("UserFileReads"),
        C_LONG.withName("UserFileReadBytes"),
        C_LONG.withName("UserDiskReads"),
        C_LONG.withName("UserFileWrites"),
        C_LONG.withName("UserFileWriteBytes"),
        C_LONG.withName("UserDiskWrites"),
        C_LONG.withName("MetaDataReads"),
        C_LONG.withName("MetaDataReadBytes"),
        C_LONG.withName("MetaDataDiskReads"),
        C_LONG.withName("MetaDataWrites"),
        C_LONG.withName("MetaDataWriteBytes"),
        C_LONG.withName("MetaDataDiskWrites")
    ).withName("_FILESYSTEM_STATISTICS");
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$struct$LAYOUT() { return _FILESYSTEM_STATISTICS$struct$LAYOUT_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$FileSystemType$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$FileSystemType$LAYOUT() { return _FILESYSTEM_STATISTICS$FileSystemType$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$FileSystemType$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("FileSystemType"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$FileSystemType$VH() { return _FILESYSTEM_STATISTICS$FileSystemType$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$Version$LAYOUT() { return _FILESYSTEM_STATISTICS$Version$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$Version$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$Version$VH() { return _FILESYSTEM_STATISTICS$Version$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$SizeOfCompleteStructure$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$SizeOfCompleteStructure$LAYOUT() { return _FILESYSTEM_STATISTICS$SizeOfCompleteStructure$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$SizeOfCompleteStructure$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCompleteStructure"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$SizeOfCompleteStructure$VH() { return _FILESYSTEM_STATISTICS$SizeOfCompleteStructure$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$UserFileReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$UserFileReads$LAYOUT() { return _FILESYSTEM_STATISTICS$UserFileReads$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$UserFileReads$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserFileReads"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$UserFileReads$VH() { return _FILESYSTEM_STATISTICS$UserFileReads$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$UserFileReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$UserFileReadBytes$LAYOUT() { return _FILESYSTEM_STATISTICS$UserFileReadBytes$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$UserFileReadBytes$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserFileReadBytes"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$UserFileReadBytes$VH() { return _FILESYSTEM_STATISTICS$UserFileReadBytes$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$UserDiskReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$UserDiskReads$LAYOUT() { return _FILESYSTEM_STATISTICS$UserDiskReads$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$UserDiskReads$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserDiskReads"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$UserDiskReads$VH() { return _FILESYSTEM_STATISTICS$UserDiskReads$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$UserFileWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$UserFileWrites$LAYOUT() { return _FILESYSTEM_STATISTICS$UserFileWrites$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$UserFileWrites$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserFileWrites"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$UserFileWrites$VH() { return _FILESYSTEM_STATISTICS$UserFileWrites$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$UserFileWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$UserFileWriteBytes$LAYOUT() { return _FILESYSTEM_STATISTICS$UserFileWriteBytes$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$UserFileWriteBytes$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserFileWriteBytes"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$UserFileWriteBytes$VH() { return _FILESYSTEM_STATISTICS$UserFileWriteBytes$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$UserDiskWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$UserDiskWrites$LAYOUT() { return _FILESYSTEM_STATISTICS$UserDiskWrites$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$UserDiskWrites$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UserDiskWrites"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$UserDiskWrites$VH() { return _FILESYSTEM_STATISTICS$UserDiskWrites$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$MetaDataReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$MetaDataReads$LAYOUT() { return _FILESYSTEM_STATISTICS$MetaDataReads$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$MetaDataReads$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataReads"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$MetaDataReads$VH() { return _FILESYSTEM_STATISTICS$MetaDataReads$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$MetaDataReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$MetaDataReadBytes$LAYOUT() { return _FILESYSTEM_STATISTICS$MetaDataReadBytes$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$MetaDataReadBytes$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataReadBytes"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$MetaDataReadBytes$VH() { return _FILESYSTEM_STATISTICS$MetaDataReadBytes$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$MetaDataDiskReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$MetaDataDiskReads$LAYOUT() { return _FILESYSTEM_STATISTICS$MetaDataDiskReads$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$MetaDataDiskReads$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataDiskReads"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$MetaDataDiskReads$VH() { return _FILESYSTEM_STATISTICS$MetaDataDiskReads$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$MetaDataWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$MetaDataWrites$LAYOUT() { return _FILESYSTEM_STATISTICS$MetaDataWrites$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$MetaDataWrites$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataWrites"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$MetaDataWrites$VH() { return _FILESYSTEM_STATISTICS$MetaDataWrites$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$MetaDataWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$MetaDataWriteBytes$LAYOUT() { return _FILESYSTEM_STATISTICS$MetaDataWriteBytes$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$MetaDataWriteBytes$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataWriteBytes"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$MetaDataWriteBytes$VH() { return _FILESYSTEM_STATISTICS$MetaDataWriteBytes$VH_; }

    static final MemoryLayout _FILESYSTEM_STATISTICS$MetaDataDiskWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FILESYSTEM_STATISTICS$MetaDataDiskWrites$LAYOUT() { return _FILESYSTEM_STATISTICS$MetaDataDiskWrites$LAYOUT_; }

    static final VarHandle _FILESYSTEM_STATISTICS$MetaDataDiskWrites$VH_ = _FILESYSTEM_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MetaDataDiskWrites"));
    static final java.lang.invoke.VarHandle _FILESYSTEM_STATISTICS$MetaDataDiskWrites$VH() { return _FILESYSTEM_STATISTICS$MetaDataDiskWrites$VH_; }

    static final MemoryLayout _FAT_STATISTICS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("CreateHits"),
        C_LONG.withName("SuccessfulCreates"),
        C_LONG.withName("FailedCreates"),
        C_LONG.withName("NonCachedReads"),
        C_LONG.withName("NonCachedReadBytes"),
        C_LONG.withName("NonCachedWrites"),
        C_LONG.withName("NonCachedWriteBytes"),
        C_LONG.withName("NonCachedDiskReads"),
        C_LONG.withName("NonCachedDiskWrites")
    ).withName("_FAT_STATISTICS");
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$struct$LAYOUT() { return _FAT_STATISTICS$struct$LAYOUT_; }

    static final MemoryLayout _FAT_STATISTICS$CreateHits$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$CreateHits$LAYOUT() { return _FAT_STATISTICS$CreateHits$LAYOUT_; }

    static final VarHandle _FAT_STATISTICS$CreateHits$VH_ = _FAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CreateHits"));
    static final java.lang.invoke.VarHandle _FAT_STATISTICS$CreateHits$VH() { return _FAT_STATISTICS$CreateHits$VH_; }

    static final MemoryLayout _FAT_STATISTICS$SuccessfulCreates$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$SuccessfulCreates$LAYOUT() { return _FAT_STATISTICS$SuccessfulCreates$LAYOUT_; }

    static final VarHandle _FAT_STATISTICS$SuccessfulCreates$VH_ = _FAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SuccessfulCreates"));
    static final java.lang.invoke.VarHandle _FAT_STATISTICS$SuccessfulCreates$VH() { return _FAT_STATISTICS$SuccessfulCreates$VH_; }

    static final MemoryLayout _FAT_STATISTICS$FailedCreates$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$FailedCreates$LAYOUT() { return _FAT_STATISTICS$FailedCreates$LAYOUT_; }

    static final VarHandle _FAT_STATISTICS$FailedCreates$VH_ = _FAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FailedCreates"));
    static final java.lang.invoke.VarHandle _FAT_STATISTICS$FailedCreates$VH() { return _FAT_STATISTICS$FailedCreates$VH_; }

    static final MemoryLayout _FAT_STATISTICS$NonCachedReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$NonCachedReads$LAYOUT() { return _FAT_STATISTICS$NonCachedReads$LAYOUT_; }

    static final VarHandle _FAT_STATISTICS$NonCachedReads$VH_ = _FAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedReads"));
    static final java.lang.invoke.VarHandle _FAT_STATISTICS$NonCachedReads$VH() { return _FAT_STATISTICS$NonCachedReads$VH_; }

    static final MemoryLayout _FAT_STATISTICS$NonCachedReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$NonCachedReadBytes$LAYOUT() { return _FAT_STATISTICS$NonCachedReadBytes$LAYOUT_; }

    static final VarHandle _FAT_STATISTICS$NonCachedReadBytes$VH_ = _FAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedReadBytes"));
    static final java.lang.invoke.VarHandle _FAT_STATISTICS$NonCachedReadBytes$VH() { return _FAT_STATISTICS$NonCachedReadBytes$VH_; }

    static final MemoryLayout _FAT_STATISTICS$NonCachedWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$NonCachedWrites$LAYOUT() { return _FAT_STATISTICS$NonCachedWrites$LAYOUT_; }

    static final VarHandle _FAT_STATISTICS$NonCachedWrites$VH_ = _FAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedWrites"));
    static final java.lang.invoke.VarHandle _FAT_STATISTICS$NonCachedWrites$VH() { return _FAT_STATISTICS$NonCachedWrites$VH_; }

    static final MemoryLayout _FAT_STATISTICS$NonCachedWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$NonCachedWriteBytes$LAYOUT() { return _FAT_STATISTICS$NonCachedWriteBytes$LAYOUT_; }

    static final VarHandle _FAT_STATISTICS$NonCachedWriteBytes$VH_ = _FAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedWriteBytes"));
    static final java.lang.invoke.VarHandle _FAT_STATISTICS$NonCachedWriteBytes$VH() { return _FAT_STATISTICS$NonCachedWriteBytes$VH_; }

    static final MemoryLayout _FAT_STATISTICS$NonCachedDiskReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$NonCachedDiskReads$LAYOUT() { return _FAT_STATISTICS$NonCachedDiskReads$LAYOUT_; }

    static final VarHandle _FAT_STATISTICS$NonCachedDiskReads$VH_ = _FAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedDiskReads"));
    static final java.lang.invoke.VarHandle _FAT_STATISTICS$NonCachedDiskReads$VH() { return _FAT_STATISTICS$NonCachedDiskReads$VH_; }

    static final MemoryLayout _FAT_STATISTICS$NonCachedDiskWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _FAT_STATISTICS$NonCachedDiskWrites$LAYOUT() { return _FAT_STATISTICS$NonCachedDiskWrites$LAYOUT_; }

    static final VarHandle _FAT_STATISTICS$NonCachedDiskWrites$VH_ = _FAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedDiskWrites"));
    static final java.lang.invoke.VarHandle _FAT_STATISTICS$NonCachedDiskWrites$VH() { return _FAT_STATISTICS$NonCachedDiskWrites$VH_; }

    static final MemoryLayout _EXFAT_STATISTICS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("CreateHits"),
        C_LONG.withName("SuccessfulCreates"),
        C_LONG.withName("FailedCreates"),
        C_LONG.withName("NonCachedReads"),
        C_LONG.withName("NonCachedReadBytes"),
        C_LONG.withName("NonCachedWrites"),
        C_LONG.withName("NonCachedWriteBytes"),
        C_LONG.withName("NonCachedDiskReads"),
        C_LONG.withName("NonCachedDiskWrites")
    ).withName("_EXFAT_STATISTICS");
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$struct$LAYOUT() { return _EXFAT_STATISTICS$struct$LAYOUT_; }

    static final MemoryLayout _EXFAT_STATISTICS$CreateHits$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$CreateHits$LAYOUT() { return _EXFAT_STATISTICS$CreateHits$LAYOUT_; }

    static final VarHandle _EXFAT_STATISTICS$CreateHits$VH_ = _EXFAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CreateHits"));
    static final java.lang.invoke.VarHandle _EXFAT_STATISTICS$CreateHits$VH() { return _EXFAT_STATISTICS$CreateHits$VH_; }

    static final MemoryLayout _EXFAT_STATISTICS$SuccessfulCreates$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$SuccessfulCreates$LAYOUT() { return _EXFAT_STATISTICS$SuccessfulCreates$LAYOUT_; }

    static final VarHandle _EXFAT_STATISTICS$SuccessfulCreates$VH_ = _EXFAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SuccessfulCreates"));
    static final java.lang.invoke.VarHandle _EXFAT_STATISTICS$SuccessfulCreates$VH() { return _EXFAT_STATISTICS$SuccessfulCreates$VH_; }

    static final MemoryLayout _EXFAT_STATISTICS$FailedCreates$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$FailedCreates$LAYOUT() { return _EXFAT_STATISTICS$FailedCreates$LAYOUT_; }

    static final VarHandle _EXFAT_STATISTICS$FailedCreates$VH_ = _EXFAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FailedCreates"));
    static final java.lang.invoke.VarHandle _EXFAT_STATISTICS$FailedCreates$VH() { return _EXFAT_STATISTICS$FailedCreates$VH_; }

    static final MemoryLayout _EXFAT_STATISTICS$NonCachedReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$NonCachedReads$LAYOUT() { return _EXFAT_STATISTICS$NonCachedReads$LAYOUT_; }

    static final VarHandle _EXFAT_STATISTICS$NonCachedReads$VH_ = _EXFAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedReads"));
    static final java.lang.invoke.VarHandle _EXFAT_STATISTICS$NonCachedReads$VH() { return _EXFAT_STATISTICS$NonCachedReads$VH_; }

    static final MemoryLayout _EXFAT_STATISTICS$NonCachedReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$NonCachedReadBytes$LAYOUT() { return _EXFAT_STATISTICS$NonCachedReadBytes$LAYOUT_; }

    static final VarHandle _EXFAT_STATISTICS$NonCachedReadBytes$VH_ = _EXFAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedReadBytes"));
    static final java.lang.invoke.VarHandle _EXFAT_STATISTICS$NonCachedReadBytes$VH() { return _EXFAT_STATISTICS$NonCachedReadBytes$VH_; }

    static final MemoryLayout _EXFAT_STATISTICS$NonCachedWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$NonCachedWrites$LAYOUT() { return _EXFAT_STATISTICS$NonCachedWrites$LAYOUT_; }

    static final VarHandle _EXFAT_STATISTICS$NonCachedWrites$VH_ = _EXFAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedWrites"));
    static final java.lang.invoke.VarHandle _EXFAT_STATISTICS$NonCachedWrites$VH() { return _EXFAT_STATISTICS$NonCachedWrites$VH_; }

    static final MemoryLayout _EXFAT_STATISTICS$NonCachedWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$NonCachedWriteBytes$LAYOUT() { return _EXFAT_STATISTICS$NonCachedWriteBytes$LAYOUT_; }

    static final VarHandle _EXFAT_STATISTICS$NonCachedWriteBytes$VH_ = _EXFAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedWriteBytes"));
    static final java.lang.invoke.VarHandle _EXFAT_STATISTICS$NonCachedWriteBytes$VH() { return _EXFAT_STATISTICS$NonCachedWriteBytes$VH_; }

    static final MemoryLayout _EXFAT_STATISTICS$NonCachedDiskReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$NonCachedDiskReads$LAYOUT() { return _EXFAT_STATISTICS$NonCachedDiskReads$LAYOUT_; }

    static final VarHandle _EXFAT_STATISTICS$NonCachedDiskReads$VH_ = _EXFAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedDiskReads"));
    static final java.lang.invoke.VarHandle _EXFAT_STATISTICS$NonCachedDiskReads$VH() { return _EXFAT_STATISTICS$NonCachedDiskReads$VH_; }

    static final MemoryLayout _EXFAT_STATISTICS$NonCachedDiskWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXFAT_STATISTICS$NonCachedDiskWrites$LAYOUT() { return _EXFAT_STATISTICS$NonCachedDiskWrites$LAYOUT_; }

    static final VarHandle _EXFAT_STATISTICS$NonCachedDiskWrites$VH_ = _EXFAT_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NonCachedDiskWrites"));
    static final java.lang.invoke.VarHandle _EXFAT_STATISTICS$NonCachedDiskWrites$VH() { return _EXFAT_STATISTICS$NonCachedDiskWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LogFileFullExceptions"),
        C_LONG.withName("OtherExceptions"),
        C_LONG.withName("MftReads"),
        C_LONG.withName("MftReadBytes"),
        C_LONG.withName("MftWrites"),
        C_LONG.withName("MftWriteBytes"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Write"),
            C_SHORT.withName("Create"),
            C_SHORT.withName("SetInfo"),
            C_SHORT.withName("Flush")
        ).withName("MftWritesUserLevel"),
        C_SHORT.withName("MftWritesFlushForLogFileFull"),
        C_SHORT.withName("MftWritesLazyWriter"),
        C_SHORT.withName("MftWritesUserRequest"),
        MemoryLayout.ofPaddingBits(16),
        C_LONG.withName("Mft2Writes"),
        C_LONG.withName("Mft2WriteBytes"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Write"),
            C_SHORT.withName("Create"),
            C_SHORT.withName("SetInfo"),
            C_SHORT.withName("Flush")
        ).withName("Mft2WritesUserLevel"),
        C_SHORT.withName("Mft2WritesFlushForLogFileFull"),
        C_SHORT.withName("Mft2WritesLazyWriter"),
        C_SHORT.withName("Mft2WritesUserRequest"),
        MemoryLayout.ofPaddingBits(16),
        C_LONG.withName("RootIndexReads"),
        C_LONG.withName("RootIndexReadBytes"),
        C_LONG.withName("RootIndexWrites"),
        C_LONG.withName("RootIndexWriteBytes"),
        C_LONG.withName("BitmapReads"),
        C_LONG.withName("BitmapReadBytes"),
        C_LONG.withName("BitmapWrites"),
        C_LONG.withName("BitmapWriteBytes"),
        C_SHORT.withName("BitmapWritesFlushForLogFileFull"),
        C_SHORT.withName("BitmapWritesLazyWriter"),
        C_SHORT.withName("BitmapWritesUserRequest"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Write"),
            C_SHORT.withName("Create"),
            C_SHORT.withName("SetInfo")
        ).withName("BitmapWritesUserLevel"),
        C_LONG.withName("MftBitmapReads"),
        C_LONG.withName("MftBitmapReadBytes"),
        C_LONG.withName("MftBitmapWrites"),
        C_LONG.withName("MftBitmapWriteBytes"),
        C_SHORT.withName("MftBitmapWritesFlushForLogFileFull"),
        C_SHORT.withName("MftBitmapWritesLazyWriter"),
        C_SHORT.withName("MftBitmapWritesUserRequest"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Write"),
            C_SHORT.withName("Create"),
            C_SHORT.withName("SetInfo"),
            C_SHORT.withName("Flush")
        ).withName("MftBitmapWritesUserLevel"),
        MemoryLayout.ofPaddingBits(16),
        C_LONG.withName("UserIndexReads"),
        C_LONG.withName("UserIndexReadBytes"),
        C_LONG.withName("UserIndexWrites"),
        C_LONG.withName("UserIndexWriteBytes"),
        C_LONG.withName("LogFileReads"),
        C_LONG.withName("LogFileReadBytes"),
        C_LONG.withName("LogFileWrites"),
        C_LONG.withName("LogFileWriteBytes"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Calls"),
            C_LONG.withName("Clusters"),
            C_LONG.withName("Hints"),
            C_LONG.withName("RunsReturned"),
            C_LONG.withName("HintsHonored"),
            C_LONG.withName("HintsClusters"),
            C_LONG.withName("Cache"),
            C_LONG.withName("CacheClusters"),
            C_LONG.withName("CacheMiss"),
            C_LONG.withName("CacheMissClusters")
        ).withName("Allocate"),
        C_LONG.withName("DiskResourcesExhausted")
    ).withName("_NTFS_STATISTICS");
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$struct$LAYOUT() { return _NTFS_STATISTICS$struct$LAYOUT_; }

    static final MemoryLayout _NTFS_STATISTICS$LogFileFullExceptions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$LogFileFullExceptions$LAYOUT() { return _NTFS_STATISTICS$LogFileFullExceptions$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$LogFileFullExceptions$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LogFileFullExceptions"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$LogFileFullExceptions$VH() { return _NTFS_STATISTICS$LogFileFullExceptions$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$OtherExceptions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$OtherExceptions$LAYOUT() { return _NTFS_STATISTICS$OtherExceptions$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$OtherExceptions$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OtherExceptions"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$OtherExceptions$VH() { return _NTFS_STATISTICS$OtherExceptions$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftReads$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftReads$LAYOUT() { return _NTFS_STATISTICS$MftReads$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftReads$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftReads"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftReads$VH() { return _NTFS_STATISTICS$MftReads$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftReadBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftReadBytes$LAYOUT() { return _NTFS_STATISTICS$MftReadBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftReadBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftReadBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftReadBytes$VH() { return _NTFS_STATISTICS$MftReadBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWrites$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWrites$LAYOUT() { return _NTFS_STATISTICS$MftWrites$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftWrites$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftWrites"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftWrites$VH() { return _NTFS_STATISTICS$MftWrites$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWriteBytes$LAYOUT() { return _NTFS_STATISTICS$MftWriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftWriteBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MftWriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftWriteBytes$VH() { return _NTFS_STATISTICS$MftWriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Write"),
        C_SHORT.withName("Create"),
        C_SHORT.withName("SetInfo"),
        C_SHORT.withName("Flush")
    );
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$struct$LAYOUT() { return _NTFS_STATISTICS$MftWritesUserLevel$struct$LAYOUT_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$Write$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$Write$LAYOUT() { return _NTFS_STATISTICS$MftWritesUserLevel$Write$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftWritesUserLevel$Write$VH_ = _NTFS_STATISTICS$MftWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Write"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftWritesUserLevel$Write$VH() { return _NTFS_STATISTICS$MftWritesUserLevel$Write$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$Create$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$Create$LAYOUT() { return _NTFS_STATISTICS$MftWritesUserLevel$Create$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftWritesUserLevel$Create$VH_ = _NTFS_STATISTICS$MftWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Create"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftWritesUserLevel$Create$VH() { return _NTFS_STATISTICS$MftWritesUserLevel$Create$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$SetInfo$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$SetInfo$LAYOUT() { return _NTFS_STATISTICS$MftWritesUserLevel$SetInfo$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftWritesUserLevel$SetInfo$VH_ = _NTFS_STATISTICS$MftWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SetInfo"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftWritesUserLevel$SetInfo$VH() { return _NTFS_STATISTICS$MftWritesUserLevel$SetInfo$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$Flush$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWritesUserLevel$Flush$LAYOUT() { return _NTFS_STATISTICS$MftWritesUserLevel$Flush$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftWritesUserLevel$Flush$VH_ = _NTFS_STATISTICS$MftWritesUserLevel$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flush"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftWritesUserLevel$Flush$VH() { return _NTFS_STATISTICS$MftWritesUserLevel$Flush$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWritesFlushForLogFileFull$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWritesFlushForLogFileFull$LAYOUT() { return _NTFS_STATISTICS$MftWritesFlushForLogFileFull$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftWritesFlushForLogFileFull$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MftWritesFlushForLogFileFull"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftWritesFlushForLogFileFull$VH() { return _NTFS_STATISTICS$MftWritesFlushForLogFileFull$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWritesLazyWriter$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWritesLazyWriter$LAYOUT() { return _NTFS_STATISTICS$MftWritesLazyWriter$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftWritesLazyWriter$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MftWritesLazyWriter"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftWritesLazyWriter$VH() { return _NTFS_STATISTICS$MftWritesLazyWriter$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$MftWritesUserRequest$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$MftWritesUserRequest$LAYOUT() { return _NTFS_STATISTICS$MftWritesUserRequest$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$MftWritesUserRequest$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MftWritesUserRequest"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$MftWritesUserRequest$VH() { return _NTFS_STATISTICS$MftWritesUserRequest$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$Mft2Writes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$Mft2Writes$LAYOUT() { return _NTFS_STATISTICS$Mft2Writes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$Mft2Writes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mft2Writes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$Mft2Writes$VH() { return _NTFS_STATISTICS$Mft2Writes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$Mft2WriteBytes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$Mft2WriteBytes$LAYOUT() { return _NTFS_STATISTICS$Mft2WriteBytes$LAYOUT_; }

    static final VarHandle _NTFS_STATISTICS$Mft2WriteBytes$VH_ = _NTFS_STATISTICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mft2WriteBytes"));
    static final java.lang.invoke.VarHandle _NTFS_STATISTICS$Mft2WriteBytes$VH() { return _NTFS_STATISTICS$Mft2WriteBytes$VH_; }

    static final MemoryLayout _NTFS_STATISTICS$Mft2WritesUserLevel$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Write"),
        C_SHORT.withName("Create"),
        C_SHORT.withName("SetInfo"),
        C_SHORT.withName("Flush")
    );
    static final jdk.incubator.foreign.MemoryLayout _NTFS_STATISTICS$Mft2WritesUserLevel$struct$LAYOUT() { return _NTFS_STATISTICS$Mft2WritesUserLevel$struct$LAYOUT_; }

}

