// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$16 extends cfapi_h$15 {

    /* package-private */ cfapi_h$16() {}
    public static @C("int") int SetDIBits (@C("HDC") Addressable hdc, @C("HBITMAP") Addressable hbm, @C("UINT") int start, @C("UINT") int cLines, @C("void*") Addressable lpBits, @C("const BITMAPINFO*") Addressable lpbmi, @C("UINT") int ColorUse) {
        try {
            return (int)cfapi_h$constants$32.SetDIBits$MH().invokeExact(hdc.address(), hbm.address(), start, cLines, lpBits.address(), lpbmi.address(), ColorUse);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDIBitsToDevice$MH() {
        return cfapi_h$constants$32.SetDIBitsToDevice$MH();
    }
    public static @C("int") int SetDIBitsToDevice (@C("HDC") Addressable hdc, @C("int") int xDest, @C("int") int yDest, @C("DWORD") int w, @C("DWORD") int h, @C("int") int xSrc, @C("int") int ySrc, @C("UINT") int StartScan, @C("UINT") int cLines, @C("void*") Addressable lpvBits, @C("const BITMAPINFO*") Addressable lpbmi, @C("UINT") int ColorUse) {
        try {
            return (int)cfapi_h$constants$32.SetDIBitsToDevice$MH().invokeExact(hdc.address(), xDest, yDest, w, h, xSrc, ySrc, StartScan, cLines, lpvBits.address(), lpbmi.address(), ColorUse);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMapperFlags$MH() {
        return cfapi_h$constants$32.SetMapperFlags$MH();
    }
    public static @C("DWORD") int SetMapperFlags (@C("HDC") Addressable hdc, @C("DWORD") int flags) {
        try {
            return (int)cfapi_h$constants$32.SetMapperFlags$MH().invokeExact(hdc.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetGraphicsMode$MH() {
        return cfapi_h$constants$32.SetGraphicsMode$MH();
    }
    public static @C("int") int SetGraphicsMode (@C("HDC") Addressable hdc, @C("int") int iMode) {
        try {
            return (int)cfapi_h$constants$32.SetGraphicsMode$MH().invokeExact(hdc.address(), iMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMapMode$MH() {
        return cfapi_h$constants$32.SetMapMode$MH();
    }
    public static @C("int") int SetMapMode (@C("HDC") Addressable hdc, @C("int") int iMode) {
        try {
            return (int)cfapi_h$constants$32.SetMapMode$MH().invokeExact(hdc.address(), iMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetLayout$MH() {
        return cfapi_h$constants$32.SetLayout$MH();
    }
    public static @C("DWORD") int SetLayout (@C("HDC") Addressable hdc, @C("DWORD") int l) {
        try {
            return (int)cfapi_h$constants$32.SetLayout$MH().invokeExact(hdc.address(), l);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLayout$MH() {
        return cfapi_h$constants$32.GetLayout$MH();
    }
    public static @C("DWORD") int GetLayout (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetLayout$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMetaFileBitsEx$MH() {
        return cfapi_h$constants$32.SetMetaFileBitsEx$MH();
    }
    public static @C("HMETAFILE") MemoryAddress SetMetaFileBitsEx (@C("UINT") int cbBuffer, @C("const BYTE*") Addressable lpData) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.SetMetaFileBitsEx$MH().invokeExact(cbBuffer, lpData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPaletteEntries$MH() {
        return cfapi_h$constants$32.SetPaletteEntries$MH();
    }
    public static @C("UINT") int SetPaletteEntries (@C("HPALETTE") Addressable hpal, @C("UINT") int iStart, @C("UINT") int cEntries, @C("const PALETTEENTRY*") Addressable pPalEntries) {
        try {
            return (int)cfapi_h$constants$32.SetPaletteEntries$MH().invokeExact(hpal.address(), iStart, cEntries, pPalEntries.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPixel$MH() {
        return cfapi_h$constants$32.SetPixel$MH();
    }
    public static @C("COLORREF") int SetPixel (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("COLORREF") int color) {
        try {
            return (int)cfapi_h$constants$32.SetPixel$MH().invokeExact(hdc.address(), x, y, color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPixelV$MH() {
        return cfapi_h$constants$32.SetPixelV$MH();
    }
    public static @C("BOOL") int SetPixelV (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("COLORREF") int color) {
        try {
            return (int)cfapi_h$constants$32.SetPixelV$MH().invokeExact(hdc.address(), x, y, color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPixelFormat$MH() {
        return cfapi_h$constants$32.SetPixelFormat$MH();
    }
    public static @C("BOOL") int SetPixelFormat (@C("HDC") Addressable hdc, @C("int") int format, @C("const PIXELFORMATDESCRIPTOR*") Addressable ppfd) {
        try {
            return (int)cfapi_h$constants$32.SetPixelFormat$MH().invokeExact(hdc.address(), format, ppfd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPolyFillMode$MH() {
        return cfapi_h$constants$32.SetPolyFillMode$MH();
    }
    public static @C("int") int SetPolyFillMode (@C("HDC") Addressable hdc, @C("int") int mode) {
        try {
            return (int)cfapi_h$constants$32.SetPolyFillMode$MH().invokeExact(hdc.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StretchBlt$MH() {
        return cfapi_h$constants$32.StretchBlt$MH();
    }
    public static @C("BOOL") int StretchBlt (@C("HDC") Addressable hdcDest, @C("int") int xDest, @C("int") int yDest, @C("int") int wDest, @C("int") int hDest, @C("HDC") Addressable hdcSrc, @C("int") int xSrc, @C("int") int ySrc, @C("int") int wSrc, @C("int") int hSrc, @C("DWORD") int rop) {
        try {
            return (int)cfapi_h$constants$32.StretchBlt$MH().invokeExact(hdcDest.address(), xDest, yDest, wDest, hDest, hdcSrc.address(), xSrc, ySrc, wSrc, hSrc, rop);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetRectRgn$MH() {
        return cfapi_h$constants$32.SetRectRgn$MH();
    }
    public static @C("BOOL") int SetRectRgn (@C("HRGN") Addressable hrgn, @C("int") int left, @C("int") int top, @C("int") int right, @C("int") int bottom) {
        try {
            return (int)cfapi_h$constants$32.SetRectRgn$MH().invokeExact(hrgn.address(), left, top, right, bottom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StretchDIBits$MH() {
        return cfapi_h$constants$32.StretchDIBits$MH();
    }
    public static @C("int") int StretchDIBits (@C("HDC") Addressable hdc, @C("int") int xDest, @C("int") int yDest, @C("int") int DestWidth, @C("int") int DestHeight, @C("int") int xSrc, @C("int") int ySrc, @C("int") int SrcWidth, @C("int") int SrcHeight, @C("void*") Addressable lpBits, @C("const BITMAPINFO*") Addressable lpbmi, @C("UINT") int iUsage, @C("DWORD") int rop) {
        try {
            return (int)cfapi_h$constants$32.StretchDIBits$MH().invokeExact(hdc.address(), xDest, yDest, DestWidth, DestHeight, xSrc, ySrc, SrcWidth, SrcHeight, lpBits.address(), lpbmi.address(), iUsage, rop);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetROP2$MH() {
        return cfapi_h$constants$32.SetROP2$MH();
    }
    public static @C("int") int SetROP2 (@C("HDC") Addressable hdc, @C("int") int rop2) {
        try {
            return (int)cfapi_h$constants$32.SetROP2$MH().invokeExact(hdc.address(), rop2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetStretchBltMode$MH() {
        return cfapi_h$constants$32.SetStretchBltMode$MH();
    }
    public static @C("int") int SetStretchBltMode (@C("HDC") Addressable hdc, @C("int") int mode) {
        try {
            return (int)cfapi_h$constants$32.SetStretchBltMode$MH().invokeExact(hdc.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSystemPaletteUse$MH() {
        return cfapi_h$constants$32.SetSystemPaletteUse$MH();
    }
    public static @C("UINT") int SetSystemPaletteUse (@C("HDC") Addressable hdc, @C("UINT") int use) {
        try {
            return (int)cfapi_h$constants$32.SetSystemPaletteUse$MH().invokeExact(hdc.address(), use);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTextCharacterExtra$MH() {
        return cfapi_h$constants$32.SetTextCharacterExtra$MH();
    }
    public static @C("int") int SetTextCharacterExtra (@C("HDC") Addressable hdc, @C("int") int extra) {
        try {
            return (int)cfapi_h$constants$32.SetTextCharacterExtra$MH().invokeExact(hdc.address(), extra);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTextColor$MH() {
        return cfapi_h$constants$32.SetTextColor$MH();
    }
    public static @C("COLORREF") int SetTextColor (@C("HDC") Addressable hdc, @C("COLORREF") int color) {
        try {
            return (int)cfapi_h$constants$32.SetTextColor$MH().invokeExact(hdc.address(), color);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTextAlign$MH() {
        return cfapi_h$constants$32.SetTextAlign$MH();
    }
    public static @C("UINT") int SetTextAlign (@C("HDC") Addressable hdc, @C("UINT") int align) {
        try {
            return (int)cfapi_h$constants$32.SetTextAlign$MH().invokeExact(hdc.address(), align);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTextJustification$MH() {
        return cfapi_h$constants$32.SetTextJustification$MH();
    }
    public static @C("BOOL") int SetTextJustification (@C("HDC") Addressable hdc, @C("int") int extra, @C("int") int count) {
        try {
            return (int)cfapi_h$constants$32.SetTextJustification$MH().invokeExact(hdc.address(), extra, count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateColors$MH() {
        return cfapi_h$constants$32.UpdateColors$MH();
    }
    public static @C("BOOL") int UpdateColors (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.UpdateColors$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AlphaBlend$MH() {
        return cfapi_h$constants$32.AlphaBlend$MH();
    }
    public static @C("BOOL") int AlphaBlend (@C("HDC") Addressable hdcDest, @C("int") int xoriginDest, @C("int") int yoriginDest, @C("int") int wDest, @C("int") int hDest, @C("HDC") Addressable hdcSrc, @C("int") int xoriginSrc, @C("int") int yoriginSrc, @C("int") int wSrc, @C("int") int hSrc, @C("BLENDFUNCTION") MemorySegment ftn) {
        try {
            return (int)cfapi_h$constants$32.AlphaBlend$MH().invokeExact(hdcDest.address(), xoriginDest, yoriginDest, wDest, hDest, hdcSrc.address(), xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TransparentBlt$MH() {
        return cfapi_h$constants$32.TransparentBlt$MH();
    }
    public static @C("BOOL") int TransparentBlt (@C("HDC") Addressable hdcDest, @C("int") int xoriginDest, @C("int") int yoriginDest, @C("int") int wDest, @C("int") int hDest, @C("HDC") Addressable hdcSrc, @C("int") int xoriginSrc, @C("int") int yoriginSrc, @C("int") int wSrc, @C("int") int hSrc, @C("UINT") int crTransparent) {
        try {
            return (int)cfapi_h$constants$32.TransparentBlt$MH().invokeExact(hdcDest.address(), xoriginDest, yoriginDest, wDest, hDest, hdcSrc.address(), xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GradientFill$MH() {
        return cfapi_h$constants$32.GradientFill$MH();
    }
    public static @C("BOOL") int GradientFill (@C("HDC") Addressable hdc, @C("PTRIVERTEX") Addressable pVertex, @C("ULONG") int nVertex, @C("PVOID") Addressable pMesh, @C("ULONG") int nMesh, @C("ULONG") int ulMode) {
        try {
            return (int)cfapi_h$constants$32.GradientFill$MH().invokeExact(hdc.address(), pVertex.address(), nVertex, pMesh.address(), nMesh, ulMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GdiAlphaBlend$MH() {
        return cfapi_h$constants$32.GdiAlphaBlend$MH();
    }
    public static @C("BOOL") int GdiAlphaBlend (@C("HDC") Addressable hdcDest, @C("int") int xoriginDest, @C("int") int yoriginDest, @C("int") int wDest, @C("int") int hDest, @C("HDC") Addressable hdcSrc, @C("int") int xoriginSrc, @C("int") int yoriginSrc, @C("int") int wSrc, @C("int") int hSrc, @C("BLENDFUNCTION") MemorySegment ftn) {
        try {
            return (int)cfapi_h$constants$32.GdiAlphaBlend$MH().invokeExact(hdcDest.address(), xoriginDest, yoriginDest, wDest, hDest, hdcSrc.address(), xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GdiTransparentBlt$MH() {
        return cfapi_h$constants$32.GdiTransparentBlt$MH();
    }
    public static @C("BOOL") int GdiTransparentBlt (@C("HDC") Addressable hdcDest, @C("int") int xoriginDest, @C("int") int yoriginDest, @C("int") int wDest, @C("int") int hDest, @C("HDC") Addressable hdcSrc, @C("int") int xoriginSrc, @C("int") int yoriginSrc, @C("int") int wSrc, @C("int") int hSrc, @C("UINT") int crTransparent) {
        try {
            return (int)cfapi_h$constants$32.GdiTransparentBlt$MH().invokeExact(hdcDest.address(), xoriginDest, yoriginDest, wDest, hDest, hdcSrc.address(), xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GdiGradientFill$MH() {
        return cfapi_h$constants$32.GdiGradientFill$MH();
    }
    public static @C("BOOL") int GdiGradientFill (@C("HDC") Addressable hdc, @C("PTRIVERTEX") Addressable pVertex, @C("ULONG") int nVertex, @C("PVOID") Addressable pMesh, @C("ULONG") int nCount, @C("ULONG") int ulMode) {
        try {
            return (int)cfapi_h$constants$32.GdiGradientFill$MH().invokeExact(hdc.address(), pVertex.address(), nVertex, pMesh.address(), nCount, ulMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PlayMetaFileRecord$MH() {
        return cfapi_h$constants$32.PlayMetaFileRecord$MH();
    }
    public static @C("BOOL") int PlayMetaFileRecord (@C("HDC") Addressable hdc, @C("LPHANDLETABLE") Addressable lpHandleTable, @C("LPMETARECORD") Addressable lpMR, @C("UINT") int noObjs) {
        try {
            return (int)cfapi_h$constants$32.PlayMetaFileRecord$MH().invokeExact(hdc.address(), lpHandleTable.address(), lpMR.address(), noObjs);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumMetaFile$MH() {
        return cfapi_h$constants$32.EnumMetaFile$MH();
    }
    public static @C("BOOL") int EnumMetaFile (@C("HDC") Addressable hdc, @C("HMETAFILE") Addressable hmf, @C("MFENUMPROC") Addressable proc, @C("LPARAM") long param) {
        try {
            return (int)cfapi_h$constants$32.EnumMetaFile$MH().invokeExact(hdc.address(), hmf.address(), proc.address(), param);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseEnhMetaFile$MH() {
        return cfapi_h$constants$32.CloseEnhMetaFile$MH();
    }
    public static @C("HENHMETAFILE") MemoryAddress CloseEnhMetaFile (@C("HDC") Addressable hdc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CloseEnhMetaFile$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyEnhMetaFileA$MH() {
        return cfapi_h$constants$32.CopyEnhMetaFileA$MH();
    }
    public static @C("HENHMETAFILE") MemoryAddress CopyEnhMetaFileA (@C("HENHMETAFILE") Addressable hEnh, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CopyEnhMetaFileA$MH().invokeExact(hEnh.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopyEnhMetaFileW$MH() {
        return cfapi_h$constants$32.CopyEnhMetaFileW$MH();
    }
    public static @C("HENHMETAFILE") MemoryAddress CopyEnhMetaFileW (@C("HENHMETAFILE") Addressable hEnh, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CopyEnhMetaFileW$MH().invokeExact(hEnh.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateEnhMetaFileA$MH() {
        return cfapi_h$constants$32.CreateEnhMetaFileA$MH();
    }
    public static @C("HDC") MemoryAddress CreateEnhMetaFileA (@C("HDC") Addressable hdc, @C("LPCSTR") Addressable lpFilename, @C("const RECT*") Addressable lprc, @C("LPCSTR") Addressable lpDesc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CreateEnhMetaFileA$MH().invokeExact(hdc.address(), lpFilename.address(), lprc.address(), lpDesc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateEnhMetaFileW$MH() {
        return cfapi_h$constants$32.CreateEnhMetaFileW$MH();
    }
    public static @C("HDC") MemoryAddress CreateEnhMetaFileW (@C("HDC") Addressable hdc, @C("LPCWSTR") Addressable lpFilename, @C("const RECT*") Addressable lprc, @C("LPCWSTR") Addressable lpDesc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CreateEnhMetaFileW$MH().invokeExact(hdc.address(), lpFilename.address(), lprc.address(), lpDesc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteEnhMetaFile$MH() {
        return cfapi_h$constants$32.DeleteEnhMetaFile$MH();
    }
    public static @C("BOOL") int DeleteEnhMetaFile (@C("HENHMETAFILE") Addressable hmf) {
        try {
            return (int)cfapi_h$constants$32.DeleteEnhMetaFile$MH().invokeExact(hmf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumEnhMetaFile$MH() {
        return cfapi_h$constants$32.EnumEnhMetaFile$MH();
    }
    public static @C("BOOL") int EnumEnhMetaFile (@C("HDC") Addressable hdc, @C("HENHMETAFILE") Addressable hmf, @C("ENHMFENUMPROC") Addressable proc, @C("LPVOID") Addressable param, @C("const RECT*") Addressable lpRect) {
        try {
            return (int)cfapi_h$constants$32.EnumEnhMetaFile$MH().invokeExact(hdc.address(), hmf.address(), proc.address(), param.address(), lpRect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnhMetaFileA$MH() {
        return cfapi_h$constants$32.GetEnhMetaFileA$MH();
    }
    public static @C("HENHMETAFILE") MemoryAddress GetEnhMetaFileA (@C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.GetEnhMetaFileA$MH().invokeExact(lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnhMetaFileW$MH() {
        return cfapi_h$constants$32.GetEnhMetaFileW$MH();
    }
    public static @C("HENHMETAFILE") MemoryAddress GetEnhMetaFileW (@C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.GetEnhMetaFileW$MH().invokeExact(lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnhMetaFileBits$MH() {
        return cfapi_h$constants$32.GetEnhMetaFileBits$MH();
    }
    public static @C("UINT") int GetEnhMetaFileBits (@C("HENHMETAFILE") Addressable hEMF, @C("UINT") int nSize, @C("LPBYTE") Addressable lpData) {
        try {
            return (int)cfapi_h$constants$32.GetEnhMetaFileBits$MH().invokeExact(hEMF.address(), nSize, lpData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnhMetaFileDescriptionA$MH() {
        return cfapi_h$constants$32.GetEnhMetaFileDescriptionA$MH();
    }
    public static @C("UINT") int GetEnhMetaFileDescriptionA (@C("HENHMETAFILE") Addressable hemf, @C("UINT") int cchBuffer, @C("LPSTR") Addressable lpDescription) {
        try {
            return (int)cfapi_h$constants$32.GetEnhMetaFileDescriptionA$MH().invokeExact(hemf.address(), cchBuffer, lpDescription.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnhMetaFileDescriptionW$MH() {
        return cfapi_h$constants$32.GetEnhMetaFileDescriptionW$MH();
    }
    public static @C("UINT") int GetEnhMetaFileDescriptionW (@C("HENHMETAFILE") Addressable hemf, @C("UINT") int cchBuffer, @C("LPWSTR") Addressable lpDescription) {
        try {
            return (int)cfapi_h$constants$32.GetEnhMetaFileDescriptionW$MH().invokeExact(hemf.address(), cchBuffer, lpDescription.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnhMetaFileHeader$MH() {
        return cfapi_h$constants$32.GetEnhMetaFileHeader$MH();
    }
    public static @C("UINT") int GetEnhMetaFileHeader (@C("HENHMETAFILE") Addressable hemf, @C("UINT") int nSize, @C("LPENHMETAHEADER") Addressable lpEnhMetaHeader) {
        try {
            return (int)cfapi_h$constants$32.GetEnhMetaFileHeader$MH().invokeExact(hemf.address(), nSize, lpEnhMetaHeader.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnhMetaFilePaletteEntries$MH() {
        return cfapi_h$constants$32.GetEnhMetaFilePaletteEntries$MH();
    }
    public static @C("UINT") int GetEnhMetaFilePaletteEntries (@C("HENHMETAFILE") Addressable hemf, @C("UINT") int nNumEntries, @C("LPPALETTEENTRY") Addressable lpPaletteEntries) {
        try {
            return (int)cfapi_h$constants$32.GetEnhMetaFilePaletteEntries$MH().invokeExact(hemf.address(), nNumEntries, lpPaletteEntries.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetEnhMetaFilePixelFormat$MH() {
        return cfapi_h$constants$32.GetEnhMetaFilePixelFormat$MH();
    }
    public static @C("UINT") int GetEnhMetaFilePixelFormat (@C("HENHMETAFILE") Addressable hemf, @C("UINT") int cbBuffer, @C("PIXELFORMATDESCRIPTOR*") Addressable ppfd) {
        try {
            return (int)cfapi_h$constants$32.GetEnhMetaFilePixelFormat$MH().invokeExact(hemf.address(), cbBuffer, ppfd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWinMetaFileBits$MH() {
        return cfapi_h$constants$32.GetWinMetaFileBits$MH();
    }
    public static @C("UINT") int GetWinMetaFileBits (@C("HENHMETAFILE") Addressable hemf, @C("UINT") int cbData16, @C("LPBYTE") Addressable pData16, @C("INT") int iMapMode, @C("HDC") Addressable hdcRef) {
        try {
            return (int)cfapi_h$constants$32.GetWinMetaFileBits$MH().invokeExact(hemf.address(), cbData16, pData16.address(), iMapMode, hdcRef.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PlayEnhMetaFile$MH() {
        return cfapi_h$constants$32.PlayEnhMetaFile$MH();
    }
    public static @C("BOOL") int PlayEnhMetaFile (@C("HDC") Addressable hdc, @C("HENHMETAFILE") Addressable hmf, @C("const RECT*") Addressable lprect) {
        try {
            return (int)cfapi_h$constants$32.PlayEnhMetaFile$MH().invokeExact(hdc.address(), hmf.address(), lprect.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PlayEnhMetaFileRecord$MH() {
        return cfapi_h$constants$32.PlayEnhMetaFileRecord$MH();
    }
    public static @C("BOOL") int PlayEnhMetaFileRecord (@C("HDC") Addressable hdc, @C("LPHANDLETABLE") Addressable pht, @C("const ENHMETARECORD*") Addressable pmr, @C("UINT") int cht) {
        try {
            return (int)cfapi_h$constants$32.PlayEnhMetaFileRecord$MH().invokeExact(hdc.address(), pht.address(), pmr.address(), cht);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEnhMetaFileBits$MH() {
        return cfapi_h$constants$32.SetEnhMetaFileBits$MH();
    }
    public static @C("HENHMETAFILE") MemoryAddress SetEnhMetaFileBits (@C("UINT") int nSize, @C("const BYTE*") Addressable pb) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.SetEnhMetaFileBits$MH().invokeExact(nSize, pb.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWinMetaFileBits$MH() {
        return cfapi_h$constants$32.SetWinMetaFileBits$MH();
    }
    public static @C("HENHMETAFILE") MemoryAddress SetWinMetaFileBits (@C("UINT") int nSize, @C("const BYTE*") Addressable lpMeta16Data, @C("HDC") Addressable hdcRef, @C("const METAFILEPICT*") Addressable lpMFP) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.SetWinMetaFileBits$MH().invokeExact(nSize, lpMeta16Data.address(), hdcRef.address(), lpMFP.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GdiComment$MH() {
        return cfapi_h$constants$32.GdiComment$MH();
    }
    public static @C("BOOL") int GdiComment (@C("HDC") Addressable hdc, @C("UINT") int nSize, @C("const BYTE*") Addressable lpData) {
        try {
            return (int)cfapi_h$constants$32.GdiComment$MH().invokeExact(hdc.address(), nSize, lpData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextMetricsA$MH() {
        return cfapi_h$constants$32.GetTextMetricsA$MH();
    }
    public static @C("BOOL") int GetTextMetricsA (@C("HDC") Addressable hdc, @C("LPTEXTMETRICA") Addressable lptm) {
        try {
            return (int)cfapi_h$constants$32.GetTextMetricsA$MH().invokeExact(hdc.address(), lptm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextMetricsW$MH() {
        return cfapi_h$constants$32.GetTextMetricsW$MH();
    }
    public static @C("BOOL") int GetTextMetricsW (@C("HDC") Addressable hdc, @C("LPTEXTMETRICW") Addressable lptm) {
        try {
            return (int)cfapi_h$constants$32.GetTextMetricsW$MH().invokeExact(hdc.address(), lptm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AngleArc$MH() {
        return cfapi_h$constants$32.AngleArc$MH();
    }
    public static @C("BOOL") int AngleArc (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("DWORD") int r, @C("FLOAT") float StartAngle, @C("FLOAT") float SweepAngle) {
        try {
            return (int)cfapi_h$constants$32.AngleArc$MH().invokeExact(hdc.address(), x, y, r, StartAngle, SweepAngle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PolyPolyline$MH() {
        return cfapi_h$constants$32.PolyPolyline$MH();
    }
    public static @C("BOOL") int PolyPolyline (@C("HDC") Addressable hdc, @C("const POINT*") Addressable apt, @C("const DWORD*") Addressable asz, @C("DWORD") int csz) {
        try {
            return (int)cfapi_h$constants$32.PolyPolyline$MH().invokeExact(hdc.address(), apt.address(), asz.address(), csz);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWorldTransform$MH() {
        return cfapi_h$constants$32.GetWorldTransform$MH();
    }
    public static @C("BOOL") int GetWorldTransform (@C("HDC") Addressable hdc, @C("LPXFORM") Addressable lpxf) {
        try {
            return (int)cfapi_h$constants$32.GetWorldTransform$MH().invokeExact(hdc.address(), lpxf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWorldTransform$MH() {
        return cfapi_h$constants$32.SetWorldTransform$MH();
    }
    public static @C("BOOL") int SetWorldTransform (@C("HDC") Addressable hdc, @C("const XFORM*") Addressable lpxf) {
        try {
            return (int)cfapi_h$constants$32.SetWorldTransform$MH().invokeExact(hdc.address(), lpxf.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ModifyWorldTransform$MH() {
        return cfapi_h$constants$32.ModifyWorldTransform$MH();
    }
    public static @C("BOOL") int ModifyWorldTransform (@C("HDC") Addressable hdc, @C("const XFORM*") Addressable lpxf, @C("DWORD") int mode) {
        try {
            return (int)cfapi_h$constants$32.ModifyWorldTransform$MH().invokeExact(hdc.address(), lpxf.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CombineTransform$MH() {
        return cfapi_h$constants$32.CombineTransform$MH();
    }
    public static @C("BOOL") int CombineTransform (@C("LPXFORM") Addressable lpxfOut, @C("const XFORM*") Addressable lpxf1, @C("const XFORM*") Addressable lpxf2) {
        try {
            return (int)cfapi_h$constants$32.CombineTransform$MH().invokeExact(lpxfOut.address(), lpxf1.address(), lpxf2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDIBSection$MH() {
        return cfapi_h$constants$32.CreateDIBSection$MH();
    }
    public static @C("HBITMAP") MemoryAddress CreateDIBSection (@C("HDC") Addressable hdc, @C("const BITMAPINFO*") Addressable pbmi, @C("UINT") int usage, @C("void**") Addressable ppvBits, @C("HANDLE") Addressable hSection, @C("DWORD") int offset) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CreateDIBSection$MH().invokeExact(hdc.address(), pbmi.address(), usage, ppvBits.address(), hSection.address(), offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDIBColorTable$MH() {
        return cfapi_h$constants$32.GetDIBColorTable$MH();
    }
    public static @C("UINT") int GetDIBColorTable (@C("HDC") Addressable hdc, @C("UINT") int iStart, @C("UINT") int cEntries, @C("RGBQUAD*") Addressable prgbq) {
        try {
            return (int)cfapi_h$constants$32.GetDIBColorTable$MH().invokeExact(hdc.address(), iStart, cEntries, prgbq.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDIBColorTable$MH() {
        return cfapi_h$constants$32.SetDIBColorTable$MH();
    }
    public static @C("UINT") int SetDIBColorTable (@C("HDC") Addressable hdc, @C("UINT") int iStart, @C("UINT") int cEntries, @C("const RGBQUAD*") Addressable prgbq) {
        try {
            return (int)cfapi_h$constants$32.SetDIBColorTable$MH().invokeExact(hdc.address(), iStart, cEntries, prgbq.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetColorAdjustment$MH() {
        return cfapi_h$constants$32.SetColorAdjustment$MH();
    }
    public static @C("BOOL") int SetColorAdjustment (@C("HDC") Addressable hdc, @C("const COLORADJUSTMENT*") Addressable lpca) {
        try {
            return (int)cfapi_h$constants$32.SetColorAdjustment$MH().invokeExact(hdc.address(), lpca.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetColorAdjustment$MH() {
        return cfapi_h$constants$32.GetColorAdjustment$MH();
    }
    public static @C("BOOL") int GetColorAdjustment (@C("HDC") Addressable hdc, @C("LPCOLORADJUSTMENT") Addressable lpca) {
        try {
            return (int)cfapi_h$constants$32.GetColorAdjustment$MH().invokeExact(hdc.address(), lpca.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateHalftonePalette$MH() {
        return cfapi_h$constants$32.CreateHalftonePalette$MH();
    }
    public static @C("HPALETTE") MemoryAddress CreateHalftonePalette (@C("HDC") Addressable hdc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CreateHalftonePalette$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StartDocA$MH() {
        return cfapi_h$constants$32.StartDocA$MH();
    }
    public static @C("int") int StartDocA (@C("HDC") Addressable hdc, @C("const DOCINFOA*") Addressable lpdi) {
        try {
            return (int)cfapi_h$constants$32.StartDocA$MH().invokeExact(hdc.address(), lpdi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StartDocW$MH() {
        return cfapi_h$constants$32.StartDocW$MH();
    }
    public static @C("int") int StartDocW (@C("HDC") Addressable hdc, @C("const DOCINFOW*") Addressable lpdi) {
        try {
            return (int)cfapi_h$constants$32.StartDocW$MH().invokeExact(hdc.address(), lpdi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndDoc$MH() {
        return cfapi_h$constants$32.EndDoc$MH();
    }
    public static @C("int") int EndDoc (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.EndDoc$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StartPage$MH() {
        return cfapi_h$constants$32.StartPage$MH();
    }
    public static @C("int") int StartPage (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.StartPage$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndPage$MH() {
        return cfapi_h$constants$32.EndPage$MH();
    }
    public static @C("int") int EndPage (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.EndPage$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AbortDoc$MH() {
        return cfapi_h$constants$32.AbortDoc$MH();
    }
    public static @C("int") int AbortDoc (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.AbortDoc$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetAbortProc$MH() {
        return cfapi_h$constants$32.SetAbortProc$MH();
    }
    public static @C("int") int SetAbortProc (@C("HDC") Addressable hdc, @C("ABORTPROC") Addressable proc) {
        try {
            return (int)cfapi_h$constants$32.SetAbortProc$MH().invokeExact(hdc.address(), proc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AbortPath$MH() {
        return cfapi_h$constants$32.AbortPath$MH();
    }
    public static @C("BOOL") int AbortPath (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.AbortPath$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ArcTo$MH() {
        return cfapi_h$constants$32.ArcTo$MH();
    }
    public static @C("BOOL") int ArcTo (@C("HDC") Addressable hdc, @C("int") int left, @C("int") int top, @C("int") int right, @C("int") int bottom, @C("int") int xr1, @C("int") int yr1, @C("int") int xr2, @C("int") int yr2) {
        try {
            return (int)cfapi_h$constants$32.ArcTo$MH().invokeExact(hdc.address(), left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BeginPath$MH() {
        return cfapi_h$constants$32.BeginPath$MH();
    }
    public static @C("BOOL") int BeginPath (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.BeginPath$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseFigure$MH() {
        return cfapi_h$constants$32.CloseFigure$MH();
    }
    public static @C("BOOL") int CloseFigure (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.CloseFigure$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndPath$MH() {
        return cfapi_h$constants$32.EndPath$MH();
    }
    public static @C("BOOL") int EndPath (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.EndPath$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FillPath$MH() {
        return cfapi_h$constants$32.FillPath$MH();
    }
    public static @C("BOOL") int FillPath (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.FillPath$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlattenPath$MH() {
        return cfapi_h$constants$32.FlattenPath$MH();
    }
    public static @C("BOOL") int FlattenPath (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.FlattenPath$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPath$MH() {
        return cfapi_h$constants$32.GetPath$MH();
    }
    public static @C("int") int GetPath (@C("HDC") Addressable hdc, @C("LPPOINT") Addressable apt, @C("LPBYTE") Addressable aj, @C("int") int cpt) {
        try {
            return (int)cfapi_h$constants$32.GetPath$MH().invokeExact(hdc.address(), apt.address(), aj.address(), cpt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PathToRegion$MH() {
        return cfapi_h$constants$32.PathToRegion$MH();
    }
    public static @C("HRGN") MemoryAddress PathToRegion (@C("HDC") Addressable hdc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.PathToRegion$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PolyDraw$MH() {
        return cfapi_h$constants$32.PolyDraw$MH();
    }
    public static @C("BOOL") int PolyDraw (@C("HDC") Addressable hdc, @C("const POINT*") Addressable apt, @C("const BYTE*") Addressable aj, @C("int") int cpt) {
        try {
            return (int)cfapi_h$constants$32.PolyDraw$MH().invokeExact(hdc.address(), apt.address(), aj.address(), cpt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SelectClipPath$MH() {
        return cfapi_h$constants$32.SelectClipPath$MH();
    }
    public static @C("BOOL") int SelectClipPath (@C("HDC") Addressable hdc, @C("int") int mode) {
        try {
            return (int)cfapi_h$constants$32.SelectClipPath$MH().invokeExact(hdc.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetArcDirection$MH() {
        return cfapi_h$constants$32.SetArcDirection$MH();
    }
    public static @C("int") int SetArcDirection (@C("HDC") Addressable hdc, @C("int") int dir) {
        try {
            return (int)cfapi_h$constants$32.SetArcDirection$MH().invokeExact(hdc.address(), dir);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMiterLimit$MH() {
        return cfapi_h$constants$32.SetMiterLimit$MH();
    }
    public static @C("BOOL") int SetMiterLimit (@C("HDC") Addressable hdc, @C("FLOAT") float limit, @C("PFLOAT") Addressable old) {
        try {
            return (int)cfapi_h$constants$32.SetMiterLimit$MH().invokeExact(hdc.address(), limit, old.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StrokeAndFillPath$MH() {
        return cfapi_h$constants$32.StrokeAndFillPath$MH();
    }
    public static @C("BOOL") int StrokeAndFillPath (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.StrokeAndFillPath$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StrokePath$MH() {
        return cfapi_h$constants$32.StrokePath$MH();
    }
    public static @C("BOOL") int StrokePath (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.StrokePath$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WidenPath$MH() {
        return cfapi_h$constants$32.WidenPath$MH();
    }
    public static @C("BOOL") int WidenPath (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.WidenPath$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExtCreatePen$MH() {
        return cfapi_h$constants$32.ExtCreatePen$MH();
    }
    public static @C("HPEN") MemoryAddress ExtCreatePen (@C("DWORD") int iPenStyle, @C("DWORD") int cWidth, @C("const LOGBRUSH*") Addressable plbrush, @C("DWORD") int cStyle, @C("const DWORD*") Addressable pstyle) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.ExtCreatePen$MH().invokeExact(iPenStyle, cWidth, plbrush.address(), cStyle, pstyle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMiterLimit$MH() {
        return cfapi_h$constants$32.GetMiterLimit$MH();
    }
    public static @C("BOOL") int GetMiterLimit (@C("HDC") Addressable hdc, @C("PFLOAT") Addressable plimit) {
        try {
            return (int)cfapi_h$constants$32.GetMiterLimit$MH().invokeExact(hdc.address(), plimit.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetArcDirection$MH() {
        return cfapi_h$constants$32.GetArcDirection$MH();
    }
    public static @C("int") int GetArcDirection (@C("HDC") Addressable hdc) {
        try {
            return (int)cfapi_h$constants$32.GetArcDirection$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetObjectA$MH() {
        return cfapi_h$constants$32.GetObjectA$MH();
    }
    public static @C("int") int GetObjectA (@C("HANDLE") Addressable h, @C("int") int c, @C("LPVOID") Addressable pv) {
        try {
            return (int)cfapi_h$constants$32.GetObjectA$MH().invokeExact(h.address(), c, pv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetObjectW$MH() {
        return cfapi_h$constants$32.GetObjectW$MH();
    }
    public static @C("int") int GetObjectW (@C("HANDLE") Addressable h, @C("int") int c, @C("LPVOID") Addressable pv) {
        try {
            return (int)cfapi_h$constants$32.GetObjectW$MH().invokeExact(h.address(), c, pv.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveToEx$MH() {
        return cfapi_h$constants$32.MoveToEx$MH();
    }
    public static @C("BOOL") int MoveToEx (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPPOINT") Addressable lppt) {
        try {
            return (int)cfapi_h$constants$32.MoveToEx$MH().invokeExact(hdc.address(), x, y, lppt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TextOutA$MH() {
        return cfapi_h$constants$32.TextOutA$MH();
    }
    public static @C("BOOL") int TextOutA (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPCSTR") Addressable lpString, @C("int") int c) {
        try {
            return (int)cfapi_h$constants$32.TextOutA$MH().invokeExact(hdc.address(), x, y, lpString.address(), c);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TextOutW$MH() {
        return cfapi_h$constants$32.TextOutW$MH();
    }
    public static @C("BOOL") int TextOutW (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPCWSTR") Addressable lpString, @C("int") int c) {
        try {
            return (int)cfapi_h$constants$32.TextOutW$MH().invokeExact(hdc.address(), x, y, lpString.address(), c);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExtTextOutA$MH() {
        return cfapi_h$constants$32.ExtTextOutA$MH();
    }
    public static @C("BOOL") int ExtTextOutA (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("UINT") int options, @C("const RECT*") Addressable lprect, @C("LPCSTR") Addressable lpString, @C("UINT") int c, @C("const INT*") Addressable lpDx) {
        try {
            return (int)cfapi_h$constants$32.ExtTextOutA$MH().invokeExact(hdc.address(), x, y, options, lprect.address(), lpString.address(), c, lpDx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExtTextOutW$MH() {
        return cfapi_h$constants$32.ExtTextOutW$MH();
    }
    public static @C("BOOL") int ExtTextOutW (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("UINT") int options, @C("const RECT*") Addressable lprect, @C("LPCWSTR") Addressable lpString, @C("UINT") int c, @C("const INT*") Addressable lpDx) {
        try {
            return (int)cfapi_h$constants$32.ExtTextOutW$MH().invokeExact(hdc.address(), x, y, options, lprect.address(), lpString.address(), c, lpDx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PolyTextOutA$MH() {
        return cfapi_h$constants$32.PolyTextOutA$MH();
    }
    public static @C("BOOL") int PolyTextOutA (@C("HDC") Addressable hdc, @C("const POLYTEXTA*") Addressable ppt, @C("int") int nstrings) {
        try {
            return (int)cfapi_h$constants$32.PolyTextOutA$MH().invokeExact(hdc.address(), ppt.address(), nstrings);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PolyTextOutW$MH() {
        return cfapi_h$constants$32.PolyTextOutW$MH();
    }
    public static @C("BOOL") int PolyTextOutW (@C("HDC") Addressable hdc, @C("const POLYTEXTW*") Addressable ppt, @C("int") int nstrings) {
        try {
            return (int)cfapi_h$constants$32.PolyTextOutW$MH().invokeExact(hdc.address(), ppt.address(), nstrings);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePolygonRgn$MH() {
        return cfapi_h$constants$32.CreatePolygonRgn$MH();
    }
    public static @C("HRGN") MemoryAddress CreatePolygonRgn (@C("const POINT*") Addressable pptl, @C("int") int cPoint, @C("int") int iMode) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CreatePolygonRgn$MH().invokeExact(pptl.address(), cPoint, iMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DPtoLP$MH() {
        return cfapi_h$constants$32.DPtoLP$MH();
    }
    public static @C("BOOL") int DPtoLP (@C("HDC") Addressable hdc, @C("LPPOINT") Addressable lppt, @C("int") int c) {
        try {
            return (int)cfapi_h$constants$32.DPtoLP$MH().invokeExact(hdc.address(), lppt.address(), c);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LPtoDP$MH() {
        return cfapi_h$constants$32.LPtoDP$MH();
    }
    public static @C("BOOL") int LPtoDP (@C("HDC") Addressable hdc, @C("LPPOINT") Addressable lppt, @C("int") int c) {
        try {
            return (int)cfapi_h$constants$32.LPtoDP$MH().invokeExact(hdc.address(), lppt.address(), c);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Polygon$MH() {
        return cfapi_h$constants$32.Polygon$MH();
    }
    public static @C("BOOL") int Polygon (@C("HDC") Addressable hdc, @C("const POINT*") Addressable apt, @C("int") int cpt) {
        try {
            return (int)cfapi_h$constants$32.Polygon$MH().invokeExact(hdc.address(), apt.address(), cpt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Polyline$MH() {
        return cfapi_h$constants$32.Polyline$MH();
    }
    public static @C("BOOL") int Polyline (@C("HDC") Addressable hdc, @C("const POINT*") Addressable apt, @C("int") int cpt) {
        try {
            return (int)cfapi_h$constants$32.Polyline$MH().invokeExact(hdc.address(), apt.address(), cpt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PolyBezier$MH() {
        return cfapi_h$constants$32.PolyBezier$MH();
    }
    public static @C("BOOL") int PolyBezier (@C("HDC") Addressable hdc, @C("const POINT*") Addressable apt, @C("DWORD") int cpt) {
        try {
            return (int)cfapi_h$constants$32.PolyBezier$MH().invokeExact(hdc.address(), apt.address(), cpt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PolyBezierTo$MH() {
        return cfapi_h$constants$32.PolyBezierTo$MH();
    }
    public static @C("BOOL") int PolyBezierTo (@C("HDC") Addressable hdc, @C("const POINT*") Addressable apt, @C("DWORD") int cpt) {
        try {
            return (int)cfapi_h$constants$32.PolyBezierTo$MH().invokeExact(hdc.address(), apt.address(), cpt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PolylineTo$MH() {
        return cfapi_h$constants$32.PolylineTo$MH();
    }
    public static @C("BOOL") int PolylineTo (@C("HDC") Addressable hdc, @C("const POINT*") Addressable apt, @C("DWORD") int cpt) {
        try {
            return (int)cfapi_h$constants$32.PolylineTo$MH().invokeExact(hdc.address(), apt.address(), cpt);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetViewportExtEx$MH() {
        return cfapi_h$constants$32.SetViewportExtEx$MH();
    }
    public static @C("BOOL") int SetViewportExtEx (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPSIZE") Addressable lpsz) {
        try {
            return (int)cfapi_h$constants$32.SetViewportExtEx$MH().invokeExact(hdc.address(), x, y, lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetViewportOrgEx$MH() {
        return cfapi_h$constants$32.SetViewportOrgEx$MH();
    }
    public static @C("BOOL") int SetViewportOrgEx (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPPOINT") Addressable lppt) {
        try {
            return (int)cfapi_h$constants$32.SetViewportOrgEx$MH().invokeExact(hdc.address(), x, y, lppt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowExtEx$MH() {
        return cfapi_h$constants$32.SetWindowExtEx$MH();
    }
    public static @C("BOOL") int SetWindowExtEx (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPSIZE") Addressable lpsz) {
        try {
            return (int)cfapi_h$constants$32.SetWindowExtEx$MH().invokeExact(hdc.address(), x, y, lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowOrgEx$MH() {
        return cfapi_h$constants$32.SetWindowOrgEx$MH();
    }
    public static @C("BOOL") int SetWindowOrgEx (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPPOINT") Addressable lppt) {
        try {
            return (int)cfapi_h$constants$32.SetWindowOrgEx$MH().invokeExact(hdc.address(), x, y, lppt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OffsetViewportOrgEx$MH() {
        return cfapi_h$constants$32.OffsetViewportOrgEx$MH();
    }
    public static @C("BOOL") int OffsetViewportOrgEx (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPPOINT") Addressable lppt) {
        try {
            return (int)cfapi_h$constants$32.OffsetViewportOrgEx$MH().invokeExact(hdc.address(), x, y, lppt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OffsetWindowOrgEx$MH() {
        return cfapi_h$constants$32.OffsetWindowOrgEx$MH();
    }
    public static @C("BOOL") int OffsetWindowOrgEx (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPPOINT") Addressable lppt) {
        try {
            return (int)cfapi_h$constants$32.OffsetWindowOrgEx$MH().invokeExact(hdc.address(), x, y, lppt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ScaleViewportExtEx$MH() {
        return cfapi_h$constants$32.ScaleViewportExtEx$MH();
    }
    public static @C("BOOL") int ScaleViewportExtEx (@C("HDC") Addressable hdc, @C("int") int xn, @C("int") int dx, @C("int") int yn, @C("int") int yd, @C("LPSIZE") Addressable lpsz) {
        try {
            return (int)cfapi_h$constants$32.ScaleViewportExtEx$MH().invokeExact(hdc.address(), xn, dx, yn, yd, lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ScaleWindowExtEx$MH() {
        return cfapi_h$constants$32.ScaleWindowExtEx$MH();
    }
    public static @C("BOOL") int ScaleWindowExtEx (@C("HDC") Addressable hdc, @C("int") int xn, @C("int") int xd, @C("int") int yn, @C("int") int yd, @C("LPSIZE") Addressable lpsz) {
        try {
            return (int)cfapi_h$constants$32.ScaleWindowExtEx$MH().invokeExact(hdc.address(), xn, xd, yn, yd, lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetBitmapDimensionEx$MH() {
        return cfapi_h$constants$32.SetBitmapDimensionEx$MH();
    }
    public static @C("BOOL") int SetBitmapDimensionEx (@C("HBITMAP") Addressable hbm, @C("int") int w, @C("int") int h, @C("LPSIZE") Addressable lpsz) {
        try {
            return (int)cfapi_h$constants$32.SetBitmapDimensionEx$MH().invokeExact(hbm.address(), w, h, lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetBrushOrgEx$MH() {
        return cfapi_h$constants$32.SetBrushOrgEx$MH();
    }
    public static @C("BOOL") int SetBrushOrgEx (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPPOINT") Addressable lppt) {
        try {
            return (int)cfapi_h$constants$32.SetBrushOrgEx$MH().invokeExact(hdc.address(), x, y, lppt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextFaceA$MH() {
        return cfapi_h$constants$32.GetTextFaceA$MH();
    }
    public static @C("int") int GetTextFaceA (@C("HDC") Addressable hdc, @C("int") int c, @C("LPSTR") Addressable lpName) {
        try {
            return (int)cfapi_h$constants$32.GetTextFaceA$MH().invokeExact(hdc.address(), c, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTextFaceW$MH() {
        return cfapi_h$constants$32.GetTextFaceW$MH();
    }
    public static @C("int") int GetTextFaceW (@C("HDC") Addressable hdc, @C("int") int c, @C("LPWSTR") Addressable lpName) {
        try {
            return (int)cfapi_h$constants$32.GetTextFaceW$MH().invokeExact(hdc.address(), c, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKerningPairsA$MH() {
        return cfapi_h$constants$32.GetKerningPairsA$MH();
    }
    public static @C("DWORD") int GetKerningPairsA (@C("HDC") Addressable hdc, @C("DWORD") int nPairs, @C("LPKERNINGPAIR") Addressable lpKernPair) {
        try {
            return (int)cfapi_h$constants$32.GetKerningPairsA$MH().invokeExact(hdc.address(), nPairs, lpKernPair.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKerningPairsW$MH() {
        return cfapi_h$constants$32.GetKerningPairsW$MH();
    }
    public static @C("DWORD") int GetKerningPairsW (@C("HDC") Addressable hdc, @C("DWORD") int nPairs, @C("LPKERNINGPAIR") Addressable lpKernPair) {
        try {
            return (int)cfapi_h$constants$32.GetKerningPairsW$MH().invokeExact(hdc.address(), nPairs, lpKernPair.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDCOrgEx$MH() {
        return cfapi_h$constants$32.GetDCOrgEx$MH();
    }
    public static @C("BOOL") int GetDCOrgEx (@C("HDC") Addressable hdc, @C("LPPOINT") Addressable lppt) {
        try {
            return (int)cfapi_h$constants$32.GetDCOrgEx$MH().invokeExact(hdc.address(), lppt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FixBrushOrgEx$MH() {
        return cfapi_h$constants$32.FixBrushOrgEx$MH();
    }
    public static @C("BOOL") int FixBrushOrgEx (@C("HDC") Addressable hdc, @C("int") int x, @C("int") int y, @C("LPPOINT") Addressable ptl) {
        try {
            return (int)cfapi_h$constants$32.FixBrushOrgEx$MH().invokeExact(hdc.address(), x, y, ptl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnrealizeObject$MH() {
        return cfapi_h$constants$32.UnrealizeObject$MH();
    }
    public static @C("BOOL") int UnrealizeObject (@C("HGDIOBJ") Addressable h) {
        try {
            return (int)cfapi_h$constants$32.UnrealizeObject$MH().invokeExact(h.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GdiFlush$MH() {
        return cfapi_h$constants$32.GdiFlush$MH();
    }
    public static @C("BOOL") int GdiFlush () {
        try {
            return (int)cfapi_h$constants$32.GdiFlush$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GdiSetBatchLimit$MH() {
        return cfapi_h$constants$32.GdiSetBatchLimit$MH();
    }
    public static @C("DWORD") int GdiSetBatchLimit (@C("DWORD") int dw) {
        try {
            return (int)cfapi_h$constants$32.GdiSetBatchLimit$MH().invokeExact(dw);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GdiGetBatchLimit$MH() {
        return cfapi_h$constants$32.GdiGetBatchLimit$MH();
    }
    public static @C("DWORD") int GdiGetBatchLimit () {
        try {
            return (int)cfapi_h$constants$32.GdiGetBatchLimit$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetICMMode$MH() {
        return cfapi_h$constants$32.SetICMMode$MH();
    }
    public static @C("int") int SetICMMode (@C("HDC") Addressable hdc, @C("int") int mode) {
        try {
            return (int)cfapi_h$constants$32.SetICMMode$MH().invokeExact(hdc.address(), mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckColorsInGamut$MH() {
        return cfapi_h$constants$32.CheckColorsInGamut$MH();
    }
    public static @C("BOOL") int CheckColorsInGamut (@C("HDC") Addressable hdc, @C("LPRGBTRIPLE") Addressable lpRGBTriple, @C("LPVOID") Addressable dlpBuffer, @C("DWORD") int nCount) {
        try {
            return (int)cfapi_h$constants$32.CheckColorsInGamut$MH().invokeExact(hdc.address(), lpRGBTriple.address(), dlpBuffer.address(), nCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetColorSpace$MH() {
        return cfapi_h$constants$32.GetColorSpace$MH();
    }
    public static @C("HCOLORSPACE") MemoryAddress GetColorSpace (@C("HDC") Addressable hdc) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.GetColorSpace$MH().invokeExact(hdc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLogColorSpaceA$MH() {
        return cfapi_h$constants$32.GetLogColorSpaceA$MH();
    }
    public static @C("BOOL") int GetLogColorSpaceA (@C("HCOLORSPACE") Addressable hColorSpace, @C("LPLOGCOLORSPACEA") Addressable lpBuffer, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$32.GetLogColorSpaceA$MH().invokeExact(hColorSpace.address(), lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLogColorSpaceW$MH() {
        return cfapi_h$constants$32.GetLogColorSpaceW$MH();
    }
    public static @C("BOOL") int GetLogColorSpaceW (@C("HCOLORSPACE") Addressable hColorSpace, @C("LPLOGCOLORSPACEW") Addressable lpBuffer, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$32.GetLogColorSpaceW$MH().invokeExact(hColorSpace.address(), lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateColorSpaceA$MH() {
        return cfapi_h$constants$32.CreateColorSpaceA$MH();
    }
    public static @C("HCOLORSPACE") MemoryAddress CreateColorSpaceA (@C("LPLOGCOLORSPACEA") Addressable lplcs) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CreateColorSpaceA$MH().invokeExact(lplcs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateColorSpaceW$MH() {
        return cfapi_h$constants$32.CreateColorSpaceW$MH();
    }
    public static @C("HCOLORSPACE") MemoryAddress CreateColorSpaceW (@C("LPLOGCOLORSPACEW") Addressable lplcs) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.CreateColorSpaceW$MH().invokeExact(lplcs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetColorSpace$MH() {
        return cfapi_h$constants$32.SetColorSpace$MH();
    }
    public static @C("HCOLORSPACE") MemoryAddress SetColorSpace (@C("HDC") Addressable hdc, @C("HCOLORSPACE") Addressable hcs) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$32.SetColorSpace$MH().invokeExact(hdc.address(), hcs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteColorSpace$MH() {
        return cfapi_h$constants$32.DeleteColorSpace$MH();
    }
    public static @C("BOOL") int DeleteColorSpace (@C("HCOLORSPACE") Addressable hcs) {
        try {
            return (int)cfapi_h$constants$32.DeleteColorSpace$MH().invokeExact(hcs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetICMProfileA$MH() {
        return cfapi_h$constants$32.GetICMProfileA$MH();
    }
    public static @C("BOOL") int GetICMProfileA (@C("HDC") Addressable hdc, @C("LPDWORD") Addressable pBufSize, @C("LPSTR") Addressable pszFilename) {
        try {
            return (int)cfapi_h$constants$32.GetICMProfileA$MH().invokeExact(hdc.address(), pBufSize.address(), pszFilename.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetICMProfileW$MH() {
        return cfapi_h$constants$32.GetICMProfileW$MH();
    }
    public static @C("BOOL") int GetICMProfileW (@C("HDC") Addressable hdc, @C("LPDWORD") Addressable pBufSize, @C("LPWSTR") Addressable pszFilename) {
        try {
            return (int)cfapi_h$constants$32.GetICMProfileW$MH().invokeExact(hdc.address(), pBufSize.address(), pszFilename.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetICMProfileA$MH() {
        return cfapi_h$constants$32.SetICMProfileA$MH();
    }
    public static @C("BOOL") int SetICMProfileA (@C("HDC") Addressable hdc, @C("LPSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$32.SetICMProfileA$MH().invokeExact(hdc.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetICMProfileW$MH() {
        return cfapi_h$constants$32.SetICMProfileW$MH();
    }
    public static @C("BOOL") int SetICMProfileW (@C("HDC") Addressable hdc, @C("LPWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$32.SetICMProfileW$MH().invokeExact(hdc.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDeviceGammaRamp$MH() {
        return cfapi_h$constants$32.GetDeviceGammaRamp$MH();
    }
    public static @C("BOOL") int GetDeviceGammaRamp (@C("HDC") Addressable hdc, @C("LPVOID") Addressable lpRamp) {
        try {
            return (int)cfapi_h$constants$32.GetDeviceGammaRamp$MH().invokeExact(hdc.address(), lpRamp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDeviceGammaRamp$MH() {
        return cfapi_h$constants$32.SetDeviceGammaRamp$MH();
    }
    public static @C("BOOL") int SetDeviceGammaRamp (@C("HDC") Addressable hdc, @C("LPVOID") Addressable lpRamp) {
        try {
            return (int)cfapi_h$constants$32.SetDeviceGammaRamp$MH().invokeExact(hdc.address(), lpRamp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ColorMatchToTarget$MH() {
        return cfapi_h$constants$32.ColorMatchToTarget$MH();
    }
    public static @C("BOOL") int ColorMatchToTarget (@C("HDC") Addressable hdc, @C("HDC") Addressable hdcTarget, @C("DWORD") int action) {
        try {
            return (int)cfapi_h$constants$32.ColorMatchToTarget$MH().invokeExact(hdc.address(), hdcTarget.address(), action);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumICMProfilesA$MH() {
        return cfapi_h$constants$32.EnumICMProfilesA$MH();
    }
    public static @C("int") int EnumICMProfilesA (@C("HDC") Addressable hdc, @C("ICMENUMPROCA") Addressable proc, @C("LPARAM") long param) {
        try {
            return (int)cfapi_h$constants$32.EnumICMProfilesA$MH().invokeExact(hdc.address(), proc.address(), param);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumICMProfilesW$MH() {
        return cfapi_h$constants$32.EnumICMProfilesW$MH();
    }
    public static @C("int") int EnumICMProfilesW (@C("HDC") Addressable hdc, @C("ICMENUMPROCW") Addressable proc, @C("LPARAM") long param) {
        try {
            return (int)cfapi_h$constants$32.EnumICMProfilesW$MH().invokeExact(hdc.address(), proc.address(), param);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateICMRegKeyA$MH() {
        return cfapi_h$constants$32.UpdateICMRegKeyA$MH();
    }
    public static @C("BOOL") int UpdateICMRegKeyA (@C("DWORD") int reserved, @C("LPSTR") Addressable lpszCMID, @C("LPSTR") Addressable lpszFileName, @C("UINT") int command) {
        try {
            return (int)cfapi_h$constants$32.UpdateICMRegKeyA$MH().invokeExact(reserved, lpszCMID.address(), lpszFileName.address(), command);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateICMRegKeyW$MH() {
        return cfapi_h$constants$32.UpdateICMRegKeyW$MH();
    }
    public static @C("BOOL") int UpdateICMRegKeyW (@C("DWORD") int reserved, @C("LPWSTR") Addressable lpszCMID, @C("LPWSTR") Addressable lpszFileName, @C("UINT") int command) {
        try {
            return (int)cfapi_h$constants$32.UpdateICMRegKeyW$MH().invokeExact(reserved, lpszCMID.address(), lpszFileName.address(), command);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ColorCorrectPalette$MH() {
        return cfapi_h$constants$32.ColorCorrectPalette$MH();
    }
    public static @C("BOOL") int ColorCorrectPalette (@C("HDC") Addressable hdc, @C("HPALETTE") Addressable hPal, @C("DWORD") int deFirst, @C("DWORD") int num) {
        try {
            return (int)cfapi_h$constants$32.ColorCorrectPalette$MH().invokeExact(hdc.address(), hPal.address(), deFirst, num);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglCopyContext$MH() {
        return cfapi_h$constants$34.wglCopyContext$MH();
    }
    public static @C("BOOL") int wglCopyContext (@C("HGLRC") Addressable x0, @C("HGLRC") Addressable x1, @C("UINT") int x2) {
        try {
            return (int)cfapi_h$constants$34.wglCopyContext$MH().invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglCreateContext$MH() {
        return cfapi_h$constants$34.wglCreateContext$MH();
    }
    public static @C("HGLRC") MemoryAddress wglCreateContext (@C("HDC") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.wglCreateContext$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglCreateLayerContext$MH() {
        return cfapi_h$constants$34.wglCreateLayerContext$MH();
    }
    public static @C("HGLRC") MemoryAddress wglCreateLayerContext (@C("HDC") Addressable x0, @C("int") int x1) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.wglCreateLayerContext$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglDeleteContext$MH() {
        return cfapi_h$constants$34.wglDeleteContext$MH();
    }
    public static @C("BOOL") int wglDeleteContext (@C("HGLRC") Addressable x0) {
        try {
            return (int)cfapi_h$constants$34.wglDeleteContext$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglGetCurrentContext$MH() {
        return cfapi_h$constants$34.wglGetCurrentContext$MH();
    }
    public static @C("HGLRC") MemoryAddress wglGetCurrentContext () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.wglGetCurrentContext$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglGetCurrentDC$MH() {
        return cfapi_h$constants$34.wglGetCurrentDC$MH();
    }
    public static @C("HDC") MemoryAddress wglGetCurrentDC () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.wglGetCurrentDC$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglGetProcAddress$MH() {
        return cfapi_h$constants$34.wglGetProcAddress$MH();
    }
    public static @C("PROC") MemoryAddress wglGetProcAddress (@C("LPCSTR") Addressable x0) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.wglGetProcAddress$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglMakeCurrent$MH() {
        return cfapi_h$constants$34.wglMakeCurrent$MH();
    }
    public static @C("BOOL") int wglMakeCurrent (@C("HDC") Addressable x0, @C("HGLRC") Addressable x1) {
        try {
            return (int)cfapi_h$constants$34.wglMakeCurrent$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglShareLists$MH() {
        return cfapi_h$constants$34.wglShareLists$MH();
    }
    public static @C("BOOL") int wglShareLists (@C("HGLRC") Addressable x0, @C("HGLRC") Addressable x1) {
        try {
            return (int)cfapi_h$constants$34.wglShareLists$MH().invokeExact(x0.address(), x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglUseFontBitmapsA$MH() {
        return cfapi_h$constants$34.wglUseFontBitmapsA$MH();
    }
    public static @C("BOOL") int wglUseFontBitmapsA (@C("HDC") Addressable x0, @C("DWORD") int x1, @C("DWORD") int x2, @C("DWORD") int x3) {
        try {
            return (int)cfapi_h$constants$34.wglUseFontBitmapsA$MH().invokeExact(x0.address(), x1, x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglUseFontBitmapsW$MH() {
        return cfapi_h$constants$34.wglUseFontBitmapsW$MH();
    }
    public static @C("BOOL") int wglUseFontBitmapsW (@C("HDC") Addressable x0, @C("DWORD") int x1, @C("DWORD") int x2, @C("DWORD") int x3) {
        try {
            return (int)cfapi_h$constants$34.wglUseFontBitmapsW$MH().invokeExact(x0.address(), x1, x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SwapBuffers$MH() {
        return cfapi_h$constants$34.SwapBuffers$MH();
    }
    public static @C("BOOL") int SwapBuffers (@C("HDC") Addressable x0) {
        try {
            return (int)cfapi_h$constants$34.SwapBuffers$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglUseFontOutlinesA$MH() {
        return cfapi_h$constants$34.wglUseFontOutlinesA$MH();
    }
    public static @C("BOOL") int wglUseFontOutlinesA (@C("HDC") Addressable x0, @C("DWORD") int x1, @C("DWORD") int x2, @C("DWORD") int x3, @C("FLOAT") float x4, @C("FLOAT") float x5, @C("int") int x6, @C("LPGLYPHMETRICSFLOAT") Addressable x7) {
        try {
            return (int)cfapi_h$constants$34.wglUseFontOutlinesA$MH().invokeExact(x0.address(), x1, x2, x3, x4, x5, x6, x7.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglUseFontOutlinesW$MH() {
        return cfapi_h$constants$34.wglUseFontOutlinesW$MH();
    }
    public static @C("BOOL") int wglUseFontOutlinesW (@C("HDC") Addressable x0, @C("DWORD") int x1, @C("DWORD") int x2, @C("DWORD") int x3, @C("FLOAT") float x4, @C("FLOAT") float x5, @C("int") int x6, @C("LPGLYPHMETRICSFLOAT") Addressable x7) {
        try {
            return (int)cfapi_h$constants$34.wglUseFontOutlinesW$MH().invokeExact(x0.address(), x1, x2, x3, x4, x5, x6, x7.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglDescribeLayerPlane$MH() {
        return cfapi_h$constants$34.wglDescribeLayerPlane$MH();
    }
    public static @C("BOOL") int wglDescribeLayerPlane (@C("HDC") Addressable x0, @C("int") int x1, @C("int") int x2, @C("UINT") int x3, @C("LPLAYERPLANEDESCRIPTOR") Addressable x4) {
        try {
            return (int)cfapi_h$constants$34.wglDescribeLayerPlane$MH().invokeExact(x0.address(), x1, x2, x3, x4.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglSetLayerPaletteEntries$MH() {
        return cfapi_h$constants$34.wglSetLayerPaletteEntries$MH();
    }
    public static @C("int") int wglSetLayerPaletteEntries (@C("HDC") Addressable x0, @C("int") int x1, @C("int") int x2, @C("int") int x3, @C("const COLORREF*") Addressable x4) {
        try {
            return (int)cfapi_h$constants$34.wglSetLayerPaletteEntries$MH().invokeExact(x0.address(), x1, x2, x3, x4.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglGetLayerPaletteEntries$MH() {
        return cfapi_h$constants$34.wglGetLayerPaletteEntries$MH();
    }
    public static @C("int") int wglGetLayerPaletteEntries (@C("HDC") Addressable x0, @C("int") int x1, @C("int") int x2, @C("int") int x3, @C("COLORREF*") Addressable x4) {
        try {
            return (int)cfapi_h$constants$34.wglGetLayerPaletteEntries$MH().invokeExact(x0.address(), x1, x2, x3, x4.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglRealizeLayerPalette$MH() {
        return cfapi_h$constants$34.wglRealizeLayerPalette$MH();
    }
    public static @C("BOOL") int wglRealizeLayerPalette (@C("HDC") Addressable x0, @C("int") int x1, @C("BOOL") int x2) {
        try {
            return (int)cfapi_h$constants$34.wglRealizeLayerPalette$MH().invokeExact(x0.address(), x1, x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglSwapLayerBuffers$MH() {
        return cfapi_h$constants$34.wglSwapLayerBuffers$MH();
    }
    public static @C("BOOL") int wglSwapLayerBuffers (@C("HDC") Addressable x0, @C("UINT") int x1) {
        try {
            return (int)cfapi_h$constants$34.wglSwapLayerBuffers$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wglSwapMultipleBuffers$MH() {
        return cfapi_h$constants$34.wglSwapMultipleBuffers$MH();
    }
    public static @C("DWORD") int wglSwapMultipleBuffers (@C("UINT") int x0, @C("const WGLSWAP*") Addressable x1) {
        try {
            return (int)cfapi_h$constants$34.wglSwapMultipleBuffers$MH().invokeExact(x0, x1.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wvsprintfA$MH() {
        return cfapi_h$constants$34.wvsprintfA$MH();
    }
    public static @C("int") int wvsprintfA (@C("LPSTR") Addressable x0, @C("LPCSTR") Addressable x1, @C("va_list") Addressable arglist) {
        try {
            return (int)cfapi_h$constants$34.wvsprintfA$MH().invokeExact(x0.address(), x1.address(), arglist.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wvsprintfW$MH() {
        return cfapi_h$constants$34.wvsprintfW$MH();
    }
    public static @C("int") int wvsprintfW (@C("LPWSTR") Addressable x0, @C("LPCWSTR") Addressable x1, @C("va_list") Addressable arglist) {
        try {
            return (int)cfapi_h$constants$34.wvsprintfW$MH().invokeExact(x0.address(), x1.address(), arglist.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wsprintfA$MH() {
        return cfapi_h$constants$34.wsprintfA$MH();
    }
    public static @C("int") int wsprintfA (@C("LPSTR") Addressable x0, @C("LPCSTR") Addressable x1, Object... x2) {
        try {
            return (int)cfapi_h$constants$34.wsprintfA$MH().invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wsprintfW$MH() {
        return cfapi_h$constants$34.wsprintfW$MH();
    }
    public static @C("int") int wsprintfW (@C("LPWSTR") Addressable x0, @C("LPCWSTR") Addressable x1, Object... x2) {
        try {
            return (int)cfapi_h$constants$34.wsprintfW$MH().invokeExact(x0.address(), x1.address(), x2);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadKeyboardLayoutA$MH() {
        return cfapi_h$constants$34.LoadKeyboardLayoutA$MH();
    }
    public static @C("HKL") MemoryAddress LoadKeyboardLayoutA (@C("LPCSTR") Addressable pwszKLID, @C("UINT") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.LoadKeyboardLayoutA$MH().invokeExact(pwszKLID.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadKeyboardLayoutW$MH() {
        return cfapi_h$constants$34.LoadKeyboardLayoutW$MH();
    }
    public static @C("HKL") MemoryAddress LoadKeyboardLayoutW (@C("LPCWSTR") Addressable pwszKLID, @C("UINT") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.LoadKeyboardLayoutW$MH().invokeExact(pwszKLID.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ActivateKeyboardLayout$MH() {
        return cfapi_h$constants$34.ActivateKeyboardLayout$MH();
    }
    public static @C("HKL") MemoryAddress ActivateKeyboardLayout (@C("HKL") Addressable hkl, @C("UINT") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.ActivateKeyboardLayout$MH().invokeExact(hkl.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ToUnicodeEx$MH() {
        return cfapi_h$constants$34.ToUnicodeEx$MH();
    }
    public static @C("int") int ToUnicodeEx (@C("UINT") int wVirtKey, @C("UINT") int wScanCode, @C("const BYTE*") Addressable lpKeyState, @C("LPWSTR") Addressable pwszBuff, @C("int") int cchBuff, @C("UINT") int wFlags, @C("HKL") Addressable dwhkl) {
        try {
            return (int)cfapi_h$constants$34.ToUnicodeEx$MH().invokeExact(wVirtKey, wScanCode, lpKeyState.address(), pwszBuff.address(), cchBuff, wFlags, dwhkl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnloadKeyboardLayout$MH() {
        return cfapi_h$constants$34.UnloadKeyboardLayout$MH();
    }
    public static @C("BOOL") int UnloadKeyboardLayout (@C("HKL") Addressable hkl) {
        try {
            return (int)cfapi_h$constants$34.UnloadKeyboardLayout$MH().invokeExact(hkl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKeyboardLayoutNameA$MH() {
        return cfapi_h$constants$34.GetKeyboardLayoutNameA$MH();
    }
    public static @C("BOOL") int GetKeyboardLayoutNameA (@C("LPSTR") Addressable pwszKLID) {
        try {
            return (int)cfapi_h$constants$34.GetKeyboardLayoutNameA$MH().invokeExact(pwszKLID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKeyboardLayoutNameW$MH() {
        return cfapi_h$constants$34.GetKeyboardLayoutNameW$MH();
    }
    public static @C("BOOL") int GetKeyboardLayoutNameW (@C("LPWSTR") Addressable pwszKLID) {
        try {
            return (int)cfapi_h$constants$34.GetKeyboardLayoutNameW$MH().invokeExact(pwszKLID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKeyboardLayoutList$MH() {
        return cfapi_h$constants$34.GetKeyboardLayoutList$MH();
    }
    public static @C("int") int GetKeyboardLayoutList (@C("int") int nBuff, @C("HKL*") Addressable lpList) {
        try {
            return (int)cfapi_h$constants$34.GetKeyboardLayoutList$MH().invokeExact(nBuff, lpList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKeyboardLayout$MH() {
        return cfapi_h$constants$34.GetKeyboardLayout$MH();
    }
    public static @C("HKL") MemoryAddress GetKeyboardLayout (@C("DWORD") int idThread) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.GetKeyboardLayout$MH().invokeExact(idThread);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMouseMovePointsEx$MH() {
        return cfapi_h$constants$34.GetMouseMovePointsEx$MH();
    }
    public static @C("int") int GetMouseMovePointsEx (@C("UINT") int cbSize, @C("LPMOUSEMOVEPOINT") Addressable lppt, @C("LPMOUSEMOVEPOINT") Addressable lpptBuf, @C("int") int nBufPoints, @C("DWORD") int resolution) {
        try {
            return (int)cfapi_h$constants$34.GetMouseMovePointsEx$MH().invokeExact(cbSize, lppt.address(), lpptBuf.address(), nBufPoints, resolution);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDesktopA$MH() {
        return cfapi_h$constants$34.CreateDesktopA$MH();
    }
    public static @C("HDESK") MemoryAddress CreateDesktopA (@C("LPCSTR") Addressable lpszDesktop, @C("LPCSTR") Addressable lpszDevice, @C("DEVMODEA*") Addressable pDevmode, @C("DWORD") int dwFlags, @C("ACCESS_MASK") int dwDesiredAccess, @C("LPSECURITY_ATTRIBUTES") Addressable lpsa) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.CreateDesktopA$MH().invokeExact(lpszDesktop.address(), lpszDevice.address(), pDevmode.address(), dwFlags, dwDesiredAccess, lpsa.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDesktopW$MH() {
        return cfapi_h$constants$34.CreateDesktopW$MH();
    }
    public static @C("HDESK") MemoryAddress CreateDesktopW (@C("LPCWSTR") Addressable lpszDesktop, @C("LPCWSTR") Addressable lpszDevice, @C("DEVMODEW*") Addressable pDevmode, @C("DWORD") int dwFlags, @C("ACCESS_MASK") int dwDesiredAccess, @C("LPSECURITY_ATTRIBUTES") Addressable lpsa) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.CreateDesktopW$MH().invokeExact(lpszDesktop.address(), lpszDevice.address(), pDevmode.address(), dwFlags, dwDesiredAccess, lpsa.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDesktopExA$MH() {
        return cfapi_h$constants$34.CreateDesktopExA$MH();
    }
    public static @C("HDESK") MemoryAddress CreateDesktopExA (@C("LPCSTR") Addressable lpszDesktop, @C("LPCSTR") Addressable lpszDevice, @C("DEVMODEA*") Addressable pDevmode, @C("DWORD") int dwFlags, @C("ACCESS_MASK") int dwDesiredAccess, @C("LPSECURITY_ATTRIBUTES") Addressable lpsa, @C("ULONG") int ulHeapSize, @C("PVOID") Addressable pvoid) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.CreateDesktopExA$MH().invokeExact(lpszDesktop.address(), lpszDevice.address(), pDevmode.address(), dwFlags, dwDesiredAccess, lpsa.address(), ulHeapSize, pvoid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDesktopExW$MH() {
        return cfapi_h$constants$34.CreateDesktopExW$MH();
    }
    public static @C("HDESK") MemoryAddress CreateDesktopExW (@C("LPCWSTR") Addressable lpszDesktop, @C("LPCWSTR") Addressable lpszDevice, @C("DEVMODEW*") Addressable pDevmode, @C("DWORD") int dwFlags, @C("ACCESS_MASK") int dwDesiredAccess, @C("LPSECURITY_ATTRIBUTES") Addressable lpsa, @C("ULONG") int ulHeapSize, @C("PVOID") Addressable pvoid) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.CreateDesktopExW$MH().invokeExact(lpszDesktop.address(), lpszDevice.address(), pDevmode.address(), dwFlags, dwDesiredAccess, lpsa.address(), ulHeapSize, pvoid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenDesktopA$MH() {
        return cfapi_h$constants$34.OpenDesktopA$MH();
    }
    public static @C("HDESK") MemoryAddress OpenDesktopA (@C("LPCSTR") Addressable lpszDesktop, @C("DWORD") int dwFlags, @C("BOOL") int fInherit, @C("ACCESS_MASK") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.OpenDesktopA$MH().invokeExact(lpszDesktop.address(), dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenDesktopW$MH() {
        return cfapi_h$constants$34.OpenDesktopW$MH();
    }
    public static @C("HDESK") MemoryAddress OpenDesktopW (@C("LPCWSTR") Addressable lpszDesktop, @C("DWORD") int dwFlags, @C("BOOL") int fInherit, @C("ACCESS_MASK") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.OpenDesktopW$MH().invokeExact(lpszDesktop.address(), dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenInputDesktop$MH() {
        return cfapi_h$constants$34.OpenInputDesktop$MH();
    }
    public static @C("HDESK") MemoryAddress OpenInputDesktop (@C("DWORD") int dwFlags, @C("BOOL") int fInherit, @C("ACCESS_MASK") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.OpenInputDesktop$MH().invokeExact(dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDesktopsA$MH() {
        return cfapi_h$constants$34.EnumDesktopsA$MH();
    }
    public static @C("BOOL") int EnumDesktopsA (@C("HWINSTA") Addressable hwinsta, @C("DESKTOPENUMPROCA") Addressable lpEnumFunc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$34.EnumDesktopsA$MH().invokeExact(hwinsta.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDesktopsW$MH() {
        return cfapi_h$constants$34.EnumDesktopsW$MH();
    }
    public static @C("BOOL") int EnumDesktopsW (@C("HWINSTA") Addressable hwinsta, @C("DESKTOPENUMPROCW") Addressable lpEnumFunc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$34.EnumDesktopsW$MH().invokeExact(hwinsta.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumDesktopWindows$MH() {
        return cfapi_h$constants$34.EnumDesktopWindows$MH();
    }
    public static @C("BOOL") int EnumDesktopWindows (@C("HDESK") Addressable hDesktop, @C("WNDENUMPROC") Addressable lpfn, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$34.EnumDesktopWindows$MH().invokeExact(hDesktop.address(), lpfn.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SwitchDesktop$MH() {
        return cfapi_h$constants$34.SwitchDesktop$MH();
    }
    public static @C("BOOL") int SwitchDesktop (@C("HDESK") Addressable hDesktop) {
        try {
            return (int)cfapi_h$constants$34.SwitchDesktop$MH().invokeExact(hDesktop.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadDesktop$MH() {
        return cfapi_h$constants$34.SetThreadDesktop$MH();
    }
    public static @C("BOOL") int SetThreadDesktop (@C("HDESK") Addressable hDesktop) {
        try {
            return (int)cfapi_h$constants$34.SetThreadDesktop$MH().invokeExact(hDesktop.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseDesktop$MH() {
        return cfapi_h$constants$34.CloseDesktop$MH();
    }
    public static @C("BOOL") int CloseDesktop (@C("HDESK") Addressable hDesktop) {
        try {
            return (int)cfapi_h$constants$34.CloseDesktop$MH().invokeExact(hDesktop.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadDesktop$MH() {
        return cfapi_h$constants$34.GetThreadDesktop$MH();
    }
    public static @C("HDESK") MemoryAddress GetThreadDesktop (@C("DWORD") int dwThreadId) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.GetThreadDesktop$MH().invokeExact(dwThreadId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWindowStationA$MH() {
        return cfapi_h$constants$34.CreateWindowStationA$MH();
    }
    public static @C("HWINSTA") MemoryAddress CreateWindowStationA (@C("LPCSTR") Addressable lpwinsta, @C("DWORD") int dwFlags, @C("ACCESS_MASK") int dwDesiredAccess, @C("LPSECURITY_ATTRIBUTES") Addressable lpsa) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.CreateWindowStationA$MH().invokeExact(lpwinsta.address(), dwFlags, dwDesiredAccess, lpsa.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWindowStationW$MH() {
        return cfapi_h$constants$34.CreateWindowStationW$MH();
    }
    public static @C("HWINSTA") MemoryAddress CreateWindowStationW (@C("LPCWSTR") Addressable lpwinsta, @C("DWORD") int dwFlags, @C("ACCESS_MASK") int dwDesiredAccess, @C("LPSECURITY_ATTRIBUTES") Addressable lpsa) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.CreateWindowStationW$MH().invokeExact(lpwinsta.address(), dwFlags, dwDesiredAccess, lpsa.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenWindowStationA$MH() {
        return cfapi_h$constants$34.OpenWindowStationA$MH();
    }
    public static @C("HWINSTA") MemoryAddress OpenWindowStationA (@C("LPCSTR") Addressable lpszWinSta, @C("BOOL") int fInherit, @C("ACCESS_MASK") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.OpenWindowStationA$MH().invokeExact(lpszWinSta.address(), fInherit, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenWindowStationW$MH() {
        return cfapi_h$constants$34.OpenWindowStationW$MH();
    }
    public static @C("HWINSTA") MemoryAddress OpenWindowStationW (@C("LPCWSTR") Addressable lpszWinSta, @C("BOOL") int fInherit, @C("ACCESS_MASK") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.OpenWindowStationW$MH().invokeExact(lpszWinSta.address(), fInherit, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumWindowStationsA$MH() {
        return cfapi_h$constants$34.EnumWindowStationsA$MH();
    }
    public static @C("BOOL") int EnumWindowStationsA (@C("WINSTAENUMPROCA") Addressable lpEnumFunc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$34.EnumWindowStationsA$MH().invokeExact(lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumWindowStationsW$MH() {
        return cfapi_h$constants$34.EnumWindowStationsW$MH();
    }
    public static @C("BOOL") int EnumWindowStationsW (@C("WINSTAENUMPROCW") Addressable lpEnumFunc, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$34.EnumWindowStationsW$MH().invokeExact(lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseWindowStation$MH() {
        return cfapi_h$constants$34.CloseWindowStation$MH();
    }
    public static @C("BOOL") int CloseWindowStation (@C("HWINSTA") Addressable hWinSta) {
        try {
            return (int)cfapi_h$constants$34.CloseWindowStation$MH().invokeExact(hWinSta.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessWindowStation$MH() {
        return cfapi_h$constants$34.SetProcessWindowStation$MH();
    }
    public static @C("BOOL") int SetProcessWindowStation (@C("HWINSTA") Addressable hWinSta) {
        try {
            return (int)cfapi_h$constants$34.SetProcessWindowStation$MH().invokeExact(hWinSta.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessWindowStation$MH() {
        return cfapi_h$constants$34.GetProcessWindowStation$MH();
    }
    public static @C("HWINSTA") MemoryAddress GetProcessWindowStation () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$34.GetProcessWindowStation$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUserObjectSecurity$MH() {
        return cfapi_h$constants$34.SetUserObjectSecurity$MH();
    }
    public static @C("BOOL") int SetUserObjectSecurity (@C("HANDLE") Addressable hObj, @C("PSECURITY_INFORMATION") Addressable pSIRequested, @C("PSECURITY_DESCRIPTOR") Addressable pSID) {
        try {
            return (int)cfapi_h$constants$34.SetUserObjectSecurity$MH().invokeExact(hObj.address(), pSIRequested.address(), pSID.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserObjectSecurity$MH() {
        return cfapi_h$constants$34.GetUserObjectSecurity$MH();
    }
    public static @C("BOOL") int GetUserObjectSecurity (@C("HANDLE") Addressable hObj, @C("PSECURITY_INFORMATION") Addressable pSIRequested, @C("PSECURITY_DESCRIPTOR") Addressable pSID, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpnLengthNeeded) {
        try {
            return (int)cfapi_h$constants$34.GetUserObjectSecurity$MH().invokeExact(hObj.address(), pSIRequested.address(), pSID.address(), nLength, lpnLengthNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserObjectInformationA$MH() {
        return cfapi_h$constants$34.GetUserObjectInformationA$MH();
    }
    public static @C("BOOL") int GetUserObjectInformationA (@C("HANDLE") Addressable hObj, @C("int") int nIndex, @C("PVOID") Addressable pvInfo, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpnLengthNeeded) {
        try {
            return (int)cfapi_h$constants$34.GetUserObjectInformationA$MH().invokeExact(hObj.address(), nIndex, pvInfo.address(), nLength, lpnLengthNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUserObjectInformationW$MH() {
        return cfapi_h$constants$34.GetUserObjectInformationW$MH();
    }
    public static @C("BOOL") int GetUserObjectInformationW (@C("HANDLE") Addressable hObj, @C("int") int nIndex, @C("PVOID") Addressable pvInfo, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpnLengthNeeded) {
        try {
            return (int)cfapi_h$constants$34.GetUserObjectInformationW$MH().invokeExact(hObj.address(), nIndex, pvInfo.address(), nLength, lpnLengthNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUserObjectInformationA$MH() {
        return cfapi_h$constants$34.SetUserObjectInformationA$MH();
    }
    public static @C("BOOL") int SetUserObjectInformationA (@C("HANDLE") Addressable hObj, @C("int") int nIndex, @C("PVOID") Addressable pvInfo, @C("DWORD") int nLength) {
        try {
            return (int)cfapi_h$constants$34.SetUserObjectInformationA$MH().invokeExact(hObj.address(), nIndex, pvInfo.address(), nLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUserObjectInformationW$MH() {
        return cfapi_h$constants$34.SetUserObjectInformationW$MH();
    }
    public static @C("BOOL") int SetUserObjectInformationW (@C("HANDLE") Addressable hObj, @C("int") int nIndex, @C("PVOID") Addressable pvInfo, @C("DWORD") int nLength) {
        try {
            return (int)cfapi_h$constants$34.SetUserObjectInformationW$MH().invokeExact(hObj.address(), nIndex, pvInfo.address(), nLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsHungAppWindow$MH() {
        return cfapi_h$constants$34.IsHungAppWindow$MH();
    }
    public static @C("BOOL") int IsHungAppWindow (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$34.IsHungAppWindow$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DisableProcessWindowsGhosting$MH() {
        return cfapi_h$constants$34.DisableProcessWindowsGhosting$MH();
    }
    public static void DisableProcessWindowsGhosting () {
        try {
            cfapi_h$constants$34.DisableProcessWindowsGhosting$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterWindowMessageA$MH() {
        return cfapi_h$constants$34.RegisterWindowMessageA$MH();
    }
    public static @C("UINT") int RegisterWindowMessageA (@C("LPCSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$34.RegisterWindowMessageA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterWindowMessageW$MH() {
        return cfapi_h$constants$34.RegisterWindowMessageW$MH();
    }
    public static @C("UINT") int RegisterWindowMessageW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$34.RegisterWindowMessageW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TrackMouseEvent$MH() {
        return cfapi_h$constants$34.TrackMouseEvent$MH();
    }
    public static @C("BOOL") int TrackMouseEvent (@C("LPTRACKMOUSEEVENT") Addressable lpEventTrack) {
        try {
            return (int)cfapi_h$constants$34.TrackMouseEvent$MH().invokeExact(lpEventTrack.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawEdge$MH() {
        return cfapi_h$constants$34.DrawEdge$MH();
    }
    public static @C("BOOL") int DrawEdge (@C("HDC") Addressable hdc, @C("LPRECT") Addressable qrc, @C("UINT") int edge, @C("UINT") int grfFlags) {
        try {
            return (int)cfapi_h$constants$34.DrawEdge$MH().invokeExact(hdc.address(), qrc.address(), edge, grfFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawFrameControl$MH() {
        return cfapi_h$constants$34.DrawFrameControl$MH();
    }
    public static @C("BOOL") int DrawFrameControl (@C("HDC") Addressable x0, @C("LPRECT") Addressable x1, @C("UINT") int x2, @C("UINT") int x3) {
        try {
            return (int)cfapi_h$constants$34.DrawFrameControl$MH().invokeExact(x0.address(), x1.address(), x2, x3);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawCaption$MH() {
        return cfapi_h$constants$34.DrawCaption$MH();
    }
    public static @C("BOOL") int DrawCaption (@C("HWND") Addressable hwnd, @C("HDC") Addressable hdc, @C("const RECT*") Addressable lprect, @C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$34.DrawCaption$MH().invokeExact(hwnd.address(), hdc.address(), lprect.address(), flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DrawAnimatedRects$MH() {
        return cfapi_h$constants$34.DrawAnimatedRects$MH();
    }
    public static @C("BOOL") int DrawAnimatedRects (@C("HWND") Addressable hwnd, @C("int") int idAni, @C("const RECT*") Addressable lprcFrom, @C("const RECT*") Addressable lprcTo) {
        try {
            return (int)cfapi_h$constants$34.DrawAnimatedRects$MH().invokeExact(hwnd.address(), idAni, lprcFrom.address(), lprcTo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMessageA$MH() {
        return cfapi_h$constants$35.GetMessageA$MH();
    }
    public static @C("BOOL") int GetMessageA (@C("LPMSG") Addressable lpMsg, @C("HWND") Addressable hWnd, @C("UINT") int wMsgFilterMin, @C("UINT") int wMsgFilterMax) {
        try {
            return (int)cfapi_h$constants$35.GetMessageA$MH().invokeExact(lpMsg.address(), hWnd.address(), wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMessageW$MH() {
        return cfapi_h$constants$35.GetMessageW$MH();
    }
    public static @C("BOOL") int GetMessageW (@C("LPMSG") Addressable lpMsg, @C("HWND") Addressable hWnd, @C("UINT") int wMsgFilterMin, @C("UINT") int wMsgFilterMax) {
        try {
            return (int)cfapi_h$constants$35.GetMessageW$MH().invokeExact(lpMsg.address(), hWnd.address(), wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TranslateMessage$MH() {
        return cfapi_h$constants$35.TranslateMessage$MH();
    }
    public static @C("BOOL") int TranslateMessage (@C("const MSG*") Addressable lpMsg) {
        try {
            return (int)cfapi_h$constants$35.TranslateMessage$MH().invokeExact(lpMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DispatchMessageA$MH() {
        return cfapi_h$constants$35.DispatchMessageA$MH();
    }
    public static @C("LRESULT") long DispatchMessageA (@C("const MSG*") Addressable lpMsg) {
        try {
            return (long)cfapi_h$constants$35.DispatchMessageA$MH().invokeExact(lpMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DispatchMessageW$MH() {
        return cfapi_h$constants$35.DispatchMessageW$MH();
    }
    public static @C("LRESULT") long DispatchMessageW (@C("const MSG*") Addressable lpMsg) {
        try {
            return (long)cfapi_h$constants$35.DispatchMessageW$MH().invokeExact(lpMsg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMessageQueue$MH() {
        return cfapi_h$constants$35.SetMessageQueue$MH();
    }
    public static @C("BOOL") int SetMessageQueue (@C("int") int cMessagesMax) {
        try {
            return (int)cfapi_h$constants$35.SetMessageQueue$MH().invokeExact(cMessagesMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PeekMessageA$MH() {
        return cfapi_h$constants$35.PeekMessageA$MH();
    }
    public static @C("BOOL") int PeekMessageA (@C("LPMSG") Addressable lpMsg, @C("HWND") Addressable hWnd, @C("UINT") int wMsgFilterMin, @C("UINT") int wMsgFilterMax, @C("UINT") int wRemoveMsg) {
        try {
            return (int)cfapi_h$constants$35.PeekMessageA$MH().invokeExact(lpMsg.address(), hWnd.address(), wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PeekMessageW$MH() {
        return cfapi_h$constants$35.PeekMessageW$MH();
    }
    public static @C("BOOL") int PeekMessageW (@C("LPMSG") Addressable lpMsg, @C("HWND") Addressable hWnd, @C("UINT") int wMsgFilterMin, @C("UINT") int wMsgFilterMax, @C("UINT") int wRemoveMsg) {
        try {
            return (int)cfapi_h$constants$35.PeekMessageW$MH().invokeExact(lpMsg.address(), hWnd.address(), wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterHotKey$MH() {
        return cfapi_h$constants$35.RegisterHotKey$MH();
    }
    public static @C("BOOL") int RegisterHotKey (@C("HWND") Addressable hWnd, @C("int") int id, @C("UINT") int fsModifiers, @C("UINT") int vk) {
        try {
            return (int)cfapi_h$constants$35.RegisterHotKey$MH().invokeExact(hWnd.address(), id, fsModifiers, vk);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterHotKey$MH() {
        return cfapi_h$constants$35.UnregisterHotKey$MH();
    }
    public static @C("BOOL") int UnregisterHotKey (@C("HWND") Addressable hWnd, @C("int") int id) {
        try {
            return (int)cfapi_h$constants$35.UnregisterHotKey$MH().invokeExact(hWnd.address(), id);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExitWindowsEx$MH() {
        return cfapi_h$constants$35.ExitWindowsEx$MH();
    }
    public static @C("BOOL") int ExitWindowsEx (@C("UINT") int uFlags, @C("DWORD") int dwReason) {
        try {
            return (int)cfapi_h$constants$35.ExitWindowsEx$MH().invokeExact(uFlags, dwReason);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SwapMouseButton$MH() {
        return cfapi_h$constants$35.SwapMouseButton$MH();
    }
    public static @C("BOOL") int SwapMouseButton (@C("BOOL") int fSwap) {
        try {
            return (int)cfapi_h$constants$35.SwapMouseButton$MH().invokeExact(fSwap);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMessagePos$MH() {
        return cfapi_h$constants$35.GetMessagePos$MH();
    }
    public static @C("DWORD") int GetMessagePos () {
        try {
            return (int)cfapi_h$constants$35.GetMessagePos$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMessageTime$MH() {
        return cfapi_h$constants$35.GetMessageTime$MH();
    }
    public static @C("LONG") int GetMessageTime () {
        try {
            return (int)cfapi_h$constants$35.GetMessageTime$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMessageExtraInfo$MH() {
        return cfapi_h$constants$35.GetMessageExtraInfo$MH();
    }
    public static @C("LPARAM") long GetMessageExtraInfo () {
        try {
            return (long)cfapi_h$constants$35.GetMessageExtraInfo$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUnpredictedMessagePos$MH() {
        return cfapi_h$constants$35.GetUnpredictedMessagePos$MH();
    }
    public static @C("DWORD") int GetUnpredictedMessagePos () {
        try {
            return (int)cfapi_h$constants$35.GetUnpredictedMessagePos$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWow64Message$MH() {
        return cfapi_h$constants$35.IsWow64Message$MH();
    }
    public static @C("BOOL") int IsWow64Message () {
        try {
            return (int)cfapi_h$constants$35.IsWow64Message$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMessageExtraInfo$MH() {
        return cfapi_h$constants$35.SetMessageExtraInfo$MH();
    }
    public static @C("LPARAM") long SetMessageExtraInfo (@C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.SetMessageExtraInfo$MH().invokeExact(lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendMessageA$MH() {
        return cfapi_h$constants$35.SendMessageA$MH();
    }
    public static @C("LRESULT") long SendMessageA (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.SendMessageA$MH().invokeExact(hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendMessageW$MH() {
        return cfapi_h$constants$35.SendMessageW$MH();
    }
    public static @C("LRESULT") long SendMessageW (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.SendMessageW$MH().invokeExact(hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendMessageTimeoutA$MH() {
        return cfapi_h$constants$35.SendMessageTimeoutA$MH();
    }
    public static @C("LRESULT") long SendMessageTimeoutA (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam, @C("UINT") int fuFlags, @C("UINT") int uTimeout, @C("PDWORD_PTR") Addressable lpdwResult) {
        try {
            return (long)cfapi_h$constants$35.SendMessageTimeoutA$MH().invokeExact(hWnd.address(), Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendMessageTimeoutW$MH() {
        return cfapi_h$constants$35.SendMessageTimeoutW$MH();
    }
    public static @C("LRESULT") long SendMessageTimeoutW (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam, @C("UINT") int fuFlags, @C("UINT") int uTimeout, @C("PDWORD_PTR") Addressable lpdwResult) {
        try {
            return (long)cfapi_h$constants$35.SendMessageTimeoutW$MH().invokeExact(hWnd.address(), Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendNotifyMessageA$MH() {
        return cfapi_h$constants$35.SendNotifyMessageA$MH();
    }
    public static @C("BOOL") int SendNotifyMessageA (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$35.SendNotifyMessageA$MH().invokeExact(hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendNotifyMessageW$MH() {
        return cfapi_h$constants$35.SendNotifyMessageW$MH();
    }
    public static @C("BOOL") int SendNotifyMessageW (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$35.SendNotifyMessageW$MH().invokeExact(hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendMessageCallbackA$MH() {
        return cfapi_h$constants$35.SendMessageCallbackA$MH();
    }
    public static @C("BOOL") int SendMessageCallbackA (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam, @C("SENDASYNCPROC") Addressable lpResultCallBack, @C("ULONG_PTR") long dwData) {
        try {
            return (int)cfapi_h$constants$35.SendMessageCallbackA$MH().invokeExact(hWnd.address(), Msg, wParam, lParam, lpResultCallBack.address(), dwData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendMessageCallbackW$MH() {
        return cfapi_h$constants$35.SendMessageCallbackW$MH();
    }
    public static @C("BOOL") int SendMessageCallbackW (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam, @C("SENDASYNCPROC") Addressable lpResultCallBack, @C("ULONG_PTR") long dwData) {
        try {
            return (int)cfapi_h$constants$35.SendMessageCallbackW$MH().invokeExact(hWnd.address(), Msg, wParam, lParam, lpResultCallBack.address(), dwData);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BroadcastSystemMessageExA$MH() {
        return cfapi_h$constants$35.BroadcastSystemMessageExA$MH();
    }
    public static @C("long") int BroadcastSystemMessageExA (@C("DWORD") int flags, @C("LPDWORD") Addressable lpInfo, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam, @C("PBSMINFO") Addressable pbsmInfo) {
        try {
            return (int)cfapi_h$constants$35.BroadcastSystemMessageExA$MH().invokeExact(flags, lpInfo.address(), Msg, wParam, lParam, pbsmInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BroadcastSystemMessageExW$MH() {
        return cfapi_h$constants$35.BroadcastSystemMessageExW$MH();
    }
    public static @C("long") int BroadcastSystemMessageExW (@C("DWORD") int flags, @C("LPDWORD") Addressable lpInfo, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam, @C("PBSMINFO") Addressable pbsmInfo) {
        try {
            return (int)cfapi_h$constants$35.BroadcastSystemMessageExW$MH().invokeExact(flags, lpInfo.address(), Msg, wParam, lParam, pbsmInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BroadcastSystemMessageA$MH() {
        return cfapi_h$constants$35.BroadcastSystemMessageA$MH();
    }
    public static @C("long") int BroadcastSystemMessageA (@C("DWORD") int flags, @C("LPDWORD") Addressable lpInfo, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$35.BroadcastSystemMessageA$MH().invokeExact(flags, lpInfo.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BroadcastSystemMessageW$MH() {
        return cfapi_h$constants$35.BroadcastSystemMessageW$MH();
    }
    public static @C("long") int BroadcastSystemMessageW (@C("DWORD") int flags, @C("LPDWORD") Addressable lpInfo, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$35.BroadcastSystemMessageW$MH().invokeExact(flags, lpInfo.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterDeviceNotificationA$MH() {
        return cfapi_h$constants$35.RegisterDeviceNotificationA$MH();
    }
    public static @C("HDEVNOTIFY") MemoryAddress RegisterDeviceNotificationA (@C("HANDLE") Addressable hRecipient, @C("LPVOID") Addressable NotificationFilter, @C("DWORD") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.RegisterDeviceNotificationA$MH().invokeExact(hRecipient.address(), NotificationFilter.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterDeviceNotificationW$MH() {
        return cfapi_h$constants$35.RegisterDeviceNotificationW$MH();
    }
    public static @C("HDEVNOTIFY") MemoryAddress RegisterDeviceNotificationW (@C("HANDLE") Addressable hRecipient, @C("LPVOID") Addressable NotificationFilter, @C("DWORD") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.RegisterDeviceNotificationW$MH().invokeExact(hRecipient.address(), NotificationFilter.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterDeviceNotification$MH() {
        return cfapi_h$constants$35.UnregisterDeviceNotification$MH();
    }
    public static @C("BOOL") int UnregisterDeviceNotification (@C("HDEVNOTIFY") Addressable Handle) {
        try {
            return (int)cfapi_h$constants$35.UnregisterDeviceNotification$MH().invokeExact(Handle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterPowerSettingNotification$MH() {
        return cfapi_h$constants$35.RegisterPowerSettingNotification$MH();
    }
    public static @C("HPOWERNOTIFY") MemoryAddress RegisterPowerSettingNotification (@C("HANDLE") Addressable hRecipient, @C("LPCGUID") Addressable PowerSettingGuid, @C("DWORD") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.RegisterPowerSettingNotification$MH().invokeExact(hRecipient.address(), PowerSettingGuid.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterPowerSettingNotification$MH() {
        return cfapi_h$constants$35.UnregisterPowerSettingNotification$MH();
    }
    public static @C("BOOL") int UnregisterPowerSettingNotification (@C("HPOWERNOTIFY") Addressable Handle) {
        try {
            return (int)cfapi_h$constants$35.UnregisterPowerSettingNotification$MH().invokeExact(Handle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterSuspendResumeNotification$MH() {
        return cfapi_h$constants$35.RegisterSuspendResumeNotification$MH();
    }
    public static @C("HPOWERNOTIFY") MemoryAddress RegisterSuspendResumeNotification (@C("HANDLE") Addressable hRecipient, @C("DWORD") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.RegisterSuspendResumeNotification$MH().invokeExact(hRecipient.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterSuspendResumeNotification$MH() {
        return cfapi_h$constants$35.UnregisterSuspendResumeNotification$MH();
    }
    public static @C("BOOL") int UnregisterSuspendResumeNotification (@C("HPOWERNOTIFY") Addressable Handle) {
        try {
            return (int)cfapi_h$constants$35.UnregisterSuspendResumeNotification$MH().invokeExact(Handle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PostMessageA$MH() {
        return cfapi_h$constants$35.PostMessageA$MH();
    }
    public static @C("BOOL") int PostMessageA (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$35.PostMessageA$MH().invokeExact(hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PostMessageW$MH() {
        return cfapi_h$constants$35.PostMessageW$MH();
    }
    public static @C("BOOL") int PostMessageW (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$35.PostMessageW$MH().invokeExact(hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PostThreadMessageA$MH() {
        return cfapi_h$constants$35.PostThreadMessageA$MH();
    }
    public static @C("BOOL") int PostThreadMessageA (@C("DWORD") int idThread, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$35.PostThreadMessageA$MH().invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PostThreadMessageW$MH() {
        return cfapi_h$constants$35.PostThreadMessageW$MH();
    }
    public static @C("BOOL") int PostThreadMessageW (@C("DWORD") int idThread, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (int)cfapi_h$constants$35.PostThreadMessageW$MH().invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AttachThreadInput$MH() {
        return cfapi_h$constants$35.AttachThreadInput$MH();
    }
    public static @C("BOOL") int AttachThreadInput (@C("DWORD") int idAttach, @C("DWORD") int idAttachTo, @C("BOOL") int fAttach) {
        try {
            return (int)cfapi_h$constants$35.AttachThreadInput$MH().invokeExact(idAttach, idAttachTo, fAttach);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReplyMessage$MH() {
        return cfapi_h$constants$35.ReplyMessage$MH();
    }
    public static @C("BOOL") int ReplyMessage (@C("LRESULT") long lResult) {
        try {
            return (int)cfapi_h$constants$35.ReplyMessage$MH().invokeExact(lResult);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitMessage$MH() {
        return cfapi_h$constants$35.WaitMessage$MH();
    }
    public static @C("BOOL") int WaitMessage () {
        try {
            return (int)cfapi_h$constants$35.WaitMessage$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForInputIdle$MH() {
        return cfapi_h$constants$35.WaitForInputIdle$MH();
    }
    public static @C("DWORD") int WaitForInputIdle (@C("HANDLE") Addressable hProcess, @C("DWORD") int dwMilliseconds) {
        try {
            return (int)cfapi_h$constants$35.WaitForInputIdle$MH().invokeExact(hProcess.address(), dwMilliseconds);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefWindowProcA$MH() {
        return cfapi_h$constants$35.DefWindowProcA$MH();
    }
    public static @C("LRESULT") long DefWindowProcA (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.DefWindowProcA$MH().invokeExact(hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefWindowProcW$MH() {
        return cfapi_h$constants$35.DefWindowProcW$MH();
    }
    public static @C("LRESULT") long DefWindowProcW (@C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.DefWindowProcW$MH().invokeExact(hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PostQuitMessage$MH() {
        return cfapi_h$constants$35.PostQuitMessage$MH();
    }
    public static void PostQuitMessage (@C("int") int nExitCode) {
        try {
            cfapi_h$constants$35.PostQuitMessage$MH().invokeExact(nExitCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallWindowProcA$MH() {
        return cfapi_h$constants$35.CallWindowProcA$MH();
    }
    public static @C("LRESULT") long CallWindowProcA (@C("WNDPROC") Addressable lpPrevWndFunc, @C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.CallWindowProcA$MH().invokeExact(lpPrevWndFunc.address(), hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallWindowProcW$MH() {
        return cfapi_h$constants$35.CallWindowProcW$MH();
    }
    public static @C("LRESULT") long CallWindowProcW (@C("WNDPROC") Addressable lpPrevWndFunc, @C("HWND") Addressable hWnd, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.CallWindowProcW$MH().invokeExact(lpPrevWndFunc.address(), hWnd.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InSendMessage$MH() {
        return cfapi_h$constants$35.InSendMessage$MH();
    }
    public static @C("BOOL") int InSendMessage () {
        try {
            return (int)cfapi_h$constants$35.InSendMessage$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InSendMessageEx$MH() {
        return cfapi_h$constants$35.InSendMessageEx$MH();
    }
    public static @C("DWORD") int InSendMessageEx (@C("LPVOID") Addressable lpReserved) {
        try {
            return (int)cfapi_h$constants$35.InSendMessageEx$MH().invokeExact(lpReserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDoubleClickTime$MH() {
        return cfapi_h$constants$35.GetDoubleClickTime$MH();
    }
    public static @C("UINT") int GetDoubleClickTime () {
        try {
            return (int)cfapi_h$constants$35.GetDoubleClickTime$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDoubleClickTime$MH() {
        return cfapi_h$constants$35.SetDoubleClickTime$MH();
    }
    public static @C("BOOL") int SetDoubleClickTime (@C("UINT") int x0) {
        try {
            return (int)cfapi_h$constants$35.SetDoubleClickTime$MH().invokeExact(x0);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterClassA$MH() {
        return cfapi_h$constants$35.RegisterClassA$MH();
    }
    public static @C("ATOM") short RegisterClassA (@C("const WNDCLASSA*") Addressable lpWndClass) {
        try {
            return (short)cfapi_h$constants$35.RegisterClassA$MH().invokeExact(lpWndClass.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterClassW$MH() {
        return cfapi_h$constants$35.RegisterClassW$MH();
    }
    public static @C("ATOM") short RegisterClassW (@C("const WNDCLASSW*") Addressable lpWndClass) {
        try {
            return (short)cfapi_h$constants$35.RegisterClassW$MH().invokeExact(lpWndClass.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterClassA$MH() {
        return cfapi_h$constants$35.UnregisterClassA$MH();
    }
    public static @C("BOOL") int UnregisterClassA (@C("LPCSTR") Addressable lpClassName, @C("HINSTANCE") Addressable hInstance) {
        try {
            return (int)cfapi_h$constants$35.UnregisterClassA$MH().invokeExact(lpClassName.address(), hInstance.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterClassW$MH() {
        return cfapi_h$constants$35.UnregisterClassW$MH();
    }
    public static @C("BOOL") int UnregisterClassW (@C("LPCWSTR") Addressable lpClassName, @C("HINSTANCE") Addressable hInstance) {
        try {
            return (int)cfapi_h$constants$35.UnregisterClassW$MH().invokeExact(lpClassName.address(), hInstance.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassInfoA$MH() {
        return cfapi_h$constants$35.GetClassInfoA$MH();
    }
    public static @C("BOOL") int GetClassInfoA (@C("HINSTANCE") Addressable hInstance, @C("LPCSTR") Addressable lpClassName, @C("LPWNDCLASSA") Addressable lpWndClass) {
        try {
            return (int)cfapi_h$constants$35.GetClassInfoA$MH().invokeExact(hInstance.address(), lpClassName.address(), lpWndClass.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassInfoW$MH() {
        return cfapi_h$constants$35.GetClassInfoW$MH();
    }
    public static @C("BOOL") int GetClassInfoW (@C("HINSTANCE") Addressable hInstance, @C("LPCWSTR") Addressable lpClassName, @C("LPWNDCLASSW") Addressable lpWndClass) {
        try {
            return (int)cfapi_h$constants$35.GetClassInfoW$MH().invokeExact(hInstance.address(), lpClassName.address(), lpWndClass.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterClassExA$MH() {
        return cfapi_h$constants$35.RegisterClassExA$MH();
    }
    public static @C("ATOM") short RegisterClassExA (@C("const WNDCLASSEXA*") Addressable x0) {
        try {
            return (short)cfapi_h$constants$35.RegisterClassExA$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterClassExW$MH() {
        return cfapi_h$constants$35.RegisterClassExW$MH();
    }
    public static @C("ATOM") short RegisterClassExW (@C("const WNDCLASSEXW*") Addressable x0) {
        try {
            return (short)cfapi_h$constants$35.RegisterClassExW$MH().invokeExact(x0.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassInfoExA$MH() {
        return cfapi_h$constants$35.GetClassInfoExA$MH();
    }
    public static @C("BOOL") int GetClassInfoExA (@C("HINSTANCE") Addressable hInstance, @C("LPCSTR") Addressable lpszClass, @C("LPWNDCLASSEXA") Addressable lpwcx) {
        try {
            return (int)cfapi_h$constants$35.GetClassInfoExA$MH().invokeExact(hInstance.address(), lpszClass.address(), lpwcx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClassInfoExW$MH() {
        return cfapi_h$constants$35.GetClassInfoExW$MH();
    }
    public static @C("BOOL") int GetClassInfoExW (@C("HINSTANCE") Addressable hInstance, @C("LPCWSTR") Addressable lpszClass, @C("LPWNDCLASSEXW") Addressable lpwcx) {
        try {
            return (int)cfapi_h$constants$35.GetClassInfoExW$MH().invokeExact(hInstance.address(), lpszClass.address(), lpwcx.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWindowExA$MH() {
        return cfapi_h$constants$35.CreateWindowExA$MH();
    }
    public static @C("HWND") MemoryAddress CreateWindowExA (@C("DWORD") int dwExStyle, @C("LPCSTR") Addressable lpClassName, @C("LPCSTR") Addressable lpWindowName, @C("DWORD") int dwStyle, @C("int") int X, @C("int") int Y, @C("int") int nWidth, @C("int") int nHeight, @C("HWND") Addressable hWndParent, @C("HMENU") Addressable hMenu, @C("HINSTANCE") Addressable hInstance, @C("LPVOID") Addressable lpParam) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CreateWindowExA$MH().invokeExact(dwExStyle, lpClassName.address(), lpWindowName.address(), dwStyle, X, Y, nWidth, nHeight, hWndParent.address(), hMenu.address(), hInstance.address(), lpParam.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWindowExW$MH() {
        return cfapi_h$constants$35.CreateWindowExW$MH();
    }
    public static @C("HWND") MemoryAddress CreateWindowExW (@C("DWORD") int dwExStyle, @C("LPCWSTR") Addressable lpClassName, @C("LPCWSTR") Addressable lpWindowName, @C("DWORD") int dwStyle, @C("int") int X, @C("int") int Y, @C("int") int nWidth, @C("int") int nHeight, @C("HWND") Addressable hWndParent, @C("HMENU") Addressable hMenu, @C("HINSTANCE") Addressable hInstance, @C("LPVOID") Addressable lpParam) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CreateWindowExW$MH().invokeExact(dwExStyle, lpClassName.address(), lpWindowName.address(), dwStyle, X, Y, nWidth, nHeight, hWndParent.address(), hMenu.address(), hInstance.address(), lpParam.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWindow$MH() {
        return cfapi_h$constants$35.IsWindow$MH();
    }
    public static @C("BOOL") int IsWindow (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.IsWindow$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsMenu$MH() {
        return cfapi_h$constants$35.IsMenu$MH();
    }
    public static @C("BOOL") int IsMenu (@C("HMENU") Addressable hMenu) {
        try {
            return (int)cfapi_h$constants$35.IsMenu$MH().invokeExact(hMenu.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsChild$MH() {
        return cfapi_h$constants$35.IsChild$MH();
    }
    public static @C("BOOL") int IsChild (@C("HWND") Addressable hWndParent, @C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.IsChild$MH().invokeExact(hWndParent.address(), hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroyWindow$MH() {
        return cfapi_h$constants$35.DestroyWindow$MH();
    }
    public static @C("BOOL") int DestroyWindow (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.DestroyWindow$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ShowWindow$MH() {
        return cfapi_h$constants$35.ShowWindow$MH();
    }
    public static @C("BOOL") int ShowWindow (@C("HWND") Addressable hWnd, @C("int") int nCmdShow) {
        try {
            return (int)cfapi_h$constants$35.ShowWindow$MH().invokeExact(hWnd.address(), nCmdShow);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AnimateWindow$MH() {
        return cfapi_h$constants$35.AnimateWindow$MH();
    }
    public static @C("BOOL") int AnimateWindow (@C("HWND") Addressable hWnd, @C("DWORD") int dwTime, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$35.AnimateWindow$MH().invokeExact(hWnd.address(), dwTime, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateLayeredWindow$MH() {
        return cfapi_h$constants$35.UpdateLayeredWindow$MH();
    }
    public static @C("BOOL") int UpdateLayeredWindow (@C("HWND") Addressable hWnd, @C("HDC") Addressable hdcDst, @C("POINT*") Addressable pptDst, @C("SIZE*") Addressable psize, @C("HDC") Addressable hdcSrc, @C("POINT*") Addressable pptSrc, @C("COLORREF") int crKey, @C("BLENDFUNCTION*") Addressable pblend, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$35.UpdateLayeredWindow$MH().invokeExact(hWnd.address(), hdcDst.address(), pptDst.address(), psize.address(), hdcSrc.address(), pptSrc.address(), crKey, pblend.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateLayeredWindowIndirect$MH() {
        return cfapi_h$constants$35.UpdateLayeredWindowIndirect$MH();
    }
    public static @C("BOOL") int UpdateLayeredWindowIndirect (@C("HWND") Addressable hWnd, @C("const UPDATELAYEREDWINDOWINFO*") Addressable pULWInfo) {
        try {
            return (int)cfapi_h$constants$35.UpdateLayeredWindowIndirect$MH().invokeExact(hWnd.address(), pULWInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLayeredWindowAttributes$MH() {
        return cfapi_h$constants$35.GetLayeredWindowAttributes$MH();
    }
    public static @C("BOOL") int GetLayeredWindowAttributes (@C("HWND") Addressable hwnd, @C("COLORREF*") Addressable pcrKey, @C("BYTE*") Addressable pbAlpha, @C("DWORD*") Addressable pdwFlags) {
        try {
            return (int)cfapi_h$constants$35.GetLayeredWindowAttributes$MH().invokeExact(hwnd.address(), pcrKey.address(), pbAlpha.address(), pdwFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrintWindow$MH() {
        return cfapi_h$constants$35.PrintWindow$MH();
    }
    public static @C("BOOL") int PrintWindow (@C("HWND") Addressable hwnd, @C("HDC") Addressable hdcBlt, @C("UINT") int nFlags) {
        try {
            return (int)cfapi_h$constants$35.PrintWindow$MH().invokeExact(hwnd.address(), hdcBlt.address(), nFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetLayeredWindowAttributes$MH() {
        return cfapi_h$constants$35.SetLayeredWindowAttributes$MH();
    }
    public static @C("BOOL") int SetLayeredWindowAttributes (@C("HWND") Addressable hwnd, @C("COLORREF") int crKey, @C("BYTE") byte bAlpha, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$35.SetLayeredWindowAttributes$MH().invokeExact(hwnd.address(), crKey, bAlpha, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ShowWindowAsync$MH() {
        return cfapi_h$constants$35.ShowWindowAsync$MH();
    }
    public static @C("BOOL") int ShowWindowAsync (@C("HWND") Addressable hWnd, @C("int") int nCmdShow) {
        try {
            return (int)cfapi_h$constants$35.ShowWindowAsync$MH().invokeExact(hWnd.address(), nCmdShow);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlashWindow$MH() {
        return cfapi_h$constants$35.FlashWindow$MH();
    }
    public static @C("BOOL") int FlashWindow (@C("HWND") Addressable hWnd, @C("BOOL") int bInvert) {
        try {
            return (int)cfapi_h$constants$35.FlashWindow$MH().invokeExact(hWnd.address(), bInvert);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FlashWindowEx$MH() {
        return cfapi_h$constants$35.FlashWindowEx$MH();
    }
    public static @C("BOOL") int FlashWindowEx (@C("PFLASHWINFO") Addressable pfwi) {
        try {
            return (int)cfapi_h$constants$35.FlashWindowEx$MH().invokeExact(pfwi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ShowOwnedPopups$MH() {
        return cfapi_h$constants$35.ShowOwnedPopups$MH();
    }
    public static @C("BOOL") int ShowOwnedPopups (@C("HWND") Addressable hWnd, @C("BOOL") int fShow) {
        try {
            return (int)cfapi_h$constants$35.ShowOwnedPopups$MH().invokeExact(hWnd.address(), fShow);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenIcon$MH() {
        return cfapi_h$constants$35.OpenIcon$MH();
    }
    public static @C("BOOL") int OpenIcon (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.OpenIcon$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseWindow$MH() {
        return cfapi_h$constants$35.CloseWindow$MH();
    }
    public static @C("BOOL") int CloseWindow (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.CloseWindow$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MoveWindow$MH() {
        return cfapi_h$constants$35.MoveWindow$MH();
    }
    public static @C("BOOL") int MoveWindow (@C("HWND") Addressable hWnd, @C("int") int X, @C("int") int Y, @C("int") int nWidth, @C("int") int nHeight, @C("BOOL") int bRepaint) {
        try {
            return (int)cfapi_h$constants$35.MoveWindow$MH().invokeExact(hWnd.address(), X, Y, nWidth, nHeight, bRepaint);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowPos$MH() {
        return cfapi_h$constants$35.SetWindowPos$MH();
    }
    public static @C("BOOL") int SetWindowPos (@C("HWND") Addressable hWnd, @C("HWND") Addressable hWndInsertAfter, @C("int") int X, @C("int") int Y, @C("int") int cx, @C("int") int cy, @C("UINT") int uFlags) {
        try {
            return (int)cfapi_h$constants$35.SetWindowPos$MH().invokeExact(hWnd.address(), hWndInsertAfter.address(), X, Y, cx, cy, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowPlacement$MH() {
        return cfapi_h$constants$35.GetWindowPlacement$MH();
    }
    public static @C("BOOL") int GetWindowPlacement (@C("HWND") Addressable hWnd, @C("WINDOWPLACEMENT*") Addressable lpwndpl) {
        try {
            return (int)cfapi_h$constants$35.GetWindowPlacement$MH().invokeExact(hWnd.address(), lpwndpl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowPlacement$MH() {
        return cfapi_h$constants$35.SetWindowPlacement$MH();
    }
    public static @C("BOOL") int SetWindowPlacement (@C("HWND") Addressable hWnd, @C("const WINDOWPLACEMENT*") Addressable lpwndpl) {
        try {
            return (int)cfapi_h$constants$35.SetWindowPlacement$MH().invokeExact(hWnd.address(), lpwndpl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowDisplayAffinity$MH() {
        return cfapi_h$constants$35.GetWindowDisplayAffinity$MH();
    }
    public static @C("BOOL") int GetWindowDisplayAffinity (@C("HWND") Addressable hWnd, @C("DWORD*") Addressable pdwAffinity) {
        try {
            return (int)cfapi_h$constants$35.GetWindowDisplayAffinity$MH().invokeExact(hWnd.address(), pdwAffinity.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowDisplayAffinity$MH() {
        return cfapi_h$constants$35.SetWindowDisplayAffinity$MH();
    }
    public static @C("BOOL") int SetWindowDisplayAffinity (@C("HWND") Addressable hWnd, @C("DWORD") int dwAffinity) {
        try {
            return (int)cfapi_h$constants$35.SetWindowDisplayAffinity$MH().invokeExact(hWnd.address(), dwAffinity);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BeginDeferWindowPos$MH() {
        return cfapi_h$constants$35.BeginDeferWindowPos$MH();
    }
    public static @C("HDWP") MemoryAddress BeginDeferWindowPos (@C("int") int nNumWindows) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.BeginDeferWindowPos$MH().invokeExact(nNumWindows);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeferWindowPos$MH() {
        return cfapi_h$constants$35.DeferWindowPos$MH();
    }
    public static @C("HDWP") MemoryAddress DeferWindowPos (@C("HDWP") Addressable hWinPosInfo, @C("HWND") Addressable hWnd, @C("HWND") Addressable hWndInsertAfter, @C("int") int x, @C("int") int y, @C("int") int cx, @C("int") int cy, @C("UINT") int uFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.DeferWindowPos$MH().invokeExact(hWinPosInfo.address(), hWnd.address(), hWndInsertAfter.address(), x, y, cx, cy, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndDeferWindowPos$MH() {
        return cfapi_h$constants$35.EndDeferWindowPos$MH();
    }
    public static @C("BOOL") int EndDeferWindowPos (@C("HDWP") Addressable hWinPosInfo) {
        try {
            return (int)cfapi_h$constants$35.EndDeferWindowPos$MH().invokeExact(hWinPosInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWindowVisible$MH() {
        return cfapi_h$constants$35.IsWindowVisible$MH();
    }
    public static @C("BOOL") int IsWindowVisible (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.IsWindowVisible$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsIconic$MH() {
        return cfapi_h$constants$35.IsIconic$MH();
    }
    public static @C("BOOL") int IsIconic (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.IsIconic$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AnyPopup$MH() {
        return cfapi_h$constants$35.AnyPopup$MH();
    }
    public static @C("BOOL") int AnyPopup () {
        try {
            return (int)cfapi_h$constants$35.AnyPopup$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BringWindowToTop$MH() {
        return cfapi_h$constants$35.BringWindowToTop$MH();
    }
    public static @C("BOOL") int BringWindowToTop (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.BringWindowToTop$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsZoomed$MH() {
        return cfapi_h$constants$35.IsZoomed$MH();
    }
    public static @C("BOOL") int IsZoomed (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.IsZoomed$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDialogParamA$MH() {
        return cfapi_h$constants$35.CreateDialogParamA$MH();
    }
    public static @C("HWND") MemoryAddress CreateDialogParamA (@C("HINSTANCE") Addressable hInstance, @C("LPCSTR") Addressable lpTemplateName, @C("HWND") Addressable hWndParent, @C("DLGPROC") Addressable lpDialogFunc, @C("LPARAM") long dwInitParam) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CreateDialogParamA$MH().invokeExact(hInstance.address(), lpTemplateName.address(), hWndParent.address(), lpDialogFunc.address(), dwInitParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDialogParamW$MH() {
        return cfapi_h$constants$35.CreateDialogParamW$MH();
    }
    public static @C("HWND") MemoryAddress CreateDialogParamW (@C("HINSTANCE") Addressable hInstance, @C("LPCWSTR") Addressable lpTemplateName, @C("HWND") Addressable hWndParent, @C("DLGPROC") Addressable lpDialogFunc, @C("LPARAM") long dwInitParam) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CreateDialogParamW$MH().invokeExact(hInstance.address(), lpTemplateName.address(), hWndParent.address(), lpDialogFunc.address(), dwInitParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDialogIndirectParamA$MH() {
        return cfapi_h$constants$35.CreateDialogIndirectParamA$MH();
    }
    public static @C("HWND") MemoryAddress CreateDialogIndirectParamA (@C("HINSTANCE") Addressable hInstance, @C("LPCDLGTEMPLATEA") Addressable lpTemplate, @C("HWND") Addressable hWndParent, @C("DLGPROC") Addressable lpDialogFunc, @C("LPARAM") long dwInitParam) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CreateDialogIndirectParamA$MH().invokeExact(hInstance.address(), lpTemplate.address(), hWndParent.address(), lpDialogFunc.address(), dwInitParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateDialogIndirectParamW$MH() {
        return cfapi_h$constants$35.CreateDialogIndirectParamW$MH();
    }
    public static @C("HWND") MemoryAddress CreateDialogIndirectParamW (@C("HINSTANCE") Addressable hInstance, @C("LPCDLGTEMPLATEW") Addressable lpTemplate, @C("HWND") Addressable hWndParent, @C("DLGPROC") Addressable lpDialogFunc, @C("LPARAM") long dwInitParam) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CreateDialogIndirectParamW$MH().invokeExact(hInstance.address(), lpTemplate.address(), hWndParent.address(), lpDialogFunc.address(), dwInitParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DialogBoxParamA$MH() {
        return cfapi_h$constants$35.DialogBoxParamA$MH();
    }
    public static @C("INT_PTR") long DialogBoxParamA (@C("HINSTANCE") Addressable hInstance, @C("LPCSTR") Addressable lpTemplateName, @C("HWND") Addressable hWndParent, @C("DLGPROC") Addressable lpDialogFunc, @C("LPARAM") long dwInitParam) {
        try {
            return (long)cfapi_h$constants$35.DialogBoxParamA$MH().invokeExact(hInstance.address(), lpTemplateName.address(), hWndParent.address(), lpDialogFunc.address(), dwInitParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DialogBoxParamW$MH() {
        return cfapi_h$constants$35.DialogBoxParamW$MH();
    }
    public static @C("INT_PTR") long DialogBoxParamW (@C("HINSTANCE") Addressable hInstance, @C("LPCWSTR") Addressable lpTemplateName, @C("HWND") Addressable hWndParent, @C("DLGPROC") Addressable lpDialogFunc, @C("LPARAM") long dwInitParam) {
        try {
            return (long)cfapi_h$constants$35.DialogBoxParamW$MH().invokeExact(hInstance.address(), lpTemplateName.address(), hWndParent.address(), lpDialogFunc.address(), dwInitParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DialogBoxIndirectParamA$MH() {
        return cfapi_h$constants$35.DialogBoxIndirectParamA$MH();
    }
    public static @C("INT_PTR") long DialogBoxIndirectParamA (@C("HINSTANCE") Addressable hInstance, @C("LPCDLGTEMPLATEA") Addressable hDialogTemplate, @C("HWND") Addressable hWndParent, @C("DLGPROC") Addressable lpDialogFunc, @C("LPARAM") long dwInitParam) {
        try {
            return (long)cfapi_h$constants$35.DialogBoxIndirectParamA$MH().invokeExact(hInstance.address(), hDialogTemplate.address(), hWndParent.address(), lpDialogFunc.address(), dwInitParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DialogBoxIndirectParamW$MH() {
        return cfapi_h$constants$35.DialogBoxIndirectParamW$MH();
    }
    public static @C("INT_PTR") long DialogBoxIndirectParamW (@C("HINSTANCE") Addressable hInstance, @C("LPCDLGTEMPLATEW") Addressable hDialogTemplate, @C("HWND") Addressable hWndParent, @C("DLGPROC") Addressable lpDialogFunc, @C("LPARAM") long dwInitParam) {
        try {
            return (long)cfapi_h$constants$35.DialogBoxIndirectParamW$MH().invokeExact(hInstance.address(), hDialogTemplate.address(), hWndParent.address(), lpDialogFunc.address(), dwInitParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndDialog$MH() {
        return cfapi_h$constants$35.EndDialog$MH();
    }
    public static @C("BOOL") int EndDialog (@C("HWND") Addressable hDlg, @C("INT_PTR") long nResult) {
        try {
            return (int)cfapi_h$constants$35.EndDialog$MH().invokeExact(hDlg.address(), nResult);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDlgItem$MH() {
        return cfapi_h$constants$35.GetDlgItem$MH();
    }
    public static @C("HWND") MemoryAddress GetDlgItem (@C("HWND") Addressable hDlg, @C("int") int nIDDlgItem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.GetDlgItem$MH().invokeExact(hDlg.address(), nIDDlgItem);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDlgItemInt$MH() {
        return cfapi_h$constants$35.SetDlgItemInt$MH();
    }
    public static @C("BOOL") int SetDlgItemInt (@C("HWND") Addressable hDlg, @C("int") int nIDDlgItem, @C("UINT") int uValue, @C("BOOL") int bSigned) {
        try {
            return (int)cfapi_h$constants$35.SetDlgItemInt$MH().invokeExact(hDlg.address(), nIDDlgItem, uValue, bSigned);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDlgItemInt$MH() {
        return cfapi_h$constants$35.GetDlgItemInt$MH();
    }
    public static @C("UINT") int GetDlgItemInt (@C("HWND") Addressable hDlg, @C("int") int nIDDlgItem, @C("BOOL*") Addressable lpTranslated, @C("BOOL") int bSigned) {
        try {
            return (int)cfapi_h$constants$35.GetDlgItemInt$MH().invokeExact(hDlg.address(), nIDDlgItem, lpTranslated.address(), bSigned);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDlgItemTextA$MH() {
        return cfapi_h$constants$35.SetDlgItemTextA$MH();
    }
    public static @C("BOOL") int SetDlgItemTextA (@C("HWND") Addressable hDlg, @C("int") int nIDDlgItem, @C("LPCSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$35.SetDlgItemTextA$MH().invokeExact(hDlg.address(), nIDDlgItem, lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDlgItemTextW$MH() {
        return cfapi_h$constants$35.SetDlgItemTextW$MH();
    }
    public static @C("BOOL") int SetDlgItemTextW (@C("HWND") Addressable hDlg, @C("int") int nIDDlgItem, @C("LPCWSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$35.SetDlgItemTextW$MH().invokeExact(hDlg.address(), nIDDlgItem, lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDlgItemTextA$MH() {
        return cfapi_h$constants$35.GetDlgItemTextA$MH();
    }
    public static @C("UINT") int GetDlgItemTextA (@C("HWND") Addressable hDlg, @C("int") int nIDDlgItem, @C("LPSTR") Addressable lpString, @C("int") int cchMax) {
        try {
            return (int)cfapi_h$constants$35.GetDlgItemTextA$MH().invokeExact(hDlg.address(), nIDDlgItem, lpString.address(), cchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDlgItemTextW$MH() {
        return cfapi_h$constants$35.GetDlgItemTextW$MH();
    }
    public static @C("UINT") int GetDlgItemTextW (@C("HWND") Addressable hDlg, @C("int") int nIDDlgItem, @C("LPWSTR") Addressable lpString, @C("int") int cchMax) {
        try {
            return (int)cfapi_h$constants$35.GetDlgItemTextW$MH().invokeExact(hDlg.address(), nIDDlgItem, lpString.address(), cchMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckDlgButton$MH() {
        return cfapi_h$constants$35.CheckDlgButton$MH();
    }
    public static @C("BOOL") int CheckDlgButton (@C("HWND") Addressable hDlg, @C("int") int nIDButton, @C("UINT") int uCheck) {
        try {
            return (int)cfapi_h$constants$35.CheckDlgButton$MH().invokeExact(hDlg.address(), nIDButton, uCheck);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckRadioButton$MH() {
        return cfapi_h$constants$35.CheckRadioButton$MH();
    }
    public static @C("BOOL") int CheckRadioButton (@C("HWND") Addressable hDlg, @C("int") int nIDFirstButton, @C("int") int nIDLastButton, @C("int") int nIDCheckButton) {
        try {
            return (int)cfapi_h$constants$35.CheckRadioButton$MH().invokeExact(hDlg.address(), nIDFirstButton, nIDLastButton, nIDCheckButton);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsDlgButtonChecked$MH() {
        return cfapi_h$constants$35.IsDlgButtonChecked$MH();
    }
    public static @C("UINT") int IsDlgButtonChecked (@C("HWND") Addressable hDlg, @C("int") int nIDButton) {
        try {
            return (int)cfapi_h$constants$35.IsDlgButtonChecked$MH().invokeExact(hDlg.address(), nIDButton);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendDlgItemMessageA$MH() {
        return cfapi_h$constants$35.SendDlgItemMessageA$MH();
    }
    public static @C("LRESULT") long SendDlgItemMessageA (@C("HWND") Addressable hDlg, @C("int") int nIDDlgItem, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.SendDlgItemMessageA$MH().invokeExact(hDlg.address(), nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendDlgItemMessageW$MH() {
        return cfapi_h$constants$35.SendDlgItemMessageW$MH();
    }
    public static @C("LRESULT") long SendDlgItemMessageW (@C("HWND") Addressable hDlg, @C("int") int nIDDlgItem, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.SendDlgItemMessageW$MH().invokeExact(hDlg.address(), nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNextDlgGroupItem$MH() {
        return cfapi_h$constants$35.GetNextDlgGroupItem$MH();
    }
    public static @C("HWND") MemoryAddress GetNextDlgGroupItem (@C("HWND") Addressable hDlg, @C("HWND") Addressable hCtl, @C("BOOL") int bPrevious) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.GetNextDlgGroupItem$MH().invokeExact(hDlg.address(), hCtl.address(), bPrevious);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNextDlgTabItem$MH() {
        return cfapi_h$constants$35.GetNextDlgTabItem$MH();
    }
    public static @C("HWND") MemoryAddress GetNextDlgTabItem (@C("HWND") Addressable hDlg, @C("HWND") Addressable hCtl, @C("BOOL") int bPrevious) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.GetNextDlgTabItem$MH().invokeExact(hDlg.address(), hCtl.address(), bPrevious);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDlgCtrlID$MH() {
        return cfapi_h$constants$35.GetDlgCtrlID$MH();
    }
    public static @C("int") int GetDlgCtrlID (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.GetDlgCtrlID$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDialogBaseUnits$MH() {
        return cfapi_h$constants$35.GetDialogBaseUnits$MH();
    }
    public static @C("long") int GetDialogBaseUnits () {
        try {
            return (int)cfapi_h$constants$35.GetDialogBaseUnits$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefDlgProcA$MH() {
        return cfapi_h$constants$35.DefDlgProcA$MH();
    }
    public static @C("LRESULT") long DefDlgProcA (@C("HWND") Addressable hDlg, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.DefDlgProcA$MH().invokeExact(hDlg.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DefDlgProcW$MH() {
        return cfapi_h$constants$35.DefDlgProcW$MH();
    }
    public static @C("LRESULT") long DefDlgProcW (@C("HWND") Addressable hDlg, @C("UINT") int Msg, @C("WPARAM") long wParam, @C("LPARAM") long lParam) {
        try {
            return (long)cfapi_h$constants$35.DefDlgProcW$MH().invokeExact(hDlg.address(), Msg, wParam, lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int DCDC_DEFAULT() {
        return cfapi_h$constants$35.DCDC_DEFAULT();
    }
    public static @C("int") int DCDC_DISABLE_FONT_UPDATE() {
        return cfapi_h$constants$35.DCDC_DISABLE_FONT_UPDATE();
    }
    public static @C("int") int DCDC_DISABLE_RELAYOUT() {
        return cfapi_h$constants$35.DCDC_DISABLE_RELAYOUT();
    }
    public static  MethodHandle SetDialogControlDpiChangeBehavior$MH() {
        return cfapi_h$constants$35.SetDialogControlDpiChangeBehavior$MH();
    }
    public static @C("BOOL") int SetDialogControlDpiChangeBehavior (@C("HWND") Addressable hWnd, @C("DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS") int mask, @C("DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS") int values) {
        try {
            return (int)cfapi_h$constants$35.SetDialogControlDpiChangeBehavior$MH().invokeExact(hWnd.address(), mask, values);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDialogControlDpiChangeBehavior$MH() {
        return cfapi_h$constants$35.GetDialogControlDpiChangeBehavior$MH();
    }
    public static @C("DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS") int GetDialogControlDpiChangeBehavior (@C("HWND") Addressable hWnd) {
        try {
            return (int)cfapi_h$constants$35.GetDialogControlDpiChangeBehavior$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int DDC_DEFAULT() {
        return cfapi_h$constants$35.DDC_DEFAULT();
    }
    public static @C("int") int DDC_DISABLE_ALL() {
        return cfapi_h$constants$35.DDC_DISABLE_ALL();
    }
    public static @C("int") int DDC_DISABLE_RESIZE() {
        return cfapi_h$constants$35.DDC_DISABLE_RESIZE();
    }
    public static @C("int") int DDC_DISABLE_CONTROL_RELAYOUT() {
        return cfapi_h$constants$35.DDC_DISABLE_CONTROL_RELAYOUT();
    }
    public static  MethodHandle SetDialogDpiChangeBehavior$MH() {
        return cfapi_h$constants$35.SetDialogDpiChangeBehavior$MH();
    }
    public static @C("BOOL") int SetDialogDpiChangeBehavior (@C("HWND") Addressable hDlg, @C("DIALOG_DPI_CHANGE_BEHAVIORS") int mask, @C("DIALOG_DPI_CHANGE_BEHAVIORS") int values) {
        try {
            return (int)cfapi_h$constants$35.SetDialogDpiChangeBehavior$MH().invokeExact(hDlg.address(), mask, values);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDialogDpiChangeBehavior$MH() {
        return cfapi_h$constants$35.GetDialogDpiChangeBehavior$MH();
    }
    public static @C("DIALOG_DPI_CHANGE_BEHAVIORS") int GetDialogDpiChangeBehavior (@C("HWND") Addressable hDlg) {
        try {
            return (int)cfapi_h$constants$35.GetDialogDpiChangeBehavior$MH().invokeExact(hDlg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallMsgFilterA$MH() {
        return cfapi_h$constants$35.CallMsgFilterA$MH();
    }
    public static @C("BOOL") int CallMsgFilterA (@C("LPMSG") Addressable lpMsg, @C("int") int nCode) {
        try {
            return (int)cfapi_h$constants$35.CallMsgFilterA$MH().invokeExact(lpMsg.address(), nCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallMsgFilterW$MH() {
        return cfapi_h$constants$35.CallMsgFilterW$MH();
    }
    public static @C("BOOL") int CallMsgFilterW (@C("LPMSG") Addressable lpMsg, @C("int") int nCode) {
        try {
            return (int)cfapi_h$constants$35.CallMsgFilterW$MH().invokeExact(lpMsg.address(), nCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenClipboard$MH() {
        return cfapi_h$constants$35.OpenClipboard$MH();
    }
    public static @C("BOOL") int OpenClipboard (@C("HWND") Addressable hWndNewOwner) {
        try {
            return (int)cfapi_h$constants$35.OpenClipboard$MH().invokeExact(hWndNewOwner.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseClipboard$MH() {
        return cfapi_h$constants$35.CloseClipboard$MH();
    }
    public static @C("BOOL") int CloseClipboard () {
        try {
            return (int)cfapi_h$constants$35.CloseClipboard$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClipboardSequenceNumber$MH() {
        return cfapi_h$constants$35.GetClipboardSequenceNumber$MH();
    }
    public static @C("DWORD") int GetClipboardSequenceNumber () {
        try {
            return (int)cfapi_h$constants$35.GetClipboardSequenceNumber$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClipboardOwner$MH() {
        return cfapi_h$constants$35.GetClipboardOwner$MH();
    }
    public static @C("HWND") MemoryAddress GetClipboardOwner () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.GetClipboardOwner$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetClipboardViewer$MH() {
        return cfapi_h$constants$35.SetClipboardViewer$MH();
    }
    public static @C("HWND") MemoryAddress SetClipboardViewer (@C("HWND") Addressable hWndNewViewer) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.SetClipboardViewer$MH().invokeExact(hWndNewViewer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClipboardViewer$MH() {
        return cfapi_h$constants$35.GetClipboardViewer$MH();
    }
    public static @C("HWND") MemoryAddress GetClipboardViewer () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.GetClipboardViewer$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChangeClipboardChain$MH() {
        return cfapi_h$constants$35.ChangeClipboardChain$MH();
    }
    public static @C("BOOL") int ChangeClipboardChain (@C("HWND") Addressable hWndRemove, @C("HWND") Addressable hWndNewNext) {
        try {
            return (int)cfapi_h$constants$35.ChangeClipboardChain$MH().invokeExact(hWndRemove.address(), hWndNewNext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetClipboardData$MH() {
        return cfapi_h$constants$35.SetClipboardData$MH();
    }
    public static @C("HANDLE") MemoryAddress SetClipboardData (@C("UINT") int uFormat, @C("HANDLE") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.SetClipboardData$MH().invokeExact(uFormat, hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClipboardData$MH() {
        return cfapi_h$constants$35.GetClipboardData$MH();
    }
    public static @C("HANDLE") MemoryAddress GetClipboardData (@C("UINT") int uFormat) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.GetClipboardData$MH().invokeExact(uFormat);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterClipboardFormatA$MH() {
        return cfapi_h$constants$35.RegisterClipboardFormatA$MH();
    }
    public static @C("UINT") int RegisterClipboardFormatA (@C("LPCSTR") Addressable lpszFormat) {
        try {
            return (int)cfapi_h$constants$35.RegisterClipboardFormatA$MH().invokeExact(lpszFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterClipboardFormatW$MH() {
        return cfapi_h$constants$35.RegisterClipboardFormatW$MH();
    }
    public static @C("UINT") int RegisterClipboardFormatW (@C("LPCWSTR") Addressable lpszFormat) {
        try {
            return (int)cfapi_h$constants$35.RegisterClipboardFormatW$MH().invokeExact(lpszFormat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CountClipboardFormats$MH() {
        return cfapi_h$constants$35.CountClipboardFormats$MH();
    }
    public static @C("int") int CountClipboardFormats () {
        try {
            return (int)cfapi_h$constants$35.CountClipboardFormats$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumClipboardFormats$MH() {
        return cfapi_h$constants$35.EnumClipboardFormats$MH();
    }
    public static @C("UINT") int EnumClipboardFormats (@C("UINT") int format) {
        try {
            return (int)cfapi_h$constants$35.EnumClipboardFormats$MH().invokeExact(format);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClipboardFormatNameA$MH() {
        return cfapi_h$constants$35.GetClipboardFormatNameA$MH();
    }
    public static @C("int") int GetClipboardFormatNameA (@C("UINT") int format, @C("LPSTR") Addressable lpszFormatName, @C("int") int cchMaxCount) {
        try {
            return (int)cfapi_h$constants$35.GetClipboardFormatNameA$MH().invokeExact(format, lpszFormatName.address(), cchMaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetClipboardFormatNameW$MH() {
        return cfapi_h$constants$35.GetClipboardFormatNameW$MH();
    }
    public static @C("int") int GetClipboardFormatNameW (@C("UINT") int format, @C("LPWSTR") Addressable lpszFormatName, @C("int") int cchMaxCount) {
        try {
            return (int)cfapi_h$constants$35.GetClipboardFormatNameW$MH().invokeExact(format, lpszFormatName.address(), cchMaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EmptyClipboard$MH() {
        return cfapi_h$constants$35.EmptyClipboard$MH();
    }
    public static @C("BOOL") int EmptyClipboard () {
        try {
            return (int)cfapi_h$constants$35.EmptyClipboard$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsClipboardFormatAvailable$MH() {
        return cfapi_h$constants$35.IsClipboardFormatAvailable$MH();
    }
    public static @C("BOOL") int IsClipboardFormatAvailable (@C("UINT") int format) {
        try {
            return (int)cfapi_h$constants$35.IsClipboardFormatAvailable$MH().invokeExact(format);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPriorityClipboardFormat$MH() {
        return cfapi_h$constants$35.GetPriorityClipboardFormat$MH();
    }
    public static @C("int") int GetPriorityClipboardFormat (@C("UINT*") Addressable paFormatPriorityList, @C("int") int cFormats) {
        try {
            return (int)cfapi_h$constants$35.GetPriorityClipboardFormat$MH().invokeExact(paFormatPriorityList.address(), cFormats);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetOpenClipboardWindow$MH() {
        return cfapi_h$constants$35.GetOpenClipboardWindow$MH();
    }
    public static @C("HWND") MemoryAddress GetOpenClipboardWindow () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.GetOpenClipboardWindow$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddClipboardFormatListener$MH() {
        return cfapi_h$constants$35.AddClipboardFormatListener$MH();
    }
    public static @C("BOOL") int AddClipboardFormatListener (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$35.AddClipboardFormatListener$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveClipboardFormatListener$MH() {
        return cfapi_h$constants$35.RemoveClipboardFormatListener$MH();
    }
    public static @C("BOOL") int RemoveClipboardFormatListener (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$35.RemoveClipboardFormatListener$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUpdatedClipboardFormats$MH() {
        return cfapi_h$constants$35.GetUpdatedClipboardFormats$MH();
    }
    public static @C("BOOL") int GetUpdatedClipboardFormats (@C("PUINT") Addressable lpuiFormats, @C("UINT") int cFormats, @C("PUINT") Addressable pcFormatsOut) {
        try {
            return (int)cfapi_h$constants$35.GetUpdatedClipboardFormats$MH().invokeExact(lpuiFormats.address(), cFormats, pcFormatsOut.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharToOemA$MH() {
        return cfapi_h$constants$35.CharToOemA$MH();
    }
    public static @C("BOOL") int CharToOemA (@C("LPCSTR") Addressable pSrc, @C("LPSTR") Addressable pDst) {
        try {
            return (int)cfapi_h$constants$35.CharToOemA$MH().invokeExact(pSrc.address(), pDst.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharToOemW$MH() {
        return cfapi_h$constants$35.CharToOemW$MH();
    }
    public static @C("BOOL") int CharToOemW (@C("LPCWSTR") Addressable pSrc, @C("LPSTR") Addressable pDst) {
        try {
            return (int)cfapi_h$constants$35.CharToOemW$MH().invokeExact(pSrc.address(), pDst.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OemToCharA$MH() {
        return cfapi_h$constants$35.OemToCharA$MH();
    }
    public static @C("BOOL") int OemToCharA (@C("LPCSTR") Addressable pSrc, @C("LPSTR") Addressable pDst) {
        try {
            return (int)cfapi_h$constants$35.OemToCharA$MH().invokeExact(pSrc.address(), pDst.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OemToCharW$MH() {
        return cfapi_h$constants$35.OemToCharW$MH();
    }
    public static @C("BOOL") int OemToCharW (@C("LPCSTR") Addressable pSrc, @C("LPWSTR") Addressable pDst) {
        try {
            return (int)cfapi_h$constants$35.OemToCharW$MH().invokeExact(pSrc.address(), pDst.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharToOemBuffA$MH() {
        return cfapi_h$constants$35.CharToOemBuffA$MH();
    }
    public static @C("BOOL") int CharToOemBuffA (@C("LPCSTR") Addressable lpszSrc, @C("LPSTR") Addressable lpszDst, @C("DWORD") int cchDstLength) {
        try {
            return (int)cfapi_h$constants$35.CharToOemBuffA$MH().invokeExact(lpszSrc.address(), lpszDst.address(), cchDstLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharToOemBuffW$MH() {
        return cfapi_h$constants$35.CharToOemBuffW$MH();
    }
    public static @C("BOOL") int CharToOemBuffW (@C("LPCWSTR") Addressable lpszSrc, @C("LPSTR") Addressable lpszDst, @C("DWORD") int cchDstLength) {
        try {
            return (int)cfapi_h$constants$35.CharToOemBuffW$MH().invokeExact(lpszSrc.address(), lpszDst.address(), cchDstLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OemToCharBuffA$MH() {
        return cfapi_h$constants$35.OemToCharBuffA$MH();
    }
    public static @C("BOOL") int OemToCharBuffA (@C("LPCSTR") Addressable lpszSrc, @C("LPSTR") Addressable lpszDst, @C("DWORD") int cchDstLength) {
        try {
            return (int)cfapi_h$constants$35.OemToCharBuffA$MH().invokeExact(lpszSrc.address(), lpszDst.address(), cchDstLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OemToCharBuffW$MH() {
        return cfapi_h$constants$35.OemToCharBuffW$MH();
    }
    public static @C("BOOL") int OemToCharBuffW (@C("LPCSTR") Addressable lpszSrc, @C("LPWSTR") Addressable lpszDst, @C("DWORD") int cchDstLength) {
        try {
            return (int)cfapi_h$constants$35.OemToCharBuffW$MH().invokeExact(lpszSrc.address(), lpszDst.address(), cchDstLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharUpperA$MH() {
        return cfapi_h$constants$35.CharUpperA$MH();
    }
    public static @C("LPSTR") MemoryAddress CharUpperA (@C("LPSTR") Addressable lpsz) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharUpperA$MH().invokeExact(lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharUpperW$MH() {
        return cfapi_h$constants$35.CharUpperW$MH();
    }
    public static @C("LPWSTR") MemoryAddress CharUpperW (@C("LPWSTR") Addressable lpsz) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharUpperW$MH().invokeExact(lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharUpperBuffA$MH() {
        return cfapi_h$constants$35.CharUpperBuffA$MH();
    }
    public static @C("DWORD") int CharUpperBuffA (@C("LPSTR") Addressable lpsz, @C("DWORD") int cchLength) {
        try {
            return (int)cfapi_h$constants$35.CharUpperBuffA$MH().invokeExact(lpsz.address(), cchLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharUpperBuffW$MH() {
        return cfapi_h$constants$35.CharUpperBuffW$MH();
    }
    public static @C("DWORD") int CharUpperBuffW (@C("LPWSTR") Addressable lpsz, @C("DWORD") int cchLength) {
        try {
            return (int)cfapi_h$constants$35.CharUpperBuffW$MH().invokeExact(lpsz.address(), cchLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharLowerA$MH() {
        return cfapi_h$constants$35.CharLowerA$MH();
    }
    public static @C("LPSTR") MemoryAddress CharLowerA (@C("LPSTR") Addressable lpsz) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharLowerA$MH().invokeExact(lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharLowerW$MH() {
        return cfapi_h$constants$35.CharLowerW$MH();
    }
    public static @C("LPWSTR") MemoryAddress CharLowerW (@C("LPWSTR") Addressable lpsz) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharLowerW$MH().invokeExact(lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharLowerBuffA$MH() {
        return cfapi_h$constants$35.CharLowerBuffA$MH();
    }
    public static @C("DWORD") int CharLowerBuffA (@C("LPSTR") Addressable lpsz, @C("DWORD") int cchLength) {
        try {
            return (int)cfapi_h$constants$35.CharLowerBuffA$MH().invokeExact(lpsz.address(), cchLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharLowerBuffW$MH() {
        return cfapi_h$constants$35.CharLowerBuffW$MH();
    }
    public static @C("DWORD") int CharLowerBuffW (@C("LPWSTR") Addressable lpsz, @C("DWORD") int cchLength) {
        try {
            return (int)cfapi_h$constants$35.CharLowerBuffW$MH().invokeExact(lpsz.address(), cchLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharNextA$MH() {
        return cfapi_h$constants$35.CharNextA$MH();
    }
    public static @C("LPSTR") MemoryAddress CharNextA (@C("LPCSTR") Addressable lpsz) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharNextA$MH().invokeExact(lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharNextW$MH() {
        return cfapi_h$constants$35.CharNextW$MH();
    }
    public static @C("LPWSTR") MemoryAddress CharNextW (@C("LPCWSTR") Addressable lpsz) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharNextW$MH().invokeExact(lpsz.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharPrevA$MH() {
        return cfapi_h$constants$35.CharPrevA$MH();
    }
    public static @C("LPSTR") MemoryAddress CharPrevA (@C("LPCSTR") Addressable lpszStart, @C("LPCSTR") Addressable lpszCurrent) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharPrevA$MH().invokeExact(lpszStart.address(), lpszCurrent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharPrevW$MH() {
        return cfapi_h$constants$35.CharPrevW$MH();
    }
    public static @C("LPWSTR") MemoryAddress CharPrevW (@C("LPCWSTR") Addressable lpszStart, @C("LPCWSTR") Addressable lpszCurrent) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharPrevW$MH().invokeExact(lpszStart.address(), lpszCurrent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharNextExA$MH() {
        return cfapi_h$constants$35.CharNextExA$MH();
    }
    public static @C("LPSTR") MemoryAddress CharNextExA (@C("WORD") short CodePage, @C("LPCSTR") Addressable lpCurrentChar, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharNextExA$MH().invokeExact(CodePage, lpCurrentChar.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CharPrevExA$MH() {
        return cfapi_h$constants$35.CharPrevExA$MH();
    }
    public static @C("LPSTR") MemoryAddress CharPrevExA (@C("WORD") short CodePage, @C("LPCSTR") Addressable lpStart, @C("LPCSTR") Addressable lpCurrentChar, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.CharPrevExA$MH().invokeExact(CodePage, lpStart.address(), lpCurrentChar.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsCharAlphaA$MH() {
        return cfapi_h$constants$35.IsCharAlphaA$MH();
    }
    public static @C("BOOL") int IsCharAlphaA (@C("CHAR") byte ch) {
        try {
            return (int)cfapi_h$constants$35.IsCharAlphaA$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsCharAlphaW$MH() {
        return cfapi_h$constants$35.IsCharAlphaW$MH();
    }
    public static @C("BOOL") int IsCharAlphaW (@C("WCHAR") short ch) {
        try {
            return (int)cfapi_h$constants$35.IsCharAlphaW$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsCharAlphaNumericA$MH() {
        return cfapi_h$constants$35.IsCharAlphaNumericA$MH();
    }
    public static @C("BOOL") int IsCharAlphaNumericA (@C("CHAR") byte ch) {
        try {
            return (int)cfapi_h$constants$35.IsCharAlphaNumericA$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsCharAlphaNumericW$MH() {
        return cfapi_h$constants$35.IsCharAlphaNumericW$MH();
    }
    public static @C("BOOL") int IsCharAlphaNumericW (@C("WCHAR") short ch) {
        try {
            return (int)cfapi_h$constants$35.IsCharAlphaNumericW$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsCharUpperA$MH() {
        return cfapi_h$constants$35.IsCharUpperA$MH();
    }
    public static @C("BOOL") int IsCharUpperA (@C("CHAR") byte ch) {
        try {
            return (int)cfapi_h$constants$35.IsCharUpperA$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsCharUpperW$MH() {
        return cfapi_h$constants$35.IsCharUpperW$MH();
    }
    public static @C("BOOL") int IsCharUpperW (@C("WCHAR") short ch) {
        try {
            return (int)cfapi_h$constants$35.IsCharUpperW$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsCharLowerA$MH() {
        return cfapi_h$constants$35.IsCharLowerA$MH();
    }
    public static @C("BOOL") int IsCharLowerA (@C("CHAR") byte ch) {
        try {
            return (int)cfapi_h$constants$35.IsCharLowerA$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsCharLowerW$MH() {
        return cfapi_h$constants$35.IsCharLowerW$MH();
    }
    public static @C("BOOL") int IsCharLowerW (@C("WCHAR") short ch) {
        try {
            return (int)cfapi_h$constants$35.IsCharLowerW$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFocus$MH() {
        return cfapi_h$constants$35.SetFocus$MH();
    }
    public static @C("HWND") MemoryAddress SetFocus (@C("HWND") Addressable hWnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.SetFocus$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetActiveWindow$MH() {
        return cfapi_h$constants$35.GetActiveWindow$MH();
    }
    public static @C("HWND") MemoryAddress GetActiveWindow () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.GetActiveWindow$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFocus$MH() {
        return cfapi_h$constants$35.GetFocus$MH();
    }
    public static @C("HWND") MemoryAddress GetFocus () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$35.GetFocus$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKBCodePage$MH() {
        return cfapi_h$constants$35.GetKBCodePage$MH();
    }
    public static @C("UINT") int GetKBCodePage () {
        try {
            return (int)cfapi_h$constants$35.GetKBCodePage$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKeyState$MH() {
        return cfapi_h$constants$35.GetKeyState$MH();
    }
    public static @C("SHORT") short GetKeyState (@C("int") int nVirtKey) {
        try {
            return (short)cfapi_h$constants$35.GetKeyState$MH().invokeExact(nVirtKey);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAsyncKeyState$MH() {
        return cfapi_h$constants$35.GetAsyncKeyState$MH();
    }
    public static @C("SHORT") short GetAsyncKeyState (@C("int") int vKey) {
        try {
            return (short)cfapi_h$constants$35.GetAsyncKeyState$MH().invokeExact(vKey);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKeyboardState$MH() {
        return cfapi_h$constants$35.GetKeyboardState$MH();
    }
    public static @C("BOOL") int GetKeyboardState (@C("PBYTE") Addressable lpKeyState) {
        try {
            return (int)cfapi_h$constants$35.GetKeyboardState$MH().invokeExact(lpKeyState.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetKeyboardState$MH() {
        return cfapi_h$constants$35.SetKeyboardState$MH();
    }
    public static @C("BOOL") int SetKeyboardState (@C("LPBYTE") Addressable lpKeyState) {
        try {
            return (int)cfapi_h$constants$35.SetKeyboardState$MH().invokeExact(lpKeyState.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKeyNameTextA$MH() {
        return cfapi_h$constants$35.GetKeyNameTextA$MH();
    }
    public static @C("int") int GetKeyNameTextA (@C("LONG") int lParam, @C("LPSTR") Addressable lpString, @C("int") int cchSize) {
        try {
            return (int)cfapi_h$constants$35.GetKeyNameTextA$MH().invokeExact(lParam, lpString.address(), cchSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKeyNameTextW$MH() {
        return cfapi_h$constants$35.GetKeyNameTextW$MH();
    }
    public static @C("int") int GetKeyNameTextW (@C("LONG") int lParam, @C("LPWSTR") Addressable lpString, @C("int") int cchSize) {
        try {
            return (int)cfapi_h$constants$35.GetKeyNameTextW$MH().invokeExact(lParam, lpString.address(), cchSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKeyboardType$MH() {
        return cfapi_h$constants$35.GetKeyboardType$MH();
    }
    public static @C("int") int GetKeyboardType (@C("int") int nTypeFlag) {
        try {
            return (int)cfapi_h$constants$35.GetKeyboardType$MH().invokeExact(nTypeFlag);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ToAscii$MH() {
        return cfapi_h$constants$35.ToAscii$MH();
    }
    public static @C("int") int ToAscii (@C("UINT") int uVirtKey, @C("UINT") int uScanCode, @C("const BYTE*") Addressable lpKeyState, @C("LPWORD") Addressable lpChar, @C("UINT") int uFlags) {
        try {
            return (int)cfapi_h$constants$35.ToAscii$MH().invokeExact(uVirtKey, uScanCode, lpKeyState.address(), lpChar.address(), uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ToAsciiEx$MH() {
        return cfapi_h$constants$35.ToAsciiEx$MH();
    }
    public static @C("int") int ToAsciiEx (@C("UINT") int uVirtKey, @C("UINT") int uScanCode, @C("const BYTE*") Addressable lpKeyState, @C("LPWORD") Addressable lpChar, @C("UINT") int uFlags, @C("HKL") Addressable dwhkl) {
        try {
            return (int)cfapi_h$constants$35.ToAsciiEx$MH().invokeExact(uVirtKey, uScanCode, lpKeyState.address(), lpChar.address(), uFlags, dwhkl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ToUnicode$MH() {
        return cfapi_h$constants$35.ToUnicode$MH();
    }
    public static @C("int") int ToUnicode (@C("UINT") int wVirtKey, @C("UINT") int wScanCode, @C("const BYTE*") Addressable lpKeyState, @C("LPWSTR") Addressable pwszBuff, @C("int") int cchBuff, @C("UINT") int wFlags) {
        try {
            return (int)cfapi_h$constants$35.ToUnicode$MH().invokeExact(wVirtKey, wScanCode, lpKeyState.address(), pwszBuff.address(), cchBuff, wFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OemKeyScan$MH() {
        return cfapi_h$constants$35.OemKeyScan$MH();
    }
    public static @C("DWORD") int OemKeyScan (@C("WORD") short wOemChar) {
        try {
            return (int)cfapi_h$constants$35.OemKeyScan$MH().invokeExact(wOemChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VkKeyScanA$MH() {
        return cfapi_h$constants$35.VkKeyScanA$MH();
    }
    public static @C("SHORT") short VkKeyScanA (@C("CHAR") byte ch) {
        try {
            return (short)cfapi_h$constants$35.VkKeyScanA$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VkKeyScanW$MH() {
        return cfapi_h$constants$35.VkKeyScanW$MH();
    }
    public static @C("SHORT") short VkKeyScanW (@C("WCHAR") short ch) {
        try {
            return (short)cfapi_h$constants$35.VkKeyScanW$MH().invokeExact(ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VkKeyScanExA$MH() {
        return cfapi_h$constants$35.VkKeyScanExA$MH();
    }
    public static @C("SHORT") short VkKeyScanExA (@C("CHAR") byte ch, @C("HKL") Addressable dwhkl) {
        try {
            return (short)cfapi_h$constants$35.VkKeyScanExA$MH().invokeExact(ch, dwhkl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VkKeyScanExW$MH() {
        return cfapi_h$constants$35.VkKeyScanExW$MH();
    }
    public static @C("SHORT") short VkKeyScanExW (@C("WCHAR") short ch, @C("HKL") Addressable dwhkl) {
        try {
            return (short)cfapi_h$constants$35.VkKeyScanExW$MH().invokeExact(ch, dwhkl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle keybd_event$MH() {
        return cfapi_h$constants$35.keybd_event$MH();
    }
    public static void keybd_event (@C("BYTE") byte bVk, @C("BYTE") byte bScan, @C("DWORD") int dwFlags, @C("ULONG_PTR") long dwExtraInfo) {
        try {
            cfapi_h$constants$35.keybd_event$MH().invokeExact(bVk, bScan, dwFlags, dwExtraInfo);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle mouse_event$MH() {
        return cfapi_h$constants$35.mouse_event$MH();
    }
    public static void mouse_event (@C("DWORD") int dwFlags, @C("DWORD") int dx, @C("DWORD") int dy, @C("DWORD") int dwData, @C("ULONG_PTR") long dwExtraInfo) {
        try {
            cfapi_h$constants$35.mouse_event$MH().invokeExact(dwFlags, dx, dy, dwData, dwExtraInfo);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SendInput$MH() {
        return cfapi_h$constants$36.SendInput$MH();
    }
    public static @C("UINT") int SendInput (@C("UINT") int cInputs, @C("LPINPUT") Addressable pInputs, @C("int") int cbSize) {
        try {
            return (int)cfapi_h$constants$36.SendInput$MH().invokeExact(cInputs, pInputs.address(), cbSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTouchInputInfo$MH() {
        return cfapi_h$constants$36.GetTouchInputInfo$MH();
    }
    public static @C("BOOL") int GetTouchInputInfo (@C("HTOUCHINPUT") Addressable hTouchInput, @C("UINT") int cInputs, @C("PTOUCHINPUT") Addressable pInputs, @C("int") int cbSize) {
        try {
            return (int)cfapi_h$constants$36.GetTouchInputInfo$MH().invokeExact(hTouchInput.address(), cInputs, pInputs.address(), cbSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseTouchInputHandle$MH() {
        return cfapi_h$constants$36.CloseTouchInputHandle$MH();
    }
    public static @C("BOOL") int CloseTouchInputHandle (@C("HTOUCHINPUT") Addressable hTouchInput) {
        try {
            return (int)cfapi_h$constants$36.CloseTouchInputHandle$MH().invokeExact(hTouchInput.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterTouchWindow$MH() {
        return cfapi_h$constants$36.RegisterTouchWindow$MH();
    }
    public static @C("BOOL") int RegisterTouchWindow (@C("HWND") Addressable hwnd, @C("ULONG") int ulFlags) {
        try {
            return (int)cfapi_h$constants$36.RegisterTouchWindow$MH().invokeExact(hwnd.address(), ulFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterTouchWindow$MH() {
        return cfapi_h$constants$36.UnregisterTouchWindow$MH();
    }
    public static @C("BOOL") int UnregisterTouchWindow (@C("HWND") Addressable hwnd) {
        try {
            return (int)cfapi_h$constants$36.UnregisterTouchWindow$MH().invokeExact(hwnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsTouchWindow$MH() {
        return cfapi_h$constants$36.IsTouchWindow$MH();
    }
    public static @C("BOOL") int IsTouchWindow (@C("HWND") Addressable hwnd, @C("PULONG") Addressable pulFlags) {
        try {
            return (int)cfapi_h$constants$36.IsTouchWindow$MH().invokeExact(hwnd.address(), pulFlags.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int PT_POINTER() {
        return cfapi_h$constants$36.PT_POINTER();
    }
    public static @C("int") int PT_TOUCH() {
        return cfapi_h$constants$36.PT_TOUCH();
    }
    public static @C("int") int PT_PEN() {
        return cfapi_h$constants$36.PT_PEN();
    }
    public static @C("int") int PT_MOUSE() {
        return cfapi_h$constants$36.PT_MOUSE();
    }
    public static @C("int") int PT_TOUCHPAD() {
        return cfapi_h$constants$36.PT_TOUCHPAD();
    }
    public static @C("int") int POINTER_CHANGE_NONE() {
        return cfapi_h$constants$36.POINTER_CHANGE_NONE();
    }
    public static @C("int") int POINTER_CHANGE_FIRSTBUTTON_DOWN() {
        return cfapi_h$constants$36.POINTER_CHANGE_FIRSTBUTTON_DOWN();
    }
    public static @C("int") int POINTER_CHANGE_FIRSTBUTTON_UP() {
        return cfapi_h$constants$36.POINTER_CHANGE_FIRSTBUTTON_UP();
    }
    public static @C("int") int POINTER_CHANGE_SECONDBUTTON_DOWN() {
        return cfapi_h$constants$36.POINTER_CHANGE_SECONDBUTTON_DOWN();
    }
    public static @C("int") int POINTER_CHANGE_SECONDBUTTON_UP() {
        return cfapi_h$constants$36.POINTER_CHANGE_SECONDBUTTON_UP();
    }
    public static @C("int") int POINTER_CHANGE_THIRDBUTTON_DOWN() {
        return cfapi_h$constants$36.POINTER_CHANGE_THIRDBUTTON_DOWN();
    }
    public static @C("int") int POINTER_CHANGE_THIRDBUTTON_UP() {
        return cfapi_h$constants$36.POINTER_CHANGE_THIRDBUTTON_UP();
    }
    public static @C("int") int POINTER_CHANGE_FOURTHBUTTON_DOWN() {
        return cfapi_h$constants$36.POINTER_CHANGE_FOURTHBUTTON_DOWN();
    }
    public static @C("int") int POINTER_CHANGE_FOURTHBUTTON_UP() {
        return cfapi_h$constants$36.POINTER_CHANGE_FOURTHBUTTON_UP();
    }
    public static @C("int") int POINTER_CHANGE_FIFTHBUTTON_DOWN() {
        return cfapi_h$constants$36.POINTER_CHANGE_FIFTHBUTTON_DOWN();
    }
    public static @C("int") int POINTER_CHANGE_FIFTHBUTTON_UP() {
        return cfapi_h$constants$36.POINTER_CHANGE_FIFTHBUTTON_UP();
    }
    public static @C("int") int POINTER_FEEDBACK_DEFAULT() {
        return cfapi_h$constants$36.POINTER_FEEDBACK_DEFAULT();
    }
    public static @C("int") int POINTER_FEEDBACK_INDIRECT() {
        return cfapi_h$constants$36.POINTER_FEEDBACK_INDIRECT();
    }
    public static @C("int") int POINTER_FEEDBACK_NONE() {
        return cfapi_h$constants$36.POINTER_FEEDBACK_NONE();
    }
    public static  MethodHandle InitializeTouchInjection$MH() {
        return cfapi_h$constants$36.InitializeTouchInjection$MH();
    }
    public static @C("BOOL") int InitializeTouchInjection (@C("UINT32") int maxCount, @C("DWORD") int dwMode) {
        try {
            return (int)cfapi_h$constants$36.InitializeTouchInjection$MH().invokeExact(maxCount, dwMode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InjectTouchInput$MH() {
        return cfapi_h$constants$36.InjectTouchInput$MH();
    }
    public static @C("BOOL") int InjectTouchInput (@C("UINT32") int count, @C("const POINTER_TOUCH_INFO*") Addressable contacts) {
        try {
            return (int)cfapi_h$constants$36.InjectTouchInput$MH().invokeExact(count, contacts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerType$MH() {
        return cfapi_h$constants$36.GetPointerType$MH();
    }
    public static @C("BOOL") int GetPointerType (@C("UINT32") int pointerId, @C("POINTER_INPUT_TYPE*") Addressable pointerType) {
        try {
            return (int)cfapi_h$constants$36.GetPointerType$MH().invokeExact(pointerId, pointerType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerCursorId$MH() {
        return cfapi_h$constants$36.GetPointerCursorId$MH();
    }
    public static @C("BOOL") int GetPointerCursorId (@C("UINT32") int pointerId, @C("UINT32*") Addressable cursorId) {
        try {
            return (int)cfapi_h$constants$36.GetPointerCursorId$MH().invokeExact(pointerId, cursorId.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerInfo$MH() {
        return cfapi_h$constants$36.GetPointerInfo$MH();
    }
    public static @C("BOOL") int GetPointerInfo (@C("UINT32") int pointerId, @C("POINTER_INFO*") Addressable pointerInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerInfo$MH().invokeExact(pointerId, pointerInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerInfoHistory$MH() {
        return cfapi_h$constants$36.GetPointerInfoHistory$MH();
    }
    public static @C("BOOL") int GetPointerInfoHistory (@C("UINT32") int pointerId, @C("UINT32*") Addressable entriesCount, @C("POINTER_INFO*") Addressable pointerInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerInfoHistory$MH().invokeExact(pointerId, entriesCount.address(), pointerInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerFrameInfo$MH() {
        return cfapi_h$constants$36.GetPointerFrameInfo$MH();
    }
    public static @C("BOOL") int GetPointerFrameInfo (@C("UINT32") int pointerId, @C("UINT32*") Addressable pointerCount, @C("POINTER_INFO*") Addressable pointerInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerFrameInfo$MH().invokeExact(pointerId, pointerCount.address(), pointerInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerFrameInfoHistory$MH() {
        return cfapi_h$constants$36.GetPointerFrameInfoHistory$MH();
    }
    public static @C("BOOL") int GetPointerFrameInfoHistory (@C("UINT32") int pointerId, @C("UINT32*") Addressable entriesCount, @C("UINT32*") Addressable pointerCount, @C("POINTER_INFO*") Addressable pointerInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerFrameInfoHistory$MH().invokeExact(pointerId, entriesCount.address(), pointerCount.address(), pointerInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerTouchInfo$MH() {
        return cfapi_h$constants$36.GetPointerTouchInfo$MH();
    }
    public static @C("BOOL") int GetPointerTouchInfo (@C("UINT32") int pointerId, @C("POINTER_TOUCH_INFO*") Addressable touchInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerTouchInfo$MH().invokeExact(pointerId, touchInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerTouchInfoHistory$MH() {
        return cfapi_h$constants$36.GetPointerTouchInfoHistory$MH();
    }
    public static @C("BOOL") int GetPointerTouchInfoHistory (@C("UINT32") int pointerId, @C("UINT32*") Addressable entriesCount, @C("POINTER_TOUCH_INFO*") Addressable touchInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerTouchInfoHistory$MH().invokeExact(pointerId, entriesCount.address(), touchInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerFrameTouchInfo$MH() {
        return cfapi_h$constants$36.GetPointerFrameTouchInfo$MH();
    }
    public static @C("BOOL") int GetPointerFrameTouchInfo (@C("UINT32") int pointerId, @C("UINT32*") Addressable pointerCount, @C("POINTER_TOUCH_INFO*") Addressable touchInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerFrameTouchInfo$MH().invokeExact(pointerId, pointerCount.address(), touchInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerFrameTouchInfoHistory$MH() {
        return cfapi_h$constants$36.GetPointerFrameTouchInfoHistory$MH();
    }
    public static @C("BOOL") int GetPointerFrameTouchInfoHistory (@C("UINT32") int pointerId, @C("UINT32*") Addressable entriesCount, @C("UINT32*") Addressable pointerCount, @C("POINTER_TOUCH_INFO*") Addressable touchInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerFrameTouchInfoHistory$MH().invokeExact(pointerId, entriesCount.address(), pointerCount.address(), touchInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerPenInfo$MH() {
        return cfapi_h$constants$36.GetPointerPenInfo$MH();
    }
    public static @C("BOOL") int GetPointerPenInfo (@C("UINT32") int pointerId, @C("POINTER_PEN_INFO*") Addressable penInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerPenInfo$MH().invokeExact(pointerId, penInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerPenInfoHistory$MH() {
        return cfapi_h$constants$36.GetPointerPenInfoHistory$MH();
    }
    public static @C("BOOL") int GetPointerPenInfoHistory (@C("UINT32") int pointerId, @C("UINT32*") Addressable entriesCount, @C("POINTER_PEN_INFO*") Addressable penInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerPenInfoHistory$MH().invokeExact(pointerId, entriesCount.address(), penInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerFramePenInfo$MH() {
        return cfapi_h$constants$36.GetPointerFramePenInfo$MH();
    }
    public static @C("BOOL") int GetPointerFramePenInfo (@C("UINT32") int pointerId, @C("UINT32*") Addressable pointerCount, @C("POINTER_PEN_INFO*") Addressable penInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerFramePenInfo$MH().invokeExact(pointerId, pointerCount.address(), penInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerFramePenInfoHistory$MH() {
        return cfapi_h$constants$36.GetPointerFramePenInfoHistory$MH();
    }
    public static @C("BOOL") int GetPointerFramePenInfoHistory (@C("UINT32") int pointerId, @C("UINT32*") Addressable entriesCount, @C("UINT32*") Addressable pointerCount, @C("POINTER_PEN_INFO*") Addressable penInfo) {
        try {
            return (int)cfapi_h$constants$36.GetPointerFramePenInfoHistory$MH().invokeExact(pointerId, entriesCount.address(), pointerCount.address(), penInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SkipPointerFrameMessages$MH() {
        return cfapi_h$constants$36.SkipPointerFrameMessages$MH();
    }
    public static @C("BOOL") int SkipPointerFrameMessages (@C("UINT32") int pointerId) {
        try {
            return (int)cfapi_h$constants$36.SkipPointerFrameMessages$MH().invokeExact(pointerId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterPointerInputTarget$MH() {
        return cfapi_h$constants$36.RegisterPointerInputTarget$MH();
    }
    public static @C("BOOL") int RegisterPointerInputTarget (@C("HWND") Addressable hwnd, @C("POINTER_INPUT_TYPE") int pointerType) {
        try {
            return (int)cfapi_h$constants$36.RegisterPointerInputTarget$MH().invokeExact(hwnd.address(), pointerType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterPointerInputTarget$MH() {
        return cfapi_h$constants$36.UnregisterPointerInputTarget$MH();
    }
    public static @C("BOOL") int UnregisterPointerInputTarget (@C("HWND") Addressable hwnd, @C("POINTER_INPUT_TYPE") int pointerType) {
        try {
            return (int)cfapi_h$constants$36.UnregisterPointerInputTarget$MH().invokeExact(hwnd.address(), pointerType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterPointerInputTargetEx$MH() {
        return cfapi_h$constants$36.RegisterPointerInputTargetEx$MH();
    }
    public static @C("BOOL") int RegisterPointerInputTargetEx (@C("HWND") Addressable hwnd, @C("POINTER_INPUT_TYPE") int pointerType, @C("BOOL") int fObserve) {
        try {
            return (int)cfapi_h$constants$36.RegisterPointerInputTargetEx$MH().invokeExact(hwnd.address(), pointerType, fObserve);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterPointerInputTargetEx$MH() {
        return cfapi_h$constants$36.UnregisterPointerInputTargetEx$MH();
    }
    public static @C("BOOL") int UnregisterPointerInputTargetEx (@C("HWND") Addressable hwnd, @C("POINTER_INPUT_TYPE") int pointerType) {
        try {
            return (int)cfapi_h$constants$36.UnregisterPointerInputTargetEx$MH().invokeExact(hwnd.address(), pointerType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSyntheticPointerDevice$MH() {
        return cfapi_h$constants$36.CreateSyntheticPointerDevice$MH();
    }
    public static @C("HSYNTHETICPOINTERDEVICE") MemoryAddress CreateSyntheticPointerDevice (@C("POINTER_INPUT_TYPE") int pointerType, @C("ULONG") int maxCount, @C("POINTER_FEEDBACK_MODE") int mode) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.CreateSyntheticPointerDevice$MH().invokeExact(pointerType, maxCount, mode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InjectSyntheticPointerInput$MH() {
        return cfapi_h$constants$36.InjectSyntheticPointerInput$MH();
    }
    public static @C("BOOL") int InjectSyntheticPointerInput (@C("HSYNTHETICPOINTERDEVICE") Addressable device, @C("const POINTER_TYPE_INFO*") Addressable pointerInfo, @C("UINT32") int count) {
        try {
            return (int)cfapi_h$constants$36.InjectSyntheticPointerInput$MH().invokeExact(device.address(), pointerInfo.address(), count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroySyntheticPointerDevice$MH() {
        return cfapi_h$constants$36.DestroySyntheticPointerDevice$MH();
    }
    public static void DestroySyntheticPointerDevice (@C("HSYNTHETICPOINTERDEVICE") Addressable device) {
        try {
            cfapi_h$constants$36.DestroySyntheticPointerDevice$MH().invokeExact(device.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnableMouseInPointer$MH() {
        return cfapi_h$constants$36.EnableMouseInPointer$MH();
    }
    public static @C("BOOL") int EnableMouseInPointer (@C("BOOL") int fEnable) {
        try {
            return (int)cfapi_h$constants$36.EnableMouseInPointer$MH().invokeExact(fEnable);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsMouseInPointerEnabled$MH() {
        return cfapi_h$constants$36.IsMouseInPointerEnabled$MH();
    }
    public static @C("BOOL") int IsMouseInPointerEnabled () {
        try {
            return (int)cfapi_h$constants$36.IsMouseInPointerEnabled$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnableMouseInPointerForThread$MH() {
        return cfapi_h$constants$36.EnableMouseInPointerForThread$MH();
    }
    public static @C("BOOL") int EnableMouseInPointerForThread () {
        try {
            return (int)cfapi_h$constants$36.EnableMouseInPointerForThread$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RegisterTouchHitTestingWindow$MH() {
        return cfapi_h$constants$36.RegisterTouchHitTestingWindow$MH();
    }
    public static @C("BOOL") int RegisterTouchHitTestingWindow (@C("HWND") Addressable hwnd, @C("ULONG") int value) {
        try {
            return (int)cfapi_h$constants$36.RegisterTouchHitTestingWindow$MH().invokeExact(hwnd.address(), value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EvaluateProximityToRect$MH() {
        return cfapi_h$constants$36.EvaluateProximityToRect$MH();
    }
    public static @C("BOOL") int EvaluateProximityToRect (@C("const RECT*") Addressable controlBoundingBox, @C("const TOUCH_HIT_TESTING_INPUT*") Addressable pHitTestingInput, @C("TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*") Addressable pProximityEval) {
        try {
            return (int)cfapi_h$constants$36.EvaluateProximityToRect$MH().invokeExact(controlBoundingBox.address(), pHitTestingInput.address(), pProximityEval.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EvaluateProximityToPolygon$MH() {
        return cfapi_h$constants$36.EvaluateProximityToPolygon$MH();
    }
    public static @C("BOOL") int EvaluateProximityToPolygon (@C("UINT32") int numVertices, @C("const POINT*") Addressable controlPolygon, @C("const TOUCH_HIT_TESTING_INPUT*") Addressable pHitTestingInput, @C("TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*") Addressable pProximityEval) {
        try {
            return (int)cfapi_h$constants$36.EvaluateProximityToPolygon$MH().invokeExact(numVertices, controlPolygon.address(), pHitTestingInput.address(), pProximityEval.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PackTouchHitTestingProximityEvaluation$MH() {
        return cfapi_h$constants$36.PackTouchHitTestingProximityEvaluation$MH();
    }
    public static @C("LRESULT") long PackTouchHitTestingProximityEvaluation (@C("const TOUCH_HIT_TESTING_INPUT*") Addressable pHitTestingInput, @C("const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*") Addressable pProximityEval) {
        try {
            return (long)cfapi_h$constants$36.PackTouchHitTestingProximityEvaluation$MH().invokeExact(pHitTestingInput.address(), pProximityEval.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int FEEDBACK_TOUCH_CONTACTVISUALIZATION() {
        return cfapi_h$constants$36.FEEDBACK_TOUCH_CONTACTVISUALIZATION();
    }
    public static @C("int") int FEEDBACK_PEN_BARRELVISUALIZATION() {
        return cfapi_h$constants$36.FEEDBACK_PEN_BARRELVISUALIZATION();
    }
    public static @C("int") int FEEDBACK_PEN_TAP() {
        return cfapi_h$constants$36.FEEDBACK_PEN_TAP();
    }
    public static @C("int") int FEEDBACK_PEN_DOUBLETAP() {
        return cfapi_h$constants$36.FEEDBACK_PEN_DOUBLETAP();
    }
    public static @C("int") int FEEDBACK_PEN_PRESSANDHOLD() {
        return cfapi_h$constants$36.FEEDBACK_PEN_PRESSANDHOLD();
    }
    public static @C("int") int FEEDBACK_PEN_RIGHTTAP() {
        return cfapi_h$constants$36.FEEDBACK_PEN_RIGHTTAP();
    }
    public static @C("int") int FEEDBACK_TOUCH_TAP() {
        return cfapi_h$constants$36.FEEDBACK_TOUCH_TAP();
    }
    public static @C("int") int FEEDBACK_TOUCH_DOUBLETAP() {
        return cfapi_h$constants$36.FEEDBACK_TOUCH_DOUBLETAP();
    }
    public static @C("int") int FEEDBACK_TOUCH_PRESSANDHOLD() {
        return cfapi_h$constants$36.FEEDBACK_TOUCH_PRESSANDHOLD();
    }
    public static @C("int") int FEEDBACK_TOUCH_RIGHTTAP() {
        return cfapi_h$constants$36.FEEDBACK_TOUCH_RIGHTTAP();
    }
    public static @C("int") int FEEDBACK_GESTURE_PRESSANDTAP() {
        return cfapi_h$constants$36.FEEDBACK_GESTURE_PRESSANDTAP();
    }
    public static @C("int") int FEEDBACK_MAX() {
        return cfapi_h$constants$36.FEEDBACK_MAX();
    }
    public static  MethodHandle GetWindowFeedbackSetting$MH() {
        return cfapi_h$constants$36.GetWindowFeedbackSetting$MH();
    }
    public static @C("BOOL") int GetWindowFeedbackSetting (@C("HWND") Addressable hwnd, @C("FEEDBACK_TYPE") int feedback, @C("DWORD") int dwFlags, @C("UINT32*") Addressable pSize, @C("void*") Addressable config) {
        try {
            return (int)cfapi_h$constants$36.GetWindowFeedbackSetting$MH().invokeExact(hwnd.address(), feedback, dwFlags, pSize.address(), config.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetWindowFeedbackSetting$MH() {
        return cfapi_h$constants$36.SetWindowFeedbackSetting$MH();
    }
    public static @C("BOOL") int SetWindowFeedbackSetting (@C("HWND") Addressable hwnd, @C("FEEDBACK_TYPE") int feedback, @C("DWORD") int dwFlags, @C("UINT32") int size, @C("void*") Addressable configuration) {
        try {
            return (int)cfapi_h$constants$36.SetWindowFeedbackSetting$MH().invokeExact(hwnd.address(), feedback, dwFlags, size, configuration.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPointerInputTransform$MH() {
        return cfapi_h$constants$36.GetPointerInputTransform$MH();
    }
    public static @C("BOOL") int GetPointerInputTransform (@C("UINT32") int pointerId, @C("UINT32") int historyCount, @C("INPUT_TRANSFORM*") Addressable inputTransform) {
        try {
            return (int)cfapi_h$constants$36.GetPointerInputTransform$MH().invokeExact(pointerId, historyCount, inputTransform.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLastInputInfo$MH() {
        return cfapi_h$constants$36.GetLastInputInfo$MH();
    }
    public static @C("BOOL") int GetLastInputInfo (@C("PLASTINPUTINFO") Addressable plii) {
        try {
            return (int)cfapi_h$constants$36.GetLastInputInfo$MH().invokeExact(plii.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapVirtualKeyA$MH() {
        return cfapi_h$constants$36.MapVirtualKeyA$MH();
    }
    public static @C("UINT") int MapVirtualKeyA (@C("UINT") int uCode, @C("UINT") int uMapType) {
        try {
            return (int)cfapi_h$constants$36.MapVirtualKeyA$MH().invokeExact(uCode, uMapType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapVirtualKeyW$MH() {
        return cfapi_h$constants$36.MapVirtualKeyW$MH();
    }
    public static @C("UINT") int MapVirtualKeyW (@C("UINT") int uCode, @C("UINT") int uMapType) {
        try {
            return (int)cfapi_h$constants$36.MapVirtualKeyW$MH().invokeExact(uCode, uMapType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapVirtualKeyExA$MH() {
        return cfapi_h$constants$36.MapVirtualKeyExA$MH();
    }
    public static @C("UINT") int MapVirtualKeyExA (@C("UINT") int uCode, @C("UINT") int uMapType, @C("HKL") Addressable dwhkl) {
        try {
            return (int)cfapi_h$constants$36.MapVirtualKeyExA$MH().invokeExact(uCode, uMapType, dwhkl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapVirtualKeyExW$MH() {
        return cfapi_h$constants$36.MapVirtualKeyExW$MH();
    }
    public static @C("UINT") int MapVirtualKeyExW (@C("UINT") int uCode, @C("UINT") int uMapType, @C("HKL") Addressable dwhkl) {
        try {
            return (int)cfapi_h$constants$36.MapVirtualKeyExW$MH().invokeExact(uCode, uMapType, dwhkl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetInputState$MH() {
        return cfapi_h$constants$36.GetInputState$MH();
    }
    public static @C("BOOL") int GetInputState () {
        try {
            return (int)cfapi_h$constants$36.GetInputState$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetQueueStatus$MH() {
        return cfapi_h$constants$36.GetQueueStatus$MH();
    }
    public static @C("DWORD") int GetQueueStatus (@C("UINT") int flags) {
        try {
            return (int)cfapi_h$constants$36.GetQueueStatus$MH().invokeExact(flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCapture$MH() {
        return cfapi_h$constants$36.GetCapture$MH();
    }
    public static @C("HWND") MemoryAddress GetCapture () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.GetCapture$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCapture$MH() {
        return cfapi_h$constants$36.SetCapture$MH();
    }
    public static @C("HWND") MemoryAddress SetCapture (@C("HWND") Addressable hWnd) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$36.SetCapture$MH().invokeExact(hWnd.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseCapture$MH() {
        return cfapi_h$constants$36.ReleaseCapture$MH();
    }
    public static @C("BOOL") int ReleaseCapture () {
        try {
            return (int)cfapi_h$constants$36.ReleaseCapture$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MsgWaitForMultipleObjects$MH() {
        return cfapi_h$constants$36.MsgWaitForMultipleObjects$MH();
    }
    public static @C("DWORD") int MsgWaitForMultipleObjects (@C("DWORD") int nCount, @C("const HANDLE*") Addressable pHandles, @C("BOOL") int fWaitAll, @C("DWORD") int dwMilliseconds, @C("DWORD") int dwWakeMask) {
        try {
            return (int)cfapi_h$constants$36.MsgWaitForMultipleObjects$MH().invokeExact(nCount, pHandles.address(), fWaitAll, dwMilliseconds, dwWakeMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MsgWaitForMultipleObjectsEx$MH() {
        return cfapi_h$constants$36.MsgWaitForMultipleObjectsEx$MH();
    }
    public static @C("DWORD") int MsgWaitForMultipleObjectsEx (@C("DWORD") int nCount, @C("const HANDLE*") Addressable pHandles, @C("DWORD") int dwMilliseconds, @C("DWORD") int dwWakeMask, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$36.MsgWaitForMultipleObjectsEx$MH().invokeExact(nCount, pHandles.address(), dwMilliseconds, dwWakeMask, dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTimer$MH() {
        return cfapi_h$constants$36.SetTimer$MH();
    }
    public static @C("UINT_PTR") long SetTimer (@C("HWND") Addressable hWnd, @C("UINT_PTR") long nIDEvent, @C("UINT") int uElapse, @C("TIMERPROC") Addressable lpTimerFunc) {
        try {
            return (long)cfapi_h$constants$36.SetTimer$MH().invokeExact(hWnd.address(), nIDEvent, uElapse, lpTimerFunc.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCoalescableTimer$MH() {
        return cfapi_h$constants$36.SetCoalescableTimer$MH();
    }
    public static @C("UINT_PTR") long SetCoalescableTimer (@C("HWND") Addressable hWnd, @C("UINT_PTR") long nIDEvent, @C("UINT") int uElapse, @C("TIMERPROC") Addressable lpTimerFunc, @C("ULONG") int uToleranceDelay) {
        try {
            return (long)cfapi_h$constants$36.SetCoalescableTimer$MH().invokeExact(hWnd.address(), nIDEvent, uElapse, lpTimerFunc.address(), uToleranceDelay);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle KillTimer$MH() {
        return cfapi_h$constants$36.KillTimer$MH();
    }
}


