// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$14 extends cfapi_h$constants$13 {

    /* package-private */ cfapi_h$constants$14() {}
    static final MemoryLayout _WOW64_CONTEXT$EFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$EFlags$LAYOUT() { return _WOW64_CONTEXT$EFlags$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$EFlags$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EFlags"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$EFlags$VH() { return _WOW64_CONTEXT$EFlags$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$Esp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$Esp$LAYOUT() { return _WOW64_CONTEXT$Esp$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$Esp$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Esp"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$Esp$VH() { return _WOW64_CONTEXT$Esp$VH_; }

    static final MemoryLayout _WOW64_CONTEXT$SegSs$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_CONTEXT$SegSs$LAYOUT() { return _WOW64_CONTEXT$SegSs$LAYOUT_; }

    static final VarHandle _WOW64_CONTEXT$SegSs$VH_ = _WOW64_CONTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SegSs"));
    static final java.lang.invoke.VarHandle _WOW64_CONTEXT$SegSs$VH() { return _WOW64_CONTEXT$SegSs$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("LimitLow"),
        C_SHORT.withName("BaseLow"),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_CHAR.withName("BaseMid"),
                C_CHAR.withName("Flags1"),
                C_CHAR.withName("Flags2"),
                C_CHAR.withName("BaseHi")
            ).withName("Bytes"),
            MemoryLayout.ofStruct(
                C_INT
            ).withName("Bits")
        ).withName("HighWord")
    ).withName("_WOW64_LDT_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$struct$LAYOUT() { return _WOW64_LDT_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$LimitLow$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$LimitLow$LAYOUT() { return _WOW64_LDT_ENTRY$LimitLow$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$LimitLow$VH_ = _WOW64_LDT_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("LimitLow"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$LimitLow$VH() { return _WOW64_LDT_ENTRY$LimitLow$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$BaseLow$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$BaseLow$LAYOUT() { return _WOW64_LDT_ENTRY$BaseLow$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$BaseLow$VH_ = _WOW64_LDT_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("BaseLow"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$BaseLow$VH() { return _WOW64_LDT_ENTRY$BaseLow$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_CHAR.withName("BaseMid"),
            C_CHAR.withName("Flags1"),
            C_CHAR.withName("Flags2"),
            C_CHAR.withName("BaseHi")
        ).withName("Bytes"),
        MemoryLayout.ofStruct(
            C_INT
        ).withName("Bits")
    );
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$union$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$union$LAYOUT_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("BaseMid"),
        C_CHAR.withName("Flags1"),
        C_CHAR.withName("Flags2"),
        C_CHAR.withName("BaseHi")
    );
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH_ = _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BaseMid"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH() { return _WOW64_LDT_ENTRY$HighWord$Bytes$BaseMid$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH_ = _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags1"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH() { return _WOW64_LDT_ENTRY$HighWord$Bytes$Flags1$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH_ = _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Flags2"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH() { return _WOW64_LDT_ENTRY$HighWord$Bytes$Flags2$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$LAYOUT_; }

    static final VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH_ = _WOW64_LDT_ENTRY$HighWord$Bytes$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BaseHi"));
    static final java.lang.invoke.VarHandle _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH() { return _WOW64_LDT_ENTRY$HighWord$Bytes$BaseHi$VH_; }

    static final MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bits$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT
    );
    static final jdk.incubator.foreign.MemoryLayout _WOW64_LDT_ENTRY$HighWord$Bits$struct$LAYOUT() { return _WOW64_LDT_ENTRY$HighWord$Bits$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_DESCRIPTOR_TABLE_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Selector"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("LimitLow"),
            C_SHORT.withName("BaseLow"),
            MemoryLayout.ofUnion(
                MemoryLayout.ofStruct(
                    C_CHAR.withName("BaseMid"),
                    C_CHAR.withName("Flags1"),
                    C_CHAR.withName("Flags2"),
                    C_CHAR.withName("BaseHi")
                ).withName("Bytes"),
                MemoryLayout.ofStruct(
                    C_INT
                ).withName("Bits")
            ).withName("HighWord")
        ).withName("Descriptor")
    ).withName("_WOW64_DESCRIPTOR_TABLE_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _WOW64_DESCRIPTOR_TABLE_ENTRY$struct$LAYOUT() { return _WOW64_DESCRIPTOR_TABLE_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$LAYOUT() { return _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$LAYOUT_; }

    static final VarHandle _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH_ = _WOW64_DESCRIPTOR_TABLE_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Selector"));
    static final java.lang.invoke.VarHandle _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH() { return _WOW64_DESCRIPTOR_TABLE_ENTRY$Selector$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExceptionCode"),
        C_LONG.withName("ExceptionFlags"),
        C_POINTER.withName("ExceptionRecord"),
        C_POINTER.withName("ExceptionAddress"),
        C_LONG.withName("NumberParameters"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(15, C_LONGLONG).withName("ExceptionInformation")
    ).withName("_EXCEPTION_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$struct$LAYOUT() { return _EXCEPTION_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_RECORD$ExceptionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$ExceptionCode$LAYOUT() { return _EXCEPTION_RECORD$ExceptionCode$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$ExceptionCode$VH_ = _EXCEPTION_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionCode"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$ExceptionCode$VH() { return _EXCEPTION_RECORD$ExceptionCode$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$ExceptionFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$ExceptionFlags$LAYOUT() { return _EXCEPTION_RECORD$ExceptionFlags$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$ExceptionFlags$VH_ = _EXCEPTION_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionFlags"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$ExceptionFlags$VH() { return _EXCEPTION_RECORD$ExceptionFlags$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$ExceptionRecord$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$ExceptionRecord$LAYOUT() { return _EXCEPTION_RECORD$ExceptionRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$ExceptionRecord$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionRecord")));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$ExceptionRecord$VH() { return _EXCEPTION_RECORD$ExceptionRecord$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$ExceptionAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$ExceptionAddress$LAYOUT() { return _EXCEPTION_RECORD$ExceptionAddress$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$ExceptionAddress$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_RECORD$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionAddress")));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$ExceptionAddress$VH() { return _EXCEPTION_RECORD$ExceptionAddress$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD$NumberParameters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD$NumberParameters$LAYOUT() { return _EXCEPTION_RECORD$NumberParameters$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD$NumberParameters$VH_ = _EXCEPTION_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberParameters"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD$NumberParameters$VH() { return _EXCEPTION_RECORD$NumberParameters$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExceptionCode"),
        C_LONG.withName("ExceptionFlags"),
        C_LONG.withName("ExceptionRecord"),
        C_LONG.withName("ExceptionAddress"),
        C_LONG.withName("NumberParameters"),
        MemoryLayout.ofSequence(15, C_LONG).withName("ExceptionInformation")
    ).withName("_EXCEPTION_RECORD32");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$struct$LAYOUT() { return _EXCEPTION_RECORD32$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_RECORD32$ExceptionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$ExceptionCode$LAYOUT() { return _EXCEPTION_RECORD32$ExceptionCode$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$ExceptionCode$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionCode"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$ExceptionCode$VH() { return _EXCEPTION_RECORD32$ExceptionCode$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$ExceptionFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$ExceptionFlags$LAYOUT() { return _EXCEPTION_RECORD32$ExceptionFlags$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$ExceptionFlags$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionFlags"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$ExceptionFlags$VH() { return _EXCEPTION_RECORD32$ExceptionFlags$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$ExceptionRecord$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$ExceptionRecord$LAYOUT() { return _EXCEPTION_RECORD32$ExceptionRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$ExceptionRecord$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionRecord"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$ExceptionRecord$VH() { return _EXCEPTION_RECORD32$ExceptionRecord$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$ExceptionAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$ExceptionAddress$LAYOUT() { return _EXCEPTION_RECORD32$ExceptionAddress$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$ExceptionAddress$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionAddress"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$ExceptionAddress$VH() { return _EXCEPTION_RECORD32$ExceptionAddress$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD32$NumberParameters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD32$NumberParameters$LAYOUT() { return _EXCEPTION_RECORD32$NumberParameters$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD32$NumberParameters$VH_ = _EXCEPTION_RECORD32$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberParameters"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD32$NumberParameters$VH() { return _EXCEPTION_RECORD32$NumberParameters$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ExceptionCode"),
        C_LONG.withName("ExceptionFlags"),
        C_LONGLONG.withName("ExceptionRecord"),
        C_LONGLONG.withName("ExceptionAddress"),
        C_LONG.withName("NumberParameters"),
        C_LONG.withName("__unusedAlignment"),
        MemoryLayout.ofSequence(15, C_LONGLONG).withName("ExceptionInformation")
    ).withName("_EXCEPTION_RECORD64");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$struct$LAYOUT() { return _EXCEPTION_RECORD64$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_RECORD64$ExceptionCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$ExceptionCode$LAYOUT() { return _EXCEPTION_RECORD64$ExceptionCode$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$ExceptionCode$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionCode"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$ExceptionCode$VH() { return _EXCEPTION_RECORD64$ExceptionCode$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$ExceptionFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$ExceptionFlags$LAYOUT() { return _EXCEPTION_RECORD64$ExceptionFlags$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$ExceptionFlags$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExceptionFlags"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$ExceptionFlags$VH() { return _EXCEPTION_RECORD64$ExceptionFlags$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$ExceptionRecord$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$ExceptionRecord$LAYOUT() { return _EXCEPTION_RECORD64$ExceptionRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$ExceptionRecord$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionRecord"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$ExceptionRecord$VH() { return _EXCEPTION_RECORD64$ExceptionRecord$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$ExceptionAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$ExceptionAddress$LAYOUT() { return _EXCEPTION_RECORD64$ExceptionAddress$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$ExceptionAddress$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionAddress"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$ExceptionAddress$VH() { return _EXCEPTION_RECORD64$ExceptionAddress$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$NumberParameters$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$NumberParameters$LAYOUT() { return _EXCEPTION_RECORD64$NumberParameters$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$NumberParameters$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberParameters"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$NumberParameters$VH() { return _EXCEPTION_RECORD64$NumberParameters$VH_; }

    static final MemoryLayout _EXCEPTION_RECORD64$__unusedAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_RECORD64$__unusedAlignment$LAYOUT() { return _EXCEPTION_RECORD64$__unusedAlignment$LAYOUT_; }

    static final VarHandle _EXCEPTION_RECORD64$__unusedAlignment$VH_ = _EXCEPTION_RECORD64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("__unusedAlignment"));
    static final java.lang.invoke.VarHandle _EXCEPTION_RECORD64$__unusedAlignment$VH() { return _EXCEPTION_RECORD64$__unusedAlignment$VH_; }

    static final MemoryLayout _EXCEPTION_POINTERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("ExceptionRecord"),
        C_POINTER.withName("ContextRecord")
    ).withName("_EXCEPTION_POINTERS");
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_POINTERS$struct$LAYOUT() { return _EXCEPTION_POINTERS$struct$LAYOUT_; }

    static final MemoryLayout _EXCEPTION_POINTERS$ExceptionRecord$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_POINTERS$ExceptionRecord$LAYOUT() { return _EXCEPTION_POINTERS$ExceptionRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_POINTERS$ExceptionRecord$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ExceptionRecord")));
    static final java.lang.invoke.VarHandle _EXCEPTION_POINTERS$ExceptionRecord$VH() { return _EXCEPTION_POINTERS$ExceptionRecord$VH_; }

    static final MemoryLayout _EXCEPTION_POINTERS$ContextRecord$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _EXCEPTION_POINTERS$ContextRecord$LAYOUT() { return _EXCEPTION_POINTERS$ContextRecord$LAYOUT_; }

    static final VarHandle _EXCEPTION_POINTERS$ContextRecord$VH_ = MemoryHandles.asAddressVarHandle(_EXCEPTION_POINTERS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ContextRecord")));
    static final java.lang.invoke.VarHandle _EXCEPTION_POINTERS$ContextRecord$VH() { return _EXCEPTION_POINTERS$ContextRecord$VH_; }

    static final MemoryLayout _GENERIC_MAPPING$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("GenericRead"),
        C_LONG.withName("GenericWrite"),
        C_LONG.withName("GenericExecute"),
        C_LONG.withName("GenericAll")
    ).withName("_GENERIC_MAPPING");
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$struct$LAYOUT() { return _GENERIC_MAPPING$struct$LAYOUT_; }

    static final MemoryLayout _GENERIC_MAPPING$GenericRead$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$GenericRead$LAYOUT() { return _GENERIC_MAPPING$GenericRead$LAYOUT_; }

    static final VarHandle _GENERIC_MAPPING$GenericRead$VH_ = _GENERIC_MAPPING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GenericRead"));
    static final java.lang.invoke.VarHandle _GENERIC_MAPPING$GenericRead$VH() { return _GENERIC_MAPPING$GenericRead$VH_; }

    static final MemoryLayout _GENERIC_MAPPING$GenericWrite$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$GenericWrite$LAYOUT() { return _GENERIC_MAPPING$GenericWrite$LAYOUT_; }

    static final VarHandle _GENERIC_MAPPING$GenericWrite$VH_ = _GENERIC_MAPPING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GenericWrite"));
    static final java.lang.invoke.VarHandle _GENERIC_MAPPING$GenericWrite$VH() { return _GENERIC_MAPPING$GenericWrite$VH_; }

    static final MemoryLayout _GENERIC_MAPPING$GenericExecute$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$GenericExecute$LAYOUT() { return _GENERIC_MAPPING$GenericExecute$LAYOUT_; }

    static final VarHandle _GENERIC_MAPPING$GenericExecute$VH_ = _GENERIC_MAPPING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GenericExecute"));
    static final java.lang.invoke.VarHandle _GENERIC_MAPPING$GenericExecute$VH() { return _GENERIC_MAPPING$GenericExecute$VH_; }

    static final MemoryLayout _GENERIC_MAPPING$GenericAll$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GENERIC_MAPPING$GenericAll$LAYOUT() { return _GENERIC_MAPPING$GenericAll$LAYOUT_; }

    static final VarHandle _GENERIC_MAPPING$GenericAll$VH_ = _GENERIC_MAPPING$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GenericAll"));
    static final java.lang.invoke.VarHandle _GENERIC_MAPPING$GenericAll$VH() { return _GENERIC_MAPPING$GenericAll$VH_; }

    static final MemoryLayout _LUID_AND_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("Luid"),
        C_LONG.withName("Attributes")
    ).withName("_LUID_AND_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _LUID_AND_ATTRIBUTES$struct$LAYOUT() { return _LUID_AND_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _LUID_AND_ATTRIBUTES$Attributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _LUID_AND_ATTRIBUTES$Attributes$LAYOUT() { return _LUID_AND_ATTRIBUTES$Attributes$LAYOUT_; }

    static final VarHandle _LUID_AND_ATTRIBUTES$Attributes$VH_ = _LUID_AND_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Attributes"));
    static final java.lang.invoke.VarHandle _LUID_AND_ATTRIBUTES$Attributes$VH() { return _LUID_AND_ATTRIBUTES$Attributes$VH_; }

    static final MemoryLayout _SID_IDENTIFIER_AUTHORITY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(6, C_CHAR).withName("Value")
    ).withName("_SID_IDENTIFIER_AUTHORITY");
    static final jdk.incubator.foreign.MemoryLayout _SID_IDENTIFIER_AUTHORITY$struct$LAYOUT() { return _SID_IDENTIFIER_AUTHORITY$struct$LAYOUT_; }

    static final MemoryLayout _SID$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Revision"),
        C_CHAR.withName("SubAuthorityCount"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofSequence(6, C_CHAR).withName("Value")
        ).withName("IdentifierAuthority"),
        MemoryLayout.ofSequence(1, C_LONG).withName("SubAuthority")
    ).withName("_SID");
    static final jdk.incubator.foreign.MemoryLayout _SID$struct$LAYOUT() { return _SID$struct$LAYOUT_; }

    static final MemoryLayout _SID$Revision$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SID$Revision$LAYOUT() { return _SID$Revision$LAYOUT_; }

    static final VarHandle _SID$Revision$VH_ = _SID$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle _SID$Revision$VH() { return _SID$Revision$VH_; }

    static final MemoryLayout _SID$SubAuthorityCount$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SID$SubAuthorityCount$LAYOUT() { return _SID$SubAuthorityCount$LAYOUT_; }

    static final VarHandle _SID$SubAuthorityCount$VH_ = _SID$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SubAuthorityCount"));
    static final java.lang.invoke.VarHandle _SID$SubAuthorityCount$VH() { return _SID$SubAuthorityCount$VH_; }

    static final MemoryLayout _SE_SID$union$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_CHAR.withName("Revision"),
            C_CHAR.withName("SubAuthorityCount"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(6, C_CHAR).withName("Value")
            ).withName("IdentifierAuthority"),
            MemoryLayout.ofSequence(1, C_LONG).withName("SubAuthority")
        ).withName("Sid"),
        MemoryLayout.ofSequence(68, C_CHAR).withName("Buffer")
    ).withName("_SE_SID");
    static final jdk.incubator.foreign.MemoryLayout _SE_SID$union$LAYOUT() { return _SE_SID$union$LAYOUT_; }

    static final int SidTypeUser() { return (int)1L; }

    static final int SidTypeGroup() { return (int)2L; }

    static final int SidTypeDomain() { return (int)3L; }

    static final int SidTypeAlias() { return (int)4L; }

    static final int SidTypeWellKnownGroup() { return (int)5L; }

    static final int SidTypeDeletedAccount() { return (int)6L; }

    static final int SidTypeInvalid() { return (int)7L; }

    static final int SidTypeUnknown() { return (int)8L; }

    static final int SidTypeComputer() { return (int)9L; }

    static final int SidTypeLabel() { return (int)10L; }

    static final int SidTypeLogonSession() { return (int)11L; }

    static final MemoryLayout _SID_AND_ATTRIBUTES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Sid"),
        C_LONG.withName("Attributes"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_SID_AND_ATTRIBUTES");
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES$struct$LAYOUT() { return _SID_AND_ATTRIBUTES$struct$LAYOUT_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES$Sid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES$Sid$LAYOUT() { return _SID_AND_ATTRIBUTES$Sid$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES$Sid$VH_ = MemoryHandles.asAddressVarHandle(_SID_AND_ATTRIBUTES$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sid")));
    static final java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES$Sid$VH() { return _SID_AND_ATTRIBUTES$Sid$VH_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES$Attributes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES$Attributes$LAYOUT() { return _SID_AND_ATTRIBUTES$Attributes$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES$Attributes$VH_ = _SID_AND_ATTRIBUTES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Attributes"));
    static final java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES$Attributes$VH() { return _SID_AND_ATTRIBUTES$Attributes$VH_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SidCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("SidAttr"),
        MemoryLayout.ofSequence(32, C_LONGLONG).withName("Hash")
    ).withName("_SID_AND_ATTRIBUTES_HASH");
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT() { return _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidCount$LAYOUT() { return _SID_AND_ATTRIBUTES_HASH$SidCount$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES_HASH$SidCount$VH_ = _SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidCount"));
    static final java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES_HASH$SidCount$VH() { return _SID_AND_ATTRIBUTES_HASH$SidCount$VH_; }

    static final MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidAttr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SID_AND_ATTRIBUTES_HASH$SidAttr$LAYOUT() { return _SID_AND_ATTRIBUTES_HASH$SidAttr$LAYOUT_; }

    static final VarHandle _SID_AND_ATTRIBUTES_HASH$SidAttr$VH_ = MemoryHandles.asAddressVarHandle(_SID_AND_ATTRIBUTES_HASH$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SidAttr")));
    static final java.lang.invoke.VarHandle _SID_AND_ATTRIBUTES_HASH$SidAttr$VH() { return _SID_AND_ATTRIBUTES_HASH$SidAttr$VH_; }

    static final int WinNullSid() { return (int)0L; }

    static final int WinWorldSid() { return (int)1L; }

    static final int WinLocalSid() { return (int)2L; }

    static final int WinCreatorOwnerSid() { return (int)3L; }

    static final int WinCreatorGroupSid() { return (int)4L; }

    static final int WinCreatorOwnerServerSid() { return (int)5L; }

    static final int WinCreatorGroupServerSid() { return (int)6L; }

    static final int WinNtAuthoritySid() { return (int)7L; }

    static final int WinDialupSid() { return (int)8L; }

    static final int WinNetworkSid() { return (int)9L; }

    static final int WinBatchSid() { return (int)10L; }

    static final int WinInteractiveSid() { return (int)11L; }

    static final int WinServiceSid() { return (int)12L; }

    static final int WinAnonymousSid() { return (int)13L; }

    static final int WinProxySid() { return (int)14L; }

    static final int WinEnterpriseControllersSid() { return (int)15L; }

    static final int WinSelfSid() { return (int)16L; }

    static final int WinAuthenticatedUserSid() { return (int)17L; }

    static final int WinRestrictedCodeSid() { return (int)18L; }

    static final int WinTerminalServerSid() { return (int)19L; }

    static final int WinRemoteLogonIdSid() { return (int)20L; }

    static final int WinLogonIdsSid() { return (int)21L; }

    static final int WinLocalSystemSid() { return (int)22L; }

    static final int WinLocalServiceSid() { return (int)23L; }

    static final int WinNetworkServiceSid() { return (int)24L; }

    static final int WinBuiltinDomainSid() { return (int)25L; }

    static final int WinBuiltinAdministratorsSid() { return (int)26L; }

    static final int WinBuiltinUsersSid() { return (int)27L; }

    static final int WinBuiltinGuestsSid() { return (int)28L; }

    static final int WinBuiltinPowerUsersSid() { return (int)29L; }

    static final int WinBuiltinAccountOperatorsSid() { return (int)30L; }

    static final int WinBuiltinSystemOperatorsSid() { return (int)31L; }

    static final int WinBuiltinPrintOperatorsSid() { return (int)32L; }

    static final int WinBuiltinBackupOperatorsSid() { return (int)33L; }

    static final int WinBuiltinReplicatorSid() { return (int)34L; }

    static final int WinBuiltinPreWindows2000CompatibleAccessSid() { return (int)35L; }

    static final int WinBuiltinRemoteDesktopUsersSid() { return (int)36L; }

    static final int WinBuiltinNetworkConfigurationOperatorsSid() { return (int)37L; }

    static final int WinAccountAdministratorSid() { return (int)38L; }

    static final int WinAccountGuestSid() { return (int)39L; }

    static final int WinAccountKrbtgtSid() { return (int)40L; }

    static final int WinAccountDomainAdminsSid() { return (int)41L; }

    static final int WinAccountDomainUsersSid() { return (int)42L; }

    static final int WinAccountDomainGuestsSid() { return (int)43L; }

    static final int WinAccountComputersSid() { return (int)44L; }

    static final int WinAccountControllersSid() { return (int)45L; }

    static final int WinAccountCertAdminsSid() { return (int)46L; }

    static final int WinAccountSchemaAdminsSid() { return (int)47L; }

    static final int WinAccountEnterpriseAdminsSid() { return (int)48L; }

    static final int WinAccountPolicyAdminsSid() { return (int)49L; }

    static final int WinAccountRasAndIasServersSid() { return (int)50L; }

    static final int WinNTLMAuthenticationSid() { return (int)51L; }

    static final int WinDigestAuthenticationSid() { return (int)52L; }

    static final int WinSChannelAuthenticationSid() { return (int)53L; }

    static final int WinThisOrganizationSid() { return (int)54L; }

    static final int WinOtherOrganizationSid() { return (int)55L; }

    static final int WinBuiltinIncomingForestTrustBuildersSid() { return (int)56L; }

    static final int WinBuiltinPerfMonitoringUsersSid() { return (int)57L; }

    static final int WinBuiltinPerfLoggingUsersSid() { return (int)58L; }

    static final int WinBuiltinAuthorizationAccessSid() { return (int)59L; }

    static final int WinBuiltinTerminalServerLicenseServersSid() { return (int)60L; }

    static final int WinBuiltinDCOMUsersSid() { return (int)61L; }

    static final int WinBuiltinIUsersSid() { return (int)62L; }

    static final int WinIUserSid() { return (int)63L; }

    static final int WinBuiltinCryptoOperatorsSid() { return (int)64L; }

    static final int WinUntrustedLabelSid() { return (int)65L; }

    static final int WinLowLabelSid() { return (int)66L; }

    static final int WinMediumLabelSid() { return (int)67L; }

    static final int WinHighLabelSid() { return (int)68L; }

    static final int WinSystemLabelSid() { return (int)69L; }

    static final int WinWriteRestrictedCodeSid() { return (int)70L; }

    static final int WinCreatorOwnerRightsSid() { return (int)71L; }

    static final int WinCacheablePrincipalsGroupSid() { return (int)72L; }

    static final int WinNonCacheablePrincipalsGroupSid() { return (int)73L; }

    static final int WinEnterpriseReadonlyControllersSid() { return (int)74L; }

    static final int WinAccountReadonlyControllersSid() { return (int)75L; }

    static final int WinBuiltinEventLogReadersGroup() { return (int)76L; }

    static final int WinNewEnterpriseReadonlyControllersSid() { return (int)77L; }

    static final int WinBuiltinCertSvcDComAccessGroup() { return (int)78L; }

    static final int WinMediumPlusLabelSid() { return (int)79L; }

    static final int WinLocalLogonSid() { return (int)80L; }

    static final int WinConsoleLogonSid() { return (int)81L; }

    static final int WinThisOrganizationCertificateSid() { return (int)82L; }

    static final int WinApplicationPackageAuthoritySid() { return (int)83L; }

    static final int WinBuiltinAnyPackageSid() { return (int)84L; }

    static final int WinCapabilityInternetClientSid() { return (int)85L; }

    static final int WinCapabilityInternetClientServerSid() { return (int)86L; }

    static final int WinCapabilityPrivateNetworkClientServerSid() { return (int)87L; }

    static final int WinCapabilityPicturesLibrarySid() { return (int)88L; }

    static final int WinCapabilityVideosLibrarySid() { return (int)89L; }

    static final int WinCapabilityMusicLibrarySid() { return (int)90L; }

    static final int WinCapabilityDocumentsLibrarySid() { return (int)91L; }

    static final int WinCapabilitySharedUserCertificatesSid() { return (int)92L; }

    static final int WinCapabilityEnterpriseAuthenticationSid() { return (int)93L; }

    static final int WinCapabilityRemovableStorageSid() { return (int)94L; }

    static final int WinBuiltinRDSRemoteAccessServersSid() { return (int)95L; }

    static final int WinBuiltinRDSEndpointServersSid() { return (int)96L; }

    static final int WinBuiltinRDSManagementServersSid() { return (int)97L; }

    static final int WinUserModeDriversSid() { return (int)98L; }

    static final int WinBuiltinHyperVAdminsSid() { return (int)99L; }

    static final int WinAccountCloneableControllersSid() { return (int)100L; }

    static final int WinBuiltinAccessControlAssistanceOperatorsSid() { return (int)101L; }

    static final int WinBuiltinRemoteManagementUsersSid() { return (int)102L; }

    static final int WinAuthenticationAuthorityAssertedSid() { return (int)103L; }

    static final int WinAuthenticationServiceAssertedSid() { return (int)104L; }

    static final int WinLocalAccountSid() { return (int)105L; }

    static final int WinLocalAccountAndAdministratorSid() { return (int)106L; }

    static final int WinAccountProtectedUsersSid() { return (int)107L; }

    static final int WinCapabilityAppointmentsSid() { return (int)108L; }

    static final int WinCapabilityContactsSid() { return (int)109L; }

    static final int WinAccountDefaultSystemManagedSid() { return (int)110L; }

    static final int WinBuiltinDefaultSystemManagedGroupSid() { return (int)111L; }

    static final int WinBuiltinStorageReplicaAdminsSid() { return (int)112L; }

    static final int WinAccountKeyAdminsSid() { return (int)113L; }

    static final int WinAccountEnterpriseKeyAdminsSid() { return (int)114L; }

    static final int WinAuthenticationKeyTrustSid() { return (int)115L; }

    static final int WinAuthenticationKeyPropertyMFASid() { return (int)116L; }

    static final int WinAuthenticationKeyPropertyAttestationSid() { return (int)117L; }

    static final int WinAuthenticationFreshKeyAuthSid() { return (int)118L; }

    static final int WinBuiltinDeviceOwnersSid() { return (int)119L; }

    static final MemoryLayout _ACL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("AclRevision"),
        C_CHAR.withName("Sbz1"),
        C_SHORT.withName("AclSize"),
        C_SHORT.withName("AceCount"),
        C_SHORT.withName("Sbz2")
    ).withName("_ACL");
    static final jdk.incubator.foreign.MemoryLayout _ACL$struct$LAYOUT() { return _ACL$struct$LAYOUT_; }

    static final MemoryLayout _ACL$AclRevision$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ACL$AclRevision$LAYOUT() { return _ACL$AclRevision$LAYOUT_; }

    static final VarHandle _ACL$AclRevision$VH_ = _ACL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AclRevision"));
    static final java.lang.invoke.VarHandle _ACL$AclRevision$VH() { return _ACL$AclRevision$VH_; }

    static final MemoryLayout _ACL$Sbz1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ACL$Sbz1$LAYOUT() { return _ACL$Sbz1$LAYOUT_; }

    static final VarHandle _ACL$Sbz1$VH_ = _ACL$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Sbz1"));
    static final java.lang.invoke.VarHandle _ACL$Sbz1$VH() { return _ACL$Sbz1$VH_; }

    static final MemoryLayout _ACL$AclSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ACL$AclSize$LAYOUT() { return _ACL$AclSize$LAYOUT_; }

    static final VarHandle _ACL$AclSize$VH_ = _ACL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AclSize"));
    static final java.lang.invoke.VarHandle _ACL$AclSize$VH() { return _ACL$AclSize$VH_; }

    static final MemoryLayout _ACL$AceCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ACL$AceCount$LAYOUT() { return _ACL$AceCount$LAYOUT_; }

    static final VarHandle _ACL$AceCount$VH_ = _ACL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AceCount"));
    static final java.lang.invoke.VarHandle _ACL$AceCount$VH() { return _ACL$AceCount$VH_; }

    static final MemoryLayout _ACL$Sbz2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ACL$Sbz2$LAYOUT() { return _ACL$Sbz2$LAYOUT_; }

    static final VarHandle _ACL$Sbz2$VH_ = _ACL$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sbz2"));
    static final java.lang.invoke.VarHandle _ACL$Sbz2$VH() { return _ACL$Sbz2$VH_; }

    static final MemoryLayout _ACE_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("AceType"),
        C_CHAR.withName("AceFlags"),
        C_SHORT.withName("AceSize")
    ).withName("_ACE_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _ACE_HEADER$struct$LAYOUT() { return _ACE_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _ACE_HEADER$AceType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ACE_HEADER$AceType$LAYOUT() { return _ACE_HEADER$AceType$LAYOUT_; }

    static final VarHandle _ACE_HEADER$AceType$VH_ = _ACE_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AceType"));
    static final java.lang.invoke.VarHandle _ACE_HEADER$AceType$VH() { return _ACE_HEADER$AceType$VH_; }

    static final MemoryLayout _ACE_HEADER$AceFlags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _ACE_HEADER$AceFlags$LAYOUT() { return _ACE_HEADER$AceFlags$LAYOUT_; }

    static final VarHandle _ACE_HEADER$AceFlags$VH_ = _ACE_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AceFlags"));
    static final java.lang.invoke.VarHandle _ACE_HEADER$AceFlags$VH() { return _ACE_HEADER$AceFlags$VH_; }

    static final MemoryLayout _ACE_HEADER$AceSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _ACE_HEADER$AceSize$LAYOUT() { return _ACE_HEADER$AceSize$LAYOUT_; }

    static final VarHandle _ACE_HEADER$AceSize$VH_ = _ACE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("AceSize"));
    static final java.lang.invoke.VarHandle _ACE_HEADER$AceSize$VH() { return _ACE_HEADER$AceSize$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_ACE$Mask$VH_ = _ACCESS_ALLOWED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_ACE$Mask$VH() { return _ACCESS_ALLOWED_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_ACE$SidStart$VH_ = _ACCESS_ALLOWED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_ACE$SidStart$VH() { return _ACCESS_ALLOWED_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_DENIED_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_ACE$struct$LAYOUT() { return _ACCESS_DENIED_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_ACE$Mask$VH_ = _ACCESS_DENIED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_ACE$Mask$VH() { return _ACCESS_DENIED_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_ACE$SidStart$VH_ = _ACCESS_DENIED_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_ACE$SidStart$VH() { return _ACCESS_DENIED_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_ACE$Mask$VH_ = _SYSTEM_AUDIT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_ACE$Mask$VH() { return _SYSTEM_AUDIT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_ACE$SidStart$VH_ = _SYSTEM_AUDIT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_ACE$SidStart$VH() { return _SYSTEM_AUDIT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ALARM_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_ACE$Mask$VH_ = _SYSTEM_ALARM_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_ACE$Mask$VH() { return _SYSTEM_ALARM_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_ACE$SidStart$VH_ = _SYSTEM_ALARM_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_ACE$SidStart$VH() { return _SYSTEM_ALARM_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_RESOURCE_ATTRIBUTE_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$LAYOUT() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH_ = _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$LAYOUT() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH_ = _SYSTEM_RESOURCE_ATTRIBUTE_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH() { return _SYSTEM_RESOURCE_ATTRIBUTE_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_SCOPED_POLICY_ID_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT() { return _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$LAYOUT() { return _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH_ = _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH() { return _SYSTEM_SCOPED_POLICY_ID_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$LAYOUT() { return _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH_ = _SYSTEM_SCOPED_POLICY_ID_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH() { return _SYSTEM_SCOPED_POLICY_ID_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_MANDATORY_LABEL_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT() { return _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$Mask$LAYOUT() { return _SYSTEM_MANDATORY_LABEL_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_MANDATORY_LABEL_ACE$Mask$VH_ = _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_MANDATORY_LABEL_ACE$Mask$VH() { return _SYSTEM_MANDATORY_LABEL_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_MANDATORY_LABEL_ACE$SidStart$LAYOUT() { return _SYSTEM_MANDATORY_LABEL_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH_ = _SYSTEM_MANDATORY_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH() { return _SYSTEM_MANDATORY_LABEL_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_PROCESS_TRUST_LABEL_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$LAYOUT() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH_ = _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$LAYOUT() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH_ = _SYSTEM_PROCESS_TRUST_LABEL_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH() { return _SYSTEM_PROCESS_TRUST_LABEL_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ACCESS_FILTER_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT() { return _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$Mask$LAYOUT() { return _SYSTEM_ACCESS_FILTER_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ACCESS_FILTER_ACE$Mask$VH_ = _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ACCESS_FILTER_ACE$Mask$VH() { return _SYSTEM_ACCESS_FILTER_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ACCESS_FILTER_ACE$SidStart$LAYOUT() { return _SYSTEM_ACCESS_FILTER_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ACCESS_FILTER_ACE$SidStart$VH_ = _SYSTEM_ACCESS_FILTER_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ACCESS_FILTER_ACE$SidStart$VH() { return _SYSTEM_ACCESS_FILTER_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Mask$VH_ = _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Mask$VH() { return _ACCESS_ALLOWED_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Flags$VH_ = _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_OBJECT_ACE$Flags$VH() { return _ACCESS_ALLOWED_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH_ = _ACCESS_ALLOWED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH() { return _ACCESS_ALLOWED_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_DENIED_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_OBJECT_ACE$Mask$VH_ = _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_OBJECT_ACE$Mask$VH() { return _ACCESS_DENIED_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_OBJECT_ACE$Flags$VH_ = _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_OBJECT_ACE$Flags$VH() { return _ACCESS_DENIED_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_DENIED_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_OBJECT_ACE$SidStart$VH_ = _ACCESS_DENIED_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_OBJECT_ACE$SidStart$VH() { return _ACCESS_DENIED_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Mask$VH_ = _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Mask$VH() { return _SYSTEM_AUDIT_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Flags$VH_ = _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_OBJECT_ACE$Flags$VH() { return _SYSTEM_AUDIT_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH_ = _SYSTEM_AUDIT_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH() { return _SYSTEM_AUDIT_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ALARM_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_OBJECT_ACE$Mask$VH_ = _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_OBJECT_ACE$Mask$VH() { return _SYSTEM_ALARM_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_OBJECT_ACE$Flags$VH_ = _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_OBJECT_ACE$Flags$VH() { return _SYSTEM_ALARM_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_OBJECT_ACE$SidStart$VH_ = _SYSTEM_ALARM_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_OBJECT_ACE$SidStart$VH() { return _SYSTEM_ALARM_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_CALLBACK_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH_ = _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH() { return _ACCESS_ALLOWED_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH_ = _ACCESS_ALLOWED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH() { return _ACCESS_ALLOWED_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_DENIED_CALLBACK_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT() { return _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_ACE$Mask$VH_ = _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_ACE$Mask$VH() { return _ACCESS_DENIED_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_ACE$SidStart$VH_ = _ACCESS_DENIED_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_ACE$SidStart$VH() { return _ACCESS_DENIED_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_CALLBACK_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH_ = _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH() { return _SYSTEM_AUDIT_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH_ = _SYSTEM_AUDIT_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH() { return _SYSTEM_AUDIT_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ALARM_CALLBACK_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_ACE$Mask$VH_ = _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_ACE$Mask$VH() { return _SYSTEM_ALARM_CALLBACK_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH_ = _SYSTEM_ALARM_CALLBACK_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH() { return _SYSTEM_ALARM_CALLBACK_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH_ = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH_ = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH_ = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH() { return _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_ACCESS_DENIED_CALLBACK_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH_ = _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH_ = _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH_ = _ACCESS_DENIED_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH() { return _ACCESS_DENIED_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH_ = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH_ = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH_ = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH() { return _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_CHAR.withName("AceType"),
            C_CHAR.withName("AceFlags"),
            C_SHORT.withName("AceSize")
        ).withName("Header"),
        C_LONG.withName("Mask"),
        C_LONG.withName("Flags"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("ObjectType"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("InheritedObjectType"),
        C_LONG.withName("SidStart")
    ).withName("_SYSTEM_ALARM_CALLBACK_OBJECT_ACE");
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH_ = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Mask"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Mask$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH_ = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$Flags$VH_; }

    static final MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$LAYOUT() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$LAYOUT_; }

    static final VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH_ = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SidStart"));
    static final java.lang.invoke.VarHandle _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH() { return _SYSTEM_ALARM_CALLBACK_OBJECT_ACE$SidStart$VH_; }

    static final int AclRevisionInformation() { return (int)1L; }

    static final int AclSizeInformation() { return (int)2L; }

    static final MemoryLayout _ACL_REVISION_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("AclRevision")
    ).withName("_ACL_REVISION_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ACL_REVISION_INFORMATION$struct$LAYOUT() { return _ACL_REVISION_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACL_REVISION_INFORMATION$AclRevision$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACL_REVISION_INFORMATION$AclRevision$LAYOUT() { return _ACL_REVISION_INFORMATION$AclRevision$LAYOUT_; }

    static final VarHandle _ACL_REVISION_INFORMATION$AclRevision$VH_ = _ACL_REVISION_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AclRevision"));
    static final java.lang.invoke.VarHandle _ACL_REVISION_INFORMATION$AclRevision$VH() { return _ACL_REVISION_INFORMATION$AclRevision$VH_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("AceCount"),
        C_LONG.withName("AclBytesInUse"),
        C_LONG.withName("AclBytesFree")
    ).withName("_ACL_SIZE_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$struct$LAYOUT() { return _ACL_SIZE_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$AceCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$AceCount$LAYOUT() { return _ACL_SIZE_INFORMATION$AceCount$LAYOUT_; }

    static final VarHandle _ACL_SIZE_INFORMATION$AceCount$VH_ = _ACL_SIZE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AceCount"));
    static final java.lang.invoke.VarHandle _ACL_SIZE_INFORMATION$AceCount$VH() { return _ACL_SIZE_INFORMATION$AceCount$VH_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$AclBytesInUse$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$AclBytesInUse$LAYOUT() { return _ACL_SIZE_INFORMATION$AclBytesInUse$LAYOUT_; }

    static final VarHandle _ACL_SIZE_INFORMATION$AclBytesInUse$VH_ = _ACL_SIZE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AclBytesInUse"));
    static final java.lang.invoke.VarHandle _ACL_SIZE_INFORMATION$AclBytesInUse$VH() { return _ACL_SIZE_INFORMATION$AclBytesInUse$VH_; }

    static final MemoryLayout _ACL_SIZE_INFORMATION$AclBytesFree$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACL_SIZE_INFORMATION$AclBytesFree$LAYOUT() { return _ACL_SIZE_INFORMATION$AclBytesFree$LAYOUT_; }

    static final VarHandle _ACL_SIZE_INFORMATION$AclBytesFree$VH_ = _ACL_SIZE_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AclBytesFree"));
    static final java.lang.invoke.VarHandle _ACL_SIZE_INFORMATION$AclBytesFree$VH() { return _ACL_SIZE_INFORMATION$AclBytesFree$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Revision"),
        C_CHAR.withName("Sbz1"),
        C_SHORT.withName("Control"),
        C_LONG.withName("Owner"),
        C_LONG.withName("Group"),
        C_LONG.withName("Sacl"),
        C_LONG.withName("Dacl")
    ).withName("_SECURITY_DESCRIPTOR_RELATIVE");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Revision$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Revision$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Revision$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Revision$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Revision$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Revision$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Sbz1"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Sbz1$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Control$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Control$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Control$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Control$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Control"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Control$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Control$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Owner$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Owner$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Owner$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Owner$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Owner"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Owner$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Owner$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Group$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Group$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Group$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Group$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Group"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Group$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Group$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sacl$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Sacl$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Sacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Sacl"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Sacl$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Dacl$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR_RELATIVE$Dacl$LAYOUT() { return _SECURITY_DESCRIPTOR_RELATIVE$Dacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH_ = _SECURITY_DESCRIPTOR_RELATIVE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Dacl"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH() { return _SECURITY_DESCRIPTOR_RELATIVE$Dacl$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Revision"),
        C_CHAR.withName("Sbz1"),
        C_SHORT.withName("Control"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("Owner"),
        C_POINTER.withName("Group"),
        C_POINTER.withName("Sacl"),
        C_POINTER.withName("Dacl")
    ).withName("_SECURITY_DESCRIPTOR");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$struct$LAYOUT() { return _SECURITY_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Revision$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Revision$LAYOUT() { return _SECURITY_DESCRIPTOR$Revision$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Revision$VH_ = _SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Revision"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Revision$VH() { return _SECURITY_DESCRIPTOR$Revision$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Sbz1$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Sbz1$LAYOUT() { return _SECURITY_DESCRIPTOR$Sbz1$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Sbz1$VH_ = _SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Sbz1"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Sbz1$VH() { return _SECURITY_DESCRIPTOR$Sbz1$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Control$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Control$LAYOUT() { return _SECURITY_DESCRIPTOR$Control$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Control$VH_ = _SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Control"));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Control$VH() { return _SECURITY_DESCRIPTOR$Control$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Owner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Owner$LAYOUT() { return _SECURITY_DESCRIPTOR$Owner$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Owner$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Owner")));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Owner$VH() { return _SECURITY_DESCRIPTOR$Owner$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Group$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Group$LAYOUT() { return _SECURITY_DESCRIPTOR$Group$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Group$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Group")));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Group$VH() { return _SECURITY_DESCRIPTOR$Group$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Sacl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Sacl$LAYOUT() { return _SECURITY_DESCRIPTOR$Sacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Sacl$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Sacl")));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Sacl$VH() { return _SECURITY_DESCRIPTOR$Sacl$VH_; }

    static final MemoryLayout _SECURITY_DESCRIPTOR$Dacl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_DESCRIPTOR$Dacl$LAYOUT() { return _SECURITY_DESCRIPTOR$Dacl$LAYOUT_; }

    static final VarHandle _SECURITY_DESCRIPTOR$Dacl$VH_ = MemoryHandles.asAddressVarHandle(_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Dacl")));
    static final java.lang.invoke.VarHandle _SECURITY_DESCRIPTOR$Dacl$VH() { return _SECURITY_DESCRIPTOR$Dacl$VH_; }

    static final MemoryLayout _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("ConstraintMask")
    ).withName("_SECURITY_OBJECT_AI_PARAMS");
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT() { return _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_; }

    static final MemoryLayout _SECURITY_OBJECT_AI_PARAMS$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_OBJECT_AI_PARAMS$Size$LAYOUT() { return _SECURITY_OBJECT_AI_PARAMS$Size$LAYOUT_; }

    static final VarHandle _SECURITY_OBJECT_AI_PARAMS$Size$VH_ = _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SECURITY_OBJECT_AI_PARAMS$Size$VH() { return _SECURITY_OBJECT_AI_PARAMS$Size$VH_; }

    static final MemoryLayout _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$LAYOUT() { return _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$LAYOUT_; }

    static final VarHandle _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH_ = _SECURITY_OBJECT_AI_PARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ConstraintMask"));
    static final java.lang.invoke.VarHandle _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH() { return _SECURITY_OBJECT_AI_PARAMS$ConstraintMask$VH_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Level"),
        C_SHORT.withName("Sbz"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ObjectType")
    ).withName("_OBJECT_TYPE_LIST");
    static final jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$struct$LAYOUT() { return _OBJECT_TYPE_LIST$struct$LAYOUT_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$Level$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$Level$LAYOUT() { return _OBJECT_TYPE_LIST$Level$LAYOUT_; }

    static final VarHandle _OBJECT_TYPE_LIST$Level$VH_ = _OBJECT_TYPE_LIST$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Level"));
    static final java.lang.invoke.VarHandle _OBJECT_TYPE_LIST$Level$VH() { return _OBJECT_TYPE_LIST$Level$VH_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$Sbz$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$Sbz$LAYOUT() { return _OBJECT_TYPE_LIST$Sbz$LAYOUT_; }

    static final VarHandle _OBJECT_TYPE_LIST$Sbz$VH_ = _OBJECT_TYPE_LIST$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sbz"));
    static final java.lang.invoke.VarHandle _OBJECT_TYPE_LIST$Sbz$VH() { return _OBJECT_TYPE_LIST$Sbz$VH_; }

    static final MemoryLayout _OBJECT_TYPE_LIST$ObjectType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _OBJECT_TYPE_LIST$ObjectType$LAYOUT() { return _OBJECT_TYPE_LIST$ObjectType$LAYOUT_; }

    static final VarHandle _OBJECT_TYPE_LIST$ObjectType$VH_ = MemoryHandles.asAddressVarHandle(_OBJECT_TYPE_LIST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ObjectType")));
    static final java.lang.invoke.VarHandle _OBJECT_TYPE_LIST$ObjectType$VH() { return _OBJECT_TYPE_LIST$ObjectType$VH_; }

    static final int AuditEventObjectAccess() { return (int)0L; }

    static final int AuditEventDirectoryServiceAccess() { return (int)1L; }

    static final MemoryLayout _PRIVILEGE_SET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PrivilegeCount"),
        C_LONG.withName("Control"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("Luid"),
            C_LONG.withName("Attributes")
        ).withName("_LUID_AND_ATTRIBUTES")).withName("Privilege")
    ).withName("_PRIVILEGE_SET");
    static final jdk.incubator.foreign.MemoryLayout _PRIVILEGE_SET$struct$LAYOUT() { return _PRIVILEGE_SET$struct$LAYOUT_; }

    static final MemoryLayout _PRIVILEGE_SET$PrivilegeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PRIVILEGE_SET$PrivilegeCount$LAYOUT() { return _PRIVILEGE_SET$PrivilegeCount$LAYOUT_; }

    static final VarHandle _PRIVILEGE_SET$PrivilegeCount$VH_ = _PRIVILEGE_SET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    static final java.lang.invoke.VarHandle _PRIVILEGE_SET$PrivilegeCount$VH() { return _PRIVILEGE_SET$PrivilegeCount$VH_; }

    static final MemoryLayout _PRIVILEGE_SET$Control$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PRIVILEGE_SET$Control$LAYOUT() { return _PRIVILEGE_SET$Control$LAYOUT_; }

    static final VarHandle _PRIVILEGE_SET$Control$VH_ = _PRIVILEGE_SET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Control"));
    static final java.lang.invoke.VarHandle _PRIVILEGE_SET$Control$VH() { return _PRIVILEGE_SET$Control$VH_; }

    static final int AccessReasonNone() { return (int)0L; }

    static final int AccessReasonAllowedAce() { return (int)65536L; }

    static final int AccessReasonDeniedAce() { return (int)131072L; }

    static final int AccessReasonAllowedParentAce() { return (int)196608L; }

    static final int AccessReasonDeniedParentAce() { return (int)262144L; }

    static final int AccessReasonNotGrantedByCape() { return (int)327680L; }

    static final int AccessReasonNotGrantedByParentCape() { return (int)393216L; }

    static final int AccessReasonNotGrantedToAppContainer() { return (int)458752L; }

    static final int AccessReasonMissingPrivilege() { return (int)1048576L; }

    static final int AccessReasonFromPrivilege() { return (int)2097152L; }

    static final int AccessReasonIntegrityLevel() { return (int)3145728L; }

    static final int AccessReasonOwnership() { return (int)4194304L; }

    static final int AccessReasonNullDacl() { return (int)5242880L; }

    static final int AccessReasonEmptyDacl() { return (int)6291456L; }

    static final int AccessReasonNoSD() { return (int)7340032L; }

    static final int AccessReasonNoGrant() { return (int)8388608L; }

    static final int AccessReasonTrustLabel() { return (int)9437184L; }

    static final int AccessReasonFilterAce() { return (int)10485760L; }

    static final MemoryLayout _ACCESS_REASONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofSequence(32, C_LONG).withName("Data")
    ).withName("_ACCESS_REASONS");
    static final jdk.incubator.foreign.MemoryLayout _ACCESS_REASONS$struct$LAYOUT() { return _ACCESS_REASONS$struct$LAYOUT_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("Flags"),
        C_POINTER.withName("SecurityDescriptor")
    ).withName("_SE_SECURITY_DESCRIPTOR");
    static final jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$struct$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$Size$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$Size$LAYOUT_; }

    static final VarHandle _SE_SECURITY_DESCRIPTOR$Size$VH_ = _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SE_SECURITY_DESCRIPTOR$Size$VH() { return _SE_SECURITY_DESCRIPTOR$Size$VH_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$Flags$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$Flags$LAYOUT_; }

    static final VarHandle _SE_SECURITY_DESCRIPTOR$Flags$VH_ = _SE_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _SE_SECURITY_DESCRIPTOR$Flags$VH() { return _SE_SECURITY_DESCRIPTOR$Flags$VH_; }

    static final MemoryLayout _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$LAYOUT() { return _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$LAYOUT_; }

    static final VarHandle _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH_ = MemoryHandles.asAddressVarHandle(_SE_SECURITY_DESCRIPTOR$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SecurityDescriptor")));
    static final java.lang.invoke.VarHandle _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH() { return _SE_SECURITY_DESCRIPTOR$SecurityDescriptor$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("SeSecurityDescriptor"),
        C_LONG.withName("DesiredAccess"),
        C_LONG.withName("PreviouslyGrantedAccess"),
        C_POINTER.withName("PrincipalSelfSid"),
        C_POINTER.withName("GenericMapping"),
        C_LONG.withName("ObjectTypeListCount"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("ObjectTypeList")
    ).withName("_SE_ACCESS_REQUEST");
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$struct$LAYOUT() { return _SE_ACCESS_REQUEST$struct$LAYOUT_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$Size$LAYOUT() { return _SE_ACCESS_REQUEST$Size$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$Size$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$Size$VH() { return _SE_ACCESS_REQUEST$Size$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$SeSecurityDescriptor$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$SeSecurityDescriptor$LAYOUT() { return _SE_ACCESS_REQUEST$SeSecurityDescriptor$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$SeSecurityDescriptor$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SeSecurityDescriptor")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$SeSecurityDescriptor$VH() { return _SE_ACCESS_REQUEST$SeSecurityDescriptor$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$DesiredAccess$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$DesiredAccess$LAYOUT() { return _SE_ACCESS_REQUEST$DesiredAccess$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$DesiredAccess$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DesiredAccess"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$DesiredAccess$VH() { return _SE_ACCESS_REQUEST$DesiredAccess$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$LAYOUT() { return _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PreviouslyGrantedAccess"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH() { return _SE_ACCESS_REQUEST$PreviouslyGrantedAccess$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$PrincipalSelfSid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$PrincipalSelfSid$LAYOUT() { return _SE_ACCESS_REQUEST$PrincipalSelfSid$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$PrincipalSelfSid$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrincipalSelfSid")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$PrincipalSelfSid$VH() { return _SE_ACCESS_REQUEST$PrincipalSelfSid$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$GenericMapping$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$GenericMapping$LAYOUT() { return _SE_ACCESS_REQUEST$GenericMapping$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$GenericMapping$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GenericMapping")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$GenericMapping$VH() { return _SE_ACCESS_REQUEST$GenericMapping$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeListCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeListCount$LAYOUT() { return _SE_ACCESS_REQUEST$ObjectTypeListCount$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$ObjectTypeListCount$VH_ = _SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ObjectTypeListCount"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$ObjectTypeListCount$VH() { return _SE_ACCESS_REQUEST$ObjectTypeListCount$VH_; }

    static final MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REQUEST$ObjectTypeList$LAYOUT() { return _SE_ACCESS_REQUEST$ObjectTypeList$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REQUEST$ObjectTypeList$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REQUEST$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ObjectTypeList")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REQUEST$ObjectTypeList$VH() { return _SE_ACCESS_REQUEST$ObjectTypeList$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        C_LONG.withName("ResultListCount"),
        C_POINTER.withName("GrantedAccess"),
        C_POINTER.withName("AccessStatus"),
        C_POINTER.withName("AccessReason"),
        C_POINTER.withName("Privileges")
    ).withName("_SE_ACCESS_REPLY");
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$struct$LAYOUT() { return _SE_ACCESS_REPLY$struct$LAYOUT_; }

    static final MemoryLayout _SE_ACCESS_REPLY$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$Size$LAYOUT() { return _SE_ACCESS_REPLY$Size$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$Size$VH_ = _SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$Size$VH() { return _SE_ACCESS_REPLY$Size$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$ResultListCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$ResultListCount$LAYOUT() { return _SE_ACCESS_REPLY$ResultListCount$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$ResultListCount$VH_ = _SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ResultListCount"));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$ResultListCount$VH() { return _SE_ACCESS_REPLY$ResultListCount$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$GrantedAccess$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$GrantedAccess$LAYOUT() { return _SE_ACCESS_REPLY$GrantedAccess$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$GrantedAccess$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GrantedAccess")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$GrantedAccess$VH() { return _SE_ACCESS_REPLY$GrantedAccess$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$AccessStatus$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$AccessStatus$LAYOUT() { return _SE_ACCESS_REPLY$AccessStatus$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$AccessStatus$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AccessStatus")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$AccessStatus$VH() { return _SE_ACCESS_REPLY$AccessStatus$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$AccessReason$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$AccessReason$LAYOUT() { return _SE_ACCESS_REPLY$AccessReason$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$AccessReason$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AccessReason")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$AccessReason$VH() { return _SE_ACCESS_REPLY$AccessReason$VH_; }

    static final MemoryLayout _SE_ACCESS_REPLY$Privileges$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SE_ACCESS_REPLY$Privileges$LAYOUT() { return _SE_ACCESS_REPLY$Privileges$LAYOUT_; }

    static final VarHandle _SE_ACCESS_REPLY$Privileges$VH_ = MemoryHandles.asAddressVarHandle(_SE_ACCESS_REPLY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Privileges")));
    static final java.lang.invoke.VarHandle _SE_ACCESS_REPLY$Privileges$VH() { return _SE_ACCESS_REPLY$Privileges$VH_; }

    static final int SecurityAnonymous() { return (int)0L; }

    static final int SecurityIdentification() { return (int)1L; }

    static final int SecurityImpersonation() { return (int)2L; }

    static final int SecurityDelegation() { return (int)3L; }

    static final int TokenPrimary() { return (int)1L; }

    static final int TokenImpersonation() { return (int)2L; }

    static final int TokenElevationTypeDefault() { return (int)1L; }

    static final int TokenElevationTypeFull() { return (int)2L; }

    static final int TokenElevationTypeLimited() { return (int)3L; }

    static final int TokenUser() { return (int)1L; }

    static final int TokenGroups() { return (int)2L; }

    static final int TokenPrivileges() { return (int)3L; }

    static final int TokenOwner() { return (int)4L; }

    static final int TokenPrimaryGroup() { return (int)5L; }

    static final int TokenDefaultDacl() { return (int)6L; }

    static final int TokenSource() { return (int)7L; }

    static final int TokenType() { return (int)8L; }

    static final int TokenImpersonationLevel() { return (int)9L; }

    static final int TokenStatistics() { return (int)10L; }

    static final int TokenRestrictedSids() { return (int)11L; }

    static final int TokenSessionId() { return (int)12L; }

    static final int TokenGroupsAndPrivileges() { return (int)13L; }

    static final int TokenSessionReference() { return (int)14L; }

    static final int TokenSandBoxInert() { return (int)15L; }

    static final int TokenAuditPolicy() { return (int)16L; }

    static final int TokenOrigin() { return (int)17L; }

    static final int TokenElevationType() { return (int)18L; }

    static final int TokenLinkedToken() { return (int)19L; }

    static final int TokenElevation() { return (int)20L; }

    static final int TokenHasRestrictions() { return (int)21L; }

    static final int TokenAccessInformation() { return (int)22L; }

    static final int TokenVirtualizationAllowed() { return (int)23L; }

    static final int TokenVirtualizationEnabled() { return (int)24L; }

    static final int TokenIntegrityLevel() { return (int)25L; }

    static final int TokenUIAccess() { return (int)26L; }

    static final int TokenMandatoryPolicy() { return (int)27L; }

    static final int TokenLogonSid() { return (int)28L; }

    static final int TokenIsAppContainer() { return (int)29L; }

    static final int TokenCapabilities() { return (int)30L; }

    static final int TokenAppContainerSid() { return (int)31L; }

    static final int TokenAppContainerNumber() { return (int)32L; }

    static final int TokenUserClaimAttributes() { return (int)33L; }

    static final int TokenDeviceClaimAttributes() { return (int)34L; }

    static final int TokenRestrictedUserClaimAttributes() { return (int)35L; }

    static final int TokenRestrictedDeviceClaimAttributes() { return (int)36L; }

    static final int TokenDeviceGroups() { return (int)37L; }

    static final int TokenRestrictedDeviceGroups() { return (int)38L; }

    static final int TokenSecurityAttributes() { return (int)39L; }

    static final int TokenIsRestricted() { return (int)40L; }

    static final int TokenProcessTrustLevel() { return (int)41L; }

    static final int TokenPrivateNameSpace() { return (int)42L; }

    static final int TokenSingletonAttributes() { return (int)43L; }

    static final int TokenBnoIsolation() { return (int)44L; }

    static final int TokenChildProcessFlags() { return (int)45L; }

    static final int TokenIsLessPrivilegedAppContainer() { return (int)46L; }

    static final int TokenIsSandboxed() { return (int)47L; }

    static final int TokenOriginatingProcessTrustLevel() { return (int)48L; }

    static final int MaxTokenInfoClass() { return (int)49L; }

    static final MemoryLayout _TOKEN_USER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_LONG.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("User")
    ).withName("_TOKEN_USER");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_USER$struct$LAYOUT() { return _TOKEN_USER$struct$LAYOUT_; }

    static final MemoryLayout _SE_TOKEN_USER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_POINTER.withName("Sid"),
                C_LONG.withName("Attributes"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("User")
        ).withName("TokenUser"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_LONG.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("User"),
        MemoryLayout.ofStruct(
            C_CHAR.withName("Revision"),
            C_CHAR.withName("SubAuthorityCount"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(6, C_CHAR).withName("Value")
            ).withName("IdentifierAuthority"),
            MemoryLayout.ofSequence(1, C_LONG).withName("SubAuthority")
        ).withName("Sid"),
        MemoryLayout.ofSequence(68, C_CHAR).withName("Buffer"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_SE_TOKEN_USER");
    static final jdk.incubator.foreign.MemoryLayout _SE_TOKEN_USER$struct$LAYOUT() { return _SE_TOKEN_USER$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_GROUPS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("GroupCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_POINTER.withName("Sid"),
            C_LONG.withName("Attributes"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("_SID_AND_ATTRIBUTES")).withName("Groups")
    ).withName("_TOKEN_GROUPS");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS$struct$LAYOUT() { return _TOKEN_GROUPS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_GROUPS$GroupCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS$GroupCount$LAYOUT() { return _TOKEN_GROUPS$GroupCount$LAYOUT_; }

    static final VarHandle _TOKEN_GROUPS$GroupCount$VH_ = _TOKEN_GROUPS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GroupCount"));
    static final java.lang.invoke.VarHandle _TOKEN_GROUPS$GroupCount$VH() { return _TOKEN_GROUPS$GroupCount$VH_; }

    static final MemoryLayout _TOKEN_PRIVILEGES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("PrivilegeCount"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("Luid"),
            C_LONG.withName("Attributes")
        ).withName("_LUID_AND_ATTRIBUTES")).withName("Privileges")
    ).withName("_TOKEN_PRIVILEGES");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_PRIVILEGES$struct$LAYOUT() { return _TOKEN_PRIVILEGES$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_PRIVILEGES$PrivilegeCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_PRIVILEGES$PrivilegeCount$LAYOUT() { return _TOKEN_PRIVILEGES$PrivilegeCount$LAYOUT_; }

    static final VarHandle _TOKEN_PRIVILEGES$PrivilegeCount$VH_ = _TOKEN_PRIVILEGES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    static final java.lang.invoke.VarHandle _TOKEN_PRIVILEGES$PrivilegeCount$VH() { return _TOKEN_PRIVILEGES$PrivilegeCount$VH_; }

    static final MemoryLayout _TOKEN_OWNER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Owner")
    ).withName("_TOKEN_OWNER");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_OWNER$struct$LAYOUT() { return _TOKEN_OWNER$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_OWNER$Owner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_OWNER$Owner$LAYOUT() { return _TOKEN_OWNER$Owner$LAYOUT_; }

    static final VarHandle _TOKEN_OWNER$Owner$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_OWNER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Owner")));
    static final java.lang.invoke.VarHandle _TOKEN_OWNER$Owner$VH() { return _TOKEN_OWNER$Owner$VH_; }

    static final MemoryLayout _TOKEN_PRIMARY_GROUP$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("PrimaryGroup")
    ).withName("_TOKEN_PRIMARY_GROUP");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_PRIMARY_GROUP$struct$LAYOUT() { return _TOKEN_PRIMARY_GROUP$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_PRIMARY_GROUP$PrimaryGroup$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_PRIMARY_GROUP$PrimaryGroup$LAYOUT() { return _TOKEN_PRIMARY_GROUP$PrimaryGroup$LAYOUT_; }

    static final VarHandle _TOKEN_PRIMARY_GROUP$PrimaryGroup$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_PRIMARY_GROUP$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PrimaryGroup")));
    static final java.lang.invoke.VarHandle _TOKEN_PRIMARY_GROUP$PrimaryGroup$VH() { return _TOKEN_PRIMARY_GROUP$PrimaryGroup$VH_; }

    static final MemoryLayout _TOKEN_DEFAULT_DACL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("DefaultDacl")
    ).withName("_TOKEN_DEFAULT_DACL");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_DEFAULT_DACL$struct$LAYOUT() { return _TOKEN_DEFAULT_DACL$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_DEFAULT_DACL$DefaultDacl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_DEFAULT_DACL$DefaultDacl$LAYOUT() { return _TOKEN_DEFAULT_DACL$DefaultDacl$LAYOUT_; }

    static final VarHandle _TOKEN_DEFAULT_DACL$DefaultDacl$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_DEFAULT_DACL$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DefaultDacl")));
    static final java.lang.invoke.VarHandle _TOKEN_DEFAULT_DACL$DefaultDacl$VH() { return _TOKEN_DEFAULT_DACL$DefaultDacl$VH_; }

    static final MemoryLayout _TOKEN_USER_CLAIMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("UserClaims")
    ).withName("_TOKEN_USER_CLAIMS");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_USER_CLAIMS$struct$LAYOUT() { return _TOKEN_USER_CLAIMS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_USER_CLAIMS$UserClaims$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_USER_CLAIMS$UserClaims$LAYOUT() { return _TOKEN_USER_CLAIMS$UserClaims$LAYOUT_; }

    static final VarHandle _TOKEN_USER_CLAIMS$UserClaims$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_USER_CLAIMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UserClaims")));
    static final java.lang.invoke.VarHandle _TOKEN_USER_CLAIMS$UserClaims$VH() { return _TOKEN_USER_CLAIMS$UserClaims$VH_; }

    static final MemoryLayout _TOKEN_DEVICE_CLAIMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("DeviceClaims")
    ).withName("_TOKEN_DEVICE_CLAIMS");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_DEVICE_CLAIMS$struct$LAYOUT() { return _TOKEN_DEVICE_CLAIMS$struct$LAYOUT_; }

    static final MemoryLayout _TOKEN_DEVICE_CLAIMS$DeviceClaims$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_DEVICE_CLAIMS$DeviceClaims$LAYOUT() { return _TOKEN_DEVICE_CLAIMS$DeviceClaims$LAYOUT_; }

    static final VarHandle _TOKEN_DEVICE_CLAIMS$DeviceClaims$VH_ = MemoryHandles.asAddressVarHandle(_TOKEN_DEVICE_CLAIMS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DeviceClaims")));
    static final java.lang.invoke.VarHandle _TOKEN_DEVICE_CLAIMS$DeviceClaims$VH() { return _TOKEN_DEVICE_CLAIMS$DeviceClaims$VH_; }

    static final MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("SidCount"),
        C_LONG.withName("SidLength"),
        C_POINTER.withName("Sids"),
        C_LONG.withName("RestrictedSidCount"),
        C_LONG.withName("RestrictedSidLength"),
        C_POINTER.withName("RestrictedSids"),
        C_LONG.withName("PrivilegeCount"),
        C_LONG.withName("PrivilegeLength"),
        C_POINTER.withName("Privileges"),
        MemoryLayout.ofStruct(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart")
        ).withName("AuthenticationId")
    ).withName("_TOKEN_GROUPS_AND_PRIVILEGES");
    static final jdk.incubator.foreign.MemoryLayout _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT() { return _TOKEN_GROUPS_AND_PRIVILEGES$struct$LAYOUT_; }

}

