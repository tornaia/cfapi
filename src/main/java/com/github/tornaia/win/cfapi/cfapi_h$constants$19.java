// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$19 extends cfapi_h$constants$18 {

    /* package-private */ cfapi_h$constants$19() {}
    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$DiskSpinDown$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$DiskSpinDown$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$DiskSpinDown$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("DiskSpinDown"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH() { return SYSTEM_POWER_CAPABILITIES$DiskSpinDown$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFileType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$HiberFileType$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$HiberFileType$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$HiberFileType$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("HiberFileType"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$HiberFileType$VH() { return SYSTEM_POWER_CAPABILITIES$HiberFileType$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AoAcConnectivitySupported"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH() { return SYSTEM_POWER_CAPABILITIES$AoAcConnectivitySupported$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SystemBatteriesPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH() { return SYSTEM_POWER_CAPABILITIES$SystemBatteriesPresent$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BatteriesAreShortTerm"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH() { return SYSTEM_POWER_CAPABILITIES$BatteriesAreShortTerm$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$AcOnLineWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$AcOnLineWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$AcOnLineWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AcOnLineWake"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH() { return SYSTEM_POWER_CAPABILITIES$AcOnLineWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$SoftLidWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$SoftLidWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$SoftLidWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SoftLidWake"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH() { return SYSTEM_POWER_CAPABILITIES$SoftLidWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$RtcWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$RtcWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$RtcWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$RtcWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RtcWake"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$RtcWake$VH() { return SYSTEM_POWER_CAPABILITIES$RtcWake$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MinDeviceWakeState"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH() { return SYSTEM_POWER_CAPABILITIES$MinDeviceWakeState$VH_; }

    static final MemoryLayout SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$LAYOUT() { return SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$LAYOUT_; }

    static final VarHandle SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH_ = SYSTEM_POWER_CAPABILITIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultLowLatencyWake"));
    static final java.lang.invoke.VarHandle SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH() { return SYSTEM_POWER_CAPABILITIES$DefaultLowLatencyWake$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("AcOnLine"),
        C_CHAR.withName("BatteryPresent"),
        C_CHAR.withName("Charging"),
        C_CHAR.withName("Discharging"),
        MemoryLayout.ofSequence(3, C_CHAR).withName("Spare1"),
        C_CHAR.withName("Tag"),
        C_LONG.withName("MaxCapacity"),
        C_LONG.withName("RemainingCapacity"),
        C_LONG.withName("Rate"),
        C_LONG.withName("EstimatedTime"),
        C_LONG.withName("DefaultAlert1"),
        C_LONG.withName("DefaultAlert2")
    );
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$struct$LAYOUT() { return SYSTEM_BATTERY_STATE$struct$LAYOUT_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$AcOnLine$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$AcOnLine$LAYOUT() { return SYSTEM_BATTERY_STATE$AcOnLine$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$AcOnLine$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AcOnLine"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$AcOnLine$VH() { return SYSTEM_BATTERY_STATE$AcOnLine$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$BatteryPresent$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$BatteryPresent$LAYOUT() { return SYSTEM_BATTERY_STATE$BatteryPresent$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$BatteryPresent$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BatteryPresent"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$BatteryPresent$VH() { return SYSTEM_BATTERY_STATE$BatteryPresent$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Charging$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Charging$LAYOUT() { return SYSTEM_BATTERY_STATE$Charging$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Charging$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Charging"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Charging$VH() { return SYSTEM_BATTERY_STATE$Charging$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Discharging$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Discharging$LAYOUT() { return SYSTEM_BATTERY_STATE$Discharging$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Discharging$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Discharging"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Discharging$VH() { return SYSTEM_BATTERY_STATE$Discharging$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Tag$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Tag$LAYOUT() { return SYSTEM_BATTERY_STATE$Tag$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Tag$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Tag"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Tag$VH() { return SYSTEM_BATTERY_STATE$Tag$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$MaxCapacity$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$MaxCapacity$LAYOUT() { return SYSTEM_BATTERY_STATE$MaxCapacity$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$MaxCapacity$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("MaxCapacity"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$MaxCapacity$VH() { return SYSTEM_BATTERY_STATE$MaxCapacity$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$RemainingCapacity$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$RemainingCapacity$LAYOUT() { return SYSTEM_BATTERY_STATE$RemainingCapacity$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$RemainingCapacity$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RemainingCapacity"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$RemainingCapacity$VH() { return SYSTEM_BATTERY_STATE$RemainingCapacity$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$Rate$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$Rate$LAYOUT() { return SYSTEM_BATTERY_STATE$Rate$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$Rate$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Rate"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$Rate$VH() { return SYSTEM_BATTERY_STATE$Rate$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$EstimatedTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$EstimatedTime$LAYOUT() { return SYSTEM_BATTERY_STATE$EstimatedTime$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$EstimatedTime$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EstimatedTime"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$EstimatedTime$VH() { return SYSTEM_BATTERY_STATE$EstimatedTime$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert1$LAYOUT() { return SYSTEM_BATTERY_STATE$DefaultAlert1$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$DefaultAlert1$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultAlert1"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$DefaultAlert1$VH() { return SYSTEM_BATTERY_STATE$DefaultAlert1$VH_; }

    static final MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout SYSTEM_BATTERY_STATE$DefaultAlert2$LAYOUT() { return SYSTEM_BATTERY_STATE$DefaultAlert2$LAYOUT_; }

    static final VarHandle SYSTEM_BATTERY_STATE$DefaultAlert2$VH_ = SYSTEM_BATTERY_STATE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("DefaultAlert2"));
    static final java.lang.invoke.VarHandle SYSTEM_BATTERY_STATE$DefaultAlert2$VH() { return SYSTEM_BATTERY_STATE$DefaultAlert2$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("e_magic"),
        C_SHORT.withName("e_cblp"),
        C_SHORT.withName("e_cp"),
        C_SHORT.withName("e_crlc"),
        C_SHORT.withName("e_cparhdr"),
        C_SHORT.withName("e_minalloc"),
        C_SHORT.withName("e_maxalloc"),
        C_SHORT.withName("e_ss"),
        C_SHORT.withName("e_sp"),
        C_SHORT.withName("e_csum"),
        C_SHORT.withName("e_ip"),
        C_SHORT.withName("e_cs"),
        C_SHORT.withName("e_lfarlc"),
        C_SHORT.withName("e_ovno"),
        MemoryLayout.ofSequence(4, C_SHORT).withName("e_res"),
        C_SHORT.withName("e_oemid"),
        C_SHORT.withName("e_oeminfo"),
        MemoryLayout.ofSequence(10, C_SHORT).withName("e_res2"),
        C_LONG.withName("e_lfanew")
    ).withName("_IMAGE_DOS_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$struct$LAYOUT() { return _IMAGE_DOS_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_magic$LAYOUT() { return _IMAGE_DOS_HEADER$e_magic$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_magic$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_magic"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_magic$VH() { return _IMAGE_DOS_HEADER$e_magic$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cblp$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cblp$LAYOUT() { return _IMAGE_DOS_HEADER$e_cblp$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cblp$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cblp"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cblp$VH() { return _IMAGE_DOS_HEADER$e_cblp$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cp$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cp$LAYOUT() { return _IMAGE_DOS_HEADER$e_cp$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cp$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cp"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cp$VH() { return _IMAGE_DOS_HEADER$e_cp$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_crlc$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_crlc$LAYOUT() { return _IMAGE_DOS_HEADER$e_crlc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_crlc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_crlc"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_crlc$VH() { return _IMAGE_DOS_HEADER$e_crlc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cparhdr$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cparhdr$LAYOUT() { return _IMAGE_DOS_HEADER$e_cparhdr$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cparhdr$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cparhdr"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cparhdr$VH() { return _IMAGE_DOS_HEADER$e_cparhdr$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_minalloc$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_minalloc$LAYOUT() { return _IMAGE_DOS_HEADER$e_minalloc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_minalloc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_minalloc"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_minalloc$VH() { return _IMAGE_DOS_HEADER$e_minalloc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_maxalloc$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_maxalloc$LAYOUT() { return _IMAGE_DOS_HEADER$e_maxalloc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_maxalloc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_maxalloc"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_maxalloc$VH() { return _IMAGE_DOS_HEADER$e_maxalloc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_ss$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_ss$LAYOUT() { return _IMAGE_DOS_HEADER$e_ss$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_ss$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_ss"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_ss$VH() { return _IMAGE_DOS_HEADER$e_ss$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_sp$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_sp$LAYOUT() { return _IMAGE_DOS_HEADER$e_sp$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_sp$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_sp"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_sp$VH() { return _IMAGE_DOS_HEADER$e_sp$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_csum$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_csum$LAYOUT() { return _IMAGE_DOS_HEADER$e_csum$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_csum$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_csum"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_csum$VH() { return _IMAGE_DOS_HEADER$e_csum$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_ip$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_ip$LAYOUT() { return _IMAGE_DOS_HEADER$e_ip$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_ip$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_ip"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_ip$VH() { return _IMAGE_DOS_HEADER$e_ip$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_cs$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_cs$LAYOUT() { return _IMAGE_DOS_HEADER$e_cs$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_cs$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_cs"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_cs$VH() { return _IMAGE_DOS_HEADER$e_cs$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_lfarlc$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_lfarlc$LAYOUT() { return _IMAGE_DOS_HEADER$e_lfarlc$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_lfarlc$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_lfarlc"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_lfarlc$VH() { return _IMAGE_DOS_HEADER$e_lfarlc$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_ovno$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_ovno$LAYOUT() { return _IMAGE_DOS_HEADER$e_ovno$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_ovno$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_ovno"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_ovno$VH() { return _IMAGE_DOS_HEADER$e_ovno$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_oemid$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_oemid$LAYOUT() { return _IMAGE_DOS_HEADER$e_oemid$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_oemid$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_oemid"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_oemid$VH() { return _IMAGE_DOS_HEADER$e_oemid$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_oeminfo$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_oeminfo$LAYOUT() { return _IMAGE_DOS_HEADER$e_oeminfo$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_oeminfo$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e_oeminfo"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_oeminfo$VH() { return _IMAGE_DOS_HEADER$e_oeminfo$VH_; }

    static final MemoryLayout _IMAGE_DOS_HEADER$e_lfanew$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DOS_HEADER$e_lfanew$LAYOUT() { return _IMAGE_DOS_HEADER$e_lfanew$LAYOUT_; }

    static final VarHandle _IMAGE_DOS_HEADER$e_lfanew$VH_ = _IMAGE_DOS_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e_lfanew"));
    static final java.lang.invoke.VarHandle _IMAGE_DOS_HEADER$e_lfanew$VH() { return _IMAGE_DOS_HEADER$e_lfanew$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("ne_magic"),
        C_CHAR.withName("ne_ver"),
        C_CHAR.withName("ne_rev"),
        C_SHORT.withName("ne_enttab"),
        C_SHORT.withName("ne_cbenttab"),
        C_LONG.withName("ne_crc"),
        C_SHORT.withName("ne_flags"),
        C_SHORT.withName("ne_autodata"),
        C_SHORT.withName("ne_heap"),
        C_SHORT.withName("ne_stack"),
        C_LONG.withName("ne_csip"),
        C_LONG.withName("ne_sssp"),
        C_SHORT.withName("ne_cseg"),
        C_SHORT.withName("ne_cmod"),
        C_SHORT.withName("ne_cbnrestab"),
        C_SHORT.withName("ne_segtab"),
        C_SHORT.withName("ne_rsrctab"),
        C_SHORT.withName("ne_restab"),
        C_SHORT.withName("ne_modtab"),
        C_SHORT.withName("ne_imptab"),
        C_LONG.withName("ne_nrestab"),
        C_SHORT.withName("ne_cmovent"),
        C_SHORT.withName("ne_align"),
        C_SHORT.withName("ne_cres"),
        C_CHAR.withName("ne_exetyp"),
        C_CHAR.withName("ne_flagsothers"),
        C_SHORT.withName("ne_pretthunks"),
        C_SHORT.withName("ne_psegrefbytes"),
        C_SHORT.withName("ne_swaparea"),
        C_SHORT.withName("ne_expver")
    ).withName("_IMAGE_OS2_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$struct$LAYOUT() { return _IMAGE_OS2_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_magic$LAYOUT() { return _IMAGE_OS2_HEADER$ne_magic$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_magic$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_magic"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_magic$VH() { return _IMAGE_OS2_HEADER$ne_magic$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_ver$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_ver$LAYOUT() { return _IMAGE_OS2_HEADER$ne_ver$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_ver$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_ver"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_ver$VH() { return _IMAGE_OS2_HEADER$ne_ver$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_rev$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_rev$LAYOUT() { return _IMAGE_OS2_HEADER$ne_rev$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_rev$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_rev"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_rev$VH() { return _IMAGE_OS2_HEADER$ne_rev$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_enttab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_enttab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_enttab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_enttab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_enttab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_enttab$VH() { return _IMAGE_OS2_HEADER$ne_enttab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cbenttab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cbenttab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cbenttab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cbenttab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cbenttab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cbenttab$VH() { return _IMAGE_OS2_HEADER$ne_cbenttab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_crc$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_crc$LAYOUT() { return _IMAGE_OS2_HEADER$ne_crc$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_crc$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_crc"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_crc$VH() { return _IMAGE_OS2_HEADER$ne_crc$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_flags$LAYOUT() { return _IMAGE_OS2_HEADER$ne_flags$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_flags$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_flags"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_flags$VH() { return _IMAGE_OS2_HEADER$ne_flags$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_autodata$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_autodata$LAYOUT() { return _IMAGE_OS2_HEADER$ne_autodata$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_autodata$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_autodata"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_autodata$VH() { return _IMAGE_OS2_HEADER$ne_autodata$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_heap$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_heap$LAYOUT() { return _IMAGE_OS2_HEADER$ne_heap$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_heap$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_heap"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_heap$VH() { return _IMAGE_OS2_HEADER$ne_heap$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_stack$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_stack$LAYOUT() { return _IMAGE_OS2_HEADER$ne_stack$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_stack$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_stack"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_stack$VH() { return _IMAGE_OS2_HEADER$ne_stack$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_csip$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_csip$LAYOUT() { return _IMAGE_OS2_HEADER$ne_csip$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_csip$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_csip"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_csip$VH() { return _IMAGE_OS2_HEADER$ne_csip$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_sssp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_sssp$LAYOUT() { return _IMAGE_OS2_HEADER$ne_sssp$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_sssp$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_sssp"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_sssp$VH() { return _IMAGE_OS2_HEADER$ne_sssp$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cseg$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cseg$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cseg$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cseg$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cseg"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cseg$VH() { return _IMAGE_OS2_HEADER$ne_cseg$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cmod$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cmod$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cmod$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cmod$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cmod"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cmod$VH() { return _IMAGE_OS2_HEADER$ne_cmod$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cbnrestab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cbnrestab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cbnrestab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cbnrestab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cbnrestab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cbnrestab$VH() { return _IMAGE_OS2_HEADER$ne_cbnrestab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_segtab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_segtab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_segtab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_segtab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_segtab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_segtab$VH() { return _IMAGE_OS2_HEADER$ne_segtab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_rsrctab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_rsrctab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_rsrctab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_rsrctab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_rsrctab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_rsrctab$VH() { return _IMAGE_OS2_HEADER$ne_rsrctab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_restab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_restab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_restab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_restab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_restab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_restab$VH() { return _IMAGE_OS2_HEADER$ne_restab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_modtab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_modtab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_modtab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_modtab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_modtab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_modtab$VH() { return _IMAGE_OS2_HEADER$ne_modtab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_imptab$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_imptab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_imptab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_imptab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_imptab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_imptab$VH() { return _IMAGE_OS2_HEADER$ne_imptab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_nrestab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_nrestab$LAYOUT() { return _IMAGE_OS2_HEADER$ne_nrestab$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_nrestab$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ne_nrestab"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_nrestab$VH() { return _IMAGE_OS2_HEADER$ne_nrestab$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cmovent$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cmovent$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cmovent$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cmovent$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cmovent"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cmovent$VH() { return _IMAGE_OS2_HEADER$ne_cmovent$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_align$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_align$LAYOUT() { return _IMAGE_OS2_HEADER$ne_align$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_align$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_align"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_align$VH() { return _IMAGE_OS2_HEADER$ne_align$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_cres$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_cres$LAYOUT() { return _IMAGE_OS2_HEADER$ne_cres$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_cres$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_cres"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_cres$VH() { return _IMAGE_OS2_HEADER$ne_cres$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_exetyp$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_exetyp$LAYOUT() { return _IMAGE_OS2_HEADER$ne_exetyp$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_exetyp$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_exetyp"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_exetyp$VH() { return _IMAGE_OS2_HEADER$ne_exetyp$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_flagsothers$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_flagsothers$LAYOUT() { return _IMAGE_OS2_HEADER$ne_flagsothers$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_flagsothers$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ne_flagsothers"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_flagsothers$VH() { return _IMAGE_OS2_HEADER$ne_flagsothers$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_pretthunks$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_pretthunks$LAYOUT() { return _IMAGE_OS2_HEADER$ne_pretthunks$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_pretthunks$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_pretthunks"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_pretthunks$VH() { return _IMAGE_OS2_HEADER$ne_pretthunks$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_psegrefbytes$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_psegrefbytes$LAYOUT() { return _IMAGE_OS2_HEADER$ne_psegrefbytes$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_psegrefbytes$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_psegrefbytes"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_psegrefbytes$VH() { return _IMAGE_OS2_HEADER$ne_psegrefbytes$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_swaparea$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_swaparea$LAYOUT() { return _IMAGE_OS2_HEADER$ne_swaparea$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_swaparea$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_swaparea"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_swaparea$VH() { return _IMAGE_OS2_HEADER$ne_swaparea$VH_; }

    static final MemoryLayout _IMAGE_OS2_HEADER$ne_expver$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OS2_HEADER$ne_expver$LAYOUT() { return _IMAGE_OS2_HEADER$ne_expver$LAYOUT_; }

    static final VarHandle _IMAGE_OS2_HEADER$ne_expver$VH_ = _IMAGE_OS2_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("ne_expver"));
    static final java.lang.invoke.VarHandle _IMAGE_OS2_HEADER$ne_expver$VH() { return _IMAGE_OS2_HEADER$ne_expver$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("e32_magic"),
        C_CHAR.withName("e32_border"),
        C_CHAR.withName("e32_worder"),
        C_LONG.withName("e32_level"),
        C_SHORT.withName("e32_cpu"),
        C_SHORT.withName("e32_os"),
        C_LONG.withName("e32_ver"),
        C_LONG.withName("e32_mflags"),
        C_LONG.withName("e32_mpages"),
        C_LONG.withName("e32_startobj"),
        C_LONG.withName("e32_eip"),
        C_LONG.withName("e32_stackobj"),
        C_LONG.withName("e32_esp"),
        C_LONG.withName("e32_pagesize"),
        C_LONG.withName("e32_lastpagesize"),
        C_LONG.withName("e32_fixupsize"),
        C_LONG.withName("e32_fixupsum"),
        C_LONG.withName("e32_ldrsize"),
        C_LONG.withName("e32_ldrsum"),
        C_LONG.withName("e32_objtab"),
        C_LONG.withName("e32_objcnt"),
        C_LONG.withName("e32_objmap"),
        C_LONG.withName("e32_itermap"),
        C_LONG.withName("e32_rsrctab"),
        C_LONG.withName("e32_rsrccnt"),
        C_LONG.withName("e32_restab"),
        C_LONG.withName("e32_enttab"),
        C_LONG.withName("e32_dirtab"),
        C_LONG.withName("e32_dircnt"),
        C_LONG.withName("e32_fpagetab"),
        C_LONG.withName("e32_frectab"),
        C_LONG.withName("e32_impmod"),
        C_LONG.withName("e32_impmodcnt"),
        C_LONG.withName("e32_impproc"),
        C_LONG.withName("e32_pagesum"),
        C_LONG.withName("e32_datapage"),
        C_LONG.withName("e32_preload"),
        C_LONG.withName("e32_nrestab"),
        C_LONG.withName("e32_cbnrestab"),
        C_LONG.withName("e32_nressum"),
        C_LONG.withName("e32_autodata"),
        C_LONG.withName("e32_debuginfo"),
        C_LONG.withName("e32_debuglen"),
        C_LONG.withName("e32_instpreload"),
        C_LONG.withName("e32_instdemand"),
        C_LONG.withName("e32_heapsize"),
        MemoryLayout.ofSequence(12, C_CHAR).withName("e32_res3"),
        C_LONG.withName("e32_winresoff"),
        C_LONG.withName("e32_winreslen"),
        C_SHORT.withName("e32_devid"),
        C_SHORT.withName("e32_ddkver")
    ).withName("_IMAGE_VXD_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$struct$LAYOUT() { return _IMAGE_VXD_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_magic$LAYOUT() { return _IMAGE_VXD_HEADER$e32_magic$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_magic$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_magic"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_magic$VH() { return _IMAGE_VXD_HEADER$e32_magic$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_border$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_border$LAYOUT() { return _IMAGE_VXD_HEADER$e32_border$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_border$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("e32_border"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_border$VH() { return _IMAGE_VXD_HEADER$e32_border$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_worder$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_worder$LAYOUT() { return _IMAGE_VXD_HEADER$e32_worder$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_worder$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("e32_worder"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_worder$VH() { return _IMAGE_VXD_HEADER$e32_worder$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_level$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_level$LAYOUT() { return _IMAGE_VXD_HEADER$e32_level$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_level$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_level"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_level$VH() { return _IMAGE_VXD_HEADER$e32_level$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_cpu$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_cpu$LAYOUT() { return _IMAGE_VXD_HEADER$e32_cpu$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_cpu$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_cpu"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_cpu$VH() { return _IMAGE_VXD_HEADER$e32_cpu$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_os$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_os$LAYOUT() { return _IMAGE_VXD_HEADER$e32_os$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_os$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_os"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_os$VH() { return _IMAGE_VXD_HEADER$e32_os$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ver$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ver$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ver$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ver$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_ver"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ver$VH() { return _IMAGE_VXD_HEADER$e32_ver$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_mflags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_mflags$LAYOUT() { return _IMAGE_VXD_HEADER$e32_mflags$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_mflags$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_mflags"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_mflags$VH() { return _IMAGE_VXD_HEADER$e32_mflags$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_mpages$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_mpages$LAYOUT() { return _IMAGE_VXD_HEADER$e32_mpages$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_mpages$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_mpages"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_mpages$VH() { return _IMAGE_VXD_HEADER$e32_mpages$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_startobj$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_startobj$LAYOUT() { return _IMAGE_VXD_HEADER$e32_startobj$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_startobj$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_startobj"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_startobj$VH() { return _IMAGE_VXD_HEADER$e32_startobj$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_eip$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_eip$LAYOUT() { return _IMAGE_VXD_HEADER$e32_eip$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_eip$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_eip"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_eip$VH() { return _IMAGE_VXD_HEADER$e32_eip$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_stackobj$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_stackobj$LAYOUT() { return _IMAGE_VXD_HEADER$e32_stackobj$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_stackobj$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_stackobj"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_stackobj$VH() { return _IMAGE_VXD_HEADER$e32_stackobj$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_esp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_esp$LAYOUT() { return _IMAGE_VXD_HEADER$e32_esp$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_esp$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_esp"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_esp$VH() { return _IMAGE_VXD_HEADER$e32_esp$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_pagesize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_pagesize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_pagesize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_pagesize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_pagesize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_pagesize$VH() { return _IMAGE_VXD_HEADER$e32_pagesize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_lastpagesize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_lastpagesize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_lastpagesize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_lastpagesize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_lastpagesize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_lastpagesize$VH() { return _IMAGE_VXD_HEADER$e32_lastpagesize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_fixupsize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_fixupsize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_fixupsize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_fixupsize$VH() { return _IMAGE_VXD_HEADER$e32_fixupsize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_fixupsum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_fixupsum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_fixupsum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_fixupsum"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_fixupsum$VH() { return _IMAGE_VXD_HEADER$e32_fixupsum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ldrsize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ldrsize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_ldrsize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ldrsize$VH() { return _IMAGE_VXD_HEADER$e32_ldrsize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ldrsum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ldrsum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ldrsum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_ldrsum"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ldrsum$VH() { return _IMAGE_VXD_HEADER$e32_ldrsum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_objtab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_objtab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_objtab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_objtab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_objtab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_objtab$VH() { return _IMAGE_VXD_HEADER$e32_objtab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_objcnt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_objcnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_objcnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_objcnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_objcnt"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_objcnt$VH() { return _IMAGE_VXD_HEADER$e32_objcnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_objmap$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_objmap$LAYOUT() { return _IMAGE_VXD_HEADER$e32_objmap$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_objmap$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_objmap"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_objmap$VH() { return _IMAGE_VXD_HEADER$e32_objmap$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_itermap$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_itermap$LAYOUT() { return _IMAGE_VXD_HEADER$e32_itermap$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_itermap$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_itermap"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_itermap$VH() { return _IMAGE_VXD_HEADER$e32_itermap$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_rsrctab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_rsrctab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_rsrctab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_rsrctab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_rsrctab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_rsrctab$VH() { return _IMAGE_VXD_HEADER$e32_rsrctab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_rsrccnt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_rsrccnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_rsrccnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_rsrccnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_rsrccnt"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_rsrccnt$VH() { return _IMAGE_VXD_HEADER$e32_rsrccnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_restab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_restab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_restab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_restab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_restab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_restab$VH() { return _IMAGE_VXD_HEADER$e32_restab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_enttab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_enttab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_enttab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_enttab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_enttab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_enttab$VH() { return _IMAGE_VXD_HEADER$e32_enttab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_dirtab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_dirtab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_dirtab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_dirtab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_dirtab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_dirtab$VH() { return _IMAGE_VXD_HEADER$e32_dirtab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_dircnt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_dircnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_dircnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_dircnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_dircnt"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_dircnt$VH() { return _IMAGE_VXD_HEADER$e32_dircnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_fpagetab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_fpagetab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_fpagetab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_fpagetab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_fpagetab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_fpagetab$VH() { return _IMAGE_VXD_HEADER$e32_fpagetab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_frectab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_frectab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_frectab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_frectab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_frectab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_frectab$VH() { return _IMAGE_VXD_HEADER$e32_frectab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_impmod$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_impmod$LAYOUT() { return _IMAGE_VXD_HEADER$e32_impmod$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_impmod$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_impmod"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_impmod$VH() { return _IMAGE_VXD_HEADER$e32_impmod$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_impmodcnt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_impmodcnt$LAYOUT() { return _IMAGE_VXD_HEADER$e32_impmodcnt$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_impmodcnt$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_impmodcnt"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_impmodcnt$VH() { return _IMAGE_VXD_HEADER$e32_impmodcnt$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_impproc$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_impproc$LAYOUT() { return _IMAGE_VXD_HEADER$e32_impproc$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_impproc$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_impproc"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_impproc$VH() { return _IMAGE_VXD_HEADER$e32_impproc$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_pagesum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_pagesum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_pagesum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_pagesum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_pagesum"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_pagesum$VH() { return _IMAGE_VXD_HEADER$e32_pagesum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_datapage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_datapage$LAYOUT() { return _IMAGE_VXD_HEADER$e32_datapage$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_datapage$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_datapage"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_datapage$VH() { return _IMAGE_VXD_HEADER$e32_datapage$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_preload$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_preload$LAYOUT() { return _IMAGE_VXD_HEADER$e32_preload$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_preload$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_preload"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_preload$VH() { return _IMAGE_VXD_HEADER$e32_preload$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_nrestab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_nrestab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_nrestab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_nrestab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_nrestab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_nrestab$VH() { return _IMAGE_VXD_HEADER$e32_nrestab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_cbnrestab$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_cbnrestab$LAYOUT() { return _IMAGE_VXD_HEADER$e32_cbnrestab$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_cbnrestab$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_cbnrestab"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_cbnrestab$VH() { return _IMAGE_VXD_HEADER$e32_cbnrestab$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_nressum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_nressum$LAYOUT() { return _IMAGE_VXD_HEADER$e32_nressum$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_nressum$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_nressum"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_nressum$VH() { return _IMAGE_VXD_HEADER$e32_nressum$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_autodata$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_autodata$LAYOUT() { return _IMAGE_VXD_HEADER$e32_autodata$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_autodata$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_autodata"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_autodata$VH() { return _IMAGE_VXD_HEADER$e32_autodata$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_debuginfo$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_debuginfo$LAYOUT() { return _IMAGE_VXD_HEADER$e32_debuginfo$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_debuginfo$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_debuginfo"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_debuginfo$VH() { return _IMAGE_VXD_HEADER$e32_debuginfo$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_debuglen$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_debuglen$LAYOUT() { return _IMAGE_VXD_HEADER$e32_debuglen$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_debuglen$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_debuglen"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_debuglen$VH() { return _IMAGE_VXD_HEADER$e32_debuglen$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_instpreload$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_instpreload$LAYOUT() { return _IMAGE_VXD_HEADER$e32_instpreload$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_instpreload$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_instpreload"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_instpreload$VH() { return _IMAGE_VXD_HEADER$e32_instpreload$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_instdemand$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_instdemand$LAYOUT() { return _IMAGE_VXD_HEADER$e32_instdemand$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_instdemand$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_instdemand"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_instdemand$VH() { return _IMAGE_VXD_HEADER$e32_instdemand$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_heapsize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_heapsize$LAYOUT() { return _IMAGE_VXD_HEADER$e32_heapsize$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_heapsize$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_heapsize"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_heapsize$VH() { return _IMAGE_VXD_HEADER$e32_heapsize$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_winresoff$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_winresoff$LAYOUT() { return _IMAGE_VXD_HEADER$e32_winresoff$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_winresoff$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_winresoff"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_winresoff$VH() { return _IMAGE_VXD_HEADER$e32_winresoff$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_winreslen$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_winreslen$LAYOUT() { return _IMAGE_VXD_HEADER$e32_winreslen$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_winreslen$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("e32_winreslen"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_winreslen$VH() { return _IMAGE_VXD_HEADER$e32_winreslen$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_devid$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_devid$LAYOUT() { return _IMAGE_VXD_HEADER$e32_devid$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_devid$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_devid"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_devid$VH() { return _IMAGE_VXD_HEADER$e32_devid$VH_; }

    static final MemoryLayout _IMAGE_VXD_HEADER$e32_ddkver$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_VXD_HEADER$e32_ddkver$LAYOUT() { return _IMAGE_VXD_HEADER$e32_ddkver$LAYOUT_; }

    static final VarHandle _IMAGE_VXD_HEADER$e32_ddkver$VH_ = _IMAGE_VXD_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("e32_ddkver"));
    static final java.lang.invoke.VarHandle _IMAGE_VXD_HEADER$e32_ddkver$VH() { return _IMAGE_VXD_HEADER$e32_ddkver$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Machine"),
        C_SHORT.withName("NumberOfSections"),
        C_LONG.withName("TimeDateStamp"),
        C_LONG.withName("PointerToSymbolTable"),
        C_LONG.withName("NumberOfSymbols"),
        C_SHORT.withName("SizeOfOptionalHeader"),
        C_SHORT.withName("Characteristics")
    ).withName("_IMAGE_FILE_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$struct$LAYOUT() { return _IMAGE_FILE_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$Machine$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$Machine$LAYOUT() { return _IMAGE_FILE_HEADER$Machine$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$Machine$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$Machine$VH() { return _IMAGE_FILE_HEADER$Machine$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$NumberOfSections$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$NumberOfSections$LAYOUT() { return _IMAGE_FILE_HEADER$NumberOfSections$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$NumberOfSections$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("NumberOfSections"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$NumberOfSections$VH() { return _IMAGE_FILE_HEADER$NumberOfSections$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$TimeDateStamp$LAYOUT() { return _IMAGE_FILE_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$TimeDateStamp$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$TimeDateStamp$VH() { return _IMAGE_FILE_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$PointerToSymbolTable$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$PointerToSymbolTable$LAYOUT() { return _IMAGE_FILE_HEADER$PointerToSymbolTable$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$PointerToSymbolTable$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PointerToSymbolTable"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$PointerToSymbolTable$VH() { return _IMAGE_FILE_HEADER$PointerToSymbolTable$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$NumberOfSymbols$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$NumberOfSymbols$LAYOUT() { return _IMAGE_FILE_HEADER$NumberOfSymbols$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$NumberOfSymbols$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfSymbols"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$NumberOfSymbols$VH() { return _IMAGE_FILE_HEADER$NumberOfSymbols$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$SizeOfOptionalHeader$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$SizeOfOptionalHeader$LAYOUT() { return _IMAGE_FILE_HEADER$SizeOfOptionalHeader$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SizeOfOptionalHeader"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH() { return _IMAGE_FILE_HEADER$SizeOfOptionalHeader$VH_; }

    static final MemoryLayout _IMAGE_FILE_HEADER$Characteristics$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_FILE_HEADER$Characteristics$LAYOUT() { return _IMAGE_FILE_HEADER$Characteristics$LAYOUT_; }

    static final VarHandle _IMAGE_FILE_HEADER$Characteristics$VH_ = _IMAGE_FILE_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Characteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_FILE_HEADER$Characteristics$VH() { return _IMAGE_FILE_HEADER$Characteristics$VH_; }

    static final MemoryLayout _IMAGE_DATA_DIRECTORY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("VirtualAddress"),
        C_LONG.withName("Size")
    ).withName("_IMAGE_DATA_DIRECTORY");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DATA_DIRECTORY$struct$LAYOUT() { return _IMAGE_DATA_DIRECTORY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_DATA_DIRECTORY$VirtualAddress$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DATA_DIRECTORY$VirtualAddress$LAYOUT() { return _IMAGE_DATA_DIRECTORY$VirtualAddress$LAYOUT_; }

    static final VarHandle _IMAGE_DATA_DIRECTORY$VirtualAddress$VH_ = _IMAGE_DATA_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("VirtualAddress"));
    static final java.lang.invoke.VarHandle _IMAGE_DATA_DIRECTORY$VirtualAddress$VH() { return _IMAGE_DATA_DIRECTORY$VirtualAddress$VH_; }

    static final MemoryLayout _IMAGE_DATA_DIRECTORY$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_DATA_DIRECTORY$Size$LAYOUT() { return _IMAGE_DATA_DIRECTORY$Size$LAYOUT_; }

    static final VarHandle _IMAGE_DATA_DIRECTORY$Size$VH_ = _IMAGE_DATA_DIRECTORY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _IMAGE_DATA_DIRECTORY$Size$VH() { return _IMAGE_DATA_DIRECTORY$Size$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Magic"),
        C_CHAR.withName("MajorLinkerVersion"),
        C_CHAR.withName("MinorLinkerVersion"),
        C_LONG.withName("SizeOfCode"),
        C_LONG.withName("SizeOfInitializedData"),
        C_LONG.withName("SizeOfUninitializedData"),
        C_LONG.withName("AddressOfEntryPoint"),
        C_LONG.withName("BaseOfCode"),
        C_LONG.withName("BaseOfData"),
        C_LONG.withName("ImageBase"),
        C_LONG.withName("SectionAlignment"),
        C_LONG.withName("FileAlignment"),
        C_SHORT.withName("MajorOperatingSystemVersion"),
        C_SHORT.withName("MinorOperatingSystemVersion"),
        C_SHORT.withName("MajorImageVersion"),
        C_SHORT.withName("MinorImageVersion"),
        C_SHORT.withName("MajorSubsystemVersion"),
        C_SHORT.withName("MinorSubsystemVersion"),
        C_LONG.withName("Win32VersionValue"),
        C_LONG.withName("SizeOfImage"),
        C_LONG.withName("SizeOfHeaders"),
        C_LONG.withName("CheckSum"),
        C_SHORT.withName("Subsystem"),
        C_SHORT.withName("DllCharacteristics"),
        C_LONG.withName("SizeOfStackReserve"),
        C_LONG.withName("SizeOfStackCommit"),
        C_LONG.withName("SizeOfHeapReserve"),
        C_LONG.withName("SizeOfHeapCommit"),
        C_LONG.withName("LoaderFlags"),
        C_LONG.withName("NumberOfRvaAndSizes"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
    ).withName("_IMAGE_OPTIONAL_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$struct$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$Magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$Magic$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$Magic$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$Magic$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$Magic$VH() { return _IMAGE_OPTIONAL_HEADER$Magic$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MajorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfCode$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfCode$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfInitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfInitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfUninitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfUninitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfEntryPoint"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH() { return _IMAGE_OPTIONAL_HEADER$AddressOfEntryPoint$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$BaseOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfCode$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfCode$VH() { return _IMAGE_OPTIONAL_HEADER$BaseOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$BaseOfData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$BaseOfData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfData$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$BaseOfData$VH() { return _IMAGE_OPTIONAL_HEADER$BaseOfData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$ImageBase$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$ImageBase$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$ImageBase$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$ImageBase$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$ImageBase$VH() { return _IMAGE_OPTIONAL_HEADER$ImageBase$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SectionAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SectionAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SectionAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SectionAlignment$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionAlignment"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SectionAlignment$VH() { return _IMAGE_OPTIONAL_HEADER$SectionAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$FileAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$FileAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$FileAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$FileAlignment$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAlignment"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$FileAlignment$VH() { return _IMAGE_OPTIONAL_HEADER$FileAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorOperatingSystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorOperatingSystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorImageVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorImageVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorSubsystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MajorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorSubsystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER$MinorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$Win32VersionValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$Win32VersionValue$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$Win32VersionValue$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Win32VersionValue"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH() { return _IMAGE_OPTIONAL_HEADER$Win32VersionValue$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfImage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfImage$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfImage$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfImage$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfImage$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfImage$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeaders"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeaders$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$CheckSum$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$CheckSum$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$CheckSum$VH() { return _IMAGE_OPTIONAL_HEADER$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$Subsystem$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$Subsystem$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$Subsystem$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$Subsystem$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Subsystem"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$Subsystem$VH() { return _IMAGE_OPTIONAL_HEADER$Subsystem$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$DllCharacteristics$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$DllCharacteristics$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$DllCharacteristics$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DllCharacteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH() { return _IMAGE_OPTIONAL_HEADER$DllCharacteristics$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfStackReserve"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfStackCommit"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfStackCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeapReserve"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeapCommit"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH() { return _IMAGE_OPTIONAL_HEADER$SizeOfHeapCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$LoaderFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$LoaderFlags$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$LoaderFlags$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$LoaderFlags$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LoaderFlags"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$LoaderFlags$VH() { return _IMAGE_OPTIONAL_HEADER$LoaderFlags$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$LAYOUT() { return _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH_ = _IMAGE_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfRvaAndSizes"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH() { return _IMAGE_OPTIONAL_HEADER$NumberOfRvaAndSizes$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Magic"),
        C_CHAR.withName("MajorLinkerVersion"),
        C_CHAR.withName("MinorLinkerVersion"),
        C_LONG.withName("SizeOfCode"),
        C_LONG.withName("SizeOfInitializedData"),
        C_LONG.withName("SizeOfUninitializedData"),
        C_LONG.withName("AddressOfEntryPoint"),
        C_LONG.withName("BaseOfCode"),
        C_LONG.withName("BaseOfData"),
        C_LONG.withName("BaseOfBss"),
        C_LONG.withName("GprMask"),
        MemoryLayout.ofSequence(4, C_LONG).withName("CprMask"),
        C_LONG.withName("GpValue")
    ).withName("_IMAGE_ROM_OPTIONAL_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$Magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$Magic$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$Magic$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$Magic$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$Magic$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$Magic$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MajorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$MajorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$MinorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfCode$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfInitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfInitializedData$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfUninitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$SizeOfUninitializedData$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfEntryPoint"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$AddressOfEntryPoint$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfCode$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfData"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfData$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfBss"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$BaseOfBss$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GprMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GprMask$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$GprMask$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GprMask"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$GprMask$VH_; }

    static final MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GpValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_ROM_OPTIONAL_HEADER$GpValue$LAYOUT() { return _IMAGE_ROM_OPTIONAL_HEADER$GpValue$LAYOUT_; }

    static final VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH_ = _IMAGE_ROM_OPTIONAL_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("GpValue"));
    static final java.lang.invoke.VarHandle _IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH() { return _IMAGE_ROM_OPTIONAL_HEADER$GpValue$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Magic"),
        C_CHAR.withName("MajorLinkerVersion"),
        C_CHAR.withName("MinorLinkerVersion"),
        C_LONG.withName("SizeOfCode"),
        C_LONG.withName("SizeOfInitializedData"),
        C_LONG.withName("SizeOfUninitializedData"),
        C_LONG.withName("AddressOfEntryPoint"),
        C_LONG.withName("BaseOfCode"),
        C_LONGLONG.withName("ImageBase"),
        C_LONG.withName("SectionAlignment"),
        C_LONG.withName("FileAlignment"),
        C_SHORT.withName("MajorOperatingSystemVersion"),
        C_SHORT.withName("MinorOperatingSystemVersion"),
        C_SHORT.withName("MajorImageVersion"),
        C_SHORT.withName("MinorImageVersion"),
        C_SHORT.withName("MajorSubsystemVersion"),
        C_SHORT.withName("MinorSubsystemVersion"),
        C_LONG.withName("Win32VersionValue"),
        C_LONG.withName("SizeOfImage"),
        C_LONG.withName("SizeOfHeaders"),
        C_LONG.withName("CheckSum"),
        C_SHORT.withName("Subsystem"),
        C_SHORT.withName("DllCharacteristics"),
        C_LONGLONG.withName("SizeOfStackReserve"),
        C_LONGLONG.withName("SizeOfStackCommit"),
        C_LONGLONG.withName("SizeOfHeapReserve"),
        C_LONGLONG.withName("SizeOfHeapCommit"),
        C_LONG.withName("LoaderFlags"),
        C_LONG.withName("NumberOfRvaAndSizes"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("_IMAGE_DATA_DIRECTORY")).withName("DataDirectory")
    ).withName("_IMAGE_OPTIONAL_HEADER64");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$Magic$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$Magic$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$Magic$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$Magic$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Magic"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$Magic$VH() { return _IMAGE_OPTIONAL_HEADER64$Magic$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MajorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("MinorLinkerVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorLinkerVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfInitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfInitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfUninitializedData"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfUninitializedData$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("AddressOfEntryPoint"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH() { return _IMAGE_OPTIONAL_HEADER64$AddressOfEntryPoint$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$BaseOfCode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$BaseOfCode$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$BaseOfCode$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("BaseOfCode"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH() { return _IMAGE_OPTIONAL_HEADER64$BaseOfCode$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$ImageBase$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$ImageBase$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$ImageBase$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$ImageBase$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ImageBase"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$ImageBase$VH() { return _IMAGE_OPTIONAL_HEADER64$ImageBase$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SectionAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SectionAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SectionAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SectionAlignment"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH() { return _IMAGE_OPTIONAL_HEADER64$SectionAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$FileAlignment$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$FileAlignment$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$FileAlignment$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$FileAlignment$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FileAlignment"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$FileAlignment$VH() { return _IMAGE_OPTIONAL_HEADER64$FileAlignment$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorOperatingSystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorOperatingSystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorOperatingSystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorImageVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorImageVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorSubsystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MajorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorSubsystemVersion"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH() { return _IMAGE_OPTIONAL_HEADER64$MinorSubsystemVersion$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Win32VersionValue"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH() { return _IMAGE_OPTIONAL_HEADER64$Win32VersionValue$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfImage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfImage$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfImage$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfImage"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfImage$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfHeaders"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeaders$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$CheckSum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$CheckSum$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$CheckSum$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$CheckSum$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("CheckSum"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$CheckSum$VH() { return _IMAGE_OPTIONAL_HEADER64$CheckSum$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$Subsystem$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$Subsystem$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$Subsystem$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$Subsystem$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Subsystem"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$Subsystem$VH() { return _IMAGE_OPTIONAL_HEADER64$Subsystem$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("DllCharacteristics"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH() { return _IMAGE_OPTIONAL_HEADER64$DllCharacteristics$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfStackReserve"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfStackCommit"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfStackCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfHeapReserve"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapReserve$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SizeOfHeapCommit"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH() { return _IMAGE_OPTIONAL_HEADER64$SizeOfHeapCommit$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$LoaderFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$LoaderFlags$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$LoaderFlags$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LoaderFlags"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH() { return _IMAGE_OPTIONAL_HEADER64$LoaderFlags$VH_; }

    static final MemoryLayout _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$LAYOUT() { return _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$LAYOUT_; }

    static final VarHandle _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH_ = _IMAGE_OPTIONAL_HEADER64$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfRvaAndSizes"));
    static final java.lang.invoke.VarHandle _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH() { return _IMAGE_OPTIONAL_HEADER64$NumberOfRvaAndSizes$VH_; }

}

