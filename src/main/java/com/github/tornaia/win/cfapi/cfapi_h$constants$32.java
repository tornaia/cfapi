// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$32 extends cfapi_h$constants$31 {

    /* package-private */ cfapi_h$constants$32() {}
    static final FunctionDescriptor GetCharWidthFloatA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharWidthFloatA$FUNC() { return GetCharWidthFloatA$FUNC_; }

    static final MethodHandle GetCharWidthFloatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidthFloatA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidthFloatA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharWidthFloatA$MH() { return GetCharWidthFloatA$MH_; }

    static final FunctionDescriptor GetCharWidthFloatW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharWidthFloatW$FUNC() { return GetCharWidthFloatW$FUNC_; }

    static final MethodHandle GetCharWidthFloatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidthFloatW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidthFloatW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharWidthFloatW$MH() { return GetCharWidthFloatW$MH_; }

    static final FunctionDescriptor GetCharABCWidthsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsA$FUNC() { return GetCharABCWidthsA$FUNC_; }

    static final MethodHandle GetCharABCWidthsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharABCWidthsA$MH() { return GetCharABCWidthsA$MH_; }

    static final FunctionDescriptor GetCharABCWidthsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsW$FUNC() { return GetCharABCWidthsW$FUNC_; }

    static final MethodHandle GetCharABCWidthsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharABCWidthsW$MH() { return GetCharABCWidthsW$MH_; }

    static final FunctionDescriptor GetCharABCWidthsFloatA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsFloatA$FUNC() { return GetCharABCWidthsFloatA$FUNC_; }

    static final MethodHandle GetCharABCWidthsFloatA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsFloatA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsFloatA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharABCWidthsFloatA$MH() { return GetCharABCWidthsFloatA$MH_; }

    static final FunctionDescriptor GetCharABCWidthsFloatW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsFloatW$FUNC() { return GetCharABCWidthsFloatW$FUNC_; }

    static final MethodHandle GetCharABCWidthsFloatW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsFloatW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsFloatW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharABCWidthsFloatW$MH() { return GetCharABCWidthsFloatW$MH_; }

    static final FunctionDescriptor GetClipBox$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetClipBox$FUNC() { return GetClipBox$FUNC_; }

    static final MethodHandle GetClipBox$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipBox",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetClipBox$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetClipBox$MH() { return GetClipBox$MH_; }

    static final FunctionDescriptor GetClipRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetClipRgn$FUNC() { return GetClipRgn$FUNC_; }

    static final MethodHandle GetClipRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClipRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetClipRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetClipRgn$MH() { return GetClipRgn$MH_; }

    static final FunctionDescriptor GetMetaRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMetaRgn$FUNC() { return GetMetaRgn$FUNC_; }

    static final MethodHandle GetMetaRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMetaRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMetaRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMetaRgn$MH() { return GetMetaRgn$MH_; }

    static final FunctionDescriptor GetCurrentObject$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCurrentObject$FUNC() { return GetCurrentObject$FUNC_; }

    static final MethodHandle GetCurrentObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentObject",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetCurrentObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCurrentObject$MH() { return GetCurrentObject$MH_; }

    static final FunctionDescriptor GetCurrentPositionEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCurrentPositionEx$FUNC() { return GetCurrentPositionEx$FUNC_; }

    static final MethodHandle GetCurrentPositionEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentPositionEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentPositionEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCurrentPositionEx$MH() { return GetCurrentPositionEx$MH_; }

    static final FunctionDescriptor GetDeviceCaps$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDeviceCaps$FUNC() { return GetDeviceCaps$FUNC_; }

    static final MethodHandle GetDeviceCaps$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDeviceCaps",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetDeviceCaps$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDeviceCaps$MH() { return GetDeviceCaps$MH_; }

    static final FunctionDescriptor GetDIBits$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDIBits$FUNC() { return GetDIBits$FUNC_; }

    static final MethodHandle GetDIBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDIBits",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetDIBits$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDIBits$MH() { return GetDIBits$MH_; }

    static final FunctionDescriptor GetFontData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFontData$FUNC() { return GetFontData$FUNC_; }

    static final MethodHandle GetFontData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFontData",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        GetFontData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFontData$MH() { return GetFontData$MH_; }

    static final FunctionDescriptor GetGlyphOutlineA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetGlyphOutlineA$FUNC() { return GetGlyphOutlineA$FUNC_; }

    static final MethodHandle GetGlyphOutlineA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGlyphOutlineA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetGlyphOutlineA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetGlyphOutlineA$MH() { return GetGlyphOutlineA$MH_; }

    static final FunctionDescriptor GetGlyphOutlineW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetGlyphOutlineW$FUNC() { return GetGlyphOutlineW$FUNC_; }

    static final MethodHandle GetGlyphOutlineW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGlyphOutlineW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetGlyphOutlineW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetGlyphOutlineW$MH() { return GetGlyphOutlineW$MH_; }

    static final FunctionDescriptor GetGraphicsMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetGraphicsMode$FUNC() { return GetGraphicsMode$FUNC_; }

    static final MethodHandle GetGraphicsMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGraphicsMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetGraphicsMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetGraphicsMode$MH() { return GetGraphicsMode$MH_; }

    static final FunctionDescriptor GetMapMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMapMode$FUNC() { return GetMapMode$FUNC_; }

    static final MethodHandle GetMapMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMapMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMapMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMapMode$MH() { return GetMapMode$MH_; }

    static final FunctionDescriptor GetMetaFileBitsEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMetaFileBitsEx$FUNC() { return GetMetaFileBitsEx$FUNC_; }

    static final MethodHandle GetMetaFileBitsEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMetaFileBitsEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetMetaFileBitsEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMetaFileBitsEx$MH() { return GetMetaFileBitsEx$MH_; }

    static final FunctionDescriptor GetMetaFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMetaFileA$FUNC() { return GetMetaFileA$FUNC_; }

    static final MethodHandle GetMetaFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMetaFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetMetaFileA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMetaFileA$MH() { return GetMetaFileA$MH_; }

    static final FunctionDescriptor GetMetaFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMetaFileW$FUNC() { return GetMetaFileW$FUNC_; }

    static final MethodHandle GetMetaFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMetaFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetMetaFileW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMetaFileW$MH() { return GetMetaFileW$MH_; }

    static final FunctionDescriptor GetNearestColor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetNearestColor$FUNC() { return GetNearestColor$FUNC_; }

    static final MethodHandle GetNearestColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNearestColor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNearestColor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetNearestColor$MH() { return GetNearestColor$MH_; }

    static final FunctionDescriptor GetNearestPaletteIndex$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetNearestPaletteIndex$FUNC() { return GetNearestPaletteIndex$FUNC_; }

    static final MethodHandle GetNearestPaletteIndex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNearestPaletteIndex",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetNearestPaletteIndex$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetNearestPaletteIndex$MH() { return GetNearestPaletteIndex$MH_; }

    static final FunctionDescriptor GetObjectType$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetObjectType$FUNC() { return GetObjectType$FUNC_; }

    static final MethodHandle GetObjectType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetObjectType",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetObjectType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetObjectType$MH() { return GetObjectType$MH_; }

    static final FunctionDescriptor GetOutlineTextMetricsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetOutlineTextMetricsA$FUNC() { return GetOutlineTextMetricsA$FUNC_; }

    static final MethodHandle GetOutlineTextMetricsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOutlineTextMetricsA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetOutlineTextMetricsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetOutlineTextMetricsA$MH() { return GetOutlineTextMetricsA$MH_; }

    static final FunctionDescriptor GetOutlineTextMetricsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetOutlineTextMetricsW$FUNC() { return GetOutlineTextMetricsW$FUNC_; }

    static final MethodHandle GetOutlineTextMetricsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetOutlineTextMetricsW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetOutlineTextMetricsW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetOutlineTextMetricsW$MH() { return GetOutlineTextMetricsW$MH_; }

    static final FunctionDescriptor GetPaletteEntries$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPaletteEntries$FUNC() { return GetPaletteEntries$FUNC_; }

    static final MethodHandle GetPaletteEntries$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPaletteEntries",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetPaletteEntries$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPaletteEntries$MH() { return GetPaletteEntries$MH_; }

    static final FunctionDescriptor GetPixel$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPixel$FUNC() { return GetPixel$FUNC_; }

    static final MethodHandle GetPixel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPixel",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetPixel$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPixel$MH() { return GetPixel$MH_; }

    static final FunctionDescriptor GetPixelFormat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPixelFormat$FUNC() { return GetPixelFormat$FUNC_; }

    static final MethodHandle GetPixelFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPixelFormat",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPixelFormat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPixelFormat$MH() { return GetPixelFormat$MH_; }

    static final FunctionDescriptor GetPolyFillMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPolyFillMode$FUNC() { return GetPolyFillMode$FUNC_; }

    static final MethodHandle GetPolyFillMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPolyFillMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPolyFillMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPolyFillMode$MH() { return GetPolyFillMode$MH_; }

    static final FunctionDescriptor GetRasterizerCaps$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetRasterizerCaps$FUNC() { return GetRasterizerCaps$FUNC_; }

    static final MethodHandle GetRasterizerCaps$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRasterizerCaps",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetRasterizerCaps$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetRasterizerCaps$MH() { return GetRasterizerCaps$MH_; }

    static final FunctionDescriptor GetRandomRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetRandomRgn$FUNC() { return GetRandomRgn$FUNC_; }

    static final MethodHandle GetRandomRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRandomRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetRandomRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetRandomRgn$MH() { return GetRandomRgn$MH_; }

    static final FunctionDescriptor GetRegionData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetRegionData$FUNC() { return GetRegionData$FUNC_; }

    static final MethodHandle GetRegionData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRegionData",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetRegionData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetRegionData$MH() { return GetRegionData$MH_; }

    static final FunctionDescriptor GetRgnBox$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetRgnBox$FUNC() { return GetRgnBox$FUNC_; }

    static final MethodHandle GetRgnBox$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRgnBox",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetRgnBox$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetRgnBox$MH() { return GetRgnBox$MH_; }

    static final FunctionDescriptor GetStockObject$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetStockObject$FUNC() { return GetStockObject$FUNC_; }

    static final MethodHandle GetStockObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStockObject",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        GetStockObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetStockObject$MH() { return GetStockObject$MH_; }

    static final FunctionDescriptor GetStretchBltMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetStretchBltMode$FUNC() { return GetStretchBltMode$FUNC_; }

    static final MethodHandle GetStretchBltMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetStretchBltMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetStretchBltMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetStretchBltMode$MH() { return GetStretchBltMode$MH_; }

    static final FunctionDescriptor GetSystemPaletteEntries$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetSystemPaletteEntries$FUNC() { return GetSystemPaletteEntries$FUNC_; }

    static final MethodHandle GetSystemPaletteEntries$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemPaletteEntries",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetSystemPaletteEntries$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetSystemPaletteEntries$MH() { return GetSystemPaletteEntries$MH_; }

    static final FunctionDescriptor GetSystemPaletteUse$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetSystemPaletteUse$FUNC() { return GetSystemPaletteUse$FUNC_; }

    static final MethodHandle GetSystemPaletteUse$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemPaletteUse",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemPaletteUse$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetSystemPaletteUse$MH() { return GetSystemPaletteUse$MH_; }

    static final FunctionDescriptor GetTextCharacterExtra$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextCharacterExtra$FUNC() { return GetTextCharacterExtra$FUNC_; }

    static final MethodHandle GetTextCharacterExtra$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextCharacterExtra",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextCharacterExtra$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextCharacterExtra$MH() { return GetTextCharacterExtra$MH_; }

    static final FunctionDescriptor GetTextAlign$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextAlign$FUNC() { return GetTextAlign$FUNC_; }

    static final MethodHandle GetTextAlign$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextAlign",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextAlign$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextAlign$MH() { return GetTextAlign$MH_; }

    static final FunctionDescriptor GetTextColor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextColor$FUNC() { return GetTextColor$FUNC_; }

    static final MethodHandle GetTextColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextColor",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextColor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextColor$MH() { return GetTextColor$MH_; }

    static final FunctionDescriptor GetTextExtentPointA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextExtentPointA$FUNC() { return GetTextExtentPointA$FUNC_; }

    static final MethodHandle GetTextExtentPointA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPointA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPointA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextExtentPointA$MH() { return GetTextExtentPointA$MH_; }

    static final FunctionDescriptor GetTextExtentPointW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextExtentPointW$FUNC() { return GetTextExtentPointW$FUNC_; }

    static final MethodHandle GetTextExtentPointW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPointW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextExtentPointW$MH() { return GetTextExtentPointW$MH_; }

    static final FunctionDescriptor GetTextExtentPoint32A$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextExtentPoint32A$FUNC() { return GetTextExtentPoint32A$FUNC_; }

    static final MethodHandle GetTextExtentPoint32A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPoint32A",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPoint32A$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextExtentPoint32A$MH() { return GetTextExtentPoint32A$MH_; }

    static final FunctionDescriptor GetTextExtentPoint32W$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextExtentPoint32W$FUNC() { return GetTextExtentPoint32W$FUNC_; }

    static final MethodHandle GetTextExtentPoint32W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPoint32W",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPoint32W$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextExtentPoint32W$MH() { return GetTextExtentPoint32W$MH_; }

    static final FunctionDescriptor GetTextExtentExPointA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextExtentExPointA$FUNC() { return GetTextExtentExPointA$FUNC_; }

    static final MethodHandle GetTextExtentExPointA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentExPointA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentExPointA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextExtentExPointA$MH() { return GetTextExtentExPointA$MH_; }

    static final FunctionDescriptor GetTextExtentExPointW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextExtentExPointW$FUNC() { return GetTextExtentExPointW$FUNC_; }

    static final MethodHandle GetTextExtentExPointW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentExPointW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentExPointW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextExtentExPointW$MH() { return GetTextExtentExPointW$MH_; }

    static final FunctionDescriptor GetTextCharset$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextCharset$FUNC() { return GetTextCharset$FUNC_; }

    static final MethodHandle GetTextCharset$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextCharset",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextCharset$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextCharset$MH() { return GetTextCharset$MH_; }

    static final FunctionDescriptor GetTextCharsetInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextCharsetInfo$FUNC() { return GetTextCharsetInfo$FUNC_; }

    static final MethodHandle GetTextCharsetInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextCharsetInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetTextCharsetInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextCharsetInfo$MH() { return GetTextCharsetInfo$MH_; }

    static final FunctionDescriptor TranslateCharsetInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor TranslateCharsetInfo$FUNC() { return TranslateCharsetInfo$FUNC_; }

    static final MethodHandle TranslateCharsetInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TranslateCharsetInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        TranslateCharsetInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TranslateCharsetInfo$MH() { return TranslateCharsetInfo$MH_; }

    static final FunctionDescriptor GetFontLanguageInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFontLanguageInfo$FUNC() { return GetFontLanguageInfo$FUNC_; }

    static final MethodHandle GetFontLanguageInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFontLanguageInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFontLanguageInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFontLanguageInfo$MH() { return GetFontLanguageInfo$MH_; }

    static final FunctionDescriptor GetCharacterPlacementA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharacterPlacementA$FUNC() { return GetCharacterPlacementA$FUNC_; }

    static final MethodHandle GetCharacterPlacementA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharacterPlacementA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        GetCharacterPlacementA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharacterPlacementA$MH() { return GetCharacterPlacementA$MH_; }

    static final FunctionDescriptor GetCharacterPlacementW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharacterPlacementW$FUNC() { return GetCharacterPlacementW$FUNC_; }

    static final MethodHandle GetCharacterPlacementW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharacterPlacementW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        GetCharacterPlacementW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharacterPlacementW$MH() { return GetCharacterPlacementW$MH_; }

    static final MemoryLayout tagWCRANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("wcLow"),
        C_SHORT.withName("cGlyphs")
    ).withName("tagWCRANGE");
    static final jdk.incubator.foreign.MemoryLayout tagWCRANGE$struct$LAYOUT() { return tagWCRANGE$struct$LAYOUT_; }

    static final MemoryLayout tagWCRANGE$wcLow$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagWCRANGE$wcLow$LAYOUT() { return tagWCRANGE$wcLow$LAYOUT_; }

    static final VarHandle tagWCRANGE$wcLow$VH_ = tagWCRANGE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wcLow"));
    static final java.lang.invoke.VarHandle tagWCRANGE$wcLow$VH() { return tagWCRANGE$wcLow$VH_; }

    static final MemoryLayout tagWCRANGE$cGlyphs$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagWCRANGE$cGlyphs$LAYOUT() { return tagWCRANGE$cGlyphs$LAYOUT_; }

    static final VarHandle tagWCRANGE$cGlyphs$VH_ = tagWCRANGE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("cGlyphs"));
    static final java.lang.invoke.VarHandle tagWCRANGE$cGlyphs$VH() { return tagWCRANGE$cGlyphs$VH_; }

    static final MemoryLayout tagGLYPHSET$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbThis"),
        C_LONG.withName("flAccel"),
        C_LONG.withName("cGlyphsSupported"),
        C_LONG.withName("cRanges"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_SHORT.withName("wcLow"),
            C_SHORT.withName("cGlyphs")
        ).withName("tagWCRANGE")).withName("ranges")
    ).withName("tagGLYPHSET");
    static final jdk.incubator.foreign.MemoryLayout tagGLYPHSET$struct$LAYOUT() { return tagGLYPHSET$struct$LAYOUT_; }

    static final MemoryLayout tagGLYPHSET$cbThis$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagGLYPHSET$cbThis$LAYOUT() { return tagGLYPHSET$cbThis$LAYOUT_; }

    static final VarHandle tagGLYPHSET$cbThis$VH_ = tagGLYPHSET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbThis"));
    static final java.lang.invoke.VarHandle tagGLYPHSET$cbThis$VH() { return tagGLYPHSET$cbThis$VH_; }

    static final MemoryLayout tagGLYPHSET$flAccel$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagGLYPHSET$flAccel$LAYOUT() { return tagGLYPHSET$flAccel$LAYOUT_; }

    static final VarHandle tagGLYPHSET$flAccel$VH_ = tagGLYPHSET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flAccel"));
    static final java.lang.invoke.VarHandle tagGLYPHSET$flAccel$VH() { return tagGLYPHSET$flAccel$VH_; }

    static final MemoryLayout tagGLYPHSET$cGlyphsSupported$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagGLYPHSET$cGlyphsSupported$LAYOUT() { return tagGLYPHSET$cGlyphsSupported$LAYOUT_; }

    static final VarHandle tagGLYPHSET$cGlyphsSupported$VH_ = tagGLYPHSET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cGlyphsSupported"));
    static final java.lang.invoke.VarHandle tagGLYPHSET$cGlyphsSupported$VH() { return tagGLYPHSET$cGlyphsSupported$VH_; }

    static final MemoryLayout tagGLYPHSET$cRanges$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagGLYPHSET$cRanges$LAYOUT() { return tagGLYPHSET$cRanges$LAYOUT_; }

    static final VarHandle tagGLYPHSET$cRanges$VH_ = tagGLYPHSET$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cRanges"));
    static final java.lang.invoke.VarHandle tagGLYPHSET$cRanges$VH() { return tagGLYPHSET$cRanges$VH_; }

    static final FunctionDescriptor GetFontUnicodeRanges$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFontUnicodeRanges$FUNC() { return GetFontUnicodeRanges$FUNC_; }

    static final MethodHandle GetFontUnicodeRanges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFontUnicodeRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFontUnicodeRanges$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFontUnicodeRanges$MH() { return GetFontUnicodeRanges$MH_; }

    static final FunctionDescriptor GetGlyphIndicesA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetGlyphIndicesA$FUNC() { return GetGlyphIndicesA$FUNC_; }

    static final MethodHandle GetGlyphIndicesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGlyphIndicesA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetGlyphIndicesA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetGlyphIndicesA$MH() { return GetGlyphIndicesA$MH_; }

    static final FunctionDescriptor GetGlyphIndicesW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetGlyphIndicesW$FUNC() { return GetGlyphIndicesW$FUNC_; }

    static final MethodHandle GetGlyphIndicesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGlyphIndicesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetGlyphIndicesW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetGlyphIndicesW$MH() { return GetGlyphIndicesW$MH_; }

    static final FunctionDescriptor GetTextExtentPointI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextExtentPointI$FUNC() { return GetTextExtentPointI$FUNC_; }

    static final MethodHandle GetTextExtentPointI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentPointI",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentPointI$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextExtentPointI$MH() { return GetTextExtentPointI$MH_; }

    static final FunctionDescriptor GetTextExtentExPointI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextExtentExPointI$FUNC() { return GetTextExtentExPointI$FUNC_; }

    static final MethodHandle GetTextExtentExPointI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextExtentExPointI",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextExtentExPointI$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextExtentExPointI$MH() { return GetTextExtentExPointI$MH_; }

    static final FunctionDescriptor GetCharWidthI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharWidthI$FUNC() { return GetCharWidthI$FUNC_; }

    static final MethodHandle GetCharWidthI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharWidthI",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCharWidthI$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharWidthI$MH() { return GetCharWidthI$MH_; }

    static final FunctionDescriptor GetCharABCWidthsI$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCharABCWidthsI$FUNC() { return GetCharABCWidthsI$FUNC_; }

    static final MethodHandle GetCharABCWidthsI$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCharABCWidthsI",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCharABCWidthsI$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCharABCWidthsI$MH() { return GetCharABCWidthsI$MH_; }

    static final MemoryLayout tagDESIGNVECTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dvReserved"),
        C_LONG.withName("dvNumAxes"),
        MemoryLayout.ofSequence(16, C_LONG).withName("dvValues")
    ).withName("tagDESIGNVECTOR");
    static final jdk.incubator.foreign.MemoryLayout tagDESIGNVECTOR$struct$LAYOUT() { return tagDESIGNVECTOR$struct$LAYOUT_; }

    static final MemoryLayout tagDESIGNVECTOR$dvReserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagDESIGNVECTOR$dvReserved$LAYOUT() { return tagDESIGNVECTOR$dvReserved$LAYOUT_; }

    static final VarHandle tagDESIGNVECTOR$dvReserved$VH_ = tagDESIGNVECTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dvReserved"));
    static final java.lang.invoke.VarHandle tagDESIGNVECTOR$dvReserved$VH() { return tagDESIGNVECTOR$dvReserved$VH_; }

    static final MemoryLayout tagDESIGNVECTOR$dvNumAxes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagDESIGNVECTOR$dvNumAxes$LAYOUT() { return tagDESIGNVECTOR$dvNumAxes$LAYOUT_; }

    static final VarHandle tagDESIGNVECTOR$dvNumAxes$VH_ = tagDESIGNVECTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dvNumAxes"));
    static final java.lang.invoke.VarHandle tagDESIGNVECTOR$dvNumAxes$VH() { return tagDESIGNVECTOR$dvNumAxes$VH_; }

    static final FunctionDescriptor AddFontResourceExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AddFontResourceExA$FUNC() { return AddFontResourceExA$FUNC_; }

    static final MethodHandle AddFontResourceExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddFontResourceExA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        AddFontResourceExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AddFontResourceExA$MH() { return AddFontResourceExA$MH_; }

    static final FunctionDescriptor AddFontResourceExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AddFontResourceExW$FUNC() { return AddFontResourceExW$FUNC_; }

    static final MethodHandle AddFontResourceExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddFontResourceExW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        AddFontResourceExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AddFontResourceExW$MH() { return AddFontResourceExW$MH_; }

    static final FunctionDescriptor RemoveFontResourceExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RemoveFontResourceExA$FUNC() { return RemoveFontResourceExA$FUNC_; }

    static final MethodHandle RemoveFontResourceExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveFontResourceExA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RemoveFontResourceExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RemoveFontResourceExA$MH() { return RemoveFontResourceExA$MH_; }

    static final FunctionDescriptor RemoveFontResourceExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RemoveFontResourceExW$FUNC() { return RemoveFontResourceExW$FUNC_; }

    static final MethodHandle RemoveFontResourceExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveFontResourceExW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RemoveFontResourceExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RemoveFontResourceExW$MH() { return RemoveFontResourceExW$MH_; }

    static final FunctionDescriptor AddFontMemResourceEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AddFontMemResourceEx$FUNC() { return AddFontMemResourceEx$FUNC_; }

    static final MethodHandle AddFontMemResourceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddFontMemResourceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        AddFontMemResourceEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AddFontMemResourceEx$MH() { return AddFontMemResourceEx$MH_; }

    static final FunctionDescriptor RemoveFontMemResourceEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RemoveFontMemResourceEx$FUNC() { return RemoveFontMemResourceEx$FUNC_; }

    static final MethodHandle RemoveFontMemResourceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveFontMemResourceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveFontMemResourceEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RemoveFontMemResourceEx$MH() { return RemoveFontMemResourceEx$MH_; }

    static final MemoryLayout tagAXISINFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("axMinValue"),
        C_LONG.withName("axMaxValue"),
        MemoryLayout.ofSequence(16, C_CHAR).withName("axAxisName")
    ).withName("tagAXISINFOA");
    static final jdk.incubator.foreign.MemoryLayout tagAXISINFOA$struct$LAYOUT() { return tagAXISINFOA$struct$LAYOUT_; }

    static final MemoryLayout tagAXISINFOA$axMinValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagAXISINFOA$axMinValue$LAYOUT() { return tagAXISINFOA$axMinValue$LAYOUT_; }

    static final VarHandle tagAXISINFOA$axMinValue$VH_ = tagAXISINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axMinValue"));
    static final java.lang.invoke.VarHandle tagAXISINFOA$axMinValue$VH() { return tagAXISINFOA$axMinValue$VH_; }

    static final MemoryLayout tagAXISINFOA$axMaxValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagAXISINFOA$axMaxValue$LAYOUT() { return tagAXISINFOA$axMaxValue$LAYOUT_; }

    static final VarHandle tagAXISINFOA$axMaxValue$VH_ = tagAXISINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axMaxValue"));
    static final java.lang.invoke.VarHandle tagAXISINFOA$axMaxValue$VH() { return tagAXISINFOA$axMaxValue$VH_; }

    static final MemoryLayout tagAXISINFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("axMinValue"),
        C_LONG.withName("axMaxValue"),
        MemoryLayout.ofSequence(16, C_SHORT).withName("axAxisName")
    ).withName("tagAXISINFOW");
    static final jdk.incubator.foreign.MemoryLayout tagAXISINFOW$struct$LAYOUT() { return tagAXISINFOW$struct$LAYOUT_; }

    static final MemoryLayout tagAXISINFOW$axMinValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagAXISINFOW$axMinValue$LAYOUT() { return tagAXISINFOW$axMinValue$LAYOUT_; }

    static final VarHandle tagAXISINFOW$axMinValue$VH_ = tagAXISINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axMinValue"));
    static final java.lang.invoke.VarHandle tagAXISINFOW$axMinValue$VH() { return tagAXISINFOW$axMinValue$VH_; }

    static final MemoryLayout tagAXISINFOW$axMaxValue$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagAXISINFOW$axMaxValue$LAYOUT() { return tagAXISINFOW$axMaxValue$LAYOUT_; }

    static final VarHandle tagAXISINFOW$axMaxValue$VH_ = tagAXISINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axMaxValue"));
    static final java.lang.invoke.VarHandle tagAXISINFOW$axMaxValue$VH() { return tagAXISINFOW$axMaxValue$VH_; }

    static final MemoryLayout tagAXESLISTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("axlReserved"),
        C_LONG.withName("axlNumAxes"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONG.withName("axMinValue"),
            C_LONG.withName("axMaxValue"),
            MemoryLayout.ofSequence(16, C_CHAR).withName("axAxisName")
        ).withName("tagAXISINFOA")).withName("axlAxisInfo")
    ).withName("tagAXESLISTA");
    static final jdk.incubator.foreign.MemoryLayout tagAXESLISTA$struct$LAYOUT() { return tagAXESLISTA$struct$LAYOUT_; }

    static final MemoryLayout tagAXESLISTA$axlReserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagAXESLISTA$axlReserved$LAYOUT() { return tagAXESLISTA$axlReserved$LAYOUT_; }

    static final VarHandle tagAXESLISTA$axlReserved$VH_ = tagAXESLISTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axlReserved"));
    static final java.lang.invoke.VarHandle tagAXESLISTA$axlReserved$VH() { return tagAXESLISTA$axlReserved$VH_; }

    static final MemoryLayout tagAXESLISTA$axlNumAxes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagAXESLISTA$axlNumAxes$LAYOUT() { return tagAXESLISTA$axlNumAxes$LAYOUT_; }

    static final VarHandle tagAXESLISTA$axlNumAxes$VH_ = tagAXESLISTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axlNumAxes"));
    static final java.lang.invoke.VarHandle tagAXESLISTA$axlNumAxes$VH() { return tagAXESLISTA$axlNumAxes$VH_; }

    static final MemoryLayout tagAXESLISTW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("axlReserved"),
        C_LONG.withName("axlNumAxes"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_LONG.withName("axMinValue"),
            C_LONG.withName("axMaxValue"),
            MemoryLayout.ofSequence(16, C_SHORT).withName("axAxisName")
        ).withName("tagAXISINFOW")).withName("axlAxisInfo")
    ).withName("tagAXESLISTW");
    static final jdk.incubator.foreign.MemoryLayout tagAXESLISTW$struct$LAYOUT() { return tagAXESLISTW$struct$LAYOUT_; }

    static final MemoryLayout tagAXESLISTW$axlReserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagAXESLISTW$axlReserved$LAYOUT() { return tagAXESLISTW$axlReserved$LAYOUT_; }

    static final VarHandle tagAXESLISTW$axlReserved$VH_ = tagAXESLISTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axlReserved"));
    static final java.lang.invoke.VarHandle tagAXESLISTW$axlReserved$VH() { return tagAXESLISTW$axlReserved$VH_; }

    static final MemoryLayout tagAXESLISTW$axlNumAxes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagAXESLISTW$axlNumAxes$LAYOUT() { return tagAXESLISTW$axlNumAxes$LAYOUT_; }

    static final VarHandle tagAXESLISTW$axlNumAxes$VH_ = tagAXESLISTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("axlNumAxes"));
    static final java.lang.invoke.VarHandle tagAXESLISTW$axlNumAxes$VH() { return tagAXESLISTW$axlNumAxes$VH_; }

    static final MemoryLayout tagENUMLOGFONTEXDVA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("lfHeight"),
                C_LONG.withName("lfWidth"),
                C_LONG.withName("lfEscapement"),
                C_LONG.withName("lfOrientation"),
                C_LONG.withName("lfWeight"),
                C_CHAR.withName("lfItalic"),
                C_CHAR.withName("lfUnderline"),
                C_CHAR.withName("lfStrikeOut"),
                C_CHAR.withName("lfCharSet"),
                C_CHAR.withName("lfOutPrecision"),
                C_CHAR.withName("lfClipPrecision"),
                C_CHAR.withName("lfQuality"),
                C_CHAR.withName("lfPitchAndFamily"),
                MemoryLayout.ofSequence(32, C_CHAR).withName("lfFaceName")
            ).withName("elfLogFont"),
            MemoryLayout.ofSequence(64, C_CHAR).withName("elfFullName"),
            MemoryLayout.ofSequence(32, C_CHAR).withName("elfStyle"),
            MemoryLayout.ofSequence(32, C_CHAR).withName("elfScript")
        ).withName("elfEnumLogfontEx"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dvReserved"),
            C_LONG.withName("dvNumAxes"),
            MemoryLayout.ofSequence(16, C_LONG).withName("dvValues")
        ).withName("elfDesignVector")
    ).withName("tagENUMLOGFONTEXDVA");
    static final jdk.incubator.foreign.MemoryLayout tagENUMLOGFONTEXDVA$struct$LAYOUT() { return tagENUMLOGFONTEXDVA$struct$LAYOUT_; }

    static final MemoryLayout tagENUMLOGFONTEXDVW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("lfHeight"),
                C_LONG.withName("lfWidth"),
                C_LONG.withName("lfEscapement"),
                C_LONG.withName("lfOrientation"),
                C_LONG.withName("lfWeight"),
                C_CHAR.withName("lfItalic"),
                C_CHAR.withName("lfUnderline"),
                C_CHAR.withName("lfStrikeOut"),
                C_CHAR.withName("lfCharSet"),
                C_CHAR.withName("lfOutPrecision"),
                C_CHAR.withName("lfClipPrecision"),
                C_CHAR.withName("lfQuality"),
                C_CHAR.withName("lfPitchAndFamily"),
                MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
            ).withName("elfLogFont"),
            MemoryLayout.ofSequence(64, C_SHORT).withName("elfFullName"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("elfStyle"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("elfScript")
        ).withName("elfEnumLogfontEx"),
        MemoryLayout.ofStruct(
            C_LONG.withName("dvReserved"),
            C_LONG.withName("dvNumAxes"),
            MemoryLayout.ofSequence(16, C_LONG).withName("dvValues")
        ).withName("elfDesignVector")
    ).withName("tagENUMLOGFONTEXDVW");
    static final jdk.incubator.foreign.MemoryLayout tagENUMLOGFONTEXDVW$struct$LAYOUT() { return tagENUMLOGFONTEXDVW$struct$LAYOUT_; }

    static final FunctionDescriptor CreateFontIndirectExA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateFontIndirectExA$FUNC() { return CreateFontIndirectExA$FUNC_; }

    static final MethodHandle CreateFontIndirectExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFontIndirectExA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFontIndirectExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateFontIndirectExA$MH() { return CreateFontIndirectExA$MH_; }

    static final FunctionDescriptor CreateFontIndirectExW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateFontIndirectExW$FUNC() { return CreateFontIndirectExW$FUNC_; }

    static final MethodHandle CreateFontIndirectExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFontIndirectExW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateFontIndirectExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateFontIndirectExW$MH() { return CreateFontIndirectExW$MH_; }

    static final MemoryLayout tagENUMTEXTMETRICA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("tmHeight"),
                C_LONG.withName("tmAscent"),
                C_LONG.withName("tmDescent"),
                C_LONG.withName("tmInternalLeading"),
                C_LONG.withName("tmExternalLeading"),
                C_LONG.withName("tmAveCharWidth"),
                C_LONG.withName("tmMaxCharWidth"),
                C_LONG.withName("tmWeight"),
                C_LONG.withName("tmOverhang"),
                C_LONG.withName("tmDigitizedAspectX"),
                C_LONG.withName("tmDigitizedAspectY"),
                C_CHAR.withName("tmFirstChar"),
                C_CHAR.withName("tmLastChar"),
                C_CHAR.withName("tmDefaultChar"),
                C_CHAR.withName("tmBreakChar"),
                C_CHAR.withName("tmItalic"),
                C_CHAR.withName("tmUnderlined"),
                C_CHAR.withName("tmStruckOut"),
                C_CHAR.withName("tmPitchAndFamily"),
                C_CHAR.withName("tmCharSet"),
                MemoryLayout.ofPaddingBits(24),
                C_LONG.withName("ntmFlags"),
                C_INT.withName("ntmSizeEM"),
                C_INT.withName("ntmCellHeight"),
                C_INT.withName("ntmAvgWidth")
            ).withName("ntmTm"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(4, C_LONG).withName("fsUsb"),
                MemoryLayout.ofSequence(2, C_LONG).withName("fsCsb")
            ).withName("ntmFontSig")
        ).withName("etmNewTextMetricEx"),
        MemoryLayout.ofStruct(
            C_LONG.withName("axlReserved"),
            C_LONG.withName("axlNumAxes"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_LONG.withName("axMinValue"),
                C_LONG.withName("axMaxValue"),
                MemoryLayout.ofSequence(16, C_CHAR).withName("axAxisName")
            ).withName("tagAXISINFOA")).withName("axlAxisInfo")
        ).withName("etmAxesList")
    ).withName("tagENUMTEXTMETRICA");
    static final jdk.incubator.foreign.MemoryLayout tagENUMTEXTMETRICA$struct$LAYOUT() { return tagENUMTEXTMETRICA$struct$LAYOUT_; }

    static final MemoryLayout tagENUMTEXTMETRICW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("tmHeight"),
                C_LONG.withName("tmAscent"),
                C_LONG.withName("tmDescent"),
                C_LONG.withName("tmInternalLeading"),
                C_LONG.withName("tmExternalLeading"),
                C_LONG.withName("tmAveCharWidth"),
                C_LONG.withName("tmMaxCharWidth"),
                C_LONG.withName("tmWeight"),
                C_LONG.withName("tmOverhang"),
                C_LONG.withName("tmDigitizedAspectX"),
                C_LONG.withName("tmDigitizedAspectY"),
                C_SHORT.withName("tmFirstChar"),
                C_SHORT.withName("tmLastChar"),
                C_SHORT.withName("tmDefaultChar"),
                C_SHORT.withName("tmBreakChar"),
                C_CHAR.withName("tmItalic"),
                C_CHAR.withName("tmUnderlined"),
                C_CHAR.withName("tmStruckOut"),
                C_CHAR.withName("tmPitchAndFamily"),
                C_CHAR.withName("tmCharSet"),
                MemoryLayout.ofPaddingBits(24),
                C_LONG.withName("ntmFlags"),
                C_INT.withName("ntmSizeEM"),
                C_INT.withName("ntmCellHeight"),
                C_INT.withName("ntmAvgWidth")
            ).withName("ntmTm"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofSequence(4, C_LONG).withName("fsUsb"),
                MemoryLayout.ofSequence(2, C_LONG).withName("fsCsb")
            ).withName("ntmFontSig")
        ).withName("etmNewTextMetricEx"),
        MemoryLayout.ofStruct(
            C_LONG.withName("axlReserved"),
            C_LONG.withName("axlNumAxes"),
            MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
                C_LONG.withName("axMinValue"),
                C_LONG.withName("axMaxValue"),
                MemoryLayout.ofSequence(16, C_SHORT).withName("axAxisName")
            ).withName("tagAXISINFOW")).withName("axlAxisInfo")
        ).withName("etmAxesList")
    ).withName("tagENUMTEXTMETRICW");
    static final jdk.incubator.foreign.MemoryLayout tagENUMTEXTMETRICW$struct$LAYOUT() { return tagENUMTEXTMETRICW$struct$LAYOUT_; }

    static final FunctionDescriptor GetViewportExtEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetViewportExtEx$FUNC() { return GetViewportExtEx$FUNC_; }

    static final MethodHandle GetViewportExtEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetViewportExtEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetViewportExtEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetViewportExtEx$MH() { return GetViewportExtEx$MH_; }

    static final FunctionDescriptor GetViewportOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetViewportOrgEx$FUNC() { return GetViewportOrgEx$FUNC_; }

    static final MethodHandle GetViewportOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetViewportOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetViewportOrgEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetViewportOrgEx$MH() { return GetViewportOrgEx$MH_; }

    static final FunctionDescriptor GetWindowExtEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowExtEx$FUNC() { return GetWindowExtEx$FUNC_; }

    static final MethodHandle GetWindowExtEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowExtEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowExtEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowExtEx$MH() { return GetWindowExtEx$MH_; }

    static final FunctionDescriptor GetWindowOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowOrgEx$FUNC() { return GetWindowOrgEx$FUNC_; }

    static final MethodHandle GetWindowOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowOrgEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowOrgEx$MH() { return GetWindowOrgEx$MH_; }

    static final FunctionDescriptor IntersectClipRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor IntersectClipRect$FUNC() { return IntersectClipRect$FUNC_; }

    static final MethodHandle IntersectClipRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IntersectClipRect",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        IntersectClipRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IntersectClipRect$MH() { return IntersectClipRect$MH_; }

    static final FunctionDescriptor InvertRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor InvertRgn$FUNC() { return InvertRgn$FUNC_; }

    static final MethodHandle InvertRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InvertRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        InvertRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InvertRgn$MH() { return InvertRgn$MH_; }

    static final FunctionDescriptor LineDDA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor LineDDA$FUNC() { return LineDDA$FUNC_; }

    static final MethodHandle LineDDA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LineDDA",
        "(IIIILjdk/incubator/foreign/MemoryAddress;J)I",
        LineDDA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LineDDA$MH() { return LineDDA$MH_; }

    static final FunctionDescriptor LineDDA$lpProc$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor LineDDA$lpProc$FUNC() { return LineDDA$lpProc$FUNC_; }

    static final FunctionDescriptor LineTo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor LineTo$FUNC() { return LineTo$FUNC_; }

    static final MethodHandle LineTo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LineTo",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        LineTo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LineTo$MH() { return LineTo$MH_; }

    static final FunctionDescriptor MaskBlt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor MaskBlt$FUNC() { return MaskBlt$FUNC_; }

    static final MethodHandle MaskBlt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MaskBlt",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;III)I",
        MaskBlt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MaskBlt$MH() { return MaskBlt$MH_; }

    static final FunctionDescriptor PlgBlt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PlgBlt$FUNC() { return PlgBlt$FUNC_; }

    static final MethodHandle PlgBlt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PlgBlt",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;II)I",
        PlgBlt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PlgBlt$MH() { return PlgBlt$MH_; }

    static final FunctionDescriptor OffsetClipRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OffsetClipRgn$FUNC() { return OffsetClipRgn$FUNC_; }

    static final MethodHandle OffsetClipRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OffsetClipRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        OffsetClipRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OffsetClipRgn$MH() { return OffsetClipRgn$MH_; }

    static final FunctionDescriptor OffsetRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor OffsetRgn$FUNC() { return OffsetRgn$FUNC_; }

    static final MethodHandle OffsetRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OffsetRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        OffsetRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OffsetRgn$MH() { return OffsetRgn$MH_; }

    static final FunctionDescriptor PatBlt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor PatBlt$FUNC() { return PatBlt$FUNC_; }

    static final MethodHandle PatBlt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PatBlt",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIII)I",
        PatBlt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PatBlt$MH() { return PatBlt$MH_; }

    static final FunctionDescriptor Pie$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor Pie$FUNC() { return Pie$FUNC_; }

    static final MethodHandle Pie$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Pie",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIIIII)I",
        Pie$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Pie$MH() { return Pie$MH_; }

    static final FunctionDescriptor PlayMetaFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PlayMetaFile$FUNC() { return PlayMetaFile$FUNC_; }

    static final MethodHandle PlayMetaFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PlayMetaFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PlayMetaFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PlayMetaFile$MH() { return PlayMetaFile$MH_; }

    static final FunctionDescriptor PaintRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PaintRgn$FUNC() { return PaintRgn$FUNC_; }

    static final MethodHandle PaintRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PaintRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PaintRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PaintRgn$MH() { return PaintRgn$MH_; }

    static final FunctionDescriptor PolyPolygon$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PolyPolygon$FUNC() { return PolyPolygon$FUNC_; }

    static final MethodHandle PolyPolygon$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PolyPolygon",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PolyPolygon$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PolyPolygon$MH() { return PolyPolygon$MH_; }

    static final FunctionDescriptor PtInRegion$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PtInRegion$FUNC() { return PtInRegion$FUNC_; }

    static final MethodHandle PtInRegion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtInRegion",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        PtInRegion$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PtInRegion$MH() { return PtInRegion$MH_; }

    static final FunctionDescriptor PtVisible$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PtVisible$FUNC() { return PtVisible$FUNC_; }

    static final MethodHandle PtVisible$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PtVisible",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        PtVisible$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PtVisible$MH() { return PtVisible$MH_; }

    static final FunctionDescriptor RectInRegion$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RectInRegion$FUNC() { return RectInRegion$FUNC_; }

    static final MethodHandle RectInRegion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RectInRegion",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RectInRegion$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RectInRegion$MH() { return RectInRegion$MH_; }

    static final FunctionDescriptor RectVisible$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RectVisible$FUNC() { return RectVisible$FUNC_; }

    static final MethodHandle RectVisible$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RectVisible",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RectVisible$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RectVisible$MH() { return RectVisible$MH_; }

    static final FunctionDescriptor Rectangle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor Rectangle$FUNC() { return Rectangle$FUNC_; }

    static final MethodHandle Rectangle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Rectangle",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        Rectangle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Rectangle$MH() { return Rectangle$MH_; }

    static final FunctionDescriptor RestoreDC$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor RestoreDC$FUNC() { return RestoreDC$FUNC_; }

    static final MethodHandle RestoreDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RestoreDC",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        RestoreDC$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RestoreDC$MH() { return RestoreDC$MH_; }

    static final FunctionDescriptor ResetDCA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ResetDCA$FUNC() { return ResetDCA$FUNC_; }

    static final MethodHandle ResetDCA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResetDCA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ResetDCA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ResetDCA$MH() { return ResetDCA$MH_; }

    static final FunctionDescriptor ResetDCW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ResetDCW$FUNC() { return ResetDCW$FUNC_; }

    static final MethodHandle ResetDCW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResetDCW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ResetDCW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ResetDCW$MH() { return ResetDCW$MH_; }

    static final FunctionDescriptor RealizePalette$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RealizePalette$FUNC() { return RealizePalette$FUNC_; }

    static final MethodHandle RealizePalette$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RealizePalette",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RealizePalette$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RealizePalette$MH() { return RealizePalette$MH_; }

    static final FunctionDescriptor RemoveFontResourceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RemoveFontResourceA$FUNC() { return RemoveFontResourceA$FUNC_; }

    static final MethodHandle RemoveFontResourceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveFontResourceA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveFontResourceA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RemoveFontResourceA$MH() { return RemoveFontResourceA$MH_; }

    static final FunctionDescriptor RemoveFontResourceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RemoveFontResourceW$FUNC() { return RemoveFontResourceW$FUNC_; }

    static final MethodHandle RemoveFontResourceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveFontResourceW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RemoveFontResourceW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RemoveFontResourceW$MH() { return RemoveFontResourceW$MH_; }

    static final FunctionDescriptor RoundRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor RoundRect$FUNC() { return RoundRect$FUNC_; }

    static final MethodHandle RoundRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RoundRect",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIII)I",
        RoundRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RoundRect$MH() { return RoundRect$MH_; }

    static final FunctionDescriptor ResizePalette$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor ResizePalette$FUNC() { return ResizePalette$FUNC_; }

    static final MethodHandle ResizePalette$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResizePalette",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ResizePalette$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ResizePalette$MH() { return ResizePalette$MH_; }

    static final FunctionDescriptor SaveDC$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SaveDC$FUNC() { return SaveDC$FUNC_; }

    static final MethodHandle SaveDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SaveDC",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SaveDC$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SaveDC$MH() { return SaveDC$MH_; }

    static final FunctionDescriptor SelectClipRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SelectClipRgn$FUNC() { return SelectClipRgn$FUNC_; }

    static final MethodHandle SelectClipRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SelectClipRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SelectClipRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SelectClipRgn$MH() { return SelectClipRgn$MH_; }

    static final FunctionDescriptor ExtSelectClipRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor ExtSelectClipRgn$FUNC() { return ExtSelectClipRgn$FUNC_; }

    static final MethodHandle ExtSelectClipRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExtSelectClipRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ExtSelectClipRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ExtSelectClipRgn$MH() { return ExtSelectClipRgn$MH_; }

    static final FunctionDescriptor SetMetaRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMetaRgn$FUNC() { return SetMetaRgn$FUNC_; }

    static final MethodHandle SetMetaRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMetaRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetMetaRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMetaRgn$MH() { return SetMetaRgn$MH_; }

    static final FunctionDescriptor SelectObject$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SelectObject$FUNC() { return SelectObject$FUNC_; }

    static final MethodHandle SelectObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SelectObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SelectObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SelectObject$MH() { return SelectObject$MH_; }

    static final FunctionDescriptor SelectPalette$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SelectPalette$FUNC() { return SelectPalette$FUNC_; }

    static final MethodHandle SelectPalette$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SelectPalette",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        SelectPalette$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SelectPalette$MH() { return SelectPalette$MH_; }

    static final FunctionDescriptor SetBkColor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetBkColor$FUNC() { return SetBkColor$FUNC_; }

    static final MethodHandle SetBkColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetBkColor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetBkColor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetBkColor$MH() { return SetBkColor$MH_; }

    static final FunctionDescriptor SetDCBrushColor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetDCBrushColor$FUNC() { return SetDCBrushColor$FUNC_; }

    static final MethodHandle SetDCBrushColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDCBrushColor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetDCBrushColor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetDCBrushColor$MH() { return SetDCBrushColor$MH_; }

    static final FunctionDescriptor SetDCPenColor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetDCPenColor$FUNC() { return SetDCPenColor$FUNC_; }

    static final MethodHandle SetDCPenColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDCPenColor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetDCPenColor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetDCPenColor$MH() { return SetDCPenColor$MH_; }

    static final FunctionDescriptor SetBkMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetBkMode$FUNC() { return SetBkMode$FUNC_; }

    static final MethodHandle SetBkMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetBkMode",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetBkMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetBkMode$MH() { return SetBkMode$MH_; }

    static final FunctionDescriptor SetBitmapBits$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetBitmapBits$FUNC() { return SetBitmapBits$FUNC_; }

    static final MethodHandle SetBitmapBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetBitmapBits",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetBitmapBits$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetBitmapBits$MH() { return SetBitmapBits$MH_; }

    static final FunctionDescriptor SetBoundsRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetBoundsRect$FUNC() { return SetBoundsRect$FUNC_; }

    static final MethodHandle SetBoundsRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetBoundsRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetBoundsRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetBoundsRect$MH() { return SetBoundsRect$MH_; }

    static final FunctionDescriptor SetDIBits$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetDIBits$FUNC() { return SetDIBits$FUNC_; }

    static final MethodHandle SetDIBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDIBits",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetDIBits$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetDIBits$MH() { return SetDIBits$MH_; }

    static final FunctionDescriptor SetDIBitsToDevice$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONG,
        C_LONG,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetDIBitsToDevice$FUNC() { return SetDIBitsToDevice$FUNC_; }

    static final MethodHandle SetDIBitsToDevice$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDIBitsToDevice",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIIIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetDIBitsToDevice$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetDIBitsToDevice$MH() { return SetDIBitsToDevice$MH_; }

    static final FunctionDescriptor SetMapperFlags$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMapperFlags$FUNC() { return SetMapperFlags$FUNC_; }

    static final MethodHandle SetMapperFlags$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMapperFlags",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetMapperFlags$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMapperFlags$MH() { return SetMapperFlags$MH_; }

    static final FunctionDescriptor SetGraphicsMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetGraphicsMode$FUNC() { return SetGraphicsMode$FUNC_; }

    static final MethodHandle SetGraphicsMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetGraphicsMode",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetGraphicsMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetGraphicsMode$MH() { return SetGraphicsMode$MH_; }

    static final FunctionDescriptor SetMapMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMapMode$FUNC() { return SetMapMode$FUNC_; }

    static final MethodHandle SetMapMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMapMode",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetMapMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMapMode$MH() { return SetMapMode$MH_; }

    static final FunctionDescriptor SetLayout$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetLayout$FUNC() { return SetLayout$FUNC_; }

    static final MethodHandle SetLayout$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetLayout",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetLayout$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetLayout$MH() { return SetLayout$MH_; }

    static final FunctionDescriptor GetLayout$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetLayout$FUNC() { return GetLayout$FUNC_; }

    static final MethodHandle GetLayout$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLayout",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetLayout$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetLayout$MH() { return GetLayout$MH_; }

    static final FunctionDescriptor SetMetaFileBitsEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMetaFileBitsEx$FUNC() { return SetMetaFileBitsEx$FUNC_; }

    static final MethodHandle SetMetaFileBitsEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMetaFileBitsEx",
        "(ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetMetaFileBitsEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMetaFileBitsEx$MH() { return SetMetaFileBitsEx$MH_; }

    static final FunctionDescriptor SetPaletteEntries$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetPaletteEntries$FUNC() { return SetPaletteEntries$FUNC_; }

    static final MethodHandle SetPaletteEntries$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPaletteEntries",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetPaletteEntries$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetPaletteEntries$MH() { return SetPaletteEntries$MH_; }

    static final FunctionDescriptor SetPixel$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetPixel$FUNC() { return SetPixel$FUNC_; }

    static final MethodHandle SetPixel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPixel",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        SetPixel$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetPixel$MH() { return SetPixel$MH_; }

    static final FunctionDescriptor SetPixelV$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetPixelV$FUNC() { return SetPixelV$FUNC_; }

    static final MethodHandle SetPixelV$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPixelV",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        SetPixelV$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetPixelV$MH() { return SetPixelV$MH_; }

    static final FunctionDescriptor SetPixelFormat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetPixelFormat$FUNC() { return SetPixelFormat$FUNC_; }

    static final MethodHandle SetPixelFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPixelFormat",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetPixelFormat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetPixelFormat$MH() { return SetPixelFormat$MH_; }

    static final FunctionDescriptor SetPolyFillMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetPolyFillMode$FUNC() { return SetPolyFillMode$FUNC_; }

    static final MethodHandle SetPolyFillMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPolyFillMode",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetPolyFillMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetPolyFillMode$MH() { return SetPolyFillMode$MH_; }

    static final FunctionDescriptor StretchBlt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor StretchBlt$FUNC() { return StretchBlt$FUNC_; }

    static final MethodHandle StretchBlt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StretchBlt",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;IIIII)I",
        StretchBlt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StretchBlt$MH() { return StretchBlt$MH_; }

    static final FunctionDescriptor SetRectRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetRectRgn$FUNC() { return SetRectRgn$FUNC_; }

    static final MethodHandle SetRectRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetRectRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        SetRectRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetRectRgn$MH() { return SetRectRgn$MH_; }

    static final FunctionDescriptor StretchDIBits$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor StretchDIBits$FUNC() { return StretchDIBits$FUNC_; }

    static final MethodHandle StretchDIBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StretchDIBits",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIIIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        StretchDIBits$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StretchDIBits$MH() { return StretchDIBits$MH_; }

    static final FunctionDescriptor SetROP2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetROP2$FUNC() { return SetROP2$FUNC_; }

    static final MethodHandle SetROP2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetROP2",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetROP2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetROP2$MH() { return SetROP2$MH_; }

    static final FunctionDescriptor SetStretchBltMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetStretchBltMode$FUNC() { return SetStretchBltMode$FUNC_; }

    static final MethodHandle SetStretchBltMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetStretchBltMode",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetStretchBltMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetStretchBltMode$MH() { return SetStretchBltMode$MH_; }

    static final FunctionDescriptor SetSystemPaletteUse$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetSystemPaletteUse$FUNC() { return SetSystemPaletteUse$FUNC_; }

    static final MethodHandle SetSystemPaletteUse$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetSystemPaletteUse",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetSystemPaletteUse$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetSystemPaletteUse$MH() { return SetSystemPaletteUse$MH_; }

    static final FunctionDescriptor SetTextCharacterExtra$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetTextCharacterExtra$FUNC() { return SetTextCharacterExtra$FUNC_; }

    static final MethodHandle SetTextCharacterExtra$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTextCharacterExtra",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetTextCharacterExtra$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetTextCharacterExtra$MH() { return SetTextCharacterExtra$MH_; }

    static final FunctionDescriptor SetTextColor$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetTextColor$FUNC() { return SetTextColor$FUNC_; }

    static final MethodHandle SetTextColor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTextColor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetTextColor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetTextColor$MH() { return SetTextColor$MH_; }

    static final FunctionDescriptor SetTextAlign$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetTextAlign$FUNC() { return SetTextAlign$FUNC_; }

    static final MethodHandle SetTextAlign$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTextAlign",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetTextAlign$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetTextAlign$MH() { return SetTextAlign$MH_; }

    static final FunctionDescriptor SetTextJustification$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetTextJustification$FUNC() { return SetTextJustification$FUNC_; }

    static final MethodHandle SetTextJustification$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTextJustification",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetTextJustification$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetTextJustification$MH() { return SetTextJustification$MH_; }

    static final FunctionDescriptor UpdateColors$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor UpdateColors$FUNC() { return UpdateColors$FUNC_; }

    static final MethodHandle UpdateColors$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UpdateColors",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UpdateColors$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UpdateColors$MH() { return UpdateColors$MH_; }

    static final MemoryLayout _TRIVERTEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("x"),
        C_LONG.withName("y"),
        C_SHORT.withName("Red"),
        C_SHORT.withName("Green"),
        C_SHORT.withName("Blue"),
        C_SHORT.withName("Alpha")
    ).withName("_TRIVERTEX");
    static final jdk.incubator.foreign.MemoryLayout _TRIVERTEX$struct$LAYOUT() { return _TRIVERTEX$struct$LAYOUT_; }

    static final MemoryLayout _TRIVERTEX$x$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRIVERTEX$x$LAYOUT() { return _TRIVERTEX$x$LAYOUT_; }

    static final VarHandle _TRIVERTEX$x$VH_ = _TRIVERTEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    static final java.lang.invoke.VarHandle _TRIVERTEX$x$VH() { return _TRIVERTEX$x$VH_; }

    static final MemoryLayout _TRIVERTEX$y$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _TRIVERTEX$y$LAYOUT() { return _TRIVERTEX$y$LAYOUT_; }

    static final VarHandle _TRIVERTEX$y$VH_ = _TRIVERTEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    static final java.lang.invoke.VarHandle _TRIVERTEX$y$VH() { return _TRIVERTEX$y$VH_; }

    static final MemoryLayout _TRIVERTEX$Red$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TRIVERTEX$Red$LAYOUT() { return _TRIVERTEX$Red$LAYOUT_; }

    static final VarHandle _TRIVERTEX$Red$VH_ = _TRIVERTEX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Red"));
    static final java.lang.invoke.VarHandle _TRIVERTEX$Red$VH() { return _TRIVERTEX$Red$VH_; }

    static final MemoryLayout _TRIVERTEX$Green$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TRIVERTEX$Green$LAYOUT() { return _TRIVERTEX$Green$LAYOUT_; }

    static final VarHandle _TRIVERTEX$Green$VH_ = _TRIVERTEX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Green"));
    static final java.lang.invoke.VarHandle _TRIVERTEX$Green$VH() { return _TRIVERTEX$Green$VH_; }

    static final MemoryLayout _TRIVERTEX$Blue$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TRIVERTEX$Blue$LAYOUT() { return _TRIVERTEX$Blue$LAYOUT_; }

    static final VarHandle _TRIVERTEX$Blue$VH_ = _TRIVERTEX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Blue"));
    static final java.lang.invoke.VarHandle _TRIVERTEX$Blue$VH() { return _TRIVERTEX$Blue$VH_; }

    static final MemoryLayout _TRIVERTEX$Alpha$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _TRIVERTEX$Alpha$LAYOUT() { return _TRIVERTEX$Alpha$LAYOUT_; }

    static final VarHandle _TRIVERTEX$Alpha$VH_ = _TRIVERTEX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Alpha"));
    static final java.lang.invoke.VarHandle _TRIVERTEX$Alpha$VH() { return _TRIVERTEX$Alpha$VH_; }

    static final MemoryLayout _GRADIENT_TRIANGLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Vertex1"),
        C_LONG.withName("Vertex2"),
        C_LONG.withName("Vertex3")
    ).withName("_GRADIENT_TRIANGLE");
    static final jdk.incubator.foreign.MemoryLayout _GRADIENT_TRIANGLE$struct$LAYOUT() { return _GRADIENT_TRIANGLE$struct$LAYOUT_; }

    static final MemoryLayout _GRADIENT_TRIANGLE$Vertex1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GRADIENT_TRIANGLE$Vertex1$LAYOUT() { return _GRADIENT_TRIANGLE$Vertex1$LAYOUT_; }

    static final VarHandle _GRADIENT_TRIANGLE$Vertex1$VH_ = _GRADIENT_TRIANGLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Vertex1"));
    static final java.lang.invoke.VarHandle _GRADIENT_TRIANGLE$Vertex1$VH() { return _GRADIENT_TRIANGLE$Vertex1$VH_; }

    static final MemoryLayout _GRADIENT_TRIANGLE$Vertex2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GRADIENT_TRIANGLE$Vertex2$LAYOUT() { return _GRADIENT_TRIANGLE$Vertex2$LAYOUT_; }

    static final VarHandle _GRADIENT_TRIANGLE$Vertex2$VH_ = _GRADIENT_TRIANGLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Vertex2"));
    static final java.lang.invoke.VarHandle _GRADIENT_TRIANGLE$Vertex2$VH() { return _GRADIENT_TRIANGLE$Vertex2$VH_; }

    static final MemoryLayout _GRADIENT_TRIANGLE$Vertex3$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GRADIENT_TRIANGLE$Vertex3$LAYOUT() { return _GRADIENT_TRIANGLE$Vertex3$LAYOUT_; }

    static final VarHandle _GRADIENT_TRIANGLE$Vertex3$VH_ = _GRADIENT_TRIANGLE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Vertex3"));
    static final java.lang.invoke.VarHandle _GRADIENT_TRIANGLE$Vertex3$VH() { return _GRADIENT_TRIANGLE$Vertex3$VH_; }

    static final MemoryLayout _GRADIENT_RECT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("UpperLeft"),
        C_LONG.withName("LowerRight")
    ).withName("_GRADIENT_RECT");
    static final jdk.incubator.foreign.MemoryLayout _GRADIENT_RECT$struct$LAYOUT() { return _GRADIENT_RECT$struct$LAYOUT_; }

    static final MemoryLayout _GRADIENT_RECT$UpperLeft$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GRADIENT_RECT$UpperLeft$LAYOUT() { return _GRADIENT_RECT$UpperLeft$LAYOUT_; }

    static final VarHandle _GRADIENT_RECT$UpperLeft$VH_ = _GRADIENT_RECT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UpperLeft"));
    static final java.lang.invoke.VarHandle _GRADIENT_RECT$UpperLeft$VH() { return _GRADIENT_RECT$UpperLeft$VH_; }

    static final MemoryLayout _GRADIENT_RECT$LowerRight$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _GRADIENT_RECT$LowerRight$LAYOUT() { return _GRADIENT_RECT$LowerRight$LAYOUT_; }

    static final VarHandle _GRADIENT_RECT$LowerRight$VH_ = _GRADIENT_RECT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowerRight"));
    static final java.lang.invoke.VarHandle _GRADIENT_RECT$LowerRight$VH() { return _GRADIENT_RECT$LowerRight$VH_; }

    static final MemoryLayout _BLENDFUNCTION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("BlendOp"),
        C_CHAR.withName("BlendFlags"),
        C_CHAR.withName("SourceConstantAlpha"),
        C_CHAR.withName("AlphaFormat")
    ).withName("_BLENDFUNCTION");
    static final jdk.incubator.foreign.MemoryLayout _BLENDFUNCTION$struct$LAYOUT() { return _BLENDFUNCTION$struct$LAYOUT_; }

    static final MemoryLayout _BLENDFUNCTION$BlendOp$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _BLENDFUNCTION$BlendOp$LAYOUT() { return _BLENDFUNCTION$BlendOp$LAYOUT_; }

    static final VarHandle _BLENDFUNCTION$BlendOp$VH_ = _BLENDFUNCTION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BlendOp"));
    static final java.lang.invoke.VarHandle _BLENDFUNCTION$BlendOp$VH() { return _BLENDFUNCTION$BlendOp$VH_; }

    static final MemoryLayout _BLENDFUNCTION$BlendFlags$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _BLENDFUNCTION$BlendFlags$LAYOUT() { return _BLENDFUNCTION$BlendFlags$LAYOUT_; }

    static final VarHandle _BLENDFUNCTION$BlendFlags$VH_ = _BLENDFUNCTION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BlendFlags"));
    static final java.lang.invoke.VarHandle _BLENDFUNCTION$BlendFlags$VH() { return _BLENDFUNCTION$BlendFlags$VH_; }

    static final MemoryLayout _BLENDFUNCTION$SourceConstantAlpha$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _BLENDFUNCTION$SourceConstantAlpha$LAYOUT() { return _BLENDFUNCTION$SourceConstantAlpha$LAYOUT_; }

    static final VarHandle _BLENDFUNCTION$SourceConstantAlpha$VH_ = _BLENDFUNCTION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("SourceConstantAlpha"));
    static final java.lang.invoke.VarHandle _BLENDFUNCTION$SourceConstantAlpha$VH() { return _BLENDFUNCTION$SourceConstantAlpha$VH_; }

    static final MemoryLayout _BLENDFUNCTION$AlphaFormat$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _BLENDFUNCTION$AlphaFormat$LAYOUT() { return _BLENDFUNCTION$AlphaFormat$LAYOUT_; }

    static final VarHandle _BLENDFUNCTION$AlphaFormat$VH_ = _BLENDFUNCTION$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AlphaFormat"));
    static final java.lang.invoke.VarHandle _BLENDFUNCTION$AlphaFormat$VH() { return _BLENDFUNCTION$AlphaFormat$VH_; }

    static final FunctionDescriptor AlphaBlend$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        MemoryLayout.ofStruct(
            C_CHAR.withName("BlendOp"),
            C_CHAR.withName("BlendFlags"),
            C_CHAR.withName("SourceConstantAlpha"),
            C_CHAR.withName("AlphaFormat")
        ).withName("_BLENDFUNCTION")
    );
    static final jdk.incubator.foreign.FunctionDescriptor AlphaBlend$FUNC() { return AlphaBlend$FUNC_; }

    static final MethodHandle AlphaBlend$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AlphaBlend",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemorySegment;)I",
        AlphaBlend$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AlphaBlend$MH() { return AlphaBlend$MH_; }

    static final FunctionDescriptor TransparentBlt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor TransparentBlt$FUNC() { return TransparentBlt$FUNC_; }

    static final MethodHandle TransparentBlt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TransparentBlt",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;IIIII)I",
        TransparentBlt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TransparentBlt$MH() { return TransparentBlt$MH_; }

    static final FunctionDescriptor GradientFill$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GradientFill$FUNC() { return GradientFill$FUNC_; }

    static final MethodHandle GradientFill$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GradientFill",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        GradientFill$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GradientFill$MH() { return GradientFill$MH_; }

    static final FunctionDescriptor GdiAlphaBlend$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        MemoryLayout.ofStruct(
            C_CHAR.withName("BlendOp"),
            C_CHAR.withName("BlendFlags"),
            C_CHAR.withName("SourceConstantAlpha"),
            C_CHAR.withName("AlphaFormat")
        ).withName("_BLENDFUNCTION")
    );
    static final jdk.incubator.foreign.FunctionDescriptor GdiAlphaBlend$FUNC() { return GdiAlphaBlend$FUNC_; }

    static final MethodHandle GdiAlphaBlend$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GdiAlphaBlend",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemorySegment;)I",
        GdiAlphaBlend$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GdiAlphaBlend$MH() { return GdiAlphaBlend$MH_; }

    static final FunctionDescriptor GdiTransparentBlt$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GdiTransparentBlt$FUNC() { return GdiTransparentBlt$FUNC_; }

    static final MethodHandle GdiTransparentBlt$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GdiTransparentBlt",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;IIIII)I",
        GdiTransparentBlt$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GdiTransparentBlt$MH() { return GdiTransparentBlt$MH_; }

    static final FunctionDescriptor GdiGradientFill$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GdiGradientFill$FUNC() { return GdiGradientFill$FUNC_; }

    static final MethodHandle GdiGradientFill$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GdiGradientFill",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        GdiGradientFill$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GdiGradientFill$MH() { return GdiGradientFill$MH_; }

    static final FunctionDescriptor PlayMetaFileRecord$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PlayMetaFileRecord$FUNC() { return PlayMetaFileRecord$FUNC_; }

    static final MethodHandle PlayMetaFileRecord$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PlayMetaFileRecord",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PlayMetaFileRecord$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PlayMetaFileRecord$MH() { return PlayMetaFileRecord$MH_; }

    static final FunctionDescriptor EnumMetaFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumMetaFile$FUNC() { return EnumMetaFile$FUNC_; }

    static final MethodHandle EnumMetaFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumMetaFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumMetaFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumMetaFile$MH() { return EnumMetaFile$MH_; }

    static final FunctionDescriptor EnumMetaFile$proc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumMetaFile$proc$FUNC() { return EnumMetaFile$proc$FUNC_; }

    static final FunctionDescriptor CloseEnhMetaFile$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CloseEnhMetaFile$FUNC() { return CloseEnhMetaFile$FUNC_; }

    static final MethodHandle CloseEnhMetaFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseEnhMetaFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CloseEnhMetaFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CloseEnhMetaFile$MH() { return CloseEnhMetaFile$MH_; }

    static final FunctionDescriptor CopyEnhMetaFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CopyEnhMetaFileA$FUNC() { return CopyEnhMetaFileA$FUNC_; }

    static final MethodHandle CopyEnhMetaFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyEnhMetaFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CopyEnhMetaFileA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CopyEnhMetaFileA$MH() { return CopyEnhMetaFileA$MH_; }

    static final FunctionDescriptor CopyEnhMetaFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CopyEnhMetaFileW$FUNC() { return CopyEnhMetaFileW$FUNC_; }

    static final MethodHandle CopyEnhMetaFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyEnhMetaFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CopyEnhMetaFileW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CopyEnhMetaFileW$MH() { return CopyEnhMetaFileW$MH_; }

    static final FunctionDescriptor CreateEnhMetaFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateEnhMetaFileA$FUNC() { return CreateEnhMetaFileA$FUNC_; }

    static final MethodHandle CreateEnhMetaFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateEnhMetaFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateEnhMetaFileA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateEnhMetaFileA$MH() { return CreateEnhMetaFileA$MH_; }

    static final FunctionDescriptor CreateEnhMetaFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateEnhMetaFileW$FUNC() { return CreateEnhMetaFileW$FUNC_; }

    static final MethodHandle CreateEnhMetaFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateEnhMetaFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateEnhMetaFileW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateEnhMetaFileW$MH() { return CreateEnhMetaFileW$MH_; }

    static final FunctionDescriptor DeleteEnhMetaFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DeleteEnhMetaFile$FUNC() { return DeleteEnhMetaFile$FUNC_; }

    static final MethodHandle DeleteEnhMetaFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteEnhMetaFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteEnhMetaFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DeleteEnhMetaFile$MH() { return DeleteEnhMetaFile$MH_; }

    static final FunctionDescriptor EnumEnhMetaFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumEnhMetaFile$FUNC() { return EnumEnhMetaFile$FUNC_; }

    static final MethodHandle EnumEnhMetaFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumEnhMetaFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EnumEnhMetaFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumEnhMetaFile$MH() { return EnumEnhMetaFile$MH_; }

    static final FunctionDescriptor EnumEnhMetaFile$proc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumEnhMetaFile$proc$FUNC() { return EnumEnhMetaFile$proc$FUNC_; }

    static final FunctionDescriptor GetEnhMetaFileA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEnhMetaFileA$FUNC() { return GetEnhMetaFileA$FUNC_; }

    static final MethodHandle GetEnhMetaFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnhMetaFileA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetEnhMetaFileA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEnhMetaFileA$MH() { return GetEnhMetaFileA$MH_; }

    static final FunctionDescriptor GetEnhMetaFileW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEnhMetaFileW$FUNC() { return GetEnhMetaFileW$FUNC_; }

    static final MethodHandle GetEnhMetaFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnhMetaFileW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetEnhMetaFileW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEnhMetaFileW$MH() { return GetEnhMetaFileW$MH_; }

    static final FunctionDescriptor GetEnhMetaFileBits$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEnhMetaFileBits$FUNC() { return GetEnhMetaFileBits$FUNC_; }

    static final MethodHandle GetEnhMetaFileBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnhMetaFileBits",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetEnhMetaFileBits$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEnhMetaFileBits$MH() { return GetEnhMetaFileBits$MH_; }

    static final FunctionDescriptor GetEnhMetaFileDescriptionA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEnhMetaFileDescriptionA$FUNC() { return GetEnhMetaFileDescriptionA$FUNC_; }

    static final MethodHandle GetEnhMetaFileDescriptionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnhMetaFileDescriptionA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetEnhMetaFileDescriptionA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEnhMetaFileDescriptionA$MH() { return GetEnhMetaFileDescriptionA$MH_; }

    static final FunctionDescriptor GetEnhMetaFileDescriptionW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEnhMetaFileDescriptionW$FUNC() { return GetEnhMetaFileDescriptionW$FUNC_; }

    static final MethodHandle GetEnhMetaFileDescriptionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnhMetaFileDescriptionW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetEnhMetaFileDescriptionW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEnhMetaFileDescriptionW$MH() { return GetEnhMetaFileDescriptionW$MH_; }

    static final FunctionDescriptor GetEnhMetaFileHeader$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEnhMetaFileHeader$FUNC() { return GetEnhMetaFileHeader$FUNC_; }

    static final MethodHandle GetEnhMetaFileHeader$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnhMetaFileHeader",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetEnhMetaFileHeader$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEnhMetaFileHeader$MH() { return GetEnhMetaFileHeader$MH_; }

    static final FunctionDescriptor GetEnhMetaFilePaletteEntries$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEnhMetaFilePaletteEntries$FUNC() { return GetEnhMetaFilePaletteEntries$FUNC_; }

    static final MethodHandle GetEnhMetaFilePaletteEntries$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnhMetaFilePaletteEntries",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetEnhMetaFilePaletteEntries$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEnhMetaFilePaletteEntries$MH() { return GetEnhMetaFilePaletteEntries$MH_; }

    static final FunctionDescriptor GetEnhMetaFilePixelFormat$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetEnhMetaFilePixelFormat$FUNC() { return GetEnhMetaFilePixelFormat$FUNC_; }

    static final MethodHandle GetEnhMetaFilePixelFormat$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetEnhMetaFilePixelFormat",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetEnhMetaFilePixelFormat$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetEnhMetaFilePixelFormat$MH() { return GetEnhMetaFilePixelFormat$MH_; }

    static final FunctionDescriptor GetWinMetaFileBits$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWinMetaFileBits$FUNC() { return GetWinMetaFileBits$FUNC_; }

    static final MethodHandle GetWinMetaFileBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWinMetaFileBits",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetWinMetaFileBits$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWinMetaFileBits$MH() { return GetWinMetaFileBits$MH_; }

    static final FunctionDescriptor PlayEnhMetaFile$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PlayEnhMetaFile$FUNC() { return PlayEnhMetaFile$FUNC_; }

    static final MethodHandle PlayEnhMetaFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PlayEnhMetaFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PlayEnhMetaFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PlayEnhMetaFile$MH() { return PlayEnhMetaFile$MH_; }

    static final FunctionDescriptor PlayEnhMetaFileRecord$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PlayEnhMetaFileRecord$FUNC() { return PlayEnhMetaFileRecord$FUNC_; }

    static final MethodHandle PlayEnhMetaFileRecord$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PlayEnhMetaFileRecord",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PlayEnhMetaFileRecord$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PlayEnhMetaFileRecord$MH() { return PlayEnhMetaFileRecord$MH_; }

    static final FunctionDescriptor SetEnhMetaFileBits$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetEnhMetaFileBits$FUNC() { return SetEnhMetaFileBits$FUNC_; }

    static final MethodHandle SetEnhMetaFileBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetEnhMetaFileBits",
        "(ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetEnhMetaFileBits$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetEnhMetaFileBits$MH() { return SetEnhMetaFileBits$MH_; }

    static final FunctionDescriptor SetWinMetaFileBits$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetWinMetaFileBits$FUNC() { return SetWinMetaFileBits$FUNC_; }

    static final MethodHandle SetWinMetaFileBits$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWinMetaFileBits",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetWinMetaFileBits$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetWinMetaFileBits$MH() { return SetWinMetaFileBits$MH_; }

    static final FunctionDescriptor GdiComment$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GdiComment$FUNC() { return GdiComment$FUNC_; }

    static final MethodHandle GdiComment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GdiComment",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GdiComment$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GdiComment$MH() { return GdiComment$MH_; }

    static final FunctionDescriptor GetTextMetricsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextMetricsA$FUNC() { return GetTextMetricsA$FUNC_; }

    static final MethodHandle GetTextMetricsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextMetricsA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextMetricsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextMetricsA$MH() { return GetTextMetricsA$MH_; }

    static final FunctionDescriptor GetTextMetricsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextMetricsW$FUNC() { return GetTextMetricsW$FUNC_; }

    static final MethodHandle GetTextMetricsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextMetricsW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTextMetricsW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextMetricsW$MH() { return GetTextMetricsW$MH_; }

    static final MemoryLayout tagDIBSECTION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("bmType"),
            C_LONG.withName("bmWidth"),
            C_LONG.withName("bmHeight"),
            C_LONG.withName("bmWidthBytes"),
            C_SHORT.withName("bmPlanes"),
            C_SHORT.withName("bmBitsPixel"),
            MemoryLayout.ofPaddingBits(32),
            C_POINTER.withName("bmBits")
        ).withName("dsBm"),
        MemoryLayout.ofStruct(
            C_LONG.withName("biSize"),
            C_LONG.withName("biWidth"),
            C_LONG.withName("biHeight"),
            C_SHORT.withName("biPlanes"),
            C_SHORT.withName("biBitCount"),
            C_LONG.withName("biCompression"),
            C_LONG.withName("biSizeImage"),
            C_LONG.withName("biXPelsPerMeter"),
            C_LONG.withName("biYPelsPerMeter"),
            C_LONG.withName("biClrUsed"),
            C_LONG.withName("biClrImportant")
        ).withName("dsBmih"),
        MemoryLayout.ofSequence(3, C_LONG).withName("dsBitfields"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("dshSection"),
        C_LONG.withName("dsOffset"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagDIBSECTION");
    static final jdk.incubator.foreign.MemoryLayout tagDIBSECTION$struct$LAYOUT() { return tagDIBSECTION$struct$LAYOUT_; }

    static final MemoryLayout tagDIBSECTION$dshSection$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagDIBSECTION$dshSection$LAYOUT() { return tagDIBSECTION$dshSection$LAYOUT_; }

    static final VarHandle tagDIBSECTION$dshSection$VH_ = MemoryHandles.asAddressVarHandle(tagDIBSECTION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dshSection")));
    static final java.lang.invoke.VarHandle tagDIBSECTION$dshSection$VH() { return tagDIBSECTION$dshSection$VH_; }

    static final MemoryLayout tagDIBSECTION$dsOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagDIBSECTION$dsOffset$LAYOUT() { return tagDIBSECTION$dsOffset$LAYOUT_; }

    static final VarHandle tagDIBSECTION$dsOffset$VH_ = tagDIBSECTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dsOffset"));
    static final java.lang.invoke.VarHandle tagDIBSECTION$dsOffset$VH() { return tagDIBSECTION$dsOffset$VH_; }

    static final FunctionDescriptor AngleArc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONG,
        C_FLOAT,
        C_FLOAT
    );
    static final jdk.incubator.foreign.FunctionDescriptor AngleArc$FUNC() { return AngleArc$FUNC_; }

    static final MethodHandle AngleArc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AngleArc",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIFF)I",
        AngleArc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AngleArc$MH() { return AngleArc$MH_; }

    static final FunctionDescriptor PolyPolyline$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor PolyPolyline$FUNC() { return PolyPolyline$FUNC_; }

    static final MethodHandle PolyPolyline$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PolyPolyline",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PolyPolyline$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PolyPolyline$MH() { return PolyPolyline$MH_; }

    static final FunctionDescriptor GetWorldTransform$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWorldTransform$FUNC() { return GetWorldTransform$FUNC_; }

    static final MethodHandle GetWorldTransform$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWorldTransform",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWorldTransform$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWorldTransform$MH() { return GetWorldTransform$MH_; }

    static final FunctionDescriptor SetWorldTransform$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetWorldTransform$FUNC() { return SetWorldTransform$FUNC_; }

    static final MethodHandle SetWorldTransform$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWorldTransform",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetWorldTransform$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetWorldTransform$MH() { return SetWorldTransform$MH_; }

    static final FunctionDescriptor ModifyWorldTransform$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor ModifyWorldTransform$FUNC() { return ModifyWorldTransform$FUNC_; }

    static final MethodHandle ModifyWorldTransform$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ModifyWorldTransform",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ModifyWorldTransform$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ModifyWorldTransform$MH() { return ModifyWorldTransform$MH_; }

    static final FunctionDescriptor CombineTransform$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CombineTransform$FUNC() { return CombineTransform$FUNC_; }

    static final MethodHandle CombineTransform$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CombineTransform",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CombineTransform$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CombineTransform$MH() { return CombineTransform$MH_; }

    static final FunctionDescriptor CreateDIBSection$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateDIBSection$FUNC() { return CreateDIBSection$FUNC_; }

    static final MethodHandle CreateDIBSection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDIBSection",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateDIBSection$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateDIBSection$MH() { return CreateDIBSection$MH_; }

    static final FunctionDescriptor GetDIBColorTable$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDIBColorTable$FUNC() { return GetDIBColorTable$FUNC_; }

    static final MethodHandle GetDIBColorTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDIBColorTable",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetDIBColorTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDIBColorTable$MH() { return GetDIBColorTable$MH_; }

    static final FunctionDescriptor SetDIBColorTable$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetDIBColorTable$FUNC() { return SetDIBColorTable$FUNC_; }

    static final MethodHandle SetDIBColorTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDIBColorTable",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetDIBColorTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetDIBColorTable$MH() { return SetDIBColorTable$MH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("caSize"),
        C_SHORT.withName("caFlags"),
        C_SHORT.withName("caIlluminantIndex"),
        C_SHORT.withName("caRedGamma"),
        C_SHORT.withName("caGreenGamma"),
        C_SHORT.withName("caBlueGamma"),
        C_SHORT.withName("caReferenceBlack"),
        C_SHORT.withName("caReferenceWhite"),
        C_SHORT.withName("caContrast"),
        C_SHORT.withName("caBrightness"),
        C_SHORT.withName("caColorfulness"),
        C_SHORT.withName("caRedGreenTint")
    ).withName("tagCOLORADJUSTMENT");
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$struct$LAYOUT() { return tagCOLORADJUSTMENT$struct$LAYOUT_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caSize$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caSize$LAYOUT() { return tagCOLORADJUSTMENT$caSize$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caSize$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caSize"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caSize$VH() { return tagCOLORADJUSTMENT$caSize$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caFlags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caFlags$LAYOUT() { return tagCOLORADJUSTMENT$caFlags$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caFlags$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caFlags"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caFlags$VH() { return tagCOLORADJUSTMENT$caFlags$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caIlluminantIndex$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caIlluminantIndex$LAYOUT() { return tagCOLORADJUSTMENT$caIlluminantIndex$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caIlluminantIndex$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caIlluminantIndex"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caIlluminantIndex$VH() { return tagCOLORADJUSTMENT$caIlluminantIndex$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caRedGamma$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caRedGamma$LAYOUT() { return tagCOLORADJUSTMENT$caRedGamma$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caRedGamma$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caRedGamma"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caRedGamma$VH() { return tagCOLORADJUSTMENT$caRedGamma$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caGreenGamma$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caGreenGamma$LAYOUT() { return tagCOLORADJUSTMENT$caGreenGamma$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caGreenGamma$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caGreenGamma"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caGreenGamma$VH() { return tagCOLORADJUSTMENT$caGreenGamma$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caBlueGamma$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caBlueGamma$LAYOUT() { return tagCOLORADJUSTMENT$caBlueGamma$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caBlueGamma$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caBlueGamma"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caBlueGamma$VH() { return tagCOLORADJUSTMENT$caBlueGamma$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caReferenceBlack$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caReferenceBlack$LAYOUT() { return tagCOLORADJUSTMENT$caReferenceBlack$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caReferenceBlack$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caReferenceBlack"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caReferenceBlack$VH() { return tagCOLORADJUSTMENT$caReferenceBlack$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caReferenceWhite$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caReferenceWhite$LAYOUT() { return tagCOLORADJUSTMENT$caReferenceWhite$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caReferenceWhite$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caReferenceWhite"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caReferenceWhite$VH() { return tagCOLORADJUSTMENT$caReferenceWhite$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caContrast$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caContrast$LAYOUT() { return tagCOLORADJUSTMENT$caContrast$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caContrast$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caContrast"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caContrast$VH() { return tagCOLORADJUSTMENT$caContrast$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caBrightness$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caBrightness$LAYOUT() { return tagCOLORADJUSTMENT$caBrightness$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caBrightness$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caBrightness"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caBrightness$VH() { return tagCOLORADJUSTMENT$caBrightness$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caColorfulness$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caColorfulness$LAYOUT() { return tagCOLORADJUSTMENT$caColorfulness$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caColorfulness$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caColorfulness"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caColorfulness$VH() { return tagCOLORADJUSTMENT$caColorfulness$VH_; }

    static final MemoryLayout tagCOLORADJUSTMENT$caRedGreenTint$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagCOLORADJUSTMENT$caRedGreenTint$LAYOUT() { return tagCOLORADJUSTMENT$caRedGreenTint$LAYOUT_; }

    static final VarHandle tagCOLORADJUSTMENT$caRedGreenTint$VH_ = tagCOLORADJUSTMENT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("caRedGreenTint"));
    static final java.lang.invoke.VarHandle tagCOLORADJUSTMENT$caRedGreenTint$VH() { return tagCOLORADJUSTMENT$caRedGreenTint$VH_; }

    static final FunctionDescriptor SetColorAdjustment$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetColorAdjustment$FUNC() { return SetColorAdjustment$FUNC_; }

    static final MethodHandle SetColorAdjustment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetColorAdjustment",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetColorAdjustment$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetColorAdjustment$MH() { return SetColorAdjustment$MH_; }

    static final FunctionDescriptor GetColorAdjustment$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetColorAdjustment$FUNC() { return GetColorAdjustment$FUNC_; }

    static final MethodHandle GetColorAdjustment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetColorAdjustment",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetColorAdjustment$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetColorAdjustment$MH() { return GetColorAdjustment$MH_; }

    static final FunctionDescriptor CreateHalftonePalette$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateHalftonePalette$FUNC() { return CreateHalftonePalette$FUNC_; }

    static final MethodHandle CreateHalftonePalette$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateHalftonePalette",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateHalftonePalette$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateHalftonePalette$MH() { return CreateHalftonePalette$MH_; }

    static final MemoryLayout _DOCINFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpszDocName"),
        C_POINTER.withName("lpszOutput"),
        C_POINTER.withName("lpszDatatype"),
        C_LONG.withName("fwType"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_DOCINFOA");
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOA$struct$LAYOUT() { return _DOCINFOA$struct$LAYOUT_; }

    static final MemoryLayout _DOCINFOA$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOA$cbSize$LAYOUT() { return _DOCINFOA$cbSize$LAYOUT_; }

    static final VarHandle _DOCINFOA$cbSize$VH_ = _DOCINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _DOCINFOA$cbSize$VH() { return _DOCINFOA$cbSize$VH_; }

    static final MemoryLayout _DOCINFOA$lpszDocName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOA$lpszDocName$LAYOUT() { return _DOCINFOA$lpszDocName$LAYOUT_; }

    static final VarHandle _DOCINFOA$lpszDocName$VH_ = MemoryHandles.asAddressVarHandle(_DOCINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszDocName")));
    static final java.lang.invoke.VarHandle _DOCINFOA$lpszDocName$VH() { return _DOCINFOA$lpszDocName$VH_; }

    static final MemoryLayout _DOCINFOA$lpszOutput$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOA$lpszOutput$LAYOUT() { return _DOCINFOA$lpszOutput$LAYOUT_; }

    static final VarHandle _DOCINFOA$lpszOutput$VH_ = MemoryHandles.asAddressVarHandle(_DOCINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszOutput")));
    static final java.lang.invoke.VarHandle _DOCINFOA$lpszOutput$VH() { return _DOCINFOA$lpszOutput$VH_; }

    static final MemoryLayout _DOCINFOA$lpszDatatype$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOA$lpszDatatype$LAYOUT() { return _DOCINFOA$lpszDatatype$LAYOUT_; }

    static final VarHandle _DOCINFOA$lpszDatatype$VH_ = MemoryHandles.asAddressVarHandle(_DOCINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszDatatype")));
    static final java.lang.invoke.VarHandle _DOCINFOA$lpszDatatype$VH() { return _DOCINFOA$lpszDatatype$VH_; }

    static final MemoryLayout _DOCINFOA$fwType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOA$fwType$LAYOUT() { return _DOCINFOA$fwType$LAYOUT_; }

    static final VarHandle _DOCINFOA$fwType$VH_ = _DOCINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fwType"));
    static final java.lang.invoke.VarHandle _DOCINFOA$fwType$VH() { return _DOCINFOA$fwType$VH_; }

    static final MemoryLayout _DOCINFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpszDocName"),
        C_POINTER.withName("lpszOutput"),
        C_POINTER.withName("lpszDatatype"),
        C_LONG.withName("fwType"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_DOCINFOW");
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOW$struct$LAYOUT() { return _DOCINFOW$struct$LAYOUT_; }

    static final MemoryLayout _DOCINFOW$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOW$cbSize$LAYOUT() { return _DOCINFOW$cbSize$LAYOUT_; }

    static final VarHandle _DOCINFOW$cbSize$VH_ = _DOCINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _DOCINFOW$cbSize$VH() { return _DOCINFOW$cbSize$VH_; }

    static final MemoryLayout _DOCINFOW$lpszDocName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOW$lpszDocName$LAYOUT() { return _DOCINFOW$lpszDocName$LAYOUT_; }

    static final VarHandle _DOCINFOW$lpszDocName$VH_ = MemoryHandles.asAddressVarHandle(_DOCINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszDocName")));
    static final java.lang.invoke.VarHandle _DOCINFOW$lpszDocName$VH() { return _DOCINFOW$lpszDocName$VH_; }

    static final MemoryLayout _DOCINFOW$lpszOutput$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOW$lpszOutput$LAYOUT() { return _DOCINFOW$lpszOutput$LAYOUT_; }

    static final VarHandle _DOCINFOW$lpszOutput$VH_ = MemoryHandles.asAddressVarHandle(_DOCINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszOutput")));
    static final java.lang.invoke.VarHandle _DOCINFOW$lpszOutput$VH() { return _DOCINFOW$lpszOutput$VH_; }

    static final MemoryLayout _DOCINFOW$lpszDatatype$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOW$lpszDatatype$LAYOUT() { return _DOCINFOW$lpszDatatype$LAYOUT_; }

    static final VarHandle _DOCINFOW$lpszDatatype$VH_ = MemoryHandles.asAddressVarHandle(_DOCINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszDatatype")));
    static final java.lang.invoke.VarHandle _DOCINFOW$lpszDatatype$VH() { return _DOCINFOW$lpszDatatype$VH_; }

    static final MemoryLayout _DOCINFOW$fwType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _DOCINFOW$fwType$LAYOUT() { return _DOCINFOW$fwType$LAYOUT_; }

    static final VarHandle _DOCINFOW$fwType$VH_ = _DOCINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fwType"));
    static final java.lang.invoke.VarHandle _DOCINFOW$fwType$VH() { return _DOCINFOW$fwType$VH_; }

    static final FunctionDescriptor StartDocA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StartDocA$FUNC() { return StartDocA$FUNC_; }

    static final MethodHandle StartDocA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StartDocA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StartDocA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StartDocA$MH() { return StartDocA$MH_; }

    static final FunctionDescriptor StartDocW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StartDocW$FUNC() { return StartDocW$FUNC_; }

    static final MethodHandle StartDocW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StartDocW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StartDocW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StartDocW$MH() { return StartDocW$MH_; }

    static final FunctionDescriptor EndDoc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EndDoc$FUNC() { return EndDoc$FUNC_; }

    static final MethodHandle EndDoc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EndDoc",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        EndDoc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EndDoc$MH() { return EndDoc$MH_; }

    static final FunctionDescriptor StartPage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StartPage$FUNC() { return StartPage$FUNC_; }

    static final MethodHandle StartPage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StartPage",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        StartPage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StartPage$MH() { return StartPage$MH_; }

    static final FunctionDescriptor EndPage$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EndPage$FUNC() { return EndPage$FUNC_; }

    static final MethodHandle EndPage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EndPage",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        EndPage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EndPage$MH() { return EndPage$MH_; }

    static final FunctionDescriptor AbortDoc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AbortDoc$FUNC() { return AbortDoc$FUNC_; }

    static final MethodHandle AbortDoc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AbortDoc",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        AbortDoc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AbortDoc$MH() { return AbortDoc$MH_; }

    static final FunctionDescriptor SetAbortProc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetAbortProc$FUNC() { return SetAbortProc$FUNC_; }

    static final MethodHandle SetAbortProc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetAbortProc",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetAbortProc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetAbortProc$MH() { return SetAbortProc$MH_; }

    static final FunctionDescriptor SetAbortProc$proc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetAbortProc$proc$FUNC() { return SetAbortProc$proc$FUNC_; }

    static final FunctionDescriptor AbortPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AbortPath$FUNC() { return AbortPath$FUNC_; }

    static final MethodHandle AbortPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AbortPath",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        AbortPath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AbortPath$MH() { return AbortPath$MH_; }

    static final FunctionDescriptor ArcTo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor ArcTo$FUNC() { return ArcTo$FUNC_; }

    static final MethodHandle ArcTo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ArcTo",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIIIIII)I",
        ArcTo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ArcTo$MH() { return ArcTo$MH_; }

    static final FunctionDescriptor BeginPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BeginPath$FUNC() { return BeginPath$FUNC_; }

    static final MethodHandle BeginPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BeginPath",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        BeginPath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BeginPath$MH() { return BeginPath$MH_; }

    static final FunctionDescriptor CloseFigure$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CloseFigure$FUNC() { return CloseFigure$FUNC_; }

    static final MethodHandle CloseFigure$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseFigure",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CloseFigure$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CloseFigure$MH() { return CloseFigure$MH_; }

    static final FunctionDescriptor EndPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EndPath$FUNC() { return EndPath$FUNC_; }

    static final MethodHandle EndPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EndPath",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        EndPath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EndPath$MH() { return EndPath$MH_; }

    static final FunctionDescriptor FillPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FillPath$FUNC() { return FillPath$FUNC_; }

    static final MethodHandle FillPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FillPath",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FillPath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FillPath$MH() { return FillPath$MH_; }

    static final FunctionDescriptor FlattenPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FlattenPath$FUNC() { return FlattenPath$FUNC_; }

    static final MethodHandle FlattenPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlattenPath",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FlattenPath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FlattenPath$MH() { return FlattenPath$MH_; }

    static final FunctionDescriptor GetPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPath$FUNC() { return GetPath$FUNC_; }

    static final MethodHandle GetPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPath",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetPath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPath$MH() { return GetPath$MH_; }

    static final FunctionDescriptor PathToRegion$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PathToRegion$FUNC() { return PathToRegion$FUNC_; }

    static final MethodHandle PathToRegion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PathToRegion",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        PathToRegion$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PathToRegion$MH() { return PathToRegion$MH_; }

    static final FunctionDescriptor PolyDraw$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PolyDraw$FUNC() { return PolyDraw$FUNC_; }

    static final MethodHandle PolyDraw$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PolyDraw",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PolyDraw$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PolyDraw$MH() { return PolyDraw$MH_; }

    static final FunctionDescriptor SelectClipPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SelectClipPath$FUNC() { return SelectClipPath$FUNC_; }

    static final MethodHandle SelectClipPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SelectClipPath",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SelectClipPath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SelectClipPath$MH() { return SelectClipPath$MH_; }

    static final FunctionDescriptor SetArcDirection$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetArcDirection$FUNC() { return SetArcDirection$FUNC_; }

    static final MethodHandle SetArcDirection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetArcDirection",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetArcDirection$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetArcDirection$MH() { return SetArcDirection$MH_; }

    static final FunctionDescriptor SetMiterLimit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_FLOAT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMiterLimit$FUNC() { return SetMiterLimit$FUNC_; }

    static final MethodHandle SetMiterLimit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMiterLimit",
        "(Ljdk/incubator/foreign/MemoryAddress;FLjdk/incubator/foreign/MemoryAddress;)I",
        SetMiterLimit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMiterLimit$MH() { return SetMiterLimit$MH_; }

    static final FunctionDescriptor StrokeAndFillPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StrokeAndFillPath$FUNC() { return StrokeAndFillPath$FUNC_; }

    static final MethodHandle StrokeAndFillPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StrokeAndFillPath",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        StrokeAndFillPath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StrokeAndFillPath$MH() { return StrokeAndFillPath$MH_; }

    static final FunctionDescriptor StrokePath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StrokePath$FUNC() { return StrokePath$FUNC_; }

    static final MethodHandle StrokePath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StrokePath",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        StrokePath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StrokePath$MH() { return StrokePath$MH_; }

    static final FunctionDescriptor WidenPath$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WidenPath$FUNC() { return WidenPath$FUNC_; }

    static final MethodHandle WidenPath$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WidenPath",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        WidenPath$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WidenPath$MH() { return WidenPath$MH_; }

    static final FunctionDescriptor ExtCreatePen$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ExtCreatePen$FUNC() { return ExtCreatePen$FUNC_; }

    static final MethodHandle ExtCreatePen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExtCreatePen",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        ExtCreatePen$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ExtCreatePen$MH() { return ExtCreatePen$MH_; }

    static final FunctionDescriptor GetMiterLimit$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMiterLimit$FUNC() { return GetMiterLimit$FUNC_; }

    static final MethodHandle GetMiterLimit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMiterLimit",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMiterLimit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMiterLimit$MH() { return GetMiterLimit$MH_; }

    static final FunctionDescriptor GetArcDirection$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetArcDirection$FUNC() { return GetArcDirection$FUNC_; }

    static final MethodHandle GetArcDirection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetArcDirection",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetArcDirection$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetArcDirection$MH() { return GetArcDirection$MH_; }

    static final FunctionDescriptor GetObjectA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetObjectA$FUNC() { return GetObjectA$FUNC_; }

    static final MethodHandle GetObjectA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetObjectA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetObjectA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetObjectA$MH() { return GetObjectA$MH_; }

    static final FunctionDescriptor GetObjectW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetObjectW$FUNC() { return GetObjectW$FUNC_; }

    static final MethodHandle GetObjectW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetObjectW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetObjectW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetObjectW$MH() { return GetObjectW$MH_; }

    static final FunctionDescriptor MoveToEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor MoveToEx$FUNC() { return MoveToEx$FUNC_; }

    static final MethodHandle MoveToEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MoveToEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        MoveToEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MoveToEx$MH() { return MoveToEx$MH_; }

    static final FunctionDescriptor TextOutA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor TextOutA$FUNC() { return TextOutA$FUNC_; }

    static final MethodHandle TextOutA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TextOutA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        TextOutA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TextOutA$MH() { return TextOutA$MH_; }

    static final FunctionDescriptor TextOutW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor TextOutW$FUNC() { return TextOutW$FUNC_; }

    static final MethodHandle TextOutW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TextOutW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        TextOutW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TextOutW$MH() { return TextOutW$MH_; }

    static final FunctionDescriptor ExtTextOutA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ExtTextOutA$FUNC() { return ExtTextOutA$FUNC_; }

    static final MethodHandle ExtTextOutA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExtTextOutA",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ExtTextOutA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ExtTextOutA$MH() { return ExtTextOutA$MH_; }

    static final FunctionDescriptor ExtTextOutW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ExtTextOutW$FUNC() { return ExtTextOutW$FUNC_; }

    static final MethodHandle ExtTextOutW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExtTextOutW",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ExtTextOutW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ExtTextOutW$MH() { return ExtTextOutW$MH_; }

    static final FunctionDescriptor PolyTextOutA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PolyTextOutA$FUNC() { return PolyTextOutA$FUNC_; }

    static final MethodHandle PolyTextOutA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PolyTextOutA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PolyTextOutA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PolyTextOutA$MH() { return PolyTextOutA$MH_; }

    static final FunctionDescriptor PolyTextOutW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor PolyTextOutW$FUNC() { return PolyTextOutW$FUNC_; }

    static final MethodHandle PolyTextOutW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PolyTextOutW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PolyTextOutW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PolyTextOutW$MH() { return PolyTextOutW$MH_; }

    static final FunctionDescriptor CreatePolygonRgn$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreatePolygonRgn$FUNC() { return CreatePolygonRgn$FUNC_; }

    static final MethodHandle CreatePolygonRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePolygonRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        CreatePolygonRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreatePolygonRgn$MH() { return CreatePolygonRgn$MH_; }

    static final FunctionDescriptor DPtoLP$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DPtoLP$FUNC() { return DPtoLP$FUNC_; }

    static final MethodHandle DPtoLP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DPtoLP",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        DPtoLP$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DPtoLP$MH() { return DPtoLP$MH_; }

    static final FunctionDescriptor LPtoDP$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor LPtoDP$FUNC() { return LPtoDP$FUNC_; }

    static final MethodHandle LPtoDP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LPtoDP",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        LPtoDP$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LPtoDP$MH() { return LPtoDP$MH_; }

    static final FunctionDescriptor Polygon$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor Polygon$FUNC() { return Polygon$FUNC_; }

    static final MethodHandle Polygon$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Polygon",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        Polygon$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Polygon$MH() { return Polygon$MH_; }

    static final FunctionDescriptor Polyline$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor Polyline$FUNC() { return Polyline$FUNC_; }

    static final MethodHandle Polyline$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "Polyline",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        Polyline$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle Polyline$MH() { return Polyline$MH_; }

    static final FunctionDescriptor PolyBezier$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor PolyBezier$FUNC() { return PolyBezier$FUNC_; }

    static final MethodHandle PolyBezier$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PolyBezier",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PolyBezier$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PolyBezier$MH() { return PolyBezier$MH_; }

    static final FunctionDescriptor PolyBezierTo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor PolyBezierTo$FUNC() { return PolyBezierTo$FUNC_; }

    static final MethodHandle PolyBezierTo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PolyBezierTo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PolyBezierTo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PolyBezierTo$MH() { return PolyBezierTo$MH_; }

    static final FunctionDescriptor PolylineTo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor PolylineTo$FUNC() { return PolylineTo$FUNC_; }

    static final MethodHandle PolylineTo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PolylineTo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        PolylineTo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PolylineTo$MH() { return PolylineTo$MH_; }

    static final FunctionDescriptor SetViewportExtEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetViewportExtEx$FUNC() { return SetViewportExtEx$FUNC_; }

    static final MethodHandle SetViewportExtEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetViewportExtEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetViewportExtEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetViewportExtEx$MH() { return SetViewportExtEx$MH_; }

    static final FunctionDescriptor SetViewportOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetViewportOrgEx$FUNC() { return SetViewportOrgEx$FUNC_; }

    static final MethodHandle SetViewportOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetViewportOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetViewportOrgEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetViewportOrgEx$MH() { return SetViewportOrgEx$MH_; }

    static final FunctionDescriptor SetWindowExtEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetWindowExtEx$FUNC() { return SetWindowExtEx$FUNC_; }

    static final MethodHandle SetWindowExtEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowExtEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetWindowExtEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetWindowExtEx$MH() { return SetWindowExtEx$MH_; }

    static final FunctionDescriptor SetWindowOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetWindowOrgEx$FUNC() { return SetWindowOrgEx$FUNC_; }

    static final MethodHandle SetWindowOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetWindowOrgEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetWindowOrgEx$MH() { return SetWindowOrgEx$MH_; }

    static final FunctionDescriptor OffsetViewportOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OffsetViewportOrgEx$FUNC() { return OffsetViewportOrgEx$FUNC_; }

    static final MethodHandle OffsetViewportOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OffsetViewportOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        OffsetViewportOrgEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OffsetViewportOrgEx$MH() { return OffsetViewportOrgEx$MH_; }

    static final FunctionDescriptor OffsetWindowOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor OffsetWindowOrgEx$FUNC() { return OffsetWindowOrgEx$FUNC_; }

    static final MethodHandle OffsetWindowOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "OffsetWindowOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        OffsetWindowOrgEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle OffsetWindowOrgEx$MH() { return OffsetWindowOrgEx$MH_; }

    static final FunctionDescriptor ScaleViewportExtEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ScaleViewportExtEx$FUNC() { return ScaleViewportExtEx$FUNC_; }

    static final MethodHandle ScaleViewportExtEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ScaleViewportExtEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;)I",
        ScaleViewportExtEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ScaleViewportExtEx$MH() { return ScaleViewportExtEx$MH_; }

    static final FunctionDescriptor ScaleWindowExtEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ScaleWindowExtEx$FUNC() { return ScaleWindowExtEx$FUNC_; }

    static final MethodHandle ScaleWindowExtEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ScaleWindowExtEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;)I",
        ScaleWindowExtEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ScaleWindowExtEx$MH() { return ScaleWindowExtEx$MH_; }

    static final FunctionDescriptor SetBitmapDimensionEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetBitmapDimensionEx$FUNC() { return SetBitmapDimensionEx$FUNC_; }

    static final MethodHandle SetBitmapDimensionEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetBitmapDimensionEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetBitmapDimensionEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetBitmapDimensionEx$MH() { return SetBitmapDimensionEx$MH_; }

    static final FunctionDescriptor SetBrushOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetBrushOrgEx$FUNC() { return SetBrushOrgEx$FUNC_; }

    static final MethodHandle SetBrushOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetBrushOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetBrushOrgEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetBrushOrgEx$MH() { return SetBrushOrgEx$MH_; }

    static final FunctionDescriptor GetTextFaceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextFaceA$FUNC() { return GetTextFaceA$FUNC_; }

    static final MethodHandle GetTextFaceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextFaceA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextFaceA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextFaceA$MH() { return GetTextFaceA$MH_; }

    static final FunctionDescriptor GetTextFaceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTextFaceW$FUNC() { return GetTextFaceW$FUNC_; }

    static final MethodHandle GetTextFaceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTextFaceW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetTextFaceW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTextFaceW$MH() { return GetTextFaceW$MH_; }

    static final MemoryLayout tagKERNINGPAIR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("wFirst"),
        C_SHORT.withName("wSecond"),
        C_INT.withName("iKernAmount")
    ).withName("tagKERNINGPAIR");
    static final jdk.incubator.foreign.MemoryLayout tagKERNINGPAIR$struct$LAYOUT() { return tagKERNINGPAIR$struct$LAYOUT_; }

    static final MemoryLayout tagKERNINGPAIR$wFirst$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagKERNINGPAIR$wFirst$LAYOUT() { return tagKERNINGPAIR$wFirst$LAYOUT_; }

    static final VarHandle tagKERNINGPAIR$wFirst$VH_ = tagKERNINGPAIR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wFirst"));
    static final java.lang.invoke.VarHandle tagKERNINGPAIR$wFirst$VH() { return tagKERNINGPAIR$wFirst$VH_; }

    static final MemoryLayout tagKERNINGPAIR$wSecond$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagKERNINGPAIR$wSecond$LAYOUT() { return tagKERNINGPAIR$wSecond$LAYOUT_; }

    static final VarHandle tagKERNINGPAIR$wSecond$VH_ = tagKERNINGPAIR$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSecond"));
    static final java.lang.invoke.VarHandle tagKERNINGPAIR$wSecond$VH() { return tagKERNINGPAIR$wSecond$VH_; }

    static final MemoryLayout tagKERNINGPAIR$iKernAmount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagKERNINGPAIR$iKernAmount$LAYOUT() { return tagKERNINGPAIR$iKernAmount$LAYOUT_; }

    static final VarHandle tagKERNINGPAIR$iKernAmount$VH_ = tagKERNINGPAIR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iKernAmount"));
    static final java.lang.invoke.VarHandle tagKERNINGPAIR$iKernAmount$VH() { return tagKERNINGPAIR$iKernAmount$VH_; }

    static final FunctionDescriptor GetKerningPairsA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetKerningPairsA$FUNC() { return GetKerningPairsA$FUNC_; }

    static final MethodHandle GetKerningPairsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetKerningPairsA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetKerningPairsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetKerningPairsA$MH() { return GetKerningPairsA$MH_; }

    static final FunctionDescriptor GetKerningPairsW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetKerningPairsW$FUNC() { return GetKerningPairsW$FUNC_; }

    static final MethodHandle GetKerningPairsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetKerningPairsW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetKerningPairsW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetKerningPairsW$MH() { return GetKerningPairsW$MH_; }

    static final FunctionDescriptor GetDCOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDCOrgEx$FUNC() { return GetDCOrgEx$FUNC_; }

    static final MethodHandle GetDCOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDCOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDCOrgEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDCOrgEx$MH() { return GetDCOrgEx$MH_; }

    static final FunctionDescriptor FixBrushOrgEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FixBrushOrgEx$FUNC() { return FixBrushOrgEx$FUNC_; }

    static final MethodHandle FixBrushOrgEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FixBrushOrgEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        FixBrushOrgEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FixBrushOrgEx$MH() { return FixBrushOrgEx$MH_; }

    static final FunctionDescriptor UnrealizeObject$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor UnrealizeObject$FUNC() { return UnrealizeObject$FUNC_; }

    static final MethodHandle UnrealizeObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnrealizeObject",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnrealizeObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UnrealizeObject$MH() { return UnrealizeObject$MH_; }

    static final FunctionDescriptor GdiFlush$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor GdiFlush$FUNC() { return GdiFlush$FUNC_; }

    static final MethodHandle GdiFlush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GdiFlush",
        "()I",
        GdiFlush$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GdiFlush$MH() { return GdiFlush$MH_; }

    static final FunctionDescriptor GdiSetBatchLimit$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GdiSetBatchLimit$FUNC() { return GdiSetBatchLimit$FUNC_; }

    static final MethodHandle GdiSetBatchLimit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GdiSetBatchLimit",
        "(I)I",
        GdiSetBatchLimit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GdiSetBatchLimit$MH() { return GdiSetBatchLimit$MH_; }

    static final FunctionDescriptor GdiGetBatchLimit$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor GdiGetBatchLimit$FUNC() { return GdiGetBatchLimit$FUNC_; }

    static final MethodHandle GdiGetBatchLimit$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GdiGetBatchLimit",
        "()I",
        GdiGetBatchLimit$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GdiGetBatchLimit$MH() { return GdiGetBatchLimit$MH_; }

    static final FunctionDescriptor SetICMMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetICMMode$FUNC() { return SetICMMode$FUNC_; }

    static final MethodHandle SetICMMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetICMMode",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetICMMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetICMMode$MH() { return SetICMMode$MH_; }

    static final FunctionDescriptor CheckColorsInGamut$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CheckColorsInGamut$FUNC() { return CheckColorsInGamut$FUNC_; }

    static final MethodHandle CheckColorsInGamut$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckColorsInGamut",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CheckColorsInGamut$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CheckColorsInGamut$MH() { return CheckColorsInGamut$MH_; }

    static final FunctionDescriptor GetColorSpace$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetColorSpace$FUNC() { return GetColorSpace$FUNC_; }

    static final MethodHandle GetColorSpace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetColorSpace",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetColorSpace$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetColorSpace$MH() { return GetColorSpace$MH_; }

    static final FunctionDescriptor GetLogColorSpaceA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetLogColorSpaceA$FUNC() { return GetLogColorSpaceA$FUNC_; }

    static final MethodHandle GetLogColorSpaceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLogColorSpaceA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetLogColorSpaceA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetLogColorSpaceA$MH() { return GetLogColorSpaceA$MH_; }

    static final FunctionDescriptor GetLogColorSpaceW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetLogColorSpaceW$FUNC() { return GetLogColorSpaceW$FUNC_; }

    static final MethodHandle GetLogColorSpaceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLogColorSpaceW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetLogColorSpaceW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetLogColorSpaceW$MH() { return GetLogColorSpaceW$MH_; }

    static final FunctionDescriptor CreateColorSpaceA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateColorSpaceA$FUNC() { return CreateColorSpaceA$FUNC_; }

    static final MethodHandle CreateColorSpaceA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateColorSpaceA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateColorSpaceA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateColorSpaceA$MH() { return CreateColorSpaceA$MH_; }

    static final FunctionDescriptor CreateColorSpaceW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateColorSpaceW$FUNC() { return CreateColorSpaceW$FUNC_; }

    static final MethodHandle CreateColorSpaceW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateColorSpaceW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateColorSpaceW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateColorSpaceW$MH() { return CreateColorSpaceW$MH_; }

    static final FunctionDescriptor SetColorSpace$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetColorSpace$FUNC() { return SetColorSpace$FUNC_; }

    static final MethodHandle SetColorSpace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetColorSpace",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetColorSpace$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetColorSpace$MH() { return SetColorSpace$MH_; }

    static final FunctionDescriptor DeleteColorSpace$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DeleteColorSpace$FUNC() { return DeleteColorSpace$FUNC_; }

    static final MethodHandle DeleteColorSpace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteColorSpace",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DeleteColorSpace$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DeleteColorSpace$MH() { return DeleteColorSpace$MH_; }

    static final FunctionDescriptor GetICMProfileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetICMProfileA$FUNC() { return GetICMProfileA$FUNC_; }

    static final MethodHandle GetICMProfileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetICMProfileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetICMProfileA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetICMProfileA$MH() { return GetICMProfileA$MH_; }

    static final FunctionDescriptor GetICMProfileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetICMProfileW$FUNC() { return GetICMProfileW$FUNC_; }

    static final MethodHandle GetICMProfileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetICMProfileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetICMProfileW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetICMProfileW$MH() { return GetICMProfileW$MH_; }

    static final FunctionDescriptor SetICMProfileA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetICMProfileA$FUNC() { return SetICMProfileA$FUNC_; }

    static final MethodHandle SetICMProfileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetICMProfileA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetICMProfileA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetICMProfileA$MH() { return SetICMProfileA$MH_; }

    static final FunctionDescriptor SetICMProfileW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetICMProfileW$FUNC() { return SetICMProfileW$FUNC_; }

    static final MethodHandle SetICMProfileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetICMProfileW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetICMProfileW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetICMProfileW$MH() { return SetICMProfileW$MH_; }

    static final FunctionDescriptor GetDeviceGammaRamp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDeviceGammaRamp$FUNC() { return GetDeviceGammaRamp$FUNC_; }

    static final MethodHandle GetDeviceGammaRamp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDeviceGammaRamp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDeviceGammaRamp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDeviceGammaRamp$MH() { return GetDeviceGammaRamp$MH_; }

    static final FunctionDescriptor SetDeviceGammaRamp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetDeviceGammaRamp$FUNC() { return SetDeviceGammaRamp$FUNC_; }

    static final MethodHandle SetDeviceGammaRamp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDeviceGammaRamp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetDeviceGammaRamp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetDeviceGammaRamp$MH() { return SetDeviceGammaRamp$MH_; }

    static final FunctionDescriptor ColorMatchToTarget$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor ColorMatchToTarget$FUNC() { return ColorMatchToTarget$FUNC_; }

    static final MethodHandle ColorMatchToTarget$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ColorMatchToTarget",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ColorMatchToTarget$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ColorMatchToTarget$MH() { return ColorMatchToTarget$MH_; }

    static final FunctionDescriptor EnumICMProfilesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumICMProfilesA$FUNC() { return EnumICMProfilesA$FUNC_; }

    static final MethodHandle EnumICMProfilesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumICMProfilesA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumICMProfilesA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumICMProfilesA$MH() { return EnumICMProfilesA$MH_; }

    static final FunctionDescriptor EnumICMProfilesA$proc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumICMProfilesA$proc$FUNC() { return EnumICMProfilesA$proc$FUNC_; }

    static final FunctionDescriptor EnumICMProfilesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumICMProfilesW$FUNC() { return EnumICMProfilesW$FUNC_; }

    static final MethodHandle EnumICMProfilesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumICMProfilesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumICMProfilesW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumICMProfilesW$MH() { return EnumICMProfilesW$MH_; }

    static final FunctionDescriptor EnumICMProfilesW$proc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumICMProfilesW$proc$FUNC() { return EnumICMProfilesW$proc$FUNC_; }

    static final FunctionDescriptor UpdateICMRegKeyA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor UpdateICMRegKeyA$FUNC() { return UpdateICMRegKeyA$FUNC_; }

    static final MethodHandle UpdateICMRegKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UpdateICMRegKeyA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        UpdateICMRegKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UpdateICMRegKeyA$MH() { return UpdateICMRegKeyA$MH_; }

    static final FunctionDescriptor UpdateICMRegKeyW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor UpdateICMRegKeyW$FUNC() { return UpdateICMRegKeyW$FUNC_; }

    static final MethodHandle UpdateICMRegKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UpdateICMRegKeyW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        UpdateICMRegKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UpdateICMRegKeyW$MH() { return UpdateICMRegKeyW$MH_; }

    static final FunctionDescriptor ColorCorrectPalette$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor ColorCorrectPalette$FUNC() { return ColorCorrectPalette$FUNC_; }

    static final MethodHandle ColorCorrectPalette$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ColorCorrectPalette",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        ColorCorrectPalette$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ColorCorrectPalette$MH() { return ColorCorrectPalette$MH_; }

    static final MemoryLayout tagEMR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("iType"),
        C_LONG.withName("nSize")
    ).withName("tagEMR");
    static final jdk.incubator.foreign.MemoryLayout tagEMR$struct$LAYOUT() { return tagEMR$struct$LAYOUT_; }

    static final MemoryLayout tagEMR$iType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMR$iType$LAYOUT() { return tagEMR$iType$LAYOUT_; }

    static final VarHandle tagEMR$iType$VH_ = tagEMR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iType"));
    static final java.lang.invoke.VarHandle tagEMR$iType$VH() { return tagEMR$iType$VH_; }

    static final MemoryLayout tagEMR$nSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMR$nSize$LAYOUT() { return tagEMR$nSize$LAYOUT_; }

    static final VarHandle tagEMR$nSize$VH_ = tagEMR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nSize"));
    static final java.lang.invoke.VarHandle tagEMR$nSize$VH() { return tagEMR$nSize$VH_; }

    static final MemoryLayout tagEMRTEXT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptlReference"),
        C_LONG.withName("nChars"),
        C_LONG.withName("offString"),
        C_LONG.withName("fOptions"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcl"),
        C_LONG.withName("offDx")
    ).withName("tagEMRTEXT");
    static final jdk.incubator.foreign.MemoryLayout tagEMRTEXT$struct$LAYOUT() { return tagEMRTEXT$struct$LAYOUT_; }

    static final MemoryLayout tagEMRTEXT$nChars$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRTEXT$nChars$LAYOUT() { return tagEMRTEXT$nChars$LAYOUT_; }

    static final VarHandle tagEMRTEXT$nChars$VH_ = tagEMRTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nChars"));
    static final java.lang.invoke.VarHandle tagEMRTEXT$nChars$VH() { return tagEMRTEXT$nChars$VH_; }

    static final MemoryLayout tagEMRTEXT$offString$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRTEXT$offString$LAYOUT() { return tagEMRTEXT$offString$LAYOUT_; }

    static final VarHandle tagEMRTEXT$offString$VH_ = tagEMRTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("offString"));
    static final java.lang.invoke.VarHandle tagEMRTEXT$offString$VH() { return tagEMRTEXT$offString$VH_; }

    static final MemoryLayout tagEMRTEXT$fOptions$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRTEXT$fOptions$LAYOUT() { return tagEMRTEXT$fOptions$LAYOUT_; }

    static final VarHandle tagEMRTEXT$fOptions$VH_ = tagEMRTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fOptions"));
    static final java.lang.invoke.VarHandle tagEMRTEXT$fOptions$VH() { return tagEMRTEXT$fOptions$VH_; }

    static final MemoryLayout tagEMRTEXT$offDx$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRTEXT$offDx$LAYOUT() { return tagEMRTEXT$offDx$LAYOUT_; }

    static final VarHandle tagEMRTEXT$offDx$VH_ = tagEMRTEXT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("offDx"));
    static final java.lang.invoke.VarHandle tagEMRTEXT$offDx$VH() { return tagEMRTEXT$offDx$VH_; }

    static final MemoryLayout tagABORTPATH$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr")
    ).withName("tagABORTPATH");
    static final jdk.incubator.foreign.MemoryLayout tagABORTPATH$struct$LAYOUT() { return tagABORTPATH$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSELECTCLIPPATH$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("iMode")
    ).withName("tagEMRSELECTCLIPPATH");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSELECTCLIPPATH$struct$LAYOUT() { return tagEMRSELECTCLIPPATH$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSELECTCLIPPATH$iMode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSELECTCLIPPATH$iMode$LAYOUT() { return tagEMRSELECTCLIPPATH$iMode$LAYOUT_; }

    static final VarHandle tagEMRSELECTCLIPPATH$iMode$VH_ = tagEMRSELECTCLIPPATH$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMode"));
    static final java.lang.invoke.VarHandle tagEMRSELECTCLIPPATH$iMode$VH() { return tagEMRSELECTCLIPPATH$iMode$VH_; }

    static final MemoryLayout tagEMRSETMITERLIMIT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_FLOAT.withName("eMiterLimit")
    ).withName("tagEMRSETMITERLIMIT");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETMITERLIMIT$struct$LAYOUT() { return tagEMRSETMITERLIMIT$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSETMITERLIMIT$eMiterLimit$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETMITERLIMIT$eMiterLimit$LAYOUT() { return tagEMRSETMITERLIMIT$eMiterLimit$LAYOUT_; }

    static final VarHandle tagEMRSETMITERLIMIT$eMiterLimit$VH_ = tagEMRSETMITERLIMIT$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("eMiterLimit"));
    static final java.lang.invoke.VarHandle tagEMRSETMITERLIMIT$eMiterLimit$VH() { return tagEMRSETMITERLIMIT$eMiterLimit$VH_; }

    static final MemoryLayout tagEMRRESTOREDC$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("iRelative")
    ).withName("tagEMRRESTOREDC");
    static final jdk.incubator.foreign.MemoryLayout tagEMRRESTOREDC$struct$LAYOUT() { return tagEMRRESTOREDC$struct$LAYOUT_; }

    static final MemoryLayout tagEMRRESTOREDC$iRelative$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRRESTOREDC$iRelative$LAYOUT() { return tagEMRRESTOREDC$iRelative$LAYOUT_; }

    static final VarHandle tagEMRRESTOREDC$iRelative$VH_ = tagEMRRESTOREDC$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iRelative"));
    static final java.lang.invoke.VarHandle tagEMRRESTOREDC$iRelative$VH() { return tagEMRRESTOREDC$iRelative$VH_; }

    static final MemoryLayout tagEMRSETARCDIRECTION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("iArcDirection")
    ).withName("tagEMRSETARCDIRECTION");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETARCDIRECTION$struct$LAYOUT() { return tagEMRSETARCDIRECTION$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSETARCDIRECTION$iArcDirection$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETARCDIRECTION$iArcDirection$LAYOUT() { return tagEMRSETARCDIRECTION$iArcDirection$LAYOUT_; }

    static final VarHandle tagEMRSETARCDIRECTION$iArcDirection$VH_ = tagEMRSETARCDIRECTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iArcDirection"));
    static final java.lang.invoke.VarHandle tagEMRSETARCDIRECTION$iArcDirection$VH() { return tagEMRSETARCDIRECTION$iArcDirection$VH_; }

    static final MemoryLayout tagEMRSETMAPPERFLAGS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("dwFlags")
    ).withName("tagEMRSETMAPPERFLAGS");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETMAPPERFLAGS$struct$LAYOUT() { return tagEMRSETMAPPERFLAGS$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSETMAPPERFLAGS$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETMAPPERFLAGS$dwFlags$LAYOUT() { return tagEMRSETMAPPERFLAGS$dwFlags$LAYOUT_; }

    static final VarHandle tagEMRSETMAPPERFLAGS$dwFlags$VH_ = tagEMRSETMAPPERFLAGS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagEMRSETMAPPERFLAGS$dwFlags$VH() { return tagEMRSETMAPPERFLAGS$dwFlags$VH_; }

    static final MemoryLayout tagEMRSETTEXTCOLOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("crColor")
    ).withName("tagEMRSETTEXTCOLOR");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETTEXTCOLOR$struct$LAYOUT() { return tagEMRSETTEXTCOLOR$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSETTEXTCOLOR$crColor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETTEXTCOLOR$crColor$LAYOUT() { return tagEMRSETTEXTCOLOR$crColor$LAYOUT_; }

    static final VarHandle tagEMRSETTEXTCOLOR$crColor$VH_ = tagEMRSETTEXTCOLOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("crColor"));
    static final java.lang.invoke.VarHandle tagEMRSETTEXTCOLOR$crColor$VH() { return tagEMRSETTEXTCOLOR$crColor$VH_; }

    static final MemoryLayout tagEMRSELECTOBJECT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("ihObject")
    ).withName("tagEMRSELECTOBJECT");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSELECTOBJECT$struct$LAYOUT() { return tagEMRSELECTOBJECT$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSELECTOBJECT$ihObject$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSELECTOBJECT$ihObject$LAYOUT() { return tagEMRSELECTOBJECT$ihObject$LAYOUT_; }

    static final VarHandle tagEMRSELECTOBJECT$ihObject$VH_ = tagEMRSELECTOBJECT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ihObject"));
    static final java.lang.invoke.VarHandle tagEMRSELECTOBJECT$ihObject$VH() { return tagEMRSELECTOBJECT$ihObject$VH_; }

    static final MemoryLayout tagEMRSELECTPALETTE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("ihPal")
    ).withName("tagEMRSELECTPALETTE");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSELECTPALETTE$struct$LAYOUT() { return tagEMRSELECTPALETTE$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSELECTPALETTE$ihPal$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSELECTPALETTE$ihPal$LAYOUT() { return tagEMRSELECTPALETTE$ihPal$LAYOUT_; }

    static final VarHandle tagEMRSELECTPALETTE$ihPal$VH_ = tagEMRSELECTPALETTE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ihPal"));
    static final java.lang.invoke.VarHandle tagEMRSELECTPALETTE$ihPal$VH() { return tagEMRSELECTPALETTE$ihPal$VH_; }

    static final MemoryLayout tagEMRRESIZEPALETTE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("ihPal"),
        C_LONG.withName("cEntries")
    ).withName("tagEMRRESIZEPALETTE");
    static final jdk.incubator.foreign.MemoryLayout tagEMRRESIZEPALETTE$struct$LAYOUT() { return tagEMRRESIZEPALETTE$struct$LAYOUT_; }

    static final MemoryLayout tagEMRRESIZEPALETTE$ihPal$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRRESIZEPALETTE$ihPal$LAYOUT() { return tagEMRRESIZEPALETTE$ihPal$LAYOUT_; }

    static final VarHandle tagEMRRESIZEPALETTE$ihPal$VH_ = tagEMRRESIZEPALETTE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ihPal"));
    static final java.lang.invoke.VarHandle tagEMRRESIZEPALETTE$ihPal$VH() { return tagEMRRESIZEPALETTE$ihPal$VH_; }

    static final MemoryLayout tagEMRRESIZEPALETTE$cEntries$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRRESIZEPALETTE$cEntries$LAYOUT() { return tagEMRRESIZEPALETTE$cEntries$LAYOUT_; }

    static final VarHandle tagEMRRESIZEPALETTE$cEntries$VH_ = tagEMRRESIZEPALETTE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cEntries"));
    static final java.lang.invoke.VarHandle tagEMRRESIZEPALETTE$cEntries$VH() { return tagEMRRESIZEPALETTE$cEntries$VH_; }

    static final MemoryLayout tagEMRSETPALETTEENTRIES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("ihPal"),
        C_LONG.withName("iStart"),
        C_LONG.withName("cEntries"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_CHAR.withName("peRed"),
            C_CHAR.withName("peGreen"),
            C_CHAR.withName("peBlue"),
            C_CHAR.withName("peFlags")
        ).withName("tagPALETTEENTRY")).withName("aPalEntries")
    ).withName("tagEMRSETPALETTEENTRIES");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETPALETTEENTRIES$struct$LAYOUT() { return tagEMRSETPALETTEENTRIES$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSETPALETTEENTRIES$ihPal$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETPALETTEENTRIES$ihPal$LAYOUT() { return tagEMRSETPALETTEENTRIES$ihPal$LAYOUT_; }

    static final VarHandle tagEMRSETPALETTEENTRIES$ihPal$VH_ = tagEMRSETPALETTEENTRIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ihPal"));
    static final java.lang.invoke.VarHandle tagEMRSETPALETTEENTRIES$ihPal$VH() { return tagEMRSETPALETTEENTRIES$ihPal$VH_; }

    static final MemoryLayout tagEMRSETPALETTEENTRIES$iStart$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETPALETTEENTRIES$iStart$LAYOUT() { return tagEMRSETPALETTEENTRIES$iStart$LAYOUT_; }

    static final VarHandle tagEMRSETPALETTEENTRIES$iStart$VH_ = tagEMRSETPALETTEENTRIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iStart"));
    static final java.lang.invoke.VarHandle tagEMRSETPALETTEENTRIES$iStart$VH() { return tagEMRSETPALETTEENTRIES$iStart$VH_; }

    static final MemoryLayout tagEMRSETPALETTEENTRIES$cEntries$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETPALETTEENTRIES$cEntries$LAYOUT() { return tagEMRSETPALETTEENTRIES$cEntries$LAYOUT_; }

    static final VarHandle tagEMRSETPALETTEENTRIES$cEntries$VH_ = tagEMRSETPALETTEENTRIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cEntries"));
    static final java.lang.invoke.VarHandle tagEMRSETPALETTEENTRIES$cEntries$VH() { return tagEMRSETPALETTEENTRIES$cEntries$VH_; }

    static final MemoryLayout tagEMRSETCOLORADJUSTMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("caSize"),
            C_SHORT.withName("caFlags"),
            C_SHORT.withName("caIlluminantIndex"),
            C_SHORT.withName("caRedGamma"),
            C_SHORT.withName("caGreenGamma"),
            C_SHORT.withName("caBlueGamma"),
            C_SHORT.withName("caReferenceBlack"),
            C_SHORT.withName("caReferenceWhite"),
            C_SHORT.withName("caContrast"),
            C_SHORT.withName("caBrightness"),
            C_SHORT.withName("caColorfulness"),
            C_SHORT.withName("caRedGreenTint")
        ).withName("ColorAdjustment")
    ).withName("tagEMRSETCOLORADJUSTMENT");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETCOLORADJUSTMENT$struct$LAYOUT() { return tagEMRSETCOLORADJUSTMENT$struct$LAYOUT_; }

    static final MemoryLayout tagEMRGDICOMMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("cbData"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Data"),
        MemoryLayout.ofPaddingBits(24)
    ).withName("tagEMRGDICOMMENT");
    static final jdk.incubator.foreign.MemoryLayout tagEMRGDICOMMENT$struct$LAYOUT() { return tagEMRGDICOMMENT$struct$LAYOUT_; }

    static final MemoryLayout tagEMRGDICOMMENT$cbData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRGDICOMMENT$cbData$LAYOUT() { return tagEMRGDICOMMENT$cbData$LAYOUT_; }

    static final VarHandle tagEMRGDICOMMENT$cbData$VH_ = tagEMRGDICOMMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbData"));
    static final java.lang.invoke.VarHandle tagEMRGDICOMMENT$cbData$VH() { return tagEMRGDICOMMENT$cbData$VH_; }

    static final MemoryLayout tagEMREOF$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("nPalEntries"),
        C_LONG.withName("offPalEntries"),
        C_LONG.withName("nSizeLast")
    ).withName("tagEMREOF");
    static final jdk.incubator.foreign.MemoryLayout tagEMREOF$struct$LAYOUT() { return tagEMREOF$struct$LAYOUT_; }

    static final MemoryLayout tagEMREOF$nPalEntries$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMREOF$nPalEntries$LAYOUT() { return tagEMREOF$nPalEntries$LAYOUT_; }

    static final VarHandle tagEMREOF$nPalEntries$VH_ = tagEMREOF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nPalEntries"));
    static final java.lang.invoke.VarHandle tagEMREOF$nPalEntries$VH() { return tagEMREOF$nPalEntries$VH_; }

    static final MemoryLayout tagEMREOF$offPalEntries$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMREOF$offPalEntries$LAYOUT() { return tagEMREOF$offPalEntries$LAYOUT_; }

    static final VarHandle tagEMREOF$offPalEntries$VH_ = tagEMREOF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("offPalEntries"));
    static final java.lang.invoke.VarHandle tagEMREOF$offPalEntries$VH() { return tagEMREOF$offPalEntries$VH_; }

    static final MemoryLayout tagEMREOF$nSizeLast$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMREOF$nSizeLast$LAYOUT() { return tagEMREOF$nSizeLast$LAYOUT_; }

    static final VarHandle tagEMREOF$nSizeLast$VH_ = tagEMREOF$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nSizeLast"));
    static final java.lang.invoke.VarHandle tagEMREOF$nSizeLast$VH() { return tagEMREOF$nSizeLast$VH_; }

    static final MemoryLayout tagEMRLINETO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptl")
    ).withName("tagEMRLINETO");
    static final jdk.incubator.foreign.MemoryLayout tagEMRLINETO$struct$LAYOUT() { return tagEMRLINETO$struct$LAYOUT_; }

    static final MemoryLayout tagEMROFFSETCLIPRGN$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptlOffset")
    ).withName("tagEMROFFSETCLIPRGN");
    static final jdk.incubator.foreign.MemoryLayout tagEMROFFSETCLIPRGN$struct$LAYOUT() { return tagEMROFFSETCLIPRGN$struct$LAYOUT_; }

    static final MemoryLayout tagEMRFILLPATH$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rclBounds")
    ).withName("tagEMRFILLPATH");
    static final jdk.incubator.foreign.MemoryLayout tagEMRFILLPATH$struct$LAYOUT() { return tagEMRFILLPATH$struct$LAYOUT_; }

    static final MemoryLayout tagEMREXCLUDECLIPRECT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rclClip")
    ).withName("tagEMREXCLUDECLIPRECT");
    static final jdk.incubator.foreign.MemoryLayout tagEMREXCLUDECLIPRECT$struct$LAYOUT() { return tagEMREXCLUDECLIPRECT$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSETVIEWPORTORGEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptlOrigin")
    ).withName("tagEMRSETVIEWPORTORGEX");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETVIEWPORTORGEX$struct$LAYOUT() { return tagEMRSETVIEWPORTORGEX$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSETVIEWPORTEXTEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cx"),
            C_LONG.withName("cy")
        ).withName("szlExtent")
    ).withName("tagEMRSETVIEWPORTEXTEX");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETVIEWPORTEXTEX$struct$LAYOUT() { return tagEMRSETVIEWPORTEXTEX$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSCALEVIEWPORTEXTEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        C_LONG.withName("xNum"),
        C_LONG.withName("xDenom"),
        C_LONG.withName("yNum"),
        C_LONG.withName("yDenom")
    ).withName("tagEMRSCALEVIEWPORTEXTEX");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSCALEVIEWPORTEXTEX$struct$LAYOUT() { return tagEMRSCALEVIEWPORTEXTEX$struct$LAYOUT_; }

    static final MemoryLayout tagEMRSCALEVIEWPORTEXTEX$xNum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSCALEVIEWPORTEXTEX$xNum$LAYOUT() { return tagEMRSCALEVIEWPORTEXTEX$xNum$LAYOUT_; }

    static final VarHandle tagEMRSCALEVIEWPORTEXTEX$xNum$VH_ = tagEMRSCALEVIEWPORTEXTEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("xNum"));
    static final java.lang.invoke.VarHandle tagEMRSCALEVIEWPORTEXTEX$xNum$VH() { return tagEMRSCALEVIEWPORTEXTEX$xNum$VH_; }

    static final MemoryLayout tagEMRSCALEVIEWPORTEXTEX$xDenom$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSCALEVIEWPORTEXTEX$xDenom$LAYOUT() { return tagEMRSCALEVIEWPORTEXTEX$xDenom$LAYOUT_; }

    static final VarHandle tagEMRSCALEVIEWPORTEXTEX$xDenom$VH_ = tagEMRSCALEVIEWPORTEXTEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("xDenom"));
    static final java.lang.invoke.VarHandle tagEMRSCALEVIEWPORTEXTEX$xDenom$VH() { return tagEMRSCALEVIEWPORTEXTEX$xDenom$VH_; }

    static final MemoryLayout tagEMRSCALEVIEWPORTEXTEX$yNum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSCALEVIEWPORTEXTEX$yNum$LAYOUT() { return tagEMRSCALEVIEWPORTEXTEX$yNum$LAYOUT_; }

    static final VarHandle tagEMRSCALEVIEWPORTEXTEX$yNum$VH_ = tagEMRSCALEVIEWPORTEXTEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("yNum"));
    static final java.lang.invoke.VarHandle tagEMRSCALEVIEWPORTEXTEX$yNum$VH() { return tagEMRSCALEVIEWPORTEXTEX$yNum$VH_; }

    static final MemoryLayout tagEMRSCALEVIEWPORTEXTEX$yDenom$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRSCALEVIEWPORTEXTEX$yDenom$LAYOUT() { return tagEMRSCALEVIEWPORTEXTEX$yDenom$LAYOUT_; }

    static final VarHandle tagEMRSCALEVIEWPORTEXTEX$yDenom$VH_ = tagEMRSCALEVIEWPORTEXTEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("yDenom"));
    static final java.lang.invoke.VarHandle tagEMRSCALEVIEWPORTEXTEX$yDenom$VH() { return tagEMRSCALEVIEWPORTEXTEX$yDenom$VH_; }

    static final MemoryLayout tagEMRSETWORLDTRANSFORM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.ofStruct(
            C_FLOAT.withName("eM11"),
            C_FLOAT.withName("eM12"),
            C_FLOAT.withName("eM21"),
            C_FLOAT.withName("eM22"),
            C_FLOAT.withName("eDx"),
            C_FLOAT.withName("eDy")
        ).withName("xform")
    ).withName("tagEMRSETWORLDTRANSFORM");
    static final jdk.incubator.foreign.MemoryLayout tagEMRSETWORLDTRANSFORM$struct$LAYOUT() { return tagEMRSETWORLDTRANSFORM$struct$LAYOUT_; }

    static final MemoryLayout tagEMRMODIFYWORLDTRANSFORM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("iType"),
            C_LONG.withName("nSize")
        ).withName("emr"),
        MemoryLayout.ofStruct(
            C_FLOAT.withName("eM11"),
            C_FLOAT.withName("eM12"),
            C_FLOAT.withName("eM21"),
            C_FLOAT.withName("eM22"),
            C_FLOAT.withName("eDx"),
            C_FLOAT.withName("eDy")
        ).withName("xform"),
        C_LONG.withName("iMode")
    ).withName("tagEMRMODIFYWORLDTRANSFORM");
    static final jdk.incubator.foreign.MemoryLayout tagEMRMODIFYWORLDTRANSFORM$struct$LAYOUT() { return tagEMRMODIFYWORLDTRANSFORM$struct$LAYOUT_; }

    static final MemoryLayout tagEMRMODIFYWORLDTRANSFORM$iMode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagEMRMODIFYWORLDTRANSFORM$iMode$LAYOUT() { return tagEMRMODIFYWORLDTRANSFORM$iMode$LAYOUT_; }

    static final VarHandle tagEMRMODIFYWORLDTRANSFORM$iMode$VH_ = tagEMRMODIFYWORLDTRANSFORM$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMode"));
    static final java.lang.invoke.VarHandle tagEMRMODIFYWORLDTRANSFORM$iMode$VH() { return tagEMRMODIFYWORLDTRANSFORM$iMode$VH_; }

}

