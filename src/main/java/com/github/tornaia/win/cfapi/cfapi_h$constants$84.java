// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$84 extends cfapi_h$constants$83 {

    /* package-private */ cfapi_h$constants$84() {}
    static final FunctionDescriptor IEnumSTATPROPSTG_RemoteNext_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATPROPSTG_RemoteNext_Proxy$FUNC() { return IEnumSTATPROPSTG_RemoteNext_Proxy$FUNC_; }

    static final MethodHandle IEnumSTATPROPSTG_RemoteNext_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATPROPSTG_RemoteNext_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumSTATPROPSTG_RemoteNext_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATPROPSTG_RemoteNext_Proxy$MH() { return IEnumSTATPROPSTG_RemoteNext_Proxy$MH_; }

    static final FunctionDescriptor IEnumSTATPROPSTG_RemoteNext_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATPROPSTG_RemoteNext_Stub$FUNC() { return IEnumSTATPROPSTG_RemoteNext_Stub$FUNC_; }

    static final MethodHandle IEnumSTATPROPSTG_RemoteNext_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATPROPSTG_RemoteNext_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IEnumSTATPROPSTG_RemoteNext_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATPROPSTG_RemoteNext_Stub$MH() { return IEnumSTATPROPSTG_RemoteNext_Stub$MH_; }

    static final MemoryLayout IID_IEnumSTATPROPSETSTG$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IEnumSTATPROPSETSTG$LAYOUT() { return IID_IEnumSTATPROPSETSTG$LAYOUT_; }

    static final MemorySegment IID_IEnumSTATPROPSETSTG$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IEnumSTATPROPSETSTG", IID_IEnumSTATPROPSETSTG$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IEnumSTATPROPSETSTG$SEGMENT() { return IID_IEnumSTATPROPSETSTG$SEGMENT_; }

    static final MemoryLayout IEnumSTATPROPSETSTGVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Next"),
        C_POINTER.withName("Skip"),
        C_POINTER.withName("Reset"),
        C_POINTER.withName("Clone")
    ).withName("IEnumSTATPROPSETSTGVtbl");
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTGVtbl$struct$LAYOUT() { return IEnumSTATPROPSETSTGVtbl$struct$LAYOUT_; }

    static final MemoryLayout IEnumSTATPROPSETSTGVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTGVtbl$QueryInterface$LAYOUT() { return IEnumSTATPROPSETSTGVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IEnumSTATPROPSETSTGVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATPROPSETSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IEnumSTATPROPSETSTGVtbl$QueryInterface$VH() { return IEnumSTATPROPSETSTGVtbl$QueryInterface$VH_; }

    static final MemoryLayout IEnumSTATPROPSETSTGVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTGVtbl$AddRef$LAYOUT() { return IEnumSTATPROPSETSTGVtbl$AddRef$LAYOUT_; }

    static final VarHandle IEnumSTATPROPSETSTGVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATPROPSETSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IEnumSTATPROPSETSTGVtbl$AddRef$VH() { return IEnumSTATPROPSETSTGVtbl$AddRef$VH_; }

    static final MemoryLayout IEnumSTATPROPSETSTGVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTGVtbl$Release$LAYOUT() { return IEnumSTATPROPSETSTGVtbl$Release$LAYOUT_; }

    static final VarHandle IEnumSTATPROPSETSTGVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATPROPSETSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IEnumSTATPROPSETSTGVtbl$Release$VH() { return IEnumSTATPROPSETSTGVtbl$Release$VH_; }

    static final MemoryLayout IEnumSTATPROPSETSTGVtbl$Next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTGVtbl$Next$LAYOUT() { return IEnumSTATPROPSETSTGVtbl$Next$LAYOUT_; }

    static final VarHandle IEnumSTATPROPSETSTGVtbl$Next$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATPROPSETSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    static final java.lang.invoke.VarHandle IEnumSTATPROPSETSTGVtbl$Next$VH() { return IEnumSTATPROPSETSTGVtbl$Next$VH_; }

    static final MemoryLayout IEnumSTATPROPSETSTGVtbl$Skip$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTGVtbl$Skip$LAYOUT() { return IEnumSTATPROPSETSTGVtbl$Skip$LAYOUT_; }

    static final VarHandle IEnumSTATPROPSETSTGVtbl$Skip$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATPROPSETSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Skip")));
    static final java.lang.invoke.VarHandle IEnumSTATPROPSETSTGVtbl$Skip$VH() { return IEnumSTATPROPSETSTGVtbl$Skip$VH_; }

    static final MemoryLayout IEnumSTATPROPSETSTGVtbl$Reset$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTGVtbl$Reset$LAYOUT() { return IEnumSTATPROPSETSTGVtbl$Reset$LAYOUT_; }

    static final VarHandle IEnumSTATPROPSETSTGVtbl$Reset$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATPROPSETSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reset")));
    static final java.lang.invoke.VarHandle IEnumSTATPROPSETSTGVtbl$Reset$VH() { return IEnumSTATPROPSETSTGVtbl$Reset$VH_; }

    static final MemoryLayout IEnumSTATPROPSETSTGVtbl$Clone$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTGVtbl$Clone$LAYOUT() { return IEnumSTATPROPSETSTGVtbl$Clone$LAYOUT_; }

    static final VarHandle IEnumSTATPROPSETSTGVtbl$Clone$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATPROPSETSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Clone")));
    static final java.lang.invoke.VarHandle IEnumSTATPROPSETSTGVtbl$Clone$VH() { return IEnumSTATPROPSETSTGVtbl$Clone$VH_; }

    static final MemoryLayout IEnumSTATPROPSETSTG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IEnumSTATPROPSETSTG");
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTG$struct$LAYOUT() { return IEnumSTATPROPSETSTG$struct$LAYOUT_; }

    static final MemoryLayout IEnumSTATPROPSETSTG$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATPROPSETSTG$lpVtbl$LAYOUT() { return IEnumSTATPROPSETSTG$lpVtbl$LAYOUT_; }

    static final VarHandle IEnumSTATPROPSETSTG$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATPROPSETSTG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IEnumSTATPROPSETSTG$lpVtbl$VH() { return IEnumSTATPROPSETSTG$lpVtbl$VH_; }

    static final FunctionDescriptor IEnumSTATPROPSETSTG_RemoteNext_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATPROPSETSTG_RemoteNext_Proxy$FUNC() { return IEnumSTATPROPSETSTG_RemoteNext_Proxy$FUNC_; }

    static final MethodHandle IEnumSTATPROPSETSTG_RemoteNext_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATPROPSETSTG_RemoteNext_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumSTATPROPSETSTG_RemoteNext_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATPROPSETSTG_RemoteNext_Proxy$MH() { return IEnumSTATPROPSETSTG_RemoteNext_Proxy$MH_; }

    static final FunctionDescriptor IEnumSTATPROPSETSTG_RemoteNext_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATPROPSETSTG_RemoteNext_Stub$FUNC() { return IEnumSTATPROPSETSTG_RemoteNext_Stub$FUNC_; }

    static final MethodHandle IEnumSTATPROPSETSTG_RemoteNext_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATPROPSETSTG_RemoteNext_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IEnumSTATPROPSETSTG_RemoteNext_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATPROPSETSTG_RemoteNext_Stub$MH() { return IEnumSTATPROPSETSTG_RemoteNext_Stub$MH_; }

    static final MemoryLayout __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$VH() { return __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec", __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$VH() { return __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec", __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec$SEGMENT_; }

    static final FunctionDescriptor LPSAFEARRAY_UserSize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LPSAFEARRAY_UserSize$FUNC() { return LPSAFEARRAY_UserSize$FUNC_; }

    static final MethodHandle LPSAFEARRAY_UserSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LPSAFEARRAY_UserSize",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        LPSAFEARRAY_UserSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LPSAFEARRAY_UserSize$MH() { return LPSAFEARRAY_UserSize$MH_; }

    static final FunctionDescriptor LPSAFEARRAY_UserMarshal$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LPSAFEARRAY_UserMarshal$FUNC() { return LPSAFEARRAY_UserMarshal$FUNC_; }

    static final MethodHandle LPSAFEARRAY_UserMarshal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LPSAFEARRAY_UserMarshal",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LPSAFEARRAY_UserMarshal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LPSAFEARRAY_UserMarshal$MH() { return LPSAFEARRAY_UserMarshal$MH_; }

    static final FunctionDescriptor LPSAFEARRAY_UserUnmarshal$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LPSAFEARRAY_UserUnmarshal$FUNC() { return LPSAFEARRAY_UserUnmarshal$FUNC_; }

    static final MethodHandle LPSAFEARRAY_UserUnmarshal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LPSAFEARRAY_UserUnmarshal",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LPSAFEARRAY_UserUnmarshal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LPSAFEARRAY_UserUnmarshal$MH() { return LPSAFEARRAY_UserUnmarshal$MH_; }

    static final FunctionDescriptor LPSAFEARRAY_UserFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LPSAFEARRAY_UserFree$FUNC() { return LPSAFEARRAY_UserFree$FUNC_; }

    static final MethodHandle LPSAFEARRAY_UserFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LPSAFEARRAY_UserFree",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        LPSAFEARRAY_UserFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LPSAFEARRAY_UserFree$MH() { return LPSAFEARRAY_UserFree$MH_; }

    static final FunctionDescriptor LPSAFEARRAY_UserSize64$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LPSAFEARRAY_UserSize64$FUNC() { return LPSAFEARRAY_UserSize64$FUNC_; }

    static final MethodHandle LPSAFEARRAY_UserSize64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LPSAFEARRAY_UserSize64",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        LPSAFEARRAY_UserSize64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LPSAFEARRAY_UserSize64$MH() { return LPSAFEARRAY_UserSize64$MH_; }

    static final FunctionDescriptor LPSAFEARRAY_UserMarshal64$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LPSAFEARRAY_UserMarshal64$FUNC() { return LPSAFEARRAY_UserMarshal64$FUNC_; }

    static final MethodHandle LPSAFEARRAY_UserMarshal64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LPSAFEARRAY_UserMarshal64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LPSAFEARRAY_UserMarshal64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LPSAFEARRAY_UserMarshal64$MH() { return LPSAFEARRAY_UserMarshal64$MH_; }

    static final FunctionDescriptor LPSAFEARRAY_UserUnmarshal64$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LPSAFEARRAY_UserUnmarshal64$FUNC() { return LPSAFEARRAY_UserUnmarshal64$FUNC_; }

    static final MethodHandle LPSAFEARRAY_UserUnmarshal64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LPSAFEARRAY_UserUnmarshal64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LPSAFEARRAY_UserUnmarshal64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LPSAFEARRAY_UserUnmarshal64$MH() { return LPSAFEARRAY_UserUnmarshal64$MH_; }

    static final FunctionDescriptor LPSAFEARRAY_UserFree64$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LPSAFEARRAY_UserFree64$FUNC() { return LPSAFEARRAY_UserFree64$FUNC_; }

    static final MethodHandle LPSAFEARRAY_UserFree64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LPSAFEARRAY_UserFree64",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        LPSAFEARRAY_UserFree64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LPSAFEARRAY_UserFree64$MH() { return LPSAFEARRAY_UserFree64$MH_; }

    static final FunctionDescriptor IEnumSTATPROPSTG_Next_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATPROPSTG_Next_Proxy$FUNC() { return IEnumSTATPROPSTG_Next_Proxy$FUNC_; }

    static final MethodHandle IEnumSTATPROPSTG_Next_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATPROPSTG_Next_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumSTATPROPSTG_Next_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATPROPSTG_Next_Proxy$MH() { return IEnumSTATPROPSTG_Next_Proxy$MH_; }

    static final FunctionDescriptor IEnumSTATPROPSTG_Next_Stub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATPROPSTG_Next_Stub$FUNC() { return IEnumSTATPROPSTG_Next_Stub$FUNC_; }

    static final MethodHandle IEnumSTATPROPSTG_Next_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATPROPSTG_Next_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumSTATPROPSTG_Next_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATPROPSTG_Next_Stub$MH() { return IEnumSTATPROPSTG_Next_Stub$MH_; }

    static final FunctionDescriptor IEnumSTATPROPSETSTG_Next_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATPROPSETSTG_Next_Proxy$FUNC() { return IEnumSTATPROPSETSTG_Next_Proxy$FUNC_; }

    static final MethodHandle IEnumSTATPROPSETSTG_Next_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATPROPSETSTG_Next_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumSTATPROPSETSTG_Next_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATPROPSETSTG_Next_Proxy$MH() { return IEnumSTATPROPSETSTG_Next_Proxy$MH_; }

    static final FunctionDescriptor IEnumSTATPROPSETSTG_Next_Stub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATPROPSETSTG_Next_Stub$FUNC() { return IEnumSTATPROPSETSTG_Next_Stub$FUNC_; }

    static final MethodHandle IEnumSTATPROPSETSTG_Next_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATPROPSETSTG_Next_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumSTATPROPSETSTG_Next_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATPROPSETSTG_Next_Stub$MH() { return IEnumSTATPROPSETSTG_Next_Stub$MH_; }

    static final FunctionDescriptor StgCreateDocfile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgCreateDocfile$FUNC() { return StgCreateDocfile$FUNC_; }

    static final MethodHandle StgCreateDocfile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgCreateDocfile",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        StgCreateDocfile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgCreateDocfile$MH() { return StgCreateDocfile$MH_; }

    static final FunctionDescriptor StgCreateDocfileOnILockBytes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgCreateDocfileOnILockBytes$FUNC() { return StgCreateDocfileOnILockBytes$FUNC_; }

    static final MethodHandle StgCreateDocfileOnILockBytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgCreateDocfileOnILockBytes",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        StgCreateDocfileOnILockBytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgCreateDocfileOnILockBytes$MH() { return StgCreateDocfileOnILockBytes$MH_; }

    static final FunctionDescriptor StgOpenStorage$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgOpenStorage$FUNC() { return StgOpenStorage$FUNC_; }

    static final MethodHandle StgOpenStorage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgOpenStorage",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        StgOpenStorage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgOpenStorage$MH() { return StgOpenStorage$MH_; }

    static final FunctionDescriptor StgOpenStorageOnILockBytes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgOpenStorageOnILockBytes$FUNC() { return StgOpenStorageOnILockBytes$FUNC_; }

    static final MethodHandle StgOpenStorageOnILockBytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgOpenStorageOnILockBytes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        StgOpenStorageOnILockBytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgOpenStorageOnILockBytes$MH() { return StgOpenStorageOnILockBytes$MH_; }

    static final FunctionDescriptor StgIsStorageFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgIsStorageFile$FUNC() { return StgIsStorageFile$FUNC_; }

    static final MethodHandle StgIsStorageFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgIsStorageFile",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        StgIsStorageFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgIsStorageFile$MH() { return StgIsStorageFile$MH_; }

    static final FunctionDescriptor StgIsStorageILockBytes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgIsStorageILockBytes$FUNC() { return StgIsStorageILockBytes$FUNC_; }

    static final MethodHandle StgIsStorageILockBytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgIsStorageILockBytes",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        StgIsStorageILockBytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgIsStorageILockBytes$MH() { return StgIsStorageILockBytes$MH_; }

    static final FunctionDescriptor StgSetTimes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgSetTimes$FUNC() { return StgSetTimes$FUNC_; }

    static final MethodHandle StgSetTimes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgSetTimes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StgSetTimes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgSetTimes$MH() { return StgSetTimes$MH_; }

    static final MemoryLayout tagSTGOPTIONS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("usVersion"),
        C_SHORT.withName("reserved"),
        C_LONG.withName("ulSectorSize"),
        C_POINTER.withName("pwcsTemplateFile")
    ).withName("tagSTGOPTIONS");
    static final jdk.incubator.foreign.MemoryLayout tagSTGOPTIONS$struct$LAYOUT() { return tagSTGOPTIONS$struct$LAYOUT_; }

    static final MemoryLayout tagSTGOPTIONS$usVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagSTGOPTIONS$usVersion$LAYOUT() { return tagSTGOPTIONS$usVersion$LAYOUT_; }

    static final VarHandle tagSTGOPTIONS$usVersion$VH_ = tagSTGOPTIONS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("usVersion"));
    static final java.lang.invoke.VarHandle tagSTGOPTIONS$usVersion$VH() { return tagSTGOPTIONS$usVersion$VH_; }

    static final MemoryLayout tagSTGOPTIONS$reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagSTGOPTIONS$reserved$LAYOUT() { return tagSTGOPTIONS$reserved$LAYOUT_; }

    static final VarHandle tagSTGOPTIONS$reserved$VH_ = tagSTGOPTIONS$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("reserved"));
    static final java.lang.invoke.VarHandle tagSTGOPTIONS$reserved$VH() { return tagSTGOPTIONS$reserved$VH_; }

    static final MemoryLayout tagSTGOPTIONS$ulSectorSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSTGOPTIONS$ulSectorSize$LAYOUT() { return tagSTGOPTIONS$ulSectorSize$LAYOUT_; }

    static final VarHandle tagSTGOPTIONS$ulSectorSize$VH_ = tagSTGOPTIONS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulSectorSize"));
    static final java.lang.invoke.VarHandle tagSTGOPTIONS$ulSectorSize$VH() { return tagSTGOPTIONS$ulSectorSize$VH_; }

    static final MemoryLayout tagSTGOPTIONS$pwcsTemplateFile$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagSTGOPTIONS$pwcsTemplateFile$LAYOUT() { return tagSTGOPTIONS$pwcsTemplateFile$LAYOUT_; }

    static final VarHandle tagSTGOPTIONS$pwcsTemplateFile$VH_ = MemoryHandles.asAddressVarHandle(tagSTGOPTIONS$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pwcsTemplateFile")));
    static final java.lang.invoke.VarHandle tagSTGOPTIONS$pwcsTemplateFile$VH() { return tagSTGOPTIONS$pwcsTemplateFile$VH_; }

    static final FunctionDescriptor StgCreateStorageEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgCreateStorageEx$FUNC() { return StgCreateStorageEx$FUNC_; }

    static final MethodHandle StgCreateStorageEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgCreateStorageEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StgCreateStorageEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgCreateStorageEx$MH() { return StgCreateStorageEx$MH_; }

    static final FunctionDescriptor StgOpenStorageEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgOpenStorageEx$FUNC() { return StgOpenStorageEx$FUNC_; }

    static final MethodHandle StgOpenStorageEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgOpenStorageEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StgOpenStorageEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgOpenStorageEx$MH() { return StgOpenStorageEx$MH_; }

    static final FunctionDescriptor StgCreatePropStg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgCreatePropStg$FUNC() { return StgCreatePropStg$FUNC_; }

    static final MethodHandle StgCreatePropStg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgCreatePropStg",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        StgCreatePropStg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgCreatePropStg$MH() { return StgCreatePropStg$MH_; }

    static final FunctionDescriptor StgOpenPropStg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgOpenPropStg$FUNC() { return StgOpenPropStg$FUNC_; }

    static final MethodHandle StgOpenPropStg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgOpenPropStg",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        StgOpenPropStg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgOpenPropStg$MH() { return StgOpenPropStg$MH_; }

    static final FunctionDescriptor StgCreatePropSetStg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgCreatePropSetStg$FUNC() { return StgCreatePropSetStg$FUNC_; }

    static final MethodHandle StgCreatePropSetStg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgCreatePropSetStg",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        StgCreatePropSetStg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgCreatePropSetStg$MH() { return StgCreatePropSetStg$MH_; }

    static final FunctionDescriptor FmtIdToPropStgName$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FmtIdToPropStgName$FUNC() { return FmtIdToPropStgName$FUNC_; }

    static final MethodHandle FmtIdToPropStgName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FmtIdToPropStgName",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        FmtIdToPropStgName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FmtIdToPropStgName$MH() { return FmtIdToPropStgName$MH_; }

    static final FunctionDescriptor PropStgNameToFmtId$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PropStgNameToFmtId$FUNC() { return PropStgNameToFmtId$FUNC_; }

    static final MethodHandle PropStgNameToFmtId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PropStgNameToFmtId",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PropStgNameToFmtId$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PropStgNameToFmtId$MH() { return PropStgNameToFmtId$MH_; }

    static final FunctionDescriptor ReadClassStg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadClassStg$FUNC() { return ReadClassStg$FUNC_; }

    static final MethodHandle ReadClassStg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadClassStg",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadClassStg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadClassStg$MH() { return ReadClassStg$MH_; }

    static final FunctionDescriptor WriteClassStg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteClassStg$FUNC() { return WriteClassStg$FUNC_; }

    static final MethodHandle WriteClassStg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteClassStg",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteClassStg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteClassStg$MH() { return WriteClassStg$MH_; }

    static final FunctionDescriptor ReadClassStm$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadClassStm$FUNC() { return ReadClassStm$FUNC_; }

    static final MethodHandle ReadClassStm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadClassStm",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadClassStm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadClassStm$MH() { return ReadClassStm$MH_; }

    static final FunctionDescriptor WriteClassStm$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteClassStm$FUNC() { return WriteClassStm$FUNC_; }

    static final MethodHandle WriteClassStm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteClassStm",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteClassStm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteClassStm$MH() { return WriteClassStm$MH_; }

    static final FunctionDescriptor GetHGlobalFromILockBytes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetHGlobalFromILockBytes$FUNC() { return GetHGlobalFromILockBytes$FUNC_; }

    static final MethodHandle GetHGlobalFromILockBytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetHGlobalFromILockBytes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetHGlobalFromILockBytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetHGlobalFromILockBytes$MH() { return GetHGlobalFromILockBytes$MH_; }

    static final FunctionDescriptor CreateILockBytesOnHGlobal$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateILockBytesOnHGlobal$FUNC() { return CreateILockBytesOnHGlobal$FUNC_; }

    static final MethodHandle CreateILockBytesOnHGlobal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateILockBytesOnHGlobal",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CreateILockBytesOnHGlobal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateILockBytesOnHGlobal$MH() { return CreateILockBytesOnHGlobal$MH_; }

    static final FunctionDescriptor GetConvertStg$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConvertStg$FUNC() { return GetConvertStg$FUNC_; }

    static final MethodHandle GetConvertStg$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConvertStg",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConvertStg$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConvertStg$MH() { return GetConvertStg$MH_; }

    static final int COINIT_APARTMENTTHREADED() { return (int)2L; }

    static final int COINIT_MULTITHREADED() { return (int)0L; }

    static final int COINIT_DISABLE_OLE1DDE() { return (int)4L; }

    static final int COINIT_SPEED_OVER_MEMORY() { return (int)8L; }

    static final FunctionDescriptor CoBuildVersion$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoBuildVersion$FUNC() { return CoBuildVersion$FUNC_; }

    static final MethodHandle CoBuildVersion$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoBuildVersion",
        "()I",
        CoBuildVersion$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoBuildVersion$MH() { return CoBuildVersion$MH_; }

    static final FunctionDescriptor CoInitialize$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoInitialize$FUNC() { return CoInitialize$FUNC_; }

    static final MethodHandle CoInitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoInitialize",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoInitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoInitialize$MH() { return CoInitialize$MH_; }

    static final FunctionDescriptor CoRegisterMallocSpy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterMallocSpy$FUNC() { return CoRegisterMallocSpy$FUNC_; }

    static final MethodHandle CoRegisterMallocSpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterMallocSpy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterMallocSpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterMallocSpy$MH() { return CoRegisterMallocSpy$MH_; }

    static final FunctionDescriptor CoRevokeMallocSpy$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoRevokeMallocSpy$FUNC() { return CoRevokeMallocSpy$FUNC_; }

    static final MethodHandle CoRevokeMallocSpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRevokeMallocSpy",
        "()I",
        CoRevokeMallocSpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRevokeMallocSpy$MH() { return CoRevokeMallocSpy$MH_; }

    static final FunctionDescriptor CoCreateStandardMalloc$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateStandardMalloc$FUNC() { return CoCreateStandardMalloc$FUNC_; }

    static final MethodHandle CoCreateStandardMalloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateStandardMalloc",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        CoCreateStandardMalloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateStandardMalloc$MH() { return CoCreateStandardMalloc$MH_; }

    static final FunctionDescriptor CoRegisterInitializeSpy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterInitializeSpy$FUNC() { return CoRegisterInitializeSpy$FUNC_; }

    static final MethodHandle CoRegisterInitializeSpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterInitializeSpy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterInitializeSpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterInitializeSpy$MH() { return CoRegisterInitializeSpy$MH_; }

    static final FunctionDescriptor CoRevokeInitializeSpy$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRevokeInitializeSpy$FUNC() { return CoRevokeInitializeSpy$FUNC_; }

    static final MethodHandle CoRevokeInitializeSpy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRevokeInitializeSpy",
        "(Ljdk/incubator/foreign/MemorySegment;)I",
        CoRevokeInitializeSpy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRevokeInitializeSpy$MH() { return CoRevokeInitializeSpy$MH_; }

    static final int SD_LAUNCHPERMISSIONS() { return (int)0L; }

    static final int SD_ACCESSPERMISSIONS() { return (int)1L; }

    static final int SD_LAUNCHRESTRICTIONS() { return (int)2L; }

    static final int SD_ACCESSRESTRICTIONS() { return (int)3L; }

    static final FunctionDescriptor CoGetSystemSecurityPermissions$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetSystemSecurityPermissions$FUNC() { return CoGetSystemSecurityPermissions$FUNC_; }

    static final MethodHandle CoGetSystemSecurityPermissions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetSystemSecurityPermissions",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        CoGetSystemSecurityPermissions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetSystemSecurityPermissions$MH() { return CoGetSystemSecurityPermissions$MH_; }

    static final FunctionDescriptor CoLoadLibrary$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoLoadLibrary$FUNC() { return CoLoadLibrary$FUNC_; }

    static final MethodHandle CoLoadLibrary$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoLoadLibrary",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CoLoadLibrary$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoLoadLibrary$MH() { return CoLoadLibrary$MH_; }

    static final FunctionDescriptor CoFreeLibrary$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoFreeLibrary$FUNC() { return CoFreeLibrary$FUNC_; }

    static final MethodHandle CoFreeLibrary$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoFreeLibrary",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CoFreeLibrary$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoFreeLibrary$MH() { return CoFreeLibrary$MH_; }

    static final FunctionDescriptor CoFreeAllLibraries$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor CoFreeAllLibraries$FUNC() { return CoFreeAllLibraries$FUNC_; }

    static final MethodHandle CoFreeAllLibraries$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoFreeAllLibraries",
        "()V",
        CoFreeAllLibraries$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoFreeAllLibraries$MH() { return CoFreeAllLibraries$MH_; }

    static final FunctionDescriptor CoGetInstanceFromFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetInstanceFromFile$FUNC() { return CoGetInstanceFromFile$FUNC_; }

    static final MethodHandle CoGetInstanceFromFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetInstanceFromFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoGetInstanceFromFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetInstanceFromFile$MH() { return CoGetInstanceFromFile$MH_; }

    static final FunctionDescriptor CoGetInstanceFromIStorage$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetInstanceFromIStorage$FUNC() { return CoGetInstanceFromIStorage$FUNC_; }

    static final MethodHandle CoGetInstanceFromIStorage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetInstanceFromIStorage",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoGetInstanceFromIStorage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetInstanceFromIStorage$MH() { return CoGetInstanceFromIStorage$MH_; }

    static final FunctionDescriptor CoAllowSetForegroundWindow$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoAllowSetForegroundWindow$FUNC() { return CoAllowSetForegroundWindow$FUNC_; }

    static final MethodHandle CoAllowSetForegroundWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoAllowSetForegroundWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoAllowSetForegroundWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoAllowSetForegroundWindow$MH() { return CoAllowSetForegroundWindow$MH_; }

    static final FunctionDescriptor DcomChannelSetHResult$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor DcomChannelSetHResult$FUNC() { return DcomChannelSetHResult$FUNC_; }

    static final MethodHandle DcomChannelSetHResult$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DcomChannelSetHResult",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        DcomChannelSetHResult$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DcomChannelSetHResult$MH() { return DcomChannelSetHResult$MH_; }

    static final FunctionDescriptor CoIsOle1Class$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoIsOle1Class$FUNC() { return CoIsOle1Class$FUNC_; }

    static final MethodHandle CoIsOle1Class$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoIsOle1Class",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoIsOle1Class$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoIsOle1Class$MH() { return CoIsOle1Class$MH_; }

    static final FunctionDescriptor CoFileTimeToDosDateTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoFileTimeToDosDateTime$FUNC() { return CoFileTimeToDosDateTime$FUNC_; }

    static final MethodHandle CoFileTimeToDosDateTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoFileTimeToDosDateTime",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoFileTimeToDosDateTime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoFileTimeToDosDateTime$MH() { return CoFileTimeToDosDateTime$MH_; }

    static final FunctionDescriptor CoDosDateTimeToFileTime$FUNC_ = FunctionDescriptor.of(C_INT,
        C_SHORT,
        C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDosDateTimeToFileTime$FUNC() { return CoDosDateTimeToFileTime$FUNC_; }

    static final MethodHandle CoDosDateTimeToFileTime$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDosDateTimeToFileTime",
        "(SSLjdk/incubator/foreign/MemoryAddress;)I",
        CoDosDateTimeToFileTime$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDosDateTimeToFileTime$MH() { return CoDosDateTimeToFileTime$MH_; }

    static final FunctionDescriptor CoRegisterMessageFilter$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterMessageFilter$FUNC() { return CoRegisterMessageFilter$FUNC_; }

    static final MethodHandle CoRegisterMessageFilter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterMessageFilter",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterMessageFilter$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterMessageFilter$MH() { return CoRegisterMessageFilter$MH_; }

    static final FunctionDescriptor CoRegisterChannelHook$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterChannelHook$FUNC() { return CoRegisterChannelHook$FUNC_; }

    static final MethodHandle CoRegisterChannelHook$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterChannelHook",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterChannelHook$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterChannelHook$MH() { return CoRegisterChannelHook$MH_; }

    static final FunctionDescriptor CoTreatAsClass$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoTreatAsClass$FUNC() { return CoTreatAsClass$FUNC_; }

    static final MethodHandle CoTreatAsClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoTreatAsClass",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoTreatAsClass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoTreatAsClass$MH() { return CoTreatAsClass$MH_; }

    static final FunctionDescriptor CreateDataAdviseHolder$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateDataAdviseHolder$FUNC() { return CreateDataAdviseHolder$FUNC_; }

    static final MethodHandle CreateDataAdviseHolder$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDataAdviseHolder",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateDataAdviseHolder$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateDataAdviseHolder$MH() { return CreateDataAdviseHolder$MH_; }

    static final FunctionDescriptor CreateDataCache$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateDataCache$FUNC() { return CreateDataCache$FUNC_; }

    static final MethodHandle CreateDataCache$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateDataCache",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateDataCache$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateDataCache$MH() { return CreateDataCache$MH_; }

    static final FunctionDescriptor StgOpenAsyncDocfileOnIFillLockBytes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgOpenAsyncDocfileOnIFillLockBytes$FUNC() { return StgOpenAsyncDocfileOnIFillLockBytes$FUNC_; }

    static final MethodHandle StgOpenAsyncDocfileOnIFillLockBytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgOpenAsyncDocfileOnIFillLockBytes",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        StgOpenAsyncDocfileOnIFillLockBytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgOpenAsyncDocfileOnIFillLockBytes$MH() { return StgOpenAsyncDocfileOnIFillLockBytes$MH_; }

    static final FunctionDescriptor StgGetIFillLockBytesOnILockBytes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgGetIFillLockBytesOnILockBytes$FUNC() { return StgGetIFillLockBytesOnILockBytes$FUNC_; }

    static final MethodHandle StgGetIFillLockBytesOnILockBytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgGetIFillLockBytesOnILockBytes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StgGetIFillLockBytesOnILockBytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgGetIFillLockBytesOnILockBytes$MH() { return StgGetIFillLockBytesOnILockBytes$MH_; }

    static final FunctionDescriptor StgGetIFillLockBytesOnFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgGetIFillLockBytesOnFile$FUNC() { return StgGetIFillLockBytesOnFile$FUNC_; }

    static final MethodHandle StgGetIFillLockBytesOnFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgGetIFillLockBytesOnFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StgGetIFillLockBytesOnFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgGetIFillLockBytesOnFile$MH() { return StgGetIFillLockBytesOnFile$MH_; }

    static final FunctionDescriptor StgOpenLayoutDocfile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StgOpenLayoutDocfile$FUNC() { return StgOpenLayoutDocfile$FUNC_; }

    static final MethodHandle StgOpenLayoutDocfile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StgOpenLayoutDocfile",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        StgOpenLayoutDocfile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StgOpenLayoutDocfile$MH() { return StgOpenLayoutDocfile$MH_; }

    static final FunctionDescriptor CoInstall$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoInstall$FUNC() { return CoInstall$FUNC_; }

    static final MethodHandle CoInstall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoInstall",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoInstall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoInstall$MH() { return CoInstall$MH_; }

    static final FunctionDescriptor BindMoniker$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BindMoniker$FUNC() { return BindMoniker$FUNC_; }

    static final MethodHandle BindMoniker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BindMoniker",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        BindMoniker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BindMoniker$MH() { return BindMoniker$MH_; }

    static final FunctionDescriptor CoGetObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetObject$FUNC() { return CoGetObject$FUNC_; }

    static final MethodHandle CoGetObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetObject$MH() { return CoGetObject$MH_; }

    static final FunctionDescriptor MkParseDisplayName$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor MkParseDisplayName$FUNC() { return MkParseDisplayName$FUNC_; }

    static final MethodHandle MkParseDisplayName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MkParseDisplayName",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        MkParseDisplayName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MkParseDisplayName$MH() { return MkParseDisplayName$MH_; }

    static final FunctionDescriptor MonikerRelativePathTo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor MonikerRelativePathTo$FUNC() { return MonikerRelativePathTo$FUNC_; }

    static final MethodHandle MonikerRelativePathTo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MonikerRelativePathTo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        MonikerRelativePathTo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MonikerRelativePathTo$MH() { return MonikerRelativePathTo$MH_; }

    static final FunctionDescriptor MonikerCommonPrefixWith$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor MonikerCommonPrefixWith$FUNC() { return MonikerCommonPrefixWith$FUNC_; }

    static final MethodHandle MonikerCommonPrefixWith$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MonikerCommonPrefixWith",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        MonikerCommonPrefixWith$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MonikerCommonPrefixWith$MH() { return MonikerCommonPrefixWith$MH_; }

    static final FunctionDescriptor CreateBindCtx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateBindCtx$FUNC() { return CreateBindCtx$FUNC_; }

    static final MethodHandle CreateBindCtx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateBindCtx",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        CreateBindCtx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateBindCtx$MH() { return CreateBindCtx$MH_; }

    static final FunctionDescriptor CreateGenericComposite$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateGenericComposite$FUNC() { return CreateGenericComposite$FUNC_; }

    static final MethodHandle CreateGenericComposite$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateGenericComposite",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateGenericComposite$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateGenericComposite$MH() { return CreateGenericComposite$MH_; }

    static final FunctionDescriptor GetClassFile$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetClassFile$FUNC() { return GetClassFile$FUNC_; }

    static final MethodHandle GetClassFile$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetClassFile",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetClassFile$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetClassFile$MH() { return GetClassFile$MH_; }

    static final FunctionDescriptor CreateClassMoniker$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateClassMoniker$FUNC() { return CreateClassMoniker$FUNC_; }

    static final MethodHandle CreateClassMoniker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateClassMoniker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateClassMoniker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateClassMoniker$MH() { return CreateClassMoniker$MH_; }

    static final FunctionDescriptor CreateFileMoniker$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateFileMoniker$FUNC() { return CreateFileMoniker$FUNC_; }

    static final MethodHandle CreateFileMoniker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateFileMoniker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateFileMoniker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateFileMoniker$MH() { return CreateFileMoniker$MH_; }

    static final FunctionDescriptor CreateItemMoniker$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateItemMoniker$FUNC() { return CreateItemMoniker$FUNC_; }

    static final MethodHandle CreateItemMoniker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateItemMoniker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateItemMoniker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateItemMoniker$MH() { return CreateItemMoniker$MH_; }

    static final FunctionDescriptor CreateAntiMoniker$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateAntiMoniker$FUNC() { return CreateAntiMoniker$FUNC_; }

    static final MethodHandle CreateAntiMoniker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateAntiMoniker",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateAntiMoniker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateAntiMoniker$MH() { return CreateAntiMoniker$MH_; }

    static final FunctionDescriptor CreatePointerMoniker$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreatePointerMoniker$FUNC() { return CreatePointerMoniker$FUNC_; }

    static final MethodHandle CreatePointerMoniker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePointerMoniker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreatePointerMoniker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreatePointerMoniker$MH() { return CreatePointerMoniker$MH_; }

    static final FunctionDescriptor CreateObjrefMoniker$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateObjrefMoniker$FUNC() { return CreateObjrefMoniker$FUNC_; }

    static final MethodHandle CreateObjrefMoniker$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateObjrefMoniker",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CreateObjrefMoniker$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateObjrefMoniker$MH() { return CreateObjrefMoniker$MH_; }

    static final FunctionDescriptor GetRunningObjectTable$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetRunningObjectTable$FUNC() { return GetRunningObjectTable$FUNC_; }

    static final MethodHandle GetRunningObjectTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetRunningObjectTable",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetRunningObjectTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetRunningObjectTable$MH() { return GetRunningObjectTable$MH_; }

    static final MemoryLayout __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$VH() { return __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec", __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$VH() { return __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec", __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IOleAdviseHolder$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleAdviseHolder$LAYOUT() { return IID_IOleAdviseHolder$LAYOUT_; }

    static final MemorySegment IID_IOleAdviseHolder$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleAdviseHolder", IID_IOleAdviseHolder$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleAdviseHolder$SEGMENT() { return IID_IOleAdviseHolder$SEGMENT_; }

    static final MemoryLayout IOleAdviseHolderVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Advise"),
        C_POINTER.withName("Unadvise"),
        C_POINTER.withName("EnumAdvise"),
        C_POINTER.withName("SendOnRename"),
        C_POINTER.withName("SendOnSave"),
        C_POINTER.withName("SendOnClose")
    ).withName("IOleAdviseHolderVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$struct$LAYOUT() { return IOleAdviseHolderVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleAdviseHolderVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$QueryInterface$LAYOUT() { return IOleAdviseHolderVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleAdviseHolderVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolderVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleAdviseHolderVtbl$QueryInterface$VH() { return IOleAdviseHolderVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleAdviseHolderVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$AddRef$LAYOUT() { return IOleAdviseHolderVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleAdviseHolderVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolderVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleAdviseHolderVtbl$AddRef$VH() { return IOleAdviseHolderVtbl$AddRef$VH_; }

    static final MemoryLayout IOleAdviseHolderVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$Release$LAYOUT() { return IOleAdviseHolderVtbl$Release$LAYOUT_; }

    static final VarHandle IOleAdviseHolderVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolderVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleAdviseHolderVtbl$Release$VH() { return IOleAdviseHolderVtbl$Release$VH_; }

    static final MemoryLayout IOleAdviseHolderVtbl$Advise$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$Advise$LAYOUT() { return IOleAdviseHolderVtbl$Advise$LAYOUT_; }

    static final VarHandle IOleAdviseHolderVtbl$Advise$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolderVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Advise")));
    static final java.lang.invoke.VarHandle IOleAdviseHolderVtbl$Advise$VH() { return IOleAdviseHolderVtbl$Advise$VH_; }

    static final MemoryLayout IOleAdviseHolderVtbl$Unadvise$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$Unadvise$LAYOUT() { return IOleAdviseHolderVtbl$Unadvise$LAYOUT_; }

    static final VarHandle IOleAdviseHolderVtbl$Unadvise$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolderVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Unadvise")));
    static final java.lang.invoke.VarHandle IOleAdviseHolderVtbl$Unadvise$VH() { return IOleAdviseHolderVtbl$Unadvise$VH_; }

    static final MemoryLayout IOleAdviseHolderVtbl$EnumAdvise$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$EnumAdvise$LAYOUT() { return IOleAdviseHolderVtbl$EnumAdvise$LAYOUT_; }

    static final VarHandle IOleAdviseHolderVtbl$EnumAdvise$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolderVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumAdvise")));
    static final java.lang.invoke.VarHandle IOleAdviseHolderVtbl$EnumAdvise$VH() { return IOleAdviseHolderVtbl$EnumAdvise$VH_; }

    static final MemoryLayout IOleAdviseHolderVtbl$SendOnRename$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$SendOnRename$LAYOUT() { return IOleAdviseHolderVtbl$SendOnRename$LAYOUT_; }

    static final VarHandle IOleAdviseHolderVtbl$SendOnRename$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolderVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SendOnRename")));
    static final java.lang.invoke.VarHandle IOleAdviseHolderVtbl$SendOnRename$VH() { return IOleAdviseHolderVtbl$SendOnRename$VH_; }

    static final MemoryLayout IOleAdviseHolderVtbl$SendOnSave$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$SendOnSave$LAYOUT() { return IOleAdviseHolderVtbl$SendOnSave$LAYOUT_; }

    static final VarHandle IOleAdviseHolderVtbl$SendOnSave$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolderVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SendOnSave")));
    static final java.lang.invoke.VarHandle IOleAdviseHolderVtbl$SendOnSave$VH() { return IOleAdviseHolderVtbl$SendOnSave$VH_; }

    static final MemoryLayout IOleAdviseHolderVtbl$SendOnClose$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolderVtbl$SendOnClose$LAYOUT() { return IOleAdviseHolderVtbl$SendOnClose$LAYOUT_; }

    static final VarHandle IOleAdviseHolderVtbl$SendOnClose$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolderVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SendOnClose")));
    static final java.lang.invoke.VarHandle IOleAdviseHolderVtbl$SendOnClose$VH() { return IOleAdviseHolderVtbl$SendOnClose$VH_; }

    static final MemoryLayout IOleAdviseHolder$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleAdviseHolder");
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolder$struct$LAYOUT() { return IOleAdviseHolder$struct$LAYOUT_; }

    static final MemoryLayout IOleAdviseHolder$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleAdviseHolder$lpVtbl$LAYOUT() { return IOleAdviseHolder$lpVtbl$LAYOUT_; }

    static final VarHandle IOleAdviseHolder$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleAdviseHolder$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleAdviseHolder$lpVtbl$VH() { return IOleAdviseHolder$lpVtbl$VH_; }

    static final MemoryLayout __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$VH() { return __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec", __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$VH() { return __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec", __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IOleCache$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleCache$LAYOUT() { return IID_IOleCache$LAYOUT_; }

    static final MemorySegment IID_IOleCache$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleCache", IID_IOleCache$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleCache$SEGMENT() { return IID_IOleCache$SEGMENT_; }

    static final MemoryLayout IOleCacheVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Cache"),
        C_POINTER.withName("Uncache"),
        C_POINTER.withName("EnumCache"),
        C_POINTER.withName("InitCache"),
        C_POINTER.withName("SetData")
    ).withName("IOleCacheVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleCacheVtbl$struct$LAYOUT() { return IOleCacheVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleCacheVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheVtbl$QueryInterface$LAYOUT() { return IOleCacheVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleCacheVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleCacheVtbl$QueryInterface$VH() { return IOleCacheVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleCacheVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheVtbl$AddRef$LAYOUT() { return IOleCacheVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleCacheVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleCacheVtbl$AddRef$VH() { return IOleCacheVtbl$AddRef$VH_; }

    static final MemoryLayout IOleCacheVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheVtbl$Release$LAYOUT() { return IOleCacheVtbl$Release$LAYOUT_; }

    static final VarHandle IOleCacheVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleCacheVtbl$Release$VH() { return IOleCacheVtbl$Release$VH_; }

    static final MemoryLayout IOleCacheVtbl$Cache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheVtbl$Cache$LAYOUT() { return IOleCacheVtbl$Cache$LAYOUT_; }

    static final VarHandle IOleCacheVtbl$Cache$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Cache")));
    static final java.lang.invoke.VarHandle IOleCacheVtbl$Cache$VH() { return IOleCacheVtbl$Cache$VH_; }

    static final MemoryLayout IOleCacheVtbl$Uncache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheVtbl$Uncache$LAYOUT() { return IOleCacheVtbl$Uncache$LAYOUT_; }

    static final VarHandle IOleCacheVtbl$Uncache$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Uncache")));
    static final java.lang.invoke.VarHandle IOleCacheVtbl$Uncache$VH() { return IOleCacheVtbl$Uncache$VH_; }

    static final MemoryLayout IOleCacheVtbl$EnumCache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheVtbl$EnumCache$LAYOUT() { return IOleCacheVtbl$EnumCache$LAYOUT_; }

    static final VarHandle IOleCacheVtbl$EnumCache$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumCache")));
    static final java.lang.invoke.VarHandle IOleCacheVtbl$EnumCache$VH() { return IOleCacheVtbl$EnumCache$VH_; }

    static final MemoryLayout IOleCacheVtbl$InitCache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheVtbl$InitCache$LAYOUT() { return IOleCacheVtbl$InitCache$LAYOUT_; }

    static final VarHandle IOleCacheVtbl$InitCache$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("InitCache")));
    static final java.lang.invoke.VarHandle IOleCacheVtbl$InitCache$VH() { return IOleCacheVtbl$InitCache$VH_; }

    static final MemoryLayout IOleCacheVtbl$SetData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheVtbl$SetData$LAYOUT() { return IOleCacheVtbl$SetData$LAYOUT_; }

    static final VarHandle IOleCacheVtbl$SetData$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetData")));
    static final java.lang.invoke.VarHandle IOleCacheVtbl$SetData$VH() { return IOleCacheVtbl$SetData$VH_; }

    static final MemoryLayout IOleCache$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleCache");
    static final jdk.incubator.foreign.MemoryLayout IOleCache$struct$LAYOUT() { return IOleCache$struct$LAYOUT_; }

    static final MemoryLayout IOleCache$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache$lpVtbl$LAYOUT() { return IOleCache$lpVtbl$LAYOUT_; }

    static final VarHandle IOleCache$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleCache$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleCache$lpVtbl$VH() { return IOleCache$lpVtbl$VH_; }

    static final int DISCARDCACHE_SAVEIFDIRTY() { return (int)0L; }

    static final int DISCARDCACHE_NOSAVE() { return (int)1L; }

    static final MemoryLayout IID_IOleCache2$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleCache2$LAYOUT() { return IID_IOleCache2$LAYOUT_; }

    static final MemorySegment IID_IOleCache2$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleCache2", IID_IOleCache2$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleCache2$SEGMENT() { return IID_IOleCache2$SEGMENT_; }

    static final MemoryLayout IOleCache2Vtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Cache"),
        C_POINTER.withName("Uncache"),
        C_POINTER.withName("EnumCache"),
        C_POINTER.withName("InitCache"),
        C_POINTER.withName("SetData"),
        C_POINTER.withName("UpdateCache"),
        C_POINTER.withName("DiscardCache")
    ).withName("IOleCache2Vtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$struct$LAYOUT() { return IOleCache2Vtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleCache2Vtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$QueryInterface$LAYOUT() { return IOleCache2Vtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$QueryInterface$VH() { return IOleCache2Vtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleCache2Vtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$AddRef$LAYOUT() { return IOleCache2Vtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$AddRef$VH() { return IOleCache2Vtbl$AddRef$VH_; }

    static final MemoryLayout IOleCache2Vtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$Release$LAYOUT() { return IOleCache2Vtbl$Release$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$Release$VH() { return IOleCache2Vtbl$Release$VH_; }

    static final MemoryLayout IOleCache2Vtbl$Cache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$Cache$LAYOUT() { return IOleCache2Vtbl$Cache$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$Cache$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Cache")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$Cache$VH() { return IOleCache2Vtbl$Cache$VH_; }

    static final MemoryLayout IOleCache2Vtbl$Uncache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$Uncache$LAYOUT() { return IOleCache2Vtbl$Uncache$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$Uncache$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Uncache")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$Uncache$VH() { return IOleCache2Vtbl$Uncache$VH_; }

    static final MemoryLayout IOleCache2Vtbl$EnumCache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$EnumCache$LAYOUT() { return IOleCache2Vtbl$EnumCache$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$EnumCache$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumCache")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$EnumCache$VH() { return IOleCache2Vtbl$EnumCache$VH_; }

    static final MemoryLayout IOleCache2Vtbl$InitCache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$InitCache$LAYOUT() { return IOleCache2Vtbl$InitCache$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$InitCache$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("InitCache")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$InitCache$VH() { return IOleCache2Vtbl$InitCache$VH_; }

    static final MemoryLayout IOleCache2Vtbl$SetData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$SetData$LAYOUT() { return IOleCache2Vtbl$SetData$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$SetData$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetData")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$SetData$VH() { return IOleCache2Vtbl$SetData$VH_; }

    static final MemoryLayout IOleCache2Vtbl$UpdateCache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$UpdateCache$LAYOUT() { return IOleCache2Vtbl$UpdateCache$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$UpdateCache$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UpdateCache")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$UpdateCache$VH() { return IOleCache2Vtbl$UpdateCache$VH_; }

    static final MemoryLayout IOleCache2Vtbl$DiscardCache$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2Vtbl$DiscardCache$LAYOUT() { return IOleCache2Vtbl$DiscardCache$LAYOUT_; }

    static final VarHandle IOleCache2Vtbl$DiscardCache$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2Vtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DiscardCache")));
    static final java.lang.invoke.VarHandle IOleCache2Vtbl$DiscardCache$VH() { return IOleCache2Vtbl$DiscardCache$VH_; }

    static final MemoryLayout IOleCache2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleCache2");
    static final jdk.incubator.foreign.MemoryLayout IOleCache2$struct$LAYOUT() { return IOleCache2$struct$LAYOUT_; }

    static final MemoryLayout IOleCache2$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCache2$lpVtbl$LAYOUT() { return IOleCache2$lpVtbl$LAYOUT_; }

    static final VarHandle IOleCache2$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleCache2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleCache2$lpVtbl$VH() { return IOleCache2$lpVtbl$VH_; }

    static final FunctionDescriptor IOleCache2_RemoteUpdateCache_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor IOleCache2_RemoteUpdateCache_Proxy$FUNC() { return IOleCache2_RemoteUpdateCache_Proxy$FUNC_; }

    static final MethodHandle IOleCache2_RemoteUpdateCache_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IOleCache2_RemoteUpdateCache_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        IOleCache2_RemoteUpdateCache_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IOleCache2_RemoteUpdateCache_Proxy$MH() { return IOleCache2_RemoteUpdateCache_Proxy$MH_; }

    static final FunctionDescriptor IOleCache2_RemoteUpdateCache_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IOleCache2_RemoteUpdateCache_Stub$FUNC() { return IOleCache2_RemoteUpdateCache_Stub$FUNC_; }

    static final MethodHandle IOleCache2_RemoteUpdateCache_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IOleCache2_RemoteUpdateCache_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IOleCache2_RemoteUpdateCache_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IOleCache2_RemoteUpdateCache_Stub$MH() { return IOleCache2_RemoteUpdateCache_Stub$MH_; }

    static final MemoryLayout __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$VH() { return __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec", __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$VH() { return __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec", __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IOleCacheControl$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleCacheControl$LAYOUT() { return IID_IOleCacheControl$LAYOUT_; }

    static final MemorySegment IID_IOleCacheControl$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleCacheControl", IID_IOleCacheControl$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleCacheControl$SEGMENT() { return IID_IOleCacheControl$SEGMENT_; }

    static final MemoryLayout IOleCacheControlVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("OnRun"),
        C_POINTER.withName("OnStop")
    ).withName("IOleCacheControlVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleCacheControlVtbl$struct$LAYOUT() { return IOleCacheControlVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleCacheControlVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheControlVtbl$QueryInterface$LAYOUT() { return IOleCacheControlVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleCacheControlVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleCacheControlVtbl$QueryInterface$VH() { return IOleCacheControlVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleCacheControlVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheControlVtbl$AddRef$LAYOUT() { return IOleCacheControlVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleCacheControlVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleCacheControlVtbl$AddRef$VH() { return IOleCacheControlVtbl$AddRef$VH_; }

    static final MemoryLayout IOleCacheControlVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheControlVtbl$Release$LAYOUT() { return IOleCacheControlVtbl$Release$LAYOUT_; }

    static final VarHandle IOleCacheControlVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleCacheControlVtbl$Release$VH() { return IOleCacheControlVtbl$Release$VH_; }

    static final MemoryLayout IOleCacheControlVtbl$OnRun$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheControlVtbl$OnRun$LAYOUT() { return IOleCacheControlVtbl$OnRun$LAYOUT_; }

    static final VarHandle IOleCacheControlVtbl$OnRun$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnRun")));
    static final java.lang.invoke.VarHandle IOleCacheControlVtbl$OnRun$VH() { return IOleCacheControlVtbl$OnRun$VH_; }

    static final MemoryLayout IOleCacheControlVtbl$OnStop$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheControlVtbl$OnStop$LAYOUT() { return IOleCacheControlVtbl$OnStop$LAYOUT_; }

    static final VarHandle IOleCacheControlVtbl$OnStop$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnStop")));
    static final java.lang.invoke.VarHandle IOleCacheControlVtbl$OnStop$VH() { return IOleCacheControlVtbl$OnStop$VH_; }

    static final MemoryLayout IOleCacheControl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleCacheControl");
    static final jdk.incubator.foreign.MemoryLayout IOleCacheControl$struct$LAYOUT() { return IOleCacheControl$struct$LAYOUT_; }

    static final MemoryLayout IOleCacheControl$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleCacheControl$lpVtbl$LAYOUT() { return IOleCacheControl$lpVtbl$LAYOUT_; }

    static final VarHandle IOleCacheControl$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleCacheControl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleCacheControl$lpVtbl$VH() { return IOleCacheControl$lpVtbl$VH_; }

    static final MemoryLayout IID_IParseDisplayName$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IParseDisplayName$LAYOUT() { return IID_IParseDisplayName$LAYOUT_; }

    static final MemorySegment IID_IParseDisplayName$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IParseDisplayName", IID_IParseDisplayName$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IParseDisplayName$SEGMENT() { return IID_IParseDisplayName$SEGMENT_; }

    static final MemoryLayout IParseDisplayNameVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("ParseDisplayName")
    ).withName("IParseDisplayNameVtbl");
    static final jdk.incubator.foreign.MemoryLayout IParseDisplayNameVtbl$struct$LAYOUT() { return IParseDisplayNameVtbl$struct$LAYOUT_; }

    static final MemoryLayout IParseDisplayNameVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IParseDisplayNameVtbl$QueryInterface$LAYOUT() { return IParseDisplayNameVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IParseDisplayNameVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IParseDisplayNameVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IParseDisplayNameVtbl$QueryInterface$VH() { return IParseDisplayNameVtbl$QueryInterface$VH_; }

    static final MemoryLayout IParseDisplayNameVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IParseDisplayNameVtbl$AddRef$LAYOUT() { return IParseDisplayNameVtbl$AddRef$LAYOUT_; }

    static final VarHandle IParseDisplayNameVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IParseDisplayNameVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IParseDisplayNameVtbl$AddRef$VH() { return IParseDisplayNameVtbl$AddRef$VH_; }

    static final MemoryLayout IParseDisplayNameVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IParseDisplayNameVtbl$Release$LAYOUT() { return IParseDisplayNameVtbl$Release$LAYOUT_; }

    static final VarHandle IParseDisplayNameVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IParseDisplayNameVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IParseDisplayNameVtbl$Release$VH() { return IParseDisplayNameVtbl$Release$VH_; }

    static final MemoryLayout IParseDisplayNameVtbl$ParseDisplayName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IParseDisplayNameVtbl$ParseDisplayName$LAYOUT() { return IParseDisplayNameVtbl$ParseDisplayName$LAYOUT_; }

    static final VarHandle IParseDisplayNameVtbl$ParseDisplayName$VH_ = MemoryHandles.asAddressVarHandle(IParseDisplayNameVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParseDisplayName")));
    static final java.lang.invoke.VarHandle IParseDisplayNameVtbl$ParseDisplayName$VH() { return IParseDisplayNameVtbl$ParseDisplayName$VH_; }

    static final MemoryLayout IParseDisplayName$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IParseDisplayName");
    static final jdk.incubator.foreign.MemoryLayout IParseDisplayName$struct$LAYOUT() { return IParseDisplayName$struct$LAYOUT_; }

    static final MemoryLayout IParseDisplayName$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IParseDisplayName$lpVtbl$LAYOUT() { return IParseDisplayName$lpVtbl$LAYOUT_; }

    static final VarHandle IParseDisplayName$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IParseDisplayName$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IParseDisplayName$lpVtbl$VH() { return IParseDisplayName$lpVtbl$VH_; }

    static final MemoryLayout IID_IOleContainer$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleContainer$LAYOUT() { return IID_IOleContainer$LAYOUT_; }

    static final MemorySegment IID_IOleContainer$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleContainer", IID_IOleContainer$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleContainer$SEGMENT() { return IID_IOleContainer$SEGMENT_; }

    static final MemoryLayout IOleContainerVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("ParseDisplayName"),
        C_POINTER.withName("EnumObjects"),
        C_POINTER.withName("LockContainer")
    ).withName("IOleContainerVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleContainerVtbl$struct$LAYOUT() { return IOleContainerVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleContainerVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleContainerVtbl$QueryInterface$LAYOUT() { return IOleContainerVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleContainerVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleContainerVtbl$QueryInterface$VH() { return IOleContainerVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleContainerVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleContainerVtbl$AddRef$LAYOUT() { return IOleContainerVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleContainerVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleContainerVtbl$AddRef$VH() { return IOleContainerVtbl$AddRef$VH_; }

    static final MemoryLayout IOleContainerVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleContainerVtbl$Release$LAYOUT() { return IOleContainerVtbl$Release$LAYOUT_; }

    static final VarHandle IOleContainerVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleContainerVtbl$Release$VH() { return IOleContainerVtbl$Release$VH_; }

    static final MemoryLayout IOleContainerVtbl$ParseDisplayName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleContainerVtbl$ParseDisplayName$LAYOUT() { return IOleContainerVtbl$ParseDisplayName$LAYOUT_; }

    static final VarHandle IOleContainerVtbl$ParseDisplayName$VH_ = MemoryHandles.asAddressVarHandle(IOleContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParseDisplayName")));
    static final java.lang.invoke.VarHandle IOleContainerVtbl$ParseDisplayName$VH() { return IOleContainerVtbl$ParseDisplayName$VH_; }

    static final MemoryLayout IOleContainerVtbl$EnumObjects$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleContainerVtbl$EnumObjects$LAYOUT() { return IOleContainerVtbl$EnumObjects$LAYOUT_; }

    static final VarHandle IOleContainerVtbl$EnumObjects$VH_ = MemoryHandles.asAddressVarHandle(IOleContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumObjects")));
    static final java.lang.invoke.VarHandle IOleContainerVtbl$EnumObjects$VH() { return IOleContainerVtbl$EnumObjects$VH_; }

    static final MemoryLayout IOleContainerVtbl$LockContainer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleContainerVtbl$LockContainer$LAYOUT() { return IOleContainerVtbl$LockContainer$LAYOUT_; }

    static final VarHandle IOleContainerVtbl$LockContainer$VH_ = MemoryHandles.asAddressVarHandle(IOleContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LockContainer")));
    static final java.lang.invoke.VarHandle IOleContainerVtbl$LockContainer$VH() { return IOleContainerVtbl$LockContainer$VH_; }

    static final MemoryLayout IOleContainer$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleContainer");
    static final jdk.incubator.foreign.MemoryLayout IOleContainer$struct$LAYOUT() { return IOleContainer$struct$LAYOUT_; }

    static final MemoryLayout IOleContainer$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleContainer$lpVtbl$LAYOUT() { return IOleContainer$lpVtbl$LAYOUT_; }

    static final VarHandle IOleContainer$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleContainer$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleContainer$lpVtbl$VH() { return IOleContainer$lpVtbl$VH_; }

    static final MemoryLayout IID_IOleClientSite$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleClientSite$LAYOUT() { return IID_IOleClientSite$LAYOUT_; }

    static final MemorySegment IID_IOleClientSite$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleClientSite", IID_IOleClientSite$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleClientSite$SEGMENT() { return IID_IOleClientSite$SEGMENT_; }

    static final MemoryLayout IOleClientSiteVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("SaveObject"),
        C_POINTER.withName("GetMoniker"),
        C_POINTER.withName("GetContainer"),
        C_POINTER.withName("ShowObject"),
        C_POINTER.withName("OnShowWindow"),
        C_POINTER.withName("RequestNewObjectLayout")
    ).withName("IOleClientSiteVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$struct$LAYOUT() { return IOleClientSiteVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleClientSiteVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$QueryInterface$LAYOUT() { return IOleClientSiteVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleClientSiteVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSiteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleClientSiteVtbl$QueryInterface$VH() { return IOleClientSiteVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleClientSiteVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$AddRef$LAYOUT() { return IOleClientSiteVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleClientSiteVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSiteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleClientSiteVtbl$AddRef$VH() { return IOleClientSiteVtbl$AddRef$VH_; }

    static final MemoryLayout IOleClientSiteVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$Release$LAYOUT() { return IOleClientSiteVtbl$Release$LAYOUT_; }

    static final VarHandle IOleClientSiteVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSiteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleClientSiteVtbl$Release$VH() { return IOleClientSiteVtbl$Release$VH_; }

    static final MemoryLayout IOleClientSiteVtbl$SaveObject$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$SaveObject$LAYOUT() { return IOleClientSiteVtbl$SaveObject$LAYOUT_; }

    static final VarHandle IOleClientSiteVtbl$SaveObject$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSiteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SaveObject")));
    static final java.lang.invoke.VarHandle IOleClientSiteVtbl$SaveObject$VH() { return IOleClientSiteVtbl$SaveObject$VH_; }

    static final MemoryLayout IOleClientSiteVtbl$GetMoniker$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$GetMoniker$LAYOUT() { return IOleClientSiteVtbl$GetMoniker$LAYOUT_; }

    static final VarHandle IOleClientSiteVtbl$GetMoniker$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSiteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetMoniker")));
    static final java.lang.invoke.VarHandle IOleClientSiteVtbl$GetMoniker$VH() { return IOleClientSiteVtbl$GetMoniker$VH_; }

    static final MemoryLayout IOleClientSiteVtbl$GetContainer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$GetContainer$LAYOUT() { return IOleClientSiteVtbl$GetContainer$LAYOUT_; }

    static final VarHandle IOleClientSiteVtbl$GetContainer$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSiteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetContainer")));
    static final java.lang.invoke.VarHandle IOleClientSiteVtbl$GetContainer$VH() { return IOleClientSiteVtbl$GetContainer$VH_; }

    static final MemoryLayout IOleClientSiteVtbl$ShowObject$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$ShowObject$LAYOUT() { return IOleClientSiteVtbl$ShowObject$LAYOUT_; }

    static final VarHandle IOleClientSiteVtbl$ShowObject$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSiteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ShowObject")));
    static final java.lang.invoke.VarHandle IOleClientSiteVtbl$ShowObject$VH() { return IOleClientSiteVtbl$ShowObject$VH_; }

    static final MemoryLayout IOleClientSiteVtbl$OnShowWindow$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$OnShowWindow$LAYOUT() { return IOleClientSiteVtbl$OnShowWindow$LAYOUT_; }

    static final VarHandle IOleClientSiteVtbl$OnShowWindow$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSiteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OnShowWindow")));
    static final java.lang.invoke.VarHandle IOleClientSiteVtbl$OnShowWindow$VH() { return IOleClientSiteVtbl$OnShowWindow$VH_; }

    static final MemoryLayout IOleClientSiteVtbl$RequestNewObjectLayout$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSiteVtbl$RequestNewObjectLayout$LAYOUT() { return IOleClientSiteVtbl$RequestNewObjectLayout$LAYOUT_; }

    static final VarHandle IOleClientSiteVtbl$RequestNewObjectLayout$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSiteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RequestNewObjectLayout")));
    static final java.lang.invoke.VarHandle IOleClientSiteVtbl$RequestNewObjectLayout$VH() { return IOleClientSiteVtbl$RequestNewObjectLayout$VH_; }

    static final MemoryLayout IOleClientSite$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleClientSite");
    static final jdk.incubator.foreign.MemoryLayout IOleClientSite$struct$LAYOUT() { return IOleClientSite$struct$LAYOUT_; }

    static final MemoryLayout IOleClientSite$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleClientSite$lpVtbl$LAYOUT() { return IOleClientSite$lpVtbl$LAYOUT_; }

    static final VarHandle IOleClientSite$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleClientSite$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleClientSite$lpVtbl$VH() { return IOleClientSite$lpVtbl$VH_; }

    static final int OLEGETMONIKER_ONLYIFTHERE() { return (int)1L; }

    static final int OLEGETMONIKER_FORCEASSIGN() { return (int)2L; }

    static final int OLEGETMONIKER_UNASSIGN() { return (int)3L; }

    static final int OLEGETMONIKER_TEMPFORUSER() { return (int)4L; }

    static final int OLEWHICHMK_CONTAINER() { return (int)1L; }

    static final int OLEWHICHMK_OBJREL() { return (int)2L; }

    static final int OLEWHICHMK_OBJFULL() { return (int)3L; }

    static final int USERCLASSTYPE_FULL() { return (int)1L; }

    static final int USERCLASSTYPE_SHORT() { return (int)2L; }

    static final int USERCLASSTYPE_APPNAME() { return (int)3L; }

    static final int OLEMISC_RECOMPOSEONRESIZE() { return (int)1L; }

    static final int OLEMISC_ONLYICONIC() { return (int)2L; }

    static final int OLEMISC_INSERTNOTREPLACE() { return (int)4L; }

    static final int OLEMISC_STATIC() { return (int)8L; }

    static final int OLEMISC_CANTLINKINSIDE() { return (int)16L; }

    static final int OLEMISC_CANLINKBYOLE1() { return (int)32L; }

    static final int OLEMISC_ISLINKOBJECT() { return (int)64L; }

    static final int OLEMISC_INSIDEOUT() { return (int)128L; }

    static final int OLEMISC_ACTIVATEWHENVISIBLE() { return (int)256L; }

    static final int OLEMISC_RENDERINGISDEVICEINDEPENDENT() { return (int)512L; }

    static final int OLEMISC_INVISIBLEATRUNTIME() { return (int)1024L; }

    static final int OLEMISC_ALWAYSRUN() { return (int)2048L; }

    static final int OLEMISC_ACTSLIKEBUTTON() { return (int)4096L; }

    static final int OLEMISC_ACTSLIKELABEL() { return (int)8192L; }

    static final int OLEMISC_NOUIACTIVATE() { return (int)16384L; }

    static final int OLEMISC_ALIGNABLE() { return (int)32768L; }

    static final int OLEMISC_SIMPLEFRAME() { return (int)65536L; }

    static final int OLEMISC_SETCLIENTSITEFIRST() { return (int)131072L; }

    static final int OLEMISC_IMEMODE() { return (int)262144L; }

    static final int OLEMISC_IGNOREACTIVATEWHENVISIBLE() { return (int)524288L; }

    static final int OLEMISC_WANTSTOMENUMERGE() { return (int)1048576L; }

    static final int OLEMISC_SUPPORTSMULTILEVELUNDO() { return (int)2097152L; }

    static final int OLECLOSE_SAVEIFDIRTY() { return (int)0L; }

    static final int OLECLOSE_NOSAVE() { return (int)1L; }

    static final int OLECLOSE_PROMPTSAVE() { return (int)2L; }

    static final MemoryLayout IID_IOleObject$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleObject$LAYOUT() { return IID_IOleObject$LAYOUT_; }

    static final MemorySegment IID_IOleObject$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleObject", IID_IOleObject$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleObject$SEGMENT() { return IID_IOleObject$SEGMENT_; }

    static final MemoryLayout IOleObjectVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("SetClientSite"),
        C_POINTER.withName("GetClientSite"),
        C_POINTER.withName("SetHostNames"),
        C_POINTER.withName("Close"),
        C_POINTER.withName("SetMoniker"),
        C_POINTER.withName("GetMoniker"),
        C_POINTER.withName("InitFromData"),
        C_POINTER.withName("GetClipboardData"),
        C_POINTER.withName("DoVerb"),
        C_POINTER.withName("EnumVerbs"),
        C_POINTER.withName("Update"),
        C_POINTER.withName("IsUpToDate"),
        C_POINTER.withName("GetUserClassID"),
        C_POINTER.withName("GetUserType"),
        C_POINTER.withName("SetExtent"),
        C_POINTER.withName("GetExtent"),
        C_POINTER.withName("Advise"),
        C_POINTER.withName("Unadvise"),
        C_POINTER.withName("EnumAdvise"),
        C_POINTER.withName("GetMiscStatus"),
        C_POINTER.withName("SetColorScheme")
    ).withName("IOleObjectVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$struct$LAYOUT() { return IOleObjectVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleObjectVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$QueryInterface$LAYOUT() { return IOleObjectVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$QueryInterface$VH() { return IOleObjectVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleObjectVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$AddRef$LAYOUT() { return IOleObjectVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$AddRef$VH() { return IOleObjectVtbl$AddRef$VH_; }

    static final MemoryLayout IOleObjectVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$Release$LAYOUT() { return IOleObjectVtbl$Release$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$Release$VH() { return IOleObjectVtbl$Release$VH_; }

    static final MemoryLayout IOleObjectVtbl$SetClientSite$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$SetClientSite$LAYOUT() { return IOleObjectVtbl$SetClientSite$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$SetClientSite$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetClientSite")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$SetClientSite$VH() { return IOleObjectVtbl$SetClientSite$VH_; }

    static final MemoryLayout IOleObjectVtbl$GetClientSite$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$GetClientSite$LAYOUT() { return IOleObjectVtbl$GetClientSite$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$GetClientSite$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetClientSite")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$GetClientSite$VH() { return IOleObjectVtbl$GetClientSite$VH_; }

    static final MemoryLayout IOleObjectVtbl$SetHostNames$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$SetHostNames$LAYOUT() { return IOleObjectVtbl$SetHostNames$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$SetHostNames$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetHostNames")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$SetHostNames$VH() { return IOleObjectVtbl$SetHostNames$VH_; }

    static final MemoryLayout IOleObjectVtbl$Close$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$Close$LAYOUT() { return IOleObjectVtbl$Close$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$Close$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Close")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$Close$VH() { return IOleObjectVtbl$Close$VH_; }

    static final MemoryLayout IOleObjectVtbl$SetMoniker$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$SetMoniker$LAYOUT() { return IOleObjectVtbl$SetMoniker$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$SetMoniker$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetMoniker")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$SetMoniker$VH() { return IOleObjectVtbl$SetMoniker$VH_; }

    static final MemoryLayout IOleObjectVtbl$GetMoniker$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$GetMoniker$LAYOUT() { return IOleObjectVtbl$GetMoniker$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$GetMoniker$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetMoniker")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$GetMoniker$VH() { return IOleObjectVtbl$GetMoniker$VH_; }

    static final MemoryLayout IOleObjectVtbl$InitFromData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$InitFromData$LAYOUT() { return IOleObjectVtbl$InitFromData$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$InitFromData$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("InitFromData")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$InitFromData$VH() { return IOleObjectVtbl$InitFromData$VH_; }

    static final MemoryLayout IOleObjectVtbl$GetClipboardData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$GetClipboardData$LAYOUT() { return IOleObjectVtbl$GetClipboardData$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$GetClipboardData$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetClipboardData")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$GetClipboardData$VH() { return IOleObjectVtbl$GetClipboardData$VH_; }

    static final MemoryLayout IOleObjectVtbl$DoVerb$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$DoVerb$LAYOUT() { return IOleObjectVtbl$DoVerb$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$DoVerb$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DoVerb")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$DoVerb$VH() { return IOleObjectVtbl$DoVerb$VH_; }

    static final MemoryLayout IOleObjectVtbl$EnumVerbs$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$EnumVerbs$LAYOUT() { return IOleObjectVtbl$EnumVerbs$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$EnumVerbs$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumVerbs")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$EnumVerbs$VH() { return IOleObjectVtbl$EnumVerbs$VH_; }

    static final MemoryLayout IOleObjectVtbl$Update$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$Update$LAYOUT() { return IOleObjectVtbl$Update$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$Update$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Update")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$Update$VH() { return IOleObjectVtbl$Update$VH_; }

    static final MemoryLayout IOleObjectVtbl$IsUpToDate$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$IsUpToDate$LAYOUT() { return IOleObjectVtbl$IsUpToDate$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$IsUpToDate$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsUpToDate")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$IsUpToDate$VH() { return IOleObjectVtbl$IsUpToDate$VH_; }

    static final MemoryLayout IOleObjectVtbl$GetUserClassID$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$GetUserClassID$LAYOUT() { return IOleObjectVtbl$GetUserClassID$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$GetUserClassID$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetUserClassID")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$GetUserClassID$VH() { return IOleObjectVtbl$GetUserClassID$VH_; }

    static final MemoryLayout IOleObjectVtbl$GetUserType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$GetUserType$LAYOUT() { return IOleObjectVtbl$GetUserType$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$GetUserType$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetUserType")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$GetUserType$VH() { return IOleObjectVtbl$GetUserType$VH_; }

    static final MemoryLayout IOleObjectVtbl$SetExtent$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$SetExtent$LAYOUT() { return IOleObjectVtbl$SetExtent$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$SetExtent$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetExtent")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$SetExtent$VH() { return IOleObjectVtbl$SetExtent$VH_; }

    static final MemoryLayout IOleObjectVtbl$GetExtent$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$GetExtent$LAYOUT() { return IOleObjectVtbl$GetExtent$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$GetExtent$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetExtent")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$GetExtent$VH() { return IOleObjectVtbl$GetExtent$VH_; }

    static final MemoryLayout IOleObjectVtbl$Advise$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$Advise$LAYOUT() { return IOleObjectVtbl$Advise$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$Advise$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Advise")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$Advise$VH() { return IOleObjectVtbl$Advise$VH_; }

    static final MemoryLayout IOleObjectVtbl$Unadvise$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$Unadvise$LAYOUT() { return IOleObjectVtbl$Unadvise$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$Unadvise$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Unadvise")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$Unadvise$VH() { return IOleObjectVtbl$Unadvise$VH_; }

    static final MemoryLayout IOleObjectVtbl$EnumAdvise$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$EnumAdvise$LAYOUT() { return IOleObjectVtbl$EnumAdvise$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$EnumAdvise$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumAdvise")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$EnumAdvise$VH() { return IOleObjectVtbl$EnumAdvise$VH_; }

    static final MemoryLayout IOleObjectVtbl$GetMiscStatus$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$GetMiscStatus$LAYOUT() { return IOleObjectVtbl$GetMiscStatus$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$GetMiscStatus$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetMiscStatus")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$GetMiscStatus$VH() { return IOleObjectVtbl$GetMiscStatus$VH_; }

    static final MemoryLayout IOleObjectVtbl$SetColorScheme$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObjectVtbl$SetColorScheme$LAYOUT() { return IOleObjectVtbl$SetColorScheme$LAYOUT_; }

    static final VarHandle IOleObjectVtbl$SetColorScheme$VH_ = MemoryHandles.asAddressVarHandle(IOleObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetColorScheme")));
    static final java.lang.invoke.VarHandle IOleObjectVtbl$SetColorScheme$VH() { return IOleObjectVtbl$SetColorScheme$VH_; }

    static final MemoryLayout IOleObject$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleObject");
    static final jdk.incubator.foreign.MemoryLayout IOleObject$struct$LAYOUT() { return IOleObject$struct$LAYOUT_; }

    static final MemoryLayout IOleObject$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleObject$lpVtbl$LAYOUT() { return IOleObject$lpVtbl$LAYOUT_; }

    static final VarHandle IOleObject$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleObject$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleObject$lpVtbl$VH() { return IOleObject$lpVtbl$VH_; }

    static final int OLERENDER_NONE() { return (int)0L; }

    static final int OLERENDER_DRAW() { return (int)1L; }

    static final int OLERENDER_FORMAT() { return (int)2L; }

    static final int OLERENDER_ASIS() { return (int)3L; }

    static final MemoryLayout tagOBJECTDESCRIPTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("clsid"),
        C_LONG.withName("dwDrawAspect"),
        MemoryLayout.ofStruct(
            C_LONG.withName("cx"),
            C_LONG.withName("cy")
        ).withName("sizel"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("pointl"),
        C_LONG.withName("dwStatus"),
        C_LONG.withName("dwFullUserTypeName"),
        C_LONG.withName("dwSrcOfCopy")
    ).withName("tagOBJECTDESCRIPTOR");
    static final jdk.incubator.foreign.MemoryLayout tagOBJECTDESCRIPTOR$struct$LAYOUT() { return tagOBJECTDESCRIPTOR$struct$LAYOUT_; }

    static final MemoryLayout tagOBJECTDESCRIPTOR$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOBJECTDESCRIPTOR$cbSize$LAYOUT() { return tagOBJECTDESCRIPTOR$cbSize$LAYOUT_; }

    static final VarHandle tagOBJECTDESCRIPTOR$cbSize$VH_ = tagOBJECTDESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagOBJECTDESCRIPTOR$cbSize$VH() { return tagOBJECTDESCRIPTOR$cbSize$VH_; }

    static final MemoryLayout tagOBJECTDESCRIPTOR$dwDrawAspect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOBJECTDESCRIPTOR$dwDrawAspect$LAYOUT() { return tagOBJECTDESCRIPTOR$dwDrawAspect$LAYOUT_; }

    static final VarHandle tagOBJECTDESCRIPTOR$dwDrawAspect$VH_ = tagOBJECTDESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDrawAspect"));
    static final java.lang.invoke.VarHandle tagOBJECTDESCRIPTOR$dwDrawAspect$VH() { return tagOBJECTDESCRIPTOR$dwDrawAspect$VH_; }

    static final MemoryLayout tagOBJECTDESCRIPTOR$dwStatus$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOBJECTDESCRIPTOR$dwStatus$LAYOUT() { return tagOBJECTDESCRIPTOR$dwStatus$LAYOUT_; }

    static final VarHandle tagOBJECTDESCRIPTOR$dwStatus$VH_ = tagOBJECTDESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStatus"));
    static final java.lang.invoke.VarHandle tagOBJECTDESCRIPTOR$dwStatus$VH() { return tagOBJECTDESCRIPTOR$dwStatus$VH_; }

    static final MemoryLayout tagOBJECTDESCRIPTOR$dwFullUserTypeName$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOBJECTDESCRIPTOR$dwFullUserTypeName$LAYOUT() { return tagOBJECTDESCRIPTOR$dwFullUserTypeName$LAYOUT_; }

    static final VarHandle tagOBJECTDESCRIPTOR$dwFullUserTypeName$VH_ = tagOBJECTDESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFullUserTypeName"));
    static final java.lang.invoke.VarHandle tagOBJECTDESCRIPTOR$dwFullUserTypeName$VH() { return tagOBJECTDESCRIPTOR$dwFullUserTypeName$VH_; }

    static final MemoryLayout tagOBJECTDESCRIPTOR$dwSrcOfCopy$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagOBJECTDESCRIPTOR$dwSrcOfCopy$LAYOUT() { return tagOBJECTDESCRIPTOR$dwSrcOfCopy$LAYOUT_; }

    static final VarHandle tagOBJECTDESCRIPTOR$dwSrcOfCopy$VH_ = tagOBJECTDESCRIPTOR$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSrcOfCopy"));
    static final java.lang.invoke.VarHandle tagOBJECTDESCRIPTOR$dwSrcOfCopy$VH() { return tagOBJECTDESCRIPTOR$dwSrcOfCopy$VH_; }

    static final MemoryLayout IOLETypes_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOLETypes_v0_0_c_ifspec$LAYOUT() { return IOLETypes_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle IOLETypes_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(IOLETypes_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle IOLETypes_v0_0_c_ifspec$VH() { return IOLETypes_v0_0_c_ifspec$VH_; }

    static final MemorySegment IOLETypes_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IOLETypes_v0_0_c_ifspec", IOLETypes_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IOLETypes_v0_0_c_ifspec$SEGMENT() { return IOLETypes_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout IOLETypes_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOLETypes_v0_0_s_ifspec$LAYOUT() { return IOLETypes_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle IOLETypes_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(IOLETypes_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle IOLETypes_v0_0_s_ifspec$VH() { return IOLETypes_v0_0_s_ifspec$VH_; }

    static final MemorySegment IOLETypes_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IOLETypes_v0_0_s_ifspec", IOLETypes_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IOLETypes_v0_0_s_ifspec$SEGMENT() { return IOLETypes_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IOleWindow$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleWindow$LAYOUT() { return IID_IOleWindow$LAYOUT_; }

    static final MemorySegment IID_IOleWindow$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleWindow", IID_IOleWindow$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleWindow$SEGMENT() { return IID_IOleWindow$SEGMENT_; }

    static final MemoryLayout IOleWindowVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetWindow"),
        C_POINTER.withName("ContextSensitiveHelp")
    ).withName("IOleWindowVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleWindowVtbl$struct$LAYOUT() { return IOleWindowVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleWindowVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleWindowVtbl$QueryInterface$LAYOUT() { return IOleWindowVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleWindowVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleWindowVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleWindowVtbl$QueryInterface$VH() { return IOleWindowVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleWindowVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleWindowVtbl$AddRef$LAYOUT() { return IOleWindowVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleWindowVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleWindowVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleWindowVtbl$AddRef$VH() { return IOleWindowVtbl$AddRef$VH_; }

    static final MemoryLayout IOleWindowVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleWindowVtbl$Release$LAYOUT() { return IOleWindowVtbl$Release$LAYOUT_; }

    static final VarHandle IOleWindowVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleWindowVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleWindowVtbl$Release$VH() { return IOleWindowVtbl$Release$VH_; }

    static final MemoryLayout IOleWindowVtbl$GetWindow$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleWindowVtbl$GetWindow$LAYOUT() { return IOleWindowVtbl$GetWindow$LAYOUT_; }

    static final VarHandle IOleWindowVtbl$GetWindow$VH_ = MemoryHandles.asAddressVarHandle(IOleWindowVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetWindow")));
    static final java.lang.invoke.VarHandle IOleWindowVtbl$GetWindow$VH() { return IOleWindowVtbl$GetWindow$VH_; }

    static final MemoryLayout IOleWindowVtbl$ContextSensitiveHelp$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleWindowVtbl$ContextSensitiveHelp$LAYOUT() { return IOleWindowVtbl$ContextSensitiveHelp$LAYOUT_; }

    static final VarHandle IOleWindowVtbl$ContextSensitiveHelp$VH_ = MemoryHandles.asAddressVarHandle(IOleWindowVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ContextSensitiveHelp")));
    static final java.lang.invoke.VarHandle IOleWindowVtbl$ContextSensitiveHelp$VH() { return IOleWindowVtbl$ContextSensitiveHelp$VH_; }

    static final MemoryLayout IOleWindow$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleWindow");
    static final jdk.incubator.foreign.MemoryLayout IOleWindow$struct$LAYOUT() { return IOleWindow$struct$LAYOUT_; }

    static final MemoryLayout IOleWindow$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleWindow$lpVtbl$LAYOUT() { return IOleWindow$lpVtbl$LAYOUT_; }

    static final VarHandle IOleWindow$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleWindow$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleWindow$lpVtbl$VH() { return IOleWindow$lpVtbl$VH_; }

    static final int OLEUPDATE_ALWAYS() { return (int)1L; }

    static final int OLEUPDATE_ONCALL() { return (int)3L; }

    static final int OLELINKBIND_EVENIFCLASSDIFF() { return (int)1L; }

    static final MemoryLayout IID_IOleLink$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleLink$LAYOUT() { return IID_IOleLink$LAYOUT_; }

    static final MemorySegment IID_IOleLink$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleLink", IID_IOleLink$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleLink$SEGMENT() { return IID_IOleLink$SEGMENT_; }

    static final MemoryLayout IOleLinkVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("SetUpdateOptions"),
        C_POINTER.withName("GetUpdateOptions"),
        C_POINTER.withName("SetSourceMoniker"),
        C_POINTER.withName("GetSourceMoniker"),
        C_POINTER.withName("SetSourceDisplayName"),
        C_POINTER.withName("GetSourceDisplayName"),
        C_POINTER.withName("BindToSource"),
        C_POINTER.withName("BindIfRunning"),
        C_POINTER.withName("GetBoundSource"),
        C_POINTER.withName("UnbindSource"),
        C_POINTER.withName("Update")
    ).withName("IOleLinkVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$struct$LAYOUT() { return IOleLinkVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleLinkVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$QueryInterface$LAYOUT() { return IOleLinkVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$QueryInterface$VH() { return IOleLinkVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleLinkVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$AddRef$LAYOUT() { return IOleLinkVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$AddRef$VH() { return IOleLinkVtbl$AddRef$VH_; }

    static final MemoryLayout IOleLinkVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$Release$LAYOUT() { return IOleLinkVtbl$Release$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$Release$VH() { return IOleLinkVtbl$Release$VH_; }

    static final MemoryLayout IOleLinkVtbl$SetUpdateOptions$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$SetUpdateOptions$LAYOUT() { return IOleLinkVtbl$SetUpdateOptions$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$SetUpdateOptions$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetUpdateOptions")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$SetUpdateOptions$VH() { return IOleLinkVtbl$SetUpdateOptions$VH_; }

    static final MemoryLayout IOleLinkVtbl$GetUpdateOptions$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$GetUpdateOptions$LAYOUT() { return IOleLinkVtbl$GetUpdateOptions$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$GetUpdateOptions$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetUpdateOptions")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$GetUpdateOptions$VH() { return IOleLinkVtbl$GetUpdateOptions$VH_; }

    static final MemoryLayout IOleLinkVtbl$SetSourceMoniker$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$SetSourceMoniker$LAYOUT() { return IOleLinkVtbl$SetSourceMoniker$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$SetSourceMoniker$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetSourceMoniker")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$SetSourceMoniker$VH() { return IOleLinkVtbl$SetSourceMoniker$VH_; }

    static final MemoryLayout IOleLinkVtbl$GetSourceMoniker$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$GetSourceMoniker$LAYOUT() { return IOleLinkVtbl$GetSourceMoniker$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$GetSourceMoniker$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSourceMoniker")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$GetSourceMoniker$VH() { return IOleLinkVtbl$GetSourceMoniker$VH_; }

    static final MemoryLayout IOleLinkVtbl$SetSourceDisplayName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$SetSourceDisplayName$LAYOUT() { return IOleLinkVtbl$SetSourceDisplayName$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$SetSourceDisplayName$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetSourceDisplayName")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$SetSourceDisplayName$VH() { return IOleLinkVtbl$SetSourceDisplayName$VH_; }

    static final MemoryLayout IOleLinkVtbl$GetSourceDisplayName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$GetSourceDisplayName$LAYOUT() { return IOleLinkVtbl$GetSourceDisplayName$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$GetSourceDisplayName$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSourceDisplayName")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$GetSourceDisplayName$VH() { return IOleLinkVtbl$GetSourceDisplayName$VH_; }

    static final MemoryLayout IOleLinkVtbl$BindToSource$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$BindToSource$LAYOUT() { return IOleLinkVtbl$BindToSource$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$BindToSource$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BindToSource")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$BindToSource$VH() { return IOleLinkVtbl$BindToSource$VH_; }

    static final MemoryLayout IOleLinkVtbl$BindIfRunning$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$BindIfRunning$LAYOUT() { return IOleLinkVtbl$BindIfRunning$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$BindIfRunning$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BindIfRunning")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$BindIfRunning$VH() { return IOleLinkVtbl$BindIfRunning$VH_; }

    static final MemoryLayout IOleLinkVtbl$GetBoundSource$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$GetBoundSource$LAYOUT() { return IOleLinkVtbl$GetBoundSource$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$GetBoundSource$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetBoundSource")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$GetBoundSource$VH() { return IOleLinkVtbl$GetBoundSource$VH_; }

    static final MemoryLayout IOleLinkVtbl$UnbindSource$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$UnbindSource$LAYOUT() { return IOleLinkVtbl$UnbindSource$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$UnbindSource$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnbindSource")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$UnbindSource$VH() { return IOleLinkVtbl$UnbindSource$VH_; }

    static final MemoryLayout IOleLinkVtbl$Update$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLinkVtbl$Update$LAYOUT() { return IOleLinkVtbl$Update$LAYOUT_; }

    static final VarHandle IOleLinkVtbl$Update$VH_ = MemoryHandles.asAddressVarHandle(IOleLinkVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Update")));
    static final java.lang.invoke.VarHandle IOleLinkVtbl$Update$VH() { return IOleLinkVtbl$Update$VH_; }

    static final MemoryLayout IOleLink$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleLink");
    static final jdk.incubator.foreign.MemoryLayout IOleLink$struct$LAYOUT() { return IOleLink$struct$LAYOUT_; }

    static final MemoryLayout IOleLink$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleLink$lpVtbl$LAYOUT() { return IOleLink$lpVtbl$LAYOUT_; }

    static final VarHandle IOleLink$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleLink$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleLink$lpVtbl$VH() { return IOleLink$lpVtbl$VH_; }

    static final int BINDSPEED_INDEFINITE() { return (int)1L; }

    static final int BINDSPEED_MODERATE() { return (int)2L; }

    static final int BINDSPEED_IMMEDIATE() { return (int)3L; }

    static final int OLECONTF_EMBEDDINGS() { return (int)1L; }

    static final int OLECONTF_LINKS() { return (int)2L; }

    static final int OLECONTF_OTHERS() { return (int)4L; }

    static final int OLECONTF_ONLYUSER() { return (int)8L; }

    static final int OLECONTF_ONLYIFRUNNING() { return (int)16L; }

    static final MemoryLayout IID_IOleItemContainer$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleItemContainer$LAYOUT() { return IID_IOleItemContainer$LAYOUT_; }

    static final MemorySegment IID_IOleItemContainer$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleItemContainer", IID_IOleItemContainer$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleItemContainer$SEGMENT() { return IID_IOleItemContainer$SEGMENT_; }

    static final MemoryLayout IOleItemContainerVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("ParseDisplayName"),
        C_POINTER.withName("EnumObjects"),
        C_POINTER.withName("LockContainer"),
        C_POINTER.withName("GetObjectA"),
        C_POINTER.withName("GetObjectStorage"),
        C_POINTER.withName("IsRunning")
    ).withName("IOleItemContainerVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$struct$LAYOUT() { return IOleItemContainerVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleItemContainerVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$QueryInterface$LAYOUT() { return IOleItemContainerVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleItemContainerVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleItemContainerVtbl$QueryInterface$VH() { return IOleItemContainerVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleItemContainerVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$AddRef$LAYOUT() { return IOleItemContainerVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleItemContainerVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleItemContainerVtbl$AddRef$VH() { return IOleItemContainerVtbl$AddRef$VH_; }

    static final MemoryLayout IOleItemContainerVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$Release$LAYOUT() { return IOleItemContainerVtbl$Release$LAYOUT_; }

    static final VarHandle IOleItemContainerVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleItemContainerVtbl$Release$VH() { return IOleItemContainerVtbl$Release$VH_; }

    static final MemoryLayout IOleItemContainerVtbl$ParseDisplayName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$ParseDisplayName$LAYOUT() { return IOleItemContainerVtbl$ParseDisplayName$LAYOUT_; }

    static final VarHandle IOleItemContainerVtbl$ParseDisplayName$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParseDisplayName")));
    static final java.lang.invoke.VarHandle IOleItemContainerVtbl$ParseDisplayName$VH() { return IOleItemContainerVtbl$ParseDisplayName$VH_; }

    static final MemoryLayout IOleItemContainerVtbl$EnumObjects$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$EnumObjects$LAYOUT() { return IOleItemContainerVtbl$EnumObjects$LAYOUT_; }

    static final VarHandle IOleItemContainerVtbl$EnumObjects$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumObjects")));
    static final java.lang.invoke.VarHandle IOleItemContainerVtbl$EnumObjects$VH() { return IOleItemContainerVtbl$EnumObjects$VH_; }

    static final MemoryLayout IOleItemContainerVtbl$LockContainer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$LockContainer$LAYOUT() { return IOleItemContainerVtbl$LockContainer$LAYOUT_; }

    static final VarHandle IOleItemContainerVtbl$LockContainer$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LockContainer")));
    static final java.lang.invoke.VarHandle IOleItemContainerVtbl$LockContainer$VH() { return IOleItemContainerVtbl$LockContainer$VH_; }

    static final MemoryLayout IOleItemContainerVtbl$GetObjectA$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$GetObjectA$LAYOUT() { return IOleItemContainerVtbl$GetObjectA$LAYOUT_; }

    static final VarHandle IOleItemContainerVtbl$GetObjectA$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetObjectA")));
    static final java.lang.invoke.VarHandle IOleItemContainerVtbl$GetObjectA$VH() { return IOleItemContainerVtbl$GetObjectA$VH_; }

    static final MemoryLayout IOleItemContainerVtbl$GetObjectStorage$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$GetObjectStorage$LAYOUT() { return IOleItemContainerVtbl$GetObjectStorage$LAYOUT_; }

    static final VarHandle IOleItemContainerVtbl$GetObjectStorage$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetObjectStorage")));
    static final java.lang.invoke.VarHandle IOleItemContainerVtbl$GetObjectStorage$VH() { return IOleItemContainerVtbl$GetObjectStorage$VH_; }

    static final MemoryLayout IOleItemContainerVtbl$IsRunning$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainerVtbl$IsRunning$LAYOUT() { return IOleItemContainerVtbl$IsRunning$LAYOUT_; }

    static final VarHandle IOleItemContainerVtbl$IsRunning$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsRunning")));
    static final java.lang.invoke.VarHandle IOleItemContainerVtbl$IsRunning$VH() { return IOleItemContainerVtbl$IsRunning$VH_; }

    static final MemoryLayout IOleItemContainer$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IOleItemContainer");
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainer$struct$LAYOUT() { return IOleItemContainer$struct$LAYOUT_; }

    static final MemoryLayout IOleItemContainer$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleItemContainer$lpVtbl$LAYOUT() { return IOleItemContainer$lpVtbl$LAYOUT_; }

    static final VarHandle IOleItemContainer$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IOleItemContainer$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IOleItemContainer$lpVtbl$VH() { return IOleItemContainer$lpVtbl$VH_; }

    static final MemoryLayout IID_IOleInPlaceUIWindow$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleInPlaceUIWindow$LAYOUT() { return IID_IOleInPlaceUIWindow$LAYOUT_; }

    static final MemorySegment IID_IOleInPlaceUIWindow$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleInPlaceUIWindow", IID_IOleInPlaceUIWindow$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleInPlaceUIWindow$SEGMENT() { return IID_IOleInPlaceUIWindow$SEGMENT_; }

    static final MemoryLayout IOleInPlaceUIWindowVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetWindow"),
        C_POINTER.withName("ContextSensitiveHelp"),
        C_POINTER.withName("GetBorder"),
        C_POINTER.withName("RequestBorderSpace"),
        C_POINTER.withName("SetBorderSpace"),
        C_POINTER.withName("SetActiveObject")
    ).withName("IOleInPlaceUIWindowVtbl");
    static final jdk.incubator.foreign.MemoryLayout IOleInPlaceUIWindowVtbl$struct$LAYOUT() { return IOleInPlaceUIWindowVtbl$struct$LAYOUT_; }

    static final MemoryLayout IOleInPlaceUIWindowVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleInPlaceUIWindowVtbl$QueryInterface$LAYOUT() { return IOleInPlaceUIWindowVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IOleInPlaceUIWindowVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IOleInPlaceUIWindowVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IOleInPlaceUIWindowVtbl$QueryInterface$VH() { return IOleInPlaceUIWindowVtbl$QueryInterface$VH_; }

    static final MemoryLayout IOleInPlaceUIWindowVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleInPlaceUIWindowVtbl$AddRef$LAYOUT() { return IOleInPlaceUIWindowVtbl$AddRef$LAYOUT_; }

    static final VarHandle IOleInPlaceUIWindowVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IOleInPlaceUIWindowVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IOleInPlaceUIWindowVtbl$AddRef$VH() { return IOleInPlaceUIWindowVtbl$AddRef$VH_; }

    static final MemoryLayout IOleInPlaceUIWindowVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IOleInPlaceUIWindowVtbl$Release$LAYOUT() { return IOleInPlaceUIWindowVtbl$Release$LAYOUT_; }

    static final VarHandle IOleInPlaceUIWindowVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IOleInPlaceUIWindowVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IOleInPlaceUIWindowVtbl$Release$VH() { return IOleInPlaceUIWindowVtbl$Release$VH_; }

}

