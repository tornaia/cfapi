// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$77 extends cfapi_h$constants$76 {

    /* package-private */ cfapi_h$constants$77() {}
    static final FunctionDescriptor CoDisableCallCancellation$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDisableCallCancellation$FUNC() { return CoDisableCallCancellation$FUNC_; }

    static final MethodHandle CoDisableCallCancellation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDisableCallCancellation",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoDisableCallCancellation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDisableCallCancellation$MH() { return CoDisableCallCancellation$MH_; }

    static final FunctionDescriptor StringFromCLSID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StringFromCLSID$FUNC() { return StringFromCLSID$FUNC_; }

    static final MethodHandle StringFromCLSID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StringFromCLSID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StringFromCLSID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StringFromCLSID$MH() { return StringFromCLSID$MH_; }

    static final FunctionDescriptor CLSIDFromString$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CLSIDFromString$FUNC() { return CLSIDFromString$FUNC_; }

    static final MethodHandle CLSIDFromString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CLSIDFromString",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CLSIDFromString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CLSIDFromString$MH() { return CLSIDFromString$MH_; }

    static final FunctionDescriptor StringFromIID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor StringFromIID$FUNC() { return StringFromIID$FUNC_; }

    static final MethodHandle StringFromIID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StringFromIID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        StringFromIID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StringFromIID$MH() { return StringFromIID$MH_; }

    static final FunctionDescriptor IIDFromString$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IIDFromString$FUNC() { return IIDFromString$FUNC_; }

    static final MethodHandle IIDFromString$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IIDFromString",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IIDFromString$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IIDFromString$MH() { return IIDFromString$MH_; }

    static final FunctionDescriptor ProgIDFromCLSID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ProgIDFromCLSID$FUNC() { return ProgIDFromCLSID$FUNC_; }

    static final MethodHandle ProgIDFromCLSID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ProgIDFromCLSID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ProgIDFromCLSID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ProgIDFromCLSID$MH() { return ProgIDFromCLSID$MH_; }

    static final FunctionDescriptor CLSIDFromProgID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CLSIDFromProgID$FUNC() { return CLSIDFromProgID$FUNC_; }

    static final MethodHandle CLSIDFromProgID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CLSIDFromProgID",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CLSIDFromProgID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CLSIDFromProgID$MH() { return CLSIDFromProgID$MH_; }

    static final FunctionDescriptor StringFromGUID2$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor StringFromGUID2$FUNC() { return StringFromGUID2$FUNC_; }

    static final MethodHandle StringFromGUID2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "StringFromGUID2",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        StringFromGUID2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle StringFromGUID2$MH() { return StringFromGUID2$MH_; }

    static final FunctionDescriptor CoCreateGuid$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateGuid$FUNC() { return CoCreateGuid$FUNC_; }

    static final MethodHandle CoCreateGuid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateGuid",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoCreateGuid$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateGuid$MH() { return CoCreateGuid$MH_; }

    static final FunctionDescriptor PropVariantCopy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PropVariantCopy$FUNC() { return PropVariantCopy$FUNC_; }

    static final MethodHandle PropVariantCopy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PropVariantCopy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        PropVariantCopy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PropVariantCopy$MH() { return PropVariantCopy$MH_; }

    static final FunctionDescriptor PropVariantClear$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PropVariantClear$FUNC() { return PropVariantClear$FUNC_; }

    static final MethodHandle PropVariantClear$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PropVariantClear",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        PropVariantClear$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PropVariantClear$MH() { return PropVariantClear$MH_; }

    static final FunctionDescriptor FreePropVariantArray$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FreePropVariantArray$FUNC() { return FreePropVariantArray$FUNC_; }

    static final MethodHandle FreePropVariantArray$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreePropVariantArray",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        FreePropVariantArray$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FreePropVariantArray$MH() { return FreePropVariantArray$MH_; }

    static final FunctionDescriptor CoWaitForMultipleHandles$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoWaitForMultipleHandles$FUNC() { return CoWaitForMultipleHandles$FUNC_; }

    static final MethodHandle CoWaitForMultipleHandles$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoWaitForMultipleHandles",
        "(IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoWaitForMultipleHandles$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoWaitForMultipleHandles$MH() { return CoWaitForMultipleHandles$MH_; }

    static final int COWAIT_DEFAULT() { return (int)0L; }

    static final int COWAIT_WAITALL() { return (int)1L; }

    static final int COWAIT_ALERTABLE() { return (int)2L; }

    static final int COWAIT_INPUTAVAILABLE() { return (int)4L; }

    static final int COWAIT_DISPATCH_CALLS() { return (int)8L; }

    static final int COWAIT_DISPATCH_WINDOW_MESSAGES() { return (int)16L; }

    static final int CWMO_DEFAULT() { return (int)0L; }

    static final int CWMO_DISPATCH_CALLS() { return (int)1L; }

    static final int CWMO_DISPATCH_WINDOW_MESSAGES() { return (int)2L; }

    static final FunctionDescriptor CoWaitForMultipleObjects$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoWaitForMultipleObjects$FUNC() { return CoWaitForMultipleObjects$FUNC_; }

    static final MethodHandle CoWaitForMultipleObjects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoWaitForMultipleObjects",
        "(IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoWaitForMultipleObjects$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoWaitForMultipleObjects$MH() { return CoWaitForMultipleObjects$MH_; }

    static final FunctionDescriptor CoGetTreatAsClass$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetTreatAsClass$FUNC() { return CoGetTreatAsClass$FUNC_; }

    static final MethodHandle CoGetTreatAsClass$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetTreatAsClass",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetTreatAsClass$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetTreatAsClass$MH() { return CoGetTreatAsClass$MH_; }

    static final FunctionDescriptor CoInvalidateRemoteMachineBindings$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoInvalidateRemoteMachineBindings$FUNC() { return CoInvalidateRemoteMachineBindings$FUNC_; }

    static final MethodHandle CoInvalidateRemoteMachineBindings$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoInvalidateRemoteMachineBindings",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoInvalidateRemoteMachineBindings$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoInvalidateRemoteMachineBindings$MH() { return CoInvalidateRemoteMachineBindings$MH_; }

    static final int AGILEREFERENCE_DEFAULT() { return (int)0L; }

    static final int AGILEREFERENCE_DELAYEDMARSHAL() { return (int)1L; }

    static final FunctionDescriptor RoGetAgileReference$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RoGetAgileReference$FUNC() { return RoGetAgileReference$FUNC_; }

    static final MethodHandle RoGetAgileReference$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RoGetAgileReference",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RoGetAgileReference$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RoGetAgileReference$MH() { return RoGetAgileReference$MH_; }

    static final FunctionDescriptor DllGetClassObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DllGetClassObject$FUNC() { return DllGetClassObject$FUNC_; }

    static final MethodHandle DllGetClassObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DllGetClassObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        DllGetClassObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DllGetClassObject$MH() { return DllGetClassObject$MH_; }

    static final FunctionDescriptor DllCanUnloadNow$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor DllCanUnloadNow$FUNC() { return DllCanUnloadNow$FUNC_; }

    static final MethodHandle DllCanUnloadNow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DllCanUnloadNow",
        "()I",
        DllCanUnloadNow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DllCanUnloadNow$MH() { return DllCanUnloadNow$MH_; }

    static final FunctionDescriptor CoTaskMemAlloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoTaskMemAlloc$FUNC() { return CoTaskMemAlloc$FUNC_; }

    static final MethodHandle CoTaskMemAlloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoTaskMemAlloc",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        CoTaskMemAlloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoTaskMemAlloc$MH() { return CoTaskMemAlloc$MH_; }

    static final FunctionDescriptor CoTaskMemRealloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoTaskMemRealloc$FUNC() { return CoTaskMemRealloc$FUNC_; }

    static final MethodHandle CoTaskMemRealloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoTaskMemRealloc",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        CoTaskMemRealloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoTaskMemRealloc$MH() { return CoTaskMemRealloc$MH_; }

    static final FunctionDescriptor CoTaskMemFree$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoTaskMemFree$FUNC() { return CoTaskMemFree$FUNC_; }

    static final MethodHandle CoTaskMemFree$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoTaskMemFree",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        CoTaskMemFree$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoTaskMemFree$MH() { return CoTaskMemFree$MH_; }

    static final FunctionDescriptor CoFileTimeNow$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoFileTimeNow$FUNC() { return CoFileTimeNow$FUNC_; }

    static final MethodHandle CoFileTimeNow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoFileTimeNow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoFileTimeNow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoFileTimeNow$MH() { return CoFileTimeNow$MH_; }

    static final FunctionDescriptor CLSIDFromProgIDEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CLSIDFromProgIDEx$FUNC() { return CLSIDFromProgIDEx$FUNC_; }

    static final MethodHandle CLSIDFromProgIDEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CLSIDFromProgIDEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CLSIDFromProgIDEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CLSIDFromProgIDEx$MH() { return CLSIDFromProgIDEx$MH_; }

    static final MemoryLayout CO_DEVICE_CATALOG_COOKIE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("CO_DEVICE_CATALOG_COOKIE__");
    static final jdk.incubator.foreign.MemoryLayout CO_DEVICE_CATALOG_COOKIE__$struct$LAYOUT() { return CO_DEVICE_CATALOG_COOKIE__$struct$LAYOUT_; }

    static final MemoryLayout CO_DEVICE_CATALOG_COOKIE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CO_DEVICE_CATALOG_COOKIE__$unused$LAYOUT() { return CO_DEVICE_CATALOG_COOKIE__$unused$LAYOUT_; }

    static final VarHandle CO_DEVICE_CATALOG_COOKIE__$unused$VH_ = CO_DEVICE_CATALOG_COOKIE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle CO_DEVICE_CATALOG_COOKIE__$unused$VH() { return CO_DEVICE_CATALOG_COOKIE__$unused$VH_; }

    static final FunctionDescriptor CoRegisterDeviceCatalog$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterDeviceCatalog$FUNC() { return CoRegisterDeviceCatalog$FUNC_; }

    static final MethodHandle CoRegisterDeviceCatalog$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterDeviceCatalog",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterDeviceCatalog$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterDeviceCatalog$MH() { return CoRegisterDeviceCatalog$MH_; }

    static final FunctionDescriptor CoRevokeDeviceCatalog$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRevokeDeviceCatalog$FUNC() { return CoRevokeDeviceCatalog$FUNC_; }

    static final MethodHandle CoRevokeDeviceCatalog$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRevokeDeviceCatalog",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRevokeDeviceCatalog$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRevokeDeviceCatalog$MH() { return CoRevokeDeviceCatalog$MH_; }

    static final MemoryLayout __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$VH() { return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec", __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$VH() { return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec", __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$VH() { return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec", __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$VH() { return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec", __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$VH() { return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec", __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$VH() { return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec", __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$VH() { return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec", __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$VH() { return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec", __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$VH() { return __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0053_v0_0_c_ifspec", __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$VH() { return __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0053_v0_0_s_ifspec", __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IMallocSpy$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IMallocSpy$LAYOUT() { return IID_IMallocSpy$LAYOUT_; }

    static final MemorySegment IID_IMallocSpy$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IMallocSpy", IID_IMallocSpy$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IMallocSpy$SEGMENT() { return IID_IMallocSpy$SEGMENT_; }

    static final MemoryLayout IMallocSpyVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("PreAlloc"),
        C_POINTER.withName("PostAlloc"),
        C_POINTER.withName("PreFree"),
        C_POINTER.withName("PostFree"),
        C_POINTER.withName("PreRealloc"),
        C_POINTER.withName("PostRealloc"),
        C_POINTER.withName("PreGetSize"),
        C_POINTER.withName("PostGetSize"),
        C_POINTER.withName("PreDidAlloc"),
        C_POINTER.withName("PostDidAlloc"),
        C_POINTER.withName("PreHeapMinimize"),
        C_POINTER.withName("PostHeapMinimize")
    ).withName("IMallocSpyVtbl");
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$struct$LAYOUT() { return IMallocSpyVtbl$struct$LAYOUT_; }

    static final MemoryLayout IMallocSpyVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$QueryInterface$LAYOUT() { return IMallocSpyVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$QueryInterface$VH() { return IMallocSpyVtbl$QueryInterface$VH_; }

    static final MemoryLayout IMallocSpyVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$AddRef$LAYOUT() { return IMallocSpyVtbl$AddRef$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$AddRef$VH() { return IMallocSpyVtbl$AddRef$VH_; }

    static final MemoryLayout IMallocSpyVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$Release$LAYOUT() { return IMallocSpyVtbl$Release$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$Release$VH() { return IMallocSpyVtbl$Release$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PreAlloc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PreAlloc$LAYOUT() { return IMallocSpyVtbl$PreAlloc$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PreAlloc$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreAlloc")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PreAlloc$VH() { return IMallocSpyVtbl$PreAlloc$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PostAlloc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PostAlloc$LAYOUT() { return IMallocSpyVtbl$PostAlloc$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PostAlloc$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostAlloc")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PostAlloc$VH() { return IMallocSpyVtbl$PostAlloc$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PreFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PreFree$LAYOUT() { return IMallocSpyVtbl$PreFree$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PreFree$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreFree")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PreFree$VH() { return IMallocSpyVtbl$PreFree$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PostFree$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PostFree$LAYOUT() { return IMallocSpyVtbl$PostFree$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PostFree$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostFree")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PostFree$VH() { return IMallocSpyVtbl$PostFree$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PreRealloc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PreRealloc$LAYOUT() { return IMallocSpyVtbl$PreRealloc$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PreRealloc$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreRealloc")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PreRealloc$VH() { return IMallocSpyVtbl$PreRealloc$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PostRealloc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PostRealloc$LAYOUT() { return IMallocSpyVtbl$PostRealloc$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PostRealloc$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostRealloc")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PostRealloc$VH() { return IMallocSpyVtbl$PostRealloc$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PreGetSize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PreGetSize$LAYOUT() { return IMallocSpyVtbl$PreGetSize$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PreGetSize$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreGetSize")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PreGetSize$VH() { return IMallocSpyVtbl$PreGetSize$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PostGetSize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PostGetSize$LAYOUT() { return IMallocSpyVtbl$PostGetSize$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PostGetSize$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostGetSize")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PostGetSize$VH() { return IMallocSpyVtbl$PostGetSize$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PreDidAlloc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PreDidAlloc$LAYOUT() { return IMallocSpyVtbl$PreDidAlloc$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PreDidAlloc$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreDidAlloc")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PreDidAlloc$VH() { return IMallocSpyVtbl$PreDidAlloc$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PostDidAlloc$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PostDidAlloc$LAYOUT() { return IMallocSpyVtbl$PostDidAlloc$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PostDidAlloc$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostDidAlloc")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PostDidAlloc$VH() { return IMallocSpyVtbl$PostDidAlloc$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PreHeapMinimize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PreHeapMinimize$LAYOUT() { return IMallocSpyVtbl$PreHeapMinimize$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PreHeapMinimize$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PreHeapMinimize")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PreHeapMinimize$VH() { return IMallocSpyVtbl$PreHeapMinimize$VH_; }

    static final MemoryLayout IMallocSpyVtbl$PostHeapMinimize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpyVtbl$PostHeapMinimize$LAYOUT() { return IMallocSpyVtbl$PostHeapMinimize$LAYOUT_; }

    static final VarHandle IMallocSpyVtbl$PostHeapMinimize$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpyVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PostHeapMinimize")));
    static final java.lang.invoke.VarHandle IMallocSpyVtbl$PostHeapMinimize$VH() { return IMallocSpyVtbl$PostHeapMinimize$VH_; }

    static final MemoryLayout IMallocSpy$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IMallocSpy");
    static final jdk.incubator.foreign.MemoryLayout IMallocSpy$struct$LAYOUT() { return IMallocSpy$struct$LAYOUT_; }

    static final MemoryLayout IMallocSpy$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMallocSpy$lpVtbl$LAYOUT() { return IMallocSpy$lpVtbl$LAYOUT_; }

    static final VarHandle IMallocSpy$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IMallocSpy$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IMallocSpy$lpVtbl$VH() { return IMallocSpy$lpVtbl$VH_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$VH() { return __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0054_v0_0_c_ifspec", __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$VH() { return __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0054_v0_0_s_ifspec", __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout tagBIND_OPTS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbStruct"),
        C_LONG.withName("grfFlags"),
        C_LONG.withName("grfMode"),
        C_LONG.withName("dwTickCountDeadline")
    ).withName("tagBIND_OPTS");
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS$struct$LAYOUT() { return tagBIND_OPTS$struct$LAYOUT_; }

    static final MemoryLayout tagBIND_OPTS$cbStruct$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS$cbStruct$LAYOUT() { return tagBIND_OPTS$cbStruct$LAYOUT_; }

    static final VarHandle tagBIND_OPTS$cbStruct$VH_ = tagBIND_OPTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbStruct"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS$cbStruct$VH() { return tagBIND_OPTS$cbStruct$VH_; }

    static final MemoryLayout tagBIND_OPTS$grfFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS$grfFlags$LAYOUT() { return tagBIND_OPTS$grfFlags$LAYOUT_; }

    static final VarHandle tagBIND_OPTS$grfFlags$VH_ = tagBIND_OPTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("grfFlags"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS$grfFlags$VH() { return tagBIND_OPTS$grfFlags$VH_; }

    static final MemoryLayout tagBIND_OPTS$grfMode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS$grfMode$LAYOUT() { return tagBIND_OPTS$grfMode$LAYOUT_; }

    static final VarHandle tagBIND_OPTS$grfMode$VH_ = tagBIND_OPTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("grfMode"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS$grfMode$VH() { return tagBIND_OPTS$grfMode$VH_; }

    static final MemoryLayout tagBIND_OPTS$dwTickCountDeadline$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS$dwTickCountDeadline$LAYOUT() { return tagBIND_OPTS$dwTickCountDeadline$LAYOUT_; }

    static final VarHandle tagBIND_OPTS$dwTickCountDeadline$VH_ = tagBIND_OPTS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTickCountDeadline"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS$dwTickCountDeadline$VH() { return tagBIND_OPTS$dwTickCountDeadline$VH_; }

    static final MemoryLayout tagBIND_OPTS2$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbStruct"),
        C_LONG.withName("grfFlags"),
        C_LONG.withName("grfMode"),
        C_LONG.withName("dwTickCountDeadline"),
        C_LONG.withName("dwTrackFlags"),
        C_LONG.withName("dwClassContext"),
        C_LONG.withName("locale"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pServerInfo")
    ).withName("tagBIND_OPTS2");
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS2$struct$LAYOUT() { return tagBIND_OPTS2$struct$LAYOUT_; }

    static final MemoryLayout tagBIND_OPTS2$cbStruct$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS2$cbStruct$LAYOUT() { return tagBIND_OPTS2$cbStruct$LAYOUT_; }

    static final VarHandle tagBIND_OPTS2$cbStruct$VH_ = tagBIND_OPTS2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbStruct"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS2$cbStruct$VH() { return tagBIND_OPTS2$cbStruct$VH_; }

    static final MemoryLayout tagBIND_OPTS2$grfFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS2$grfFlags$LAYOUT() { return tagBIND_OPTS2$grfFlags$LAYOUT_; }

    static final VarHandle tagBIND_OPTS2$grfFlags$VH_ = tagBIND_OPTS2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("grfFlags"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS2$grfFlags$VH() { return tagBIND_OPTS2$grfFlags$VH_; }

    static final MemoryLayout tagBIND_OPTS2$grfMode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS2$grfMode$LAYOUT() { return tagBIND_OPTS2$grfMode$LAYOUT_; }

    static final VarHandle tagBIND_OPTS2$grfMode$VH_ = tagBIND_OPTS2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("grfMode"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS2$grfMode$VH() { return tagBIND_OPTS2$grfMode$VH_; }

    static final MemoryLayout tagBIND_OPTS2$dwTickCountDeadline$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS2$dwTickCountDeadline$LAYOUT() { return tagBIND_OPTS2$dwTickCountDeadline$LAYOUT_; }

    static final VarHandle tagBIND_OPTS2$dwTickCountDeadline$VH_ = tagBIND_OPTS2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTickCountDeadline"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS2$dwTickCountDeadline$VH() { return tagBIND_OPTS2$dwTickCountDeadline$VH_; }

    static final MemoryLayout tagBIND_OPTS2$dwTrackFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS2$dwTrackFlags$LAYOUT() { return tagBIND_OPTS2$dwTrackFlags$LAYOUT_; }

    static final VarHandle tagBIND_OPTS2$dwTrackFlags$VH_ = tagBIND_OPTS2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTrackFlags"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS2$dwTrackFlags$VH() { return tagBIND_OPTS2$dwTrackFlags$VH_; }

    static final MemoryLayout tagBIND_OPTS2$dwClassContext$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS2$dwClassContext$LAYOUT() { return tagBIND_OPTS2$dwClassContext$LAYOUT_; }

    static final VarHandle tagBIND_OPTS2$dwClassContext$VH_ = tagBIND_OPTS2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwClassContext"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS2$dwClassContext$VH() { return tagBIND_OPTS2$dwClassContext$VH_; }

    static final MemoryLayout tagBIND_OPTS2$locale$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS2$locale$LAYOUT() { return tagBIND_OPTS2$locale$LAYOUT_; }

    static final VarHandle tagBIND_OPTS2$locale$VH_ = tagBIND_OPTS2$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("locale"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS2$locale$VH() { return tagBIND_OPTS2$locale$VH_; }

    static final MemoryLayout tagBIND_OPTS2$pServerInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS2$pServerInfo$LAYOUT() { return tagBIND_OPTS2$pServerInfo$LAYOUT_; }

    static final VarHandle tagBIND_OPTS2$pServerInfo$VH_ = MemoryHandles.asAddressVarHandle(tagBIND_OPTS2$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pServerInfo")));
    static final java.lang.invoke.VarHandle tagBIND_OPTS2$pServerInfo$VH() { return tagBIND_OPTS2$pServerInfo$VH_; }

    static final MemoryLayout tagBIND_OPTS3$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbStruct"),
        C_LONG.withName("grfFlags"),
        C_LONG.withName("grfMode"),
        C_LONG.withName("dwTickCountDeadline"),
        C_LONG.withName("dwTrackFlags"),
        C_LONG.withName("dwClassContext"),
        C_LONG.withName("locale"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pServerInfo"),
        C_POINTER.withName("hwnd")
    ).withName("tagBIND_OPTS3");
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$struct$LAYOUT() { return tagBIND_OPTS3$struct$LAYOUT_; }

    static final MemoryLayout tagBIND_OPTS3$cbStruct$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$cbStruct$LAYOUT() { return tagBIND_OPTS3$cbStruct$LAYOUT_; }

    static final VarHandle tagBIND_OPTS3$cbStruct$VH_ = tagBIND_OPTS3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbStruct"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS3$cbStruct$VH() { return tagBIND_OPTS3$cbStruct$VH_; }

    static final MemoryLayout tagBIND_OPTS3$grfFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$grfFlags$LAYOUT() { return tagBIND_OPTS3$grfFlags$LAYOUT_; }

    static final VarHandle tagBIND_OPTS3$grfFlags$VH_ = tagBIND_OPTS3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("grfFlags"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS3$grfFlags$VH() { return tagBIND_OPTS3$grfFlags$VH_; }

    static final MemoryLayout tagBIND_OPTS3$grfMode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$grfMode$LAYOUT() { return tagBIND_OPTS3$grfMode$LAYOUT_; }

    static final VarHandle tagBIND_OPTS3$grfMode$VH_ = tagBIND_OPTS3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("grfMode"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS3$grfMode$VH() { return tagBIND_OPTS3$grfMode$VH_; }

    static final MemoryLayout tagBIND_OPTS3$dwTickCountDeadline$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$dwTickCountDeadline$LAYOUT() { return tagBIND_OPTS3$dwTickCountDeadline$LAYOUT_; }

    static final VarHandle tagBIND_OPTS3$dwTickCountDeadline$VH_ = tagBIND_OPTS3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTickCountDeadline"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS3$dwTickCountDeadline$VH() { return tagBIND_OPTS3$dwTickCountDeadline$VH_; }

    static final MemoryLayout tagBIND_OPTS3$dwTrackFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$dwTrackFlags$LAYOUT() { return tagBIND_OPTS3$dwTrackFlags$LAYOUT_; }

    static final VarHandle tagBIND_OPTS3$dwTrackFlags$VH_ = tagBIND_OPTS3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTrackFlags"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS3$dwTrackFlags$VH() { return tagBIND_OPTS3$dwTrackFlags$VH_; }

    static final MemoryLayout tagBIND_OPTS3$dwClassContext$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$dwClassContext$LAYOUT() { return tagBIND_OPTS3$dwClassContext$LAYOUT_; }

    static final VarHandle tagBIND_OPTS3$dwClassContext$VH_ = tagBIND_OPTS3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwClassContext"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS3$dwClassContext$VH() { return tagBIND_OPTS3$dwClassContext$VH_; }

    static final MemoryLayout tagBIND_OPTS3$locale$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$locale$LAYOUT() { return tagBIND_OPTS3$locale$LAYOUT_; }

    static final VarHandle tagBIND_OPTS3$locale$VH_ = tagBIND_OPTS3$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("locale"));
    static final java.lang.invoke.VarHandle tagBIND_OPTS3$locale$VH() { return tagBIND_OPTS3$locale$VH_; }

    static final MemoryLayout tagBIND_OPTS3$pServerInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$pServerInfo$LAYOUT() { return tagBIND_OPTS3$pServerInfo$LAYOUT_; }

    static final VarHandle tagBIND_OPTS3$pServerInfo$VH_ = MemoryHandles.asAddressVarHandle(tagBIND_OPTS3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pServerInfo")));
    static final java.lang.invoke.VarHandle tagBIND_OPTS3$pServerInfo$VH() { return tagBIND_OPTS3$pServerInfo$VH_; }

    static final MemoryLayout tagBIND_OPTS3$hwnd$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagBIND_OPTS3$hwnd$LAYOUT() { return tagBIND_OPTS3$hwnd$LAYOUT_; }

    static final VarHandle tagBIND_OPTS3$hwnd$VH_ = MemoryHandles.asAddressVarHandle(tagBIND_OPTS3$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwnd")));
    static final java.lang.invoke.VarHandle tagBIND_OPTS3$hwnd$VH() { return tagBIND_OPTS3$hwnd$VH_; }

    static final int BIND_MAYBOTHERUSER() { return (int)1L; }

    static final int BIND_JUSTTESTEXISTENCE() { return (int)2L; }

    static final MemoryLayout IID_IBindCtx$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IBindCtx$LAYOUT() { return IID_IBindCtx$LAYOUT_; }

    static final MemorySegment IID_IBindCtx$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IBindCtx", IID_IBindCtx$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IBindCtx$SEGMENT() { return IID_IBindCtx$SEGMENT_; }

    static final MemoryLayout IBindCtxVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("RegisterObjectBound"),
        C_POINTER.withName("RevokeObjectBound"),
        C_POINTER.withName("ReleaseBoundObjects"),
        C_POINTER.withName("SetBindOptions"),
        C_POINTER.withName("GetBindOptions"),
        C_POINTER.withName("GetRunningObjectTable"),
        C_POINTER.withName("RegisterObjectParam"),
        C_POINTER.withName("GetObjectParam"),
        C_POINTER.withName("EnumObjectParam"),
        C_POINTER.withName("RevokeObjectParam")
    ).withName("IBindCtxVtbl");
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$struct$LAYOUT() { return IBindCtxVtbl$struct$LAYOUT_; }

    static final MemoryLayout IBindCtxVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$QueryInterface$LAYOUT() { return IBindCtxVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$QueryInterface$VH() { return IBindCtxVtbl$QueryInterface$VH_; }

    static final MemoryLayout IBindCtxVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$AddRef$LAYOUT() { return IBindCtxVtbl$AddRef$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$AddRef$VH() { return IBindCtxVtbl$AddRef$VH_; }

    static final MemoryLayout IBindCtxVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$Release$LAYOUT() { return IBindCtxVtbl$Release$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$Release$VH() { return IBindCtxVtbl$Release$VH_; }

    static final MemoryLayout IBindCtxVtbl$RegisterObjectBound$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$RegisterObjectBound$LAYOUT() { return IBindCtxVtbl$RegisterObjectBound$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$RegisterObjectBound$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegisterObjectBound")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$RegisterObjectBound$VH() { return IBindCtxVtbl$RegisterObjectBound$VH_; }

    static final MemoryLayout IBindCtxVtbl$RevokeObjectBound$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$RevokeObjectBound$LAYOUT() { return IBindCtxVtbl$RevokeObjectBound$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$RevokeObjectBound$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RevokeObjectBound")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$RevokeObjectBound$VH() { return IBindCtxVtbl$RevokeObjectBound$VH_; }

    static final MemoryLayout IBindCtxVtbl$ReleaseBoundObjects$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$ReleaseBoundObjects$LAYOUT() { return IBindCtxVtbl$ReleaseBoundObjects$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$ReleaseBoundObjects$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseBoundObjects")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$ReleaseBoundObjects$VH() { return IBindCtxVtbl$ReleaseBoundObjects$VH_; }

    static final MemoryLayout IBindCtxVtbl$SetBindOptions$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$SetBindOptions$LAYOUT() { return IBindCtxVtbl$SetBindOptions$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$SetBindOptions$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetBindOptions")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$SetBindOptions$VH() { return IBindCtxVtbl$SetBindOptions$VH_; }

    static final MemoryLayout IBindCtxVtbl$GetBindOptions$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$GetBindOptions$LAYOUT() { return IBindCtxVtbl$GetBindOptions$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$GetBindOptions$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetBindOptions")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$GetBindOptions$VH() { return IBindCtxVtbl$GetBindOptions$VH_; }

    static final MemoryLayout IBindCtxVtbl$GetRunningObjectTable$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$GetRunningObjectTable$LAYOUT() { return IBindCtxVtbl$GetRunningObjectTable$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$GetRunningObjectTable$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRunningObjectTable")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$GetRunningObjectTable$VH() { return IBindCtxVtbl$GetRunningObjectTable$VH_; }

    static final MemoryLayout IBindCtxVtbl$RegisterObjectParam$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$RegisterObjectParam$LAYOUT() { return IBindCtxVtbl$RegisterObjectParam$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$RegisterObjectParam$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RegisterObjectParam")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$RegisterObjectParam$VH() { return IBindCtxVtbl$RegisterObjectParam$VH_; }

    static final MemoryLayout IBindCtxVtbl$GetObjectParam$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$GetObjectParam$LAYOUT() { return IBindCtxVtbl$GetObjectParam$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$GetObjectParam$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetObjectParam")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$GetObjectParam$VH() { return IBindCtxVtbl$GetObjectParam$VH_; }

    static final MemoryLayout IBindCtxVtbl$EnumObjectParam$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$EnumObjectParam$LAYOUT() { return IBindCtxVtbl$EnumObjectParam$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$EnumObjectParam$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumObjectParam")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$EnumObjectParam$VH() { return IBindCtxVtbl$EnumObjectParam$VH_; }

    static final MemoryLayout IBindCtxVtbl$RevokeObjectParam$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtxVtbl$RevokeObjectParam$LAYOUT() { return IBindCtxVtbl$RevokeObjectParam$LAYOUT_; }

    static final VarHandle IBindCtxVtbl$RevokeObjectParam$VH_ = MemoryHandles.asAddressVarHandle(IBindCtxVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RevokeObjectParam")));
    static final java.lang.invoke.VarHandle IBindCtxVtbl$RevokeObjectParam$VH() { return IBindCtxVtbl$RevokeObjectParam$VH_; }

    static final MemoryLayout IBindCtx$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IBindCtx");
    static final jdk.incubator.foreign.MemoryLayout IBindCtx$struct$LAYOUT() { return IBindCtx$struct$LAYOUT_; }

    static final MemoryLayout IBindCtx$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IBindCtx$lpVtbl$LAYOUT() { return IBindCtx$lpVtbl$LAYOUT_; }

    static final VarHandle IBindCtx$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IBindCtx$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IBindCtx$lpVtbl$VH() { return IBindCtx$lpVtbl$VH_; }

    static final FunctionDescriptor IBindCtx_RemoteSetBindOptions_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IBindCtx_RemoteSetBindOptions_Proxy$FUNC() { return IBindCtx_RemoteSetBindOptions_Proxy$FUNC_; }

    static final MethodHandle IBindCtx_RemoteSetBindOptions_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IBindCtx_RemoteSetBindOptions_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtx_RemoteSetBindOptions_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IBindCtx_RemoteSetBindOptions_Proxy$MH() { return IBindCtx_RemoteSetBindOptions_Proxy$MH_; }

    static final FunctionDescriptor IBindCtx_RemoteSetBindOptions_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IBindCtx_RemoteSetBindOptions_Stub$FUNC() { return IBindCtx_RemoteSetBindOptions_Stub$FUNC_; }

    static final MethodHandle IBindCtx_RemoteSetBindOptions_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IBindCtx_RemoteSetBindOptions_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IBindCtx_RemoteSetBindOptions_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IBindCtx_RemoteSetBindOptions_Stub$MH() { return IBindCtx_RemoteSetBindOptions_Stub$MH_; }

    static final FunctionDescriptor IBindCtx_RemoteGetBindOptions_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IBindCtx_RemoteGetBindOptions_Proxy$FUNC() { return IBindCtx_RemoteGetBindOptions_Proxy$FUNC_; }

    static final MethodHandle IBindCtx_RemoteGetBindOptions_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IBindCtx_RemoteGetBindOptions_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IBindCtx_RemoteGetBindOptions_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IBindCtx_RemoteGetBindOptions_Proxy$MH() { return IBindCtx_RemoteGetBindOptions_Proxy$MH_; }

    static final FunctionDescriptor IBindCtx_RemoteGetBindOptions_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IBindCtx_RemoteGetBindOptions_Stub$FUNC() { return IBindCtx_RemoteGetBindOptions_Stub$FUNC_; }

    static final MethodHandle IBindCtx_RemoteGetBindOptions_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IBindCtx_RemoteGetBindOptions_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IBindCtx_RemoteGetBindOptions_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IBindCtx_RemoteGetBindOptions_Stub$MH() { return IBindCtx_RemoteGetBindOptions_Stub$MH_; }

    static final MemoryLayout IID_IEnumMoniker$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IEnumMoniker$LAYOUT() { return IID_IEnumMoniker$LAYOUT_; }

    static final MemorySegment IID_IEnumMoniker$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IEnumMoniker", IID_IEnumMoniker$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IEnumMoniker$SEGMENT() { return IID_IEnumMoniker$SEGMENT_; }

    static final MemoryLayout IEnumMonikerVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Next"),
        C_POINTER.withName("Skip"),
        C_POINTER.withName("Reset"),
        C_POINTER.withName("Clone")
    ).withName("IEnumMonikerVtbl");
    static final jdk.incubator.foreign.MemoryLayout IEnumMonikerVtbl$struct$LAYOUT() { return IEnumMonikerVtbl$struct$LAYOUT_; }

    static final MemoryLayout IEnumMonikerVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumMonikerVtbl$QueryInterface$LAYOUT() { return IEnumMonikerVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IEnumMonikerVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IEnumMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IEnumMonikerVtbl$QueryInterface$VH() { return IEnumMonikerVtbl$QueryInterface$VH_; }

    static final MemoryLayout IEnumMonikerVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumMonikerVtbl$AddRef$LAYOUT() { return IEnumMonikerVtbl$AddRef$LAYOUT_; }

    static final VarHandle IEnumMonikerVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IEnumMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IEnumMonikerVtbl$AddRef$VH() { return IEnumMonikerVtbl$AddRef$VH_; }

    static final MemoryLayout IEnumMonikerVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumMonikerVtbl$Release$LAYOUT() { return IEnumMonikerVtbl$Release$LAYOUT_; }

    static final VarHandle IEnumMonikerVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IEnumMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IEnumMonikerVtbl$Release$VH() { return IEnumMonikerVtbl$Release$VH_; }

    static final MemoryLayout IEnumMonikerVtbl$Next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumMonikerVtbl$Next$LAYOUT() { return IEnumMonikerVtbl$Next$LAYOUT_; }

    static final VarHandle IEnumMonikerVtbl$Next$VH_ = MemoryHandles.asAddressVarHandle(IEnumMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    static final java.lang.invoke.VarHandle IEnumMonikerVtbl$Next$VH() { return IEnumMonikerVtbl$Next$VH_; }

    static final MemoryLayout IEnumMonikerVtbl$Skip$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumMonikerVtbl$Skip$LAYOUT() { return IEnumMonikerVtbl$Skip$LAYOUT_; }

    static final VarHandle IEnumMonikerVtbl$Skip$VH_ = MemoryHandles.asAddressVarHandle(IEnumMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Skip")));
    static final java.lang.invoke.VarHandle IEnumMonikerVtbl$Skip$VH() { return IEnumMonikerVtbl$Skip$VH_; }

    static final MemoryLayout IEnumMonikerVtbl$Reset$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumMonikerVtbl$Reset$LAYOUT() { return IEnumMonikerVtbl$Reset$LAYOUT_; }

    static final VarHandle IEnumMonikerVtbl$Reset$VH_ = MemoryHandles.asAddressVarHandle(IEnumMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reset")));
    static final java.lang.invoke.VarHandle IEnumMonikerVtbl$Reset$VH() { return IEnumMonikerVtbl$Reset$VH_; }

    static final MemoryLayout IEnumMonikerVtbl$Clone$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumMonikerVtbl$Clone$LAYOUT() { return IEnumMonikerVtbl$Clone$LAYOUT_; }

    static final VarHandle IEnumMonikerVtbl$Clone$VH_ = MemoryHandles.asAddressVarHandle(IEnumMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Clone")));
    static final java.lang.invoke.VarHandle IEnumMonikerVtbl$Clone$VH() { return IEnumMonikerVtbl$Clone$VH_; }

    static final MemoryLayout IEnumMoniker$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IEnumMoniker");
    static final jdk.incubator.foreign.MemoryLayout IEnumMoniker$struct$LAYOUT() { return IEnumMoniker$struct$LAYOUT_; }

    static final MemoryLayout IEnumMoniker$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumMoniker$lpVtbl$LAYOUT() { return IEnumMoniker$lpVtbl$LAYOUT_; }

    static final VarHandle IEnumMoniker$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IEnumMoniker$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IEnumMoniker$lpVtbl$VH() { return IEnumMoniker$lpVtbl$VH_; }

    static final FunctionDescriptor IEnumMoniker_RemoteNext_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumMoniker_RemoteNext_Proxy$FUNC() { return IEnumMoniker_RemoteNext_Proxy$FUNC_; }

    static final MethodHandle IEnumMoniker_RemoteNext_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumMoniker_RemoteNext_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumMoniker_RemoteNext_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumMoniker_RemoteNext_Proxy$MH() { return IEnumMoniker_RemoteNext_Proxy$MH_; }

    static final FunctionDescriptor IEnumMoniker_RemoteNext_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumMoniker_RemoteNext_Stub$FUNC() { return IEnumMoniker_RemoteNext_Stub$FUNC_; }

    static final MethodHandle IEnumMoniker_RemoteNext_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumMoniker_RemoteNext_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IEnumMoniker_RemoteNext_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumMoniker_RemoteNext_Stub$MH() { return IEnumMoniker_RemoteNext_Stub$MH_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$VH() { return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec", __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$VH() { return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec", __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IRunnableObject$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IRunnableObject$LAYOUT() { return IID_IRunnableObject$LAYOUT_; }

    static final MemorySegment IID_IRunnableObject$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IRunnableObject", IID_IRunnableObject$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IRunnableObject$SEGMENT() { return IID_IRunnableObject$SEGMENT_; }

    static final MemoryLayout IRunnableObjectVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetRunningClass"),
        C_POINTER.withName("Run"),
        C_POINTER.withName("IsRunning"),
        C_POINTER.withName("LockRunning"),
        C_POINTER.withName("SetContainedObject")
    ).withName("IRunnableObjectVtbl");
    static final jdk.incubator.foreign.MemoryLayout IRunnableObjectVtbl$struct$LAYOUT() { return IRunnableObjectVtbl$struct$LAYOUT_; }

    static final MemoryLayout IRunnableObjectVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunnableObjectVtbl$QueryInterface$LAYOUT() { return IRunnableObjectVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IRunnableObjectVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IRunnableObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IRunnableObjectVtbl$QueryInterface$VH() { return IRunnableObjectVtbl$QueryInterface$VH_; }

    static final MemoryLayout IRunnableObjectVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunnableObjectVtbl$AddRef$LAYOUT() { return IRunnableObjectVtbl$AddRef$LAYOUT_; }

    static final VarHandle IRunnableObjectVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IRunnableObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IRunnableObjectVtbl$AddRef$VH() { return IRunnableObjectVtbl$AddRef$VH_; }

    static final MemoryLayout IRunnableObjectVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunnableObjectVtbl$Release$LAYOUT() { return IRunnableObjectVtbl$Release$LAYOUT_; }

    static final VarHandle IRunnableObjectVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IRunnableObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IRunnableObjectVtbl$Release$VH() { return IRunnableObjectVtbl$Release$VH_; }

    static final MemoryLayout IRunnableObjectVtbl$GetRunningClass$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunnableObjectVtbl$GetRunningClass$LAYOUT() { return IRunnableObjectVtbl$GetRunningClass$LAYOUT_; }

    static final VarHandle IRunnableObjectVtbl$GetRunningClass$VH_ = MemoryHandles.asAddressVarHandle(IRunnableObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetRunningClass")));
    static final java.lang.invoke.VarHandle IRunnableObjectVtbl$GetRunningClass$VH() { return IRunnableObjectVtbl$GetRunningClass$VH_; }

    static final MemoryLayout IRunnableObjectVtbl$Run$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunnableObjectVtbl$Run$LAYOUT() { return IRunnableObjectVtbl$Run$LAYOUT_; }

    static final VarHandle IRunnableObjectVtbl$Run$VH_ = MemoryHandles.asAddressVarHandle(IRunnableObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Run")));
    static final java.lang.invoke.VarHandle IRunnableObjectVtbl$Run$VH() { return IRunnableObjectVtbl$Run$VH_; }

    static final MemoryLayout IRunnableObjectVtbl$IsRunning$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunnableObjectVtbl$IsRunning$LAYOUT() { return IRunnableObjectVtbl$IsRunning$LAYOUT_; }

    static final VarHandle IRunnableObjectVtbl$IsRunning$VH_ = MemoryHandles.asAddressVarHandle(IRunnableObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsRunning")));
    static final java.lang.invoke.VarHandle IRunnableObjectVtbl$IsRunning$VH() { return IRunnableObjectVtbl$IsRunning$VH_; }

    static final MemoryLayout IRunnableObjectVtbl$LockRunning$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunnableObjectVtbl$LockRunning$LAYOUT() { return IRunnableObjectVtbl$LockRunning$LAYOUT_; }

    static final VarHandle IRunnableObjectVtbl$LockRunning$VH_ = MemoryHandles.asAddressVarHandle(IRunnableObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LockRunning")));
    static final java.lang.invoke.VarHandle IRunnableObjectVtbl$LockRunning$VH() { return IRunnableObjectVtbl$LockRunning$VH_; }

    static final MemoryLayout IRunnableObjectVtbl$SetContainedObject$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunnableObjectVtbl$SetContainedObject$LAYOUT() { return IRunnableObjectVtbl$SetContainedObject$LAYOUT_; }

    static final VarHandle IRunnableObjectVtbl$SetContainedObject$VH_ = MemoryHandles.asAddressVarHandle(IRunnableObjectVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetContainedObject")));
    static final java.lang.invoke.VarHandle IRunnableObjectVtbl$SetContainedObject$VH() { return IRunnableObjectVtbl$SetContainedObject$VH_; }

    static final MemoryLayout IRunnableObject$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IRunnableObject");
    static final jdk.incubator.foreign.MemoryLayout IRunnableObject$struct$LAYOUT() { return IRunnableObject$struct$LAYOUT_; }

    static final MemoryLayout IRunnableObject$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunnableObject$lpVtbl$LAYOUT() { return IRunnableObject$lpVtbl$LAYOUT_; }

    static final VarHandle IRunnableObject$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IRunnableObject$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IRunnableObject$lpVtbl$VH() { return IRunnableObject$lpVtbl$VH_; }

    static final FunctionDescriptor IRunnableObject_RemoteIsRunning_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IRunnableObject_RemoteIsRunning_Proxy$FUNC() { return IRunnableObject_RemoteIsRunning_Proxy$FUNC_; }

    static final MethodHandle IRunnableObject_RemoteIsRunning_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IRunnableObject_RemoteIsRunning_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IRunnableObject_RemoteIsRunning_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IRunnableObject_RemoteIsRunning_Proxy$MH() { return IRunnableObject_RemoteIsRunning_Proxy$MH_; }

    static final FunctionDescriptor IRunnableObject_RemoteIsRunning_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IRunnableObject_RemoteIsRunning_Stub$FUNC() { return IRunnableObject_RemoteIsRunning_Stub$FUNC_; }

    static final MethodHandle IRunnableObject_RemoteIsRunning_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IRunnableObject_RemoteIsRunning_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IRunnableObject_RemoteIsRunning_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IRunnableObject_RemoteIsRunning_Stub$MH() { return IRunnableObject_RemoteIsRunning_Stub$MH_; }

    static final MemoryLayout IID_IRunningObjectTable$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IRunningObjectTable$LAYOUT() { return IID_IRunningObjectTable$LAYOUT_; }

    static final MemorySegment IID_IRunningObjectTable$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IRunningObjectTable", IID_IRunningObjectTable$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IRunningObjectTable$SEGMENT() { return IID_IRunningObjectTable$SEGMENT_; }

    static final MemoryLayout IRunningObjectTableVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Register"),
        C_POINTER.withName("Revoke"),
        C_POINTER.withName("IsRunning"),
        C_POINTER.withName("GetObjectA"),
        C_POINTER.withName("NoteChangeTime"),
        C_POINTER.withName("GetTimeOfLastChange"),
        C_POINTER.withName("EnumRunning")
    ).withName("IRunningObjectTableVtbl");
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$struct$LAYOUT() { return IRunningObjectTableVtbl$struct$LAYOUT_; }

    static final MemoryLayout IRunningObjectTableVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$QueryInterface$LAYOUT() { return IRunningObjectTableVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$QueryInterface$VH() { return IRunningObjectTableVtbl$QueryInterface$VH_; }

    static final MemoryLayout IRunningObjectTableVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$AddRef$LAYOUT() { return IRunningObjectTableVtbl$AddRef$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$AddRef$VH() { return IRunningObjectTableVtbl$AddRef$VH_; }

    static final MemoryLayout IRunningObjectTableVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$Release$LAYOUT() { return IRunningObjectTableVtbl$Release$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$Release$VH() { return IRunningObjectTableVtbl$Release$VH_; }

    static final MemoryLayout IRunningObjectTableVtbl$Register$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$Register$LAYOUT() { return IRunningObjectTableVtbl$Register$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$Register$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Register")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$Register$VH() { return IRunningObjectTableVtbl$Register$VH_; }

    static final MemoryLayout IRunningObjectTableVtbl$Revoke$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$Revoke$LAYOUT() { return IRunningObjectTableVtbl$Revoke$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$Revoke$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Revoke")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$Revoke$VH() { return IRunningObjectTableVtbl$Revoke$VH_; }

    static final MemoryLayout IRunningObjectTableVtbl$IsRunning$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$IsRunning$LAYOUT() { return IRunningObjectTableVtbl$IsRunning$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$IsRunning$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsRunning")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$IsRunning$VH() { return IRunningObjectTableVtbl$IsRunning$VH_; }

    static final MemoryLayout IRunningObjectTableVtbl$GetObjectA$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$GetObjectA$LAYOUT() { return IRunningObjectTableVtbl$GetObjectA$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$GetObjectA$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetObjectA")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$GetObjectA$VH() { return IRunningObjectTableVtbl$GetObjectA$VH_; }

    static final MemoryLayout IRunningObjectTableVtbl$NoteChangeTime$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$NoteChangeTime$LAYOUT() { return IRunningObjectTableVtbl$NoteChangeTime$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$NoteChangeTime$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("NoteChangeTime")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$NoteChangeTime$VH() { return IRunningObjectTableVtbl$NoteChangeTime$VH_; }

    static final MemoryLayout IRunningObjectTableVtbl$GetTimeOfLastChange$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$GetTimeOfLastChange$LAYOUT() { return IRunningObjectTableVtbl$GetTimeOfLastChange$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$GetTimeOfLastChange$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTimeOfLastChange")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$GetTimeOfLastChange$VH() { return IRunningObjectTableVtbl$GetTimeOfLastChange$VH_; }

    static final MemoryLayout IRunningObjectTableVtbl$EnumRunning$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTableVtbl$EnumRunning$LAYOUT() { return IRunningObjectTableVtbl$EnumRunning$LAYOUT_; }

    static final VarHandle IRunningObjectTableVtbl$EnumRunning$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTableVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnumRunning")));
    static final java.lang.invoke.VarHandle IRunningObjectTableVtbl$EnumRunning$VH() { return IRunningObjectTableVtbl$EnumRunning$VH_; }

    static final MemoryLayout IRunningObjectTable$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IRunningObjectTable");
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTable$struct$LAYOUT() { return IRunningObjectTable$struct$LAYOUT_; }

    static final MemoryLayout IRunningObjectTable$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRunningObjectTable$lpVtbl$LAYOUT() { return IRunningObjectTable$lpVtbl$LAYOUT_; }

    static final VarHandle IRunningObjectTable$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IRunningObjectTable$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IRunningObjectTable$lpVtbl$VH() { return IRunningObjectTable$lpVtbl$VH_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$VH() { return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec", __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$VH() { return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec", __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IPersist$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IPersist$LAYOUT() { return IID_IPersist$LAYOUT_; }

    static final MemorySegment IID_IPersist$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IPersist", IID_IPersist$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IPersist$SEGMENT() { return IID_IPersist$SEGMENT_; }

    static final MemoryLayout IPersistVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetClassID")
    ).withName("IPersistVtbl");
    static final jdk.incubator.foreign.MemoryLayout IPersistVtbl$struct$LAYOUT() { return IPersistVtbl$struct$LAYOUT_; }

    static final MemoryLayout IPersistVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistVtbl$QueryInterface$LAYOUT() { return IPersistVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IPersistVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IPersistVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IPersistVtbl$QueryInterface$VH() { return IPersistVtbl$QueryInterface$VH_; }

    static final MemoryLayout IPersistVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistVtbl$AddRef$LAYOUT() { return IPersistVtbl$AddRef$LAYOUT_; }

    static final VarHandle IPersistVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IPersistVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IPersistVtbl$AddRef$VH() { return IPersistVtbl$AddRef$VH_; }

    static final MemoryLayout IPersistVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistVtbl$Release$LAYOUT() { return IPersistVtbl$Release$LAYOUT_; }

    static final VarHandle IPersistVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IPersistVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IPersistVtbl$Release$VH() { return IPersistVtbl$Release$VH_; }

    static final MemoryLayout IPersistVtbl$GetClassID$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistVtbl$GetClassID$LAYOUT() { return IPersistVtbl$GetClassID$LAYOUT_; }

    static final VarHandle IPersistVtbl$GetClassID$VH_ = MemoryHandles.asAddressVarHandle(IPersistVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetClassID")));
    static final java.lang.invoke.VarHandle IPersistVtbl$GetClassID$VH() { return IPersistVtbl$GetClassID$VH_; }

    static final MemoryLayout IPersist$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IPersist");
    static final jdk.incubator.foreign.MemoryLayout IPersist$struct$LAYOUT() { return IPersist$struct$LAYOUT_; }

    static final MemoryLayout IPersist$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersist$lpVtbl$LAYOUT() { return IPersist$lpVtbl$LAYOUT_; }

    static final VarHandle IPersist$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IPersist$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IPersist$lpVtbl$VH() { return IPersist$lpVtbl$VH_; }

    static final MemoryLayout IID_IPersistStream$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IPersistStream$LAYOUT() { return IID_IPersistStream$LAYOUT_; }

    static final MemorySegment IID_IPersistStream$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IPersistStream", IID_IPersistStream$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IPersistStream$SEGMENT() { return IID_IPersistStream$SEGMENT_; }

    static final MemoryLayout IPersistStreamVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetClassID"),
        C_POINTER.withName("IsDirty"),
        C_POINTER.withName("Load"),
        C_POINTER.withName("Save"),
        C_POINTER.withName("GetSizeMax")
    ).withName("IPersistStreamVtbl");
    static final jdk.incubator.foreign.MemoryLayout IPersistStreamVtbl$struct$LAYOUT() { return IPersistStreamVtbl$struct$LAYOUT_; }

    static final MemoryLayout IPersistStreamVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistStreamVtbl$QueryInterface$LAYOUT() { return IPersistStreamVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IPersistStreamVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IPersistStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IPersistStreamVtbl$QueryInterface$VH() { return IPersistStreamVtbl$QueryInterface$VH_; }

    static final MemoryLayout IPersistStreamVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistStreamVtbl$AddRef$LAYOUT() { return IPersistStreamVtbl$AddRef$LAYOUT_; }

    static final VarHandle IPersistStreamVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IPersistStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IPersistStreamVtbl$AddRef$VH() { return IPersistStreamVtbl$AddRef$VH_; }

    static final MemoryLayout IPersistStreamVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistStreamVtbl$Release$LAYOUT() { return IPersistStreamVtbl$Release$LAYOUT_; }

    static final VarHandle IPersistStreamVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IPersistStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IPersistStreamVtbl$Release$VH() { return IPersistStreamVtbl$Release$VH_; }

    static final MemoryLayout IPersistStreamVtbl$GetClassID$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistStreamVtbl$GetClassID$LAYOUT() { return IPersistStreamVtbl$GetClassID$LAYOUT_; }

    static final VarHandle IPersistStreamVtbl$GetClassID$VH_ = MemoryHandles.asAddressVarHandle(IPersistStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetClassID")));
    static final java.lang.invoke.VarHandle IPersistStreamVtbl$GetClassID$VH() { return IPersistStreamVtbl$GetClassID$VH_; }

    static final MemoryLayout IPersistStreamVtbl$IsDirty$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistStreamVtbl$IsDirty$LAYOUT() { return IPersistStreamVtbl$IsDirty$LAYOUT_; }

    static final VarHandle IPersistStreamVtbl$IsDirty$VH_ = MemoryHandles.asAddressVarHandle(IPersistStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsDirty")));
    static final java.lang.invoke.VarHandle IPersistStreamVtbl$IsDirty$VH() { return IPersistStreamVtbl$IsDirty$VH_; }

    static final MemoryLayout IPersistStreamVtbl$Load$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistStreamVtbl$Load$LAYOUT() { return IPersistStreamVtbl$Load$LAYOUT_; }

    static final VarHandle IPersistStreamVtbl$Load$VH_ = MemoryHandles.asAddressVarHandle(IPersistStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Load")));
    static final java.lang.invoke.VarHandle IPersistStreamVtbl$Load$VH() { return IPersistStreamVtbl$Load$VH_; }

    static final MemoryLayout IPersistStreamVtbl$Save$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistStreamVtbl$Save$LAYOUT() { return IPersistStreamVtbl$Save$LAYOUT_; }

    static final VarHandle IPersistStreamVtbl$Save$VH_ = MemoryHandles.asAddressVarHandle(IPersistStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Save")));
    static final java.lang.invoke.VarHandle IPersistStreamVtbl$Save$VH() { return IPersistStreamVtbl$Save$VH_; }

    static final MemoryLayout IPersistStreamVtbl$GetSizeMax$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistStreamVtbl$GetSizeMax$LAYOUT() { return IPersistStreamVtbl$GetSizeMax$LAYOUT_; }

    static final VarHandle IPersistStreamVtbl$GetSizeMax$VH_ = MemoryHandles.asAddressVarHandle(IPersistStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSizeMax")));
    static final java.lang.invoke.VarHandle IPersistStreamVtbl$GetSizeMax$VH() { return IPersistStreamVtbl$GetSizeMax$VH_; }

    static final MemoryLayout IPersistStream$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IPersistStream");
    static final jdk.incubator.foreign.MemoryLayout IPersistStream$struct$LAYOUT() { return IPersistStream$struct$LAYOUT_; }

    static final MemoryLayout IPersistStream$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPersistStream$lpVtbl$LAYOUT() { return IPersistStream$lpVtbl$LAYOUT_; }

    static final VarHandle IPersistStream$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IPersistStream$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IPersistStream$lpVtbl$VH() { return IPersistStream$lpVtbl$VH_; }

    static final int MKSYS_NONE() { return (int)0L; }

    static final int MKSYS_GENERICCOMPOSITE() { return (int)1L; }

    static final int MKSYS_FILEMONIKER() { return (int)2L; }

    static final int MKSYS_ANTIMONIKER() { return (int)3L; }

    static final int MKSYS_ITEMMONIKER() { return (int)4L; }

    static final int MKSYS_POINTERMONIKER() { return (int)5L; }

    static final int MKSYS_CLASSMONIKER() { return (int)7L; }

    static final int MKSYS_OBJREFMONIKER() { return (int)8L; }

    static final int MKSYS_SESSIONMONIKER() { return (int)9L; }

    static final int MKSYS_LUAMONIKER() { return (int)10L; }

    static final int MKRREDUCE_ONE() { return (int)196608L; }

    static final int MKRREDUCE_TOUSER() { return (int)131072L; }

    static final int MKRREDUCE_THROUGHUSER() { return (int)65536L; }

    static final int MKRREDUCE_ALL() { return (int)0L; }

    static final MemoryLayout IID_IMoniker$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IMoniker$LAYOUT() { return IID_IMoniker$LAYOUT_; }

    static final MemorySegment IID_IMoniker$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IMoniker", IID_IMoniker$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IMoniker$SEGMENT() { return IID_IMoniker$SEGMENT_; }

    static final MemoryLayout IMonikerVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetClassID"),
        C_POINTER.withName("IsDirty"),
        C_POINTER.withName("Load"),
        C_POINTER.withName("Save"),
        C_POINTER.withName("GetSizeMax"),
        C_POINTER.withName("BindToObject"),
        C_POINTER.withName("BindToStorage"),
        C_POINTER.withName("Reduce"),
        C_POINTER.withName("ComposeWith"),
        C_POINTER.withName("Enum"),
        C_POINTER.withName("IsEqual"),
        C_POINTER.withName("Hash"),
        C_POINTER.withName("IsRunning"),
        C_POINTER.withName("GetTimeOfLastChange"),
        C_POINTER.withName("Inverse"),
        C_POINTER.withName("CommonPrefixWith"),
        C_POINTER.withName("RelativePathTo"),
        C_POINTER.withName("GetDisplayName"),
        C_POINTER.withName("ParseDisplayName"),
        C_POINTER.withName("IsSystemMoniker")
    ).withName("IMonikerVtbl");
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$struct$LAYOUT() { return IMonikerVtbl$struct$LAYOUT_; }

    static final MemoryLayout IMonikerVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$QueryInterface$LAYOUT() { return IMonikerVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IMonikerVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$QueryInterface$VH() { return IMonikerVtbl$QueryInterface$VH_; }

    static final MemoryLayout IMonikerVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$AddRef$LAYOUT() { return IMonikerVtbl$AddRef$LAYOUT_; }

    static final VarHandle IMonikerVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$AddRef$VH() { return IMonikerVtbl$AddRef$VH_; }

    static final MemoryLayout IMonikerVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$Release$LAYOUT() { return IMonikerVtbl$Release$LAYOUT_; }

    static final VarHandle IMonikerVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$Release$VH() { return IMonikerVtbl$Release$VH_; }

    static final MemoryLayout IMonikerVtbl$GetClassID$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$GetClassID$LAYOUT() { return IMonikerVtbl$GetClassID$LAYOUT_; }

    static final VarHandle IMonikerVtbl$GetClassID$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetClassID")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$GetClassID$VH() { return IMonikerVtbl$GetClassID$VH_; }

    static final MemoryLayout IMonikerVtbl$IsDirty$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$IsDirty$LAYOUT() { return IMonikerVtbl$IsDirty$LAYOUT_; }

    static final VarHandle IMonikerVtbl$IsDirty$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsDirty")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$IsDirty$VH() { return IMonikerVtbl$IsDirty$VH_; }

    static final MemoryLayout IMonikerVtbl$Load$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$Load$LAYOUT() { return IMonikerVtbl$Load$LAYOUT_; }

    static final VarHandle IMonikerVtbl$Load$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Load")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$Load$VH() { return IMonikerVtbl$Load$VH_; }

    static final MemoryLayout IMonikerVtbl$Save$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$Save$LAYOUT() { return IMonikerVtbl$Save$LAYOUT_; }

    static final VarHandle IMonikerVtbl$Save$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Save")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$Save$VH() { return IMonikerVtbl$Save$VH_; }

    static final MemoryLayout IMonikerVtbl$GetSizeMax$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$GetSizeMax$LAYOUT() { return IMonikerVtbl$GetSizeMax$LAYOUT_; }

    static final VarHandle IMonikerVtbl$GetSizeMax$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetSizeMax")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$GetSizeMax$VH() { return IMonikerVtbl$GetSizeMax$VH_; }

    static final MemoryLayout IMonikerVtbl$BindToObject$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$BindToObject$LAYOUT() { return IMonikerVtbl$BindToObject$LAYOUT_; }

    static final VarHandle IMonikerVtbl$BindToObject$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BindToObject")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$BindToObject$VH() { return IMonikerVtbl$BindToObject$VH_; }

    static final MemoryLayout IMonikerVtbl$BindToStorage$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$BindToStorage$LAYOUT() { return IMonikerVtbl$BindToStorage$LAYOUT_; }

    static final VarHandle IMonikerVtbl$BindToStorage$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BindToStorage")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$BindToStorage$VH() { return IMonikerVtbl$BindToStorage$VH_; }

    static final MemoryLayout IMonikerVtbl$Reduce$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$Reduce$LAYOUT() { return IMonikerVtbl$Reduce$LAYOUT_; }

    static final VarHandle IMonikerVtbl$Reduce$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reduce")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$Reduce$VH() { return IMonikerVtbl$Reduce$VH_; }

    static final MemoryLayout IMonikerVtbl$ComposeWith$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$ComposeWith$LAYOUT() { return IMonikerVtbl$ComposeWith$LAYOUT_; }

    static final VarHandle IMonikerVtbl$ComposeWith$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ComposeWith")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$ComposeWith$VH() { return IMonikerVtbl$ComposeWith$VH_; }

    static final MemoryLayout IMonikerVtbl$Enum$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$Enum$LAYOUT() { return IMonikerVtbl$Enum$LAYOUT_; }

    static final VarHandle IMonikerVtbl$Enum$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Enum")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$Enum$VH() { return IMonikerVtbl$Enum$VH_; }

    static final MemoryLayout IMonikerVtbl$IsEqual$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$IsEqual$LAYOUT() { return IMonikerVtbl$IsEqual$LAYOUT_; }

    static final VarHandle IMonikerVtbl$IsEqual$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsEqual")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$IsEqual$VH() { return IMonikerVtbl$IsEqual$VH_; }

    static final MemoryLayout IMonikerVtbl$Hash$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$Hash$LAYOUT() { return IMonikerVtbl$Hash$LAYOUT_; }

    static final VarHandle IMonikerVtbl$Hash$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Hash")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$Hash$VH() { return IMonikerVtbl$Hash$VH_; }

    static final MemoryLayout IMonikerVtbl$IsRunning$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$IsRunning$LAYOUT() { return IMonikerVtbl$IsRunning$LAYOUT_; }

    static final VarHandle IMonikerVtbl$IsRunning$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsRunning")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$IsRunning$VH() { return IMonikerVtbl$IsRunning$VH_; }

    static final MemoryLayout IMonikerVtbl$GetTimeOfLastChange$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$GetTimeOfLastChange$LAYOUT() { return IMonikerVtbl$GetTimeOfLastChange$LAYOUT_; }

    static final VarHandle IMonikerVtbl$GetTimeOfLastChange$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetTimeOfLastChange")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$GetTimeOfLastChange$VH() { return IMonikerVtbl$GetTimeOfLastChange$VH_; }

    static final MemoryLayout IMonikerVtbl$Inverse$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$Inverse$LAYOUT() { return IMonikerVtbl$Inverse$LAYOUT_; }

    static final VarHandle IMonikerVtbl$Inverse$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Inverse")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$Inverse$VH() { return IMonikerVtbl$Inverse$VH_; }

    static final MemoryLayout IMonikerVtbl$CommonPrefixWith$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$CommonPrefixWith$LAYOUT() { return IMonikerVtbl$CommonPrefixWith$LAYOUT_; }

    static final VarHandle IMonikerVtbl$CommonPrefixWith$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CommonPrefixWith")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$CommonPrefixWith$VH() { return IMonikerVtbl$CommonPrefixWith$VH_; }

    static final MemoryLayout IMonikerVtbl$RelativePathTo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$RelativePathTo$LAYOUT() { return IMonikerVtbl$RelativePathTo$LAYOUT_; }

    static final VarHandle IMonikerVtbl$RelativePathTo$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("RelativePathTo")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$RelativePathTo$VH() { return IMonikerVtbl$RelativePathTo$VH_; }

    static final MemoryLayout IMonikerVtbl$GetDisplayName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$GetDisplayName$LAYOUT() { return IMonikerVtbl$GetDisplayName$LAYOUT_; }

    static final VarHandle IMonikerVtbl$GetDisplayName$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDisplayName")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$GetDisplayName$VH() { return IMonikerVtbl$GetDisplayName$VH_; }

    static final MemoryLayout IMonikerVtbl$ParseDisplayName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$ParseDisplayName$LAYOUT() { return IMonikerVtbl$ParseDisplayName$LAYOUT_; }

    static final VarHandle IMonikerVtbl$ParseDisplayName$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ParseDisplayName")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$ParseDisplayName$VH() { return IMonikerVtbl$ParseDisplayName$VH_; }

    static final MemoryLayout IMonikerVtbl$IsSystemMoniker$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMonikerVtbl$IsSystemMoniker$LAYOUT() { return IMonikerVtbl$IsSystemMoniker$LAYOUT_; }

    static final VarHandle IMonikerVtbl$IsSystemMoniker$VH_ = MemoryHandles.asAddressVarHandle(IMonikerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("IsSystemMoniker")));
    static final java.lang.invoke.VarHandle IMonikerVtbl$IsSystemMoniker$VH() { return IMonikerVtbl$IsSystemMoniker$VH_; }

    static final MemoryLayout IMoniker$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IMoniker");
    static final jdk.incubator.foreign.MemoryLayout IMoniker$struct$LAYOUT() { return IMoniker$struct$LAYOUT_; }

    static final MemoryLayout IMoniker$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMoniker$lpVtbl$LAYOUT() { return IMoniker$lpVtbl$LAYOUT_; }

    static final VarHandle IMoniker$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IMoniker$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IMoniker$lpVtbl$VH() { return IMoniker$lpVtbl$VH_; }

    static final FunctionDescriptor IMoniker_RemoteBindToObject_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IMoniker_RemoteBindToObject_Proxy$FUNC() { return IMoniker_RemoteBindToObject_Proxy$FUNC_; }

    static final MethodHandle IMoniker_RemoteBindToObject_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IMoniker_RemoteBindToObject_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IMoniker_RemoteBindToObject_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IMoniker_RemoteBindToObject_Proxy$MH() { return IMoniker_RemoteBindToObject_Proxy$MH_; }

    static final FunctionDescriptor IMoniker_RemoteBindToObject_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IMoniker_RemoteBindToObject_Stub$FUNC() { return IMoniker_RemoteBindToObject_Stub$FUNC_; }

    static final MethodHandle IMoniker_RemoteBindToObject_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IMoniker_RemoteBindToObject_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IMoniker_RemoteBindToObject_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IMoniker_RemoteBindToObject_Stub$MH() { return IMoniker_RemoteBindToObject_Stub$MH_; }

    static final FunctionDescriptor IMoniker_RemoteBindToStorage_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IMoniker_RemoteBindToStorage_Proxy$FUNC() { return IMoniker_RemoteBindToStorage_Proxy$FUNC_; }

    static final MethodHandle IMoniker_RemoteBindToStorage_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IMoniker_RemoteBindToStorage_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IMoniker_RemoteBindToStorage_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IMoniker_RemoteBindToStorage_Proxy$MH() { return IMoniker_RemoteBindToStorage_Proxy$MH_; }

    static final FunctionDescriptor IMoniker_RemoteBindToStorage_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IMoniker_RemoteBindToStorage_Stub$FUNC() { return IMoniker_RemoteBindToStorage_Stub$FUNC_; }

    static final MethodHandle IMoniker_RemoteBindToStorage_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IMoniker_RemoteBindToStorage_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IMoniker_RemoteBindToStorage_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IMoniker_RemoteBindToStorage_Stub$MH() { return IMoniker_RemoteBindToStorage_Stub$MH_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$VH() { return __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0061_v0_0_c_ifspec", __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$VH() { return __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0061_v0_0_s_ifspec", __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IROTData$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IROTData$LAYOUT() { return IID_IROTData$LAYOUT_; }

    static final MemorySegment IID_IROTData$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IROTData", IID_IROTData$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IROTData$SEGMENT() { return IID_IROTData$SEGMENT_; }

    static final MemoryLayout IROTDataVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetComparisonData")
    ).withName("IROTDataVtbl");
    static final jdk.incubator.foreign.MemoryLayout IROTDataVtbl$struct$LAYOUT() { return IROTDataVtbl$struct$LAYOUT_; }

    static final MemoryLayout IROTDataVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IROTDataVtbl$QueryInterface$LAYOUT() { return IROTDataVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IROTDataVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IROTDataVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IROTDataVtbl$QueryInterface$VH() { return IROTDataVtbl$QueryInterface$VH_; }

    static final MemoryLayout IROTDataVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IROTDataVtbl$AddRef$LAYOUT() { return IROTDataVtbl$AddRef$LAYOUT_; }

    static final VarHandle IROTDataVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IROTDataVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IROTDataVtbl$AddRef$VH() { return IROTDataVtbl$AddRef$VH_; }

    static final MemoryLayout IROTDataVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IROTDataVtbl$Release$LAYOUT() { return IROTDataVtbl$Release$LAYOUT_; }

    static final VarHandle IROTDataVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IROTDataVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IROTDataVtbl$Release$VH() { return IROTDataVtbl$Release$VH_; }

    static final MemoryLayout IROTDataVtbl$GetComparisonData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IROTDataVtbl$GetComparisonData$LAYOUT() { return IROTDataVtbl$GetComparisonData$LAYOUT_; }

    static final VarHandle IROTDataVtbl$GetComparisonData$VH_ = MemoryHandles.asAddressVarHandle(IROTDataVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetComparisonData")));
    static final java.lang.invoke.VarHandle IROTDataVtbl$GetComparisonData$VH() { return IROTDataVtbl$GetComparisonData$VH_; }

    static final MemoryLayout IROTData$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IROTData");
    static final jdk.incubator.foreign.MemoryLayout IROTData$struct$LAYOUT() { return IROTData$struct$LAYOUT_; }

    static final MemoryLayout IROTData$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IROTData$lpVtbl$LAYOUT() { return IROTData$lpVtbl$LAYOUT_; }

    static final VarHandle IROTData$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IROTData$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IROTData$lpVtbl$VH() { return IROTData$lpVtbl$VH_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$VH() { return __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0062_v0_0_c_ifspec", __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$VH() { return __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidl_0000_0062_v0_0_s_ifspec", __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IEnumSTATSTG$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IEnumSTATSTG$LAYOUT() { return IID_IEnumSTATSTG$LAYOUT_; }

    static final MemorySegment IID_IEnumSTATSTG$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IEnumSTATSTG", IID_IEnumSTATSTG$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IEnumSTATSTG$SEGMENT() { return IID_IEnumSTATSTG$SEGMENT_; }

    static final MemoryLayout IEnumSTATSTGVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Next"),
        C_POINTER.withName("Skip"),
        C_POINTER.withName("Reset"),
        C_POINTER.withName("Clone")
    ).withName("IEnumSTATSTGVtbl");
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTGVtbl$struct$LAYOUT() { return IEnumSTATSTGVtbl$struct$LAYOUT_; }

    static final MemoryLayout IEnumSTATSTGVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTGVtbl$QueryInterface$LAYOUT() { return IEnumSTATSTGVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IEnumSTATSTGVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IEnumSTATSTGVtbl$QueryInterface$VH() { return IEnumSTATSTGVtbl$QueryInterface$VH_; }

    static final MemoryLayout IEnumSTATSTGVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTGVtbl$AddRef$LAYOUT() { return IEnumSTATSTGVtbl$AddRef$LAYOUT_; }

    static final VarHandle IEnumSTATSTGVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IEnumSTATSTGVtbl$AddRef$VH() { return IEnumSTATSTGVtbl$AddRef$VH_; }

    static final MemoryLayout IEnumSTATSTGVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTGVtbl$Release$LAYOUT() { return IEnumSTATSTGVtbl$Release$LAYOUT_; }

    static final VarHandle IEnumSTATSTGVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IEnumSTATSTGVtbl$Release$VH() { return IEnumSTATSTGVtbl$Release$VH_; }

    static final MemoryLayout IEnumSTATSTGVtbl$Next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTGVtbl$Next$LAYOUT() { return IEnumSTATSTGVtbl$Next$LAYOUT_; }

    static final VarHandle IEnumSTATSTGVtbl$Next$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    static final java.lang.invoke.VarHandle IEnumSTATSTGVtbl$Next$VH() { return IEnumSTATSTGVtbl$Next$VH_; }

    static final MemoryLayout IEnumSTATSTGVtbl$Skip$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTGVtbl$Skip$LAYOUT() { return IEnumSTATSTGVtbl$Skip$LAYOUT_; }

    static final VarHandle IEnumSTATSTGVtbl$Skip$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Skip")));
    static final java.lang.invoke.VarHandle IEnumSTATSTGVtbl$Skip$VH() { return IEnumSTATSTGVtbl$Skip$VH_; }

    static final MemoryLayout IEnumSTATSTGVtbl$Reset$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTGVtbl$Reset$LAYOUT() { return IEnumSTATSTGVtbl$Reset$LAYOUT_; }

    static final VarHandle IEnumSTATSTGVtbl$Reset$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Reset")));
    static final java.lang.invoke.VarHandle IEnumSTATSTGVtbl$Reset$VH() { return IEnumSTATSTGVtbl$Reset$VH_; }

    static final MemoryLayout IEnumSTATSTGVtbl$Clone$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTGVtbl$Clone$LAYOUT() { return IEnumSTATSTGVtbl$Clone$LAYOUT_; }

    static final VarHandle IEnumSTATSTGVtbl$Clone$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATSTGVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Clone")));
    static final java.lang.invoke.VarHandle IEnumSTATSTGVtbl$Clone$VH() { return IEnumSTATSTGVtbl$Clone$VH_; }

    static final MemoryLayout IEnumSTATSTG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IEnumSTATSTG");
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTG$struct$LAYOUT() { return IEnumSTATSTG$struct$LAYOUT_; }

    static final MemoryLayout IEnumSTATSTG$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IEnumSTATSTG$lpVtbl$LAYOUT() { return IEnumSTATSTG$lpVtbl$LAYOUT_; }

    static final VarHandle IEnumSTATSTG$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IEnumSTATSTG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IEnumSTATSTG$lpVtbl$VH() { return IEnumSTATSTG$lpVtbl$VH_; }

    static final FunctionDescriptor IEnumSTATSTG_RemoteNext_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATSTG_RemoteNext_Proxy$FUNC() { return IEnumSTATSTG_RemoteNext_Proxy$FUNC_; }

    static final MethodHandle IEnumSTATSTG_RemoteNext_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATSTG_RemoteNext_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumSTATSTG_RemoteNext_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATSTG_RemoteNext_Proxy$MH() { return IEnumSTATSTG_RemoteNext_Proxy$MH_; }

    static final FunctionDescriptor IEnumSTATSTG_RemoteNext_Stub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumSTATSTG_RemoteNext_Stub$FUNC() { return IEnumSTATSTG_RemoteNext_Stub$FUNC_; }

    static final MethodHandle IEnumSTATSTG_RemoteNext_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumSTATSTG_RemoteNext_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        IEnumSTATSTG_RemoteNext_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumSTATSTG_RemoteNext_Stub$MH() { return IEnumSTATSTG_RemoteNext_Stub$MH_; }

    static final MemoryLayout tagRemSNB$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ulCntStr"),
        C_LONG.withName("ulCntChar"),
        MemoryLayout.ofSequence(1, C_SHORT).withName("rgString"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("tagRemSNB");
    static final jdk.incubator.foreign.MemoryLayout tagRemSNB$struct$LAYOUT() { return tagRemSNB$struct$LAYOUT_; }

    static final MemoryLayout tagRemSNB$ulCntStr$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRemSNB$ulCntStr$LAYOUT() { return tagRemSNB$ulCntStr$LAYOUT_; }

    static final VarHandle tagRemSNB$ulCntStr$VH_ = tagRemSNB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulCntStr"));
    static final java.lang.invoke.VarHandle tagRemSNB$ulCntStr$VH() { return tagRemSNB$ulCntStr$VH_; }

    static final MemoryLayout tagRemSNB$ulCntChar$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRemSNB$ulCntChar$LAYOUT() { return tagRemSNB$ulCntChar$LAYOUT_; }

    static final VarHandle tagRemSNB$ulCntChar$VH_ = tagRemSNB$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulCntChar"));
    static final java.lang.invoke.VarHandle tagRemSNB$ulCntChar$VH() { return tagRemSNB$ulCntChar$VH_; }

    static final MemoryLayout IID_IStorage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IStorage$LAYOUT() { return IID_IStorage$LAYOUT_; }

    static final MemorySegment IID_IStorage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IStorage", IID_IStorage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IStorage$SEGMENT() { return IID_IStorage$SEGMENT_; }

    static final MemoryLayout IStorageVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("CreateStream"),
        C_POINTER.withName("OpenStream"),
        C_POINTER.withName("CreateStorage"),
        C_POINTER.withName("OpenStorage"),
        C_POINTER.withName("CopyTo"),
        C_POINTER.withName("MoveElementTo"),
        C_POINTER.withName("Commit"),
        C_POINTER.withName("Revert"),
        C_POINTER.withName("EnumElements"),
        C_POINTER.withName("DestroyElement"),
        C_POINTER.withName("RenameElement"),
        C_POINTER.withName("SetElementTimes"),
        C_POINTER.withName("SetClass"),
        C_POINTER.withName("SetStateBits"),
        C_POINTER.withName("Stat")
    ).withName("IStorageVtbl");
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$struct$LAYOUT() { return IStorageVtbl$struct$LAYOUT_; }

    static final MemoryLayout IStorageVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$QueryInterface$LAYOUT() { return IStorageVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IStorageVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IStorageVtbl$QueryInterface$VH() { return IStorageVtbl$QueryInterface$VH_; }

    static final MemoryLayout IStorageVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$AddRef$LAYOUT() { return IStorageVtbl$AddRef$LAYOUT_; }

    static final VarHandle IStorageVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IStorageVtbl$AddRef$VH() { return IStorageVtbl$AddRef$VH_; }

    static final MemoryLayout IStorageVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$Release$LAYOUT() { return IStorageVtbl$Release$LAYOUT_; }

    static final VarHandle IStorageVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IStorageVtbl$Release$VH() { return IStorageVtbl$Release$VH_; }

    static final MemoryLayout IStorageVtbl$CreateStream$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$CreateStream$LAYOUT() { return IStorageVtbl$CreateStream$LAYOUT_; }

    static final VarHandle IStorageVtbl$CreateStream$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateStream")));
    static final java.lang.invoke.VarHandle IStorageVtbl$CreateStream$VH() { return IStorageVtbl$CreateStream$VH_; }

    static final MemoryLayout IStorageVtbl$OpenStream$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$OpenStream$LAYOUT() { return IStorageVtbl$OpenStream$LAYOUT_; }

    static final VarHandle IStorageVtbl$OpenStream$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OpenStream")));
    static final java.lang.invoke.VarHandle IStorageVtbl$OpenStream$VH() { return IStorageVtbl$OpenStream$VH_; }

    static final MemoryLayout IStorageVtbl$CreateStorage$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$CreateStorage$LAYOUT() { return IStorageVtbl$CreateStorage$LAYOUT_; }

    static final VarHandle IStorageVtbl$CreateStorage$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateStorage")));
    static final java.lang.invoke.VarHandle IStorageVtbl$CreateStorage$VH() { return IStorageVtbl$CreateStorage$VH_; }

    static final MemoryLayout IStorageVtbl$OpenStorage$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$OpenStorage$LAYOUT() { return IStorageVtbl$OpenStorage$LAYOUT_; }

    static final VarHandle IStorageVtbl$OpenStorage$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OpenStorage")));
    static final java.lang.invoke.VarHandle IStorageVtbl$OpenStorage$VH() { return IStorageVtbl$OpenStorage$VH_; }

    static final MemoryLayout IStorageVtbl$CopyTo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$CopyTo$LAYOUT() { return IStorageVtbl$CopyTo$LAYOUT_; }

    static final VarHandle IStorageVtbl$CopyTo$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CopyTo")));
    static final java.lang.invoke.VarHandle IStorageVtbl$CopyTo$VH() { return IStorageVtbl$CopyTo$VH_; }

    static final MemoryLayout IStorageVtbl$MoveElementTo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$MoveElementTo$LAYOUT() { return IStorageVtbl$MoveElementTo$LAYOUT_; }

    static final VarHandle IStorageVtbl$MoveElementTo$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MoveElementTo")));
    static final java.lang.invoke.VarHandle IStorageVtbl$MoveElementTo$VH() { return IStorageVtbl$MoveElementTo$VH_; }

    static final MemoryLayout IStorageVtbl$Commit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$Commit$LAYOUT() { return IStorageVtbl$Commit$LAYOUT_; }

    static final VarHandle IStorageVtbl$Commit$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Commit")));
    static final java.lang.invoke.VarHandle IStorageVtbl$Commit$VH() { return IStorageVtbl$Commit$VH_; }

    static final MemoryLayout IStorageVtbl$Revert$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IStorageVtbl$Revert$LAYOUT() { return IStorageVtbl$Revert$LAYOUT_; }

    static final VarHandle IStorageVtbl$Revert$VH_ = MemoryHandles.asAddressVarHandle(IStorageVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Revert")));
    static final java.lang.invoke.VarHandle IStorageVtbl$Revert$VH() { return IStorageVtbl$Revert$VH_; }

}

