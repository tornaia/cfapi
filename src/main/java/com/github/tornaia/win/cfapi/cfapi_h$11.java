// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$11 extends cfapi_h$10 {

    /* package-private */ cfapi_h$11() {}
    public static @C("int") int IME_ESC_AUTOMATA() {
        return cfapi_h$constants$12.IME_ESC_AUTOMATA();
    }
    public static @C("int") int IME_ESC_PRIVATE_HOTKEY() {
        return cfapi_h$constants$12.IME_ESC_PRIVATE_HOTKEY();
    }
    public static @C("int") int IME_ESC_GETHELPFILENAME() {
        return cfapi_h$constants$12.IME_ESC_GETHELPFILENAME();
    }
    public static @C("int") int IME_REGWORD_STYLE_EUDC() {
        return cfapi_h$constants$12.IME_REGWORD_STYLE_EUDC();
    }
    public static @C("int") int IACE_CHILDREN() {
        return cfapi_h$constants$12.IACE_CHILDREN();
    }
    public static @C("int") int IACE_DEFAULT() {
        return cfapi_h$constants$12.IACE_DEFAULT();
    }
    public static @C("int") int IACE_IGNORENOCONTEXT() {
        return cfapi_h$constants$12.IACE_IGNORENOCONTEXT();
    }
    public static @C("int") int IGIMIF_RIGHTMENU() {
        return cfapi_h$constants$12.IGIMIF_RIGHTMENU();
    }
    public static @C("int") int IGIMII_CMODE() {
        return cfapi_h$constants$12.IGIMII_CMODE();
    }
    public static @C("int") int IGIMII_SMODE() {
        return cfapi_h$constants$12.IGIMII_SMODE();
    }
    public static @C("int") int IGIMII_CONFIGURE() {
        return cfapi_h$constants$12.IGIMII_CONFIGURE();
    }
    public static @C("int") int IGIMII_TOOLS() {
        return cfapi_h$constants$12.IGIMII_TOOLS();
    }
    public static @C("int") int IGIMII_HELP() {
        return cfapi_h$constants$12.IGIMII_HELP();
    }
    public static @C("int") int IGIMII_OTHER() {
        return cfapi_h$constants$12.IGIMII_OTHER();
    }
    public static @C("int") int IGIMII_INPUTTOOLS() {
        return cfapi_h$constants$12.IGIMII_INPUTTOOLS();
    }
    public static @C("int") int IMFT_RADIOCHECK() {
        return cfapi_h$constants$12.IMFT_RADIOCHECK();
    }
    public static @C("int") int IMFT_SEPARATOR() {
        return cfapi_h$constants$12.IMFT_SEPARATOR();
    }
    public static @C("int") int IMFT_SUBMENU() {
        return cfapi_h$constants$12.IMFT_SUBMENU();
    }
    public static @C("int") int SOFTKEYBOARD_TYPE_T1() {
        return cfapi_h$constants$12.SOFTKEYBOARD_TYPE_T1();
    }
    public static @C("int") int SOFTKEYBOARD_TYPE_C1() {
        return cfapi_h$constants$12.SOFTKEYBOARD_TYPE_C1();
    }
    public static @C("int") int CF_PLACEHOLDER_MAX_FILE_IDENTITY_LENGTH() {
        return cfapi_h$constants$12.CF_PLACEHOLDER_MAX_FILE_IDENTITY_LENGTH();
    }
    public static @C("int") int CF_MAX_PRIORITY_HINT() {
        return cfapi_h$constants$12.CF_MAX_PRIORITY_HINT();
    }
    public static @C("int") int CF_MAX_PROVIDER_NAME_LENGTH() {
        return cfapi_h$constants$12.CF_MAX_PROVIDER_NAME_LENGTH();
    }
    public static @C("int") int CF_MAX_PROVIDER_VERSION_LENGTH() {
        return cfapi_h$constants$12.CF_MAX_PROVIDER_VERSION_LENGTH();
    }
    public static  MethodHandle __va_start$MH() {
        return cfapi_h$constants$12.__va_start$MH();
    }
    public static void __va_start (@C("va_list*") Addressable x0, Object... x1) {
        try {
            cfapi_h$constants$12.__va_start$MH().invokeExact(x0.address(), x1);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("long long") ValueLayout ptrdiff_t = C_LONGLONG;
    public static @C("long long") ValueLayout intptr_t = C_LONGLONG;
    public static  MethodHandle __security_init_cookie$MH() {
        return cfapi_h$constants$12.__security_init_cookie$MH();
    }
    public static void __security_init_cookie () {
        try {
            cfapi_h$constants$12.__security_init_cookie$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __security_check_cookie$MH() {
        return cfapi_h$constants$12.__security_check_cookie$MH();
    }
    public static void __security_check_cookie (@C("uintptr_t") long _StackCookie) {
        try {
            cfapi_h$constants$12.__security_check_cookie$MH().invokeExact(_StackCookie);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __report_gsfailure$MH() {
        return cfapi_h$constants$12.__report_gsfailure$MH();
    }
    public static void __report_gsfailure (@C("uintptr_t") long _StackCookie) {
        try {
            cfapi_h$constants$12.__report_gsfailure$MH().invokeExact(_StackCookie);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MemoryLayout __security_cookie$LAYOUT() {
        return cfapi_h$constants$12.__security_cookie$LAYOUT();
    }
    public static  VarHandle __security_cookie$VH() {
        return cfapi_h$constants$12.__security_cookie$VH();
    }
    public static  MemorySegment __security_cookie$SEGMENT() {
        return cfapi_h$constants$12.__security_cookie$SEGMENT();
    }
    public static @C("uintptr_t") long __security_cookie$get() {
        return (long)cfapi_h$constants$12.__security_cookie$VH().get(cfapi_h$constants$12.__security_cookie$SEGMENT());
    }
    public static void __security_cookie$set(@C("uintptr_t") long x) {
        cfapi_h$constants$12.__security_cookie$VH().set(cfapi_h$constants$12.__security_cookie$SEGMENT(), x);
    }
    public static @C("int") int ExceptionContinueExecution() {
        return cfapi_h$constants$12.ExceptionContinueExecution();
    }
    public static @C("int") int ExceptionContinueSearch() {
        return cfapi_h$constants$12.ExceptionContinueSearch();
    }
    public static @C("int") int ExceptionNestedException() {
        return cfapi_h$constants$12.ExceptionNestedException();
    }
    public static @C("int") int ExceptionCollidedUnwind() {
        return cfapi_h$constants$12.ExceptionCollidedUnwind();
    }
    public static  MethodHandle __C_specific_handler$MH() {
        return cfapi_h$constants$12.__C_specific_handler$MH();
    }
    public static @C("EXCEPTION_DISPOSITION") int __C_specific_handler (@C("struct _EXCEPTION_RECORD*") Addressable ExceptionRecord, @C("void*") Addressable EstablisherFrame, @C("struct _CONTEXT*") Addressable ContextRecord, @C("struct _DISPATCHER_CONTEXT*") Addressable DispatcherContext) {
        try {
            return (int)cfapi_h$constants$12.__C_specific_handler$MH().invokeExact(ExceptionRecord.address(), EstablisherFrame.address(), ContextRecord.address(), DispatcherContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _exception_code$MH() {
        return cfapi_h$constants$12._exception_code$MH();
    }
    public static @C("unsigned long") int _exception_code () {
        try {
            return (int)cfapi_h$constants$12._exception_code$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _exception_info$MH() {
        return cfapi_h$constants$12._exception_info$MH();
    }
    public static @C("void*") MemoryAddress _exception_info () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._exception_info$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _abnormal_termination$MH() {
        return cfapi_h$constants$12._abnormal_termination$MH();
    }
    public static @C("int") int _abnormal_termination () {
        try {
            return (int)cfapi_h$constants$12._abnormal_termination$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") ValueLayout BOOL = C_INT;
    public static @C("float") ValueLayout FLOAT = C_FLOAT;
    public static @C("int") ValueLayout INT = C_INT;
    public static  MethodHandle _invalid_parameter_noinfo$MH() {
        return cfapi_h$constants$12._invalid_parameter_noinfo$MH();
    }
    public static void _invalid_parameter_noinfo () {
        try {
            cfapi_h$constants$12._invalid_parameter_noinfo$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _invalid_parameter_noinfo_noreturn$MH() {
        return cfapi_h$constants$12._invalid_parameter_noinfo_noreturn$MH();
    }
    public static void _invalid_parameter_noinfo_noreturn () {
        try {
            cfapi_h$constants$12._invalid_parameter_noinfo_noreturn$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _invoke_watson$MH() {
        return cfapi_h$constants$12._invoke_watson$MH();
    }
    public static void _invoke_watson (@C("const wchar_t*") Addressable _Expression, @C("const wchar_t*") Addressable _FunctionName, @C("const wchar_t*") Addressable _FileName, @C("unsigned int") int _LineNo, @C("uintptr_t") long _Reserved) {
        try {
            cfapi_h$constants$12._invoke_watson$MH().invokeExact(_Expression.address(), _FunctionName.address(), _FileName.address(), _LineNo, _Reserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") ValueLayout errno_t = C_INT;
    public static @C("long") ValueLayout __time32_t = C_LONG;
    public static @C("long long") ValueLayout __time64_t = C_LONGLONG;
    public static @C("long long") ValueLayout time_t = C_LONGLONG;
    public static  MethodHandle __pctype_func$MH() {
        return cfapi_h$constants$12.__pctype_func$MH();
    }
    public static @C("unsigned short*") MemoryAddress __pctype_func () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.__pctype_func$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __pwctype_func$MH() {
        return cfapi_h$constants$12.__pwctype_func$MH();
    }
    public static @C("const wctype_t*") MemoryAddress __pwctype_func () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.__pwctype_func$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswalnum$MH() {
        return cfapi_h$constants$12.iswalnum$MH();
    }
    public static @C("int") int iswalnum (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswalnum$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswalpha$MH() {
        return cfapi_h$constants$12.iswalpha$MH();
    }
    public static @C("int") int iswalpha (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswalpha$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswascii$MH() {
        return cfapi_h$constants$12.iswascii$MH();
    }
    public static @C("int") int iswascii (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswascii$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswblank$MH() {
        return cfapi_h$constants$12.iswblank$MH();
    }
    public static @C("int") int iswblank (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswblank$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswcntrl$MH() {
        return cfapi_h$constants$12.iswcntrl$MH();
    }
    public static @C("int") int iswcntrl (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswcntrl$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswdigit$MH() {
        return cfapi_h$constants$12.iswdigit$MH();
    }
    public static @C("int") int iswdigit (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswdigit$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswgraph$MH() {
        return cfapi_h$constants$12.iswgraph$MH();
    }
    public static @C("int") int iswgraph (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswgraph$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswlower$MH() {
        return cfapi_h$constants$12.iswlower$MH();
    }
    public static @C("int") int iswlower (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswlower$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswprint$MH() {
        return cfapi_h$constants$12.iswprint$MH();
    }
    public static @C("int") int iswprint (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswprint$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswpunct$MH() {
        return cfapi_h$constants$12.iswpunct$MH();
    }
    public static @C("int") int iswpunct (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswpunct$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswspace$MH() {
        return cfapi_h$constants$12.iswspace$MH();
    }
    public static @C("int") int iswspace (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswspace$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswupper$MH() {
        return cfapi_h$constants$12.iswupper$MH();
    }
    public static @C("int") int iswupper (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswupper$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswxdigit$MH() {
        return cfapi_h$constants$12.iswxdigit$MH();
    }
    public static @C("int") int iswxdigit (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.iswxdigit$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __iswcsymf$MH() {
        return cfapi_h$constants$12.__iswcsymf$MH();
    }
    public static @C("int") int __iswcsymf (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.__iswcsymf$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __iswcsym$MH() {
        return cfapi_h$constants$12.__iswcsym$MH();
    }
    public static @C("int") int __iswcsym (@C("wint_t") short _C) {
        try {
            return (int)cfapi_h$constants$12.__iswcsym$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswalnum_l$MH() {
        return cfapi_h$constants$12._iswalnum_l$MH();
    }
    public static @C("int") int _iswalnum_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswalnum_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswalpha_l$MH() {
        return cfapi_h$constants$12._iswalpha_l$MH();
    }
    public static @C("int") int _iswalpha_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswalpha_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswblank_l$MH() {
        return cfapi_h$constants$12._iswblank_l$MH();
    }
    public static @C("int") int _iswblank_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswblank_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswcntrl_l$MH() {
        return cfapi_h$constants$12._iswcntrl_l$MH();
    }
    public static @C("int") int _iswcntrl_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswcntrl_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswdigit_l$MH() {
        return cfapi_h$constants$12._iswdigit_l$MH();
    }
    public static @C("int") int _iswdigit_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswdigit_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswgraph_l$MH() {
        return cfapi_h$constants$12._iswgraph_l$MH();
    }
    public static @C("int") int _iswgraph_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswgraph_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswlower_l$MH() {
        return cfapi_h$constants$12._iswlower_l$MH();
    }
    public static @C("int") int _iswlower_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswlower_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswprint_l$MH() {
        return cfapi_h$constants$12._iswprint_l$MH();
    }
    public static @C("int") int _iswprint_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswprint_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswpunct_l$MH() {
        return cfapi_h$constants$12._iswpunct_l$MH();
    }
    public static @C("int") int _iswpunct_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswpunct_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswspace_l$MH() {
        return cfapi_h$constants$12._iswspace_l$MH();
    }
    public static @C("int") int _iswspace_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswspace_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswupper_l$MH() {
        return cfapi_h$constants$12._iswupper_l$MH();
    }
    public static @C("int") int _iswupper_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswupper_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswxdigit_l$MH() {
        return cfapi_h$constants$12._iswxdigit_l$MH();
    }
    public static @C("int") int _iswxdigit_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswxdigit_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswcsymf_l$MH() {
        return cfapi_h$constants$12._iswcsymf_l$MH();
    }
    public static @C("int") int _iswcsymf_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswcsymf_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswcsym_l$MH() {
        return cfapi_h$constants$12._iswcsym_l$MH();
    }
    public static @C("int") int _iswcsym_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswcsym_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle towupper$MH() {
        return cfapi_h$constants$12.towupper$MH();
    }
    public static @C("wint_t") short towupper (@C("wint_t") short _C) {
        try {
            return (short)cfapi_h$constants$12.towupper$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle towlower$MH() {
        return cfapi_h$constants$12.towlower$MH();
    }
    public static @C("wint_t") short towlower (@C("wint_t") short _C) {
        try {
            return (short)cfapi_h$constants$12.towlower$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iswctype$MH() {
        return cfapi_h$constants$12.iswctype$MH();
    }
    public static @C("int") int iswctype (@C("wint_t") short _C, @C("wctype_t") short _Type) {
        try {
            return (int)cfapi_h$constants$12.iswctype$MH().invokeExact(_C, _Type);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _towupper_l$MH() {
        return cfapi_h$constants$12._towupper_l$MH();
    }
    public static @C("wint_t") short _towupper_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (short)cfapi_h$constants$12._towupper_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _towlower_l$MH() {
        return cfapi_h$constants$12._towlower_l$MH();
    }
    public static @C("wint_t") short _towlower_l (@C("wint_t") short _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (short)cfapi_h$constants$12._towlower_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iswctype_l$MH() {
        return cfapi_h$constants$12._iswctype_l$MH();
    }
    public static @C("int") int _iswctype_l (@C("wint_t") short _C, @C("wctype_t") short _Type, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iswctype_l$MH().invokeExact(_C, _Type, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isleadbyte$MH() {
        return cfapi_h$constants$12.isleadbyte$MH();
    }
    public static @C("int") int isleadbyte (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isleadbyte$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isleadbyte_l$MH() {
        return cfapi_h$constants$12._isleadbyte_l$MH();
    }
    public static @C("int") int _isleadbyte_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isleadbyte_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle is_wctype$MH() {
        return cfapi_h$constants$12.is_wctype$MH();
    }
    public static @C("int") int is_wctype (@C("wint_t") short _C, @C("wctype_t") short _Type) {
        try {
            return (int)cfapi_h$constants$12.is_wctype$MH().invokeExact(_C, _Type);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isctype$MH() {
        return cfapi_h$constants$12._isctype$MH();
    }
    public static @C("int") int _isctype (@C("int") int _C, @C("int") int _Type) {
        try {
            return (int)cfapi_h$constants$12._isctype$MH().invokeExact(_C, _Type);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isctype_l$MH() {
        return cfapi_h$constants$12._isctype_l$MH();
    }
    public static @C("int") int _isctype_l (@C("int") int _C, @C("int") int _Type, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isctype_l$MH().invokeExact(_C, _Type, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isalpha$MH() {
        return cfapi_h$constants$12.isalpha$MH();
    }
    public static @C("int") int isalpha (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isalpha$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isalpha_l$MH() {
        return cfapi_h$constants$12._isalpha_l$MH();
    }
    public static @C("int") int _isalpha_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isalpha_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isupper$MH() {
        return cfapi_h$constants$12.isupper$MH();
    }
    public static @C("int") int isupper (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isupper$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isupper_l$MH() {
        return cfapi_h$constants$12._isupper_l$MH();
    }
    public static @C("int") int _isupper_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isupper_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle islower$MH() {
        return cfapi_h$constants$12.islower$MH();
    }
    public static @C("int") int islower (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.islower$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _islower_l$MH() {
        return cfapi_h$constants$12._islower_l$MH();
    }
    public static @C("int") int _islower_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._islower_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isdigit$MH() {
        return cfapi_h$constants$12.isdigit$MH();
    }
    public static @C("int") int isdigit (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isdigit$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isdigit_l$MH() {
        return cfapi_h$constants$12._isdigit_l$MH();
    }
    public static @C("int") int _isdigit_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isdigit_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isxdigit$MH() {
        return cfapi_h$constants$12.isxdigit$MH();
    }
    public static @C("int") int isxdigit (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isxdigit$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isxdigit_l$MH() {
        return cfapi_h$constants$12._isxdigit_l$MH();
    }
    public static @C("int") int _isxdigit_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isxdigit_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isspace$MH() {
        return cfapi_h$constants$12.isspace$MH();
    }
    public static @C("int") int isspace (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isspace$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isspace_l$MH() {
        return cfapi_h$constants$12._isspace_l$MH();
    }
    public static @C("int") int _isspace_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isspace_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ispunct$MH() {
        return cfapi_h$constants$12.ispunct$MH();
    }
    public static @C("int") int ispunct (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.ispunct$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _ispunct_l$MH() {
        return cfapi_h$constants$12._ispunct_l$MH();
    }
    public static @C("int") int _ispunct_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._ispunct_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isblank$MH() {
        return cfapi_h$constants$12.isblank$MH();
    }
    public static @C("int") int isblank (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isblank$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isblank_l$MH() {
        return cfapi_h$constants$12._isblank_l$MH();
    }
    public static @C("int") int _isblank_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isblank_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isalnum$MH() {
        return cfapi_h$constants$12.isalnum$MH();
    }
    public static @C("int") int isalnum (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isalnum$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isalnum_l$MH() {
        return cfapi_h$constants$12._isalnum_l$MH();
    }
    public static @C("int") int _isalnum_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isalnum_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isprint$MH() {
        return cfapi_h$constants$12.isprint$MH();
    }
    public static @C("int") int isprint (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isprint$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isprint_l$MH() {
        return cfapi_h$constants$12._isprint_l$MH();
    }
    public static @C("int") int _isprint_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isprint_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle isgraph$MH() {
        return cfapi_h$constants$12.isgraph$MH();
    }
    public static @C("int") int isgraph (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.isgraph$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _isgraph_l$MH() {
        return cfapi_h$constants$12._isgraph_l$MH();
    }
    public static @C("int") int _isgraph_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._isgraph_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle iscntrl$MH() {
        return cfapi_h$constants$12.iscntrl$MH();
    }
    public static @C("int") int iscntrl (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.iscntrl$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _iscntrl_l$MH() {
        return cfapi_h$constants$12._iscntrl_l$MH();
    }
    public static @C("int") int _iscntrl_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._iscntrl_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle toupper$MH() {
        return cfapi_h$constants$12.toupper$MH();
    }
    public static @C("int") int toupper (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.toupper$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle tolower$MH() {
        return cfapi_h$constants$12.tolower$MH();
    }
    public static @C("int") int tolower (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.tolower$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _tolower$MH() {
        return cfapi_h$constants$12._tolower$MH();
    }
    public static @C("int") int _tolower (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12._tolower$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _tolower_l$MH() {
        return cfapi_h$constants$12._tolower_l$MH();
    }
    public static @C("int") int _tolower_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._tolower_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _toupper$MH() {
        return cfapi_h$constants$12._toupper$MH();
    }
    public static @C("int") int _toupper (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12._toupper$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _toupper_l$MH() {
        return cfapi_h$constants$12._toupper_l$MH();
    }
    public static @C("int") int _toupper_l (@C("int") int _C, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._toupper_l$MH().invokeExact(_C, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __isascii$MH() {
        return cfapi_h$constants$12.__isascii$MH();
    }
    public static @C("int") int __isascii (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__isascii$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __toascii$MH() {
        return cfapi_h$constants$12.__toascii$MH();
    }
    public static @C("int") int __toascii (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__toascii$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __iscsymf$MH() {
        return cfapi_h$constants$12.__iscsymf$MH();
    }
    public static @C("int") int __iscsymf (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__iscsymf$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __iscsym$MH() {
        return cfapi_h$constants$12.__iscsym$MH();
    }
    public static @C("int") int __iscsym (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__iscsym$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __acrt_locale_get_ctype_array_value$MH() {
        return cfapi_h$constants$12.__acrt_locale_get_ctype_array_value$MH();
    }
    public static @C("int") int __acrt_locale_get_ctype_array_value (@C("unsigned short*") Addressable _Locale_pctype_array, @C("int") int _Char_value, @C("int") int _Mask) {
        try {
            return (int)cfapi_h$constants$12.__acrt_locale_get_ctype_array_value$MH().invokeExact(_Locale_pctype_array.address(), _Char_value, _Mask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ___mb_cur_max_func$MH() {
        return cfapi_h$constants$12.___mb_cur_max_func$MH();
    }
    public static @C("int") int ___mb_cur_max_func () {
        try {
            return (int)cfapi_h$constants$12.___mb_cur_max_func$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ___mb_cur_max_l_func$MH() {
        return cfapi_h$constants$12.___mb_cur_max_l_func$MH();
    }
    public static @C("int") int ___mb_cur_max_l_func (@C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12.___mb_cur_max_l_func$MH().invokeExact(_Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __ascii_tolower$MH() {
        return cfapi_h$constants$12.__ascii_tolower$MH();
    }
    public static @C("int") int __ascii_tolower (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__ascii_tolower$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __ascii_toupper$MH() {
        return cfapi_h$constants$12.__ascii_toupper$MH();
    }
    public static @C("int") int __ascii_toupper (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__ascii_toupper$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __ascii_iswalpha$MH() {
        return cfapi_h$constants$12.__ascii_iswalpha$MH();
    }
    public static @C("int") int __ascii_iswalpha (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__ascii_iswalpha$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __ascii_iswdigit$MH() {
        return cfapi_h$constants$12.__ascii_iswdigit$MH();
    }
    public static @C("int") int __ascii_iswdigit (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__ascii_iswdigit$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __ascii_towlower$MH() {
        return cfapi_h$constants$12.__ascii_towlower$MH();
    }
    public static @C("int") int __ascii_towlower (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__ascii_towlower$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __ascii_towupper$MH() {
        return cfapi_h$constants$12.__ascii_towupper$MH();
    }
    public static @C("int") int __ascii_towupper (@C("int") int _C) {
        try {
            return (int)cfapi_h$constants$12.__ascii_towupper$MH().invokeExact(_C);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __acrt_get_locale_data_prefix$MH() {
        return cfapi_h$constants$12.__acrt_get_locale_data_prefix$MH();
    }
    public static @C("__crt_locale_data_public*") MemoryAddress __acrt_get_locale_data_prefix (@C("void*") Addressable _LocalePointers) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.__acrt_get_locale_data_prefix$MH().invokeExact(_LocalePointers.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _chvalidchk_l$MH() {
        return cfapi_h$constants$12._chvalidchk_l$MH();
    }
    public static @C("int") int _chvalidchk_l (@C("int") int _C, @C("int") int _Mask, @C("const _locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._chvalidchk_l$MH().invokeExact(_C, _Mask, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _ischartype_l$MH() {
        return cfapi_h$constants$12._ischartype_l$MH();
    }
    public static @C("int") int _ischartype_l (@C("int") int _C, @C("int") int _Mask, @C("const _locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._ischartype_l$MH().invokeExact(_C, _Mask, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("short") ValueLayout INT16 = C_SHORT;
    public static @C("int") ValueLayout INT32 = C_INT;
    public static @C("long long") ValueLayout INT64 = C_LONGLONG;
    public static @C("int") ValueLayout LONG32 = C_INT;
    public static @C("long long") ValueLayout INT_PTR = C_LONGLONG;
    public static @C("long long") ValueLayout LONG_PTR = C_LONGLONG;
    public static @C("long long") ValueLayout SHANDLE_PTR = C_LONGLONG;
    public static @C("int") ValueLayout HALF_PTR = C_INT;
    public static  MethodHandle HandleToULong$MH() {
        return cfapi_h$constants$12.HandleToULong$MH();
    }
    public static @C("unsigned long") int HandleToULong (@C("void*") Addressable h) {
        try {
            return (int)cfapi_h$constants$12.HandleToULong$MH().invokeExact(h.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle HandleToLong$MH() {
        return cfapi_h$constants$12.HandleToLong$MH();
    }
    public static @C("long") int HandleToLong (@C("void*") Addressable h) {
        try {
            return (int)cfapi_h$constants$12.HandleToLong$MH().invokeExact(h.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ULongToHandle$MH() {
        return cfapi_h$constants$12.ULongToHandle$MH();
    }
    public static @C("void*") MemoryAddress ULongToHandle (@C("unsigned long") int h) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.ULongToHandle$MH().invokeExact(h);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LongToHandle$MH() {
        return cfapi_h$constants$12.LongToHandle$MH();
    }
    public static @C("void*") MemoryAddress LongToHandle (@C("long") int h) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.LongToHandle$MH().invokeExact(h);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtrToUlong$MH() {
        return cfapi_h$constants$12.PtrToUlong$MH();
    }
    public static @C("unsigned long") int PtrToUlong (@C("void*") Addressable p) {
        try {
            return (int)cfapi_h$constants$12.PtrToUlong$MH().invokeExact(p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtrToUint$MH() {
        return cfapi_h$constants$12.PtrToUint$MH();
    }
    public static @C("unsigned int") int PtrToUint (@C("void*") Addressable p) {
        try {
            return (int)cfapi_h$constants$12.PtrToUint$MH().invokeExact(p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtrToUshort$MH() {
        return cfapi_h$constants$12.PtrToUshort$MH();
    }
    public static @C("unsigned short") short PtrToUshort (@C("void*") Addressable p) {
        try {
            return (short)cfapi_h$constants$12.PtrToUshort$MH().invokeExact(p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtrToLong$MH() {
        return cfapi_h$constants$12.PtrToLong$MH();
    }
    public static @C("long") int PtrToLong (@C("void*") Addressable p) {
        try {
            return (int)cfapi_h$constants$12.PtrToLong$MH().invokeExact(p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtrToInt$MH() {
        return cfapi_h$constants$12.PtrToInt$MH();
    }
    public static @C("int") int PtrToInt (@C("void*") Addressable p) {
        try {
            return (int)cfapi_h$constants$12.PtrToInt$MH().invokeExact(p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtrToShort$MH() {
        return cfapi_h$constants$12.PtrToShort$MH();
    }
    public static @C("short") short PtrToShort (@C("void*") Addressable p) {
        try {
            return (short)cfapi_h$constants$12.PtrToShort$MH().invokeExact(p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IntToPtr$MH() {
        return cfapi_h$constants$12.IntToPtr$MH();
    }
    public static @C("void*") MemoryAddress IntToPtr (@C("int") int i) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.IntToPtr$MH().invokeExact(i);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UIntToPtr$MH() {
        return cfapi_h$constants$12.UIntToPtr$MH();
    }
    public static @C("void*") MemoryAddress UIntToPtr (@C("unsigned int") int ui) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.UIntToPtr$MH().invokeExact(ui);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LongToPtr$MH() {
        return cfapi_h$constants$12.LongToPtr$MH();
    }
    public static @C("void*") MemoryAddress LongToPtr (@C("long") int l) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.LongToPtr$MH().invokeExact(l);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ULongToPtr$MH() {
        return cfapi_h$constants$12.ULongToPtr$MH();
    }
    public static @C("void*") MemoryAddress ULongToPtr (@C("unsigned long") int ul) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.ULongToPtr$MH().invokeExact(ul);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Ptr32ToPtr$MH() {
        return cfapi_h$constants$12.Ptr32ToPtr$MH();
    }
    public static @C("void*") MemoryAddress Ptr32ToPtr (@C("void*") Addressable p) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.Ptr32ToPtr$MH().invokeExact(p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Handle32ToHandle$MH() {
        return cfapi_h$constants$12.Handle32ToHandle$MH();
    }
    public static @C("void*") MemoryAddress Handle32ToHandle (@C("void*") Addressable h) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.Handle32ToHandle$MH().invokeExact(h.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PtrToPtr32$MH() {
        return cfapi_h$constants$12.PtrToPtr32$MH();
    }
    public static @C("void*") MemoryAddress PtrToPtr32 (@C("void*") Addressable p) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.PtrToPtr32$MH().invokeExact(p.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("long long") ValueLayout SSIZE_T = C_LONGLONG;
    public static @C("long long") ValueLayout LONG64 = C_LONGLONG;
    public static @C("char") ValueLayout CHAR = C_CHAR;
    public static @C("short") ValueLayout SHORT = C_SHORT;
    public static @C("long") ValueLayout LONG = C_LONG;
    public static @C("int") ValueLayout INT$0 = C_INT;
    public static @C("char") ValueLayout TCHAR = C_CHAR;
    public static @C("long") ValueLayout HRESULT = C_LONG;
    public static @C("char") ValueLayout CCHAR = C_CHAR;
    public static @C("int") int UNSPECIFIED_COMPARTMENT_ID() {
        return cfapi_h$constants$12.UNSPECIFIED_COMPARTMENT_ID();
    }
    public static @C("int") int DEFAULT_COMPARTMENT_ID() {
        return cfapi_h$constants$12.DEFAULT_COMPARTMENT_ID();
    }
    public static @C("long long") ValueLayout LONGLONG = C_LONGLONG;
    public static @C("long long") ValueLayout USN = C_LONGLONG;
    public static @C("long long") ValueLayout RTL_REFERENCE_COUNT = C_LONGLONG;
    public static @C("long") ValueLayout RTL_REFERENCE_COUNT32 = C_LONG;
    public static  MethodHandle _rotl8$MH() {
        return cfapi_h$constants$12._rotl8$MH();
    }
    public static @C("unsigned char") byte _rotl8 (@C("unsigned char") byte Value, @C("unsigned char") byte Shift) {
        try {
            return (byte)cfapi_h$constants$12._rotl8$MH().invokeExact(Value, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _rotl16$MH() {
        return cfapi_h$constants$12._rotl16$MH();
    }
    public static @C("unsigned short") short _rotl16 (@C("unsigned short") short Value, @C("unsigned char") byte Shift) {
        try {
            return (short)cfapi_h$constants$12._rotl16$MH().invokeExact(Value, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _rotr8$MH() {
        return cfapi_h$constants$12._rotr8$MH();
    }
    public static @C("unsigned char") byte _rotr8 (@C("unsigned char") byte Value, @C("unsigned char") byte Shift) {
        try {
            return (byte)cfapi_h$constants$12._rotr8$MH().invokeExact(Value, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _rotr16$MH() {
        return cfapi_h$constants$12._rotr16$MH();
    }
    public static @C("unsigned short") short _rotr16 (@C("unsigned short") short Value, @C("unsigned char") byte Shift) {
        try {
            return (short)cfapi_h$constants$12._rotr16$MH().invokeExact(Value, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _rotl$MH() {
        return cfapi_h$constants$12._rotl$MH();
    }
    public static @C("unsigned int") int _rotl (@C("unsigned int") int Value, @C("int") int Shift) {
        try {
            return (int)cfapi_h$constants$12._rotl$MH().invokeExact(Value, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _rotl64$MH() {
        return cfapi_h$constants$12._rotl64$MH();
    }
    public static @C("unsigned long long") long _rotl64 (@C("unsigned long long") long Value, @C("int") int Shift) {
        try {
            return (long)cfapi_h$constants$12._rotl64$MH().invokeExact(Value, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _rotr$MH() {
        return cfapi_h$constants$12._rotr$MH();
    }
    public static @C("unsigned int") int _rotr (@C("unsigned int") int Value, @C("int") int Shift) {
        try {
            return (int)cfapi_h$constants$12._rotr$MH().invokeExact(Value, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _rotr64$MH() {
        return cfapi_h$constants$12._rotr64$MH();
    }
    public static @C("unsigned long long") long _rotr64 (@C("unsigned long long") long Value, @C("int") int Shift) {
        try {
            return (long)cfapi_h$constants$12._rotr64$MH().invokeExact(Value, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _errno$MH() {
        return cfapi_h$constants$12._errno$MH();
    }
    public static @C("int*") MemoryAddress _errno () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._errno$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _set_errno$MH() {
        return cfapi_h$constants$12._set_errno$MH();
    }
    public static @C("errno_t") int _set_errno (@C("int") int _Value) {
        try {
            return (int)cfapi_h$constants$12._set_errno$MH().invokeExact(_Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _get_errno$MH() {
        return cfapi_h$constants$12._get_errno$MH();
    }
    public static @C("errno_t") int _get_errno (@C("int*") Addressable _Value) {
        try {
            return (int)cfapi_h$constants$12._get_errno$MH().invokeExact(_Value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __doserrno$MH() {
        return cfapi_h$constants$12.__doserrno$MH();
    }
    public static @C("unsigned long*") MemoryAddress __doserrno () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.__doserrno$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _set_doserrno$MH() {
        return cfapi_h$constants$12._set_doserrno$MH();
    }
    public static @C("errno_t") int _set_doserrno (@C("unsigned long") int _Value) {
        try {
            return (int)cfapi_h$constants$12._set_doserrno$MH().invokeExact(_Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _get_doserrno$MH() {
        return cfapi_h$constants$12._get_doserrno$MH();
    }
    public static @C("errno_t") int _get_doserrno (@C("unsigned long*") Addressable _Value) {
        try {
            return (int)cfapi_h$constants$12._get_doserrno$MH().invokeExact(_Value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle memchr$MH() {
        return cfapi_h$constants$12.memchr$MH();
    }
    public static @C("void*") MemoryAddress memchr (@C("void*") Addressable _Buf, @C("int") int _Val, @C("size_t") long _MaxCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.memchr$MH().invokeExact(_Buf.address(), _Val, _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle memcmp$MH() {
        return cfapi_h$constants$12.memcmp$MH();
    }
    public static @C("int") int memcmp (@C("void*") Addressable _Buf1, @C("void*") Addressable _Buf2, @C("size_t") long _Size) {
        try {
            return (int)cfapi_h$constants$12.memcmp$MH().invokeExact(_Buf1.address(), _Buf2.address(), _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle memcpy$MH() {
        return cfapi_h$constants$12.memcpy$MH();
    }
    public static @C("void*") MemoryAddress memcpy (@C("void*") Addressable _Dst, @C("void*") Addressable _Src, @C("size_t") long _Size) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.memcpy$MH().invokeExact(_Dst.address(), _Src.address(), _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle memmove$MH() {
        return cfapi_h$constants$12.memmove$MH();
    }
    public static @C("void*") MemoryAddress memmove (@C("void*") Addressable _Dst, @C("void*") Addressable _Src, @C("size_t") long _Size) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.memmove$MH().invokeExact(_Dst.address(), _Src.address(), _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle memset$MH() {
        return cfapi_h$constants$12.memset$MH();
    }
    public static @C("void*") MemoryAddress memset (@C("void*") Addressable _Dst, @C("int") int _Val, @C("size_t") long _Size) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.memset$MH().invokeExact(_Dst.address(), _Val, _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strchr$MH() {
        return cfapi_h$constants$12.strchr$MH();
    }
    public static @C("char*") MemoryAddress strchr (@C("char*") Addressable _Str, @C("int") int _Val) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strchr$MH().invokeExact(_Str.address(), _Val);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strrchr$MH() {
        return cfapi_h$constants$12.strrchr$MH();
    }
    public static @C("char*") MemoryAddress strrchr (@C("char*") Addressable _Str, @C("int") int _Ch) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strrchr$MH().invokeExact(_Str.address(), _Ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strstr$MH() {
        return cfapi_h$constants$12.strstr$MH();
    }
    public static @C("char*") MemoryAddress strstr (@C("char*") Addressable _Str, @C("char*") Addressable _SubStr) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strstr$MH().invokeExact(_Str.address(), _SubStr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcschr$MH() {
        return cfapi_h$constants$12.wcschr$MH();
    }
    public static @C("unsigned short*") MemoryAddress wcschr (@C("const wchar_t*") Addressable _Str, @C("wchar_t") short _Ch) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcschr$MH().invokeExact(_Str.address(), _Ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsrchr$MH() {
        return cfapi_h$constants$12.wcsrchr$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcsrchr (@C("const wchar_t*") Addressable _Str, @C("wchar_t") short _Ch) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcsrchr$MH().invokeExact(_Str.address(), _Ch);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsstr$MH() {
        return cfapi_h$constants$12.wcsstr$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcsstr (@C("const wchar_t*") Addressable _Str, @C("const wchar_t*") Addressable _SubStr) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcsstr$MH().invokeExact(_Str.address(), _SubStr.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle memcpy_s$MH() {
        return cfapi_h$constants$12.memcpy_s$MH();
    }
    public static @C("errno_t") int memcpy_s (@C("void*") Addressable _Destination, @C("const rsize_t") long _DestinationSize, @C("void*") Addressable _Source, @C("const rsize_t") long _SourceSize) {
        try {
            return (int)cfapi_h$constants$12.memcpy_s$MH().invokeExact(_Destination.address(), _DestinationSize, _Source.address(), _SourceSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle memmove_s$MH() {
        return cfapi_h$constants$12.memmove_s$MH();
    }
    public static @C("errno_t") int memmove_s (@C("void*") Addressable _Destination, @C("const rsize_t") long _DestinationSize, @C("void*") Addressable _Source, @C("const rsize_t") long _SourceSize) {
        try {
            return (int)cfapi_h$constants$12.memmove_s$MH().invokeExact(_Destination.address(), _DestinationSize, _Source.address(), _SourceSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _memicmp$MH() {
        return cfapi_h$constants$12._memicmp$MH();
    }
    public static @C("int") int _memicmp (@C("void*") Addressable _Buf1, @C("void*") Addressable _Buf2, @C("size_t") long _Size) {
        try {
            return (int)cfapi_h$constants$12._memicmp$MH().invokeExact(_Buf1.address(), _Buf2.address(), _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _memicmp_l$MH() {
        return cfapi_h$constants$12._memicmp_l$MH();
    }
    public static @C("int") int _memicmp_l (@C("void*") Addressable _Buf1, @C("void*") Addressable _Buf2, @C("size_t") long _Size, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._memicmp_l$MH().invokeExact(_Buf1.address(), _Buf2.address(), _Size, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle memccpy$MH() {
        return cfapi_h$constants$12.memccpy$MH();
    }
    public static @C("void*") MemoryAddress memccpy (@C("void*") Addressable _Dst, @C("void*") Addressable _Src, @C("int") int _Val, @C("size_t") long _Size) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.memccpy$MH().invokeExact(_Dst.address(), _Src.address(), _Val, _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle memicmp$MH() {
        return cfapi_h$constants$12.memicmp$MH();
    }
    public static @C("int") int memicmp (@C("void*") Addressable _Buf1, @C("void*") Addressable _Buf2, @C("size_t") long _Size) {
        try {
            return (int)cfapi_h$constants$12.memicmp$MH().invokeExact(_Buf1.address(), _Buf2.address(), _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcscat_s$MH() {
        return cfapi_h$constants$12.wcscat_s$MH();
    }
    public static @C("errno_t") int wcscat_s (@C("wchar_t*") Addressable _Destination, @C("rsize_t") long _SizeInWords, @C("const wchar_t*") Addressable _Source) {
        try {
            return (int)cfapi_h$constants$12.wcscat_s$MH().invokeExact(_Destination.address(), _SizeInWords, _Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcscpy_s$MH() {
        return cfapi_h$constants$12.wcscpy_s$MH();
    }
    public static @C("errno_t") int wcscpy_s (@C("wchar_t*") Addressable _Destination, @C("rsize_t") long _SizeInWords, @C("const wchar_t*") Addressable _Source) {
        try {
            return (int)cfapi_h$constants$12.wcscpy_s$MH().invokeExact(_Destination.address(), _SizeInWords, _Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsncat_s$MH() {
        return cfapi_h$constants$12.wcsncat_s$MH();
    }
    public static @C("errno_t") int wcsncat_s (@C("wchar_t*") Addressable _Destination, @C("rsize_t") long _SizeInWords, @C("const wchar_t*") Addressable _Source, @C("rsize_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12.wcsncat_s$MH().invokeExact(_Destination.address(), _SizeInWords, _Source.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsncpy_s$MH() {
        return cfapi_h$constants$12.wcsncpy_s$MH();
    }
    public static @C("errno_t") int wcsncpy_s (@C("wchar_t*") Addressable _Destination, @C("rsize_t") long _SizeInWords, @C("const wchar_t*") Addressable _Source, @C("rsize_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12.wcsncpy_s$MH().invokeExact(_Destination.address(), _SizeInWords, _Source.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcstok_s$MH() {
        return cfapi_h$constants$12.wcstok_s$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcstok_s (@C("wchar_t*") Addressable _String, @C("const wchar_t*") Addressable _Delimiter, @C("wchar_t**") Addressable _Context) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcstok_s$MH().invokeExact(_String.address(), _Delimiter.address(), _Context.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsdup$MH() {
        return cfapi_h$constants$12._wcsdup$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcsdup (@C("const wchar_t*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcsdup$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcscat$MH() {
        return cfapi_h$constants$12.wcscat$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcscat (@C("wchar_t*") Addressable _Destination, @C("const wchar_t*") Addressable _Source) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcscat$MH().invokeExact(_Destination.address(), _Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcscmp$MH() {
        return cfapi_h$constants$12.wcscmp$MH();
    }
    public static @C("int") int wcscmp (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12.wcscmp$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcscpy$MH() {
        return cfapi_h$constants$12.wcscpy$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcscpy (@C("wchar_t*") Addressable _Destination, @C("const wchar_t*") Addressable _Source) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcscpy$MH().invokeExact(_Destination.address(), _Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcscspn$MH() {
        return cfapi_h$constants$12.wcscspn$MH();
    }
    public static @C("size_t") long wcscspn (@C("const wchar_t*") Addressable _String, @C("const wchar_t*") Addressable _Control) {
        try {
            return (long)cfapi_h$constants$12.wcscspn$MH().invokeExact(_String.address(), _Control.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcslen$MH() {
        return cfapi_h$constants$12.wcslen$MH();
    }
    public static @C("unsigned long long") long wcslen (@C("const wchar_t*") Addressable _String) {
        try {
            return (long)cfapi_h$constants$12.wcslen$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsnlen$MH() {
        return cfapi_h$constants$12.wcsnlen$MH();
    }
    public static @C("size_t") long wcsnlen (@C("const wchar_t*") Addressable _Source, @C("size_t") long _MaxCount) {
        try {
            return (long)cfapi_h$constants$12.wcsnlen$MH().invokeExact(_Source.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsnlen_s$MH() {
        return cfapi_h$constants$12.wcsnlen_s$MH();
    }
    public static @C("size_t") long wcsnlen_s (@C("const wchar_t*") Addressable _Source, @C("size_t") long _MaxCount) {
        try {
            return (long)cfapi_h$constants$12.wcsnlen_s$MH().invokeExact(_Source.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsncat$MH() {
        return cfapi_h$constants$12.wcsncat$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcsncat (@C("wchar_t*") Addressable _Destination, @C("const wchar_t*") Addressable _Source, @C("size_t") long _Count) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcsncat$MH().invokeExact(_Destination.address(), _Source.address(), _Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsncmp$MH() {
        return cfapi_h$constants$12.wcsncmp$MH();
    }
    public static @C("int") int wcsncmp (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12.wcsncmp$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsncpy$MH() {
        return cfapi_h$constants$12.wcsncpy$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcsncpy (@C("wchar_t*") Addressable _Destination, @C("const wchar_t*") Addressable _Source, @C("size_t") long _Count) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcsncpy$MH().invokeExact(_Destination.address(), _Source.address(), _Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcspbrk$MH() {
        return cfapi_h$constants$12.wcspbrk$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcspbrk (@C("const wchar_t*") Addressable _String, @C("const wchar_t*") Addressable _Control) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcspbrk$MH().invokeExact(_String.address(), _Control.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsspn$MH() {
        return cfapi_h$constants$12.wcsspn$MH();
    }
    public static @C("size_t") long wcsspn (@C("const wchar_t*") Addressable _String, @C("const wchar_t*") Addressable _Control) {
        try {
            return (long)cfapi_h$constants$12.wcsspn$MH().invokeExact(_String.address(), _Control.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcstok$MH() {
        return cfapi_h$constants$12.wcstok$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcstok (@C("wchar_t*") Addressable _String, @C("const wchar_t*") Addressable _Delimiter, @C("wchar_t**") Addressable _Context) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcstok$MH().invokeExact(_String.address(), _Delimiter.address(), _Context.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcstok$MH() {
        return cfapi_h$constants$12._wcstok$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcstok (@C("wchar_t*") Addressable _String, @C("const wchar_t*") Addressable _Delimiter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcstok$MH().invokeExact(_String.address(), _Delimiter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcserror$MH() {
        return cfapi_h$constants$12._wcserror$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcserror (@C("int") int _ErrorNumber) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcserror$MH().invokeExact(_ErrorNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcserror_s$MH() {
        return cfapi_h$constants$12._wcserror_s$MH();
    }
    public static @C("errno_t") int _wcserror_s (@C("wchar_t*") Addressable _Buffer, @C("size_t") long _SizeInWords, @C("int") int _ErrorNumber) {
        try {
            return (int)cfapi_h$constants$12._wcserror_s$MH().invokeExact(_Buffer.address(), _SizeInWords, _ErrorNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __wcserror$MH() {
        return cfapi_h$constants$12.__wcserror$MH();
    }
    public static @C("wchar_t*") MemoryAddress __wcserror (@C("const wchar_t*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.__wcserror$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __wcserror_s$MH() {
        return cfapi_h$constants$12.__wcserror_s$MH();
    }
    public static @C("errno_t") int __wcserror_s (@C("wchar_t*") Addressable _Buffer, @C("size_t") long _SizeInWords, @C("const wchar_t*") Addressable _ErrorMessage) {
        try {
            return (int)cfapi_h$constants$12.__wcserror_s$MH().invokeExact(_Buffer.address(), _SizeInWords, _ErrorMessage.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsicmp$MH() {
        return cfapi_h$constants$12._wcsicmp$MH();
    }
    public static @C("int") int _wcsicmp (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12._wcsicmp$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsicmp_l$MH() {
        return cfapi_h$constants$12._wcsicmp_l$MH();
    }
    public static @C("int") int _wcsicmp_l (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._wcsicmp_l$MH().invokeExact(_String1.address(), _String2.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsnicmp$MH() {
        return cfapi_h$constants$12._wcsnicmp$MH();
    }
    public static @C("int") int _wcsnicmp (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12._wcsnicmp$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsnicmp_l$MH() {
        return cfapi_h$constants$12._wcsnicmp_l$MH();
    }
    public static @C("int") int _wcsnicmp_l (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("size_t") long _MaxCount, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._wcsnicmp_l$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsnset_s$MH() {
        return cfapi_h$constants$12._wcsnset_s$MH();
    }
    public static @C("errno_t") int _wcsnset_s (@C("wchar_t*") Addressable _Destination, @C("size_t") long _SizeInWords, @C("wchar_t") short _Value, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12._wcsnset_s$MH().invokeExact(_Destination.address(), _SizeInWords, _Value, _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsnset$MH() {
        return cfapi_h$constants$12._wcsnset$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcsnset (@C("wchar_t*") Addressable _String, @C("wchar_t") short _Value, @C("size_t") long _MaxCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcsnset$MH().invokeExact(_String.address(), _Value, _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsrev$MH() {
        return cfapi_h$constants$12._wcsrev$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcsrev (@C("wchar_t*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcsrev$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsset_s$MH() {
        return cfapi_h$constants$12._wcsset_s$MH();
    }
    public static @C("errno_t") int _wcsset_s (@C("wchar_t*") Addressable _Destination, @C("size_t") long _SizeInWords, @C("wchar_t") short _Value) {
        try {
            return (int)cfapi_h$constants$12._wcsset_s$MH().invokeExact(_Destination.address(), _SizeInWords, _Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsset$MH() {
        return cfapi_h$constants$12._wcsset$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcsset (@C("wchar_t*") Addressable _String, @C("wchar_t") short _Value) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcsset$MH().invokeExact(_String.address(), _Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcslwr_s$MH() {
        return cfapi_h$constants$12._wcslwr_s$MH();
    }
    public static @C("errno_t") int _wcslwr_s (@C("wchar_t*") Addressable _String, @C("size_t") long _SizeInWords) {
        try {
            return (int)cfapi_h$constants$12._wcslwr_s$MH().invokeExact(_String.address(), _SizeInWords);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcslwr$MH() {
        return cfapi_h$constants$12._wcslwr$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcslwr (@C("wchar_t*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcslwr$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcslwr_s_l$MH() {
        return cfapi_h$constants$12._wcslwr_s_l$MH();
    }
    public static @C("errno_t") int _wcslwr_s_l (@C("wchar_t*") Addressable _String, @C("size_t") long _SizeInWords, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._wcslwr_s_l$MH().invokeExact(_String.address(), _SizeInWords, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcslwr_l$MH() {
        return cfapi_h$constants$12._wcslwr_l$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcslwr_l (@C("wchar_t*") Addressable _String, @C("_locale_t") Addressable _Locale) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcslwr_l$MH().invokeExact(_String.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsupr_s$MH() {
        return cfapi_h$constants$12._wcsupr_s$MH();
    }
    public static @C("errno_t") int _wcsupr_s (@C("wchar_t*") Addressable _String, @C("size_t") long _Size) {
        try {
            return (int)cfapi_h$constants$12._wcsupr_s$MH().invokeExact(_String.address(), _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsupr$MH() {
        return cfapi_h$constants$12._wcsupr$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcsupr (@C("wchar_t*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcsupr$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsupr_s_l$MH() {
        return cfapi_h$constants$12._wcsupr_s_l$MH();
    }
    public static @C("errno_t") int _wcsupr_s_l (@C("wchar_t*") Addressable _String, @C("size_t") long _Size, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._wcsupr_s_l$MH().invokeExact(_String.address(), _Size, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsupr_l$MH() {
        return cfapi_h$constants$12._wcsupr_l$MH();
    }
    public static @C("wchar_t*") MemoryAddress _wcsupr_l (@C("wchar_t*") Addressable _String, @C("_locale_t") Addressable _Locale) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._wcsupr_l$MH().invokeExact(_String.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsxfrm$MH() {
        return cfapi_h$constants$12.wcsxfrm$MH();
    }
    public static @C("size_t") long wcsxfrm (@C("wchar_t*") Addressable _Destination, @C("const wchar_t*") Addressable _Source, @C("size_t") long _MaxCount) {
        try {
            return (long)cfapi_h$constants$12.wcsxfrm$MH().invokeExact(_Destination.address(), _Source.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsxfrm_l$MH() {
        return cfapi_h$constants$12._wcsxfrm_l$MH();
    }
    public static @C("size_t") long _wcsxfrm_l (@C("wchar_t*") Addressable _Destination, @C("const wchar_t*") Addressable _Source, @C("size_t") long _MaxCount, @C("_locale_t") Addressable _Locale) {
        try {
            return (long)cfapi_h$constants$12._wcsxfrm_l$MH().invokeExact(_Destination.address(), _Source.address(), _MaxCount, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcscoll$MH() {
        return cfapi_h$constants$12.wcscoll$MH();
    }
    public static @C("int") int wcscoll (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12.wcscoll$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcscoll_l$MH() {
        return cfapi_h$constants$12._wcscoll_l$MH();
    }
    public static @C("int") int _wcscoll_l (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._wcscoll_l$MH().invokeExact(_String1.address(), _String2.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsicoll$MH() {
        return cfapi_h$constants$12._wcsicoll$MH();
    }
    public static @C("int") int _wcsicoll (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12._wcsicoll$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsicoll_l$MH() {
        return cfapi_h$constants$12._wcsicoll_l$MH();
    }
    public static @C("int") int _wcsicoll_l (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._wcsicoll_l$MH().invokeExact(_String1.address(), _String2.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsncoll$MH() {
        return cfapi_h$constants$12._wcsncoll$MH();
    }
    public static @C("int") int _wcsncoll (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12._wcsncoll$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsncoll_l$MH() {
        return cfapi_h$constants$12._wcsncoll_l$MH();
    }
    public static @C("int") int _wcsncoll_l (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("size_t") long _MaxCount, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._wcsncoll_l$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsnicoll$MH() {
        return cfapi_h$constants$12._wcsnicoll$MH();
    }
    public static @C("int") int _wcsnicoll (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12._wcsnicoll$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _wcsnicoll_l$MH() {
        return cfapi_h$constants$12._wcsnicoll_l$MH();
    }
    public static @C("int") int _wcsnicoll_l (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("size_t") long _MaxCount, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._wcsnicoll_l$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsdup$MH() {
        return cfapi_h$constants$12.wcsdup$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcsdup (@C("const wchar_t*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcsdup$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsicmp$MH() {
        return cfapi_h$constants$12.wcsicmp$MH();
    }
    public static @C("int") int wcsicmp (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12.wcsicmp$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsnicmp$MH() {
        return cfapi_h$constants$12.wcsnicmp$MH();
    }
    public static @C("int") int wcsnicmp (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12.wcsnicmp$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsnset$MH() {
        return cfapi_h$constants$12.wcsnset$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcsnset (@C("wchar_t*") Addressable _String, @C("wchar_t") short _Value, @C("size_t") long _MaxCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcsnset$MH().invokeExact(_String.address(), _Value, _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsrev$MH() {
        return cfapi_h$constants$12.wcsrev$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcsrev (@C("wchar_t*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcsrev$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsset$MH() {
        return cfapi_h$constants$12.wcsset$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcsset (@C("wchar_t*") Addressable _String, @C("wchar_t") short _Value) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcsset$MH().invokeExact(_String.address(), _Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcslwr$MH() {
        return cfapi_h$constants$12.wcslwr$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcslwr (@C("wchar_t*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcslwr$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsupr$MH() {
        return cfapi_h$constants$12.wcsupr$MH();
    }
    public static @C("wchar_t*") MemoryAddress wcsupr (@C("wchar_t*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.wcsupr$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wcsicoll$MH() {
        return cfapi_h$constants$12.wcsicoll$MH();
    }
    public static @C("int") int wcsicoll (@C("const wchar_t*") Addressable _String1, @C("const wchar_t*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12.wcsicoll$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strcpy_s$MH() {
        return cfapi_h$constants$12.strcpy_s$MH();
    }
    public static @C("errno_t") int strcpy_s (@C("char*") Addressable _Destination, @C("rsize_t") long _SizeInBytes, @C("char*") Addressable _Source) {
        try {
            return (int)cfapi_h$constants$12.strcpy_s$MH().invokeExact(_Destination.address(), _SizeInBytes, _Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strcat_s$MH() {
        return cfapi_h$constants$12.strcat_s$MH();
    }
    public static @C("errno_t") int strcat_s (@C("char*") Addressable _Destination, @C("rsize_t") long _SizeInBytes, @C("char*") Addressable _Source) {
        try {
            return (int)cfapi_h$constants$12.strcat_s$MH().invokeExact(_Destination.address(), _SizeInBytes, _Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strerror_s$MH() {
        return cfapi_h$constants$12.strerror_s$MH();
    }
    public static @C("errno_t") int strerror_s (@C("char*") Addressable _Buffer, @C("size_t") long _SizeInBytes, @C("int") int _ErrorNumber) {
        try {
            return (int)cfapi_h$constants$12.strerror_s$MH().invokeExact(_Buffer.address(), _SizeInBytes, _ErrorNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strncat_s$MH() {
        return cfapi_h$constants$12.strncat_s$MH();
    }
    public static @C("errno_t") int strncat_s (@C("char*") Addressable _Destination, @C("rsize_t") long _SizeInBytes, @C("char*") Addressable _Source, @C("rsize_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12.strncat_s$MH().invokeExact(_Destination.address(), _SizeInBytes, _Source.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strncpy_s$MH() {
        return cfapi_h$constants$12.strncpy_s$MH();
    }
    public static @C("errno_t") int strncpy_s (@C("char*") Addressable _Destination, @C("rsize_t") long _SizeInBytes, @C("char*") Addressable _Source, @C("rsize_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12.strncpy_s$MH().invokeExact(_Destination.address(), _SizeInBytes, _Source.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strtok_s$MH() {
        return cfapi_h$constants$12.strtok_s$MH();
    }
    public static @C("char*") MemoryAddress strtok_s (@C("char*") Addressable _String, @C("char*") Addressable _Delimiter, @C("char**") Addressable _Context) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strtok_s$MH().invokeExact(_String.address(), _Delimiter.address(), _Context.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _memccpy$MH() {
        return cfapi_h$constants$12._memccpy$MH();
    }
    public static @C("void*") MemoryAddress _memccpy (@C("void*") Addressable _Dst, @C("void*") Addressable _Src, @C("int") int _Val, @C("size_t") long _MaxCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._memccpy$MH().invokeExact(_Dst.address(), _Src.address(), _Val, _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strcat$MH() {
        return cfapi_h$constants$12.strcat$MH();
    }
    public static @C("char*") MemoryAddress strcat (@C("char*") Addressable _Destination, @C("char*") Addressable _Source) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strcat$MH().invokeExact(_Destination.address(), _Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strcmp$MH() {
        return cfapi_h$constants$12.strcmp$MH();
    }
    public static @C("int") int strcmp (@C("char*") Addressable _Str1, @C("char*") Addressable _Str2) {
        try {
            return (int)cfapi_h$constants$12.strcmp$MH().invokeExact(_Str1.address(), _Str2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strcmpi$MH() {
        return cfapi_h$constants$12._strcmpi$MH();
    }
    public static @C("int") int _strcmpi (@C("char*") Addressable _String1, @C("char*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12._strcmpi$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strcoll$MH() {
        return cfapi_h$constants$12.strcoll$MH();
    }
    public static @C("int") int strcoll (@C("char*") Addressable _String1, @C("char*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12.strcoll$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strcoll_l$MH() {
        return cfapi_h$constants$12._strcoll_l$MH();
    }
    public static @C("int") int _strcoll_l (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._strcoll_l$MH().invokeExact(_String1.address(), _String2.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strcpy$MH() {
        return cfapi_h$constants$12.strcpy$MH();
    }
    public static @C("char*") MemoryAddress strcpy (@C("char*") Addressable _Destination, @C("char*") Addressable _Source) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strcpy$MH().invokeExact(_Destination.address(), _Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strcspn$MH() {
        return cfapi_h$constants$12.strcspn$MH();
    }
    public static @C("unsigned long long") long strcspn (@C("char*") Addressable _Str, @C("char*") Addressable _Control) {
        try {
            return (long)cfapi_h$constants$12.strcspn$MH().invokeExact(_Str.address(), _Control.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strdup$MH() {
        return cfapi_h$constants$12._strdup$MH();
    }
    public static @C("char*") MemoryAddress _strdup (@C("char*") Addressable _Source) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._strdup$MH().invokeExact(_Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strerror$MH() {
        return cfapi_h$constants$12._strerror$MH();
    }
    public static @C("char*") MemoryAddress _strerror (@C("char*") Addressable _ErrorMessage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._strerror$MH().invokeExact(_ErrorMessage.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strerror_s$MH() {
        return cfapi_h$constants$12._strerror_s$MH();
    }
    public static @C("errno_t") int _strerror_s (@C("char*") Addressable _Buffer, @C("size_t") long _SizeInBytes, @C("char*") Addressable _ErrorMessage) {
        try {
            return (int)cfapi_h$constants$12._strerror_s$MH().invokeExact(_Buffer.address(), _SizeInBytes, _ErrorMessage.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strerror$MH() {
        return cfapi_h$constants$12.strerror$MH();
    }
    public static @C("char*") MemoryAddress strerror (@C("int") int _ErrorMessage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strerror$MH().invokeExact(_ErrorMessage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _stricmp$MH() {
        return cfapi_h$constants$12._stricmp$MH();
    }
    public static @C("int") int _stricmp (@C("char*") Addressable _String1, @C("char*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12._stricmp$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _stricoll$MH() {
        return cfapi_h$constants$12._stricoll$MH();
    }
    public static @C("int") int _stricoll (@C("char*") Addressable _String1, @C("char*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12._stricoll$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _stricoll_l$MH() {
        return cfapi_h$constants$12._stricoll_l$MH();
    }
    public static @C("int") int _stricoll_l (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._stricoll_l$MH().invokeExact(_String1.address(), _String2.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _stricmp_l$MH() {
        return cfapi_h$constants$12._stricmp_l$MH();
    }
    public static @C("int") int _stricmp_l (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._stricmp_l$MH().invokeExact(_String1.address(), _String2.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strlen$MH() {
        return cfapi_h$constants$12.strlen$MH();
    }
    public static @C("unsigned long long") long strlen (@C("char*") Addressable _Str) {
        try {
            return (long)cfapi_h$constants$12.strlen$MH().invokeExact(_Str.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strlwr_s$MH() {
        return cfapi_h$constants$12._strlwr_s$MH();
    }
    public static @C("errno_t") int _strlwr_s (@C("char*") Addressable _String, @C("size_t") long _Size) {
        try {
            return (int)cfapi_h$constants$12._strlwr_s$MH().invokeExact(_String.address(), _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strlwr$MH() {
        return cfapi_h$constants$12._strlwr$MH();
    }
    public static @C("char*") MemoryAddress _strlwr (@C("char*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._strlwr$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strlwr_s_l$MH() {
        return cfapi_h$constants$12._strlwr_s_l$MH();
    }
    public static @C("errno_t") int _strlwr_s_l (@C("char*") Addressable _String, @C("size_t") long _Size, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._strlwr_s_l$MH().invokeExact(_String.address(), _Size, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strlwr_l$MH() {
        return cfapi_h$constants$12._strlwr_l$MH();
    }
    public static @C("char*") MemoryAddress _strlwr_l (@C("char*") Addressable _String, @C("_locale_t") Addressable _Locale) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._strlwr_l$MH().invokeExact(_String.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strncat$MH() {
        return cfapi_h$constants$12.strncat$MH();
    }
    public static @C("char*") MemoryAddress strncat (@C("char*") Addressable _Destination, @C("char*") Addressable _Source, @C("size_t") long _Count) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strncat$MH().invokeExact(_Destination.address(), _Source.address(), _Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strncmp$MH() {
        return cfapi_h$constants$12.strncmp$MH();
    }
    public static @C("int") int strncmp (@C("char*") Addressable _Str1, @C("char*") Addressable _Str2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12.strncmp$MH().invokeExact(_Str1.address(), _Str2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strnicmp$MH() {
        return cfapi_h$constants$12._strnicmp$MH();
    }
    public static @C("int") int _strnicmp (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12._strnicmp$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strnicmp_l$MH() {
        return cfapi_h$constants$12._strnicmp_l$MH();
    }
    public static @C("int") int _strnicmp_l (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("size_t") long _MaxCount, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._strnicmp_l$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strnicoll$MH() {
        return cfapi_h$constants$12._strnicoll$MH();
    }
    public static @C("int") int _strnicoll (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12._strnicoll$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strnicoll_l$MH() {
        return cfapi_h$constants$12._strnicoll_l$MH();
    }
    public static @C("int") int _strnicoll_l (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("size_t") long _MaxCount, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._strnicoll_l$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strncoll$MH() {
        return cfapi_h$constants$12._strncoll$MH();
    }
    public static @C("int") int _strncoll (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12._strncoll$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strncoll_l$MH() {
        return cfapi_h$constants$12._strncoll_l$MH();
    }
    public static @C("int") int _strncoll_l (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("size_t") long _MaxCount, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._strncoll_l$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __strncnt$MH() {
        return cfapi_h$constants$12.__strncnt$MH();
    }
    public static @C("size_t") long __strncnt (@C("char*") Addressable _String, @C("size_t") long _Count) {
        try {
            return (long)cfapi_h$constants$12.__strncnt$MH().invokeExact(_String.address(), _Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strncpy$MH() {
        return cfapi_h$constants$12.strncpy$MH();
    }
    public static @C("char*") MemoryAddress strncpy (@C("char*") Addressable _Destination, @C("char*") Addressable _Source, @C("size_t") long _Count) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strncpy$MH().invokeExact(_Destination.address(), _Source.address(), _Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strnlen$MH() {
        return cfapi_h$constants$12.strnlen$MH();
    }
    public static @C("size_t") long strnlen (@C("char*") Addressable _String, @C("size_t") long _MaxCount) {
        try {
            return (long)cfapi_h$constants$12.strnlen$MH().invokeExact(_String.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strnlen_s$MH() {
        return cfapi_h$constants$12.strnlen_s$MH();
    }
    public static @C("size_t") long strnlen_s (@C("char*") Addressable _String, @C("size_t") long _MaxCount) {
        try {
            return (long)cfapi_h$constants$12.strnlen_s$MH().invokeExact(_String.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strnset_s$MH() {
        return cfapi_h$constants$12._strnset_s$MH();
    }
    public static @C("errno_t") int _strnset_s (@C("char*") Addressable _String, @C("size_t") long _SizeInBytes, @C("int") int _Value, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12._strnset_s$MH().invokeExact(_String.address(), _SizeInBytes, _Value, _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strnset$MH() {
        return cfapi_h$constants$12._strnset$MH();
    }
    public static @C("char*") MemoryAddress _strnset (@C("char*") Addressable _Destination, @C("int") int _Value, @C("size_t") long _Count) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._strnset$MH().invokeExact(_Destination.address(), _Value, _Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strpbrk$MH() {
        return cfapi_h$constants$12.strpbrk$MH();
    }
    public static @C("char*") MemoryAddress strpbrk (@C("char*") Addressable _Str, @C("char*") Addressable _Control) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strpbrk$MH().invokeExact(_Str.address(), _Control.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strrev$MH() {
        return cfapi_h$constants$12._strrev$MH();
    }
    public static @C("char*") MemoryAddress _strrev (@C("char*") Addressable _Str) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._strrev$MH().invokeExact(_Str.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strset_s$MH() {
        return cfapi_h$constants$12._strset_s$MH();
    }
    public static @C("errno_t") int _strset_s (@C("char*") Addressable _Destination, @C("size_t") long _DestinationSize, @C("int") int _Value) {
        try {
            return (int)cfapi_h$constants$12._strset_s$MH().invokeExact(_Destination.address(), _DestinationSize, _Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strset$MH() {
        return cfapi_h$constants$12._strset$MH();
    }
    public static @C("char*") MemoryAddress _strset (@C("char*") Addressable _Destination, @C("int") int _Value) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._strset$MH().invokeExact(_Destination.address(), _Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strspn$MH() {
        return cfapi_h$constants$12.strspn$MH();
    }
    public static @C("unsigned long long") long strspn (@C("char*") Addressable _Str, @C("char*") Addressable _Control) {
        try {
            return (long)cfapi_h$constants$12.strspn$MH().invokeExact(_Str.address(), _Control.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strtok$MH() {
        return cfapi_h$constants$12.strtok$MH();
    }
    public static @C("char*") MemoryAddress strtok (@C("char*") Addressable _String, @C("char*") Addressable _Delimiter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strtok$MH().invokeExact(_String.address(), _Delimiter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strupr_s$MH() {
        return cfapi_h$constants$12._strupr_s$MH();
    }
    public static @C("errno_t") int _strupr_s (@C("char*") Addressable _String, @C("size_t") long _Size) {
        try {
            return (int)cfapi_h$constants$12._strupr_s$MH().invokeExact(_String.address(), _Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strupr$MH() {
        return cfapi_h$constants$12._strupr$MH();
    }
    public static @C("char*") MemoryAddress _strupr (@C("char*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._strupr$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strupr_s_l$MH() {
        return cfapi_h$constants$12._strupr_s_l$MH();
    }
    public static @C("errno_t") int _strupr_s_l (@C("char*") Addressable _String, @C("size_t") long _Size, @C("_locale_t") Addressable _Locale) {
        try {
            return (int)cfapi_h$constants$12._strupr_s_l$MH().invokeExact(_String.address(), _Size, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strupr_l$MH() {
        return cfapi_h$constants$12._strupr_l$MH();
    }
    public static @C("char*") MemoryAddress _strupr_l (@C("char*") Addressable _String, @C("_locale_t") Addressable _Locale) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._strupr_l$MH().invokeExact(_String.address(), _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strxfrm$MH() {
        return cfapi_h$constants$12.strxfrm$MH();
    }
    public static @C("unsigned long long") long strxfrm (@C("char*") Addressable _Destination, @C("char*") Addressable _Source, @C("size_t") long _MaxCount) {
        try {
            return (long)cfapi_h$constants$12.strxfrm$MH().invokeExact(_Destination.address(), _Source.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _strxfrm_l$MH() {
        return cfapi_h$constants$12._strxfrm_l$MH();
    }
    public static @C("size_t") long _strxfrm_l (@C("char*") Addressable _Destination, @C("char*") Addressable _Source, @C("size_t") long _MaxCount, @C("_locale_t") Addressable _Locale) {
        try {
            return (long)cfapi_h$constants$12._strxfrm_l$MH().invokeExact(_Destination.address(), _Source.address(), _MaxCount, _Locale.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strdup$MH() {
        return cfapi_h$constants$12.strdup$MH();
    }
    public static @C("char*") MemoryAddress strdup (@C("char*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strdup$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strcmpi$MH() {
        return cfapi_h$constants$12.strcmpi$MH();
    }
    public static @C("int") int strcmpi (@C("char*") Addressable _String1, @C("char*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12.strcmpi$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle stricmp$MH() {
        return cfapi_h$constants$12.stricmp$MH();
    }
    public static @C("int") int stricmp (@C("char*") Addressable _String1, @C("char*") Addressable _String2) {
        try {
            return (int)cfapi_h$constants$12.stricmp$MH().invokeExact(_String1.address(), _String2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strlwr$MH() {
        return cfapi_h$constants$12.strlwr$MH();
    }
    public static @C("char*") MemoryAddress strlwr (@C("char*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strlwr$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strnicmp$MH() {
        return cfapi_h$constants$12.strnicmp$MH();
    }
    public static @C("int") int strnicmp (@C("char*") Addressable _String1, @C("char*") Addressable _String2, @C("size_t") long _MaxCount) {
        try {
            return (int)cfapi_h$constants$12.strnicmp$MH().invokeExact(_String1.address(), _String2.address(), _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strnset$MH() {
        return cfapi_h$constants$12.strnset$MH();
    }
    public static @C("char*") MemoryAddress strnset (@C("char*") Addressable _String, @C("int") int _Value, @C("size_t") long _MaxCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strnset$MH().invokeExact(_String.address(), _Value, _MaxCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strrev$MH() {
        return cfapi_h$constants$12.strrev$MH();
    }
    public static @C("char*") MemoryAddress strrev (@C("char*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strrev$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strset$MH() {
        return cfapi_h$constants$12.strset$MH();
    }
    public static @C("char*") MemoryAddress strset (@C("char*") Addressable _String, @C("int") int _Value) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strset$MH().invokeExact(_String.address(), _Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle strupr$MH() {
        return cfapi_h$constants$12.strupr$MH();
    }
    public static @C("char*") MemoryAddress strupr (@C("char*") Addressable _String) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12.strupr$MH().invokeExact(_String.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _bittest$MH() {
        return cfapi_h$constants$12._bittest$MH();
    }
    public static @C("unsigned char") byte _bittest (@C("const LONG*") Addressable Base, @C("LONG") int Offset) {
        try {
            return (byte)cfapi_h$constants$12._bittest$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _bittestandcomplement$MH() {
        return cfapi_h$constants$12._bittestandcomplement$MH();
    }
    public static @C("unsigned char") byte _bittestandcomplement (@C("LONG*") Addressable Base, @C("LONG") int Offset) {
        try {
            return (byte)cfapi_h$constants$12._bittestandcomplement$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _bittestandset$MH() {
        return cfapi_h$constants$12._bittestandset$MH();
    }
    public static @C("unsigned char") byte _bittestandset (@C("LONG*") Addressable Base, @C("LONG") int Offset) {
        try {
            return (byte)cfapi_h$constants$12._bittestandset$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _bittestandreset$MH() {
        return cfapi_h$constants$12._bittestandreset$MH();
    }
    public static @C("unsigned char") byte _bittestandreset (@C("LONG*") Addressable Base, @C("LONG") int Offset) {
        try {
            return (byte)cfapi_h$constants$12._bittestandreset$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _interlockedbittestandset$MH() {
        return cfapi_h$constants$12._interlockedbittestandset$MH();
    }
    public static @C("unsigned char") byte _interlockedbittestandset (@C("volatile LONG*") Addressable Base, @C("LONG") int Offset) {
        try {
            return (byte)cfapi_h$constants$12._interlockedbittestandset$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _interlockedbittestandreset$MH() {
        return cfapi_h$constants$12._interlockedbittestandreset$MH();
    }
    public static @C("unsigned char") byte _interlockedbittestandreset (@C("volatile LONG*") Addressable Base, @C("LONG") int Offset) {
        try {
            return (byte)cfapi_h$constants$12._interlockedbittestandreset$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _bittest64$MH() {
        return cfapi_h$constants$12._bittest64$MH();
    }
    public static @C("unsigned char") byte _bittest64 (@C("const LONG64*") Addressable Base, @C("LONG64") long Offset) {
        try {
            return (byte)cfapi_h$constants$12._bittest64$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _bittestandcomplement64$MH() {
        return cfapi_h$constants$12._bittestandcomplement64$MH();
    }
    public static @C("unsigned char") byte _bittestandcomplement64 (@C("LONG64*") Addressable Base, @C("LONG64") long Offset) {
        try {
            return (byte)cfapi_h$constants$12._bittestandcomplement64$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _bittestandset64$MH() {
        return cfapi_h$constants$12._bittestandset64$MH();
    }
    public static @C("unsigned char") byte _bittestandset64 (@C("LONG64*") Addressable Base, @C("LONG64") long Offset) {
        try {
            return (byte)cfapi_h$constants$12._bittestandset64$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _bittestandreset64$MH() {
        return cfapi_h$constants$12._bittestandreset64$MH();
    }
    public static @C("unsigned char") byte _bittestandreset64 (@C("LONG64*") Addressable Base, @C("LONG64") long Offset) {
        try {
            return (byte)cfapi_h$constants$12._bittestandreset64$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _interlockedbittestandset64$MH() {
        return cfapi_h$constants$12._interlockedbittestandset64$MH();
    }
    public static @C("unsigned char") byte _interlockedbittestandset64 (@C("volatile LONG64*") Addressable Base, @C("LONG64") long Offset) {
        try {
            return (byte)cfapi_h$constants$12._interlockedbittestandset64$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _interlockedbittestandreset64$MH() {
        return cfapi_h$constants$12._interlockedbittestandreset64$MH();
    }
    public static @C("unsigned char") byte _interlockedbittestandreset64 (@C("volatile LONG64*") Addressable Base, @C("LONG64") long Offset) {
        try {
            return (byte)cfapi_h$constants$12._interlockedbittestandreset64$MH().invokeExact(Base.address(), Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _BitScanForward$MH() {
        return cfapi_h$constants$12._BitScanForward$MH();
    }
    public static @C("unsigned char") byte _BitScanForward (@C("DWORD*") Addressable Index, @C("DWORD") int Mask) {
        try {
            return (byte)cfapi_h$constants$12._BitScanForward$MH().invokeExact(Index.address(), Mask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _BitScanReverse$MH() {
        return cfapi_h$constants$12._BitScanReverse$MH();
    }
    public static @C("unsigned char") byte _BitScanReverse (@C("DWORD*") Addressable Index, @C("DWORD") int Mask) {
        try {
            return (byte)cfapi_h$constants$12._BitScanReverse$MH().invokeExact(Index.address(), Mask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _BitScanForward64$MH() {
        return cfapi_h$constants$12._BitScanForward64$MH();
    }
    public static @C("unsigned char") byte _BitScanForward64 (@C("DWORD*") Addressable Index, @C("DWORD64") long Mask) {
        try {
            return (byte)cfapi_h$constants$12._BitScanForward64$MH().invokeExact(Index.address(), Mask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _BitScanReverse64$MH() {
        return cfapi_h$constants$12._BitScanReverse64$MH();
    }
    public static @C("unsigned char") byte _BitScanReverse64 (@C("DWORD*") Addressable Index, @C("DWORD64") long Mask) {
        try {
            return (byte)cfapi_h$constants$12._BitScanReverse64$MH().invokeExact(Index.address(), Mask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedIncrement16$MH() {
        return cfapi_h$constants$12._InterlockedIncrement16$MH();
    }
    public static @C("short") short _InterlockedIncrement16 (@C("volatile SHORT*") Addressable Addend) {
        try {
            return (short)cfapi_h$constants$12._InterlockedIncrement16$MH().invokeExact(Addend.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedDecrement16$MH() {
        return cfapi_h$constants$12._InterlockedDecrement16$MH();
    }
    public static @C("short") short _InterlockedDecrement16 (@C("volatile SHORT*") Addressable Addend) {
        try {
            return (short)cfapi_h$constants$12._InterlockedDecrement16$MH().invokeExact(Addend.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedCompareExchange16$MH() {
        return cfapi_h$constants$12._InterlockedCompareExchange16$MH();
    }
    public static @C("short") short _InterlockedCompareExchange16 (@C("volatile SHORT*") Addressable Destination, @C("SHORT") short ExChange, @C("SHORT") short Comperand) {
        try {
            return (short)cfapi_h$constants$12._InterlockedCompareExchange16$MH().invokeExact(Destination.address(), ExChange, Comperand);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedAnd$MH() {
        return cfapi_h$constants$12._InterlockedAnd$MH();
    }
    public static @C("long") int _InterlockedAnd (@C("volatile LONG*") Addressable Destination, @C("LONG") int Value) {
        try {
            return (int)cfapi_h$constants$12._InterlockedAnd$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedOr$MH() {
        return cfapi_h$constants$12._InterlockedOr$MH();
    }
    public static @C("long") int _InterlockedOr (@C("volatile LONG*") Addressable Destination, @C("LONG") int Value) {
        try {
            return (int)cfapi_h$constants$12._InterlockedOr$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedXor$MH() {
        return cfapi_h$constants$12._InterlockedXor$MH();
    }
    public static @C("long") int _InterlockedXor (@C("volatile LONG*") Addressable Destination, @C("LONG") int Value) {
        try {
            return (int)cfapi_h$constants$12._InterlockedXor$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedAnd64$MH() {
        return cfapi_h$constants$12._InterlockedAnd64$MH();
    }
    public static @C("long long") long _InterlockedAnd64 (@C("volatile LONG64*") Addressable Destination, @C("LONG64") long Value) {
        try {
            return (long)cfapi_h$constants$12._InterlockedAnd64$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedOr64$MH() {
        return cfapi_h$constants$12._InterlockedOr64$MH();
    }
    public static @C("long long") long _InterlockedOr64 (@C("volatile LONG64*") Addressable Destination, @C("LONG64") long Value) {
        try {
            return (long)cfapi_h$constants$12._InterlockedOr64$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedXor64$MH() {
        return cfapi_h$constants$12._InterlockedXor64$MH();
    }
    public static @C("long long") long _InterlockedXor64 (@C("volatile LONG64*") Addressable Destination, @C("LONG64") long Value) {
        try {
            return (long)cfapi_h$constants$12._InterlockedXor64$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedIncrement$MH() {
        return cfapi_h$constants$12._InterlockedIncrement$MH();
    }
    public static @C("long") int _InterlockedIncrement (@C("volatile LONG*") Addressable Addend) {
        try {
            return (int)cfapi_h$constants$12._InterlockedIncrement$MH().invokeExact(Addend.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedDecrement$MH() {
        return cfapi_h$constants$12._InterlockedDecrement$MH();
    }
    public static @C("long") int _InterlockedDecrement (@C("volatile LONG*") Addressable Addend) {
        try {
            return (int)cfapi_h$constants$12._InterlockedDecrement$MH().invokeExact(Addend.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedExchange$MH() {
        return cfapi_h$constants$12._InterlockedExchange$MH();
    }
    public static @C("long") int _InterlockedExchange (@C("volatile LONG*") Addressable Target, @C("LONG") int Value) {
        try {
            return (int)cfapi_h$constants$12._InterlockedExchange$MH().invokeExact(Target.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedExchangeAdd$MH() {
        return cfapi_h$constants$12._InterlockedExchangeAdd$MH();
    }
    public static @C("long") int _InterlockedExchangeAdd (@C("volatile LONG*") Addressable Addend, @C("LONG") int Value) {
        try {
            return (int)cfapi_h$constants$12._InterlockedExchangeAdd$MH().invokeExact(Addend.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InlineInterlockedAdd$MH() {
        return cfapi_h$constants$12._InlineInterlockedAdd$MH();
    }
    public static @C("LONG") int _InlineInterlockedAdd (@C("volatile LONG*") Addressable Addend, @C("LONG") int Value) {
        try {
            return (int)cfapi_h$constants$12._InlineInterlockedAdd$MH().invokeExact(Addend.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedCompareExchange$MH() {
        return cfapi_h$constants$12._InterlockedCompareExchange$MH();
    }
    public static @C("long") int _InterlockedCompareExchange (@C("volatile LONG*") Addressable Destination, @C("LONG") int ExChange, @C("LONG") int Comperand) {
        try {
            return (int)cfapi_h$constants$12._InterlockedCompareExchange$MH().invokeExact(Destination.address(), ExChange, Comperand);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedIncrement64$MH() {
        return cfapi_h$constants$12._InterlockedIncrement64$MH();
    }
    public static @C("long long") long _InterlockedIncrement64 (@C("volatile LONG64*") Addressable Addend) {
        try {
            return (long)cfapi_h$constants$12._InterlockedIncrement64$MH().invokeExact(Addend.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedDecrement64$MH() {
        return cfapi_h$constants$12._InterlockedDecrement64$MH();
    }
    public static @C("long long") long _InterlockedDecrement64 (@C("volatile LONG64*") Addressable Addend) {
        try {
            return (long)cfapi_h$constants$12._InterlockedDecrement64$MH().invokeExact(Addend.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedExchange64$MH() {
        return cfapi_h$constants$12._InterlockedExchange64$MH();
    }
    public static @C("long long") long _InterlockedExchange64 (@C("volatile LONG64*") Addressable Target, @C("LONG64") long Value) {
        try {
            return (long)cfapi_h$constants$12._InterlockedExchange64$MH().invokeExact(Target.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedExchangeAdd64$MH() {
        return cfapi_h$constants$12._InterlockedExchangeAdd64$MH();
    }
    public static @C("long long") long _InterlockedExchangeAdd64 (@C("volatile LONG64*") Addressable Addend, @C("LONG64") long Value) {
        try {
            return (long)cfapi_h$constants$12._InterlockedExchangeAdd64$MH().invokeExact(Addend.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InlineInterlockedAdd64$MH() {
        return cfapi_h$constants$12._InlineInterlockedAdd64$MH();
    }
    public static @C("LONG64") long _InlineInterlockedAdd64 (@C("volatile LONG64*") Addressable Addend, @C("LONG64") long Value) {
        try {
            return (long)cfapi_h$constants$12._InlineInterlockedAdd64$MH().invokeExact(Addend.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedCompareExchange64$MH() {
        return cfapi_h$constants$12._InterlockedCompareExchange64$MH();
    }
    public static @C("long long") long _InterlockedCompareExchange64 (@C("volatile LONG64*") Addressable Destination, @C("LONG64") long ExChange, @C("LONG64") long Comperand) {
        try {
            return (long)cfapi_h$constants$12._InterlockedCompareExchange64$MH().invokeExact(Destination.address(), ExChange, Comperand);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedCompareExchange128$MH() {
        return cfapi_h$constants$12._InterlockedCompareExchange128$MH();
    }
    public static @C("unsigned char") byte _InterlockedCompareExchange128 (@C("volatile LONG64*") Addressable Destination, @C("LONG64") long ExchangeHigh, @C("LONG64") long ExchangeLow, @C("LONG64*") Addressable ComparandResult) {
        try {
            return (byte)cfapi_h$constants$12._InterlockedCompareExchange128$MH().invokeExact(Destination.address(), ExchangeHigh, ExchangeLow, ComparandResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedCompareExchangePointer$MH() {
        return cfapi_h$constants$12._InterlockedCompareExchangePointer$MH();
    }
    public static @C("void*") MemoryAddress _InterlockedCompareExchangePointer (@C("volatile PVOID*") Addressable Destination, @C("PVOID") Addressable Exchange, @C("PVOID") Addressable Comperand) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._InterlockedCompareExchangePointer$MH().invokeExact(Destination.address(), Exchange.address(), Comperand.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedExchangePointer$MH() {
        return cfapi_h$constants$12._InterlockedExchangePointer$MH();
    }
    public static @C("void*") MemoryAddress _InterlockedExchangePointer (@C("volatile PVOID*") Addressable Target, @C("PVOID") Addressable Value) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$12._InterlockedExchangePointer$MH().invokeExact(Target.address(), Value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedExchange8$MH() {
        return cfapi_h$constants$12._InterlockedExchange8$MH();
    }
    public static @C("char") byte _InterlockedExchange8 (@C("volatile CHAR*") Addressable Target, @C("CHAR") byte Value) {
        try {
            return (byte)cfapi_h$constants$12._InterlockedExchange8$MH().invokeExact(Target.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedExchange16$MH() {
        return cfapi_h$constants$12._InterlockedExchange16$MH();
    }
    public static @C("short") short _InterlockedExchange16 (@C("volatile SHORT*") Addressable Destination, @C("SHORT") short ExChange) {
        try {
            return (short)cfapi_h$constants$12._InterlockedExchange16$MH().invokeExact(Destination.address(), ExChange);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedExchangeAdd8$MH() {
        return cfapi_h$constants$12._InterlockedExchangeAdd8$MH();
    }
    public static @C("char") byte _InterlockedExchangeAdd8 (@C("char*") Addressable _Addend, @C("char") byte _Value) {
        try {
            return (byte)cfapi_h$constants$12._InterlockedExchangeAdd8$MH().invokeExact(_Addend.address(), _Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedAnd8$MH() {
        return cfapi_h$constants$12._InterlockedAnd8$MH();
    }
    public static @C("char") byte _InterlockedAnd8 (@C("char*") Addressable Destination, @C("char") byte Value) {
        try {
            return (byte)cfapi_h$constants$12._InterlockedAnd8$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedOr8$MH() {
        return cfapi_h$constants$13._InterlockedOr8$MH();
    }
    public static @C("char") byte _InterlockedOr8 (@C("char*") Addressable Destination, @C("char") byte Value) {
        try {
            return (byte)cfapi_h$constants$13._InterlockedOr8$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedXor8$MH() {
        return cfapi_h$constants$13._InterlockedXor8$MH();
    }
    public static @C("char") byte _InterlockedXor8 (@C("char*") Addressable Destination, @C("char") byte Value) {
        try {
            return (byte)cfapi_h$constants$13._InterlockedXor8$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedAnd16$MH() {
        return cfapi_h$constants$13._InterlockedAnd16$MH();
    }
    public static @C("short") short _InterlockedAnd16 (@C("volatile SHORT*") Addressable Destination, @C("SHORT") short Value) {
        try {
            return (short)cfapi_h$constants$13._InterlockedAnd16$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedOr16$MH() {
        return cfapi_h$constants$13._InterlockedOr16$MH();
    }
    public static @C("short") short _InterlockedOr16 (@C("volatile SHORT*") Addressable Destination, @C("SHORT") short Value) {
        try {
            return (short)cfapi_h$constants$13._InterlockedOr16$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _InterlockedXor16$MH() {
        return cfapi_h$constants$13._InterlockedXor16$MH();
    }
    public static @C("short") short _InterlockedXor16 (@C("volatile SHORT*") Addressable Destination, @C("SHORT") short Value) {
        try {
            return (short)cfapi_h$constants$13._InterlockedXor16$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __cpuidex$MH() {
        return cfapi_h$constants$13.__cpuidex$MH();
    }
    public static void __cpuidex (@C("int[]") Addressable CPUInfo, @C("int") int Function, @C("int") int SubLeaf) {
        try {
            cfapi_h$constants$13.__cpuidex$MH().invokeExact(CPUInfo.address(), Function, SubLeaf);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _mm_clflush$MH() {
        return cfapi_h$constants$13._mm_clflush$MH();
    }
    public static void _mm_clflush (@C("void*") Addressable Address) {
        try {
            cfapi_h$constants$13._mm_clflush$MH().invokeExact(Address.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _ReadWriteBarrier$MH() {
        return cfapi_h$constants$13._ReadWriteBarrier$MH();
    }
    public static void _ReadWriteBarrier () {
        try {
            cfapi_h$constants$13._ReadWriteBarrier$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __faststorefence$MH() {
        return cfapi_h$constants$13.__faststorefence$MH();
    }
    public static void __faststorefence () {
        try {
            cfapi_h$constants$13.__faststorefence$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _mm_lfence$MH() {
        return cfapi_h$constants$13._mm_lfence$MH();
    }
    public static void _mm_lfence () {
        try {
            cfapi_h$constants$13._mm_lfence$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _mm_mfence$MH() {
        return cfapi_h$constants$13._mm_mfence$MH();
    }
    public static void _mm_mfence () {
        try {
            cfapi_h$constants$13._mm_mfence$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _mm_sfence$MH() {
        return cfapi_h$constants$13._mm_sfence$MH();
    }
    public static void _mm_sfence () {
        try {
            cfapi_h$constants$13._mm_sfence$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _mm_pause$MH() {
        return cfapi_h$constants$13._mm_pause$MH();
    }
    public static void _mm_pause () {
        try {
            cfapi_h$constants$13._mm_pause$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _mm_prefetch$MH() {
        return cfapi_h$constants$13._mm_prefetch$MH();
    }
    public static void _mm_prefetch (@C("const CHAR*") Addressable a, @C("int") int sel) {
        try {
            cfapi_h$constants$13._mm_prefetch$MH().invokeExact(a.address(), sel);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _m_prefetchw$MH() {
        return cfapi_h$constants$13._m_prefetchw$MH();
    }
    public static void _m_prefetchw (@C("void*") Addressable Source) {
        try {
            cfapi_h$constants$13._m_prefetchw$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _mm_getcsr$MH() {
        return cfapi_h$constants$13._mm_getcsr$MH();
    }
    public static @C("unsigned int") int _mm_getcsr () {
        try {
            return (int)cfapi_h$constants$13._mm_getcsr$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _mm_setcsr$MH() {
        return cfapi_h$constants$13._mm_setcsr$MH();
    }
    public static void _mm_setcsr (@C("unsigned int") int MxCsr) {
        try {
            cfapi_h$constants$13._mm_setcsr$MH().invokeExact(MxCsr);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __getcallerseflags$MH() {
        return cfapi_h$constants$13.__getcallerseflags$MH();
    }
    public static @C("unsigned int") int __getcallerseflags () {
        try {
            return (int)cfapi_h$constants$13.__getcallerseflags$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __segmentlimit$MH() {
        return cfapi_h$constants$13.__segmentlimit$MH();
    }
    public static @C("DWORD") int __segmentlimit (@C("DWORD") int Selector) {
        try {
            return (int)cfapi_h$constants$13.__segmentlimit$MH().invokeExact(Selector);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __readpmc$MH() {
        return cfapi_h$constants$13.__readpmc$MH();
    }
    public static @C("DWORD64") long __readpmc (@C("DWORD") int Counter) {
        try {
            return (long)cfapi_h$constants$13.__readpmc$MH().invokeExact(Counter);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __rdtsc$MH() {
        return cfapi_h$constants$13.__rdtsc$MH();
    }
    public static @C("unsigned long long") long __rdtsc () {
        try {
            return (long)cfapi_h$constants$13.__rdtsc$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __movsb$MH() {
        return cfapi_h$constants$13.__movsb$MH();
    }
    public static void __movsb (@C("PBYTE") Addressable Destination, @C("const BYTE*") Addressable Source, @C("SIZE_T") long Count) {
        try {
            cfapi_h$constants$13.__movsb$MH().invokeExact(Destination.address(), Source.address(), Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __movsw$MH() {
        return cfapi_h$constants$13.__movsw$MH();
    }
    public static void __movsw (@C("PWORD") Addressable Destination, @C("const WORD*") Addressable Source, @C("SIZE_T") long Count) {
        try {
            cfapi_h$constants$13.__movsw$MH().invokeExact(Destination.address(), Source.address(), Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __movsd$MH() {
        return cfapi_h$constants$13.__movsd$MH();
    }
    public static void __movsd (@C("PDWORD") Addressable Destination, @C("const DWORD*") Addressable Source, @C("SIZE_T") long Count) {
        try {
            cfapi_h$constants$13.__movsd$MH().invokeExact(Destination.address(), Source.address(), Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __movsq$MH() {
        return cfapi_h$constants$13.__movsq$MH();
    }
    public static void __movsq (@C("PDWORD64") Addressable Destination, @C("const DWORD64*") Addressable Source, @C("SIZE_T") long Count) {
        try {
            cfapi_h$constants$13.__movsq$MH().invokeExact(Destination.address(), Source.address(), Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __stosb$MH() {
        return cfapi_h$constants$13.__stosb$MH();
    }
    public static void __stosb (@C("PBYTE") Addressable Destination, @C("BYTE") byte Value, @C("SIZE_T") long Count) {
        try {
            cfapi_h$constants$13.__stosb$MH().invokeExact(Destination.address(), Value, Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __stosw$MH() {
        return cfapi_h$constants$13.__stosw$MH();
    }
    public static void __stosw (@C("PWORD") Addressable Destination, @C("WORD") short Value, @C("SIZE_T") long Count) {
        try {
            cfapi_h$constants$13.__stosw$MH().invokeExact(Destination.address(), Value, Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __stosd$MH() {
        return cfapi_h$constants$13.__stosd$MH();
    }
    public static void __stosd (@C("PDWORD") Addressable Destination, @C("DWORD") int Value, @C("SIZE_T") long Count) {
        try {
            cfapi_h$constants$13.__stosd$MH().invokeExact(Destination.address(), Value, Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __stosq$MH() {
        return cfapi_h$constants$13.__stosq$MH();
    }
    public static void __stosq (@C("PDWORD64") Addressable Destination, @C("DWORD64") long Value, @C("SIZE_T") long Count) {
        try {
            cfapi_h$constants$13.__stosq$MH().invokeExact(Destination.address(), Value, Count);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __mulh$MH() {
        return cfapi_h$constants$13.__mulh$MH();
    }
    public static @C("long long") long __mulh (@C("LONG64") long Multiplier, @C("LONG64") long Multiplicand) {
        try {
            return (long)cfapi_h$constants$13.__mulh$MH().invokeExact(Multiplier, Multiplicand);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __umulh$MH() {
        return cfapi_h$constants$13.__umulh$MH();
    }
    public static @C("unsigned long long") long __umulh (@C("DWORD64") long Multiplier, @C("DWORD64") long Multiplicand) {
        try {
            return (long)cfapi_h$constants$13.__umulh$MH().invokeExact(Multiplier, Multiplicand);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __popcnt64$MH() {
        return cfapi_h$constants$13.__popcnt64$MH();
    }
    public static @C("unsigned long long") long __popcnt64 (@C("DWORD64") long operand) {
        try {
            return (long)cfapi_h$constants$13.__popcnt64$MH().invokeExact(operand);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __shiftleft128$MH() {
        return cfapi_h$constants$13.__shiftleft128$MH();
    }
    public static @C("unsigned long long") long __shiftleft128 (@C("DWORD64") long LowPart, @C("DWORD64") long HighPart, @C("BYTE") byte Shift) {
        try {
            return (long)cfapi_h$constants$13.__shiftleft128$MH().invokeExact(LowPart, HighPart, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __shiftright128$MH() {
        return cfapi_h$constants$13.__shiftright128$MH();
    }
    public static @C("unsigned long long") long __shiftright128 (@C("DWORD64") long LowPart, @C("DWORD64") long HighPart, @C("BYTE") byte Shift) {
        try {
            return (long)cfapi_h$constants$13.__shiftright128$MH().invokeExact(LowPart, HighPart, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _mul128$MH() {
        return cfapi_h$constants$13._mul128$MH();
    }
    public static @C("long long") long _mul128 (@C("LONG64") long Multiplier, @C("LONG64") long Multiplicand, @C("LONG64*") Addressable HighProduct) {
        try {
            return (long)cfapi_h$constants$13._mul128$MH().invokeExact(Multiplier, Multiplicand, HighProduct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _umul128$MH() {
        return cfapi_h$constants$13._umul128$MH();
    }
    public static @C("unsigned long long") long _umul128 (@C("DWORD64") long Multiplier, @C("DWORD64") long Multiplicand, @C("DWORD64*") Addressable HighProduct) {
        try {
            return (long)cfapi_h$constants$13._umul128$MH().invokeExact(Multiplier, Multiplicand, HighProduct.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MultiplyExtract128$MH() {
        return cfapi_h$constants$13.MultiplyExtract128$MH();
    }
    public static @C("LONG64") long MultiplyExtract128 (@C("LONG64") long Multiplier, @C("LONG64") long Multiplicand, @C("BYTE") byte Shift) {
        try {
            return (long)cfapi_h$constants$13.MultiplyExtract128$MH().invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnsignedMultiplyExtract128$MH() {
        return cfapi_h$constants$13.UnsignedMultiplyExtract128$MH();
    }
    public static @C("DWORD64") long UnsignedMultiplyExtract128 (@C("DWORD64") long Multiplier, @C("DWORD64") long Multiplicand, @C("BYTE") byte Shift) {
        try {
            return (long)cfapi_h$constants$13.UnsignedMultiplyExtract128$MH().invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __readgsbyte$MH() {
        return cfapi_h$constants$13.__readgsbyte$MH();
    }
    public static @C("unsigned char") byte __readgsbyte (@C("DWORD") int Offset) {
        try {
            return (byte)cfapi_h$constants$13.__readgsbyte$MH().invokeExact(Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __readgsword$MH() {
        return cfapi_h$constants$13.__readgsword$MH();
    }
    public static @C("unsigned short") short __readgsword (@C("DWORD") int Offset) {
        try {
            return (short)cfapi_h$constants$13.__readgsword$MH().invokeExact(Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __readgsdword$MH() {
        return cfapi_h$constants$13.__readgsdword$MH();
    }
    public static @C("unsigned long") int __readgsdword (@C("DWORD") int Offset) {
        try {
            return (int)cfapi_h$constants$13.__readgsdword$MH().invokeExact(Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __readgsqword$MH() {
        return cfapi_h$constants$13.__readgsqword$MH();
    }
    public static @C("unsigned long long") long __readgsqword (@C("DWORD") int Offset) {
        try {
            return (long)cfapi_h$constants$13.__readgsqword$MH().invokeExact(Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __writegsbyte$MH() {
        return cfapi_h$constants$13.__writegsbyte$MH();
    }
    public static void __writegsbyte (@C("DWORD") int Offset, @C("BYTE") byte Data) {
        try {
            cfapi_h$constants$13.__writegsbyte$MH().invokeExact(Offset, Data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __writegsword$MH() {
        return cfapi_h$constants$13.__writegsword$MH();
    }
    public static void __writegsword (@C("DWORD") int Offset, @C("WORD") short Data) {
        try {
            cfapi_h$constants$13.__writegsword$MH().invokeExact(Offset, Data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __writegsdword$MH() {
        return cfapi_h$constants$13.__writegsdword$MH();
    }
    public static void __writegsdword (@C("DWORD") int Offset, @C("DWORD") int Data) {
        try {
            cfapi_h$constants$13.__writegsdword$MH().invokeExact(Offset, Data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __writegsqword$MH() {
        return cfapi_h$constants$13.__writegsqword$MH();
    }
    public static void __writegsqword (@C("DWORD") int Offset, @C("DWORD64") long Data) {
        try {
            cfapi_h$constants$13.__writegsqword$MH().invokeExact(Offset, Data);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __incgsbyte$MH() {
        return cfapi_h$constants$13.__incgsbyte$MH();
    }
    public static void __incgsbyte (@C("DWORD") int Offset) {
        try {
            cfapi_h$constants$13.__incgsbyte$MH().invokeExact(Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __addgsbyte$MH() {
        return cfapi_h$constants$13.__addgsbyte$MH();
    }
    public static void __addgsbyte (@C("DWORD") int Offset, @C("BYTE") byte Value) {
        try {
            cfapi_h$constants$13.__addgsbyte$MH().invokeExact(Offset, Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __incgsword$MH() {
        return cfapi_h$constants$13.__incgsword$MH();
    }
    public static void __incgsword (@C("DWORD") int Offset) {
        try {
            cfapi_h$constants$13.__incgsword$MH().invokeExact(Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __addgsword$MH() {
        return cfapi_h$constants$13.__addgsword$MH();
    }
    public static void __addgsword (@C("DWORD") int Offset, @C("WORD") short Value) {
        try {
            cfapi_h$constants$13.__addgsword$MH().invokeExact(Offset, Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __incgsdword$MH() {
        return cfapi_h$constants$13.__incgsdword$MH();
    }
    public static void __incgsdword (@C("DWORD") int Offset) {
        try {
            cfapi_h$constants$13.__incgsdword$MH().invokeExact(Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __addgsdword$MH() {
        return cfapi_h$constants$13.__addgsdword$MH();
    }
    public static void __addgsdword (@C("DWORD") int Offset, @C("DWORD") int Value) {
        try {
            cfapi_h$constants$13.__addgsdword$MH().invokeExact(Offset, Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __incgsqword$MH() {
        return cfapi_h$constants$13.__incgsqword$MH();
    }
    public static void __incgsqword (@C("DWORD") int Offset) {
        try {
            cfapi_h$constants$13.__incgsqword$MH().invokeExact(Offset);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __addgsqword$MH() {
        return cfapi_h$constants$13.__addgsqword$MH();
    }
    public static void __addgsqword (@C("DWORD") int Offset, @C("DWORD64") long Value) {
        try {
            cfapi_h$constants$13.__addgsqword$MH().invokeExact(Offset, Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle __int2c$MH() {
        return cfapi_h$constants$13.__int2c$MH();
    }
    public static void __int2c () {
        try {
            cfapi_h$constants$13.__int2c$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadAcquire8$MH() {
        return cfapi_h$constants$13.ReadAcquire8$MH();
    }
    public static @C("CHAR") byte ReadAcquire8 (@C("const volatile CHAR*") Addressable Source) {
        try {
            return (byte)cfapi_h$constants$13.ReadAcquire8$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadNoFence8$MH() {
        return cfapi_h$constants$13.ReadNoFence8$MH();
    }
    public static @C("CHAR") byte ReadNoFence8 (@C("const volatile CHAR*") Addressable Source) {
        try {
            return (byte)cfapi_h$constants$13.ReadNoFence8$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteRelease8$MH() {
        return cfapi_h$constants$13.WriteRelease8$MH();
    }
    public static void WriteRelease8 (@C("volatile CHAR*") Addressable Destination, @C("CHAR") byte Value) {
        try {
            cfapi_h$constants$13.WriteRelease8$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteNoFence8$MH() {
        return cfapi_h$constants$13.WriteNoFence8$MH();
    }
    public static void WriteNoFence8 (@C("volatile CHAR*") Addressable Destination, @C("CHAR") byte Value) {
        try {
            cfapi_h$constants$13.WriteNoFence8$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadAcquire16$MH() {
        return cfapi_h$constants$13.ReadAcquire16$MH();
    }
    public static @C("SHORT") short ReadAcquire16 (@C("const volatile SHORT*") Addressable Source) {
        try {
            return (short)cfapi_h$constants$13.ReadAcquire16$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadNoFence16$MH() {
        return cfapi_h$constants$13.ReadNoFence16$MH();
    }
    public static @C("SHORT") short ReadNoFence16 (@C("const volatile SHORT*") Addressable Source) {
        try {
            return (short)cfapi_h$constants$13.ReadNoFence16$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteRelease16$MH() {
        return cfapi_h$constants$13.WriteRelease16$MH();
    }
    public static void WriteRelease16 (@C("volatile SHORT*") Addressable Destination, @C("SHORT") short Value) {
        try {
            cfapi_h$constants$13.WriteRelease16$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteNoFence16$MH() {
        return cfapi_h$constants$13.WriteNoFence16$MH();
    }
    public static void WriteNoFence16 (@C("volatile SHORT*") Addressable Destination, @C("SHORT") short Value) {
        try {
            cfapi_h$constants$13.WriteNoFence16$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadAcquire$MH() {
        return cfapi_h$constants$13.ReadAcquire$MH();
    }
    public static @C("LONG") int ReadAcquire (@C("const volatile LONG*") Addressable Source) {
        try {
            return (int)cfapi_h$constants$13.ReadAcquire$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadNoFence$MH() {
        return cfapi_h$constants$13.ReadNoFence$MH();
    }
    public static @C("LONG") int ReadNoFence (@C("const volatile LONG*") Addressable Source) {
        try {
            return (int)cfapi_h$constants$13.ReadNoFence$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteRelease$MH() {
        return cfapi_h$constants$13.WriteRelease$MH();
    }
    public static void WriteRelease (@C("volatile LONG*") Addressable Destination, @C("LONG") int Value) {
        try {
            cfapi_h$constants$13.WriteRelease$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteNoFence$MH() {
        return cfapi_h$constants$13.WriteNoFence$MH();
    }
    public static void WriteNoFence (@C("volatile LONG*") Addressable Destination, @C("LONG") int Value) {
        try {
            cfapi_h$constants$13.WriteNoFence$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadAcquire64$MH() {
        return cfapi_h$constants$13.ReadAcquire64$MH();
    }
    public static @C("LONG64") long ReadAcquire64 (@C("const volatile LONG64*") Addressable Source) {
        try {
            return (long)cfapi_h$constants$13.ReadAcquire64$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadNoFence64$MH() {
        return cfapi_h$constants$13.ReadNoFence64$MH();
    }
    public static @C("LONG64") long ReadNoFence64 (@C("const volatile LONG64*") Addressable Source) {
        try {
            return (long)cfapi_h$constants$13.ReadNoFence64$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteRelease64$MH() {
        return cfapi_h$constants$13.WriteRelease64$MH();
    }
    public static void WriteRelease64 (@C("volatile LONG64*") Addressable Destination, @C("LONG64") long Value) {
        try {
            cfapi_h$constants$13.WriteRelease64$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteNoFence64$MH() {
        return cfapi_h$constants$13.WriteNoFence64$MH();
    }
    public static void WriteNoFence64 (@C("volatile LONG64*") Addressable Destination, @C("LONG64") long Value) {
        try {
            cfapi_h$constants$13.WriteNoFence64$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadRaw8$MH() {
        return cfapi_h$constants$13.ReadRaw8$MH();
    }
    public static @C("CHAR") byte ReadRaw8 (@C("const volatile CHAR*") Addressable Source) {
        try {
            return (byte)cfapi_h$constants$13.ReadRaw8$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteRaw8$MH() {
        return cfapi_h$constants$13.WriteRaw8$MH();
    }
    public static void WriteRaw8 (@C("volatile CHAR*") Addressable Destination, @C("CHAR") byte Value) {
        try {
            cfapi_h$constants$13.WriteRaw8$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadRaw16$MH() {
        return cfapi_h$constants$13.ReadRaw16$MH();
    }
    public static @C("SHORT") short ReadRaw16 (@C("const volatile SHORT*") Addressable Source) {
        try {
            return (short)cfapi_h$constants$13.ReadRaw16$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteRaw16$MH() {
        return cfapi_h$constants$13.WriteRaw16$MH();
    }
    public static void WriteRaw16 (@C("volatile SHORT*") Addressable Destination, @C("SHORT") short Value) {
        try {
            cfapi_h$constants$13.WriteRaw16$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadRaw$MH() {
        return cfapi_h$constants$13.ReadRaw$MH();
    }
    public static @C("LONG") int ReadRaw (@C("const volatile LONG*") Addressable Source) {
        try {
            return (int)cfapi_h$constants$13.ReadRaw$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteRaw$MH() {
        return cfapi_h$constants$13.WriteRaw$MH();
    }
    public static void WriteRaw (@C("volatile LONG*") Addressable Destination, @C("LONG") int Value) {
        try {
            cfapi_h$constants$13.WriteRaw$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadRaw64$MH() {
        return cfapi_h$constants$13.ReadRaw64$MH();
    }
    public static @C("LONG64") long ReadRaw64 (@C("const volatile LONG64*") Addressable Source) {
        try {
            return (long)cfapi_h$constants$13.ReadRaw64$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteRaw64$MH() {
        return cfapi_h$constants$13.WriteRaw64$MH();
    }
    public static void WriteRaw64 (@C("volatile LONG64*") Addressable Destination, @C("LONG64") long Value) {
        try {
            cfapi_h$constants$13.WriteRaw64$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadUCharAcquire$MH() {
        return cfapi_h$constants$13.ReadUCharAcquire$MH();
    }
    public static @C("BYTE") byte ReadUCharAcquire (@C("const volatile BYTE*") Addressable Source) {
        try {
            return (byte)cfapi_h$constants$13.ReadUCharAcquire$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadUCharNoFence$MH() {
        return cfapi_h$constants$13.ReadUCharNoFence$MH();
    }
    public static @C("BYTE") byte ReadUCharNoFence (@C("const volatile BYTE*") Addressable Source) {
        try {
            return (byte)cfapi_h$constants$13.ReadUCharNoFence$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadBooleanAcquire$MH() {
        return cfapi_h$constants$13.ReadBooleanAcquire$MH();
    }
    public static @C("BYTE") byte ReadBooleanAcquire (@C("const volatile BOOLEAN*") Addressable Source) {
        try {
            return (byte)cfapi_h$constants$13.ReadBooleanAcquire$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadBooleanNoFence$MH() {
        return cfapi_h$constants$13.ReadBooleanNoFence$MH();
    }
    public static @C("BYTE") byte ReadBooleanNoFence (@C("const volatile BOOLEAN*") Addressable Source) {
        try {
            return (byte)cfapi_h$constants$13.ReadBooleanNoFence$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadUCharRaw$MH() {
        return cfapi_h$constants$13.ReadUCharRaw$MH();
    }
    public static @C("BYTE") byte ReadUCharRaw (@C("const volatile BYTE*") Addressable Source) {
        try {
            return (byte)cfapi_h$constants$13.ReadUCharRaw$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteUCharRelease$MH() {
        return cfapi_h$constants$13.WriteUCharRelease$MH();
    }
    public static void WriteUCharRelease (@C("volatile BYTE*") Addressable Destination, @C("BYTE") byte Value) {
        try {
            cfapi_h$constants$13.WriteUCharRelease$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteUCharNoFence$MH() {
        return cfapi_h$constants$13.WriteUCharNoFence$MH();
    }
    public static void WriteUCharNoFence (@C("volatile BYTE*") Addressable Destination, @C("BYTE") byte Value) {
        try {
            cfapi_h$constants$13.WriteUCharNoFence$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteBooleanRelease$MH() {
        return cfapi_h$constants$13.WriteBooleanRelease$MH();
    }
    public static void WriteBooleanRelease (@C("volatile BOOLEAN*") Addressable Destination, @C("BOOLEAN") byte Value) {
        try {
            cfapi_h$constants$13.WriteBooleanRelease$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteBooleanNoFence$MH() {
        return cfapi_h$constants$13.WriteBooleanNoFence$MH();
    }
    public static void WriteBooleanNoFence (@C("volatile BOOLEAN*") Addressable Destination, @C("BOOLEAN") byte Value) {
        try {
            cfapi_h$constants$13.WriteBooleanNoFence$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteUCharRaw$MH() {
        return cfapi_h$constants$13.WriteUCharRaw$MH();
    }
    public static void WriteUCharRaw (@C("volatile BYTE*") Addressable Destination, @C("BYTE") byte Value) {
        try {
            cfapi_h$constants$13.WriteUCharRaw$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadUShortAcquire$MH() {
        return cfapi_h$constants$13.ReadUShortAcquire$MH();
    }
    public static @C("WORD") short ReadUShortAcquire (@C("const volatile WORD*") Addressable Source) {
        try {
            return (short)cfapi_h$constants$13.ReadUShortAcquire$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadUShortNoFence$MH() {
        return cfapi_h$constants$13.ReadUShortNoFence$MH();
    }
    public static @C("WORD") short ReadUShortNoFence (@C("const volatile WORD*") Addressable Source) {
        try {
            return (short)cfapi_h$constants$13.ReadUShortNoFence$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadUShortRaw$MH() {
        return cfapi_h$constants$13.ReadUShortRaw$MH();
    }
    public static @C("WORD") short ReadUShortRaw (@C("const volatile WORD*") Addressable Source) {
        try {
            return (short)cfapi_h$constants$13.ReadUShortRaw$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteUShortRelease$MH() {
        return cfapi_h$constants$13.WriteUShortRelease$MH();
    }
    public static void WriteUShortRelease (@C("volatile WORD*") Addressable Destination, @C("WORD") short Value) {
        try {
            cfapi_h$constants$13.WriteUShortRelease$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteUShortNoFence$MH() {
        return cfapi_h$constants$13.WriteUShortNoFence$MH();
    }
    public static void WriteUShortNoFence (@C("volatile WORD*") Addressable Destination, @C("WORD") short Value) {
        try {
            cfapi_h$constants$13.WriteUShortNoFence$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteUShortRaw$MH() {
        return cfapi_h$constants$13.WriteUShortRaw$MH();
    }
    public static void WriteUShortRaw (@C("volatile WORD*") Addressable Destination, @C("WORD") short Value) {
        try {
            cfapi_h$constants$13.WriteUShortRaw$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadULongAcquire$MH() {
        return cfapi_h$constants$13.ReadULongAcquire$MH();
    }
    public static @C("DWORD") int ReadULongAcquire (@C("const volatile DWORD*") Addressable Source) {
        try {
            return (int)cfapi_h$constants$13.ReadULongAcquire$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadULongNoFence$MH() {
        return cfapi_h$constants$13.ReadULongNoFence$MH();
    }
    public static @C("DWORD") int ReadULongNoFence (@C("const volatile DWORD*") Addressable Source) {
        try {
            return (int)cfapi_h$constants$13.ReadULongNoFence$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadULongRaw$MH() {
        return cfapi_h$constants$13.ReadULongRaw$MH();
    }
    public static @C("DWORD") int ReadULongRaw (@C("const volatile DWORD*") Addressable Source) {
        try {
            return (int)cfapi_h$constants$13.ReadULongRaw$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteULongRelease$MH() {
        return cfapi_h$constants$13.WriteULongRelease$MH();
    }
    public static void WriteULongRelease (@C("volatile DWORD*") Addressable Destination, @C("DWORD") int Value) {
        try {
            cfapi_h$constants$13.WriteULongRelease$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteULongNoFence$MH() {
        return cfapi_h$constants$13.WriteULongNoFence$MH();
    }
    public static void WriteULongNoFence (@C("volatile DWORD*") Addressable Destination, @C("DWORD") int Value) {
        try {
            cfapi_h$constants$13.WriteULongNoFence$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteULongRaw$MH() {
        return cfapi_h$constants$13.WriteULongRaw$MH();
    }
    public static void WriteULongRaw (@C("volatile DWORD*") Addressable Destination, @C("DWORD") int Value) {
        try {
            cfapi_h$constants$13.WriteULongRaw$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadULong64Acquire$MH() {
        return cfapi_h$constants$13.ReadULong64Acquire$MH();
    }
    public static @C("DWORD64") long ReadULong64Acquire (@C("const volatile DWORD64*") Addressable Source) {
        try {
            return (long)cfapi_h$constants$13.ReadULong64Acquire$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadULong64NoFence$MH() {
        return cfapi_h$constants$13.ReadULong64NoFence$MH();
    }
    public static @C("DWORD64") long ReadULong64NoFence (@C("const volatile DWORD64*") Addressable Source) {
        try {
            return (long)cfapi_h$constants$13.ReadULong64NoFence$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadULong64Raw$MH() {
        return cfapi_h$constants$13.ReadULong64Raw$MH();
    }
    public static @C("DWORD64") long ReadULong64Raw (@C("const volatile DWORD64*") Addressable Source) {
        try {
            return (long)cfapi_h$constants$13.ReadULong64Raw$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteULong64Release$MH() {
        return cfapi_h$constants$13.WriteULong64Release$MH();
    }
    public static void WriteULong64Release (@C("volatile DWORD64*") Addressable Destination, @C("DWORD64") long Value) {
        try {
            cfapi_h$constants$13.WriteULong64Release$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteULong64NoFence$MH() {
        return cfapi_h$constants$13.WriteULong64NoFence$MH();
    }
    public static void WriteULong64NoFence (@C("volatile DWORD64*") Addressable Destination, @C("DWORD64") long Value) {
        try {
            cfapi_h$constants$13.WriteULong64NoFence$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteULong64Raw$MH() {
        return cfapi_h$constants$13.WriteULong64Raw$MH();
    }
    public static void WriteULong64Raw (@C("volatile DWORD64*") Addressable Destination, @C("DWORD64") long Value) {
        try {
            cfapi_h$constants$13.WriteULong64Raw$MH().invokeExact(Destination.address(), Value);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadPointerAcquire$MH() {
        return cfapi_h$constants$13.ReadPointerAcquire$MH();
    }
    public static @C("PVOID") MemoryAddress ReadPointerAcquire (@C("const volatile PVOID*") Addressable Source) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$13.ReadPointerAcquire$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadPointerNoFence$MH() {
        return cfapi_h$constants$13.ReadPointerNoFence$MH();
    }
    public static @C("PVOID") MemoryAddress ReadPointerNoFence (@C("const volatile PVOID*") Addressable Source) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$13.ReadPointerNoFence$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadPointerRaw$MH() {
        return cfapi_h$constants$13.ReadPointerRaw$MH();
    }
    public static @C("PVOID") MemoryAddress ReadPointerRaw (@C("const volatile PVOID*") Addressable Source) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$13.ReadPointerRaw$MH().invokeExact(Source.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePointerRelease$MH() {
        return cfapi_h$constants$13.WritePointerRelease$MH();
    }
    public static void WritePointerRelease (@C("volatile PVOID*") Addressable Destination, @C("PVOID") Addressable Value) {
        try {
            cfapi_h$constants$13.WritePointerRelease$MH().invokeExact(Destination.address(), Value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePointerNoFence$MH() {
        return cfapi_h$constants$13.WritePointerNoFence$MH();
    }
    public static void WritePointerNoFence (@C("volatile PVOID*") Addressable Destination, @C("PVOID") Addressable Value) {
        try {
            cfapi_h$constants$13.WritePointerNoFence$MH().invokeExact(Destination.address(), Value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePointerRaw$MH() {
        return cfapi_h$constants$13.WritePointerRaw$MH();
    }
    public static void WritePointerRaw (@C("volatile PVOID*") Addressable Destination, @C("PVOID") Addressable Value) {
        try {
            cfapi_h$constants$13.WritePointerRaw$MH().invokeExact(Destination.address(), Value.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int SidTypeUser() {
        return cfapi_h$constants$14.SidTypeUser();
    }
    public static @C("int") int SidTypeGroup() {
        return cfapi_h$constants$14.SidTypeGroup();
    }
    public static @C("int") int SidTypeDomain() {
        return cfapi_h$constants$14.SidTypeDomain();
    }
    public static @C("int") int SidTypeAlias() {
        return cfapi_h$constants$14.SidTypeAlias();
    }
    public static @C("int") int SidTypeWellKnownGroup() {
        return cfapi_h$constants$14.SidTypeWellKnownGroup();
    }
    public static @C("int") int SidTypeDeletedAccount() {
        return cfapi_h$constants$14.SidTypeDeletedAccount();
    }
    public static @C("int") int SidTypeInvalid() {
        return cfapi_h$constants$14.SidTypeInvalid();
    }
    public static @C("int") int SidTypeUnknown() {
        return cfapi_h$constants$14.SidTypeUnknown();
    }
    public static @C("int") int SidTypeComputer() {
        return cfapi_h$constants$14.SidTypeComputer();
    }
    public static @C("int") int SidTypeLabel() {
        return cfapi_h$constants$14.SidTypeLabel();
    }
    public static @C("int") int SidTypeLogonSession() {
        return cfapi_h$constants$14.SidTypeLogonSession();
    }
    public static @C("int") int WinNullSid() {
        return cfapi_h$constants$14.WinNullSid();
    }
    public static @C("int") int WinWorldSid() {
        return cfapi_h$constants$14.WinWorldSid();
    }
    public static @C("int") int WinLocalSid() {
        return cfapi_h$constants$14.WinLocalSid();
    }
    public static @C("int") int WinCreatorOwnerSid() {
        return cfapi_h$constants$14.WinCreatorOwnerSid();
    }
    public static @C("int") int WinCreatorGroupSid() {
        return cfapi_h$constants$14.WinCreatorGroupSid();
    }
    public static @C("int") int WinCreatorOwnerServerSid() {
        return cfapi_h$constants$14.WinCreatorOwnerServerSid();
    }
    public static @C("int") int WinCreatorGroupServerSid() {
        return cfapi_h$constants$14.WinCreatorGroupServerSid();
    }
    public static @C("int") int WinNtAuthoritySid() {
        return cfapi_h$constants$14.WinNtAuthoritySid();
    }
    public static @C("int") int WinDialupSid() {
        return cfapi_h$constants$14.WinDialupSid();
    }
    public static @C("int") int WinNetworkSid() {
        return cfapi_h$constants$14.WinNetworkSid();
    }
    public static @C("int") int WinBatchSid() {
        return cfapi_h$constants$14.WinBatchSid();
    }
    public static @C("int") int WinInteractiveSid() {
        return cfapi_h$constants$14.WinInteractiveSid();
    }
    public static @C("int") int WinServiceSid() {
        return cfapi_h$constants$14.WinServiceSid();
    }
    public static @C("int") int WinAnonymousSid() {
        return cfapi_h$constants$14.WinAnonymousSid();
    }
    public static @C("int") int WinProxySid() {
        return cfapi_h$constants$14.WinProxySid();
    }
    public static @C("int") int WinEnterpriseControllersSid() {
        return cfapi_h$constants$14.WinEnterpriseControllersSid();
    }
    public static @C("int") int WinSelfSid() {
        return cfapi_h$constants$14.WinSelfSid();
    }
    public static @C("int") int WinAuthenticatedUserSid() {
        return cfapi_h$constants$14.WinAuthenticatedUserSid();
    }
    public static @C("int") int WinRestrictedCodeSid() {
        return cfapi_h$constants$14.WinRestrictedCodeSid();
    }
    public static @C("int") int WinTerminalServerSid() {
        return cfapi_h$constants$14.WinTerminalServerSid();
    }
    public static @C("int") int WinRemoteLogonIdSid() {
        return cfapi_h$constants$14.WinRemoteLogonIdSid();
    }
    public static @C("int") int WinLogonIdsSid() {
        return cfapi_h$constants$14.WinLogonIdsSid();
    }
    public static @C("int") int WinLocalSystemSid() {
        return cfapi_h$constants$14.WinLocalSystemSid();
    }
    public static @C("int") int WinLocalServiceSid() {
        return cfapi_h$constants$14.WinLocalServiceSid();
    }
    public static @C("int") int WinNetworkServiceSid() {
        return cfapi_h$constants$14.WinNetworkServiceSid();
    }
    public static @C("int") int WinBuiltinDomainSid() {
        return cfapi_h$constants$14.WinBuiltinDomainSid();
    }
    public static @C("int") int WinBuiltinAdministratorsSid() {
        return cfapi_h$constants$14.WinBuiltinAdministratorsSid();
    }
    public static @C("int") int WinBuiltinUsersSid() {
        return cfapi_h$constants$14.WinBuiltinUsersSid();
    }
    public static @C("int") int WinBuiltinGuestsSid() {
        return cfapi_h$constants$14.WinBuiltinGuestsSid();
    }
    public static @C("int") int WinBuiltinPowerUsersSid() {
        return cfapi_h$constants$14.WinBuiltinPowerUsersSid();
    }
    public static @C("int") int WinBuiltinAccountOperatorsSid() {
        return cfapi_h$constants$14.WinBuiltinAccountOperatorsSid();
    }
    public static @C("int") int WinBuiltinSystemOperatorsSid() {
        return cfapi_h$constants$14.WinBuiltinSystemOperatorsSid();
    }
    public static @C("int") int WinBuiltinPrintOperatorsSid() {
        return cfapi_h$constants$14.WinBuiltinPrintOperatorsSid();
    }
    public static @C("int") int WinBuiltinBackupOperatorsSid() {
        return cfapi_h$constants$14.WinBuiltinBackupOperatorsSid();
    }
    public static @C("int") int WinBuiltinReplicatorSid() {
        return cfapi_h$constants$14.WinBuiltinReplicatorSid();
    }
    public static @C("int") int WinBuiltinPreWindows2000CompatibleAccessSid() {
        return cfapi_h$constants$14.WinBuiltinPreWindows2000CompatibleAccessSid();
    }
    public static @C("int") int WinBuiltinRemoteDesktopUsersSid() {
        return cfapi_h$constants$14.WinBuiltinRemoteDesktopUsersSid();
    }
    public static @C("int") int WinBuiltinNetworkConfigurationOperatorsSid() {
        return cfapi_h$constants$14.WinBuiltinNetworkConfigurationOperatorsSid();
    }
    public static @C("int") int WinAccountAdministratorSid() {
        return cfapi_h$constants$14.WinAccountAdministratorSid();
    }
    public static @C("int") int WinAccountGuestSid() {
        return cfapi_h$constants$14.WinAccountGuestSid();
    }
    public static @C("int") int WinAccountKrbtgtSid() {
        return cfapi_h$constants$14.WinAccountKrbtgtSid();
    }
    public static @C("int") int WinAccountDomainAdminsSid() {
        return cfapi_h$constants$14.WinAccountDomainAdminsSid();
    }
    public static @C("int") int WinAccountDomainUsersSid() {
        return cfapi_h$constants$14.WinAccountDomainUsersSid();
    }
    public static @C("int") int WinAccountDomainGuestsSid() {
        return cfapi_h$constants$14.WinAccountDomainGuestsSid();
    }
    public static @C("int") int WinAccountComputersSid() {
        return cfapi_h$constants$14.WinAccountComputersSid();
    }
    public static @C("int") int WinAccountControllersSid() {
        return cfapi_h$constants$14.WinAccountControllersSid();
    }
    public static @C("int") int WinAccountCertAdminsSid() {
        return cfapi_h$constants$14.WinAccountCertAdminsSid();
    }
    public static @C("int") int WinAccountSchemaAdminsSid() {
        return cfapi_h$constants$14.WinAccountSchemaAdminsSid();
    }
    public static @C("int") int WinAccountEnterpriseAdminsSid() {
        return cfapi_h$constants$14.WinAccountEnterpriseAdminsSid();
    }
    public static @C("int") int WinAccountPolicyAdminsSid() {
        return cfapi_h$constants$14.WinAccountPolicyAdminsSid();
    }
    public static @C("int") int WinAccountRasAndIasServersSid() {
        return cfapi_h$constants$14.WinAccountRasAndIasServersSid();
    }
    public static @C("int") int WinNTLMAuthenticationSid() {
        return cfapi_h$constants$14.WinNTLMAuthenticationSid();
    }
    public static @C("int") int WinDigestAuthenticationSid() {
        return cfapi_h$constants$14.WinDigestAuthenticationSid();
    }
    public static @C("int") int WinSChannelAuthenticationSid() {
        return cfapi_h$constants$14.WinSChannelAuthenticationSid();
    }
    public static @C("int") int WinThisOrganizationSid() {
        return cfapi_h$constants$14.WinThisOrganizationSid();
    }
    public static @C("int") int WinOtherOrganizationSid() {
        return cfapi_h$constants$14.WinOtherOrganizationSid();
    }
    public static @C("int") int WinBuiltinIncomingForestTrustBuildersSid() {
        return cfapi_h$constants$14.WinBuiltinIncomingForestTrustBuildersSid();
    }
    public static @C("int") int WinBuiltinPerfMonitoringUsersSid() {
        return cfapi_h$constants$14.WinBuiltinPerfMonitoringUsersSid();
    }
    public static @C("int") int WinBuiltinPerfLoggingUsersSid() {
        return cfapi_h$constants$14.WinBuiltinPerfLoggingUsersSid();
    }
    public static @C("int") int WinBuiltinAuthorizationAccessSid() {
        return cfapi_h$constants$14.WinBuiltinAuthorizationAccessSid();
    }
    public static @C("int") int WinBuiltinTerminalServerLicenseServersSid() {
        return cfapi_h$constants$14.WinBuiltinTerminalServerLicenseServersSid();
    }
    public static @C("int") int WinBuiltinDCOMUsersSid() {
        return cfapi_h$constants$14.WinBuiltinDCOMUsersSid();
    }
    public static @C("int") int WinBuiltinIUsersSid() {
        return cfapi_h$constants$14.WinBuiltinIUsersSid();
    }
    public static @C("int") int WinIUserSid() {
        return cfapi_h$constants$14.WinIUserSid();
    }
    public static @C("int") int WinBuiltinCryptoOperatorsSid() {
        return cfapi_h$constants$14.WinBuiltinCryptoOperatorsSid();
    }
    public static @C("int") int WinUntrustedLabelSid() {
        return cfapi_h$constants$14.WinUntrustedLabelSid();
    }
    public static @C("int") int WinLowLabelSid() {
        return cfapi_h$constants$14.WinLowLabelSid();
    }
    public static @C("int") int WinMediumLabelSid() {
        return cfapi_h$constants$14.WinMediumLabelSid();
    }
    public static @C("int") int WinHighLabelSid() {
        return cfapi_h$constants$14.WinHighLabelSid();
    }
    public static @C("int") int WinSystemLabelSid() {
        return cfapi_h$constants$14.WinSystemLabelSid();
    }
}


