// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$14 extends cfapi_h$13 {

    /* package-private */ cfapi_h$14() {}
    public static  MethodHandle UnmapViewOfFile2$MH() {
        return cfapi_h$constants$26.UnmapViewOfFile2$MH();
    }
    public static @C("BOOL") int UnmapViewOfFile2 (@C("HANDLE") Addressable Process, @C("PVOID") Addressable BaseAddress, @C("ULONG") int UnmapFlags) {
        try {
            return (int)cfapi_h$constants$26.UnmapViewOfFile2$MH().invokeExact(Process.address(), BaseAddress.address(), UnmapFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualUnlockEx$MH() {
        return cfapi_h$constants$26.VirtualUnlockEx$MH();
    }
    public static @C("BOOL") int VirtualUnlockEx (@C("HANDLE") Addressable Process, @C("LPVOID") Addressable Address, @C("SIZE_T") long Size) {
        try {
            return (int)cfapi_h$constants$26.VirtualUnlockEx$MH().invokeExact(Process.address(), Address.address(), Size);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualAlloc2$MH() {
        return cfapi_h$constants$26.VirtualAlloc2$MH();
    }
    public static @C("PVOID") MemoryAddress VirtualAlloc2 (@C("HANDLE") Addressable Process, @C("PVOID") Addressable BaseAddress, @C("SIZE_T") long Size, @C("ULONG") int AllocationType, @C("ULONG") int PageProtection, @C("MEM_EXTENDED_PARAMETER*") Addressable ExtendedParameters, @C("ULONG") int ParameterCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.VirtualAlloc2$MH().invokeExact(Process.address(), BaseAddress.address(), Size, AllocationType, PageProtection, ExtendedParameters.address(), ParameterCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapViewOfFile3$MH() {
        return cfapi_h$constants$26.MapViewOfFile3$MH();
    }
    public static @C("PVOID") MemoryAddress MapViewOfFile3 (@C("HANDLE") Addressable FileMapping, @C("HANDLE") Addressable Process, @C("PVOID") Addressable BaseAddress, @C("ULONG64") long Offset, @C("SIZE_T") long ViewSize, @C("ULONG") int AllocationType, @C("ULONG") int PageProtection, @C("MEM_EXTENDED_PARAMETER*") Addressable ExtendedParameters, @C("ULONG") int ParameterCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.MapViewOfFile3$MH().invokeExact(FileMapping.address(), Process.address(), BaseAddress.address(), Offset, ViewSize, AllocationType, PageProtection, ExtendedParameters.address(), ParameterCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle VirtualAlloc2FromApp$MH() {
        return cfapi_h$constants$26.VirtualAlloc2FromApp$MH();
    }
    public static @C("PVOID") MemoryAddress VirtualAlloc2FromApp (@C("HANDLE") Addressable Process, @C("PVOID") Addressable BaseAddress, @C("SIZE_T") long Size, @C("ULONG") int AllocationType, @C("ULONG") int PageProtection, @C("MEM_EXTENDED_PARAMETER*") Addressable ExtendedParameters, @C("ULONG") int ParameterCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.VirtualAlloc2FromApp$MH().invokeExact(Process.address(), BaseAddress.address(), Size, AllocationType, PageProtection, ExtendedParameters.address(), ParameterCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapViewOfFile3FromApp$MH() {
        return cfapi_h$constants$26.MapViewOfFile3FromApp$MH();
    }
    public static @C("PVOID") MemoryAddress MapViewOfFile3FromApp (@C("HANDLE") Addressable FileMapping, @C("HANDLE") Addressable Process, @C("PVOID") Addressable BaseAddress, @C("ULONG64") long Offset, @C("SIZE_T") long ViewSize, @C("ULONG") int AllocationType, @C("ULONG") int PageProtection, @C("MEM_EXTENDED_PARAMETER*") Addressable ExtendedParameters, @C("ULONG") int ParameterCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.MapViewOfFile3FromApp$MH().invokeExact(FileMapping.address(), Process.address(), BaseAddress.address(), Offset, ViewSize, AllocationType, PageProtection, ExtendedParameters.address(), ParameterCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileMapping2$MH() {
        return cfapi_h$constants$26.CreateFileMapping2$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileMapping2 (@C("HANDLE") Addressable File, @C("SECURITY_ATTRIBUTES*") Addressable SecurityAttributes, @C("ULONG") int DesiredAccess, @C("ULONG") int PageProtection, @C("ULONG") int AllocationAttributes, @C("ULONG64") long MaximumSize, @C("PCWSTR") Addressable Name, @C("MEM_EXTENDED_PARAMETER*") Addressable ExtendedParameters, @C("ULONG") int ParameterCount) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateFileMapping2$MH().invokeExact(File.address(), SecurityAttributes.address(), DesiredAccess, PageProtection, AllocationAttributes, MaximumSize, Name.address(), ExtendedParameters.address(), ParameterCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsEnclaveTypeSupported$MH() {
        return cfapi_h$constants$26.IsEnclaveTypeSupported$MH();
    }
    public static @C("BOOL") int IsEnclaveTypeSupported (@C("DWORD") int flEnclaveType) {
        try {
            return (int)cfapi_h$constants$26.IsEnclaveTypeSupported$MH().invokeExact(flEnclaveType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateEnclave$MH() {
        return cfapi_h$constants$26.CreateEnclave$MH();
    }
    public static @C("LPVOID") MemoryAddress CreateEnclave (@C("HANDLE") Addressable hProcess, @C("LPVOID") Addressable lpAddress, @C("SIZE_T") long dwSize, @C("SIZE_T") long dwInitialCommitment, @C("DWORD") int flEnclaveType, @C("LPCVOID") Addressable lpEnclaveInformation, @C("DWORD") int dwInfoLength, @C("LPDWORD") Addressable lpEnclaveError) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateEnclave$MH().invokeExact(hProcess.address(), lpAddress.address(), dwSize, dwInitialCommitment, flEnclaveType, lpEnclaveInformation.address(), dwInfoLength, lpEnclaveError.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadEnclaveData$MH() {
        return cfapi_h$constants$26.LoadEnclaveData$MH();
    }
    public static @C("BOOL") int LoadEnclaveData (@C("HANDLE") Addressable hProcess, @C("LPVOID") Addressable lpAddress, @C("LPCVOID") Addressable lpBuffer, @C("SIZE_T") long nSize, @C("DWORD") int flProtect, @C("LPCVOID") Addressable lpPageInformation, @C("DWORD") int dwInfoLength, @C("PSIZE_T") Addressable lpNumberOfBytesWritten, @C("LPDWORD") Addressable lpEnclaveError) {
        try {
            return (int)cfapi_h$constants$26.LoadEnclaveData$MH().invokeExact(hProcess.address(), lpAddress.address(), lpBuffer.address(), nSize, flProtect, lpPageInformation.address(), dwInfoLength, lpNumberOfBytesWritten.address(), lpEnclaveError.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeEnclave$MH() {
        return cfapi_h$constants$26.InitializeEnclave$MH();
    }
    public static @C("BOOL") int InitializeEnclave (@C("HANDLE") Addressable hProcess, @C("LPVOID") Addressable lpAddress, @C("LPCVOID") Addressable lpEnclaveInformation, @C("DWORD") int dwInfoLength, @C("LPDWORD") Addressable lpEnclaveError) {
        try {
            return (int)cfapi_h$constants$26.InitializeEnclave$MH().invokeExact(hProcess.address(), lpAddress.address(), lpEnclaveInformation.address(), dwInfoLength, lpEnclaveError.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadEnclaveImageA$MH() {
        return cfapi_h$constants$26.LoadEnclaveImageA$MH();
    }
    public static @C("BOOL") int LoadEnclaveImageA (@C("LPVOID") Addressable lpEnclaveAddress, @C("LPCSTR") Addressable lpImageName) {
        try {
            return (int)cfapi_h$constants$26.LoadEnclaveImageA$MH().invokeExact(lpEnclaveAddress.address(), lpImageName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadEnclaveImageW$MH() {
        return cfapi_h$constants$26.LoadEnclaveImageW$MH();
    }
    public static @C("BOOL") int LoadEnclaveImageW (@C("LPVOID") Addressable lpEnclaveAddress, @C("LPCWSTR") Addressable lpImageName) {
        try {
            return (int)cfapi_h$constants$26.LoadEnclaveImageW$MH().invokeExact(lpEnclaveAddress.address(), lpImageName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallEnclave$MH() {
        return cfapi_h$constants$26.CallEnclave$MH();
    }
    public static @C("BOOL") int CallEnclave (@C("LPENCLAVE_ROUTINE") Addressable lpRoutine, @C("LPVOID") Addressable lpParameter, @C("BOOL") int fWaitForThread, @C("LPVOID*") Addressable lpReturnValue) {
        try {
            return (int)cfapi_h$constants$26.CallEnclave$MH().invokeExact(lpRoutine.address(), lpParameter.address(), fWaitForThread, lpReturnValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TerminateEnclave$MH() {
        return cfapi_h$constants$26.TerminateEnclave$MH();
    }
    public static @C("BOOL") int TerminateEnclave (@C("LPVOID") Addressable lpAddress, @C("BOOL") int fWait) {
        try {
            return (int)cfapi_h$constants$26.TerminateEnclave$MH().invokeExact(lpAddress.address(), fWait);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteEnclave$MH() {
        return cfapi_h$constants$26.DeleteEnclave$MH();
    }
    public static @C("BOOL") int DeleteEnclave (@C("LPVOID") Addressable lpAddress) {
        try {
            return (int)cfapi_h$constants$26.DeleteEnclave$MH().invokeExact(lpAddress.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueueUserWorkItem$MH() {
        return cfapi_h$constants$26.QueueUserWorkItem$MH();
    }
    public static @C("BOOL") int QueueUserWorkItem (@C("LPTHREAD_START_ROUTINE") Addressable Function, @C("PVOID") Addressable Context, @C("ULONG") int Flags) {
        try {
            return (int)cfapi_h$constants$26.QueueUserWorkItem$MH().invokeExact(Function.address(), Context.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UnregisterWaitEx$MH() {
        return cfapi_h$constants$26.UnregisterWaitEx$MH();
    }
    public static @C("BOOL") int UnregisterWaitEx (@C("HANDLE") Addressable WaitHandle, @C("HANDLE") Addressable CompletionEvent) {
        try {
            return (int)cfapi_h$constants$26.UnregisterWaitEx$MH().invokeExact(WaitHandle.address(), CompletionEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateTimerQueue$MH() {
        return cfapi_h$constants$26.CreateTimerQueue$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateTimerQueue () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateTimerQueue$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateTimerQueueTimer$MH() {
        return cfapi_h$constants$26.CreateTimerQueueTimer$MH();
    }
    public static @C("BOOL") int CreateTimerQueueTimer (@C("PHANDLE") Addressable phNewTimer, @C("HANDLE") Addressable TimerQueue, @C("WAITORTIMERCALLBACK") Addressable Callback, @C("PVOID") Addressable Parameter, @C("DWORD") int DueTime, @C("DWORD") int Period, @C("ULONG") int Flags) {
        try {
            return (int)cfapi_h$constants$26.CreateTimerQueueTimer$MH().invokeExact(phNewTimer.address(), TimerQueue.address(), Callback.address(), Parameter.address(), DueTime, Period, Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ChangeTimerQueueTimer$MH() {
        return cfapi_h$constants$26.ChangeTimerQueueTimer$MH();
    }
    public static @C("BOOL") int ChangeTimerQueueTimer (@C("HANDLE") Addressable TimerQueue, @C("HANDLE") Addressable Timer, @C("ULONG") int DueTime, @C("ULONG") int Period) {
        try {
            return (int)cfapi_h$constants$26.ChangeTimerQueueTimer$MH().invokeExact(TimerQueue.address(), Timer.address(), DueTime, Period);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteTimerQueueTimer$MH() {
        return cfapi_h$constants$26.DeleteTimerQueueTimer$MH();
    }
    public static @C("BOOL") int DeleteTimerQueueTimer (@C("HANDLE") Addressable TimerQueue, @C("HANDLE") Addressable Timer, @C("HANDLE") Addressable CompletionEvent) {
        try {
            return (int)cfapi_h$constants$26.DeleteTimerQueueTimer$MH().invokeExact(TimerQueue.address(), Timer.address(), CompletionEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteTimerQueueEx$MH() {
        return cfapi_h$constants$26.DeleteTimerQueueEx$MH();
    }
    public static @C("BOOL") int DeleteTimerQueueEx (@C("HANDLE") Addressable TimerQueue, @C("HANDLE") Addressable CompletionEvent) {
        try {
            return (int)cfapi_h$constants$26.DeleteTimerQueueEx$MH().invokeExact(TimerQueue.address(), CompletionEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateThreadpool$MH() {
        return cfapi_h$constants$26.CreateThreadpool$MH();
    }
    public static @C("PTP_POOL") MemoryAddress CreateThreadpool (@C("PVOID") Addressable reserved) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateThreadpool$MH().invokeExact(reserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolThreadMaximum$MH() {
        return cfapi_h$constants$26.SetThreadpoolThreadMaximum$MH();
    }
    public static void SetThreadpoolThreadMaximum (@C("PTP_POOL") Addressable ptpp, @C("DWORD") int cthrdMost) {
        try {
            cfapi_h$constants$26.SetThreadpoolThreadMaximum$MH().invokeExact(ptpp.address(), cthrdMost);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolThreadMinimum$MH() {
        return cfapi_h$constants$26.SetThreadpoolThreadMinimum$MH();
    }
    public static @C("BOOL") int SetThreadpoolThreadMinimum (@C("PTP_POOL") Addressable ptpp, @C("DWORD") int cthrdMic) {
        try {
            return (int)cfapi_h$constants$26.SetThreadpoolThreadMinimum$MH().invokeExact(ptpp.address(), cthrdMic);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolStackInformation$MH() {
        return cfapi_h$constants$26.SetThreadpoolStackInformation$MH();
    }
    public static @C("BOOL") int SetThreadpoolStackInformation (@C("PTP_POOL") Addressable ptpp, @C("PTP_POOL_STACK_INFORMATION") Addressable ptpsi) {
        try {
            return (int)cfapi_h$constants$26.SetThreadpoolStackInformation$MH().invokeExact(ptpp.address(), ptpsi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryThreadpoolStackInformation$MH() {
        return cfapi_h$constants$26.QueryThreadpoolStackInformation$MH();
    }
    public static @C("BOOL") int QueryThreadpoolStackInformation (@C("PTP_POOL") Addressable ptpp, @C("PTP_POOL_STACK_INFORMATION") Addressable ptpsi) {
        try {
            return (int)cfapi_h$constants$26.QueryThreadpoolStackInformation$MH().invokeExact(ptpp.address(), ptpsi.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseThreadpool$MH() {
        return cfapi_h$constants$26.CloseThreadpool$MH();
    }
    public static void CloseThreadpool (@C("PTP_POOL") Addressable ptpp) {
        try {
            cfapi_h$constants$26.CloseThreadpool$MH().invokeExact(ptpp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateThreadpoolCleanupGroup$MH() {
        return cfapi_h$constants$26.CreateThreadpoolCleanupGroup$MH();
    }
    public static @C("PTP_CLEANUP_GROUP") MemoryAddress CreateThreadpoolCleanupGroup () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateThreadpoolCleanupGroup$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseThreadpoolCleanupGroupMembers$MH() {
        return cfapi_h$constants$26.CloseThreadpoolCleanupGroupMembers$MH();
    }
    public static void CloseThreadpoolCleanupGroupMembers (@C("PTP_CLEANUP_GROUP") Addressable ptpcg, @C("BOOL") int fCancelPendingCallbacks, @C("PVOID") Addressable pvCleanupContext) {
        try {
            cfapi_h$constants$26.CloseThreadpoolCleanupGroupMembers$MH().invokeExact(ptpcg.address(), fCancelPendingCallbacks, pvCleanupContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseThreadpoolCleanupGroup$MH() {
        return cfapi_h$constants$26.CloseThreadpoolCleanupGroup$MH();
    }
    public static void CloseThreadpoolCleanupGroup (@C("PTP_CLEANUP_GROUP") Addressable ptpcg) {
        try {
            cfapi_h$constants$26.CloseThreadpoolCleanupGroup$MH().invokeExact(ptpcg.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEventWhenCallbackReturns$MH() {
        return cfapi_h$constants$26.SetEventWhenCallbackReturns$MH();
    }
    public static void SetEventWhenCallbackReturns (@C("PTP_CALLBACK_INSTANCE") Addressable pci, @C("HANDLE") Addressable evt) {
        try {
            cfapi_h$constants$26.SetEventWhenCallbackReturns$MH().invokeExact(pci.address(), evt.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseSemaphoreWhenCallbackReturns$MH() {
        return cfapi_h$constants$26.ReleaseSemaphoreWhenCallbackReturns$MH();
    }
    public static void ReleaseSemaphoreWhenCallbackReturns (@C("PTP_CALLBACK_INSTANCE") Addressable pci, @C("HANDLE") Addressable sem, @C("DWORD") int crel) {
        try {
            cfapi_h$constants$26.ReleaseSemaphoreWhenCallbackReturns$MH().invokeExact(pci.address(), sem.address(), crel);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReleaseMutexWhenCallbackReturns$MH() {
        return cfapi_h$constants$26.ReleaseMutexWhenCallbackReturns$MH();
    }
    public static void ReleaseMutexWhenCallbackReturns (@C("PTP_CALLBACK_INSTANCE") Addressable pci, @C("HANDLE") Addressable mut) {
        try {
            cfapi_h$constants$26.ReleaseMutexWhenCallbackReturns$MH().invokeExact(pci.address(), mut.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LeaveCriticalSectionWhenCallbackReturns$MH() {
        return cfapi_h$constants$26.LeaveCriticalSectionWhenCallbackReturns$MH();
    }
    public static void LeaveCriticalSectionWhenCallbackReturns (@C("PTP_CALLBACK_INSTANCE") Addressable pci, @C("PCRITICAL_SECTION") Addressable pcs) {
        try {
            cfapi_h$constants$26.LeaveCriticalSectionWhenCallbackReturns$MH().invokeExact(pci.address(), pcs.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeLibraryWhenCallbackReturns$MH() {
        return cfapi_h$constants$26.FreeLibraryWhenCallbackReturns$MH();
    }
    public static void FreeLibraryWhenCallbackReturns (@C("PTP_CALLBACK_INSTANCE") Addressable pci, @C("HMODULE") Addressable mod) {
        try {
            cfapi_h$constants$26.FreeLibraryWhenCallbackReturns$MH().invokeExact(pci.address(), mod.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CallbackMayRunLong$MH() {
        return cfapi_h$constants$26.CallbackMayRunLong$MH();
    }
    public static @C("BOOL") int CallbackMayRunLong (@C("PTP_CALLBACK_INSTANCE") Addressable pci) {
        try {
            return (int)cfapi_h$constants$26.CallbackMayRunLong$MH().invokeExact(pci.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DisassociateCurrentThreadFromCallback$MH() {
        return cfapi_h$constants$26.DisassociateCurrentThreadFromCallback$MH();
    }
    public static void DisassociateCurrentThreadFromCallback (@C("PTP_CALLBACK_INSTANCE") Addressable pci) {
        try {
            cfapi_h$constants$26.DisassociateCurrentThreadFromCallback$MH().invokeExact(pci.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TrySubmitThreadpoolCallback$MH() {
        return cfapi_h$constants$26.TrySubmitThreadpoolCallback$MH();
    }
    public static @C("BOOL") int TrySubmitThreadpoolCallback (@C("PTP_SIMPLE_CALLBACK") Addressable pfns, @C("PVOID") Addressable pv, @C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            return (int)cfapi_h$constants$26.TrySubmitThreadpoolCallback$MH().invokeExact(pfns.address(), pv.address(), pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateThreadpoolWork$MH() {
        return cfapi_h$constants$26.CreateThreadpoolWork$MH();
    }
    public static @C("PTP_WORK") MemoryAddress CreateThreadpoolWork (@C("PTP_WORK_CALLBACK") Addressable pfnwk, @C("PVOID") Addressable pv, @C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateThreadpoolWork$MH().invokeExact(pfnwk.address(), pv.address(), pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SubmitThreadpoolWork$MH() {
        return cfapi_h$constants$26.SubmitThreadpoolWork$MH();
    }
    public static void SubmitThreadpoolWork (@C("PTP_WORK") Addressable pwk) {
        try {
            cfapi_h$constants$26.SubmitThreadpoolWork$MH().invokeExact(pwk.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForThreadpoolWorkCallbacks$MH() {
        return cfapi_h$constants$26.WaitForThreadpoolWorkCallbacks$MH();
    }
    public static void WaitForThreadpoolWorkCallbacks (@C("PTP_WORK") Addressable pwk, @C("BOOL") int fCancelPendingCallbacks) {
        try {
            cfapi_h$constants$26.WaitForThreadpoolWorkCallbacks$MH().invokeExact(pwk.address(), fCancelPendingCallbacks);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseThreadpoolWork$MH() {
        return cfapi_h$constants$26.CloseThreadpoolWork$MH();
    }
    public static void CloseThreadpoolWork (@C("PTP_WORK") Addressable pwk) {
        try {
            cfapi_h$constants$26.CloseThreadpoolWork$MH().invokeExact(pwk.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateThreadpoolTimer$MH() {
        return cfapi_h$constants$26.CreateThreadpoolTimer$MH();
    }
    public static @C("PTP_TIMER") MemoryAddress CreateThreadpoolTimer (@C("PTP_TIMER_CALLBACK") Addressable pfnti, @C("PVOID") Addressable pv, @C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateThreadpoolTimer$MH().invokeExact(pfnti.address(), pv.address(), pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolTimer$MH() {
        return cfapi_h$constants$26.SetThreadpoolTimer$MH();
    }
    public static void SetThreadpoolTimer (@C("PTP_TIMER") Addressable pti, @C("PFILETIME") Addressable pftDueTime, @C("DWORD") int msPeriod, @C("DWORD") int msWindowLength) {
        try {
            cfapi_h$constants$26.SetThreadpoolTimer$MH().invokeExact(pti.address(), pftDueTime.address(), msPeriod, msWindowLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsThreadpoolTimerSet$MH() {
        return cfapi_h$constants$26.IsThreadpoolTimerSet$MH();
    }
    public static @C("BOOL") int IsThreadpoolTimerSet (@C("PTP_TIMER") Addressable pti) {
        try {
            return (int)cfapi_h$constants$26.IsThreadpoolTimerSet$MH().invokeExact(pti.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForThreadpoolTimerCallbacks$MH() {
        return cfapi_h$constants$26.WaitForThreadpoolTimerCallbacks$MH();
    }
    public static void WaitForThreadpoolTimerCallbacks (@C("PTP_TIMER") Addressable pti, @C("BOOL") int fCancelPendingCallbacks) {
        try {
            cfapi_h$constants$26.WaitForThreadpoolTimerCallbacks$MH().invokeExact(pti.address(), fCancelPendingCallbacks);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseThreadpoolTimer$MH() {
        return cfapi_h$constants$26.CloseThreadpoolTimer$MH();
    }
    public static void CloseThreadpoolTimer (@C("PTP_TIMER") Addressable pti) {
        try {
            cfapi_h$constants$26.CloseThreadpoolTimer$MH().invokeExact(pti.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateThreadpoolWait$MH() {
        return cfapi_h$constants$26.CreateThreadpoolWait$MH();
    }
    public static @C("PTP_WAIT") MemoryAddress CreateThreadpoolWait (@C("PTP_WAIT_CALLBACK") Addressable pfnwa, @C("PVOID") Addressable pv, @C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateThreadpoolWait$MH().invokeExact(pfnwa.address(), pv.address(), pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolWait$MH() {
        return cfapi_h$constants$26.SetThreadpoolWait$MH();
    }
    public static void SetThreadpoolWait (@C("PTP_WAIT") Addressable pwa, @C("HANDLE") Addressable h, @C("PFILETIME") Addressable pftTimeout) {
        try {
            cfapi_h$constants$26.SetThreadpoolWait$MH().invokeExact(pwa.address(), h.address(), pftTimeout.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForThreadpoolWaitCallbacks$MH() {
        return cfapi_h$constants$26.WaitForThreadpoolWaitCallbacks$MH();
    }
    public static void WaitForThreadpoolWaitCallbacks (@C("PTP_WAIT") Addressable pwa, @C("BOOL") int fCancelPendingCallbacks) {
        try {
            cfapi_h$constants$26.WaitForThreadpoolWaitCallbacks$MH().invokeExact(pwa.address(), fCancelPendingCallbacks);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseThreadpoolWait$MH() {
        return cfapi_h$constants$26.CloseThreadpoolWait$MH();
    }
    public static void CloseThreadpoolWait (@C("PTP_WAIT") Addressable pwa) {
        try {
            cfapi_h$constants$26.CloseThreadpoolWait$MH().invokeExact(pwa.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateThreadpoolIo$MH() {
        return cfapi_h$constants$26.CreateThreadpoolIo$MH();
    }
    public static @C("PTP_IO") MemoryAddress CreateThreadpoolIo (@C("HANDLE") Addressable fl, @C("PTP_WIN32_IO_CALLBACK") Addressable pfnio, @C("PVOID") Addressable pv, @C("PTP_CALLBACK_ENVIRON") Addressable pcbe) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateThreadpoolIo$MH().invokeExact(fl.address(), pfnio.address(), pv.address(), pcbe.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle StartThreadpoolIo$MH() {
        return cfapi_h$constants$26.StartThreadpoolIo$MH();
    }
    public static void StartThreadpoolIo (@C("PTP_IO") Addressable pio) {
        try {
            cfapi_h$constants$26.StartThreadpoolIo$MH().invokeExact(pio.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelThreadpoolIo$MH() {
        return cfapi_h$constants$26.CancelThreadpoolIo$MH();
    }
    public static void CancelThreadpoolIo (@C("PTP_IO") Addressable pio) {
        try {
            cfapi_h$constants$26.CancelThreadpoolIo$MH().invokeExact(pio.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitForThreadpoolIoCallbacks$MH() {
        return cfapi_h$constants$26.WaitForThreadpoolIoCallbacks$MH();
    }
    public static void WaitForThreadpoolIoCallbacks (@C("PTP_IO") Addressable pio, @C("BOOL") int fCancelPendingCallbacks) {
        try {
            cfapi_h$constants$26.WaitForThreadpoolIoCallbacks$MH().invokeExact(pio.address(), fCancelPendingCallbacks);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseThreadpoolIo$MH() {
        return cfapi_h$constants$26.CloseThreadpoolIo$MH();
    }
    public static void CloseThreadpoolIo (@C("PTP_IO") Addressable pio) {
        try {
            cfapi_h$constants$26.CloseThreadpoolIo$MH().invokeExact(pio.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolTimerEx$MH() {
        return cfapi_h$constants$26.SetThreadpoolTimerEx$MH();
    }
    public static @C("BOOL") int SetThreadpoolTimerEx (@C("PTP_TIMER") Addressable pti, @C("PFILETIME") Addressable pftDueTime, @C("DWORD") int msPeriod, @C("DWORD") int msWindowLength) {
        try {
            return (int)cfapi_h$constants$26.SetThreadpoolTimerEx$MH().invokeExact(pti.address(), pftDueTime.address(), msPeriod, msWindowLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadpoolWaitEx$MH() {
        return cfapi_h$constants$26.SetThreadpoolWaitEx$MH();
    }
    public static @C("BOOL") int SetThreadpoolWaitEx (@C("PTP_WAIT") Addressable pwa, @C("HANDLE") Addressable h, @C("PFILETIME") Addressable pftTimeout, @C("PVOID") Addressable Reserved) {
        try {
            return (int)cfapi_h$constants$26.SetThreadpoolWaitEx$MH().invokeExact(pwa.address(), h.address(), pftTimeout.address(), Reserved.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsProcessInJob$MH() {
        return cfapi_h$constants$26.IsProcessInJob$MH();
    }
    public static @C("BOOL") int IsProcessInJob (@C("HANDLE") Addressable ProcessHandle, @C("HANDLE") Addressable JobHandle, @C("PBOOL") Addressable Result) {
        try {
            return (int)cfapi_h$constants$26.IsProcessInJob$MH().invokeExact(ProcessHandle.address(), JobHandle.address(), Result.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateJobObjectW$MH() {
        return cfapi_h$constants$26.CreateJobObjectW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateJobObjectW (@C("LPSECURITY_ATTRIBUTES") Addressable lpJobAttributes, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateJobObjectW$MH().invokeExact(lpJobAttributes.address(), lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeMemoryJobObject$MH() {
        return cfapi_h$constants$26.FreeMemoryJobObject$MH();
    }
    public static void FreeMemoryJobObject (@C("void*") Addressable Buffer) {
        try {
            cfapi_h$constants$26.FreeMemoryJobObject$MH().invokeExact(Buffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenJobObjectW$MH() {
        return cfapi_h$constants$26.OpenJobObjectW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenJobObjectW (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCWSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.OpenJobObjectW$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AssignProcessToJobObject$MH() {
        return cfapi_h$constants$26.AssignProcessToJobObject$MH();
    }
    public static @C("BOOL") int AssignProcessToJobObject (@C("HANDLE") Addressable hJob, @C("HANDLE") Addressable hProcess) {
        try {
            return (int)cfapi_h$constants$26.AssignProcessToJobObject$MH().invokeExact(hJob.address(), hProcess.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TerminateJobObject$MH() {
        return cfapi_h$constants$26.TerminateJobObject$MH();
    }
    public static @C("BOOL") int TerminateJobObject (@C("HANDLE") Addressable hJob, @C("UINT") int uExitCode) {
        try {
            return (int)cfapi_h$constants$26.TerminateJobObject$MH().invokeExact(hJob.address(), uExitCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetInformationJobObject$MH() {
        return cfapi_h$constants$26.SetInformationJobObject$MH();
    }
    public static @C("BOOL") int SetInformationJobObject (@C("HANDLE") Addressable hJob, @C("JOBOBJECTINFOCLASS") int JobObjectInformationClass, @C("LPVOID") Addressable lpJobObjectInformation, @C("DWORD") int cbJobObjectInformationLength) {
        try {
            return (int)cfapi_h$constants$26.SetInformationJobObject$MH().invokeExact(hJob.address(), JobObjectInformationClass, lpJobObjectInformation.address(), cbJobObjectInformationLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetIoRateControlInformationJobObject$MH() {
        return cfapi_h$constants$26.SetIoRateControlInformationJobObject$MH();
    }
    public static @C("DWORD") int SetIoRateControlInformationJobObject (@C("HANDLE") Addressable hJob, @C("JOBOBJECT_IO_RATE_CONTROL_INFORMATION*") Addressable IoRateControlInfo) {
        try {
            return (int)cfapi_h$constants$26.SetIoRateControlInformationJobObject$MH().invokeExact(hJob.address(), IoRateControlInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryInformationJobObject$MH() {
        return cfapi_h$constants$26.QueryInformationJobObject$MH();
    }
    public static @C("BOOL") int QueryInformationJobObject (@C("HANDLE") Addressable hJob, @C("JOBOBJECTINFOCLASS") int JobObjectInformationClass, @C("LPVOID") Addressable lpJobObjectInformation, @C("DWORD") int cbJobObjectInformationLength, @C("LPDWORD") Addressable lpReturnLength) {
        try {
            return (int)cfapi_h$constants$26.QueryInformationJobObject$MH().invokeExact(hJob.address(), JobObjectInformationClass, lpJobObjectInformation.address(), cbJobObjectInformationLength, lpReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryIoRateControlInformationJobObject$MH() {
        return cfapi_h$constants$26.QueryIoRateControlInformationJobObject$MH();
    }
    public static @C("DWORD") int QueryIoRateControlInformationJobObject (@C("HANDLE") Addressable hJob, @C("PCWSTR") Addressable VolumeName, @C("JOBOBJECT_IO_RATE_CONTROL_INFORMATION**") Addressable InfoBlocks, @C("ULONG*") Addressable InfoBlockCount) {
        try {
            return (int)cfapi_h$constants$26.QueryIoRateControlInformationJobObject$MH().invokeExact(hJob.address(), VolumeName.address(), InfoBlocks.address(), InfoBlockCount.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64DisableWow64FsRedirection$MH() {
        return cfapi_h$constants$26.Wow64DisableWow64FsRedirection$MH();
    }
    public static @C("BOOL") int Wow64DisableWow64FsRedirection (@C("PVOID*") Addressable OldValue) {
        try {
            return (int)cfapi_h$constants$26.Wow64DisableWow64FsRedirection$MH().invokeExact(OldValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64RevertWow64FsRedirection$MH() {
        return cfapi_h$constants$26.Wow64RevertWow64FsRedirection$MH();
    }
    public static @C("BOOL") int Wow64RevertWow64FsRedirection (@C("PVOID") Addressable OlValue) {
        try {
            return (int)cfapi_h$constants$26.Wow64RevertWow64FsRedirection$MH().invokeExact(OlValue.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWow64Process$MH() {
        return cfapi_h$constants$26.IsWow64Process$MH();
    }
    public static @C("BOOL") int IsWow64Process (@C("HANDLE") Addressable hProcess, @C("PBOOL") Addressable Wow64Process) {
        try {
            return (int)cfapi_h$constants$26.IsWow64Process$MH().invokeExact(hProcess.address(), Wow64Process.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemWow64DirectoryA$MH() {
        return cfapi_h$constants$26.GetSystemWow64DirectoryA$MH();
    }
    public static @C("UINT") int GetSystemWow64DirectoryA (@C("LPSTR") Addressable lpBuffer, @C("UINT") int uSize) {
        try {
            return (int)cfapi_h$constants$26.GetSystemWow64DirectoryA$MH().invokeExact(lpBuffer.address(), uSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemWow64DirectoryW$MH() {
        return cfapi_h$constants$26.GetSystemWow64DirectoryW$MH();
    }
    public static @C("UINT") int GetSystemWow64DirectoryW (@C("LPWSTR") Addressable lpBuffer, @C("UINT") int uSize) {
        try {
            return (int)cfapi_h$constants$26.GetSystemWow64DirectoryW$MH().invokeExact(lpBuffer.address(), uSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64SetThreadDefaultGuestMachine$MH() {
        return cfapi_h$constants$26.Wow64SetThreadDefaultGuestMachine$MH();
    }
    public static @C("USHORT") short Wow64SetThreadDefaultGuestMachine (@C("USHORT") short Machine) {
        try {
            return (short)cfapi_h$constants$26.Wow64SetThreadDefaultGuestMachine$MH().invokeExact(Machine);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWow64Process2$MH() {
        return cfapi_h$constants$26.IsWow64Process2$MH();
    }
    public static @C("BOOL") int IsWow64Process2 (@C("HANDLE") Addressable hProcess, @C("USHORT*") Addressable pProcessMachine, @C("USHORT*") Addressable pNativeMachine) {
        try {
            return (int)cfapi_h$constants$26.IsWow64Process2$MH().invokeExact(hProcess.address(), pProcessMachine.address(), pNativeMachine.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemWow64Directory2A$MH() {
        return cfapi_h$constants$26.GetSystemWow64Directory2A$MH();
    }
    public static @C("UINT") int GetSystemWow64Directory2A (@C("LPSTR") Addressable lpBuffer, @C("UINT") int uSize, @C("WORD") short ImageFileMachineType) {
        try {
            return (int)cfapi_h$constants$26.GetSystemWow64Directory2A$MH().invokeExact(lpBuffer.address(), uSize, ImageFileMachineType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemWow64Directory2W$MH() {
        return cfapi_h$constants$26.GetSystemWow64Directory2W$MH();
    }
    public static @C("UINT") int GetSystemWow64Directory2W (@C("LPWSTR") Addressable lpBuffer, @C("UINT") int uSize, @C("WORD") short ImageFileMachineType) {
        try {
            return (int)cfapi_h$constants$26.GetSystemWow64Directory2W$MH().invokeExact(lpBuffer.address(), uSize, ImageFileMachineType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWow64GuestMachineSupported$MH() {
        return cfapi_h$constants$26.IsWow64GuestMachineSupported$MH();
    }
    public static @C("HRESULT") int IsWow64GuestMachineSupported (@C("USHORT") short WowGuestMachine, @C("BOOL*") Addressable MachineIsSupported) {
        try {
            return (int)cfapi_h$constants$26.IsWow64GuestMachineSupported$MH().invokeExact(WowGuestMachine, MachineIsSupported.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64GetThreadContext$MH() {
        return cfapi_h$constants$26.Wow64GetThreadContext$MH();
    }
    public static @C("BOOL") int Wow64GetThreadContext (@C("HANDLE") Addressable hThread, @C("PWOW64_CONTEXT") Addressable lpContext) {
        try {
            return (int)cfapi_h$constants$26.Wow64GetThreadContext$MH().invokeExact(hThread.address(), lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64SetThreadContext$MH() {
        return cfapi_h$constants$26.Wow64SetThreadContext$MH();
    }
    public static @C("BOOL") int Wow64SetThreadContext (@C("HANDLE") Addressable hThread, @C("const WOW64_CONTEXT*") Addressable lpContext) {
        try {
            return (int)cfapi_h$constants$26.Wow64SetThreadContext$MH().invokeExact(hThread.address(), lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64SuspendThread$MH() {
        return cfapi_h$constants$26.Wow64SuspendThread$MH();
    }
    public static @C("DWORD") int Wow64SuspendThread (@C("HANDLE") Addressable hThread) {
        try {
            return (int)cfapi_h$constants$26.Wow64SuspendThread$MH().invokeExact(hThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DisableThreadLibraryCalls$MH() {
        return cfapi_h$constants$26.DisableThreadLibraryCalls$MH();
    }
    public static @C("BOOL") int DisableThreadLibraryCalls (@C("HMODULE") Addressable hLibModule) {
        try {
            return (int)cfapi_h$constants$26.DisableThreadLibraryCalls$MH().invokeExact(hLibModule.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindResourceExW$MH() {
        return cfapi_h$constants$26.FindResourceExW$MH();
    }
    public static @C("HRSRC") MemoryAddress FindResourceExW (@C("HMODULE") Addressable hModule, @C("LPCWSTR") Addressable lpType, @C("LPCWSTR") Addressable lpName, @C("WORD") short wLanguage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.FindResourceExW$MH().invokeExact(hModule.address(), lpType.address(), lpName.address(), wLanguage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindStringOrdinal$MH() {
        return cfapi_h$constants$26.FindStringOrdinal$MH();
    }
    public static @C("int") int FindStringOrdinal (@C("DWORD") int dwFindStringOrdinalFlags, @C("LPCWSTR") Addressable lpStringSource, @C("int") int cchSource, @C("LPCWSTR") Addressable lpStringValue, @C("int") int cchValue, @C("BOOL") int bIgnoreCase) {
        try {
            return (int)cfapi_h$constants$26.FindStringOrdinal$MH().invokeExact(dwFindStringOrdinalFlags, lpStringSource.address(), cchSource, lpStringValue.address(), cchValue, bIgnoreCase);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeLibrary$MH() {
        return cfapi_h$constants$26.FreeLibrary$MH();
    }
    public static @C("BOOL") int FreeLibrary (@C("HMODULE") Addressable hLibModule) {
        try {
            return (int)cfapi_h$constants$26.FreeLibrary$MH().invokeExact(hLibModule.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeLibraryAndExitThread$MH() {
        return cfapi_h$constants$26.FreeLibraryAndExitThread$MH();
    }
    public static void FreeLibraryAndExitThread (@C("HMODULE") Addressable hLibModule, @C("DWORD") int dwExitCode) {
        try {
            cfapi_h$constants$26.FreeLibraryAndExitThread$MH().invokeExact(hLibModule.address(), dwExitCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeResource$MH() {
        return cfapi_h$constants$26.FreeResource$MH();
    }
    public static @C("BOOL") int FreeResource (@C("HGLOBAL") Addressable hResData) {
        try {
            return (int)cfapi_h$constants$26.FreeResource$MH().invokeExact(hResData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetModuleFileNameA$MH() {
        return cfapi_h$constants$26.GetModuleFileNameA$MH();
    }
    public static @C("DWORD") int GetModuleFileNameA (@C("HMODULE") Addressable hModule, @C("LPSTR") Addressable lpFilename, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$26.GetModuleFileNameA$MH().invokeExact(hModule.address(), lpFilename.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetModuleFileNameW$MH() {
        return cfapi_h$constants$26.GetModuleFileNameW$MH();
    }
    public static @C("DWORD") int GetModuleFileNameW (@C("HMODULE") Addressable hModule, @C("LPWSTR") Addressable lpFilename, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$26.GetModuleFileNameW$MH().invokeExact(hModule.address(), lpFilename.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetModuleHandleA$MH() {
        return cfapi_h$constants$26.GetModuleHandleA$MH();
    }
    public static @C("HMODULE") MemoryAddress GetModuleHandleA (@C("LPCSTR") Addressable lpModuleName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GetModuleHandleA$MH().invokeExact(lpModuleName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetModuleHandleW$MH() {
        return cfapi_h$constants$26.GetModuleHandleW$MH();
    }
    public static @C("HMODULE") MemoryAddress GetModuleHandleW (@C("LPCWSTR") Addressable lpModuleName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GetModuleHandleW$MH().invokeExact(lpModuleName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetModuleHandleExA$MH() {
        return cfapi_h$constants$26.GetModuleHandleExA$MH();
    }
    public static @C("BOOL") int GetModuleHandleExA (@C("DWORD") int dwFlags, @C("LPCSTR") Addressable lpModuleName, @C("HMODULE*") Addressable phModule) {
        try {
            return (int)cfapi_h$constants$26.GetModuleHandleExA$MH().invokeExact(dwFlags, lpModuleName.address(), phModule.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetModuleHandleExW$MH() {
        return cfapi_h$constants$26.GetModuleHandleExW$MH();
    }
    public static @C("BOOL") int GetModuleHandleExW (@C("DWORD") int dwFlags, @C("LPCWSTR") Addressable lpModuleName, @C("HMODULE*") Addressable phModule) {
        try {
            return (int)cfapi_h$constants$26.GetModuleHandleExW$MH().invokeExact(dwFlags, lpModuleName.address(), phModule.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcAddress$MH() {
        return cfapi_h$constants$26.GetProcAddress$MH();
    }
    public static @C("FARPROC") MemoryAddress GetProcAddress (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpProcName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GetProcAddress$MH().invokeExact(hModule.address(), lpProcName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadLibraryExA$MH() {
        return cfapi_h$constants$26.LoadLibraryExA$MH();
    }
    public static @C("HMODULE") MemoryAddress LoadLibraryExA (@C("LPCSTR") Addressable lpLibFileName, @C("HANDLE") Addressable hFile, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LoadLibraryExA$MH().invokeExact(lpLibFileName.address(), hFile.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadLibraryExW$MH() {
        return cfapi_h$constants$26.LoadLibraryExW$MH();
    }
    public static @C("HMODULE") MemoryAddress LoadLibraryExW (@C("LPCWSTR") Addressable lpLibFileName, @C("HANDLE") Addressable hFile, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LoadLibraryExW$MH().invokeExact(lpLibFileName.address(), hFile.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadResource$MH() {
        return cfapi_h$constants$26.LoadResource$MH();
    }
    public static @C("HGLOBAL") MemoryAddress LoadResource (@C("HMODULE") Addressable hModule, @C("HRSRC") Addressable hResInfo) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LoadResource$MH().invokeExact(hModule.address(), hResInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadStringA$MH() {
        return cfapi_h$constants$26.LoadStringA$MH();
    }
    public static @C("int") int LoadStringA (@C("HINSTANCE") Addressable hInstance, @C("UINT") int uID, @C("LPSTR") Addressable lpBuffer, @C("int") int cchBufferMax) {
        try {
            return (int)cfapi_h$constants$26.LoadStringA$MH().invokeExact(hInstance.address(), uID, lpBuffer.address(), cchBufferMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadStringW$MH() {
        return cfapi_h$constants$26.LoadStringW$MH();
    }
    public static @C("int") int LoadStringW (@C("HINSTANCE") Addressable hInstance, @C("UINT") int uID, @C("LPWSTR") Addressable lpBuffer, @C("int") int cchBufferMax) {
        try {
            return (int)cfapi_h$constants$26.LoadStringW$MH().invokeExact(hInstance.address(), uID, lpBuffer.address(), cchBufferMax);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LockResource$MH() {
        return cfapi_h$constants$26.LockResource$MH();
    }
    public static @C("LPVOID") MemoryAddress LockResource (@C("HGLOBAL") Addressable hResData) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LockResource$MH().invokeExact(hResData.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SizeofResource$MH() {
        return cfapi_h$constants$26.SizeofResource$MH();
    }
    public static @C("DWORD") int SizeofResource (@C("HMODULE") Addressable hModule, @C("HRSRC") Addressable hResInfo) {
        try {
            return (int)cfapi_h$constants$26.SizeofResource$MH().invokeExact(hModule.address(), hResInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddDllDirectory$MH() {
        return cfapi_h$constants$26.AddDllDirectory$MH();
    }
    public static @C("DLL_DIRECTORY_COOKIE") MemoryAddress AddDllDirectory (@C("PCWSTR") Addressable NewDirectory) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.AddDllDirectory$MH().invokeExact(NewDirectory.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RemoveDllDirectory$MH() {
        return cfapi_h$constants$26.RemoveDllDirectory$MH();
    }
    public static @C("BOOL") int RemoveDllDirectory (@C("DLL_DIRECTORY_COOKIE") Addressable Cookie) {
        try {
            return (int)cfapi_h$constants$26.RemoveDllDirectory$MH().invokeExact(Cookie.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDefaultDllDirectories$MH() {
        return cfapi_h$constants$26.SetDefaultDllDirectories$MH();
    }
    public static @C("BOOL") int SetDefaultDllDirectories (@C("DWORD") int DirectoryFlags) {
        try {
            return (int)cfapi_h$constants$26.SetDefaultDllDirectories$MH().invokeExact(DirectoryFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceLanguagesExA$MH() {
        return cfapi_h$constants$26.EnumResourceLanguagesExA$MH();
    }
    public static @C("BOOL") int EnumResourceLanguagesExA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpType, @C("LPCSTR") Addressable lpName, @C("ENUMRESLANGPROCA") Addressable lpEnumFunc, @C("LONG_PTR") long lParam, @C("DWORD") int dwFlags, @C("LANGID") short LangId) {
        try {
            return (int)cfapi_h$constants$26.EnumResourceLanguagesExA$MH().invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceLanguagesExW$MH() {
        return cfapi_h$constants$26.EnumResourceLanguagesExW$MH();
    }
    public static @C("BOOL") int EnumResourceLanguagesExW (@C("HMODULE") Addressable hModule, @C("LPCWSTR") Addressable lpType, @C("LPCWSTR") Addressable lpName, @C("ENUMRESLANGPROCW") Addressable lpEnumFunc, @C("LONG_PTR") long lParam, @C("DWORD") int dwFlags, @C("LANGID") short LangId) {
        try {
            return (int)cfapi_h$constants$26.EnumResourceLanguagesExW$MH().invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceNamesExA$MH() {
        return cfapi_h$constants$26.EnumResourceNamesExA$MH();
    }
    public static @C("BOOL") int EnumResourceNamesExA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpType, @C("ENUMRESNAMEPROCA") Addressable lpEnumFunc, @C("LONG_PTR") long lParam, @C("DWORD") int dwFlags, @C("LANGID") short LangId) {
        try {
            return (int)cfapi_h$constants$26.EnumResourceNamesExA$MH().invokeExact(hModule.address(), lpType.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceNamesExW$MH() {
        return cfapi_h$constants$26.EnumResourceNamesExW$MH();
    }
    public static @C("BOOL") int EnumResourceNamesExW (@C("HMODULE") Addressable hModule, @C("LPCWSTR") Addressable lpType, @C("ENUMRESNAMEPROCW") Addressable lpEnumFunc, @C("LONG_PTR") long lParam, @C("DWORD") int dwFlags, @C("LANGID") short LangId) {
        try {
            return (int)cfapi_h$constants$26.EnumResourceNamesExW$MH().invokeExact(hModule.address(), lpType.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceTypesExA$MH() {
        return cfapi_h$constants$26.EnumResourceTypesExA$MH();
    }
    public static @C("BOOL") int EnumResourceTypesExA (@C("HMODULE") Addressable hModule, @C("ENUMRESTYPEPROCA") Addressable lpEnumFunc, @C("LONG_PTR") long lParam, @C("DWORD") int dwFlags, @C("LANGID") short LangId) {
        try {
            return (int)cfapi_h$constants$26.EnumResourceTypesExA$MH().invokeExact(hModule.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceTypesExW$MH() {
        return cfapi_h$constants$26.EnumResourceTypesExW$MH();
    }
    public static @C("BOOL") int EnumResourceTypesExW (@C("HMODULE") Addressable hModule, @C("ENUMRESTYPEPROCW") Addressable lpEnumFunc, @C("LONG_PTR") long lParam, @C("DWORD") int dwFlags, @C("LANGID") short LangId) {
        try {
            return (int)cfapi_h$constants$26.EnumResourceTypesExW$MH().invokeExact(hModule.address(), lpEnumFunc.address(), lParam, dwFlags, LangId);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindResourceW$MH() {
        return cfapi_h$constants$26.FindResourceW$MH();
    }
    public static @C("HRSRC") MemoryAddress FindResourceW (@C("HMODULE") Addressable hModule, @C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpType) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.FindResourceW$MH().invokeExact(hModule.address(), lpName.address(), lpType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadLibraryA$MH() {
        return cfapi_h$constants$26.LoadLibraryA$MH();
    }
    public static @C("HMODULE") MemoryAddress LoadLibraryA (@C("LPCSTR") Addressable lpLibFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LoadLibraryA$MH().invokeExact(lpLibFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadLibraryW$MH() {
        return cfapi_h$constants$26.LoadLibraryW$MH();
    }
    public static @C("HMODULE") MemoryAddress LoadLibraryW (@C("LPCWSTR") Addressable lpLibFileName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LoadLibraryW$MH().invokeExact(lpLibFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceNamesW$MH() {
        return cfapi_h$constants$26.EnumResourceNamesW$MH();
    }
    public static @C("BOOL") int EnumResourceNamesW (@C("HMODULE") Addressable hModule, @C("LPCWSTR") Addressable lpType, @C("ENUMRESNAMEPROCW") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$26.EnumResourceNamesW$MH().invokeExact(hModule.address(), lpType.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheck$MH() {
        return cfapi_h$constants$26.AccessCheck$MH();
    }
    public static @C("BOOL") int AccessCheck (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("HANDLE") Addressable ClientToken, @C("DWORD") int DesiredAccess, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("PPRIVILEGE_SET") Addressable PrivilegeSet, @C("LPDWORD") Addressable PrivilegeSetLength, @C("LPDWORD") Addressable GrantedAccess, @C("LPBOOL") Addressable AccessStatus) {
        try {
            return (int)cfapi_h$constants$26.AccessCheck$MH().invokeExact(pSecurityDescriptor.address(), ClientToken.address(), DesiredAccess, GenericMapping.address(), PrivilegeSet.address(), PrivilegeSetLength.address(), GrantedAccess.address(), AccessStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckAndAuditAlarmW$MH() {
        return cfapi_h$constants$26.AccessCheckAndAuditAlarmW$MH();
    }
    public static @C("BOOL") int AccessCheckAndAuditAlarmW (@C("LPCWSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPWSTR") Addressable ObjectTypeName, @C("LPWSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("DWORD") int DesiredAccess, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPBOOL") Addressable AccessStatus, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)cfapi_h$constants$26.AccessCheckAndAuditAlarmW$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), DesiredAccess, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatus.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByType$MH() {
        return cfapi_h$constants$26.AccessCheckByType$MH();
    }
    public static @C("BOOL") int AccessCheckByType (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("HANDLE") Addressable ClientToken, @C("DWORD") int DesiredAccess, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("PPRIVILEGE_SET") Addressable PrivilegeSet, @C("LPDWORD") Addressable PrivilegeSetLength, @C("LPDWORD") Addressable GrantedAccess, @C("LPBOOL") Addressable AccessStatus) {
        try {
            return (int)cfapi_h$constants$26.AccessCheckByType$MH().invokeExact(pSecurityDescriptor.address(), PrincipalSelfSid.address(), ClientToken.address(), DesiredAccess, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), PrivilegeSet.address(), PrivilegeSetLength.address(), GrantedAccess.address(), AccessStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeResultList$MH() {
        return cfapi_h$constants$26.AccessCheckByTypeResultList$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeResultList (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("HANDLE") Addressable ClientToken, @C("DWORD") int DesiredAccess, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("PPRIVILEGE_SET") Addressable PrivilegeSet, @C("LPDWORD") Addressable PrivilegeSetLength, @C("LPDWORD") Addressable GrantedAccessList, @C("LPDWORD") Addressable AccessStatusList) {
        try {
            return (int)cfapi_h$constants$26.AccessCheckByTypeResultList$MH().invokeExact(pSecurityDescriptor.address(), PrincipalSelfSid.address(), ClientToken.address(), DesiredAccess, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), PrivilegeSet.address(), PrivilegeSetLength.address(), GrantedAccessList.address(), AccessStatusList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeAndAuditAlarmW$MH() {
        return cfapi_h$constants$26.AccessCheckByTypeAndAuditAlarmW$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeAndAuditAlarmW (@C("LPCWSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPCWSTR") Addressable ObjectTypeName, @C("LPCWSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("DWORD") int DesiredAccess, @C("AUDIT_EVENT_TYPE") int AuditType, @C("DWORD") int Flags, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccess, @C("LPBOOL") Addressable AccessStatus, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)cfapi_h$constants$26.AccessCheckByTypeAndAuditAlarmW$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccess.address(), AccessStatus.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeResultListAndAuditAlarmW$MH() {
        return cfapi_h$constants$26.AccessCheckByTypeResultListAndAuditAlarmW$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeResultListAndAuditAlarmW (@C("LPCWSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPCWSTR") Addressable ObjectTypeName, @C("LPCWSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("DWORD") int DesiredAccess, @C("AUDIT_EVENT_TYPE") int AuditType, @C("DWORD") int Flags, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccessList, @C("LPDWORD") Addressable AccessStatusList, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)cfapi_h$constants$26.AccessCheckByTypeResultListAndAuditAlarmW$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccessList.address(), AccessStatusList.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH() {
        return cfapi_h$constants$26.AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH();
    }
    public static @C("BOOL") int AccessCheckByTypeResultListAndAuditAlarmByHandleW (@C("LPCWSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("HANDLE") Addressable ClientToken, @C("LPCWSTR") Addressable ObjectTypeName, @C("LPCWSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PSID") Addressable PrincipalSelfSid, @C("DWORD") int DesiredAccess, @C("AUDIT_EVENT_TYPE") int AuditType, @C("DWORD") int Flags, @C("POBJECT_TYPE_LIST") Addressable ObjectTypeList, @C("DWORD") int ObjectTypeListLength, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("BOOL") int ObjectCreation, @C("LPDWORD") Addressable GrantedAccessList, @C("LPDWORD") Addressable AccessStatusList, @C("LPBOOL") Addressable pfGenerateOnClose) {
        try {
            return (int)cfapi_h$constants$26.AccessCheckByTypeResultListAndAuditAlarmByHandleW$MH().invokeExact(SubsystemName.address(), HandleId.address(), ClientToken.address(), ObjectTypeName.address(), ObjectName.address(), SecurityDescriptor.address(), PrincipalSelfSid.address(), DesiredAccess, AuditType, Flags, ObjectTypeList.address(), ObjectTypeListLength, GenericMapping.address(), ObjectCreation, GrantedAccessList.address(), AccessStatusList.address(), pfGenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAccessAllowedAce$MH() {
        return cfapi_h$constants$26.AddAccessAllowedAce$MH();
    }
    public static @C("BOOL") int AddAccessAllowedAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AccessMask, @C("PSID") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.AddAccessAllowedAce$MH().invokeExact(pAcl.address(), dwAceRevision, AccessMask, pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAccessAllowedAceEx$MH() {
        return cfapi_h$constants$26.AddAccessAllowedAceEx$MH();
    }
    public static @C("BOOL") int AddAccessAllowedAceEx (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("DWORD") int AccessMask, @C("PSID") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.AddAccessAllowedAceEx$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAccessAllowedObjectAce$MH() {
        return cfapi_h$constants$26.AddAccessAllowedObjectAce$MH();
    }
    public static @C("BOOL") int AddAccessAllowedObjectAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("DWORD") int AccessMask, @C("GUID*") Addressable ObjectTypeGuid, @C("GUID*") Addressable InheritedObjectTypeGuid, @C("PSID") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.AddAccessAllowedObjectAce$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid.address(), InheritedObjectTypeGuid.address(), pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAccessDeniedAce$MH() {
        return cfapi_h$constants$26.AddAccessDeniedAce$MH();
    }
    public static @C("BOOL") int AddAccessDeniedAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AccessMask, @C("PSID") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.AddAccessDeniedAce$MH().invokeExact(pAcl.address(), dwAceRevision, AccessMask, pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAccessDeniedAceEx$MH() {
        return cfapi_h$constants$26.AddAccessDeniedAceEx$MH();
    }
    public static @C("BOOL") int AddAccessDeniedAceEx (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("DWORD") int AccessMask, @C("PSID") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.AddAccessDeniedAceEx$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAccessDeniedObjectAce$MH() {
        return cfapi_h$constants$26.AddAccessDeniedObjectAce$MH();
    }
    public static @C("BOOL") int AddAccessDeniedObjectAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("DWORD") int AccessMask, @C("GUID*") Addressable ObjectTypeGuid, @C("GUID*") Addressable InheritedObjectTypeGuid, @C("PSID") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.AddAccessDeniedObjectAce$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid.address(), InheritedObjectTypeGuid.address(), pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAce$MH() {
        return cfapi_h$constants$26.AddAce$MH();
    }
    public static @C("BOOL") int AddAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int dwStartingAceIndex, @C("LPVOID") Addressable pAceList, @C("DWORD") int nAceListLength) {
        try {
            return (int)cfapi_h$constants$26.AddAce$MH().invokeExact(pAcl.address(), dwAceRevision, dwStartingAceIndex, pAceList.address(), nAceListLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAuditAccessAce$MH() {
        return cfapi_h$constants$26.AddAuditAccessAce$MH();
    }
    public static @C("BOOL") int AddAuditAccessAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int dwAccessMask, @C("PSID") Addressable pSid, @C("BOOL") int bAuditSuccess, @C("BOOL") int bAuditFailure) {
        try {
            return (int)cfapi_h$constants$26.AddAuditAccessAce$MH().invokeExact(pAcl.address(), dwAceRevision, dwAccessMask, pSid.address(), bAuditSuccess, bAuditFailure);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAuditAccessAceEx$MH() {
        return cfapi_h$constants$26.AddAuditAccessAceEx$MH();
    }
    public static @C("BOOL") int AddAuditAccessAceEx (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("DWORD") int dwAccessMask, @C("PSID") Addressable pSid, @C("BOOL") int bAuditSuccess, @C("BOOL") int bAuditFailure) {
        try {
            return (int)cfapi_h$constants$26.AddAuditAccessAceEx$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, dwAccessMask, pSid.address(), bAuditSuccess, bAuditFailure);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAuditAccessObjectAce$MH() {
        return cfapi_h$constants$26.AddAuditAccessObjectAce$MH();
    }
    public static @C("BOOL") int AddAuditAccessObjectAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("DWORD") int AccessMask, @C("GUID*") Addressable ObjectTypeGuid, @C("GUID*") Addressable InheritedObjectTypeGuid, @C("PSID") Addressable pSid, @C("BOOL") int bAuditSuccess, @C("BOOL") int bAuditFailure) {
        try {
            return (int)cfapi_h$constants$26.AddAuditAccessObjectAce$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid.address(), InheritedObjectTypeGuid.address(), pSid.address(), bAuditSuccess, bAuditFailure);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddMandatoryAce$MH() {
        return cfapi_h$constants$26.AddMandatoryAce$MH();
    }
    public static @C("BOOL") int AddMandatoryAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("DWORD") int MandatoryPolicy, @C("PSID") Addressable pLabelSid) {
        try {
            return (int)cfapi_h$constants$26.AddMandatoryAce$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, MandatoryPolicy, pLabelSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddResourceAttributeAce$MH() {
        return cfapi_h$constants$26.AddResourceAttributeAce$MH();
    }
    public static @C("BOOL") int AddResourceAttributeAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("DWORD") int AccessMask, @C("PSID") Addressable pSid, @C("PCLAIM_SECURITY_ATTRIBUTES_INFORMATION") Addressable pAttributeInfo, @C("PDWORD") Addressable pReturnLength) {
        try {
            return (int)cfapi_h$constants$26.AddResourceAttributeAce$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, pSid.address(), pAttributeInfo.address(), pReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddScopedPolicyIDAce$MH() {
        return cfapi_h$constants$26.AddScopedPolicyIDAce$MH();
    }
    public static @C("BOOL") int AddScopedPolicyIDAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceRevision, @C("DWORD") int AceFlags, @C("DWORD") int AccessMask, @C("PSID") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.AddScopedPolicyIDAce$MH().invokeExact(pAcl.address(), dwAceRevision, AceFlags, AccessMask, pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AdjustTokenGroups$MH() {
        return cfapi_h$constants$26.AdjustTokenGroups$MH();
    }
    public static @C("BOOL") int AdjustTokenGroups (@C("HANDLE") Addressable TokenHandle, @C("BOOL") int ResetToDefault, @C("PTOKEN_GROUPS") Addressable NewState, @C("DWORD") int BufferLength, @C("PTOKEN_GROUPS") Addressable PreviousState, @C("PDWORD") Addressable ReturnLength) {
        try {
            return (int)cfapi_h$constants$26.AdjustTokenGroups$MH().invokeExact(TokenHandle.address(), ResetToDefault, NewState.address(), BufferLength, PreviousState.address(), ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AdjustTokenPrivileges$MH() {
        return cfapi_h$constants$26.AdjustTokenPrivileges$MH();
    }
    public static @C("BOOL") int AdjustTokenPrivileges (@C("HANDLE") Addressable TokenHandle, @C("BOOL") int DisableAllPrivileges, @C("PTOKEN_PRIVILEGES") Addressable NewState, @C("DWORD") int BufferLength, @C("PTOKEN_PRIVILEGES") Addressable PreviousState, @C("PDWORD") Addressable ReturnLength) {
        try {
            return (int)cfapi_h$constants$26.AdjustTokenPrivileges$MH().invokeExact(TokenHandle.address(), DisableAllPrivileges, NewState.address(), BufferLength, PreviousState.address(), ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AllocateAndInitializeSid$MH() {
        return cfapi_h$constants$26.AllocateAndInitializeSid$MH();
    }
    public static @C("BOOL") int AllocateAndInitializeSid (@C("PSID_IDENTIFIER_AUTHORITY") Addressable pIdentifierAuthority, @C("BYTE") byte nSubAuthorityCount, @C("DWORD") int nSubAuthority0, @C("DWORD") int nSubAuthority1, @C("DWORD") int nSubAuthority2, @C("DWORD") int nSubAuthority3, @C("DWORD") int nSubAuthority4, @C("DWORD") int nSubAuthority5, @C("DWORD") int nSubAuthority6, @C("DWORD") int nSubAuthority7, @C("PSID*") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.AllocateAndInitializeSid$MH().invokeExact(pIdentifierAuthority.address(), nSubAuthorityCount, nSubAuthority0, nSubAuthority1, nSubAuthority2, nSubAuthority3, nSubAuthority4, nSubAuthority5, nSubAuthority6, nSubAuthority7, pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AllocateLocallyUniqueId$MH() {
        return cfapi_h$constants$26.AllocateLocallyUniqueId$MH();
    }
    public static @C("BOOL") int AllocateLocallyUniqueId (@C("PLUID") Addressable Luid) {
        try {
            return (int)cfapi_h$constants$26.AllocateLocallyUniqueId$MH().invokeExact(Luid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AreAllAccessesGranted$MH() {
        return cfapi_h$constants$26.AreAllAccessesGranted$MH();
    }
    public static @C("BOOL") int AreAllAccessesGranted (@C("DWORD") int GrantedAccess, @C("DWORD") int DesiredAccess) {
        try {
            return (int)cfapi_h$constants$26.AreAllAccessesGranted$MH().invokeExact(GrantedAccess, DesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AreAnyAccessesGranted$MH() {
        return cfapi_h$constants$26.AreAnyAccessesGranted$MH();
    }
    public static @C("BOOL") int AreAnyAccessesGranted (@C("DWORD") int GrantedAccess, @C("DWORD") int DesiredAccess) {
        try {
            return (int)cfapi_h$constants$26.AreAnyAccessesGranted$MH().invokeExact(GrantedAccess, DesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckTokenMembership$MH() {
        return cfapi_h$constants$26.CheckTokenMembership$MH();
    }
    public static @C("BOOL") int CheckTokenMembership (@C("HANDLE") Addressable TokenHandle, @C("PSID") Addressable SidToCheck, @C("PBOOL") Addressable IsMember) {
        try {
            return (int)cfapi_h$constants$26.CheckTokenMembership$MH().invokeExact(TokenHandle.address(), SidToCheck.address(), IsMember.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckTokenCapability$MH() {
        return cfapi_h$constants$26.CheckTokenCapability$MH();
    }
    public static @C("BOOL") int CheckTokenCapability (@C("HANDLE") Addressable TokenHandle, @C("PSID") Addressable CapabilitySidToCheck, @C("PBOOL") Addressable HasCapability) {
        try {
            return (int)cfapi_h$constants$26.CheckTokenCapability$MH().invokeExact(TokenHandle.address(), CapabilitySidToCheck.address(), HasCapability.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAppContainerAce$MH() {
        return cfapi_h$constants$26.GetAppContainerAce$MH();
    }
    public static @C("BOOL") int GetAppContainerAce (@C("PACL") Addressable Acl, @C("DWORD") int StartingAceIndex, @C("PVOID*") Addressable AppContainerAce, @C("DWORD*") Addressable AppContainerAceIndex) {
        try {
            return (int)cfapi_h$constants$26.GetAppContainerAce$MH().invokeExact(Acl.address(), StartingAceIndex, AppContainerAce.address(), AppContainerAceIndex.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CheckTokenMembershipEx$MH() {
        return cfapi_h$constants$26.CheckTokenMembershipEx$MH();
    }
    public static @C("BOOL") int CheckTokenMembershipEx (@C("HANDLE") Addressable TokenHandle, @C("PSID") Addressable SidToCheck, @C("DWORD") int Flags, @C("PBOOL") Addressable IsMember) {
        try {
            return (int)cfapi_h$constants$26.CheckTokenMembershipEx$MH().invokeExact(TokenHandle.address(), SidToCheck.address(), Flags, IsMember.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ConvertToAutoInheritPrivateObjectSecurity$MH() {
        return cfapi_h$constants$26.ConvertToAutoInheritPrivateObjectSecurity$MH();
    }
    public static @C("BOOL") int ConvertToAutoInheritPrivateObjectSecurity (@C("PSECURITY_DESCRIPTOR") Addressable ParentDescriptor, @C("PSECURITY_DESCRIPTOR") Addressable CurrentSecurityDescriptor, @C("PSECURITY_DESCRIPTOR*") Addressable NewSecurityDescriptor, @C("GUID*") Addressable ObjectType, @C("BOOLEAN") byte IsDirectoryObject, @C("PGENERIC_MAPPING") Addressable GenericMapping) {
        try {
            return (int)cfapi_h$constants$26.ConvertToAutoInheritPrivateObjectSecurity$MH().invokeExact(ParentDescriptor.address(), CurrentSecurityDescriptor.address(), NewSecurityDescriptor.address(), ObjectType.address(), IsDirectoryObject, GenericMapping.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CopySid$MH() {
        return cfapi_h$constants$26.CopySid$MH();
    }
    public static @C("BOOL") int CopySid (@C("DWORD") int nDestinationSidLength, @C("PSID") Addressable pDestinationSid, @C("PSID") Addressable pSourceSid) {
        try {
            return (int)cfapi_h$constants$26.CopySid$MH().invokeExact(nDestinationSidLength, pDestinationSid.address(), pSourceSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePrivateObjectSecurity$MH() {
        return cfapi_h$constants$26.CreatePrivateObjectSecurity$MH();
    }
    public static @C("BOOL") int CreatePrivateObjectSecurity (@C("PSECURITY_DESCRIPTOR") Addressable ParentDescriptor, @C("PSECURITY_DESCRIPTOR") Addressable CreatorDescriptor, @C("PSECURITY_DESCRIPTOR*") Addressable NewDescriptor, @C("BOOL") int IsDirectoryObject, @C("HANDLE") Addressable Token, @C("PGENERIC_MAPPING") Addressable GenericMapping) {
        try {
            return (int)cfapi_h$constants$26.CreatePrivateObjectSecurity$MH().invokeExact(ParentDescriptor.address(), CreatorDescriptor.address(), NewDescriptor.address(), IsDirectoryObject, Token.address(), GenericMapping.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePrivateObjectSecurityEx$MH() {
        return cfapi_h$constants$26.CreatePrivateObjectSecurityEx$MH();
    }
    public static @C("BOOL") int CreatePrivateObjectSecurityEx (@C("PSECURITY_DESCRIPTOR") Addressable ParentDescriptor, @C("PSECURITY_DESCRIPTOR") Addressable CreatorDescriptor, @C("PSECURITY_DESCRIPTOR*") Addressable NewDescriptor, @C("GUID*") Addressable ObjectType, @C("BOOL") int IsContainerObject, @C("ULONG") int AutoInheritFlags, @C("HANDLE") Addressable Token, @C("PGENERIC_MAPPING") Addressable GenericMapping) {
        try {
            return (int)cfapi_h$constants$26.CreatePrivateObjectSecurityEx$MH().invokeExact(ParentDescriptor.address(), CreatorDescriptor.address(), NewDescriptor.address(), ObjectType.address(), IsContainerObject, AutoInheritFlags, Token.address(), GenericMapping.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePrivateObjectSecurityWithMultipleInheritance$MH() {
        return cfapi_h$constants$26.CreatePrivateObjectSecurityWithMultipleInheritance$MH();
    }
    public static @C("BOOL") int CreatePrivateObjectSecurityWithMultipleInheritance (@C("PSECURITY_DESCRIPTOR") Addressable ParentDescriptor, @C("PSECURITY_DESCRIPTOR") Addressable CreatorDescriptor, @C("PSECURITY_DESCRIPTOR*") Addressable NewDescriptor, @C("GUID**") Addressable ObjectTypes, @C("ULONG") int GuidCount, @C("BOOL") int IsContainerObject, @C("ULONG") int AutoInheritFlags, @C("HANDLE") Addressable Token, @C("PGENERIC_MAPPING") Addressable GenericMapping) {
        try {
            return (int)cfapi_h$constants$26.CreatePrivateObjectSecurityWithMultipleInheritance$MH().invokeExact(ParentDescriptor.address(), CreatorDescriptor.address(), NewDescriptor.address(), ObjectTypes.address(), GuidCount, IsContainerObject, AutoInheritFlags, Token.address(), GenericMapping.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateRestrictedToken$MH() {
        return cfapi_h$constants$26.CreateRestrictedToken$MH();
    }
    public static @C("BOOL") int CreateRestrictedToken (@C("HANDLE") Addressable ExistingTokenHandle, @C("DWORD") int Flags, @C("DWORD") int DisableSidCount, @C("PSID_AND_ATTRIBUTES") Addressable SidsToDisable, @C("DWORD") int DeletePrivilegeCount, @C("PLUID_AND_ATTRIBUTES") Addressable PrivilegesToDelete, @C("DWORD") int RestrictedSidCount, @C("PSID_AND_ATTRIBUTES") Addressable SidsToRestrict, @C("PHANDLE") Addressable NewTokenHandle) {
        try {
            return (int)cfapi_h$constants$26.CreateRestrictedToken$MH().invokeExact(ExistingTokenHandle.address(), Flags, DisableSidCount, SidsToDisable.address(), DeletePrivilegeCount, PrivilegesToDelete.address(), RestrictedSidCount, SidsToRestrict.address(), NewTokenHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWellKnownSid$MH() {
        return cfapi_h$constants$26.CreateWellKnownSid$MH();
    }
    public static @C("BOOL") int CreateWellKnownSid (@C("WELL_KNOWN_SID_TYPE") int WellKnownSidType, @C("PSID") Addressable DomainSid, @C("PSID") Addressable pSid, @C("DWORD*") Addressable cbSid) {
        try {
            return (int)cfapi_h$constants$26.CreateWellKnownSid$MH().invokeExact(WellKnownSidType, DomainSid.address(), pSid.address(), cbSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EqualDomainSid$MH() {
        return cfapi_h$constants$26.EqualDomainSid$MH();
    }
    public static @C("BOOL") int EqualDomainSid (@C("PSID") Addressable pSid1, @C("PSID") Addressable pSid2, @C("BOOL*") Addressable pfEqual) {
        try {
            return (int)cfapi_h$constants$26.EqualDomainSid$MH().invokeExact(pSid1.address(), pSid2.address(), pfEqual.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteAce$MH() {
        return cfapi_h$constants$26.DeleteAce$MH();
    }
    public static @C("BOOL") int DeleteAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceIndex) {
        try {
            return (int)cfapi_h$constants$26.DeleteAce$MH().invokeExact(pAcl.address(), dwAceIndex);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DestroyPrivateObjectSecurity$MH() {
        return cfapi_h$constants$26.DestroyPrivateObjectSecurity$MH();
    }
    public static @C("BOOL") int DestroyPrivateObjectSecurity (@C("PSECURITY_DESCRIPTOR*") Addressable ObjectDescriptor) {
        try {
            return (int)cfapi_h$constants$26.DestroyPrivateObjectSecurity$MH().invokeExact(ObjectDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DuplicateToken$MH() {
        return cfapi_h$constants$26.DuplicateToken$MH();
    }
    public static @C("BOOL") int DuplicateToken (@C("HANDLE") Addressable ExistingTokenHandle, @C("SECURITY_IMPERSONATION_LEVEL") int ImpersonationLevel, @C("PHANDLE") Addressable DuplicateTokenHandle) {
        try {
            return (int)cfapi_h$constants$26.DuplicateToken$MH().invokeExact(ExistingTokenHandle.address(), ImpersonationLevel, DuplicateTokenHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DuplicateTokenEx$MH() {
        return cfapi_h$constants$26.DuplicateTokenEx$MH();
    }
    public static @C("BOOL") int DuplicateTokenEx (@C("HANDLE") Addressable hExistingToken, @C("DWORD") int dwDesiredAccess, @C("LPSECURITY_ATTRIBUTES") Addressable lpTokenAttributes, @C("SECURITY_IMPERSONATION_LEVEL") int ImpersonationLevel, @C("TOKEN_TYPE") int TokenType, @C("PHANDLE") Addressable phNewToken) {
        try {
            return (int)cfapi_h$constants$26.DuplicateTokenEx$MH().invokeExact(hExistingToken.address(), dwDesiredAccess, lpTokenAttributes.address(), ImpersonationLevel, TokenType, phNewToken.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EqualPrefixSid$MH() {
        return cfapi_h$constants$26.EqualPrefixSid$MH();
    }
    public static @C("BOOL") int EqualPrefixSid (@C("PSID") Addressable pSid1, @C("PSID") Addressable pSid2) {
        try {
            return (int)cfapi_h$constants$26.EqualPrefixSid$MH().invokeExact(pSid1.address(), pSid2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EqualSid$MH() {
        return cfapi_h$constants$26.EqualSid$MH();
    }
    public static @C("BOOL") int EqualSid (@C("PSID") Addressable pSid1, @C("PSID") Addressable pSid2) {
        try {
            return (int)cfapi_h$constants$26.EqualSid$MH().invokeExact(pSid1.address(), pSid2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindFirstFreeAce$MH() {
        return cfapi_h$constants$26.FindFirstFreeAce$MH();
    }
    public static @C("BOOL") int FindFirstFreeAce (@C("PACL") Addressable pAcl, @C("LPVOID*") Addressable pAce) {
        try {
            return (int)cfapi_h$constants$26.FindFirstFreeAce$MH().invokeExact(pAcl.address(), pAce.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FreeSid$MH() {
        return cfapi_h$constants$26.FreeSid$MH();
    }
    public static @C("PVOID") MemoryAddress FreeSid (@C("PSID") Addressable pSid) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.FreeSid$MH().invokeExact(pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAce$MH() {
        return cfapi_h$constants$26.GetAce$MH();
    }
    public static @C("BOOL") int GetAce (@C("PACL") Addressable pAcl, @C("DWORD") int dwAceIndex, @C("LPVOID*") Addressable pAce) {
        try {
            return (int)cfapi_h$constants$26.GetAce$MH().invokeExact(pAcl.address(), dwAceIndex, pAce.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAclInformation$MH() {
        return cfapi_h$constants$26.GetAclInformation$MH();
    }
    public static @C("BOOL") int GetAclInformation (@C("PACL") Addressable pAcl, @C("LPVOID") Addressable pAclInformation, @C("DWORD") int nAclInformationLength, @C("ACL_INFORMATION_CLASS") int dwAclInformationClass) {
        try {
            return (int)cfapi_h$constants$26.GetAclInformation$MH().invokeExact(pAcl.address(), pAclInformation.address(), nAclInformationLength, dwAclInformationClass);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFileSecurityW$MH() {
        return cfapi_h$constants$26.GetFileSecurityW$MH();
    }
    public static @C("BOOL") int GetFileSecurityW (@C("LPCWSTR") Addressable lpFileName, @C("SECURITY_INFORMATION") int RequestedInformation, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpnLengthNeeded) {
        try {
            return (int)cfapi_h$constants$26.GetFileSecurityW$MH().invokeExact(lpFileName.address(), RequestedInformation, pSecurityDescriptor.address(), nLength, lpnLengthNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetKernelObjectSecurity$MH() {
        return cfapi_h$constants$26.GetKernelObjectSecurity$MH();
    }
    public static @C("BOOL") int GetKernelObjectSecurity (@C("HANDLE") Addressable Handle, @C("SECURITY_INFORMATION") int RequestedInformation, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("DWORD") int nLength, @C("LPDWORD") Addressable lpnLengthNeeded) {
        try {
            return (int)cfapi_h$constants$26.GetKernelObjectSecurity$MH().invokeExact(Handle.address(), RequestedInformation, pSecurityDescriptor.address(), nLength, lpnLengthNeeded.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLengthSid$MH() {
        return cfapi_h$constants$26.GetLengthSid$MH();
    }
    public static @C("DWORD") int GetLengthSid (@C("PSID") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.GetLengthSid$MH().invokeExact(pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateObjectSecurity$MH() {
        return cfapi_h$constants$26.GetPrivateObjectSecurity$MH();
    }
    public static @C("BOOL") int GetPrivateObjectSecurity (@C("PSECURITY_DESCRIPTOR") Addressable ObjectDescriptor, @C("SECURITY_INFORMATION") int SecurityInformation, @C("PSECURITY_DESCRIPTOR") Addressable ResultantDescriptor, @C("DWORD") int DescriptorLength, @C("PDWORD") Addressable ReturnLength) {
        try {
            return (int)cfapi_h$constants$26.GetPrivateObjectSecurity$MH().invokeExact(ObjectDescriptor.address(), SecurityInformation, ResultantDescriptor.address(), DescriptorLength, ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSecurityDescriptorControl$MH() {
        return cfapi_h$constants$26.GetSecurityDescriptorControl$MH();
    }
    public static @C("BOOL") int GetSecurityDescriptorControl (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("PSECURITY_DESCRIPTOR_CONTROL") Addressable pControl, @C("LPDWORD") Addressable lpdwRevision) {
        try {
            return (int)cfapi_h$constants$26.GetSecurityDescriptorControl$MH().invokeExact(pSecurityDescriptor.address(), pControl.address(), lpdwRevision.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSecurityDescriptorDacl$MH() {
        return cfapi_h$constants$26.GetSecurityDescriptorDacl$MH();
    }
    public static @C("BOOL") int GetSecurityDescriptorDacl (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("LPBOOL") Addressable lpbDaclPresent, @C("PACL*") Addressable pDacl, @C("LPBOOL") Addressable lpbDaclDefaulted) {
        try {
            return (int)cfapi_h$constants$26.GetSecurityDescriptorDacl$MH().invokeExact(pSecurityDescriptor.address(), lpbDaclPresent.address(), pDacl.address(), lpbDaclDefaulted.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSecurityDescriptorGroup$MH() {
        return cfapi_h$constants$26.GetSecurityDescriptorGroup$MH();
    }
    public static @C("BOOL") int GetSecurityDescriptorGroup (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("PSID*") Addressable pGroup, @C("LPBOOL") Addressable lpbGroupDefaulted) {
        try {
            return (int)cfapi_h$constants$26.GetSecurityDescriptorGroup$MH().invokeExact(pSecurityDescriptor.address(), pGroup.address(), lpbGroupDefaulted.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSecurityDescriptorLength$MH() {
        return cfapi_h$constants$26.GetSecurityDescriptorLength$MH();
    }
    public static @C("DWORD") int GetSecurityDescriptorLength (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor) {
        try {
            return (int)cfapi_h$constants$26.GetSecurityDescriptorLength$MH().invokeExact(pSecurityDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSecurityDescriptorOwner$MH() {
        return cfapi_h$constants$26.GetSecurityDescriptorOwner$MH();
    }
    public static @C("BOOL") int GetSecurityDescriptorOwner (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("PSID*") Addressable pOwner, @C("LPBOOL") Addressable lpbOwnerDefaulted) {
        try {
            return (int)cfapi_h$constants$26.GetSecurityDescriptorOwner$MH().invokeExact(pSecurityDescriptor.address(), pOwner.address(), lpbOwnerDefaulted.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSecurityDescriptorRMControl$MH() {
        return cfapi_h$constants$26.GetSecurityDescriptorRMControl$MH();
    }
    public static @C("DWORD") int GetSecurityDescriptorRMControl (@C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PUCHAR") Addressable RMControl) {
        try {
            return (int)cfapi_h$constants$26.GetSecurityDescriptorRMControl$MH().invokeExact(SecurityDescriptor.address(), RMControl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSecurityDescriptorSacl$MH() {
        return cfapi_h$constants$26.GetSecurityDescriptorSacl$MH();
    }
    public static @C("BOOL") int GetSecurityDescriptorSacl (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("LPBOOL") Addressable lpbSaclPresent, @C("PACL*") Addressable pSacl, @C("LPBOOL") Addressable lpbSaclDefaulted) {
        try {
            return (int)cfapi_h$constants$26.GetSecurityDescriptorSacl$MH().invokeExact(pSecurityDescriptor.address(), lpbSaclPresent.address(), pSacl.address(), lpbSaclDefaulted.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSidIdentifierAuthority$MH() {
        return cfapi_h$constants$26.GetSidIdentifierAuthority$MH();
    }
    public static @C("PSID_IDENTIFIER_AUTHORITY") MemoryAddress GetSidIdentifierAuthority (@C("PSID") Addressable pSid) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GetSidIdentifierAuthority$MH().invokeExact(pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSidLengthRequired$MH() {
        return cfapi_h$constants$26.GetSidLengthRequired$MH();
    }
    public static @C("DWORD") int GetSidLengthRequired (@C("UCHAR") byte nSubAuthorityCount) {
        try {
            return (int)cfapi_h$constants$26.GetSidLengthRequired$MH().invokeExact(nSubAuthorityCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSidSubAuthority$MH() {
        return cfapi_h$constants$26.GetSidSubAuthority$MH();
    }
    public static @C("PDWORD") MemoryAddress GetSidSubAuthority (@C("PSID") Addressable pSid, @C("DWORD") int nSubAuthority) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GetSidSubAuthority$MH().invokeExact(pSid.address(), nSubAuthority);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSidSubAuthorityCount$MH() {
        return cfapi_h$constants$26.GetSidSubAuthorityCount$MH();
    }
    public static @C("PUCHAR") MemoryAddress GetSidSubAuthorityCount (@C("PSID") Addressable pSid) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GetSidSubAuthorityCount$MH().invokeExact(pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTokenInformation$MH() {
        return cfapi_h$constants$26.GetTokenInformation$MH();
    }
    public static @C("BOOL") int GetTokenInformation (@C("HANDLE") Addressable TokenHandle, @C("TOKEN_INFORMATION_CLASS") int TokenInformationClass, @C("LPVOID") Addressable TokenInformation, @C("DWORD") int TokenInformationLength, @C("PDWORD") Addressable ReturnLength) {
        try {
            return (int)cfapi_h$constants$26.GetTokenInformation$MH().invokeExact(TokenHandle.address(), TokenInformationClass, TokenInformation.address(), TokenInformationLength, ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetWindowsAccountDomainSid$MH() {
        return cfapi_h$constants$26.GetWindowsAccountDomainSid$MH();
    }
    public static @C("BOOL") int GetWindowsAccountDomainSid (@C("PSID") Addressable pSid, @C("PSID") Addressable pDomainSid, @C("DWORD*") Addressable cbDomainSid) {
        try {
            return (int)cfapi_h$constants$26.GetWindowsAccountDomainSid$MH().invokeExact(pSid.address(), pDomainSid.address(), cbDomainSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ImpersonateAnonymousToken$MH() {
        return cfapi_h$constants$26.ImpersonateAnonymousToken$MH();
    }
    public static @C("BOOL") int ImpersonateAnonymousToken (@C("HANDLE") Addressable ThreadHandle) {
        try {
            return (int)cfapi_h$constants$26.ImpersonateAnonymousToken$MH().invokeExact(ThreadHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ImpersonateLoggedOnUser$MH() {
        return cfapi_h$constants$26.ImpersonateLoggedOnUser$MH();
    }
    public static @C("BOOL") int ImpersonateLoggedOnUser (@C("HANDLE") Addressable hToken) {
        try {
            return (int)cfapi_h$constants$26.ImpersonateLoggedOnUser$MH().invokeExact(hToken.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ImpersonateSelf$MH() {
        return cfapi_h$constants$26.ImpersonateSelf$MH();
    }
    public static @C("BOOL") int ImpersonateSelf (@C("SECURITY_IMPERSONATION_LEVEL") int ImpersonationLevel) {
        try {
            return (int)cfapi_h$constants$26.ImpersonateSelf$MH().invokeExact(ImpersonationLevel);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeAcl$MH() {
        return cfapi_h$constants$26.InitializeAcl$MH();
    }
    public static @C("BOOL") int InitializeAcl (@C("PACL") Addressable pAcl, @C("DWORD") int nAclLength, @C("DWORD") int dwAclRevision) {
        try {
            return (int)cfapi_h$constants$26.InitializeAcl$MH().invokeExact(pAcl.address(), nAclLength, dwAclRevision);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeSecurityDescriptor$MH() {
        return cfapi_h$constants$26.InitializeSecurityDescriptor$MH();
    }
    public static @C("BOOL") int InitializeSecurityDescriptor (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("DWORD") int dwRevision) {
        try {
            return (int)cfapi_h$constants$26.InitializeSecurityDescriptor$MH().invokeExact(pSecurityDescriptor.address(), dwRevision);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitializeSid$MH() {
        return cfapi_h$constants$26.InitializeSid$MH();
    }
    public static @C("BOOL") int InitializeSid (@C("PSID") Addressable Sid, @C("PSID_IDENTIFIER_AUTHORITY") Addressable pIdentifierAuthority, @C("BYTE") byte nSubAuthorityCount) {
        try {
            return (int)cfapi_h$constants$26.InitializeSid$MH().invokeExact(Sid.address(), pIdentifierAuthority.address(), nSubAuthorityCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsTokenRestricted$MH() {
        return cfapi_h$constants$26.IsTokenRestricted$MH();
    }
    public static @C("BOOL") int IsTokenRestricted (@C("HANDLE") Addressable TokenHandle) {
        try {
            return (int)cfapi_h$constants$26.IsTokenRestricted$MH().invokeExact(TokenHandle.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsValidAcl$MH() {
        return cfapi_h$constants$26.IsValidAcl$MH();
    }
    public static @C("BOOL") int IsValidAcl (@C("PACL") Addressable pAcl) {
        try {
            return (int)cfapi_h$constants$26.IsValidAcl$MH().invokeExact(pAcl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsValidSecurityDescriptor$MH() {
        return cfapi_h$constants$26.IsValidSecurityDescriptor$MH();
    }
    public static @C("BOOL") int IsValidSecurityDescriptor (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor) {
        try {
            return (int)cfapi_h$constants$26.IsValidSecurityDescriptor$MH().invokeExact(pSecurityDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsValidSid$MH() {
        return cfapi_h$constants$26.IsValidSid$MH();
    }
    public static @C("BOOL") int IsValidSid (@C("PSID") Addressable pSid) {
        try {
            return (int)cfapi_h$constants$26.IsValidSid$MH().invokeExact(pSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsWellKnownSid$MH() {
        return cfapi_h$constants$26.IsWellKnownSid$MH();
    }
    public static @C("BOOL") int IsWellKnownSid (@C("PSID") Addressable pSid, @C("WELL_KNOWN_SID_TYPE") int WellKnownSidType) {
        try {
            return (int)cfapi_h$constants$26.IsWellKnownSid$MH().invokeExact(pSid.address(), WellKnownSidType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MakeAbsoluteSD$MH() {
        return cfapi_h$constants$26.MakeAbsoluteSD$MH();
    }
    public static @C("BOOL") int MakeAbsoluteSD (@C("PSECURITY_DESCRIPTOR") Addressable pSelfRelativeSecurityDescriptor, @C("PSECURITY_DESCRIPTOR") Addressable pAbsoluteSecurityDescriptor, @C("LPDWORD") Addressable lpdwAbsoluteSecurityDescriptorSize, @C("PACL") Addressable pDacl, @C("LPDWORD") Addressable lpdwDaclSize, @C("PACL") Addressable pSacl, @C("LPDWORD") Addressable lpdwSaclSize, @C("PSID") Addressable pOwner, @C("LPDWORD") Addressable lpdwOwnerSize, @C("PSID") Addressable pPrimaryGroup, @C("LPDWORD") Addressable lpdwPrimaryGroupSize) {
        try {
            return (int)cfapi_h$constants$26.MakeAbsoluteSD$MH().invokeExact(pSelfRelativeSecurityDescriptor.address(), pAbsoluteSecurityDescriptor.address(), lpdwAbsoluteSecurityDescriptorSize.address(), pDacl.address(), lpdwDaclSize.address(), pSacl.address(), lpdwSaclSize.address(), pOwner.address(), lpdwOwnerSize.address(), pPrimaryGroup.address(), lpdwPrimaryGroupSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MakeSelfRelativeSD$MH() {
        return cfapi_h$constants$26.MakeSelfRelativeSD$MH();
    }
    public static @C("BOOL") int MakeSelfRelativeSD (@C("PSECURITY_DESCRIPTOR") Addressable pAbsoluteSecurityDescriptor, @C("PSECURITY_DESCRIPTOR") Addressable pSelfRelativeSecurityDescriptor, @C("LPDWORD") Addressable lpdwBufferLength) {
        try {
            return (int)cfapi_h$constants$26.MakeSelfRelativeSD$MH().invokeExact(pAbsoluteSecurityDescriptor.address(), pSelfRelativeSecurityDescriptor.address(), lpdwBufferLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MapGenericMask$MH() {
        return cfapi_h$constants$26.MapGenericMask$MH();
    }
    public static void MapGenericMask (@C("PDWORD") Addressable AccessMask, @C("PGENERIC_MAPPING") Addressable GenericMapping) {
        try {
            cfapi_h$constants$26.MapGenericMask$MH().invokeExact(AccessMask.address(), GenericMapping.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectCloseAuditAlarmW$MH() {
        return cfapi_h$constants$26.ObjectCloseAuditAlarmW$MH();
    }
    public static @C("BOOL") int ObjectCloseAuditAlarmW (@C("LPCWSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("BOOL") int GenerateOnClose) {
        try {
            return (int)cfapi_h$constants$26.ObjectCloseAuditAlarmW$MH().invokeExact(SubsystemName.address(), HandleId.address(), GenerateOnClose);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectDeleteAuditAlarmW$MH() {
        return cfapi_h$constants$26.ObjectDeleteAuditAlarmW$MH();
    }
    public static @C("BOOL") int ObjectDeleteAuditAlarmW (@C("LPCWSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("BOOL") int GenerateOnClose) {
        try {
            return (int)cfapi_h$constants$26.ObjectDeleteAuditAlarmW$MH().invokeExact(SubsystemName.address(), HandleId.address(), GenerateOnClose);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectOpenAuditAlarmW$MH() {
        return cfapi_h$constants$26.ObjectOpenAuditAlarmW$MH();
    }
    public static @C("BOOL") int ObjectOpenAuditAlarmW (@C("LPCWSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("LPWSTR") Addressable ObjectTypeName, @C("LPWSTR") Addressable ObjectName, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("HANDLE") Addressable ClientToken, @C("DWORD") int DesiredAccess, @C("DWORD") int GrantedAccess, @C("PPRIVILEGE_SET") Addressable Privileges, @C("BOOL") int ObjectCreation, @C("BOOL") int AccessGranted, @C("LPBOOL") Addressable GenerateOnClose) {
        try {
            return (int)cfapi_h$constants$26.ObjectOpenAuditAlarmW$MH().invokeExact(SubsystemName.address(), HandleId.address(), ObjectTypeName.address(), ObjectName.address(), pSecurityDescriptor.address(), ClientToken.address(), DesiredAccess, GrantedAccess, Privileges.address(), ObjectCreation, AccessGranted, GenerateOnClose.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ObjectPrivilegeAuditAlarmW$MH() {
        return cfapi_h$constants$26.ObjectPrivilegeAuditAlarmW$MH();
    }
    public static @C("BOOL") int ObjectPrivilegeAuditAlarmW (@C("LPCWSTR") Addressable SubsystemName, @C("LPVOID") Addressable HandleId, @C("HANDLE") Addressable ClientToken, @C("DWORD") int DesiredAccess, @C("PPRIVILEGE_SET") Addressable Privileges, @C("BOOL") int AccessGranted) {
        try {
            return (int)cfapi_h$constants$26.ObjectPrivilegeAuditAlarmW$MH().invokeExact(SubsystemName.address(), HandleId.address(), ClientToken.address(), DesiredAccess, Privileges.address(), AccessGranted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrivilegeCheck$MH() {
        return cfapi_h$constants$26.PrivilegeCheck$MH();
    }
    public static @C("BOOL") int PrivilegeCheck (@C("HANDLE") Addressable ClientToken, @C("PPRIVILEGE_SET") Addressable RequiredPrivileges, @C("LPBOOL") Addressable pfResult) {
        try {
            return (int)cfapi_h$constants$26.PrivilegeCheck$MH().invokeExact(ClientToken.address(), RequiredPrivileges.address(), pfResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrivilegedServiceAuditAlarmW$MH() {
        return cfapi_h$constants$26.PrivilegedServiceAuditAlarmW$MH();
    }
    public static @C("BOOL") int PrivilegedServiceAuditAlarmW (@C("LPCWSTR") Addressable SubsystemName, @C("LPCWSTR") Addressable ServiceName, @C("HANDLE") Addressable ClientToken, @C("PPRIVILEGE_SET") Addressable Privileges, @C("BOOL") int AccessGranted) {
        try {
            return (int)cfapi_h$constants$26.PrivilegedServiceAuditAlarmW$MH().invokeExact(SubsystemName.address(), ServiceName.address(), ClientToken.address(), Privileges.address(), AccessGranted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QuerySecurityAccessMask$MH() {
        return cfapi_h$constants$26.QuerySecurityAccessMask$MH();
    }
    public static void QuerySecurityAccessMask (@C("SECURITY_INFORMATION") int SecurityInformation, @C("LPDWORD") Addressable DesiredAccess) {
        try {
            cfapi_h$constants$26.QuerySecurityAccessMask$MH().invokeExact(SecurityInformation, DesiredAccess.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RevertToSelf$MH() {
        return cfapi_h$constants$26.RevertToSelf$MH();
    }
    public static @C("BOOL") int RevertToSelf () {
        try {
            return (int)cfapi_h$constants$26.RevertToSelf$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetAclInformation$MH() {
        return cfapi_h$constants$26.SetAclInformation$MH();
    }
    public static @C("BOOL") int SetAclInformation (@C("PACL") Addressable pAcl, @C("LPVOID") Addressable pAclInformation, @C("DWORD") int nAclInformationLength, @C("ACL_INFORMATION_CLASS") int dwAclInformationClass) {
        try {
            return (int)cfapi_h$constants$26.SetAclInformation$MH().invokeExact(pAcl.address(), pAclInformation.address(), nAclInformationLength, dwAclInformationClass);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileSecurityW$MH() {
        return cfapi_h$constants$26.SetFileSecurityW$MH();
    }
    public static @C("BOOL") int SetFileSecurityW (@C("LPCWSTR") Addressable lpFileName, @C("SECURITY_INFORMATION") int SecurityInformation, @C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor) {
        try {
            return (int)cfapi_h$constants$26.SetFileSecurityW$MH().invokeExact(lpFileName.address(), SecurityInformation, pSecurityDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetKernelObjectSecurity$MH() {
        return cfapi_h$constants$26.SetKernelObjectSecurity$MH();
    }
    public static @C("BOOL") int SetKernelObjectSecurity (@C("HANDLE") Addressable Handle, @C("SECURITY_INFORMATION") int SecurityInformation, @C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor) {
        try {
            return (int)cfapi_h$constants$26.SetKernelObjectSecurity$MH().invokeExact(Handle.address(), SecurityInformation, SecurityDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPrivateObjectSecurity$MH() {
        return cfapi_h$constants$26.SetPrivateObjectSecurity$MH();
    }
    public static @C("BOOL") int SetPrivateObjectSecurity (@C("SECURITY_INFORMATION") int SecurityInformation, @C("PSECURITY_DESCRIPTOR") Addressable ModificationDescriptor, @C("PSECURITY_DESCRIPTOR*") Addressable ObjectsSecurityDescriptor, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("HANDLE") Addressable Token) {
        try {
            return (int)cfapi_h$constants$26.SetPrivateObjectSecurity$MH().invokeExact(SecurityInformation, ModificationDescriptor.address(), ObjectsSecurityDescriptor.address(), GenericMapping.address(), Token.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetPrivateObjectSecurityEx$MH() {
        return cfapi_h$constants$26.SetPrivateObjectSecurityEx$MH();
    }
    public static @C("BOOL") int SetPrivateObjectSecurityEx (@C("SECURITY_INFORMATION") int SecurityInformation, @C("PSECURITY_DESCRIPTOR") Addressable ModificationDescriptor, @C("PSECURITY_DESCRIPTOR*") Addressable ObjectsSecurityDescriptor, @C("ULONG") int AutoInheritFlags, @C("PGENERIC_MAPPING") Addressable GenericMapping, @C("HANDLE") Addressable Token) {
        try {
            return (int)cfapi_h$constants$26.SetPrivateObjectSecurityEx$MH().invokeExact(SecurityInformation, ModificationDescriptor.address(), ObjectsSecurityDescriptor.address(), AutoInheritFlags, GenericMapping.address(), Token.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSecurityAccessMask$MH() {
        return cfapi_h$constants$26.SetSecurityAccessMask$MH();
    }
    public static void SetSecurityAccessMask (@C("SECURITY_INFORMATION") int SecurityInformation, @C("LPDWORD") Addressable DesiredAccess) {
        try {
            cfapi_h$constants$26.SetSecurityAccessMask$MH().invokeExact(SecurityInformation, DesiredAccess.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSecurityDescriptorControl$MH() {
        return cfapi_h$constants$26.SetSecurityDescriptorControl$MH();
    }
    public static @C("BOOL") int SetSecurityDescriptorControl (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("SECURITY_DESCRIPTOR_CONTROL") short ControlBitsOfInterest, @C("SECURITY_DESCRIPTOR_CONTROL") short ControlBitsToSet) {
        try {
            return (int)cfapi_h$constants$26.SetSecurityDescriptorControl$MH().invokeExact(pSecurityDescriptor.address(), ControlBitsOfInterest, ControlBitsToSet);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSecurityDescriptorDacl$MH() {
        return cfapi_h$constants$26.SetSecurityDescriptorDacl$MH();
    }
    public static @C("BOOL") int SetSecurityDescriptorDacl (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("BOOL") int bDaclPresent, @C("PACL") Addressable pDacl, @C("BOOL") int bDaclDefaulted) {
        try {
            return (int)cfapi_h$constants$26.SetSecurityDescriptorDacl$MH().invokeExact(pSecurityDescriptor.address(), bDaclPresent, pDacl.address(), bDaclDefaulted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSecurityDescriptorGroup$MH() {
        return cfapi_h$constants$26.SetSecurityDescriptorGroup$MH();
    }
    public static @C("BOOL") int SetSecurityDescriptorGroup (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("PSID") Addressable pGroup, @C("BOOL") int bGroupDefaulted) {
        try {
            return (int)cfapi_h$constants$26.SetSecurityDescriptorGroup$MH().invokeExact(pSecurityDescriptor.address(), pGroup.address(), bGroupDefaulted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSecurityDescriptorOwner$MH() {
        return cfapi_h$constants$26.SetSecurityDescriptorOwner$MH();
    }
    public static @C("BOOL") int SetSecurityDescriptorOwner (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("PSID") Addressable pOwner, @C("BOOL") int bOwnerDefaulted) {
        try {
            return (int)cfapi_h$constants$26.SetSecurityDescriptorOwner$MH().invokeExact(pSecurityDescriptor.address(), pOwner.address(), bOwnerDefaulted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSecurityDescriptorRMControl$MH() {
        return cfapi_h$constants$26.SetSecurityDescriptorRMControl$MH();
    }
    public static @C("DWORD") int SetSecurityDescriptorRMControl (@C("PSECURITY_DESCRIPTOR") Addressable SecurityDescriptor, @C("PUCHAR") Addressable RMControl) {
        try {
            return (int)cfapi_h$constants$26.SetSecurityDescriptorRMControl$MH().invokeExact(SecurityDescriptor.address(), RMControl.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSecurityDescriptorSacl$MH() {
        return cfapi_h$constants$26.SetSecurityDescriptorSacl$MH();
    }
    public static @C("BOOL") int SetSecurityDescriptorSacl (@C("PSECURITY_DESCRIPTOR") Addressable pSecurityDescriptor, @C("BOOL") int bSaclPresent, @C("PACL") Addressable pSacl, @C("BOOL") int bSaclDefaulted) {
        try {
            return (int)cfapi_h$constants$26.SetSecurityDescriptorSacl$MH().invokeExact(pSecurityDescriptor.address(), bSaclPresent, pSacl.address(), bSaclDefaulted);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTokenInformation$MH() {
        return cfapi_h$constants$26.SetTokenInformation$MH();
    }
    public static @C("BOOL") int SetTokenInformation (@C("HANDLE") Addressable TokenHandle, @C("TOKEN_INFORMATION_CLASS") int TokenInformationClass, @C("LPVOID") Addressable TokenInformation, @C("DWORD") int TokenInformationLength) {
        try {
            return (int)cfapi_h$constants$26.SetTokenInformation$MH().invokeExact(TokenHandle.address(), TokenInformationClass, TokenInformation.address(), TokenInformationLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCachedSigningLevel$MH() {
        return cfapi_h$constants$26.SetCachedSigningLevel$MH();
    }
    public static @C("BOOL") int SetCachedSigningLevel (@C("PHANDLE") Addressable SourceFiles, @C("ULONG") int SourceFileCount, @C("ULONG") int Flags, @C("HANDLE") Addressable TargetFile) {
        try {
            return (int)cfapi_h$constants$26.SetCachedSigningLevel$MH().invokeExact(SourceFiles.address(), SourceFileCount, Flags, TargetFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCachedSigningLevel$MH() {
        return cfapi_h$constants$26.GetCachedSigningLevel$MH();
    }
    public static @C("BOOL") int GetCachedSigningLevel (@C("HANDLE") Addressable File, @C("PULONG") Addressable Flags, @C("PULONG") Addressable SigningLevel, @C("PUCHAR") Addressable Thumbprint, @C("PULONG") Addressable ThumbprintSize, @C("PULONG") Addressable ThumbprintAlgorithm) {
        try {
            return (int)cfapi_h$constants$26.GetCachedSigningLevel$MH().invokeExact(File.address(), Flags.address(), SigningLevel.address(), Thumbprint.address(), ThumbprintSize.address(), ThumbprintAlgorithm.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CveEventWrite$MH() {
        return cfapi_h$constants$26.CveEventWrite$MH();
    }
    public static @C("LONG") int CveEventWrite (@C("PCWSTR") Addressable CveId, @C("PCWSTR") Addressable AdditionalDetails) {
        try {
            return (int)cfapi_h$constants$26.CveEventWrite$MH().invokeExact(CveId.address(), AdditionalDetails.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeriveCapabilitySidsFromName$MH() {
        return cfapi_h$constants$26.DeriveCapabilitySidsFromName$MH();
    }
    public static @C("BOOL") int DeriveCapabilitySidsFromName (@C("LPCWSTR") Addressable CapName, @C("PSID**") Addressable CapabilityGroupSids, @C("DWORD*") Addressable CapabilityGroupSidCount, @C("PSID**") Addressable CapabilitySids, @C("DWORD*") Addressable CapabilitySidCount) {
        try {
            return (int)cfapi_h$constants$26.DeriveCapabilitySidsFromName$MH().invokeExact(CapName.address(), CapabilityGroupSids.address(), CapabilityGroupSidCount.address(), CapabilitySids.address(), CapabilitySidCount.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreatePrivateNamespaceW$MH() {
        return cfapi_h$constants$26.CreatePrivateNamespaceW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreatePrivateNamespaceW (@C("LPSECURITY_ATTRIBUTES") Addressable lpPrivateNamespaceAttributes, @C("LPVOID") Addressable lpBoundaryDescriptor, @C("LPCWSTR") Addressable lpAliasPrefix) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreatePrivateNamespaceW$MH().invokeExact(lpPrivateNamespaceAttributes.address(), lpBoundaryDescriptor.address(), lpAliasPrefix.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenPrivateNamespaceW$MH() {
        return cfapi_h$constants$26.OpenPrivateNamespaceW$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenPrivateNamespaceW (@C("LPVOID") Addressable lpBoundaryDescriptor, @C("LPCWSTR") Addressable lpAliasPrefix) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.OpenPrivateNamespaceW$MH().invokeExact(lpBoundaryDescriptor.address(), lpAliasPrefix.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClosePrivateNamespace$MH() {
        return cfapi_h$constants$26.ClosePrivateNamespace$MH();
    }
    public static @C("BOOLEAN") byte ClosePrivateNamespace (@C("HANDLE") Addressable Handle, @C("ULONG") int Flags) {
        try {
            return (byte)cfapi_h$constants$26.ClosePrivateNamespace$MH().invokeExact(Handle.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateBoundaryDescriptorW$MH() {
        return cfapi_h$constants$26.CreateBoundaryDescriptorW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateBoundaryDescriptorW (@C("LPCWSTR") Addressable Name, @C("ULONG") int Flags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.CreateBoundaryDescriptorW$MH().invokeExact(Name.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddSIDToBoundaryDescriptor$MH() {
        return cfapi_h$constants$26.AddSIDToBoundaryDescriptor$MH();
    }
    public static @C("BOOL") int AddSIDToBoundaryDescriptor (@C("HANDLE*") Addressable BoundaryDescriptor, @C("PSID") Addressable RequiredSid) {
        try {
            return (int)cfapi_h$constants$26.AddSIDToBoundaryDescriptor$MH().invokeExact(BoundaryDescriptor.address(), RequiredSid.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteBoundaryDescriptor$MH() {
        return cfapi_h$constants$26.DeleteBoundaryDescriptor$MH();
    }
    public static void DeleteBoundaryDescriptor (@C("HANDLE") Addressable BoundaryDescriptor) {
        try {
            cfapi_h$constants$26.DeleteBoundaryDescriptor$MH().invokeExact(BoundaryDescriptor.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaHighestNodeNumber$MH() {
        return cfapi_h$constants$26.GetNumaHighestNodeNumber$MH();
    }
    public static @C("BOOL") int GetNumaHighestNodeNumber (@C("PULONG") Addressable HighestNodeNumber) {
        try {
            return (int)cfapi_h$constants$26.GetNumaHighestNodeNumber$MH().invokeExact(HighestNodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaNodeProcessorMaskEx$MH() {
        return cfapi_h$constants$26.GetNumaNodeProcessorMaskEx$MH();
    }
    public static @C("BOOL") int GetNumaNodeProcessorMaskEx (@C("USHORT") short Node, @C("PGROUP_AFFINITY") Addressable ProcessorMask) {
        try {
            return (int)cfapi_h$constants$26.GetNumaNodeProcessorMaskEx$MH().invokeExact(Node, ProcessorMask.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNumaProximityNodeEx$MH() {
        return cfapi_h$constants$26.GetNumaProximityNodeEx$MH();
    }
    public static @C("BOOL") int GetNumaProximityNodeEx (@C("ULONG") int ProximityId, @C("PUSHORT") Addressable NodeNumber) {
        try {
            return (int)cfapi_h$constants$26.GetNumaProximityNodeEx$MH().invokeExact(ProximityId, NodeNumber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessGroupAffinity$MH() {
        return cfapi_h$constants$26.GetProcessGroupAffinity$MH();
    }
    public static @C("BOOL") int GetProcessGroupAffinity (@C("HANDLE") Addressable hProcess, @C("PUSHORT") Addressable GroupCount, @C("PUSHORT") Addressable GroupArray) {
        try {
            return (int)cfapi_h$constants$26.GetProcessGroupAffinity$MH().invokeExact(hProcess.address(), GroupCount.address(), GroupArray.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadGroupAffinity$MH() {
        return cfapi_h$constants$26.GetThreadGroupAffinity$MH();
    }
    public static @C("BOOL") int GetThreadGroupAffinity (@C("HANDLE") Addressable hThread, @C("PGROUP_AFFINITY") Addressable GroupAffinity) {
        try {
            return (int)cfapi_h$constants$26.GetThreadGroupAffinity$MH().invokeExact(hThread.address(), GroupAffinity.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadGroupAffinity$MH() {
        return cfapi_h$constants$26.SetThreadGroupAffinity$MH();
    }
    public static @C("BOOL") int SetThreadGroupAffinity (@C("HANDLE") Addressable hThread, @C("const GROUP_AFFINITY*") Addressable GroupAffinity, @C("PGROUP_AFFINITY") Addressable PreviousGroupAffinity) {
        try {
            return (int)cfapi_h$constants$26.SetThreadGroupAffinity$MH().invokeExact(hThread.address(), GroupAffinity.address(), PreviousGroupAffinity.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAppContainerNamedObjectPath$MH() {
        return cfapi_h$constants$26.GetAppContainerNamedObjectPath$MH();
    }
    public static @C("BOOL") int GetAppContainerNamedObjectPath (@C("HANDLE") Addressable Token, @C("PSID") Addressable AppContainerSid, @C("ULONG") int ObjectPathLength, @C("LPWSTR") Addressable ObjectPath, @C("PULONG") Addressable ReturnLength) {
        try {
            return (int)cfapi_h$constants$26.GetAppContainerNamedObjectPath$MH().invokeExact(Token.address(), AppContainerSid.address(), ObjectPathLength, ObjectPath.address(), ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryThreadCycleTime$MH() {
        return cfapi_h$constants$26.QueryThreadCycleTime$MH();
    }
    public static @C("BOOL") int QueryThreadCycleTime (@C("HANDLE") Addressable ThreadHandle, @C("PULONG64") Addressable CycleTime) {
        try {
            return (int)cfapi_h$constants$26.QueryThreadCycleTime$MH().invokeExact(ThreadHandle.address(), CycleTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryProcessCycleTime$MH() {
        return cfapi_h$constants$26.QueryProcessCycleTime$MH();
    }
    public static @C("BOOL") int QueryProcessCycleTime (@C("HANDLE") Addressable ProcessHandle, @C("PULONG64") Addressable CycleTime) {
        try {
            return (int)cfapi_h$constants$26.QueryProcessCycleTime$MH().invokeExact(ProcessHandle.address(), CycleTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryIdleProcessorCycleTime$MH() {
        return cfapi_h$constants$26.QueryIdleProcessorCycleTime$MH();
    }
    public static @C("BOOL") int QueryIdleProcessorCycleTime (@C("PULONG") Addressable BufferLength, @C("PULONG64") Addressable ProcessorIdleCycleTime) {
        try {
            return (int)cfapi_h$constants$26.QueryIdleProcessorCycleTime$MH().invokeExact(BufferLength.address(), ProcessorIdleCycleTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryIdleProcessorCycleTimeEx$MH() {
        return cfapi_h$constants$26.QueryIdleProcessorCycleTimeEx$MH();
    }
    public static @C("BOOL") int QueryIdleProcessorCycleTimeEx (@C("USHORT") short Group, @C("PULONG") Addressable BufferLength, @C("PULONG64") Addressable ProcessorIdleCycleTime) {
        try {
            return (int)cfapi_h$constants$26.QueryIdleProcessorCycleTimeEx$MH().invokeExact(Group, BufferLength.address(), ProcessorIdleCycleTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryInterruptTimePrecise$MH() {
        return cfapi_h$constants$26.QueryInterruptTimePrecise$MH();
    }
    public static void QueryInterruptTimePrecise (@C("PULONGLONG") Addressable lpInterruptTimePrecise) {
        try {
            cfapi_h$constants$26.QueryInterruptTimePrecise$MH().invokeExact(lpInterruptTimePrecise.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryUnbiasedInterruptTimePrecise$MH() {
        return cfapi_h$constants$26.QueryUnbiasedInterruptTimePrecise$MH();
    }
    public static void QueryUnbiasedInterruptTimePrecise (@C("PULONGLONG") Addressable lpUnbiasedInterruptTimePrecise) {
        try {
            cfapi_h$constants$26.QueryUnbiasedInterruptTimePrecise$MH().invokeExact(lpUnbiasedInterruptTimePrecise.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryInterruptTime$MH() {
        return cfapi_h$constants$26.QueryInterruptTime$MH();
    }
    public static void QueryInterruptTime (@C("PULONGLONG") Addressable lpInterruptTime) {
        try {
            cfapi_h$constants$26.QueryInterruptTime$MH().invokeExact(lpInterruptTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryUnbiasedInterruptTime$MH() {
        return cfapi_h$constants$26.QueryUnbiasedInterruptTime$MH();
    }
    public static @C("BOOL") int QueryUnbiasedInterruptTime (@C("PULONGLONG") Addressable UnbiasedTime) {
        try {
            return (int)cfapi_h$constants$26.QueryUnbiasedInterruptTime$MH().invokeExact(UnbiasedTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryAuxiliaryCounterFrequency$MH() {
        return cfapi_h$constants$26.QueryAuxiliaryCounterFrequency$MH();
    }
    public static @C("HRESULT") int QueryAuxiliaryCounterFrequency (@C("PULONGLONG") Addressable lpAuxiliaryCounterFrequency) {
        try {
            return (int)cfapi_h$constants$26.QueryAuxiliaryCounterFrequency$MH().invokeExact(lpAuxiliaryCounterFrequency.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ConvertAuxiliaryCounterToPerformanceCounter$MH() {
        return cfapi_h$constants$26.ConvertAuxiliaryCounterToPerformanceCounter$MH();
    }
    public static @C("HRESULT") int ConvertAuxiliaryCounterToPerformanceCounter (@C("ULONGLONG") long ullAuxiliaryCounterValue, @C("PULONGLONG") Addressable lpPerformanceCounterValue, @C("PULONGLONG") Addressable lpConversionError) {
        try {
            return (int)cfapi_h$constants$26.ConvertAuxiliaryCounterToPerformanceCounter$MH().invokeExact(ullAuxiliaryCounterValue, lpPerformanceCounterValue.address(), lpConversionError.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ConvertPerformanceCounterToAuxiliaryCounter$MH() {
        return cfapi_h$constants$26.ConvertPerformanceCounterToAuxiliaryCounter$MH();
    }
    public static @C("HRESULT") int ConvertPerformanceCounterToAuxiliaryCounter (@C("ULONGLONG") long ullPerformanceCounterValue, @C("PULONGLONG") Addressable lpAuxiliaryCounterValue, @C("PULONGLONG") Addressable lpConversionError) {
        try {
            return (int)cfapi_h$constants$26.ConvertPerformanceCounterToAuxiliaryCounter$MH().invokeExact(ullPerformanceCounterValue, lpAuxiliaryCounterValue.address(), lpConversionError.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WinMain$MH() {
        return cfapi_h$constants$26.WinMain$MH();
    }
    public static @C("int") int WinMain (@C("HINSTANCE") Addressable hInstance, @C("HINSTANCE") Addressable hPrevInstance, @C("LPSTR") Addressable lpCmdLine, @C("int") int nShowCmd) {
        try {
            return (int)cfapi_h$constants$26.WinMain$MH().invokeExact(hInstance.address(), hPrevInstance.address(), lpCmdLine.address(), nShowCmd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle wWinMain$MH() {
        return cfapi_h$constants$26.wWinMain$MH();
    }
    public static @C("int") int wWinMain (@C("HINSTANCE") Addressable hInstance, @C("HINSTANCE") Addressable hPrevInstance, @C("LPWSTR") Addressable lpCmdLine, @C("int") int nShowCmd) {
        try {
            return (int)cfapi_h$constants$26.wWinMain$MH().invokeExact(hInstance.address(), hPrevInstance.address(), lpCmdLine.address(), nShowCmd);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAlloc$MH() {
        return cfapi_h$constants$26.GlobalAlloc$MH();
    }
    public static @C("HGLOBAL") MemoryAddress GlobalAlloc (@C("UINT") int uFlags, @C("SIZE_T") long dwBytes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GlobalAlloc$MH().invokeExact(uFlags, dwBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalReAlloc$MH() {
        return cfapi_h$constants$26.GlobalReAlloc$MH();
    }
    public static @C("HGLOBAL") MemoryAddress GlobalReAlloc (@C("HGLOBAL") Addressable hMem, @C("SIZE_T") long dwBytes, @C("UINT") int uFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GlobalReAlloc$MH().invokeExact(hMem.address(), dwBytes, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalSize$MH() {
        return cfapi_h$constants$26.GlobalSize$MH();
    }
    public static @C("SIZE_T") long GlobalSize (@C("HGLOBAL") Addressable hMem) {
        try {
            return (long)cfapi_h$constants$26.GlobalSize$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalUnlock$MH() {
        return cfapi_h$constants$26.GlobalUnlock$MH();
    }
    public static @C("BOOL") int GlobalUnlock (@C("HGLOBAL") Addressable hMem) {
        try {
            return (int)cfapi_h$constants$26.GlobalUnlock$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalLock$MH() {
        return cfapi_h$constants$26.GlobalLock$MH();
    }
    public static @C("LPVOID") MemoryAddress GlobalLock (@C("HGLOBAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GlobalLock$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFlags$MH() {
        return cfapi_h$constants$26.GlobalFlags$MH();
    }
    public static @C("UINT") int GlobalFlags (@C("HGLOBAL") Addressable hMem) {
        try {
            return (int)cfapi_h$constants$26.GlobalFlags$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalHandle$MH() {
        return cfapi_h$constants$26.GlobalHandle$MH();
    }
    public static @C("HGLOBAL") MemoryAddress GlobalHandle (@C("LPCVOID") Addressable pMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GlobalHandle$MH().invokeExact(pMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFree$MH() {
        return cfapi_h$constants$26.GlobalFree$MH();
    }
    public static @C("HGLOBAL") MemoryAddress GlobalFree (@C("HGLOBAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GlobalFree$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalCompact$MH() {
        return cfapi_h$constants$26.GlobalCompact$MH();
    }
    public static @C("SIZE_T") long GlobalCompact (@C("DWORD") int dwMinFree) {
        try {
            return (long)cfapi_h$constants$26.GlobalCompact$MH().invokeExact(dwMinFree);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFix$MH() {
        return cfapi_h$constants$26.GlobalFix$MH();
    }
    public static void GlobalFix (@C("HGLOBAL") Addressable hMem) {
        try {
            cfapi_h$constants$26.GlobalFix$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalUnfix$MH() {
        return cfapi_h$constants$26.GlobalUnfix$MH();
    }
    public static void GlobalUnfix (@C("HGLOBAL") Addressable hMem) {
        try {
            cfapi_h$constants$26.GlobalUnfix$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalWire$MH() {
        return cfapi_h$constants$26.GlobalWire$MH();
    }
    public static @C("LPVOID") MemoryAddress GlobalWire (@C("HGLOBAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.GlobalWire$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalUnWire$MH() {
        return cfapi_h$constants$26.GlobalUnWire$MH();
    }
    public static @C("BOOL") int GlobalUnWire (@C("HGLOBAL") Addressable hMem) {
        try {
            return (int)cfapi_h$constants$26.GlobalUnWire$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalMemoryStatus$MH() {
        return cfapi_h$constants$26.GlobalMemoryStatus$MH();
    }
    public static void GlobalMemoryStatus (@C("LPMEMORYSTATUS") Addressable lpBuffer) {
        try {
            cfapi_h$constants$26.GlobalMemoryStatus$MH().invokeExact(lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalAlloc$MH() {
        return cfapi_h$constants$26.LocalAlloc$MH();
    }
    public static @C("HLOCAL") MemoryAddress LocalAlloc (@C("UINT") int uFlags, @C("SIZE_T") long uBytes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LocalAlloc$MH().invokeExact(uFlags, uBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalReAlloc$MH() {
        return cfapi_h$constants$26.LocalReAlloc$MH();
    }
    public static @C("HLOCAL") MemoryAddress LocalReAlloc (@C("HLOCAL") Addressable hMem, @C("SIZE_T") long uBytes, @C("UINT") int uFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LocalReAlloc$MH().invokeExact(hMem.address(), uBytes, uFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalLock$MH() {
        return cfapi_h$constants$26.LocalLock$MH();
    }
    public static @C("LPVOID") MemoryAddress LocalLock (@C("HLOCAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LocalLock$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalHandle$MH() {
        return cfapi_h$constants$26.LocalHandle$MH();
    }
    public static @C("HLOCAL") MemoryAddress LocalHandle (@C("LPCVOID") Addressable pMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LocalHandle$MH().invokeExact(pMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalUnlock$MH() {
        return cfapi_h$constants$26.LocalUnlock$MH();
    }
    public static @C("BOOL") int LocalUnlock (@C("HLOCAL") Addressable hMem) {
        try {
            return (int)cfapi_h$constants$26.LocalUnlock$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalSize$MH() {
        return cfapi_h$constants$26.LocalSize$MH();
    }
    public static @C("SIZE_T") long LocalSize (@C("HLOCAL") Addressable hMem) {
        try {
            return (long)cfapi_h$constants$26.LocalSize$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalFlags$MH() {
        return cfapi_h$constants$26.LocalFlags$MH();
    }
    public static @C("UINT") int LocalFlags (@C("HLOCAL") Addressable hMem) {
        try {
            return (int)cfapi_h$constants$26.LocalFlags$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalFree$MH() {
        return cfapi_h$constants$26.LocalFree$MH();
    }
    public static @C("HLOCAL") MemoryAddress LocalFree (@C("HLOCAL") Addressable hMem) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$26.LocalFree$MH().invokeExact(hMem.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalShrink$MH() {
        return cfapi_h$constants$26.LocalShrink$MH();
    }
    public static @C("SIZE_T") long LocalShrink (@C("HLOCAL") Addressable hMem, @C("UINT") int cbNewSize) {
        try {
            return (long)cfapi_h$constants$26.LocalShrink$MH().invokeExact(hMem.address(), cbNewSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LocalCompact$MH() {
        return cfapi_h$constants$26.LocalCompact$MH();
    }
    public static @C("SIZE_T") long LocalCompact (@C("UINT") int uMinFree) {
        try {
            return (long)cfapi_h$constants$26.LocalCompact$MH().invokeExact(uMinFree);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBinaryTypeA$MH() {
        return cfapi_h$constants$26.GetBinaryTypeA$MH();
    }
    public static @C("BOOL") int GetBinaryTypeA (@C("LPCSTR") Addressable lpApplicationName, @C("LPDWORD") Addressable lpBinaryType) {
        try {
            return (int)cfapi_h$constants$26.GetBinaryTypeA$MH().invokeExact(lpApplicationName.address(), lpBinaryType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetBinaryTypeW$MH() {
        return cfapi_h$constants$26.GetBinaryTypeW$MH();
    }
    public static @C("BOOL") int GetBinaryTypeW (@C("LPCWSTR") Addressable lpApplicationName, @C("LPDWORD") Addressable lpBinaryType) {
        try {
            return (int)cfapi_h$constants$26.GetBinaryTypeW$MH().invokeExact(lpApplicationName.address(), lpBinaryType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetShortPathNameA$MH() {
        return cfapi_h$constants$26.GetShortPathNameA$MH();
    }
    public static @C("DWORD") int GetShortPathNameA (@C("LPCSTR") Addressable lpszLongPath, @C("LPSTR") Addressable lpszShortPath, @C("DWORD") int cchBuffer) {
        try {
            return (int)cfapi_h$constants$26.GetShortPathNameA$MH().invokeExact(lpszLongPath.address(), lpszShortPath.address(), cchBuffer);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLongPathNameTransactedA$MH() {
        return cfapi_h$constants$26.GetLongPathNameTransactedA$MH();
    }
    public static @C("DWORD") int GetLongPathNameTransactedA (@C("LPCSTR") Addressable lpszShortPath, @C("LPSTR") Addressable lpszLongPath, @C("DWORD") int cchBuffer, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$26.GetLongPathNameTransactedA$MH().invokeExact(lpszShortPath.address(), lpszLongPath.address(), cchBuffer, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLongPathNameTransactedW$MH() {
        return cfapi_h$constants$26.GetLongPathNameTransactedW$MH();
    }
    public static @C("DWORD") int GetLongPathNameTransactedW (@C("LPCWSTR") Addressable lpszShortPath, @C("LPWSTR") Addressable lpszLongPath, @C("DWORD") int cchBuffer, @C("HANDLE") Addressable hTransaction) {
        try {
            return (int)cfapi_h$constants$26.GetLongPathNameTransactedW$MH().invokeExact(lpszShortPath.address(), lpszLongPath.address(), cchBuffer, hTransaction.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessAffinityMask$MH() {
        return cfapi_h$constants$26.GetProcessAffinityMask$MH();
    }
    public static @C("BOOL") int GetProcessAffinityMask (@C("HANDLE") Addressable hProcess, @C("PDWORD_PTR") Addressable lpProcessAffinityMask, @C("PDWORD_PTR") Addressable lpSystemAffinityMask) {
        try {
            return (int)cfapi_h$constants$26.GetProcessAffinityMask$MH().invokeExact(hProcess.address(), lpProcessAffinityMask.address(), lpSystemAffinityMask.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessAffinityMask$MH() {
        return cfapi_h$constants$26.SetProcessAffinityMask$MH();
    }
    public static @C("BOOL") int SetProcessAffinityMask (@C("HANDLE") Addressable hProcess, @C("DWORD_PTR") long dwProcessAffinityMask) {
        try {
            return (int)cfapi_h$constants$26.SetProcessAffinityMask$MH().invokeExact(hProcess.address(), dwProcessAffinityMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessIoCounters$MH() {
        return cfapi_h$constants$26.GetProcessIoCounters$MH();
    }
    public static @C("BOOL") int GetProcessIoCounters (@C("HANDLE") Addressable hProcess, @C("PIO_COUNTERS") Addressable lpIoCounters) {
        try {
            return (int)cfapi_h$constants$26.GetProcessIoCounters$MH().invokeExact(hProcess.address(), lpIoCounters.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessWorkingSetSize$MH() {
        return cfapi_h$constants$26.GetProcessWorkingSetSize$MH();
    }
    public static @C("BOOL") int GetProcessWorkingSetSize (@C("HANDLE") Addressable hProcess, @C("PSIZE_T") Addressable lpMinimumWorkingSetSize, @C("PSIZE_T") Addressable lpMaximumWorkingSetSize) {
        try {
            return (int)cfapi_h$constants$26.GetProcessWorkingSetSize$MH().invokeExact(hProcess.address(), lpMinimumWorkingSetSize.address(), lpMaximumWorkingSetSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessWorkingSetSize$MH() {
        return cfapi_h$constants$26.SetProcessWorkingSetSize$MH();
    }
    public static @C("BOOL") int SetProcessWorkingSetSize (@C("HANDLE") Addressable hProcess, @C("SIZE_T") long dwMinimumWorkingSetSize, @C("SIZE_T") long dwMaximumWorkingSetSize) {
        try {
            return (int)cfapi_h$constants$26.SetProcessWorkingSetSize$MH().invokeExact(hProcess.address(), dwMinimumWorkingSetSize, dwMaximumWorkingSetSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FatalExit$MH() {
        return cfapi_h$constants$26.FatalExit$MH();
    }
    public static void FatalExit (@C("int") int ExitCode) {
        try {
            cfapi_h$constants$26.FatalExit$MH().invokeExact(ExitCode);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetEnvironmentStringsA$MH() {
        return cfapi_h$constants$26.SetEnvironmentStringsA$MH();
    }
    public static @C("BOOL") int SetEnvironmentStringsA (@C("LPCH") Addressable NewEnvironment) {
        try {
            return (int)cfapi_h$constants$26.SetEnvironmentStringsA$MH().invokeExact(NewEnvironment.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SwitchToFiber$MH() {
        return cfapi_h$constants$26.SwitchToFiber$MH();
    }
    public static void SwitchToFiber (@C("LPVOID") Addressable lpFiber) {
        try {
            cfapi_h$constants$26.SwitchToFiber$MH().invokeExact(lpFiber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteFiber$MH() {
        return cfapi_h$constants$27.DeleteFiber$MH();
    }
    public static void DeleteFiber (@C("LPVOID") Addressable lpFiber) {
        try {
            cfapi_h$constants$27.DeleteFiber$MH().invokeExact(lpFiber.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ConvertFiberToThread$MH() {
        return cfapi_h$constants$27.ConvertFiberToThread$MH();
    }
    public static @C("BOOL") int ConvertFiberToThread () {
        try {
            return (int)cfapi_h$constants$27.ConvertFiberToThread$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFiberEx$MH() {
        return cfapi_h$constants$27.CreateFiberEx$MH();
    }
    public static @C("LPVOID") MemoryAddress CreateFiberEx (@C("SIZE_T") long dwStackCommitSize, @C("SIZE_T") long dwStackReserveSize, @C("DWORD") int dwFlags, @C("LPFIBER_START_ROUTINE") Addressable lpStartAddress, @C("LPVOID") Addressable lpParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateFiberEx$MH().invokeExact(dwStackCommitSize, dwStackReserveSize, dwFlags, lpStartAddress.address(), lpParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ConvertThreadToFiberEx$MH() {
        return cfapi_h$constants$27.ConvertThreadToFiberEx$MH();
    }
    public static @C("LPVOID") MemoryAddress ConvertThreadToFiberEx (@C("LPVOID") Addressable lpParameter, @C("DWORD") int dwFlags) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.ConvertThreadToFiberEx$MH().invokeExact(lpParameter.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFiber$MH() {
        return cfapi_h$constants$27.CreateFiber$MH();
    }
    public static @C("LPVOID") MemoryAddress CreateFiber (@C("SIZE_T") long dwStackSize, @C("LPFIBER_START_ROUTINE") Addressable lpStartAddress, @C("LPVOID") Addressable lpParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateFiber$MH().invokeExact(dwStackSize, lpStartAddress.address(), lpParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ConvertThreadToFiber$MH() {
        return cfapi_h$constants$27.ConvertThreadToFiber$MH();
    }
    public static @C("LPVOID") MemoryAddress ConvertThreadToFiber (@C("LPVOID") Addressable lpParameter) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.ConvertThreadToFiber$MH().invokeExact(lpParameter.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateUmsCompletionList$MH() {
        return cfapi_h$constants$27.CreateUmsCompletionList$MH();
    }
    public static @C("BOOL") int CreateUmsCompletionList (@C("PUMS_COMPLETION_LIST*") Addressable UmsCompletionList) {
        try {
            return (int)cfapi_h$constants$27.CreateUmsCompletionList$MH().invokeExact(UmsCompletionList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DequeueUmsCompletionListItems$MH() {
        return cfapi_h$constants$27.DequeueUmsCompletionListItems$MH();
    }
    public static @C("BOOL") int DequeueUmsCompletionListItems (@C("PUMS_COMPLETION_LIST") Addressable UmsCompletionList, @C("DWORD") int WaitTimeOut, @C("PUMS_CONTEXT*") Addressable UmsThreadList) {
        try {
            return (int)cfapi_h$constants$27.DequeueUmsCompletionListItems$MH().invokeExact(UmsCompletionList.address(), WaitTimeOut, UmsThreadList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUmsCompletionListEvent$MH() {
        return cfapi_h$constants$27.GetUmsCompletionListEvent$MH();
    }
    public static @C("BOOL") int GetUmsCompletionListEvent (@C("PUMS_COMPLETION_LIST") Addressable UmsCompletionList, @C("PHANDLE") Addressable UmsCompletionEvent) {
        try {
            return (int)cfapi_h$constants$27.GetUmsCompletionListEvent$MH().invokeExact(UmsCompletionList.address(), UmsCompletionEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ExecuteUmsThread$MH() {
        return cfapi_h$constants$27.ExecuteUmsThread$MH();
    }
    public static @C("BOOL") int ExecuteUmsThread (@C("PUMS_CONTEXT") Addressable UmsThread) {
        try {
            return (int)cfapi_h$constants$27.ExecuteUmsThread$MH().invokeExact(UmsThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UmsThreadYield$MH() {
        return cfapi_h$constants$27.UmsThreadYield$MH();
    }
    public static @C("BOOL") int UmsThreadYield (@C("PVOID") Addressable SchedulerParam) {
        try {
            return (int)cfapi_h$constants$27.UmsThreadYield$MH().invokeExact(SchedulerParam.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteUmsCompletionList$MH() {
        return cfapi_h$constants$27.DeleteUmsCompletionList$MH();
    }
    public static @C("BOOL") int DeleteUmsCompletionList (@C("PUMS_COMPLETION_LIST") Addressable UmsCompletionList) {
        try {
            return (int)cfapi_h$constants$27.DeleteUmsCompletionList$MH().invokeExact(UmsCompletionList.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCurrentUmsThread$MH() {
        return cfapi_h$constants$27.GetCurrentUmsThread$MH();
    }
    public static @C("PUMS_CONTEXT") MemoryAddress GetCurrentUmsThread () {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.GetCurrentUmsThread$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetNextUmsListItem$MH() {
        return cfapi_h$constants$27.GetNextUmsListItem$MH();
    }
    public static @C("PUMS_CONTEXT") MemoryAddress GetNextUmsListItem (@C("PUMS_CONTEXT") Addressable UmsContext) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.GetNextUmsListItem$MH().invokeExact(UmsContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryUmsThreadInformation$MH() {
        return cfapi_h$constants$27.QueryUmsThreadInformation$MH();
    }
    public static @C("BOOL") int QueryUmsThreadInformation (@C("PUMS_CONTEXT") Addressable UmsThread, @C("UMS_THREAD_INFO_CLASS") int UmsThreadInfoClass, @C("PVOID") Addressable UmsThreadInformation, @C("ULONG") int UmsThreadInformationLength, @C("PULONG") Addressable ReturnLength) {
        try {
            return (int)cfapi_h$constants$27.QueryUmsThreadInformation$MH().invokeExact(UmsThread.address(), UmsThreadInfoClass, UmsThreadInformation.address(), UmsThreadInformationLength, ReturnLength.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetUmsThreadInformation$MH() {
        return cfapi_h$constants$27.SetUmsThreadInformation$MH();
    }
    public static @C("BOOL") int SetUmsThreadInformation (@C("PUMS_CONTEXT") Addressable UmsThread, @C("UMS_THREAD_INFO_CLASS") int UmsThreadInfoClass, @C("PVOID") Addressable UmsThreadInformation, @C("ULONG") int UmsThreadInformationLength) {
        try {
            return (int)cfapi_h$constants$27.SetUmsThreadInformation$MH().invokeExact(UmsThread.address(), UmsThreadInfoClass, UmsThreadInformation.address(), UmsThreadInformationLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteUmsThreadContext$MH() {
        return cfapi_h$constants$27.DeleteUmsThreadContext$MH();
    }
    public static @C("BOOL") int DeleteUmsThreadContext (@C("PUMS_CONTEXT") Addressable UmsThread) {
        try {
            return (int)cfapi_h$constants$27.DeleteUmsThreadContext$MH().invokeExact(UmsThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateUmsThreadContext$MH() {
        return cfapi_h$constants$27.CreateUmsThreadContext$MH();
    }
    public static @C("BOOL") int CreateUmsThreadContext (@C("PUMS_CONTEXT*") Addressable lpUmsThread) {
        try {
            return (int)cfapi_h$constants$27.CreateUmsThreadContext$MH().invokeExact(lpUmsThread.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnterUmsSchedulingMode$MH() {
        return cfapi_h$constants$27.EnterUmsSchedulingMode$MH();
    }
    public static @C("BOOL") int EnterUmsSchedulingMode (@C("PUMS_SCHEDULER_STARTUP_INFO") Addressable SchedulerStartupInfo) {
        try {
            return (int)cfapi_h$constants$27.EnterUmsSchedulingMode$MH().invokeExact(SchedulerStartupInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetUmsSystemThreadInformation$MH() {
        return cfapi_h$constants$27.GetUmsSystemThreadInformation$MH();
    }
    public static @C("BOOL") int GetUmsSystemThreadInformation (@C("HANDLE") Addressable ThreadHandle, @C("PUMS_SYSTEM_THREAD_INFORMATION") Addressable SystemThreadInfo) {
        try {
            return (int)cfapi_h$constants$27.GetUmsSystemThreadInformation$MH().invokeExact(ThreadHandle.address(), SystemThreadInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadAffinityMask$MH() {
        return cfapi_h$constants$27.SetThreadAffinityMask$MH();
    }
    public static @C("DWORD_PTR") long SetThreadAffinityMask (@C("HANDLE") Addressable hThread, @C("DWORD_PTR") long dwThreadAffinityMask) {
        try {
            return (long)cfapi_h$constants$27.SetThreadAffinityMask$MH().invokeExact(hThread.address(), dwThreadAffinityMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetProcessDEPPolicy$MH() {
        return cfapi_h$constants$27.SetProcessDEPPolicy$MH();
    }
    public static @C("BOOL") int SetProcessDEPPolicy (@C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$27.SetProcessDEPPolicy$MH().invokeExact(dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProcessDEPPolicy$MH() {
        return cfapi_h$constants$27.GetProcessDEPPolicy$MH();
    }
    public static @C("BOOL") int GetProcessDEPPolicy (@C("HANDLE") Addressable hProcess, @C("LPDWORD") Addressable lpFlags, @C("PBOOL") Addressable lpPermanent) {
        try {
            return (int)cfapi_h$constants$27.GetProcessDEPPolicy$MH().invokeExact(hProcess.address(), lpFlags.address(), lpPermanent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RequestWakeupLatency$MH() {
        return cfapi_h$constants$27.RequestWakeupLatency$MH();
    }
    public static @C("BOOL") int RequestWakeupLatency (@C("LATENCY_TIME") int latency) {
        try {
            return (int)cfapi_h$constants$27.RequestWakeupLatency$MH().invokeExact(latency);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsSystemResumeAutomatic$MH() {
        return cfapi_h$constants$27.IsSystemResumeAutomatic$MH();
    }
    public static @C("BOOL") int IsSystemResumeAutomatic () {
        try {
            return (int)cfapi_h$constants$27.IsSystemResumeAutomatic$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetThreadSelectorEntry$MH() {
        return cfapi_h$constants$27.GetThreadSelectorEntry$MH();
    }
    public static @C("BOOL") int GetThreadSelectorEntry (@C("HANDLE") Addressable hThread, @C("DWORD") int dwSelector, @C("LPLDT_ENTRY") Addressable lpSelectorEntry) {
        try {
            return (int)cfapi_h$constants$27.GetThreadSelectorEntry$MH().invokeExact(hThread.address(), dwSelector, lpSelectorEntry.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetThreadExecutionState$MH() {
        return cfapi_h$constants$27.SetThreadExecutionState$MH();
    }
    public static @C("EXECUTION_STATE") int SetThreadExecutionState (@C("EXECUTION_STATE") int esFlags) {
        try {
            return (int)cfapi_h$constants$27.SetThreadExecutionState$MH().invokeExact(esFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PowerCreateRequest$MH() {
        return cfapi_h$constants$27.PowerCreateRequest$MH();
    }
    public static @C("HANDLE") MemoryAddress PowerCreateRequest (@C("PREASON_CONTEXT") Addressable Context) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.PowerCreateRequest$MH().invokeExact(Context.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PowerSetRequest$MH() {
        return cfapi_h$constants$27.PowerSetRequest$MH();
    }
    public static @C("BOOL") int PowerSetRequest (@C("HANDLE") Addressable PowerRequest, @C("POWER_REQUEST_TYPE") int RequestType) {
        try {
            return (int)cfapi_h$constants$27.PowerSetRequest$MH().invokeExact(PowerRequest.address(), RequestType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PowerClearRequest$MH() {
        return cfapi_h$constants$27.PowerClearRequest$MH();
    }
    public static @C("BOOL") int PowerClearRequest (@C("HANDLE") Addressable PowerRequest, @C("POWER_REQUEST_TYPE") int RequestType) {
        try {
            return (int)cfapi_h$constants$27.PowerClearRequest$MH().invokeExact(PowerRequest.address(), RequestType);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileCompletionNotificationModes$MH() {
        return cfapi_h$constants$27.SetFileCompletionNotificationModes$MH();
    }
    public static @C("BOOL") int SetFileCompletionNotificationModes (@C("HANDLE") Addressable FileHandle, @C("UCHAR") byte Flags) {
        try {
            return (int)cfapi_h$constants$27.SetFileCompletionNotificationModes$MH().invokeExact(FileHandle.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64GetThreadSelectorEntry$MH() {
        return cfapi_h$constants$27.Wow64GetThreadSelectorEntry$MH();
    }
    public static @C("BOOL") int Wow64GetThreadSelectorEntry (@C("HANDLE") Addressable hThread, @C("DWORD") int dwSelector, @C("PWOW64_LDT_ENTRY") Addressable lpSelectorEntry) {
        try {
            return (int)cfapi_h$constants$27.Wow64GetThreadSelectorEntry$MH().invokeExact(hThread.address(), dwSelector, lpSelectorEntry.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DebugSetProcessKillOnExit$MH() {
        return cfapi_h$constants$27.DebugSetProcessKillOnExit$MH();
    }
    public static @C("BOOL") int DebugSetProcessKillOnExit (@C("BOOL") int KillOnExit) {
        try {
            return (int)cfapi_h$constants$27.DebugSetProcessKillOnExit$MH().invokeExact(KillOnExit);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DebugBreakProcess$MH() {
        return cfapi_h$constants$27.DebugBreakProcess$MH();
    }
    public static @C("BOOL") int DebugBreakProcess (@C("HANDLE") Addressable Process) {
        try {
            return (int)cfapi_h$constants$27.DebugBreakProcess$MH().invokeExact(Process.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PulseEvent$MH() {
        return cfapi_h$constants$27.PulseEvent$MH();
    }
    public static @C("BOOL") int PulseEvent (@C("HANDLE") Addressable hEvent) {
        try {
            return (int)cfapi_h$constants$27.PulseEvent$MH().invokeExact(hEvent.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalDeleteAtom$MH() {
        return cfapi_h$constants$27.GlobalDeleteAtom$MH();
    }
    public static @C("ATOM") short GlobalDeleteAtom (@C("ATOM") short nAtom) {
        try {
            return (short)cfapi_h$constants$27.GlobalDeleteAtom$MH().invokeExact(nAtom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle InitAtomTable$MH() {
        return cfapi_h$constants$27.InitAtomTable$MH();
    }
    public static @C("BOOL") int InitAtomTable (@C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$27.InitAtomTable$MH().invokeExact(nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DeleteAtom$MH() {
        return cfapi_h$constants$27.DeleteAtom$MH();
    }
    public static @C("ATOM") short DeleteAtom (@C("ATOM") short nAtom) {
        try {
            return (short)cfapi_h$constants$27.DeleteAtom$MH().invokeExact(nAtom);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetHandleCount$MH() {
        return cfapi_h$constants$27.SetHandleCount$MH();
    }
    public static @C("UINT") int SetHandleCount (@C("UINT") int uNumber) {
        try {
            return (int)cfapi_h$constants$27.SetHandleCount$MH().invokeExact(uNumber);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle RequestDeviceWakeup$MH() {
        return cfapi_h$constants$27.RequestDeviceWakeup$MH();
    }
    public static @C("BOOL") int RequestDeviceWakeup (@C("HANDLE") Addressable hDevice) {
        try {
            return (int)cfapi_h$constants$27.RequestDeviceWakeup$MH().invokeExact(hDevice.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CancelDeviceWakeupRequest$MH() {
        return cfapi_h$constants$27.CancelDeviceWakeupRequest$MH();
    }
    public static @C("BOOL") int CancelDeviceWakeupRequest (@C("HANDLE") Addressable hDevice) {
        try {
            return (int)cfapi_h$constants$27.CancelDeviceWakeupRequest$MH().invokeExact(hDevice.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDevicePowerState$MH() {
        return cfapi_h$constants$27.GetDevicePowerState$MH();
    }
    public static @C("BOOL") int GetDevicePowerState (@C("HANDLE") Addressable hDevice, @C("BOOL*") Addressable pfOn) {
        try {
            return (int)cfapi_h$constants$27.GetDevicePowerState$MH().invokeExact(hDevice.address(), pfOn.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMessageWaitingIndicator$MH() {
        return cfapi_h$constants$27.SetMessageWaitingIndicator$MH();
    }
    public static @C("BOOL") int SetMessageWaitingIndicator (@C("HANDLE") Addressable hMsgIndicator, @C("ULONG") int ulMsgCount) {
        try {
            return (int)cfapi_h$constants$27.SetMessageWaitingIndicator$MH().invokeExact(hMsgIndicator.address(), ulMsgCount);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileShortNameA$MH() {
        return cfapi_h$constants$27.SetFileShortNameA$MH();
    }
    public static @C("BOOL") int SetFileShortNameA (@C("HANDLE") Addressable hFile, @C("LPCSTR") Addressable lpShortName) {
        try {
            return (int)cfapi_h$constants$27.SetFileShortNameA$MH().invokeExact(hFile.address(), lpShortName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFileShortNameW$MH() {
        return cfapi_h$constants$27.SetFileShortNameW$MH();
    }
    public static @C("BOOL") int SetFileShortNameW (@C("HANDLE") Addressable hFile, @C("LPCWSTR") Addressable lpShortName) {
        try {
            return (int)cfapi_h$constants$27.SetFileShortNameW$MH().invokeExact(hFile.address(), lpShortName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadModule$MH() {
        return cfapi_h$constants$27.LoadModule$MH();
    }
    public static @C("DWORD") int LoadModule (@C("LPCSTR") Addressable lpModuleName, @C("LPVOID") Addressable lpParameterBlock) {
        try {
            return (int)cfapi_h$constants$27.LoadModule$MH().invokeExact(lpModuleName.address(), lpParameterBlock.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WinExec$MH() {
        return cfapi_h$constants$27.WinExec$MH();
    }
    public static @C("UINT") int WinExec (@C("LPCSTR") Addressable lpCmdLine, @C("UINT") int uCmdShow) {
        try {
            return (int)cfapi_h$constants$27.WinExec$MH().invokeExact(lpCmdLine.address(), uCmdShow);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClearCommBreak$MH() {
        return cfapi_h$constants$27.ClearCommBreak$MH();
    }
    public static @C("BOOL") int ClearCommBreak (@C("HANDLE") Addressable hFile) {
        try {
            return (int)cfapi_h$constants$27.ClearCommBreak$MH().invokeExact(hFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ClearCommError$MH() {
        return cfapi_h$constants$27.ClearCommError$MH();
    }
    public static @C("BOOL") int ClearCommError (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpErrors, @C("LPCOMSTAT") Addressable lpStat) {
        try {
            return (int)cfapi_h$constants$27.ClearCommError$MH().invokeExact(hFile.address(), lpErrors.address(), lpStat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetupComm$MH() {
        return cfapi_h$constants$27.SetupComm$MH();
    }
    public static @C("BOOL") int SetupComm (@C("HANDLE") Addressable hFile, @C("DWORD") int dwInQueue, @C("DWORD") int dwOutQueue) {
        try {
            return (int)cfapi_h$constants$27.SetupComm$MH().invokeExact(hFile.address(), dwInQueue, dwOutQueue);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EscapeCommFunction$MH() {
        return cfapi_h$constants$27.EscapeCommFunction$MH();
    }
    public static @C("BOOL") int EscapeCommFunction (@C("HANDLE") Addressable hFile, @C("DWORD") int dwFunc) {
        try {
            return (int)cfapi_h$constants$27.EscapeCommFunction$MH().invokeExact(hFile.address(), dwFunc);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommConfig$MH() {
        return cfapi_h$constants$27.GetCommConfig$MH();
    }
    public static @C("BOOL") int GetCommConfig (@C("HANDLE") Addressable hCommDev, @C("LPCOMMCONFIG") Addressable lpCC, @C("LPDWORD") Addressable lpdwSize) {
        try {
            return (int)cfapi_h$constants$27.GetCommConfig$MH().invokeExact(hCommDev.address(), lpCC.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommMask$MH() {
        return cfapi_h$constants$27.GetCommMask$MH();
    }
    public static @C("BOOL") int GetCommMask (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpEvtMask) {
        try {
            return (int)cfapi_h$constants$27.GetCommMask$MH().invokeExact(hFile.address(), lpEvtMask.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommProperties$MH() {
        return cfapi_h$constants$27.GetCommProperties$MH();
    }
    public static @C("BOOL") int GetCommProperties (@C("HANDLE") Addressable hFile, @C("LPCOMMPROP") Addressable lpCommProp) {
        try {
            return (int)cfapi_h$constants$27.GetCommProperties$MH().invokeExact(hFile.address(), lpCommProp.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommModemStatus$MH() {
        return cfapi_h$constants$27.GetCommModemStatus$MH();
    }
    public static @C("BOOL") int GetCommModemStatus (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpModemStat) {
        try {
            return (int)cfapi_h$constants$27.GetCommModemStatus$MH().invokeExact(hFile.address(), lpModemStat.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommState$MH() {
        return cfapi_h$constants$27.GetCommState$MH();
    }
    public static @C("BOOL") int GetCommState (@C("HANDLE") Addressable hFile, @C("LPDCB") Addressable lpDCB) {
        try {
            return (int)cfapi_h$constants$27.GetCommState$MH().invokeExact(hFile.address(), lpDCB.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommTimeouts$MH() {
        return cfapi_h$constants$27.GetCommTimeouts$MH();
    }
    public static @C("BOOL") int GetCommTimeouts (@C("HANDLE") Addressable hFile, @C("LPCOMMTIMEOUTS") Addressable lpCommTimeouts) {
        try {
            return (int)cfapi_h$constants$27.GetCommTimeouts$MH().invokeExact(hFile.address(), lpCommTimeouts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PurgeComm$MH() {
        return cfapi_h$constants$27.PurgeComm$MH();
    }
    public static @C("BOOL") int PurgeComm (@C("HANDLE") Addressable hFile, @C("DWORD") int dwFlags) {
        try {
            return (int)cfapi_h$constants$27.PurgeComm$MH().invokeExact(hFile.address(), dwFlags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommBreak$MH() {
        return cfapi_h$constants$27.SetCommBreak$MH();
    }
    public static @C("BOOL") int SetCommBreak (@C("HANDLE") Addressable hFile) {
        try {
            return (int)cfapi_h$constants$27.SetCommBreak$MH().invokeExact(hFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommConfig$MH() {
        return cfapi_h$constants$27.SetCommConfig$MH();
    }
    public static @C("BOOL") int SetCommConfig (@C("HANDLE") Addressable hCommDev, @C("LPCOMMCONFIG") Addressable lpCC, @C("DWORD") int dwSize) {
        try {
            return (int)cfapi_h$constants$27.SetCommConfig$MH().invokeExact(hCommDev.address(), lpCC.address(), dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommMask$MH() {
        return cfapi_h$constants$27.SetCommMask$MH();
    }
    public static @C("BOOL") int SetCommMask (@C("HANDLE") Addressable hFile, @C("DWORD") int dwEvtMask) {
        try {
            return (int)cfapi_h$constants$27.SetCommMask$MH().invokeExact(hFile.address(), dwEvtMask);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommState$MH() {
        return cfapi_h$constants$27.SetCommState$MH();
    }
    public static @C("BOOL") int SetCommState (@C("HANDLE") Addressable hFile, @C("LPDCB") Addressable lpDCB) {
        try {
            return (int)cfapi_h$constants$27.SetCommState$MH().invokeExact(hFile.address(), lpDCB.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetCommTimeouts$MH() {
        return cfapi_h$constants$27.SetCommTimeouts$MH();
    }
    public static @C("BOOL") int SetCommTimeouts (@C("HANDLE") Addressable hFile, @C("LPCOMMTIMEOUTS") Addressable lpCommTimeouts) {
        try {
            return (int)cfapi_h$constants$27.SetCommTimeouts$MH().invokeExact(hFile.address(), lpCommTimeouts.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle TransmitCommChar$MH() {
        return cfapi_h$constants$27.TransmitCommChar$MH();
    }
    public static @C("BOOL") int TransmitCommChar (@C("HANDLE") Addressable hFile, @C("char") byte cChar) {
        try {
            return (int)cfapi_h$constants$27.TransmitCommChar$MH().invokeExact(hFile.address(), cChar);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WaitCommEvent$MH() {
        return cfapi_h$constants$27.WaitCommEvent$MH();
    }
    public static @C("BOOL") int WaitCommEvent (@C("HANDLE") Addressable hFile, @C("LPDWORD") Addressable lpEvtMask, @C("LPOVERLAPPED") Addressable lpOverlapped) {
        try {
            return (int)cfapi_h$constants$27.WaitCommEvent$MH().invokeExact(hFile.address(), lpEvtMask.address(), lpOverlapped.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenCommPort$MH() {
        return cfapi_h$constants$27.OpenCommPort$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenCommPort (@C("ULONG") int uPortNumber, @C("DWORD") int dwDesiredAccess, @C("DWORD") int dwFlagsAndAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.OpenCommPort$MH().invokeExact(uPortNumber, dwDesiredAccess, dwFlagsAndAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetCommPorts$MH() {
        return cfapi_h$constants$27.GetCommPorts$MH();
    }
    public static @C("ULONG") int GetCommPorts (@C("PULONG") Addressable lpPortNumbers, @C("ULONG") int uPortNumbersCount, @C("PULONG") Addressable puPortNumbersFound) {
        try {
            return (int)cfapi_h$constants$27.GetCommPorts$MH().invokeExact(lpPortNumbers.address(), uPortNumbersCount, puPortNumbersFound.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTapePosition$MH() {
        return cfapi_h$constants$27.SetTapePosition$MH();
    }
    public static @C("DWORD") int SetTapePosition (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwPositionMethod, @C("DWORD") int dwPartition, @C("DWORD") int dwOffsetLow, @C("DWORD") int dwOffsetHigh, @C("BOOL") int bImmediate) {
        try {
            return (int)cfapi_h$constants$27.SetTapePosition$MH().invokeExact(hDevice.address(), dwPositionMethod, dwPartition, dwOffsetLow, dwOffsetHigh, bImmediate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTapePosition$MH() {
        return cfapi_h$constants$27.GetTapePosition$MH();
    }
    public static @C("DWORD") int GetTapePosition (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwPositionType, @C("LPDWORD") Addressable lpdwPartition, @C("LPDWORD") Addressable lpdwOffsetLow, @C("LPDWORD") Addressable lpdwOffsetHigh) {
        try {
            return (int)cfapi_h$constants$27.GetTapePosition$MH().invokeExact(hDevice.address(), dwPositionType, lpdwPartition.address(), lpdwOffsetLow.address(), lpdwOffsetHigh.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle PrepareTape$MH() {
        return cfapi_h$constants$27.PrepareTape$MH();
    }
    public static @C("DWORD") int PrepareTape (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwOperation, @C("BOOL") int bImmediate) {
        try {
            return (int)cfapi_h$constants$27.PrepareTape$MH().invokeExact(hDevice.address(), dwOperation, bImmediate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EraseTape$MH() {
        return cfapi_h$constants$27.EraseTape$MH();
    }
    public static @C("DWORD") int EraseTape (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwEraseType, @C("BOOL") int bImmediate) {
        try {
            return (int)cfapi_h$constants$27.EraseTape$MH().invokeExact(hDevice.address(), dwEraseType, bImmediate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateTapePartition$MH() {
        return cfapi_h$constants$27.CreateTapePartition$MH();
    }
    public static @C("DWORD") int CreateTapePartition (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwPartitionMethod, @C("DWORD") int dwCount, @C("DWORD") int dwSize) {
        try {
            return (int)cfapi_h$constants$27.CreateTapePartition$MH().invokeExact(hDevice.address(), dwPartitionMethod, dwCount, dwSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteTapemark$MH() {
        return cfapi_h$constants$27.WriteTapemark$MH();
    }
    public static @C("DWORD") int WriteTapemark (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwTapemarkType, @C("DWORD") int dwTapemarkCount, @C("BOOL") int bImmediate) {
        try {
            return (int)cfapi_h$constants$27.WriteTapemark$MH().invokeExact(hDevice.address(), dwTapemarkType, dwTapemarkCount, bImmediate);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTapeStatus$MH() {
        return cfapi_h$constants$27.GetTapeStatus$MH();
    }
    public static @C("DWORD") int GetTapeStatus (@C("HANDLE") Addressable hDevice) {
        try {
            return (int)cfapi_h$constants$27.GetTapeStatus$MH().invokeExact(hDevice.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetTapeParameters$MH() {
        return cfapi_h$constants$27.GetTapeParameters$MH();
    }
    public static @C("DWORD") int GetTapeParameters (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwOperation, @C("LPDWORD") Addressable lpdwSize, @C("LPVOID") Addressable lpTapeInformation) {
        try {
            return (int)cfapi_h$constants$27.GetTapeParameters$MH().invokeExact(hDevice.address(), dwOperation, lpdwSize.address(), lpTapeInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetTapeParameters$MH() {
        return cfapi_h$constants$27.SetTapeParameters$MH();
    }
    public static @C("DWORD") int SetTapeParameters (@C("HANDLE") Addressable hDevice, @C("DWORD") int dwOperation, @C("LPVOID") Addressable lpTapeInformation) {
        try {
            return (int)cfapi_h$constants$27.SetTapeParameters$MH().invokeExact(hDevice.address(), dwOperation, lpTapeInformation.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle MulDiv$MH() {
        return cfapi_h$constants$27.MulDiv$MH();
    }
    public static @C("int") int MulDiv (@C("int") int nNumber, @C("int") int nNumerator, @C("int") int nDenominator) {
        try {
            return (int)cfapi_h$constants$27.MulDiv$MH().invokeExact(nNumber, nNumerator, nDenominator);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int DEPPolicyAlwaysOff() {
        return cfapi_h$constants$27.DEPPolicyAlwaysOff();
    }
    public static @C("int") int DEPPolicyAlwaysOn() {
        return cfapi_h$constants$27.DEPPolicyAlwaysOn();
    }
    public static @C("int") int DEPPolicyOptIn() {
        return cfapi_h$constants$27.DEPPolicyOptIn();
    }
    public static @C("int") int DEPPolicyOptOut() {
        return cfapi_h$constants$27.DEPPolicyOptOut();
    }
    public static @C("int") int DEPTotalPolicyCount() {
        return cfapi_h$constants$27.DEPTotalPolicyCount();
    }
    public static  MethodHandle GetSystemDEPPolicy$MH() {
        return cfapi_h$constants$27.GetSystemDEPPolicy$MH();
    }
    public static @C("DEP_SYSTEM_POLICY_TYPE") int GetSystemDEPPolicy () {
        try {
            return (int)cfapi_h$constants$27.GetSystemDEPPolicy$MH().invokeExact();
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetSystemRegistryQuota$MH() {
        return cfapi_h$constants$27.GetSystemRegistryQuota$MH();
    }
    public static @C("BOOL") int GetSystemRegistryQuota (@C("PDWORD") Addressable pdwQuotaAllowed, @C("PDWORD") Addressable pdwQuotaUsed) {
        try {
            return (int)cfapi_h$constants$27.GetSystemRegistryQuota$MH().invokeExact(pdwQuotaAllowed.address(), pdwQuotaUsed.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FileTimeToDosDateTime$MH() {
        return cfapi_h$constants$27.FileTimeToDosDateTime$MH();
    }
    public static @C("BOOL") int FileTimeToDosDateTime (@C("const FILETIME*") Addressable lpFileTime, @C("LPWORD") Addressable lpFatDate, @C("LPWORD") Addressable lpFatTime) {
        try {
            return (int)cfapi_h$constants$27.FileTimeToDosDateTime$MH().invokeExact(lpFileTime.address(), lpFatDate.address(), lpFatTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DosDateTimeToFileTime$MH() {
        return cfapi_h$constants$27.DosDateTimeToFileTime$MH();
    }
    public static @C("BOOL") int DosDateTimeToFileTime (@C("WORD") short wFatDate, @C("WORD") short wFatTime, @C("LPFILETIME") Addressable lpFileTime) {
        try {
            return (int)cfapi_h$constants$27.DosDateTimeToFileTime$MH().invokeExact(wFatDate, wFatTime, lpFileTime.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FormatMessageA$MH() {
        return cfapi_h$constants$27.FormatMessageA$MH();
    }
    public static @C("DWORD") int FormatMessageA (@C("DWORD") int dwFlags, @C("LPCVOID") Addressable lpSource, @C("DWORD") int dwMessageId, @C("DWORD") int dwLanguageId, @C("LPSTR") Addressable lpBuffer, @C("DWORD") int nSize, @C("va_list*") Addressable Arguments) {
        try {
            return (int)cfapi_h$constants$27.FormatMessageA$MH().invokeExact(dwFlags, lpSource.address(), dwMessageId, dwLanguageId, lpBuffer.address(), nSize, Arguments.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FormatMessageW$MH() {
        return cfapi_h$constants$27.FormatMessageW$MH();
    }
    public static @C("DWORD") int FormatMessageW (@C("DWORD") int dwFlags, @C("LPCVOID") Addressable lpSource, @C("DWORD") int dwMessageId, @C("DWORD") int dwLanguageId, @C("LPWSTR") Addressable lpBuffer, @C("DWORD") int nSize, @C("va_list*") Addressable Arguments) {
        try {
            return (int)cfapi_h$constants$27.FormatMessageW$MH().invokeExact(dwFlags, lpSource.address(), dwMessageId, dwLanguageId, lpBuffer.address(), nSize, Arguments.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMailslotA$MH() {
        return cfapi_h$constants$27.CreateMailslotA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateMailslotA (@C("LPCSTR") Addressable lpName, @C("DWORD") int nMaxMessageSize, @C("DWORD") int lReadTimeout, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateMailslotA$MH().invokeExact(lpName.address(), nMaxMessageSize, lReadTimeout, lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateMailslotW$MH() {
        return cfapi_h$constants$27.CreateMailslotW$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateMailslotW (@C("LPCWSTR") Addressable lpName, @C("DWORD") int nMaxMessageSize, @C("DWORD") int lReadTimeout, @C("LPSECURITY_ATTRIBUTES") Addressable lpSecurityAttributes) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateMailslotW$MH().invokeExact(lpName.address(), nMaxMessageSize, lReadTimeout, lpSecurityAttributes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetMailslotInfo$MH() {
        return cfapi_h$constants$27.GetMailslotInfo$MH();
    }
    public static @C("BOOL") int GetMailslotInfo (@C("HANDLE") Addressable hMailslot, @C("LPDWORD") Addressable lpMaxMessageSize, @C("LPDWORD") Addressable lpNextSize, @C("LPDWORD") Addressable lpMessageCount, @C("LPDWORD") Addressable lpReadTimeout) {
        try {
            return (int)cfapi_h$constants$27.GetMailslotInfo$MH().invokeExact(hMailslot.address(), lpMaxMessageSize.address(), lpNextSize.address(), lpMessageCount.address(), lpReadTimeout.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetMailslotInfo$MH() {
        return cfapi_h$constants$27.SetMailslotInfo$MH();
    }
    public static @C("BOOL") int SetMailslotInfo (@C("HANDLE") Addressable hMailslot, @C("DWORD") int lReadTimeout) {
        try {
            return (int)cfapi_h$constants$27.SetMailslotInfo$MH().invokeExact(hMailslot.address(), lReadTimeout);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EncryptFileA$MH() {
        return cfapi_h$constants$27.EncryptFileA$MH();
    }
    public static @C("BOOL") int EncryptFileA (@C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.EncryptFileA$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EncryptFileW$MH() {
        return cfapi_h$constants$27.EncryptFileW$MH();
    }
    public static @C("BOOL") int EncryptFileW (@C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.EncryptFileW$MH().invokeExact(lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DecryptFileA$MH() {
        return cfapi_h$constants$27.DecryptFileA$MH();
    }
    public static @C("BOOL") int DecryptFileA (@C("LPCSTR") Addressable lpFileName, @C("DWORD") int dwReserved) {
        try {
            return (int)cfapi_h$constants$27.DecryptFileA$MH().invokeExact(lpFileName.address(), dwReserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle DecryptFileW$MH() {
        return cfapi_h$constants$27.DecryptFileW$MH();
    }
    public static @C("BOOL") int DecryptFileW (@C("LPCWSTR") Addressable lpFileName, @C("DWORD") int dwReserved) {
        try {
            return (int)cfapi_h$constants$27.DecryptFileW$MH().invokeExact(lpFileName.address(), dwReserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FileEncryptionStatusA$MH() {
        return cfapi_h$constants$27.FileEncryptionStatusA$MH();
    }
    public static @C("BOOL") int FileEncryptionStatusA (@C("LPCSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpStatus) {
        try {
            return (int)cfapi_h$constants$27.FileEncryptionStatusA$MH().invokeExact(lpFileName.address(), lpStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FileEncryptionStatusW$MH() {
        return cfapi_h$constants$27.FileEncryptionStatusW$MH();
    }
    public static @C("BOOL") int FileEncryptionStatusW (@C("LPCWSTR") Addressable lpFileName, @C("LPDWORD") Addressable lpStatus) {
        try {
            return (int)cfapi_h$constants$27.FileEncryptionStatusW$MH().invokeExact(lpFileName.address(), lpStatus.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEncryptedFileRawA$MH() {
        return cfapi_h$constants$27.OpenEncryptedFileRawA$MH();
    }
    public static @C("DWORD") int OpenEncryptedFileRawA (@C("LPCSTR") Addressable lpFileName, @C("ULONG") int ulFlags, @C("PVOID*") Addressable pvContext) {
        try {
            return (int)cfapi_h$constants$27.OpenEncryptedFileRawA$MH().invokeExact(lpFileName.address(), ulFlags, pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenEncryptedFileRawW$MH() {
        return cfapi_h$constants$27.OpenEncryptedFileRawW$MH();
    }
    public static @C("DWORD") int OpenEncryptedFileRawW (@C("LPCWSTR") Addressable lpFileName, @C("ULONG") int ulFlags, @C("PVOID*") Addressable pvContext) {
        try {
            return (int)cfapi_h$constants$27.OpenEncryptedFileRawW$MH().invokeExact(lpFileName.address(), ulFlags, pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle ReadEncryptedFileRaw$MH() {
        return cfapi_h$constants$27.ReadEncryptedFileRaw$MH();
    }
    public static @C("DWORD") int ReadEncryptedFileRaw (@C("PFE_EXPORT_FUNC") Addressable pfExportCallback, @C("PVOID") Addressable pvCallbackContext, @C("PVOID") Addressable pvContext) {
        try {
            return (int)cfapi_h$constants$27.ReadEncryptedFileRaw$MH().invokeExact(pfExportCallback.address(), pvCallbackContext.address(), pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteEncryptedFileRaw$MH() {
        return cfapi_h$constants$27.WriteEncryptedFileRaw$MH();
    }
    public static @C("DWORD") int WriteEncryptedFileRaw (@C("PFE_IMPORT_FUNC") Addressable pfImportCallback, @C("PVOID") Addressable pvCallbackContext, @C("PVOID") Addressable pvContext) {
        try {
            return (int)cfapi_h$constants$27.WriteEncryptedFileRaw$MH().invokeExact(pfImportCallback.address(), pvCallbackContext.address(), pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CloseEncryptedFileRaw$MH() {
        return cfapi_h$constants$27.CloseEncryptedFileRaw$MH();
    }
    public static void CloseEncryptedFileRaw (@C("PVOID") Addressable pvContext) {
        try {
            cfapi_h$constants$27.CloseEncryptedFileRaw$MH().invokeExact(pvContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcmpA$MH() {
        return cfapi_h$constants$27.lstrcmpA$MH();
    }
    public static @C("int") int lstrcmpA (@C("LPCSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2) {
        try {
            return (int)cfapi_h$constants$27.lstrcmpA$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcmpW$MH() {
        return cfapi_h$constants$27.lstrcmpW$MH();
    }
    public static @C("int") int lstrcmpW (@C("LPCWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2) {
        try {
            return (int)cfapi_h$constants$27.lstrcmpW$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcmpiA$MH() {
        return cfapi_h$constants$27.lstrcmpiA$MH();
    }
    public static @C("int") int lstrcmpiA (@C("LPCSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2) {
        try {
            return (int)cfapi_h$constants$27.lstrcmpiA$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcmpiW$MH() {
        return cfapi_h$constants$27.lstrcmpiW$MH();
    }
    public static @C("int") int lstrcmpiW (@C("LPCWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2) {
        try {
            return (int)cfapi_h$constants$27.lstrcmpiW$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcpynA$MH() {
        return cfapi_h$constants$27.lstrcpynA$MH();
    }
    public static @C("LPSTR") MemoryAddress lstrcpynA (@C("LPSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2, @C("int") int iMaxLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.lstrcpynA$MH().invokeExact(lpString1.address(), lpString2.address(), iMaxLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcpynW$MH() {
        return cfapi_h$constants$27.lstrcpynW$MH();
    }
    public static @C("LPWSTR") MemoryAddress lstrcpynW (@C("LPWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2, @C("int") int iMaxLength) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.lstrcpynW$MH().invokeExact(lpString1.address(), lpString2.address(), iMaxLength);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcpyA$MH() {
        return cfapi_h$constants$27.lstrcpyA$MH();
    }
    public static @C("LPSTR") MemoryAddress lstrcpyA (@C("LPSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.lstrcpyA$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcpyW$MH() {
        return cfapi_h$constants$27.lstrcpyW$MH();
    }
    public static @C("LPWSTR") MemoryAddress lstrcpyW (@C("LPWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.lstrcpyW$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcatA$MH() {
        return cfapi_h$constants$27.lstrcatA$MH();
    }
    public static @C("LPSTR") MemoryAddress lstrcatA (@C("LPSTR") Addressable lpString1, @C("LPCSTR") Addressable lpString2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.lstrcatA$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrcatW$MH() {
        return cfapi_h$constants$27.lstrcatW$MH();
    }
    public static @C("LPWSTR") MemoryAddress lstrcatW (@C("LPWSTR") Addressable lpString1, @C("LPCWSTR") Addressable lpString2) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.lstrcatW$MH().invokeExact(lpString1.address(), lpString2.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrlenA$MH() {
        return cfapi_h$constants$27.lstrlenA$MH();
    }
    public static @C("int") int lstrlenA (@C("LPCSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$27.lstrlenA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle lstrlenW$MH() {
        return cfapi_h$constants$27.lstrlenW$MH();
    }
    public static @C("int") int lstrlenW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$27.lstrlenW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenFile$MH() {
        return cfapi_h$constants$27.OpenFile$MH();
    }
    public static @C("HFILE") int OpenFile (@C("LPCSTR") Addressable lpFileName, @C("LPOFSTRUCT") Addressable lpReOpenBuff, @C("UINT") int uStyle) {
        try {
            return (int)cfapi_h$constants$27.OpenFile$MH().invokeExact(lpFileName.address(), lpReOpenBuff.address(), uStyle);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lopen$MH() {
        return cfapi_h$constants$27._lopen$MH();
    }
    public static @C("HFILE") int _lopen (@C("LPCSTR") Addressable lpPathName, @C("int") int iReadWrite) {
        try {
            return (int)cfapi_h$constants$27._lopen$MH().invokeExact(lpPathName.address(), iReadWrite);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lcreat$MH() {
        return cfapi_h$constants$27._lcreat$MH();
    }
    public static @C("HFILE") int _lcreat (@C("LPCSTR") Addressable lpPathName, @C("int") int iAttribute) {
        try {
            return (int)cfapi_h$constants$27._lcreat$MH().invokeExact(lpPathName.address(), iAttribute);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lread$MH() {
        return cfapi_h$constants$27._lread$MH();
    }
    public static @C("UINT") int _lread (@C("HFILE") int hFile, @C("LPVOID") Addressable lpBuffer, @C("UINT") int uBytes) {
        try {
            return (int)cfapi_h$constants$27._lread$MH().invokeExact(hFile, lpBuffer.address(), uBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lwrite$MH() {
        return cfapi_h$constants$27._lwrite$MH();
    }
    public static @C("UINT") int _lwrite (@C("HFILE") int hFile, @C("LPCCH") Addressable lpBuffer, @C("UINT") int uBytes) {
        try {
            return (int)cfapi_h$constants$27._lwrite$MH().invokeExact(hFile, lpBuffer.address(), uBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _hread$MH() {
        return cfapi_h$constants$27._hread$MH();
    }
    public static @C("long") int _hread (@C("HFILE") int hFile, @C("LPVOID") Addressable lpBuffer, @C("long") int lBytes) {
        try {
            return (int)cfapi_h$constants$27._hread$MH().invokeExact(hFile, lpBuffer.address(), lBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _hwrite$MH() {
        return cfapi_h$constants$27._hwrite$MH();
    }
    public static @C("long") int _hwrite (@C("HFILE") int hFile, @C("LPCCH") Addressable lpBuffer, @C("long") int lBytes) {
        try {
            return (int)cfapi_h$constants$27._hwrite$MH().invokeExact(hFile, lpBuffer.address(), lBytes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _lclose$MH() {
        return cfapi_h$constants$27._lclose$MH();
    }
    public static @C("HFILE") int _lclose (@C("HFILE") int hFile) {
        try {
            return (int)cfapi_h$constants$27._lclose$MH().invokeExact(hFile);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle _llseek$MH() {
        return cfapi_h$constants$27._llseek$MH();
    }
    public static @C("LONG") int _llseek (@C("HFILE") int hFile, @C("LONG") int lOffset, @C("int") int iOrigin) {
        try {
            return (int)cfapi_h$constants$27._llseek$MH().invokeExact(hFile, lOffset, iOrigin);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsTextUnicode$MH() {
        return cfapi_h$constants$27.IsTextUnicode$MH();
    }
    public static @C("BOOL") int IsTextUnicode (@C("void*") Addressable lpv, @C("int") int iSize, @C("LPINT") Addressable lpiResult) {
        try {
            return (int)cfapi_h$constants$27.IsTextUnicode$MH().invokeExact(lpv.address(), iSize, lpiResult.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupRead$MH() {
        return cfapi_h$constants$27.BackupRead$MH();
    }
    public static @C("BOOL") int BackupRead (@C("HANDLE") Addressable hFile, @C("LPBYTE") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToRead, @C("LPDWORD") Addressable lpNumberOfBytesRead, @C("BOOL") int bAbort, @C("BOOL") int bProcessSecurity, @C("LPVOID*") Addressable lpContext) {
        try {
            return (int)cfapi_h$constants$27.BackupRead$MH().invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToRead, lpNumberOfBytesRead.address(), bAbort, bProcessSecurity, lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupSeek$MH() {
        return cfapi_h$constants$27.BackupSeek$MH();
    }
    public static @C("BOOL") int BackupSeek (@C("HANDLE") Addressable hFile, @C("DWORD") int dwLowBytesToSeek, @C("DWORD") int dwHighBytesToSeek, @C("LPDWORD") Addressable lpdwLowByteSeeked, @C("LPDWORD") Addressable lpdwHighByteSeeked, @C("LPVOID*") Addressable lpContext) {
        try {
            return (int)cfapi_h$constants$27.BackupSeek$MH().invokeExact(hFile.address(), dwLowBytesToSeek, dwHighBytesToSeek, lpdwLowByteSeeked.address(), lpdwHighByteSeeked.address(), lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BackupWrite$MH() {
        return cfapi_h$constants$27.BackupWrite$MH();
    }
    public static @C("BOOL") int BackupWrite (@C("HANDLE") Addressable hFile, @C("LPBYTE") Addressable lpBuffer, @C("DWORD") int nNumberOfBytesToWrite, @C("LPDWORD") Addressable lpNumberOfBytesWritten, @C("BOOL") int bAbort, @C("BOOL") int bProcessSecurity, @C("LPVOID*") Addressable lpContext) {
        try {
            return (int)cfapi_h$constants$27.BackupWrite$MH().invokeExact(hFile.address(), lpBuffer.address(), nNumberOfBytesToWrite, lpNumberOfBytesWritten.address(), bAbort, bProcessSecurity, lpContext.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenMutexA$MH() {
        return cfapi_h$constants$27.OpenMutexA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenMutexA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.OpenMutexA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSemaphoreA$MH() {
        return cfapi_h$constants$27.CreateSemaphoreA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateSemaphoreA (@C("LPSECURITY_ATTRIBUTES") Addressable lpSemaphoreAttributes, @C("LONG") int lInitialCount, @C("LONG") int lMaximumCount, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateSemaphoreA$MH().invokeExact(lpSemaphoreAttributes.address(), lInitialCount, lMaximumCount, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenSemaphoreA$MH() {
        return cfapi_h$constants$27.OpenSemaphoreA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenSemaphoreA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.OpenSemaphoreA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWaitableTimerA$MH() {
        return cfapi_h$constants$27.CreateWaitableTimerA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateWaitableTimerA (@C("LPSECURITY_ATTRIBUTES") Addressable lpTimerAttributes, @C("BOOL") int bManualReset, @C("LPCSTR") Addressable lpTimerName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateWaitableTimerA$MH().invokeExact(lpTimerAttributes.address(), bManualReset, lpTimerName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenWaitableTimerA$MH() {
        return cfapi_h$constants$27.OpenWaitableTimerA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenWaitableTimerA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpTimerName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.OpenWaitableTimerA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpTimerName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateSemaphoreExA$MH() {
        return cfapi_h$constants$27.CreateSemaphoreExA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateSemaphoreExA (@C("LPSECURITY_ATTRIBUTES") Addressable lpSemaphoreAttributes, @C("LONG") int lInitialCount, @C("LONG") int lMaximumCount, @C("LPCSTR") Addressable lpName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateSemaphoreExA$MH().invokeExact(lpSemaphoreAttributes.address(), lInitialCount, lMaximumCount, lpName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateWaitableTimerExA$MH() {
        return cfapi_h$constants$27.CreateWaitableTimerExA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateWaitableTimerExA (@C("LPSECURITY_ATTRIBUTES") Addressable lpTimerAttributes, @C("LPCSTR") Addressable lpTimerName, @C("DWORD") int dwFlags, @C("DWORD") int dwDesiredAccess) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateWaitableTimerExA$MH().invokeExact(lpTimerAttributes.address(), lpTimerName.address(), dwFlags, dwDesiredAccess);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileMappingA$MH() {
        return cfapi_h$constants$27.CreateFileMappingA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileMappingA (@C("HANDLE") Addressable hFile, @C("LPSECURITY_ATTRIBUTES") Addressable lpFileMappingAttributes, @C("DWORD") int flProtect, @C("DWORD") int dwMaximumSizeHigh, @C("DWORD") int dwMaximumSizeLow, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateFileMappingA$MH().invokeExact(hFile.address(), lpFileMappingAttributes.address(), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle CreateFileMappingNumaA$MH() {
        return cfapi_h$constants$27.CreateFileMappingNumaA$MH();
    }
    public static @C("HANDLE") MemoryAddress CreateFileMappingNumaA (@C("HANDLE") Addressable hFile, @C("LPSECURITY_ATTRIBUTES") Addressable lpFileMappingAttributes, @C("DWORD") int flProtect, @C("DWORD") int dwMaximumSizeHigh, @C("DWORD") int dwMaximumSizeLow, @C("LPCSTR") Addressable lpName, @C("DWORD") int nndPreferred) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.CreateFileMappingNumaA$MH().invokeExact(hFile.address(), lpFileMappingAttributes.address(), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName.address(), nndPreferred);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle OpenFileMappingA$MH() {
        return cfapi_h$constants$27.OpenFileMappingA$MH();
    }
    public static @C("HANDLE") MemoryAddress OpenFileMappingA (@C("DWORD") int dwDesiredAccess, @C("BOOL") int bInheritHandle, @C("LPCSTR") Addressable lpName) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.OpenFileMappingA$MH().invokeExact(dwDesiredAccess, bInheritHandle, lpName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetLogicalDriveStringsA$MH() {
        return cfapi_h$constants$27.GetLogicalDriveStringsA$MH();
    }
    public static @C("DWORD") int GetLogicalDriveStringsA (@C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$27.GetLogicalDriveStringsA$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle LoadPackagedLibrary$MH() {
        return cfapi_h$constants$27.LoadPackagedLibrary$MH();
    }
    public static @C("HMODULE") MemoryAddress LoadPackagedLibrary (@C("LPCWSTR") Addressable lpwLibFileName, @C("DWORD") int Reserved) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.LoadPackagedLibrary$MH().invokeExact(lpwLibFileName.address(), Reserved);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryFullProcessImageNameA$MH() {
        return cfapi_h$constants$27.QueryFullProcessImageNameA$MH();
    }
    public static @C("BOOL") int QueryFullProcessImageNameA (@C("HANDLE") Addressable hProcess, @C("DWORD") int dwFlags, @C("LPSTR") Addressable lpExeName, @C("PDWORD") Addressable lpdwSize) {
        try {
            return (int)cfapi_h$constants$27.QueryFullProcessImageNameA$MH().invokeExact(hProcess.address(), dwFlags, lpExeName.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle QueryFullProcessImageNameW$MH() {
        return cfapi_h$constants$27.QueryFullProcessImageNameW$MH();
    }
    public static @C("BOOL") int QueryFullProcessImageNameW (@C("HANDLE") Addressable hProcess, @C("DWORD") int dwFlags, @C("LPWSTR") Addressable lpExeName, @C("PDWORD") Addressable lpdwSize) {
        try {
            return (int)cfapi_h$constants$27.QueryFullProcessImageNameW$MH().invokeExact(hProcess.address(), dwFlags, lpExeName.address(), lpdwSize.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static @C("int") int ProcThreadAttributeParentProcess() {
        return cfapi_h$constants$27.ProcThreadAttributeParentProcess();
    }
    public static @C("int") int ProcThreadAttributeHandleList() {
        return cfapi_h$constants$27.ProcThreadAttributeHandleList();
    }
    public static @C("int") int ProcThreadAttributeGroupAffinity() {
        return cfapi_h$constants$27.ProcThreadAttributeGroupAffinity();
    }
    public static @C("int") int ProcThreadAttributePreferredNode() {
        return cfapi_h$constants$27.ProcThreadAttributePreferredNode();
    }
    public static @C("int") int ProcThreadAttributeIdealProcessor() {
        return cfapi_h$constants$27.ProcThreadAttributeIdealProcessor();
    }
    public static @C("int") int ProcThreadAttributeUmsThread() {
        return cfapi_h$constants$27.ProcThreadAttributeUmsThread();
    }
    public static @C("int") int ProcThreadAttributeMitigationPolicy() {
        return cfapi_h$constants$27.ProcThreadAttributeMitigationPolicy();
    }
    public static @C("int") int ProcThreadAttributeSecurityCapabilities() {
        return cfapi_h$constants$27.ProcThreadAttributeSecurityCapabilities();
    }
    public static @C("int") int ProcThreadAttributeProtectionLevel() {
        return cfapi_h$constants$27.ProcThreadAttributeProtectionLevel();
    }
    public static @C("int") int ProcThreadAttributeJobList() {
        return cfapi_h$constants$27.ProcThreadAttributeJobList();
    }
    public static @C("int") int ProcThreadAttributeChildProcessPolicy() {
        return cfapi_h$constants$27.ProcThreadAttributeChildProcessPolicy();
    }
    public static @C("int") int ProcThreadAttributeAllApplicationPackagesPolicy() {
        return cfapi_h$constants$27.ProcThreadAttributeAllApplicationPackagesPolicy();
    }
    public static @C("int") int ProcThreadAttributeWin32kFilter() {
        return cfapi_h$constants$27.ProcThreadAttributeWin32kFilter();
    }
    public static @C("int") int ProcThreadAttributeSafeOpenPromptOriginClaim() {
        return cfapi_h$constants$27.ProcThreadAttributeSafeOpenPromptOriginClaim();
    }
    public static @C("int") int ProcThreadAttributeDesktopAppPolicy() {
        return cfapi_h$constants$27.ProcThreadAttributeDesktopAppPolicy();
    }
    public static @C("int") int ProcThreadAttributePseudoConsole() {
        return cfapi_h$constants$27.ProcThreadAttributePseudoConsole();
    }
    public static  MethodHandle GetStartupInfoA$MH() {
        return cfapi_h$constants$27.GetStartupInfoA$MH();
    }
    public static void GetStartupInfoA (@C("LPSTARTUPINFOA") Addressable lpStartupInfo) {
        try {
            cfapi_h$constants$27.GetStartupInfoA$MH().invokeExact(lpStartupInfo.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareEnvironmentVariableA$MH() {
        return cfapi_h$constants$27.GetFirmwareEnvironmentVariableA$MH();
    }
    public static @C("DWORD") int GetFirmwareEnvironmentVariableA (@C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpGuid, @C("PVOID") Addressable pBuffer, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GetFirmwareEnvironmentVariableA$MH().invokeExact(lpName.address(), lpGuid.address(), pBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareEnvironmentVariableW$MH() {
        return cfapi_h$constants$27.GetFirmwareEnvironmentVariableW$MH();
    }
    public static @C("DWORD") int GetFirmwareEnvironmentVariableW (@C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpGuid, @C("PVOID") Addressable pBuffer, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GetFirmwareEnvironmentVariableW$MH().invokeExact(lpName.address(), lpGuid.address(), pBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareEnvironmentVariableExA$MH() {
        return cfapi_h$constants$27.GetFirmwareEnvironmentVariableExA$MH();
    }
    public static @C("DWORD") int GetFirmwareEnvironmentVariableExA (@C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpGuid, @C("PVOID") Addressable pBuffer, @C("DWORD") int nSize, @C("PDWORD") Addressable pdwAttribubutes) {
        try {
            return (int)cfapi_h$constants$27.GetFirmwareEnvironmentVariableExA$MH().invokeExact(lpName.address(), lpGuid.address(), pBuffer.address(), nSize, pdwAttribubutes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareEnvironmentVariableExW$MH() {
        return cfapi_h$constants$27.GetFirmwareEnvironmentVariableExW$MH();
    }
    public static @C("DWORD") int GetFirmwareEnvironmentVariableExW (@C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpGuid, @C("PVOID") Addressable pBuffer, @C("DWORD") int nSize, @C("PDWORD") Addressable pdwAttribubutes) {
        try {
            return (int)cfapi_h$constants$27.GetFirmwareEnvironmentVariableExW$MH().invokeExact(lpName.address(), lpGuid.address(), pBuffer.address(), nSize, pdwAttribubutes.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFirmwareEnvironmentVariableA$MH() {
        return cfapi_h$constants$27.SetFirmwareEnvironmentVariableA$MH();
    }
    public static @C("BOOL") int SetFirmwareEnvironmentVariableA (@C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpGuid, @C("PVOID") Addressable pValue, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$27.SetFirmwareEnvironmentVariableA$MH().invokeExact(lpName.address(), lpGuid.address(), pValue.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFirmwareEnvironmentVariableW$MH() {
        return cfapi_h$constants$27.SetFirmwareEnvironmentVariableW$MH();
    }
    public static @C("BOOL") int SetFirmwareEnvironmentVariableW (@C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpGuid, @C("PVOID") Addressable pValue, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$27.SetFirmwareEnvironmentVariableW$MH().invokeExact(lpName.address(), lpGuid.address(), pValue.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFirmwareEnvironmentVariableExA$MH() {
        return cfapi_h$constants$27.SetFirmwareEnvironmentVariableExA$MH();
    }
    public static @C("BOOL") int SetFirmwareEnvironmentVariableExA (@C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpGuid, @C("PVOID") Addressable pValue, @C("DWORD") int nSize, @C("DWORD") int dwAttributes) {
        try {
            return (int)cfapi_h$constants$27.SetFirmwareEnvironmentVariableExA$MH().invokeExact(lpName.address(), lpGuid.address(), pValue.address(), nSize, dwAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetFirmwareEnvironmentVariableExW$MH() {
        return cfapi_h$constants$27.SetFirmwareEnvironmentVariableExW$MH();
    }
    public static @C("BOOL") int SetFirmwareEnvironmentVariableExW (@C("LPCWSTR") Addressable lpName, @C("LPCWSTR") Addressable lpGuid, @C("PVOID") Addressable pValue, @C("DWORD") int nSize, @C("DWORD") int dwAttributes) {
        try {
            return (int)cfapi_h$constants$27.SetFirmwareEnvironmentVariableExW$MH().invokeExact(lpName.address(), lpGuid.address(), pValue.address(), nSize, dwAttributes);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetFirmwareType$MH() {
        return cfapi_h$constants$27.GetFirmwareType$MH();
    }
    public static @C("BOOL") int GetFirmwareType (@C("PFIRMWARE_TYPE") Addressable FirmwareType) {
        try {
            return (int)cfapi_h$constants$27.GetFirmwareType$MH().invokeExact(FirmwareType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle IsNativeVhdBoot$MH() {
        return cfapi_h$constants$27.IsNativeVhdBoot$MH();
    }
    public static @C("BOOL") int IsNativeVhdBoot (@C("PBOOL") Addressable NativeVhdBoot) {
        try {
            return (int)cfapi_h$constants$27.IsNativeVhdBoot$MH().invokeExact(NativeVhdBoot.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindResourceA$MH() {
        return cfapi_h$constants$27.FindResourceA$MH();
    }
    public static @C("HRSRC") MemoryAddress FindResourceA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpName, @C("LPCSTR") Addressable lpType) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.FindResourceA$MH().invokeExact(hModule.address(), lpName.address(), lpType.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindResourceExA$MH() {
        return cfapi_h$constants$27.FindResourceExA$MH();
    }
    public static @C("HRSRC") MemoryAddress FindResourceExA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpType, @C("LPCSTR") Addressable lpName, @C("WORD") short wLanguage) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.FindResourceExA$MH().invokeExact(hModule.address(), lpType.address(), lpName.address(), wLanguage);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceTypesA$MH() {
        return cfapi_h$constants$27.EnumResourceTypesA$MH();
    }
    public static @C("BOOL") int EnumResourceTypesA (@C("HMODULE") Addressable hModule, @C("ENUMRESTYPEPROCA") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$27.EnumResourceTypesA$MH().invokeExact(hModule.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceTypesW$MH() {
        return cfapi_h$constants$27.EnumResourceTypesW$MH();
    }
    public static @C("BOOL") int EnumResourceTypesW (@C("HMODULE") Addressable hModule, @C("ENUMRESTYPEPROCW") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$27.EnumResourceTypesW$MH().invokeExact(hModule.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceNamesA$MH() {
        return cfapi_h$constants$27.EnumResourceNamesA$MH();
    }
    public static @C("BOOL") int EnumResourceNamesA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpType, @C("ENUMRESNAMEPROCA") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$27.EnumResourceNamesA$MH().invokeExact(hModule.address(), lpType.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceLanguagesA$MH() {
        return cfapi_h$constants$27.EnumResourceLanguagesA$MH();
    }
    public static @C("BOOL") int EnumResourceLanguagesA (@C("HMODULE") Addressable hModule, @C("LPCSTR") Addressable lpType, @C("LPCSTR") Addressable lpName, @C("ENUMRESLANGPROCA") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$27.EnumResourceLanguagesA$MH().invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EnumResourceLanguagesW$MH() {
        return cfapi_h$constants$27.EnumResourceLanguagesW$MH();
    }
    public static @C("BOOL") int EnumResourceLanguagesW (@C("HMODULE") Addressable hModule, @C("LPCWSTR") Addressable lpType, @C("LPCWSTR") Addressable lpName, @C("ENUMRESLANGPROCW") Addressable lpEnumFunc, @C("LONG_PTR") long lParam) {
        try {
            return (int)cfapi_h$constants$27.EnumResourceLanguagesW$MH().invokeExact(hModule.address(), lpType.address(), lpName.address(), lpEnumFunc.address(), lParam);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BeginUpdateResourceA$MH() {
        return cfapi_h$constants$27.BeginUpdateResourceA$MH();
    }
    public static @C("HANDLE") MemoryAddress BeginUpdateResourceA (@C("LPCSTR") Addressable pFileName, @C("BOOL") int bDeleteExistingResources) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.BeginUpdateResourceA$MH().invokeExact(pFileName.address(), bDeleteExistingResources);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle BeginUpdateResourceW$MH() {
        return cfapi_h$constants$27.BeginUpdateResourceW$MH();
    }
    public static @C("HANDLE") MemoryAddress BeginUpdateResourceW (@C("LPCWSTR") Addressable pFileName, @C("BOOL") int bDeleteExistingResources) {
        try {
            return (jdk.incubator.foreign.MemoryAddress)cfapi_h$constants$27.BeginUpdateResourceW$MH().invokeExact(pFileName.address(), bDeleteExistingResources);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateResourceA$MH() {
        return cfapi_h$constants$27.UpdateResourceA$MH();
    }
    public static @C("BOOL") int UpdateResourceA (@C("HANDLE") Addressable hUpdate, @C("LPCSTR") Addressable lpType, @C("LPCSTR") Addressable lpName, @C("WORD") short wLanguage, @C("LPVOID") Addressable lpData, @C("DWORD") int cb) {
        try {
            return (int)cfapi_h$constants$27.UpdateResourceA$MH().invokeExact(hUpdate.address(), lpType.address(), lpName.address(), wLanguage, lpData.address(), cb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle UpdateResourceW$MH() {
        return cfapi_h$constants$27.UpdateResourceW$MH();
    }
    public static @C("BOOL") int UpdateResourceW (@C("HANDLE") Addressable hUpdate, @C("LPCWSTR") Addressable lpType, @C("LPCWSTR") Addressable lpName, @C("WORD") short wLanguage, @C("LPVOID") Addressable lpData, @C("DWORD") int cb) {
        try {
            return (int)cfapi_h$constants$27.UpdateResourceW$MH().invokeExact(hUpdate.address(), lpType.address(), lpName.address(), wLanguage, lpData.address(), cb);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndUpdateResourceA$MH() {
        return cfapi_h$constants$27.EndUpdateResourceA$MH();
    }
    public static @C("BOOL") int EndUpdateResourceA (@C("HANDLE") Addressable hUpdate, @C("BOOL") int fDiscard) {
        try {
            return (int)cfapi_h$constants$27.EndUpdateResourceA$MH().invokeExact(hUpdate.address(), fDiscard);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle EndUpdateResourceW$MH() {
        return cfapi_h$constants$27.EndUpdateResourceW$MH();
    }
    public static @C("BOOL") int EndUpdateResourceW (@C("HANDLE") Addressable hUpdate, @C("BOOL") int fDiscard) {
        try {
            return (int)cfapi_h$constants$27.EndUpdateResourceW$MH().invokeExact(hUpdate.address(), fDiscard);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAddAtomA$MH() {
        return cfapi_h$constants$27.GlobalAddAtomA$MH();
    }
    public static @C("ATOM") short GlobalAddAtomA (@C("LPCSTR") Addressable lpString) {
        try {
            return (short)cfapi_h$constants$27.GlobalAddAtomA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAddAtomW$MH() {
        return cfapi_h$constants$27.GlobalAddAtomW$MH();
    }
    public static @C("ATOM") short GlobalAddAtomW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (short)cfapi_h$constants$27.GlobalAddAtomW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAddAtomExA$MH() {
        return cfapi_h$constants$27.GlobalAddAtomExA$MH();
    }
    public static @C("ATOM") short GlobalAddAtomExA (@C("LPCSTR") Addressable lpString, @C("DWORD") int Flags) {
        try {
            return (short)cfapi_h$constants$27.GlobalAddAtomExA$MH().invokeExact(lpString.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalAddAtomExW$MH() {
        return cfapi_h$constants$27.GlobalAddAtomExW$MH();
    }
    public static @C("ATOM") short GlobalAddAtomExW (@C("LPCWSTR") Addressable lpString, @C("DWORD") int Flags) {
        try {
            return (short)cfapi_h$constants$27.GlobalAddAtomExW$MH().invokeExact(lpString.address(), Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFindAtomA$MH() {
        return cfapi_h$constants$27.GlobalFindAtomA$MH();
    }
    public static @C("ATOM") short GlobalFindAtomA (@C("LPCSTR") Addressable lpString) {
        try {
            return (short)cfapi_h$constants$27.GlobalFindAtomA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalFindAtomW$MH() {
        return cfapi_h$constants$27.GlobalFindAtomW$MH();
    }
    public static @C("ATOM") short GlobalFindAtomW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (short)cfapi_h$constants$27.GlobalFindAtomW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalGetAtomNameA$MH() {
        return cfapi_h$constants$27.GlobalGetAtomNameA$MH();
    }
    public static @C("UINT") int GlobalGetAtomNameA (@C("ATOM") short nAtom, @C("LPSTR") Addressable lpBuffer, @C("int") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GlobalGetAtomNameA$MH().invokeExact(nAtom, lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GlobalGetAtomNameW$MH() {
        return cfapi_h$constants$27.GlobalGetAtomNameW$MH();
    }
    public static @C("UINT") int GlobalGetAtomNameW (@C("ATOM") short nAtom, @C("LPWSTR") Addressable lpBuffer, @C("int") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GlobalGetAtomNameW$MH().invokeExact(nAtom, lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAtomA$MH() {
        return cfapi_h$constants$27.AddAtomA$MH();
    }
    public static @C("ATOM") short AddAtomA (@C("LPCSTR") Addressable lpString) {
        try {
            return (short)cfapi_h$constants$27.AddAtomA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle AddAtomW$MH() {
        return cfapi_h$constants$27.AddAtomW$MH();
    }
    public static @C("ATOM") short AddAtomW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (short)cfapi_h$constants$27.AddAtomW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindAtomA$MH() {
        return cfapi_h$constants$27.FindAtomA$MH();
    }
    public static @C("ATOM") short FindAtomA (@C("LPCSTR") Addressable lpString) {
        try {
            return (short)cfapi_h$constants$27.FindAtomA$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle FindAtomW$MH() {
        return cfapi_h$constants$27.FindAtomW$MH();
    }
    public static @C("ATOM") short FindAtomW (@C("LPCWSTR") Addressable lpString) {
        try {
            return (short)cfapi_h$constants$27.FindAtomW$MH().invokeExact(lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAtomNameA$MH() {
        return cfapi_h$constants$27.GetAtomNameA$MH();
    }
    public static @C("UINT") int GetAtomNameA (@C("ATOM") short nAtom, @C("LPSTR") Addressable lpBuffer, @C("int") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GetAtomNameA$MH().invokeExact(nAtom, lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetAtomNameW$MH() {
        return cfapi_h$constants$27.GetAtomNameW$MH();
    }
    public static @C("UINT") int GetAtomNameW (@C("ATOM") short nAtom, @C("LPWSTR") Addressable lpBuffer, @C("int") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GetAtomNameW$MH().invokeExact(nAtom, lpBuffer.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileIntA$MH() {
        return cfapi_h$constants$27.GetProfileIntA$MH();
    }
    public static @C("UINT") int GetProfileIntA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("INT") int nDefault) {
        try {
            return (int)cfapi_h$constants$27.GetProfileIntA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), nDefault);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileIntW$MH() {
        return cfapi_h$constants$27.GetProfileIntW$MH();
    }
    public static @C("UINT") int GetProfileIntW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("INT") int nDefault) {
        try {
            return (int)cfapi_h$constants$27.GetProfileIntW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), nDefault);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileStringA$MH() {
        return cfapi_h$constants$27.GetProfileStringA$MH();
    }
    public static @C("DWORD") int GetProfileStringA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("LPCSTR") Addressable lpDefault, @C("LPSTR") Addressable lpReturnedString, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GetProfileStringA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpDefault.address(), lpReturnedString.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileStringW$MH() {
        return cfapi_h$constants$27.GetProfileStringW$MH();
    }
    public static @C("DWORD") int GetProfileStringW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("LPCWSTR") Addressable lpDefault, @C("LPWSTR") Addressable lpReturnedString, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GetProfileStringW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpDefault.address(), lpReturnedString.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteProfileStringA$MH() {
        return cfapi_h$constants$27.WriteProfileStringA$MH();
    }
    public static @C("BOOL") int WriteProfileStringA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("LPCSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$27.WriteProfileStringA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteProfileStringW$MH() {
        return cfapi_h$constants$27.WriteProfileStringW$MH();
    }
    public static @C("BOOL") int WriteProfileStringW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("LPCWSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$27.WriteProfileStringW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileSectionA$MH() {
        return cfapi_h$constants$27.GetProfileSectionA$MH();
    }
    public static @C("DWORD") int GetProfileSectionA (@C("LPCSTR") Addressable lpAppName, @C("LPSTR") Addressable lpReturnedString, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GetProfileSectionA$MH().invokeExact(lpAppName.address(), lpReturnedString.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetProfileSectionW$MH() {
        return cfapi_h$constants$27.GetProfileSectionW$MH();
    }
    public static @C("DWORD") int GetProfileSectionW (@C("LPCWSTR") Addressable lpAppName, @C("LPWSTR") Addressable lpReturnedString, @C("DWORD") int nSize) {
        try {
            return (int)cfapi_h$constants$27.GetProfileSectionW$MH().invokeExact(lpAppName.address(), lpReturnedString.address(), nSize);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteProfileSectionA$MH() {
        return cfapi_h$constants$27.WriteProfileSectionA$MH();
    }
    public static @C("BOOL") int WriteProfileSectionA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$27.WriteProfileSectionA$MH().invokeExact(lpAppName.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WriteProfileSectionW$MH() {
        return cfapi_h$constants$27.WriteProfileSectionW$MH();
    }
    public static @C("BOOL") int WriteProfileSectionW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpString) {
        try {
            return (int)cfapi_h$constants$27.WriteProfileSectionW$MH().invokeExact(lpAppName.address(), lpString.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileIntA$MH() {
        return cfapi_h$constants$27.GetPrivateProfileIntA$MH();
    }
    public static @C("UINT") int GetPrivateProfileIntA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("INT") int nDefault, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileIntA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), nDefault, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileIntW$MH() {
        return cfapi_h$constants$27.GetPrivateProfileIntW$MH();
    }
    public static @C("UINT") int GetPrivateProfileIntW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("INT") int nDefault, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileIntW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), nDefault, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileStringA$MH() {
        return cfapi_h$constants$27.GetPrivateProfileStringA$MH();
    }
    public static @C("DWORD") int GetPrivateProfileStringA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("LPCSTR") Addressable lpDefault, @C("LPSTR") Addressable lpReturnedString, @C("DWORD") int nSize, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileStringA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpDefault.address(), lpReturnedString.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileStringW$MH() {
        return cfapi_h$constants$27.GetPrivateProfileStringW$MH();
    }
    public static @C("DWORD") int GetPrivateProfileStringW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("LPCWSTR") Addressable lpDefault, @C("LPWSTR") Addressable lpReturnedString, @C("DWORD") int nSize, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileStringW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpDefault.address(), lpReturnedString.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileStringA$MH() {
        return cfapi_h$constants$27.WritePrivateProfileStringA$MH();
    }
    public static @C("BOOL") int WritePrivateProfileStringA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpKeyName, @C("LPCSTR") Addressable lpString, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.WritePrivateProfileStringA$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpString.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileStringW$MH() {
        return cfapi_h$constants$27.WritePrivateProfileStringW$MH();
    }
    public static @C("BOOL") int WritePrivateProfileStringW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpKeyName, @C("LPCWSTR") Addressable lpString, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.WritePrivateProfileStringW$MH().invokeExact(lpAppName.address(), lpKeyName.address(), lpString.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileSectionA$MH() {
        return cfapi_h$constants$27.GetPrivateProfileSectionA$MH();
    }
    public static @C("DWORD") int GetPrivateProfileSectionA (@C("LPCSTR") Addressable lpAppName, @C("LPSTR") Addressable lpReturnedString, @C("DWORD") int nSize, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileSectionA$MH().invokeExact(lpAppName.address(), lpReturnedString.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileSectionW$MH() {
        return cfapi_h$constants$27.GetPrivateProfileSectionW$MH();
    }
    public static @C("DWORD") int GetPrivateProfileSectionW (@C("LPCWSTR") Addressable lpAppName, @C("LPWSTR") Addressable lpReturnedString, @C("DWORD") int nSize, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileSectionW$MH().invokeExact(lpAppName.address(), lpReturnedString.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileSectionA$MH() {
        return cfapi_h$constants$27.WritePrivateProfileSectionA$MH();
    }
    public static @C("BOOL") int WritePrivateProfileSectionA (@C("LPCSTR") Addressable lpAppName, @C("LPCSTR") Addressable lpString, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.WritePrivateProfileSectionA$MH().invokeExact(lpAppName.address(), lpString.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileSectionW$MH() {
        return cfapi_h$constants$27.WritePrivateProfileSectionW$MH();
    }
    public static @C("BOOL") int WritePrivateProfileSectionW (@C("LPCWSTR") Addressable lpAppName, @C("LPCWSTR") Addressable lpString, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.WritePrivateProfileSectionW$MH().invokeExact(lpAppName.address(), lpString.address(), lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileSectionNamesA$MH() {
        return cfapi_h$constants$27.GetPrivateProfileSectionNamesA$MH();
    }
    public static @C("DWORD") int GetPrivateProfileSectionNamesA (@C("LPSTR") Addressable lpszReturnBuffer, @C("DWORD") int nSize, @C("LPCSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileSectionNamesA$MH().invokeExact(lpszReturnBuffer.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileSectionNamesW$MH() {
        return cfapi_h$constants$27.GetPrivateProfileSectionNamesW$MH();
    }
    public static @C("DWORD") int GetPrivateProfileSectionNamesW (@C("LPWSTR") Addressable lpszReturnBuffer, @C("DWORD") int nSize, @C("LPCWSTR") Addressable lpFileName) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileSectionNamesW$MH().invokeExact(lpszReturnBuffer.address(), nSize, lpFileName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileStructA$MH() {
        return cfapi_h$constants$27.GetPrivateProfileStructA$MH();
    }
    public static @C("BOOL") int GetPrivateProfileStructA (@C("LPCSTR") Addressable lpszSection, @C("LPCSTR") Addressable lpszKey, @C("LPVOID") Addressable lpStruct, @C("UINT") int uSizeStruct, @C("LPCSTR") Addressable szFile) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileStructA$MH().invokeExact(lpszSection.address(), lpszKey.address(), lpStruct.address(), uSizeStruct, szFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetPrivateProfileStructW$MH() {
        return cfapi_h$constants$27.GetPrivateProfileStructW$MH();
    }
    public static @C("BOOL") int GetPrivateProfileStructW (@C("LPCWSTR") Addressable lpszSection, @C("LPCWSTR") Addressable lpszKey, @C("LPVOID") Addressable lpStruct, @C("UINT") int uSizeStruct, @C("LPCWSTR") Addressable szFile) {
        try {
            return (int)cfapi_h$constants$27.GetPrivateProfileStructW$MH().invokeExact(lpszSection.address(), lpszKey.address(), lpStruct.address(), uSizeStruct, szFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileStructA$MH() {
        return cfapi_h$constants$27.WritePrivateProfileStructA$MH();
    }
    public static @C("BOOL") int WritePrivateProfileStructA (@C("LPCSTR") Addressable lpszSection, @C("LPCSTR") Addressable lpszKey, @C("LPVOID") Addressable lpStruct, @C("UINT") int uSizeStruct, @C("LPCSTR") Addressable szFile) {
        try {
            return (int)cfapi_h$constants$27.WritePrivateProfileStructA$MH().invokeExact(lpszSection.address(), lpszKey.address(), lpStruct.address(), uSizeStruct, szFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle WritePrivateProfileStructW$MH() {
        return cfapi_h$constants$27.WritePrivateProfileStructW$MH();
    }
    public static @C("BOOL") int WritePrivateProfileStructW (@C("LPCWSTR") Addressable lpszSection, @C("LPCWSTR") Addressable lpszKey, @C("LPVOID") Addressable lpStruct, @C("UINT") int uSizeStruct, @C("LPCWSTR") Addressable szFile) {
        try {
            return (int)cfapi_h$constants$27.WritePrivateProfileStructW$MH().invokeExact(lpszSection.address(), lpszKey.address(), lpStruct.address(), uSizeStruct, szFile.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle Wow64EnableWow64FsRedirection$MH() {
        return cfapi_h$constants$27.Wow64EnableWow64FsRedirection$MH();
    }
    public static @C("BOOLEAN") byte Wow64EnableWow64FsRedirection (@C("BOOLEAN") byte Wow64FsEnableRedirection) {
        try {
            return (byte)cfapi_h$constants$27.Wow64EnableWow64FsRedirection$MH().invokeExact(Wow64FsEnableRedirection);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDllDirectoryA$MH() {
        return cfapi_h$constants$27.SetDllDirectoryA$MH();
    }
    public static @C("BOOL") int SetDllDirectoryA (@C("LPCSTR") Addressable lpPathName) {
        try {
            return (int)cfapi_h$constants$27.SetDllDirectoryA$MH().invokeExact(lpPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetDllDirectoryW$MH() {
        return cfapi_h$constants$27.SetDllDirectoryW$MH();
    }
    public static @C("BOOL") int SetDllDirectoryW (@C("LPCWSTR") Addressable lpPathName) {
        try {
            return (int)cfapi_h$constants$27.SetDllDirectoryW$MH().invokeExact(lpPathName.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDllDirectoryA$MH() {
        return cfapi_h$constants$27.GetDllDirectoryA$MH();
    }
    public static @C("DWORD") int GetDllDirectoryA (@C("DWORD") int nBufferLength, @C("LPSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$27.GetDllDirectoryA$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle GetDllDirectoryW$MH() {
        return cfapi_h$constants$27.GetDllDirectoryW$MH();
    }
    public static @C("DWORD") int GetDllDirectoryW (@C("DWORD") int nBufferLength, @C("LPWSTR") Addressable lpBuffer) {
        try {
            return (int)cfapi_h$constants$27.GetDllDirectoryW$MH().invokeExact(nBufferLength, lpBuffer.address());
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
    public static  MethodHandle SetSearchPathMode$MH() {
        return cfapi_h$constants$27.SetSearchPathMode$MH();
    }
    public static @C("BOOL") int SetSearchPathMode (@C("DWORD") int Flags) {
        try {
            return (int)cfapi_h$constants$27.SetSearchPathMode$MH().invokeExact(Flags);
        } catch (Throwable ex) {
            throw new AssertionError(ex);
        }
    }
}


