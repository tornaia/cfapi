// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$36 extends cfapi_h$constants$35 {

    /* package-private */ cfapi_h$constants$36() {}
    static final FunctionDescriptor SendInput$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SendInput$FUNC() { return SendInput$FUNC_; }

    static final MethodHandle SendInput$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SendInput",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        SendInput$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SendInput$MH() { return SendInput$MH_; }

    static final MemoryLayout HTOUCHINPUT__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HTOUCHINPUT__");
    static final jdk.incubator.foreign.MemoryLayout HTOUCHINPUT__$struct$LAYOUT() { return HTOUCHINPUT__$struct$LAYOUT_; }

    static final MemoryLayout HTOUCHINPUT__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HTOUCHINPUT__$unused$LAYOUT() { return HTOUCHINPUT__$unused$LAYOUT_; }

    static final VarHandle HTOUCHINPUT__$unused$VH_ = HTOUCHINPUT__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HTOUCHINPUT__$unused$VH() { return HTOUCHINPUT__$unused$VH_; }

    static final MemoryLayout tagTOUCHINPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("x"),
        C_LONG.withName("y"),
        C_POINTER.withName("hSource"),
        C_LONG.withName("dwID"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwMask"),
        C_LONG.withName("dwTime"),
        C_LONGLONG.withName("dwExtraInfo"),
        C_LONG.withName("cxContact"),
        C_LONG.withName("cyContact")
    ).withName("tagTOUCHINPUT");
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$struct$LAYOUT() { return tagTOUCHINPUT$struct$LAYOUT_; }

    static final MemoryLayout tagTOUCHINPUT$x$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$x$LAYOUT() { return tagTOUCHINPUT$x$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$x$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$x$VH() { return tagTOUCHINPUT$x$VH_; }

    static final MemoryLayout tagTOUCHINPUT$y$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$y$LAYOUT() { return tagTOUCHINPUT$y$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$y$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$y$VH() { return tagTOUCHINPUT$y$VH_; }

    static final MemoryLayout tagTOUCHINPUT$hSource$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$hSource$LAYOUT() { return tagTOUCHINPUT$hSource$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$hSource$VH_ = MemoryHandles.asAddressVarHandle(tagTOUCHINPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hSource")));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$hSource$VH() { return tagTOUCHINPUT$hSource$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwID$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwID$LAYOUT() { return tagTOUCHINPUT$dwID$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwID$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwID"));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$dwID$VH() { return tagTOUCHINPUT$dwID$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwFlags$LAYOUT() { return tagTOUCHINPUT$dwFlags$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwFlags$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$dwFlags$VH() { return tagTOUCHINPUT$dwFlags$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwMask$LAYOUT() { return tagTOUCHINPUT$dwMask$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwMask$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMask"));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$dwMask$VH() { return tagTOUCHINPUT$dwMask$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwTime$LAYOUT() { return tagTOUCHINPUT$dwTime$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwTime$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTime"));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$dwTime$VH() { return tagTOUCHINPUT$dwTime$VH_; }

    static final MemoryLayout tagTOUCHINPUT$dwExtraInfo$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$dwExtraInfo$LAYOUT() { return tagTOUCHINPUT$dwExtraInfo$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$dwExtraInfo$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwExtraInfo"));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$dwExtraInfo$VH() { return tagTOUCHINPUT$dwExtraInfo$VH_; }

    static final MemoryLayout tagTOUCHINPUT$cxContact$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$cxContact$LAYOUT() { return tagTOUCHINPUT$cxContact$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$cxContact$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cxContact"));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$cxContact$VH() { return tagTOUCHINPUT$cxContact$VH_; }

    static final MemoryLayout tagTOUCHINPUT$cyContact$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCHINPUT$cyContact$LAYOUT() { return tagTOUCHINPUT$cyContact$LAYOUT_; }

    static final VarHandle tagTOUCHINPUT$cyContact$VH_ = tagTOUCHINPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cyContact"));
    static final java.lang.invoke.VarHandle tagTOUCHINPUT$cyContact$VH() { return tagTOUCHINPUT$cyContact$VH_; }

    static final FunctionDescriptor GetTouchInputInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTouchInputInfo$FUNC() { return GetTouchInputInfo$FUNC_; }

    static final MethodHandle GetTouchInputInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTouchInputInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        GetTouchInputInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTouchInputInfo$MH() { return GetTouchInputInfo$MH_; }

    static final FunctionDescriptor CloseTouchInputHandle$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CloseTouchInputHandle$FUNC() { return CloseTouchInputHandle$FUNC_; }

    static final MethodHandle CloseTouchInputHandle$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CloseTouchInputHandle",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CloseTouchInputHandle$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CloseTouchInputHandle$MH() { return CloseTouchInputHandle$MH_; }

    static final FunctionDescriptor RegisterTouchWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegisterTouchWindow$FUNC() { return RegisterTouchWindow$FUNC_; }

    static final MethodHandle RegisterTouchWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterTouchWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegisterTouchWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegisterTouchWindow$MH() { return RegisterTouchWindow$MH_; }

    static final FunctionDescriptor UnregisterTouchWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor UnregisterTouchWindow$FUNC() { return UnregisterTouchWindow$FUNC_; }

    static final MethodHandle UnregisterTouchWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterTouchWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnregisterTouchWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UnregisterTouchWindow$MH() { return UnregisterTouchWindow$MH_; }

    static final FunctionDescriptor IsTouchWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IsTouchWindow$FUNC() { return IsTouchWindow$FUNC_; }

    static final MethodHandle IsTouchWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsTouchWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IsTouchWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IsTouchWindow$MH() { return IsTouchWindow$MH_; }

    static final int PT_POINTER() { return (int)1L; }

    static final int PT_TOUCH() { return (int)2L; }

    static final int PT_PEN() { return (int)3L; }

    static final int PT_MOUSE() { return (int)4L; }

    static final int PT_TOUCHPAD() { return (int)5L; }

    static final int POINTER_CHANGE_NONE() { return (int)0L; }

    static final int POINTER_CHANGE_FIRSTBUTTON_DOWN() { return (int)1L; }

    static final int POINTER_CHANGE_FIRSTBUTTON_UP() { return (int)2L; }

    static final int POINTER_CHANGE_SECONDBUTTON_DOWN() { return (int)3L; }

    static final int POINTER_CHANGE_SECONDBUTTON_UP() { return (int)4L; }

    static final int POINTER_CHANGE_THIRDBUTTON_DOWN() { return (int)5L; }

    static final int POINTER_CHANGE_THIRDBUTTON_UP() { return (int)6L; }

    static final int POINTER_CHANGE_FOURTHBUTTON_DOWN() { return (int)7L; }

    static final int POINTER_CHANGE_FOURTHBUTTON_UP() { return (int)8L; }

    static final int POINTER_CHANGE_FIFTHBUTTON_DOWN() { return (int)9L; }

    static final int POINTER_CHANGE_FIFTHBUTTON_UP() { return (int)10L; }

    static final MemoryLayout tagPOINTER_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("pointerType"),
        C_INT.withName("pointerId"),
        C_INT.withName("frameId"),
        C_INT.withName("pointerFlags"),
        C_POINTER.withName("sourceDevice"),
        C_POINTER.withName("hwndTarget"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptPixelLocation"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptHimetricLocation"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptPixelLocationRaw"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptHimetricLocationRaw"),
        C_LONG.withName("dwTime"),
        C_INT.withName("historyCount"),
        C_INT.withName("InputData"),
        C_LONG.withName("dwKeyStates"),
        C_LONGLONG.withName("PerformanceCount"),
        C_INT.withName("ButtonChangeType"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagPOINTER_INFO");
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$struct$LAYOUT() { return tagPOINTER_INFO$struct$LAYOUT_; }

    static final MemoryLayout tagPOINTER_INFO$pointerType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$pointerType$LAYOUT() { return tagPOINTER_INFO$pointerType$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$pointerType$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pointerType"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$pointerType$VH() { return tagPOINTER_INFO$pointerType$VH_; }

    static final MemoryLayout tagPOINTER_INFO$pointerId$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$pointerId$LAYOUT() { return tagPOINTER_INFO$pointerId$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$pointerId$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pointerId"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$pointerId$VH() { return tagPOINTER_INFO$pointerId$VH_; }

    static final MemoryLayout tagPOINTER_INFO$frameId$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$frameId$LAYOUT() { return tagPOINTER_INFO$frameId$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$frameId$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("frameId"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$frameId$VH() { return tagPOINTER_INFO$frameId$VH_; }

    static final MemoryLayout tagPOINTER_INFO$pointerFlags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$pointerFlags$LAYOUT() { return tagPOINTER_INFO$pointerFlags$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$pointerFlags$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pointerFlags"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$pointerFlags$VH() { return tagPOINTER_INFO$pointerFlags$VH_; }

    static final MemoryLayout tagPOINTER_INFO$sourceDevice$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$sourceDevice$LAYOUT() { return tagPOINTER_INFO$sourceDevice$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$sourceDevice$VH_ = MemoryHandles.asAddressVarHandle(tagPOINTER_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("sourceDevice")));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$sourceDevice$VH() { return tagPOINTER_INFO$sourceDevice$VH_; }

    static final MemoryLayout tagPOINTER_INFO$hwndTarget$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$hwndTarget$LAYOUT() { return tagPOINTER_INFO$hwndTarget$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$hwndTarget$VH_ = MemoryHandles.asAddressVarHandle(tagPOINTER_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndTarget")));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$hwndTarget$VH() { return tagPOINTER_INFO$hwndTarget$VH_; }

    static final MemoryLayout tagPOINTER_INFO$dwTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$dwTime$LAYOUT() { return tagPOINTER_INFO$dwTime$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$dwTime$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTime"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$dwTime$VH() { return tagPOINTER_INFO$dwTime$VH_; }

    static final MemoryLayout tagPOINTER_INFO$historyCount$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$historyCount$LAYOUT() { return tagPOINTER_INFO$historyCount$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$historyCount$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("historyCount"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$historyCount$VH() { return tagPOINTER_INFO$historyCount$VH_; }

    static final MemoryLayout tagPOINTER_INFO$InputData$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$InputData$LAYOUT() { return tagPOINTER_INFO$InputData$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$InputData$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("InputData"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$InputData$VH() { return tagPOINTER_INFO$InputData$VH_; }

    static final MemoryLayout tagPOINTER_INFO$dwKeyStates$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$dwKeyStates$LAYOUT() { return tagPOINTER_INFO$dwKeyStates$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$dwKeyStates$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwKeyStates"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$dwKeyStates$VH() { return tagPOINTER_INFO$dwKeyStates$VH_; }

    static final MemoryLayout tagPOINTER_INFO$PerformanceCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$PerformanceCount$LAYOUT() { return tagPOINTER_INFO$PerformanceCount$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$PerformanceCount$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("PerformanceCount"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$PerformanceCount$VH() { return tagPOINTER_INFO$PerformanceCount$VH_; }

    static final MemoryLayout tagPOINTER_INFO$ButtonChangeType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_INFO$ButtonChangeType$LAYOUT() { return tagPOINTER_INFO$ButtonChangeType$LAYOUT_; }

    static final VarHandle tagPOINTER_INFO$ButtonChangeType$VH_ = tagPOINTER_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ButtonChangeType"));
    static final java.lang.invoke.VarHandle tagPOINTER_INFO$ButtonChangeType$VH() { return tagPOINTER_INFO$ButtonChangeType$VH_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("pointerType"),
            C_INT.withName("pointerId"),
            C_INT.withName("frameId"),
            C_INT.withName("pointerFlags"),
            C_POINTER.withName("sourceDevice"),
            C_POINTER.withName("hwndTarget"),
            MemoryLayout.ofStruct(
                C_LONG.withName("x"),
                C_LONG.withName("y")
            ).withName("ptPixelLocation"),
            MemoryLayout.ofStruct(
                C_LONG.withName("x"),
                C_LONG.withName("y")
            ).withName("ptHimetricLocation"),
            MemoryLayout.ofStruct(
                C_LONG.withName("x"),
                C_LONG.withName("y")
            ).withName("ptPixelLocationRaw"),
            MemoryLayout.ofStruct(
                C_LONG.withName("x"),
                C_LONG.withName("y")
            ).withName("ptHimetricLocationRaw"),
            C_LONG.withName("dwTime"),
            C_INT.withName("historyCount"),
            C_INT.withName("InputData"),
            C_LONG.withName("dwKeyStates"),
            C_LONGLONG.withName("PerformanceCount"),
            C_INT.withName("ButtonChangeType"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("pointerInfo"),
        C_INT.withName("touchFlags"),
        C_INT.withName("touchMask"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcContact"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcContactRaw"),
        C_INT.withName("orientation"),
        C_INT.withName("pressure")
    ).withName("tagPOINTER_TOUCH_INFO");
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$struct$LAYOUT() { return tagPOINTER_TOUCH_INFO$struct$LAYOUT_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$touchFlags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$touchFlags$LAYOUT() { return tagPOINTER_TOUCH_INFO$touchFlags$LAYOUT_; }

    static final VarHandle tagPOINTER_TOUCH_INFO$touchFlags$VH_ = tagPOINTER_TOUCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("touchFlags"));
    static final java.lang.invoke.VarHandle tagPOINTER_TOUCH_INFO$touchFlags$VH() { return tagPOINTER_TOUCH_INFO$touchFlags$VH_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$touchMask$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$touchMask$LAYOUT() { return tagPOINTER_TOUCH_INFO$touchMask$LAYOUT_; }

    static final VarHandle tagPOINTER_TOUCH_INFO$touchMask$VH_ = tagPOINTER_TOUCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("touchMask"));
    static final java.lang.invoke.VarHandle tagPOINTER_TOUCH_INFO$touchMask$VH() { return tagPOINTER_TOUCH_INFO$touchMask$VH_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$orientation$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$orientation$LAYOUT() { return tagPOINTER_TOUCH_INFO$orientation$LAYOUT_; }

    static final VarHandle tagPOINTER_TOUCH_INFO$orientation$VH_ = tagPOINTER_TOUCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("orientation"));
    static final java.lang.invoke.VarHandle tagPOINTER_TOUCH_INFO$orientation$VH() { return tagPOINTER_TOUCH_INFO$orientation$VH_; }

    static final MemoryLayout tagPOINTER_TOUCH_INFO$pressure$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_TOUCH_INFO$pressure$LAYOUT() { return tagPOINTER_TOUCH_INFO$pressure$LAYOUT_; }

    static final VarHandle tagPOINTER_TOUCH_INFO$pressure$VH_ = tagPOINTER_TOUCH_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pressure"));
    static final java.lang.invoke.VarHandle tagPOINTER_TOUCH_INFO$pressure$VH() { return tagPOINTER_TOUCH_INFO$pressure$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("pointerType"),
            C_INT.withName("pointerId"),
            C_INT.withName("frameId"),
            C_INT.withName("pointerFlags"),
            C_POINTER.withName("sourceDevice"),
            C_POINTER.withName("hwndTarget"),
            MemoryLayout.ofStruct(
                C_LONG.withName("x"),
                C_LONG.withName("y")
            ).withName("ptPixelLocation"),
            MemoryLayout.ofStruct(
                C_LONG.withName("x"),
                C_LONG.withName("y")
            ).withName("ptHimetricLocation"),
            MemoryLayout.ofStruct(
                C_LONG.withName("x"),
                C_LONG.withName("y")
            ).withName("ptPixelLocationRaw"),
            MemoryLayout.ofStruct(
                C_LONG.withName("x"),
                C_LONG.withName("y")
            ).withName("ptHimetricLocationRaw"),
            C_LONG.withName("dwTime"),
            C_INT.withName("historyCount"),
            C_INT.withName("InputData"),
            C_LONG.withName("dwKeyStates"),
            C_LONGLONG.withName("PerformanceCount"),
            C_INT.withName("ButtonChangeType"),
            MemoryLayout.ofPaddingBits(32)
        ).withName("pointerInfo"),
        C_INT.withName("penFlags"),
        C_INT.withName("penMask"),
        C_INT.withName("pressure"),
        C_INT.withName("rotation"),
        C_INT.withName("tiltX"),
        C_INT.withName("tiltY")
    ).withName("tagPOINTER_PEN_INFO");
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$struct$LAYOUT() { return tagPOINTER_PEN_INFO$struct$LAYOUT_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$penFlags$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$penFlags$LAYOUT() { return tagPOINTER_PEN_INFO$penFlags$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$penFlags$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("penFlags"));
    static final java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$penFlags$VH() { return tagPOINTER_PEN_INFO$penFlags$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$penMask$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$penMask$LAYOUT() { return tagPOINTER_PEN_INFO$penMask$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$penMask$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("penMask"));
    static final java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$penMask$VH() { return tagPOINTER_PEN_INFO$penMask$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$pressure$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$pressure$LAYOUT() { return tagPOINTER_PEN_INFO$pressure$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$pressure$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pressure"));
    static final java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$pressure$VH() { return tagPOINTER_PEN_INFO$pressure$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$rotation$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$rotation$LAYOUT() { return tagPOINTER_PEN_INFO$rotation$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$rotation$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("rotation"));
    static final java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$rotation$VH() { return tagPOINTER_PEN_INFO$rotation$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$tiltX$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$tiltX$LAYOUT() { return tagPOINTER_PEN_INFO$tiltX$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$tiltX$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiltX"));
    static final java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$tiltX$VH() { return tagPOINTER_PEN_INFO$tiltX$VH_; }

    static final MemoryLayout tagPOINTER_PEN_INFO$tiltY$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_PEN_INFO$tiltY$LAYOUT() { return tagPOINTER_PEN_INFO$tiltY$LAYOUT_; }

    static final VarHandle tagPOINTER_PEN_INFO$tiltY$VH_ = tagPOINTER_PEN_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("tiltY"));
    static final java.lang.invoke.VarHandle tagPOINTER_PEN_INFO$tiltY$VH() { return tagPOINTER_PEN_INFO$tiltY$VH_; }

    static final int POINTER_FEEDBACK_DEFAULT() { return (int)1L; }

    static final int POINTER_FEEDBACK_INDIRECT() { return (int)2L; }

    static final int POINTER_FEEDBACK_NONE() { return (int)3L; }

    static final FunctionDescriptor InitializeTouchInjection$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor InitializeTouchInjection$FUNC() { return InitializeTouchInjection$FUNC_; }

    static final MethodHandle InitializeTouchInjection$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitializeTouchInjection",
        "(II)I",
        InitializeTouchInjection$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InitializeTouchInjection$MH() { return InitializeTouchInjection$MH_; }

    static final FunctionDescriptor InjectTouchInput$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor InjectTouchInput$FUNC() { return InjectTouchInput$FUNC_; }

    static final MethodHandle InjectTouchInput$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InjectTouchInput",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        InjectTouchInput$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InjectTouchInput$MH() { return InjectTouchInput$MH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("level"),
        C_SHORT.withName("page"),
        C_SHORT.withName("usage"),
        MemoryLayout.ofPaddingBits(16),
        C_INT.withName("logicalMinimum"),
        C_INT.withName("logicalMaximum"),
        C_SHORT.withName("unit"),
        C_SHORT.withName("exponent"),
        C_CHAR.withName("count"),
        MemoryLayout.ofPaddingBits(24),
        C_INT.withName("physicalMinimum"),
        C_INT.withName("physicalMaximum")
    ).withName("tagUSAGE_PROPERTIES");
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$struct$LAYOUT() { return tagUSAGE_PROPERTIES$struct$LAYOUT_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$level$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$level$LAYOUT() { return tagUSAGE_PROPERTIES$level$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$level$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("level"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$level$VH() { return tagUSAGE_PROPERTIES$level$VH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$page$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$page$LAYOUT() { return tagUSAGE_PROPERTIES$page$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$page$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("page"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$page$VH() { return tagUSAGE_PROPERTIES$page$VH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$usage$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$usage$LAYOUT() { return tagUSAGE_PROPERTIES$usage$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$usage$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("usage"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$usage$VH() { return tagUSAGE_PROPERTIES$usage$VH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$logicalMinimum$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$logicalMinimum$LAYOUT() { return tagUSAGE_PROPERTIES$logicalMinimum$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$logicalMinimum$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("logicalMinimum"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$logicalMinimum$VH() { return tagUSAGE_PROPERTIES$logicalMinimum$VH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$logicalMaximum$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$logicalMaximum$LAYOUT() { return tagUSAGE_PROPERTIES$logicalMaximum$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$logicalMaximum$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("logicalMaximum"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$logicalMaximum$VH() { return tagUSAGE_PROPERTIES$logicalMaximum$VH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$unit$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$unit$LAYOUT() { return tagUSAGE_PROPERTIES$unit$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$unit$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("unit"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$unit$VH() { return tagUSAGE_PROPERTIES$unit$VH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$exponent$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$exponent$LAYOUT() { return tagUSAGE_PROPERTIES$exponent$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$exponent$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("exponent"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$exponent$VH() { return tagUSAGE_PROPERTIES$exponent$VH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$count$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$count$LAYOUT() { return tagUSAGE_PROPERTIES$count$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$count$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("count"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$count$VH() { return tagUSAGE_PROPERTIES$count$VH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$physicalMinimum$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$physicalMinimum$LAYOUT() { return tagUSAGE_PROPERTIES$physicalMinimum$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$physicalMinimum$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("physicalMinimum"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$physicalMinimum$VH() { return tagUSAGE_PROPERTIES$physicalMinimum$VH_; }

    static final MemoryLayout tagUSAGE_PROPERTIES$physicalMaximum$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagUSAGE_PROPERTIES$physicalMaximum$LAYOUT() { return tagUSAGE_PROPERTIES$physicalMaximum$LAYOUT_; }

    static final VarHandle tagUSAGE_PROPERTIES$physicalMaximum$VH_ = tagUSAGE_PROPERTIES$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("physicalMaximum"));
    static final java.lang.invoke.VarHandle tagUSAGE_PROPERTIES$physicalMaximum$VH() { return tagUSAGE_PROPERTIES$physicalMaximum$VH_; }

    static final MemoryLayout tagPOINTER_TYPE_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("type"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("pointerType"),
                C_INT.withName("pointerId"),
                C_INT.withName("frameId"),
                C_INT.withName("pointerFlags"),
                C_POINTER.withName("sourceDevice"),
                C_POINTER.withName("hwndTarget"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("x"),
                    C_LONG.withName("y")
                ).withName("ptPixelLocation"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("x"),
                    C_LONG.withName("y")
                ).withName("ptHimetricLocation"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("x"),
                    C_LONG.withName("y")
                ).withName("ptPixelLocationRaw"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("x"),
                    C_LONG.withName("y")
                ).withName("ptHimetricLocationRaw"),
                C_LONG.withName("dwTime"),
                C_INT.withName("historyCount"),
                C_INT.withName("InputData"),
                C_LONG.withName("dwKeyStates"),
                C_LONGLONG.withName("PerformanceCount"),
                C_INT.withName("ButtonChangeType"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("pointerInfo"),
            C_INT.withName("touchFlags"),
            C_INT.withName("touchMask"),
            MemoryLayout.ofStruct(
                C_LONG.withName("left"),
                C_LONG.withName("top"),
                C_LONG.withName("right"),
                C_LONG.withName("bottom")
            ).withName("rcContact"),
            MemoryLayout.ofStruct(
                C_LONG.withName("left"),
                C_LONG.withName("top"),
                C_LONG.withName("right"),
                C_LONG.withName("bottom")
            ).withName("rcContactRaw"),
            C_INT.withName("orientation"),
            C_INT.withName("pressure")
        ).withName("touchInfo"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("pointerType"),
                C_INT.withName("pointerId"),
                C_INT.withName("frameId"),
                C_INT.withName("pointerFlags"),
                C_POINTER.withName("sourceDevice"),
                C_POINTER.withName("hwndTarget"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("x"),
                    C_LONG.withName("y")
                ).withName("ptPixelLocation"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("x"),
                    C_LONG.withName("y")
                ).withName("ptHimetricLocation"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("x"),
                    C_LONG.withName("y")
                ).withName("ptPixelLocationRaw"),
                MemoryLayout.ofStruct(
                    C_LONG.withName("x"),
                    C_LONG.withName("y")
                ).withName("ptHimetricLocationRaw"),
                C_LONG.withName("dwTime"),
                C_INT.withName("historyCount"),
                C_INT.withName("InputData"),
                C_LONG.withName("dwKeyStates"),
                C_LONGLONG.withName("PerformanceCount"),
                C_INT.withName("ButtonChangeType"),
                MemoryLayout.ofPaddingBits(32)
            ).withName("pointerInfo"),
            C_INT.withName("penFlags"),
            C_INT.withName("penMask"),
            C_INT.withName("pressure"),
            C_INT.withName("rotation"),
            C_INT.withName("tiltX"),
            C_INT.withName("tiltY")
        ).withName("penInfo")
    ).withName("tagPOINTER_TYPE_INFO");
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_TYPE_INFO$struct$LAYOUT() { return tagPOINTER_TYPE_INFO$struct$LAYOUT_; }

    static final MemoryLayout tagPOINTER_TYPE_INFO$type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagPOINTER_TYPE_INFO$type$LAYOUT() { return tagPOINTER_TYPE_INFO$type$LAYOUT_; }

    static final VarHandle tagPOINTER_TYPE_INFO$type$VH_ = tagPOINTER_TYPE_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("type"));
    static final java.lang.invoke.VarHandle tagPOINTER_TYPE_INFO$type$VH() { return tagPOINTER_TYPE_INFO$type$VH_; }

    static final MemoryLayout tagINPUT_INJECTION_VALUE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("page"),
        C_SHORT.withName("usage"),
        C_INT.withName("value"),
        C_SHORT.withName("index"),
        MemoryLayout.ofPaddingBits(16)
    ).withName("tagINPUT_INJECTION_VALUE");
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_INJECTION_VALUE$struct$LAYOUT() { return tagINPUT_INJECTION_VALUE$struct$LAYOUT_; }

    static final MemoryLayout tagINPUT_INJECTION_VALUE$page$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_INJECTION_VALUE$page$LAYOUT() { return tagINPUT_INJECTION_VALUE$page$LAYOUT_; }

    static final VarHandle tagINPUT_INJECTION_VALUE$page$VH_ = tagINPUT_INJECTION_VALUE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("page"));
    static final java.lang.invoke.VarHandle tagINPUT_INJECTION_VALUE$page$VH() { return tagINPUT_INJECTION_VALUE$page$VH_; }

    static final MemoryLayout tagINPUT_INJECTION_VALUE$usage$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_INJECTION_VALUE$usage$LAYOUT() { return tagINPUT_INJECTION_VALUE$usage$LAYOUT_; }

    static final VarHandle tagINPUT_INJECTION_VALUE$usage$VH_ = tagINPUT_INJECTION_VALUE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("usage"));
    static final java.lang.invoke.VarHandle tagINPUT_INJECTION_VALUE$usage$VH() { return tagINPUT_INJECTION_VALUE$usage$VH_; }

    static final MemoryLayout tagINPUT_INJECTION_VALUE$value$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_INJECTION_VALUE$value$LAYOUT() { return tagINPUT_INJECTION_VALUE$value$LAYOUT_; }

    static final VarHandle tagINPUT_INJECTION_VALUE$value$VH_ = tagINPUT_INJECTION_VALUE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("value"));
    static final java.lang.invoke.VarHandle tagINPUT_INJECTION_VALUE$value$VH() { return tagINPUT_INJECTION_VALUE$value$VH_; }

    static final MemoryLayout tagINPUT_INJECTION_VALUE$index$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_INJECTION_VALUE$index$LAYOUT() { return tagINPUT_INJECTION_VALUE$index$LAYOUT_; }

    static final VarHandle tagINPUT_INJECTION_VALUE$index$VH_ = tagINPUT_INJECTION_VALUE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("index"));
    static final java.lang.invoke.VarHandle tagINPUT_INJECTION_VALUE$index$VH() { return tagINPUT_INJECTION_VALUE$index$VH_; }

    static final FunctionDescriptor GetPointerType$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerType$FUNC() { return GetPointerType$FUNC_; }

    static final MethodHandle GetPointerType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerType",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPointerType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerType$MH() { return GetPointerType$MH_; }

    static final FunctionDescriptor GetPointerCursorId$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerCursorId$FUNC() { return GetPointerCursorId$FUNC_; }

    static final MethodHandle GetPointerCursorId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerCursorId",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPointerCursorId$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerCursorId$MH() { return GetPointerCursorId$MH_; }

    static final FunctionDescriptor GetPointerInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerInfo$FUNC() { return GetPointerInfo$FUNC_; }

    static final MethodHandle GetPointerInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPointerInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerInfo$MH() { return GetPointerInfo$MH_; }

    static final FunctionDescriptor GetPointerInfoHistory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerInfoHistory$FUNC() { return GetPointerInfoHistory$FUNC_; }

    static final MethodHandle GetPointerInfoHistory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerInfoHistory",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerInfoHistory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerInfoHistory$MH() { return GetPointerInfoHistory$MH_; }

    static final FunctionDescriptor GetPointerFrameInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerFrameInfo$FUNC() { return GetPointerFrameInfo$FUNC_; }

    static final MethodHandle GetPointerFrameInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerFrameInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerFrameInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerFrameInfo$MH() { return GetPointerFrameInfo$MH_; }

    static final FunctionDescriptor GetPointerFrameInfoHistory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerFrameInfoHistory$FUNC() { return GetPointerFrameInfoHistory$FUNC_; }

    static final MethodHandle GetPointerFrameInfoHistory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerFrameInfoHistory",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerFrameInfoHistory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerFrameInfoHistory$MH() { return GetPointerFrameInfoHistory$MH_; }

    static final FunctionDescriptor GetPointerTouchInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerTouchInfo$FUNC() { return GetPointerTouchInfo$FUNC_; }

    static final MethodHandle GetPointerTouchInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerTouchInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPointerTouchInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerTouchInfo$MH() { return GetPointerTouchInfo$MH_; }

    static final FunctionDescriptor GetPointerTouchInfoHistory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerTouchInfoHistory$FUNC() { return GetPointerTouchInfoHistory$FUNC_; }

    static final MethodHandle GetPointerTouchInfoHistory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerTouchInfoHistory",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerTouchInfoHistory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerTouchInfoHistory$MH() { return GetPointerTouchInfoHistory$MH_; }

    static final FunctionDescriptor GetPointerFrameTouchInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerFrameTouchInfo$FUNC() { return GetPointerFrameTouchInfo$FUNC_; }

    static final MethodHandle GetPointerFrameTouchInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerFrameTouchInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerFrameTouchInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerFrameTouchInfo$MH() { return GetPointerFrameTouchInfo$MH_; }

    static final FunctionDescriptor GetPointerFrameTouchInfoHistory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerFrameTouchInfoHistory$FUNC() { return GetPointerFrameTouchInfoHistory$FUNC_; }

    static final MethodHandle GetPointerFrameTouchInfoHistory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerFrameTouchInfoHistory",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerFrameTouchInfoHistory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerFrameTouchInfoHistory$MH() { return GetPointerFrameTouchInfoHistory$MH_; }

    static final FunctionDescriptor GetPointerPenInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerPenInfo$FUNC() { return GetPointerPenInfo$FUNC_; }

    static final MethodHandle GetPointerPenInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerPenInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetPointerPenInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerPenInfo$MH() { return GetPointerPenInfo$MH_; }

    static final FunctionDescriptor GetPointerPenInfoHistory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerPenInfoHistory$FUNC() { return GetPointerPenInfoHistory$FUNC_; }

    static final MethodHandle GetPointerPenInfoHistory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerPenInfoHistory",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerPenInfoHistory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerPenInfoHistory$MH() { return GetPointerPenInfoHistory$MH_; }

    static final FunctionDescriptor GetPointerFramePenInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerFramePenInfo$FUNC() { return GetPointerFramePenInfo$FUNC_; }

    static final MethodHandle GetPointerFramePenInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerFramePenInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerFramePenInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerFramePenInfo$MH() { return GetPointerFramePenInfo$MH_; }

    static final FunctionDescriptor GetPointerFramePenInfoHistory$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerFramePenInfoHistory$FUNC() { return GetPointerFramePenInfoHistory$FUNC_; }

    static final MethodHandle GetPointerFramePenInfoHistory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerFramePenInfoHistory",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetPointerFramePenInfoHistory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerFramePenInfoHistory$MH() { return GetPointerFramePenInfoHistory$MH_; }

    static final FunctionDescriptor SkipPointerFrameMessages$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SkipPointerFrameMessages$FUNC() { return SkipPointerFrameMessages$FUNC_; }

    static final MethodHandle SkipPointerFrameMessages$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SkipPointerFrameMessages",
        "(I)I",
        SkipPointerFrameMessages$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SkipPointerFrameMessages$MH() { return SkipPointerFrameMessages$MH_; }

    static final FunctionDescriptor RegisterPointerInputTarget$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegisterPointerInputTarget$FUNC() { return RegisterPointerInputTarget$FUNC_; }

    static final MethodHandle RegisterPointerInputTarget$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterPointerInputTarget",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegisterPointerInputTarget$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegisterPointerInputTarget$MH() { return RegisterPointerInputTarget$MH_; }

    static final FunctionDescriptor UnregisterPointerInputTarget$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor UnregisterPointerInputTarget$FUNC() { return UnregisterPointerInputTarget$FUNC_; }

    static final MethodHandle UnregisterPointerInputTarget$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterPointerInputTarget",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        UnregisterPointerInputTarget$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UnregisterPointerInputTarget$MH() { return UnregisterPointerInputTarget$MH_; }

    static final FunctionDescriptor RegisterPointerInputTargetEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegisterPointerInputTargetEx$FUNC() { return RegisterPointerInputTargetEx$FUNC_; }

    static final MethodHandle RegisterPointerInputTargetEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterPointerInputTargetEx",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        RegisterPointerInputTargetEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegisterPointerInputTargetEx$MH() { return RegisterPointerInputTargetEx$MH_; }

    static final FunctionDescriptor UnregisterPointerInputTargetEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor UnregisterPointerInputTargetEx$FUNC() { return UnregisterPointerInputTargetEx$FUNC_; }

    static final MethodHandle UnregisterPointerInputTargetEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnregisterPointerInputTargetEx",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        UnregisterPointerInputTargetEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UnregisterPointerInputTargetEx$MH() { return UnregisterPointerInputTargetEx$MH_; }

    static final MemoryLayout HSYNTHETICPOINTERDEVICE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HSYNTHETICPOINTERDEVICE__");
    static final jdk.incubator.foreign.MemoryLayout HSYNTHETICPOINTERDEVICE__$struct$LAYOUT() { return HSYNTHETICPOINTERDEVICE__$struct$LAYOUT_; }

    static final MemoryLayout HSYNTHETICPOINTERDEVICE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HSYNTHETICPOINTERDEVICE__$unused$LAYOUT() { return HSYNTHETICPOINTERDEVICE__$unused$LAYOUT_; }

    static final VarHandle HSYNTHETICPOINTERDEVICE__$unused$VH_ = HSYNTHETICPOINTERDEVICE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HSYNTHETICPOINTERDEVICE__$unused$VH() { return HSYNTHETICPOINTERDEVICE__$unused$VH_; }

    static final FunctionDescriptor CreateSyntheticPointerDevice$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateSyntheticPointerDevice$FUNC() { return CreateSyntheticPointerDevice$FUNC_; }

    static final MethodHandle CreateSyntheticPointerDevice$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateSyntheticPointerDevice",
        "(III)Ljdk/incubator/foreign/MemoryAddress;",
        CreateSyntheticPointerDevice$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateSyntheticPointerDevice$MH() { return CreateSyntheticPointerDevice$MH_; }

    static final FunctionDescriptor InjectSyntheticPointerInput$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor InjectSyntheticPointerInput$FUNC() { return InjectSyntheticPointerInput$FUNC_; }

    static final MethodHandle InjectSyntheticPointerInput$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InjectSyntheticPointerInput",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        InjectSyntheticPointerInput$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InjectSyntheticPointerInput$MH() { return InjectSyntheticPointerInput$MH_; }

    static final FunctionDescriptor DestroySyntheticPointerDevice$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DestroySyntheticPointerDevice$FUNC() { return DestroySyntheticPointerDevice$FUNC_; }

    static final MethodHandle DestroySyntheticPointerDevice$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DestroySyntheticPointerDevice",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        DestroySyntheticPointerDevice$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DestroySyntheticPointerDevice$MH() { return DestroySyntheticPointerDevice$MH_; }

    static final FunctionDescriptor EnableMouseInPointer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnableMouseInPointer$FUNC() { return EnableMouseInPointer$FUNC_; }

    static final MethodHandle EnableMouseInPointer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnableMouseInPointer",
        "(I)I",
        EnableMouseInPointer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnableMouseInPointer$MH() { return EnableMouseInPointer$MH_; }

    static final FunctionDescriptor IsMouseInPointerEnabled$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor IsMouseInPointerEnabled$FUNC() { return IsMouseInPointerEnabled$FUNC_; }

    static final MethodHandle IsMouseInPointerEnabled$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsMouseInPointerEnabled",
        "()I",
        IsMouseInPointerEnabled$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IsMouseInPointerEnabled$MH() { return IsMouseInPointerEnabled$MH_; }

    static final FunctionDescriptor EnableMouseInPointerForThread$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor EnableMouseInPointerForThread$FUNC() { return EnableMouseInPointerForThread$FUNC_; }

    static final MethodHandle EnableMouseInPointerForThread$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnableMouseInPointerForThread",
        "()I",
        EnableMouseInPointerForThread$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnableMouseInPointerForThread$MH() { return EnableMouseInPointerForThread$MH_; }

    static final FunctionDescriptor RegisterTouchHitTestingWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegisterTouchHitTestingWindow$FUNC() { return RegisterTouchHitTestingWindow$FUNC_; }

    static final MethodHandle RegisterTouchHitTestingWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegisterTouchHitTestingWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegisterTouchHitTestingWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegisterTouchHitTestingWindow$MH() { return RegisterTouchHitTestingWindow$MH_; }

    static final MemoryLayout tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("score"),
        MemoryLayout.ofPaddingBits(16),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("adjustedPoint")
    ).withName("tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION");
    static final jdk.incubator.foreign.MemoryLayout tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$struct$LAYOUT() { return tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$struct$LAYOUT_; }

    static final MemoryLayout tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$score$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$score$LAYOUT() { return tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$score$LAYOUT_; }

    static final VarHandle tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$score$VH_ = tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("score"));
    static final java.lang.invoke.VarHandle tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$score$VH() { return tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION$score$VH_; }

    static final MemoryLayout tagTOUCH_HIT_TESTING_INPUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("pointerId"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("point"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("boundingBox"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("nonOccludedBoundingBox"),
        C_INT.withName("orientation")
    ).withName("tagTOUCH_HIT_TESTING_INPUT");
    static final jdk.incubator.foreign.MemoryLayout tagTOUCH_HIT_TESTING_INPUT$struct$LAYOUT() { return tagTOUCH_HIT_TESTING_INPUT$struct$LAYOUT_; }

    static final MemoryLayout tagTOUCH_HIT_TESTING_INPUT$pointerId$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCH_HIT_TESTING_INPUT$pointerId$LAYOUT() { return tagTOUCH_HIT_TESTING_INPUT$pointerId$LAYOUT_; }

    static final VarHandle tagTOUCH_HIT_TESTING_INPUT$pointerId$VH_ = tagTOUCH_HIT_TESTING_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pointerId"));
    static final java.lang.invoke.VarHandle tagTOUCH_HIT_TESTING_INPUT$pointerId$VH() { return tagTOUCH_HIT_TESTING_INPUT$pointerId$VH_; }

    static final MemoryLayout tagTOUCH_HIT_TESTING_INPUT$orientation$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagTOUCH_HIT_TESTING_INPUT$orientation$LAYOUT() { return tagTOUCH_HIT_TESTING_INPUT$orientation$LAYOUT_; }

    static final VarHandle tagTOUCH_HIT_TESTING_INPUT$orientation$VH_ = tagTOUCH_HIT_TESTING_INPUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("orientation"));
    static final java.lang.invoke.VarHandle tagTOUCH_HIT_TESTING_INPUT$orientation$VH() { return tagTOUCH_HIT_TESTING_INPUT$orientation$VH_; }

    static final FunctionDescriptor EvaluateProximityToRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EvaluateProximityToRect$FUNC() { return EvaluateProximityToRect$FUNC_; }

    static final MethodHandle EvaluateProximityToRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EvaluateProximityToRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EvaluateProximityToRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EvaluateProximityToRect$MH() { return EvaluateProximityToRect$MH_; }

    static final FunctionDescriptor EvaluateProximityToPolygon$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EvaluateProximityToPolygon$FUNC() { return EvaluateProximityToPolygon$FUNC_; }

    static final MethodHandle EvaluateProximityToPolygon$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EvaluateProximityToPolygon",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EvaluateProximityToPolygon$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EvaluateProximityToPolygon$MH() { return EvaluateProximityToPolygon$MH_; }

    static final FunctionDescriptor PackTouchHitTestingProximityEvaluation$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PackTouchHitTestingProximityEvaluation$FUNC() { return PackTouchHitTestingProximityEvaluation$FUNC_; }

    static final MethodHandle PackTouchHitTestingProximityEvaluation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PackTouchHitTestingProximityEvaluation",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)J",
        PackTouchHitTestingProximityEvaluation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PackTouchHitTestingProximityEvaluation$MH() { return PackTouchHitTestingProximityEvaluation$MH_; }

    static final int FEEDBACK_TOUCH_CONTACTVISUALIZATION() { return (int)1L; }

    static final int FEEDBACK_PEN_BARRELVISUALIZATION() { return (int)2L; }

    static final int FEEDBACK_PEN_TAP() { return (int)3L; }

    static final int FEEDBACK_PEN_DOUBLETAP() { return (int)4L; }

    static final int FEEDBACK_PEN_PRESSANDHOLD() { return (int)5L; }

    static final int FEEDBACK_PEN_RIGHTTAP() { return (int)6L; }

    static final int FEEDBACK_TOUCH_TAP() { return (int)7L; }

    static final int FEEDBACK_TOUCH_DOUBLETAP() { return (int)8L; }

    static final int FEEDBACK_TOUCH_PRESSANDHOLD() { return (int)9L; }

    static final int FEEDBACK_TOUCH_RIGHTTAP() { return (int)10L; }

    static final int FEEDBACK_GESTURE_PRESSANDTAP() { return (int)11L; }

    static final int FEEDBACK_MAX() { return (int)-1L; }

    static final FunctionDescriptor GetWindowFeedbackSetting$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowFeedbackSetting$FUNC() { return GetWindowFeedbackSetting$FUNC_; }

    static final MethodHandle GetWindowFeedbackSetting$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowFeedbackSetting",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowFeedbackSetting$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowFeedbackSetting$MH() { return GetWindowFeedbackSetting$MH_; }

    static final FunctionDescriptor SetWindowFeedbackSetting$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONG,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetWindowFeedbackSetting$FUNC() { return SetWindowFeedbackSetting$FUNC_; }

    static final MethodHandle SetWindowFeedbackSetting$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowFeedbackSetting",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;)I",
        SetWindowFeedbackSetting$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetWindowFeedbackSetting$MH() { return SetWindowFeedbackSetting$MH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_FLOAT.withName("_11"),
        C_FLOAT.withName("_12"),
        C_FLOAT.withName("_13"),
        C_FLOAT.withName("_14"),
        C_FLOAT.withName("_21"),
        C_FLOAT.withName("_22"),
        C_FLOAT.withName("_23"),
        C_FLOAT.withName("_24"),
        C_FLOAT.withName("_31"),
        C_FLOAT.withName("_32"),
        C_FLOAT.withName("_33"),
        C_FLOAT.withName("_34"),
        C_FLOAT.withName("_41"),
        C_FLOAT.withName("_42"),
        C_FLOAT.withName("_43"),
        C_FLOAT.withName("_44"),
        MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(4, C_FLOAT)).withName("m")
    ).withName("tagINPUT_TRANSFORM");
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$struct$LAYOUT() { return tagINPUT_TRANSFORM$struct$LAYOUT_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_11$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_11$LAYOUT() { return tagINPUT_TRANSFORM$_11$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_11$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_11"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_11$VH() { return tagINPUT_TRANSFORM$_11$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_12$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_12$LAYOUT() { return tagINPUT_TRANSFORM$_12$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_12$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_12"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_12$VH() { return tagINPUT_TRANSFORM$_12$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_13$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_13$LAYOUT() { return tagINPUT_TRANSFORM$_13$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_13$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_13"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_13$VH() { return tagINPUT_TRANSFORM$_13$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_14$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_14$LAYOUT() { return tagINPUT_TRANSFORM$_14$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_14$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_14"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_14$VH() { return tagINPUT_TRANSFORM$_14$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_21$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_21$LAYOUT() { return tagINPUT_TRANSFORM$_21$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_21$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_21"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_21$VH() { return tagINPUT_TRANSFORM$_21$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_22$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_22$LAYOUT() { return tagINPUT_TRANSFORM$_22$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_22$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_22"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_22$VH() { return tagINPUT_TRANSFORM$_22$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_23$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_23$LAYOUT() { return tagINPUT_TRANSFORM$_23$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_23$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_23"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_23$VH() { return tagINPUT_TRANSFORM$_23$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_24$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_24$LAYOUT() { return tagINPUT_TRANSFORM$_24$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_24$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_24"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_24$VH() { return tagINPUT_TRANSFORM$_24$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_31$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_31$LAYOUT() { return tagINPUT_TRANSFORM$_31$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_31$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_31"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_31$VH() { return tagINPUT_TRANSFORM$_31$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_32$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_32$LAYOUT() { return tagINPUT_TRANSFORM$_32$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_32$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_32"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_32$VH() { return tagINPUT_TRANSFORM$_32$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_33$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_33$LAYOUT() { return tagINPUT_TRANSFORM$_33$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_33$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_33"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_33$VH() { return tagINPUT_TRANSFORM$_33$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_34$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_34$LAYOUT() { return tagINPUT_TRANSFORM$_34$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_34$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_34"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_34$VH() { return tagINPUT_TRANSFORM$_34$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_41$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_41$LAYOUT() { return tagINPUT_TRANSFORM$_41$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_41$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_41"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_41$VH() { return tagINPUT_TRANSFORM$_41$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_42$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_42$LAYOUT() { return tagINPUT_TRANSFORM$_42$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_42$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_42"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_42$VH() { return tagINPUT_TRANSFORM$_42$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_43$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_43$LAYOUT() { return tagINPUT_TRANSFORM$_43$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_43$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_43"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_43$VH() { return tagINPUT_TRANSFORM$_43$VH_; }

    static final MemoryLayout tagINPUT_TRANSFORM$_44$LAYOUT_ = C_FLOAT;
    static final jdk.incubator.foreign.MemoryLayout tagINPUT_TRANSFORM$_44$LAYOUT() { return tagINPUT_TRANSFORM$_44$LAYOUT_; }

    static final VarHandle tagINPUT_TRANSFORM$_44$VH_ = tagINPUT_TRANSFORM$struct$LAYOUT_.varHandle(float.class, MemoryLayout.PathElement.groupElement("_44"));
    static final java.lang.invoke.VarHandle tagINPUT_TRANSFORM$_44$VH() { return tagINPUT_TRANSFORM$_44$VH_; }

    static final FunctionDescriptor GetPointerInputTransform$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPointerInputTransform$FUNC() { return GetPointerInputTransform$FUNC_; }

    static final MethodHandle GetPointerInputTransform$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPointerInputTransform",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        GetPointerInputTransform$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPointerInputTransform$MH() { return GetPointerInputTransform$MH_; }

    static final MemoryLayout tagLASTINPUTINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwTime")
    ).withName("tagLASTINPUTINFO");
    static final jdk.incubator.foreign.MemoryLayout tagLASTINPUTINFO$struct$LAYOUT() { return tagLASTINPUTINFO$struct$LAYOUT_; }

    static final MemoryLayout tagLASTINPUTINFO$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagLASTINPUTINFO$cbSize$LAYOUT() { return tagLASTINPUTINFO$cbSize$LAYOUT_; }

    static final VarHandle tagLASTINPUTINFO$cbSize$VH_ = tagLASTINPUTINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagLASTINPUTINFO$cbSize$VH() { return tagLASTINPUTINFO$cbSize$VH_; }

    static final MemoryLayout tagLASTINPUTINFO$dwTime$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagLASTINPUTINFO$dwTime$LAYOUT() { return tagLASTINPUTINFO$dwTime$LAYOUT_; }

    static final VarHandle tagLASTINPUTINFO$dwTime$VH_ = tagLASTINPUTINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTime"));
    static final java.lang.invoke.VarHandle tagLASTINPUTINFO$dwTime$VH() { return tagLASTINPUTINFO$dwTime$VH_; }

    static final FunctionDescriptor GetLastInputInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetLastInputInfo$FUNC() { return GetLastInputInfo$FUNC_; }

    static final MethodHandle GetLastInputInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLastInputInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetLastInputInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetLastInputInfo$MH() { return GetLastInputInfo$MH_; }

    static final FunctionDescriptor MapVirtualKeyA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor MapVirtualKeyA$FUNC() { return MapVirtualKeyA$FUNC_; }

    static final MethodHandle MapVirtualKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapVirtualKeyA",
        "(II)I",
        MapVirtualKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MapVirtualKeyA$MH() { return MapVirtualKeyA$MH_; }

    static final FunctionDescriptor MapVirtualKeyW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor MapVirtualKeyW$FUNC() { return MapVirtualKeyW$FUNC_; }

    static final MethodHandle MapVirtualKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapVirtualKeyW",
        "(II)I",
        MapVirtualKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MapVirtualKeyW$MH() { return MapVirtualKeyW$MH_; }

    static final FunctionDescriptor MapVirtualKeyExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor MapVirtualKeyExA$FUNC() { return MapVirtualKeyExA$FUNC_; }

    static final MethodHandle MapVirtualKeyExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapVirtualKeyExA",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        MapVirtualKeyExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MapVirtualKeyExA$MH() { return MapVirtualKeyExA$MH_; }

    static final FunctionDescriptor MapVirtualKeyExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor MapVirtualKeyExW$FUNC() { return MapVirtualKeyExW$FUNC_; }

    static final MethodHandle MapVirtualKeyExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MapVirtualKeyExW",
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        MapVirtualKeyExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MapVirtualKeyExW$MH() { return MapVirtualKeyExW$MH_; }

    static final FunctionDescriptor GetInputState$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor GetInputState$FUNC() { return GetInputState$FUNC_; }

    static final MethodHandle GetInputState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetInputState",
        "()I",
        GetInputState$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetInputState$MH() { return GetInputState$MH_; }

    static final FunctionDescriptor GetQueueStatus$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetQueueStatus$FUNC() { return GetQueueStatus$FUNC_; }

    static final MethodHandle GetQueueStatus$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetQueueStatus",
        "(I)I",
        GetQueueStatus$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetQueueStatus$MH() { return GetQueueStatus$MH_; }

    static final FunctionDescriptor GetCapture$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor GetCapture$FUNC() { return GetCapture$FUNC_; }

    static final MethodHandle GetCapture$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCapture",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetCapture$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCapture$MH() { return GetCapture$MH_; }

    static final FunctionDescriptor SetCapture$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetCapture$FUNC() { return SetCapture$FUNC_; }

    static final MethodHandle SetCapture$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCapture",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetCapture$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetCapture$MH() { return SetCapture$MH_; }

    static final FunctionDescriptor ReleaseCapture$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor ReleaseCapture$FUNC() { return ReleaseCapture$FUNC_; }

    static final MethodHandle ReleaseCapture$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseCapture",
        "()I",
        ReleaseCapture$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReleaseCapture$MH() { return ReleaseCapture$MH_; }

    static final FunctionDescriptor MsgWaitForMultipleObjects$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor MsgWaitForMultipleObjects$FUNC() { return MsgWaitForMultipleObjects$FUNC_; }

    static final MethodHandle MsgWaitForMultipleObjects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MsgWaitForMultipleObjects",
        "(ILjdk/incubator/foreign/MemoryAddress;III)I",
        MsgWaitForMultipleObjects$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MsgWaitForMultipleObjects$MH() { return MsgWaitForMultipleObjects$MH_; }

    static final FunctionDescriptor MsgWaitForMultipleObjectsEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor MsgWaitForMultipleObjectsEx$FUNC() { return MsgWaitForMultipleObjectsEx$FUNC_; }

    static final MethodHandle MsgWaitForMultipleObjectsEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MsgWaitForMultipleObjectsEx",
        "(ILjdk/incubator/foreign/MemoryAddress;III)I",
        MsgWaitForMultipleObjectsEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MsgWaitForMultipleObjectsEx$MH() { return MsgWaitForMultipleObjectsEx$MH_; }

    static final FunctionDescriptor SetTimer$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetTimer$FUNC() { return SetTimer$FUNC_; }

    static final MethodHandle SetTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;)J",
        SetTimer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetTimer$MH() { return SetTimer$MH_; }

    static final FunctionDescriptor SetTimer$lpTimerFunc$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetTimer$lpTimerFunc$FUNC() { return SetTimer$lpTimerFunc$FUNC_; }

    static final FunctionDescriptor SetCoalescableTimer$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetCoalescableTimer$FUNC() { return SetCoalescableTimer$FUNC_; }

    static final MethodHandle SetCoalescableTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCoalescableTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;JILjdk/incubator/foreign/MemoryAddress;I)J",
        SetCoalescableTimer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetCoalescableTimer$MH() { return SetCoalescableTimer$MH_; }

    static final FunctionDescriptor SetCoalescableTimer$lpTimerFunc$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetCoalescableTimer$lpTimerFunc$FUNC() { return SetCoalescableTimer$lpTimerFunc$FUNC_; }

    static final FunctionDescriptor KillTimer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor KillTimer$FUNC() { return KillTimer$FUNC_; }

    static final MethodHandle KillTimer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "KillTimer",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        KillTimer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle KillTimer$MH() { return KillTimer$MH_; }

    static final FunctionDescriptor IsWindowUnicode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IsWindowUnicode$FUNC() { return IsWindowUnicode$FUNC_; }

    static final MethodHandle IsWindowUnicode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWindowUnicode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsWindowUnicode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IsWindowUnicode$MH() { return IsWindowUnicode$MH_; }

    static final FunctionDescriptor EnableWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnableWindow$FUNC() { return EnableWindow$FUNC_; }

    static final MethodHandle EnableWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnableWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        EnableWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnableWindow$MH() { return EnableWindow$MH_; }

    static final FunctionDescriptor IsWindowEnabled$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IsWindowEnabled$FUNC() { return IsWindowEnabled$FUNC_; }

    static final MethodHandle IsWindowEnabled$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWindowEnabled",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsWindowEnabled$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IsWindowEnabled$MH() { return IsWindowEnabled$MH_; }

    static final FunctionDescriptor LoadAcceleratorsA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadAcceleratorsA$FUNC() { return LoadAcceleratorsA$FUNC_; }

    static final MethodHandle LoadAcceleratorsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadAcceleratorsA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadAcceleratorsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadAcceleratorsA$MH() { return LoadAcceleratorsA$MH_; }

    static final FunctionDescriptor LoadAcceleratorsW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadAcceleratorsW$FUNC() { return LoadAcceleratorsW$FUNC_; }

    static final MethodHandle LoadAcceleratorsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadAcceleratorsW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadAcceleratorsW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadAcceleratorsW$MH() { return LoadAcceleratorsW$MH_; }

    static final FunctionDescriptor CreateAcceleratorTableA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateAcceleratorTableA$FUNC() { return CreateAcceleratorTableA$FUNC_; }

    static final MethodHandle CreateAcceleratorTableA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateAcceleratorTableA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateAcceleratorTableA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateAcceleratorTableA$MH() { return CreateAcceleratorTableA$MH_; }

    static final FunctionDescriptor CreateAcceleratorTableW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateAcceleratorTableW$FUNC() { return CreateAcceleratorTableW$FUNC_; }

    static final MethodHandle CreateAcceleratorTableW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateAcceleratorTableW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        CreateAcceleratorTableW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateAcceleratorTableW$MH() { return CreateAcceleratorTableW$MH_; }

    static final FunctionDescriptor DestroyAcceleratorTable$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DestroyAcceleratorTable$FUNC() { return DestroyAcceleratorTable$FUNC_; }

    static final MethodHandle DestroyAcceleratorTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DestroyAcceleratorTable",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DestroyAcceleratorTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DestroyAcceleratorTable$MH() { return DestroyAcceleratorTable$MH_; }

    static final FunctionDescriptor CopyAcceleratorTableA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CopyAcceleratorTableA$FUNC() { return CopyAcceleratorTableA$FUNC_; }

    static final MethodHandle CopyAcceleratorTableA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyAcceleratorTableA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CopyAcceleratorTableA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CopyAcceleratorTableA$MH() { return CopyAcceleratorTableA$MH_; }

    static final FunctionDescriptor CopyAcceleratorTableW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CopyAcceleratorTableW$FUNC() { return CopyAcceleratorTableW$FUNC_; }

    static final MethodHandle CopyAcceleratorTableW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CopyAcceleratorTableW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        CopyAcceleratorTableW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CopyAcceleratorTableW$MH() { return CopyAcceleratorTableW$MH_; }

    static final FunctionDescriptor TranslateAcceleratorA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TranslateAcceleratorA$FUNC() { return TranslateAcceleratorA$FUNC_; }

    static final MethodHandle TranslateAcceleratorA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TranslateAcceleratorA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        TranslateAcceleratorA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TranslateAcceleratorA$MH() { return TranslateAcceleratorA$MH_; }

    static final FunctionDescriptor TranslateAcceleratorW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TranslateAcceleratorW$FUNC() { return TranslateAcceleratorW$FUNC_; }

    static final MethodHandle TranslateAcceleratorW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TranslateAcceleratorW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        TranslateAcceleratorW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TranslateAcceleratorW$MH() { return TranslateAcceleratorW$MH_; }

    static final FunctionDescriptor GetSystemMetrics$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetSystemMetrics$FUNC() { return GetSystemMetrics$FUNC_; }

    static final MethodHandle GetSystemMetrics$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemMetrics",
        "(I)I",
        GetSystemMetrics$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetSystemMetrics$MH() { return GetSystemMetrics$MH_; }

    static final FunctionDescriptor GetSystemMetricsForDpi$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetSystemMetricsForDpi$FUNC() { return GetSystemMetricsForDpi$FUNC_; }

    static final MethodHandle GetSystemMetricsForDpi$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemMetricsForDpi",
        "(II)I",
        GetSystemMetricsForDpi$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetSystemMetricsForDpi$MH() { return GetSystemMetricsForDpi$MH_; }

    static final FunctionDescriptor LoadMenuA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadMenuA$FUNC() { return LoadMenuA$FUNC_; }

    static final MethodHandle LoadMenuA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadMenuA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadMenuA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadMenuA$MH() { return LoadMenuA$MH_; }

    static final FunctionDescriptor LoadMenuW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadMenuW$FUNC() { return LoadMenuW$FUNC_; }

    static final MethodHandle LoadMenuW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadMenuW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadMenuW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadMenuW$MH() { return LoadMenuW$MH_; }

    static final FunctionDescriptor LoadMenuIndirectA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadMenuIndirectA$FUNC() { return LoadMenuIndirectA$FUNC_; }

    static final MethodHandle LoadMenuIndirectA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadMenuIndirectA",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadMenuIndirectA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadMenuIndirectA$MH() { return LoadMenuIndirectA$MH_; }

    static final FunctionDescriptor LoadMenuIndirectW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LoadMenuIndirectW$FUNC() { return LoadMenuIndirectW$FUNC_; }

    static final MethodHandle LoadMenuIndirectW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LoadMenuIndirectW",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        LoadMenuIndirectW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LoadMenuIndirectW$MH() { return LoadMenuIndirectW$MH_; }

    static final FunctionDescriptor GetMenu$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenu$FUNC() { return GetMenu$FUNC_; }

    static final MethodHandle GetMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenu",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenu$MH() { return GetMenu$MH_; }

    static final FunctionDescriptor SetMenu$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMenu$FUNC() { return SetMenu$FUNC_; }

    static final MethodHandle SetMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMenu",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMenu$MH() { return SetMenu$MH_; }

    static final FunctionDescriptor ChangeMenuA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor ChangeMenuA$FUNC() { return ChangeMenuA$FUNC_; }

    static final MethodHandle ChangeMenuA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeMenuA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        ChangeMenuA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ChangeMenuA$MH() { return ChangeMenuA$MH_; }

    static final FunctionDescriptor ChangeMenuW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor ChangeMenuW$FUNC() { return ChangeMenuW$FUNC_; }

    static final MethodHandle ChangeMenuW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeMenuW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        ChangeMenuW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ChangeMenuW$MH() { return ChangeMenuW$MH_; }

    static final FunctionDescriptor HiliteMenuItem$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor HiliteMenuItem$FUNC() { return HiliteMenuItem$FUNC_; }

    static final MethodHandle HiliteMenuItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HiliteMenuItem",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        HiliteMenuItem$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle HiliteMenuItem$MH() { return HiliteMenuItem$MH_; }

    static final FunctionDescriptor GetMenuStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuStringA$FUNC() { return GetMenuStringA$FUNC_; }

    static final MethodHandle GetMenuStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        GetMenuStringA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuStringA$MH() { return GetMenuStringA$MH_; }

    static final FunctionDescriptor GetMenuStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuStringW$FUNC() { return GetMenuStringW$FUNC_; }

    static final MethodHandle GetMenuStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)I",
        GetMenuStringW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuStringW$MH() { return GetMenuStringW$MH_; }

    static final FunctionDescriptor GetMenuState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuState$FUNC() { return GetMenuState$FUNC_; }

    static final MethodHandle GetMenuState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuState",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetMenuState$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuState$MH() { return GetMenuState$MH_; }

    static final FunctionDescriptor DrawMenuBar$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawMenuBar$FUNC() { return DrawMenuBar$FUNC_; }

    static final MethodHandle DrawMenuBar$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawMenuBar",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DrawMenuBar$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DrawMenuBar$MH() { return DrawMenuBar$MH_; }

    static final FunctionDescriptor GetSystemMenu$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetSystemMenu$FUNC() { return GetSystemMenu$FUNC_; }

    static final MethodHandle GetSystemMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemMenu",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetSystemMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetSystemMenu$MH() { return GetSystemMenu$MH_; }

    static final FunctionDescriptor CreateMenu$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor CreateMenu$FUNC() { return CreateMenu$FUNC_; }

    static final MethodHandle CreateMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateMenu",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        CreateMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateMenu$MH() { return CreateMenu$MH_; }

    static final FunctionDescriptor CreatePopupMenu$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor CreatePopupMenu$FUNC() { return CreatePopupMenu$FUNC_; }

    static final MethodHandle CreatePopupMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePopupMenu",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        CreatePopupMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreatePopupMenu$MH() { return CreatePopupMenu$MH_; }

    static final FunctionDescriptor DestroyMenu$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DestroyMenu$FUNC() { return DestroyMenu$FUNC_; }

    static final MethodHandle DestroyMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DestroyMenu",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DestroyMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DestroyMenu$MH() { return DestroyMenu$MH_; }

    static final FunctionDescriptor CheckMenuItem$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CheckMenuItem$FUNC() { return CheckMenuItem$FUNC_; }

    static final MethodHandle CheckMenuItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckMenuItem",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        CheckMenuItem$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CheckMenuItem$MH() { return CheckMenuItem$MH_; }

    static final FunctionDescriptor EnableMenuItem$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnableMenuItem$FUNC() { return EnableMenuItem$FUNC_; }

    static final MethodHandle EnableMenuItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnableMenuItem",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        EnableMenuItem$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnableMenuItem$MH() { return EnableMenuItem$MH_; }

    static final FunctionDescriptor GetSubMenu$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetSubMenu$FUNC() { return GetSubMenu$FUNC_; }

    static final MethodHandle GetSubMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSubMenu",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetSubMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetSubMenu$MH() { return GetSubMenu$MH_; }

    static final FunctionDescriptor GetMenuItemID$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuItemID$FUNC() { return GetMenuItemID$FUNC_; }

    static final MethodHandle GetMenuItemID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuItemID",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetMenuItemID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuItemID$MH() { return GetMenuItemID$MH_; }

    static final FunctionDescriptor GetMenuItemCount$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuItemCount$FUNC() { return GetMenuItemCount$FUNC_; }

    static final MethodHandle GetMenuItemCount$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuItemCount",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMenuItemCount$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuItemCount$MH() { return GetMenuItemCount$MH_; }

    static final FunctionDescriptor InsertMenuA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor InsertMenuA$FUNC() { return InsertMenuA$FUNC_; }

    static final MethodHandle InsertMenuA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InsertMenuA",
        "(Ljdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I",
        InsertMenuA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InsertMenuA$MH() { return InsertMenuA$MH_; }

    static final FunctionDescriptor InsertMenuW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor InsertMenuW$FUNC() { return InsertMenuW$FUNC_; }

    static final MethodHandle InsertMenuW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InsertMenuW",
        "(Ljdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I",
        InsertMenuW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InsertMenuW$MH() { return InsertMenuW$MH_; }

    static final FunctionDescriptor AppendMenuA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AppendMenuA$FUNC() { return AppendMenuA$FUNC_; }

    static final MethodHandle AppendMenuA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AppendMenuA",
        "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I",
        AppendMenuA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AppendMenuA$MH() { return AppendMenuA$MH_; }

    static final FunctionDescriptor AppendMenuW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AppendMenuW$FUNC() { return AppendMenuW$FUNC_; }

    static final MethodHandle AppendMenuW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AppendMenuW",
        "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I",
        AppendMenuW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AppendMenuW$MH() { return AppendMenuW$MH_; }

    static final FunctionDescriptor ModifyMenuA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ModifyMenuA$FUNC() { return ModifyMenuA$FUNC_; }

    static final MethodHandle ModifyMenuA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ModifyMenuA",
        "(Ljdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I",
        ModifyMenuA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ModifyMenuA$MH() { return ModifyMenuA$MH_; }

    static final FunctionDescriptor ModifyMenuW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ModifyMenuW$FUNC() { return ModifyMenuW$FUNC_; }

    static final MethodHandle ModifyMenuW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ModifyMenuW",
        "(Ljdk/incubator/foreign/MemoryAddress;IIJLjdk/incubator/foreign/MemoryAddress;)I",
        ModifyMenuW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ModifyMenuW$MH() { return ModifyMenuW$MH_; }

    static final FunctionDescriptor RemoveMenu$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor RemoveMenu$FUNC() { return RemoveMenu$FUNC_; }

    static final MethodHandle RemoveMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemoveMenu",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        RemoveMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RemoveMenu$MH() { return RemoveMenu$MH_; }

    static final FunctionDescriptor DeleteMenu$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DeleteMenu$FUNC() { return DeleteMenu$FUNC_; }

    static final MethodHandle DeleteMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DeleteMenu",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        DeleteMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DeleteMenu$MH() { return DeleteMenu$MH_; }

    static final FunctionDescriptor SetMenuItemBitmaps$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMenuItemBitmaps$FUNC() { return SetMenuItemBitmaps$FUNC_; }

    static final MethodHandle SetMenuItemBitmaps$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMenuItemBitmaps",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetMenuItemBitmaps$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMenuItemBitmaps$MH() { return SetMenuItemBitmaps$MH_; }

    static final FunctionDescriptor GetMenuCheckMarkDimensions$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuCheckMarkDimensions$FUNC() { return GetMenuCheckMarkDimensions$FUNC_; }

    static final MethodHandle GetMenuCheckMarkDimensions$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuCheckMarkDimensions",
        "()I",
        GetMenuCheckMarkDimensions$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuCheckMarkDimensions$MH() { return GetMenuCheckMarkDimensions$MH_; }

    static final FunctionDescriptor TrackPopupMenu$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TrackPopupMenu$FUNC() { return TrackPopupMenu$FUNC_; }

    static final MethodHandle TrackPopupMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TrackPopupMenu",
        "(Ljdk/incubator/foreign/MemoryAddress;IIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        TrackPopupMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TrackPopupMenu$MH() { return TrackPopupMenu$MH_; }

    static final MemoryLayout tagTPMPARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcExclude")
    ).withName("tagTPMPARAMS");
    static final jdk.incubator.foreign.MemoryLayout tagTPMPARAMS$struct$LAYOUT() { return tagTPMPARAMS$struct$LAYOUT_; }

    static final MemoryLayout tagTPMPARAMS$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagTPMPARAMS$cbSize$LAYOUT() { return tagTPMPARAMS$cbSize$LAYOUT_; }

    static final VarHandle tagTPMPARAMS$cbSize$VH_ = tagTPMPARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagTPMPARAMS$cbSize$VH() { return tagTPMPARAMS$cbSize$VH_; }

    static final FunctionDescriptor TrackPopupMenuEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor TrackPopupMenuEx$FUNC() { return TrackPopupMenuEx$FUNC_; }

    static final MethodHandle TrackPopupMenuEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TrackPopupMenuEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        TrackPopupMenuEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TrackPopupMenuEx$MH() { return TrackPopupMenuEx$MH_; }

    static final FunctionDescriptor CalculatePopupWindowPosition$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CalculatePopupWindowPosition$FUNC() { return CalculatePopupWindowPosition$FUNC_; }

    static final MethodHandle CalculatePopupWindowPosition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CalculatePopupWindowPosition",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CalculatePopupWindowPosition$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CalculatePopupWindowPosition$MH() { return CalculatePopupWindowPosition$MH_; }

    static final MemoryLayout tagMENUINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("fMask"),
        C_LONG.withName("dwStyle"),
        C_INT.withName("cyMax"),
        C_POINTER.withName("hbrBack"),
        C_LONG.withName("dwContextHelpID"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("dwMenuData")
    ).withName("tagMENUINFO");
    static final jdk.incubator.foreign.MemoryLayout tagMENUINFO$struct$LAYOUT() { return tagMENUINFO$struct$LAYOUT_; }

    static final MemoryLayout tagMENUINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMENUINFO$cbSize$LAYOUT() { return tagMENUINFO$cbSize$LAYOUT_; }

    static final VarHandle tagMENUINFO$cbSize$VH_ = tagMENUINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagMENUINFO$cbSize$VH() { return tagMENUINFO$cbSize$VH_; }

    static final MemoryLayout tagMENUINFO$fMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMENUINFO$fMask$LAYOUT() { return tagMENUINFO$fMask$LAYOUT_; }

    static final VarHandle tagMENUINFO$fMask$VH_ = tagMENUINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fMask"));
    static final java.lang.invoke.VarHandle tagMENUINFO$fMask$VH() { return tagMENUINFO$fMask$VH_; }

    static final MemoryLayout tagMENUINFO$dwStyle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMENUINFO$dwStyle$LAYOUT() { return tagMENUINFO$dwStyle$LAYOUT_; }

    static final VarHandle tagMENUINFO$dwStyle$VH_ = tagMENUINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStyle"));
    static final java.lang.invoke.VarHandle tagMENUINFO$dwStyle$VH() { return tagMENUINFO$dwStyle$VH_; }

    static final MemoryLayout tagMENUINFO$cyMax$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUINFO$cyMax$LAYOUT() { return tagMENUINFO$cyMax$LAYOUT_; }

    static final VarHandle tagMENUINFO$cyMax$VH_ = tagMENUINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cyMax"));
    static final java.lang.invoke.VarHandle tagMENUINFO$cyMax$VH() { return tagMENUINFO$cyMax$VH_; }

    static final MemoryLayout tagMENUINFO$hbrBack$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUINFO$hbrBack$LAYOUT() { return tagMENUINFO$hbrBack$LAYOUT_; }

    static final VarHandle tagMENUINFO$hbrBack$VH_ = MemoryHandles.asAddressVarHandle(tagMENUINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbrBack")));
    static final java.lang.invoke.VarHandle tagMENUINFO$hbrBack$VH() { return tagMENUINFO$hbrBack$VH_; }

    static final MemoryLayout tagMENUINFO$dwContextHelpID$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMENUINFO$dwContextHelpID$LAYOUT() { return tagMENUINFO$dwContextHelpID$LAYOUT_; }

    static final VarHandle tagMENUINFO$dwContextHelpID$VH_ = tagMENUINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwContextHelpID"));
    static final java.lang.invoke.VarHandle tagMENUINFO$dwContextHelpID$VH() { return tagMENUINFO$dwContextHelpID$VH_; }

    static final MemoryLayout tagMENUINFO$dwMenuData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagMENUINFO$dwMenuData$LAYOUT() { return tagMENUINFO$dwMenuData$LAYOUT_; }

    static final VarHandle tagMENUINFO$dwMenuData$VH_ = tagMENUINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwMenuData"));
    static final java.lang.invoke.VarHandle tagMENUINFO$dwMenuData$VH() { return tagMENUINFO$dwMenuData$VH_; }

    static final FunctionDescriptor GetMenuInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuInfo$FUNC() { return GetMenuInfo$FUNC_; }

    static final MethodHandle GetMenuInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMenuInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuInfo$MH() { return GetMenuInfo$MH_; }

    static final FunctionDescriptor SetMenuInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMenuInfo$FUNC() { return SetMenuInfo$FUNC_; }

    static final MethodHandle SetMenuInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMenuInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetMenuInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMenuInfo$MH() { return SetMenuInfo$MH_; }

    static final FunctionDescriptor EndMenu$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor EndMenu$FUNC() { return EndMenu$FUNC_; }

    static final MethodHandle EndMenu$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EndMenu",
        "()I",
        EndMenu$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EndMenu$MH() { return EndMenu$MH_; }

    static final MemoryLayout tagMENUGETOBJECTINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwFlags"),
        C_INT.withName("uPos"),
        C_POINTER.withName("hmenu"),
        C_POINTER.withName("riid"),
        C_POINTER.withName("pvObj")
    ).withName("tagMENUGETOBJECTINFO");
    static final jdk.incubator.foreign.MemoryLayout tagMENUGETOBJECTINFO$struct$LAYOUT() { return tagMENUGETOBJECTINFO$struct$LAYOUT_; }

    static final MemoryLayout tagMENUGETOBJECTINFO$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMENUGETOBJECTINFO$dwFlags$LAYOUT() { return tagMENUGETOBJECTINFO$dwFlags$LAYOUT_; }

    static final VarHandle tagMENUGETOBJECTINFO$dwFlags$VH_ = tagMENUGETOBJECTINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagMENUGETOBJECTINFO$dwFlags$VH() { return tagMENUGETOBJECTINFO$dwFlags$VH_; }

    static final MemoryLayout tagMENUGETOBJECTINFO$uPos$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUGETOBJECTINFO$uPos$LAYOUT() { return tagMENUGETOBJECTINFO$uPos$LAYOUT_; }

    static final VarHandle tagMENUGETOBJECTINFO$uPos$VH_ = tagMENUGETOBJECTINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("uPos"));
    static final java.lang.invoke.VarHandle tagMENUGETOBJECTINFO$uPos$VH() { return tagMENUGETOBJECTINFO$uPos$VH_; }

    static final MemoryLayout tagMENUGETOBJECTINFO$hmenu$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUGETOBJECTINFO$hmenu$LAYOUT() { return tagMENUGETOBJECTINFO$hmenu$LAYOUT_; }

    static final VarHandle tagMENUGETOBJECTINFO$hmenu$VH_ = MemoryHandles.asAddressVarHandle(tagMENUGETOBJECTINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hmenu")));
    static final java.lang.invoke.VarHandle tagMENUGETOBJECTINFO$hmenu$VH() { return tagMENUGETOBJECTINFO$hmenu$VH_; }

    static final MemoryLayout tagMENUGETOBJECTINFO$riid$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUGETOBJECTINFO$riid$LAYOUT() { return tagMENUGETOBJECTINFO$riid$LAYOUT_; }

    static final VarHandle tagMENUGETOBJECTINFO$riid$VH_ = MemoryHandles.asAddressVarHandle(tagMENUGETOBJECTINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("riid")));
    static final java.lang.invoke.VarHandle tagMENUGETOBJECTINFO$riid$VH() { return tagMENUGETOBJECTINFO$riid$VH_; }

    static final MemoryLayout tagMENUGETOBJECTINFO$pvObj$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUGETOBJECTINFO$pvObj$LAYOUT() { return tagMENUGETOBJECTINFO$pvObj$LAYOUT_; }

    static final VarHandle tagMENUGETOBJECTINFO$pvObj$VH_ = MemoryHandles.asAddressVarHandle(tagMENUGETOBJECTINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pvObj")));
    static final java.lang.invoke.VarHandle tagMENUGETOBJECTINFO$pvObj$VH() { return tagMENUGETOBJECTINFO$pvObj$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("fMask"),
        C_INT.withName("fType"),
        C_INT.withName("fState"),
        C_INT.withName("wID"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hSubMenu"),
        C_POINTER.withName("hbmpChecked"),
        C_POINTER.withName("hbmpUnchecked"),
        C_LONGLONG.withName("dwItemData"),
        C_POINTER.withName("dwTypeData"),
        C_INT.withName("cch"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hbmpItem")
    ).withName("tagMENUITEMINFOA");
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$struct$LAYOUT() { return tagMENUITEMINFOA$struct$LAYOUT_; }

    static final MemoryLayout tagMENUITEMINFOA$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$cbSize$LAYOUT() { return tagMENUITEMINFOA$cbSize$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$cbSize$VH_ = tagMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$cbSize$VH() { return tagMENUITEMINFOA$cbSize$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$fMask$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$fMask$LAYOUT() { return tagMENUITEMINFOA$fMask$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$fMask$VH_ = tagMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fMask"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$fMask$VH() { return tagMENUITEMINFOA$fMask$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$fType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$fType$LAYOUT() { return tagMENUITEMINFOA$fType$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$fType$VH_ = tagMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fType"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$fType$VH() { return tagMENUITEMINFOA$fType$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$fState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$fState$LAYOUT() { return tagMENUITEMINFOA$fState$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$fState$VH_ = tagMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fState"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$fState$VH() { return tagMENUITEMINFOA$fState$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$wID$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$wID$LAYOUT() { return tagMENUITEMINFOA$wID$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$wID$VH_ = tagMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wID"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$wID$VH() { return tagMENUITEMINFOA$wID$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$hSubMenu$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$hSubMenu$LAYOUT() { return tagMENUITEMINFOA$hSubMenu$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$hSubMenu$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hSubMenu")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$hSubMenu$VH() { return tagMENUITEMINFOA$hSubMenu$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$hbmpChecked$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$hbmpChecked$LAYOUT() { return tagMENUITEMINFOA$hbmpChecked$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$hbmpChecked$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpChecked")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$hbmpChecked$VH() { return tagMENUITEMINFOA$hbmpChecked$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$hbmpUnchecked$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$hbmpUnchecked$LAYOUT() { return tagMENUITEMINFOA$hbmpUnchecked$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$hbmpUnchecked$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpUnchecked")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$hbmpUnchecked$VH() { return tagMENUITEMINFOA$hbmpUnchecked$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$dwItemData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$dwItemData$LAYOUT() { return tagMENUITEMINFOA$dwItemData$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$dwItemData$VH_ = tagMENUITEMINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwItemData"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$dwItemData$VH() { return tagMENUITEMINFOA$dwItemData$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$dwTypeData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$dwTypeData$LAYOUT() { return tagMENUITEMINFOA$dwTypeData$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$dwTypeData$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwTypeData")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$dwTypeData$VH() { return tagMENUITEMINFOA$dwTypeData$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$cch$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$cch$LAYOUT() { return tagMENUITEMINFOA$cch$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$cch$VH_ = tagMENUITEMINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cch"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$cch$VH() { return tagMENUITEMINFOA$cch$VH_; }

    static final MemoryLayout tagMENUITEMINFOA$hbmpItem$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOA$hbmpItem$LAYOUT() { return tagMENUITEMINFOA$hbmpItem$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOA$hbmpItem$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpItem")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOA$hbmpItem$VH() { return tagMENUITEMINFOA$hbmpItem$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("fMask"),
        C_INT.withName("fType"),
        C_INT.withName("fState"),
        C_INT.withName("wID"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hSubMenu"),
        C_POINTER.withName("hbmpChecked"),
        C_POINTER.withName("hbmpUnchecked"),
        C_LONGLONG.withName("dwItemData"),
        C_POINTER.withName("dwTypeData"),
        C_INT.withName("cch"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hbmpItem")
    ).withName("tagMENUITEMINFOW");
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$struct$LAYOUT() { return tagMENUITEMINFOW$struct$LAYOUT_; }

    static final MemoryLayout tagMENUITEMINFOW$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$cbSize$LAYOUT() { return tagMENUITEMINFOW$cbSize$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$cbSize$VH_ = tagMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$cbSize$VH() { return tagMENUITEMINFOW$cbSize$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$fMask$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$fMask$LAYOUT() { return tagMENUITEMINFOW$fMask$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$fMask$VH_ = tagMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fMask"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$fMask$VH() { return tagMENUITEMINFOW$fMask$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$fType$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$fType$LAYOUT() { return tagMENUITEMINFOW$fType$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$fType$VH_ = tagMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fType"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$fType$VH() { return tagMENUITEMINFOW$fType$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$fState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$fState$LAYOUT() { return tagMENUITEMINFOW$fState$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$fState$VH_ = tagMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("fState"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$fState$VH() { return tagMENUITEMINFOW$fState$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$wID$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$wID$LAYOUT() { return tagMENUITEMINFOW$wID$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$wID$VH_ = tagMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wID"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$wID$VH() { return tagMENUITEMINFOW$wID$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$hSubMenu$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$hSubMenu$LAYOUT() { return tagMENUITEMINFOW$hSubMenu$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$hSubMenu$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hSubMenu")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$hSubMenu$VH() { return tagMENUITEMINFOW$hSubMenu$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$hbmpChecked$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$hbmpChecked$LAYOUT() { return tagMENUITEMINFOW$hbmpChecked$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$hbmpChecked$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpChecked")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$hbmpChecked$VH() { return tagMENUITEMINFOW$hbmpChecked$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$hbmpUnchecked$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$hbmpUnchecked$LAYOUT() { return tagMENUITEMINFOW$hbmpUnchecked$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$hbmpUnchecked$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpUnchecked")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$hbmpUnchecked$VH() { return tagMENUITEMINFOW$hbmpUnchecked$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$dwItemData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$dwItemData$LAYOUT() { return tagMENUITEMINFOW$dwItemData$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$dwItemData$VH_ = tagMENUITEMINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwItemData"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$dwItemData$VH() { return tagMENUITEMINFOW$dwItemData$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$dwTypeData$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$dwTypeData$LAYOUT() { return tagMENUITEMINFOW$dwTypeData$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$dwTypeData$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwTypeData")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$dwTypeData$VH() { return tagMENUITEMINFOW$dwTypeData$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$cch$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$cch$LAYOUT() { return tagMENUITEMINFOW$cch$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$cch$VH_ = tagMENUITEMINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cch"));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$cch$VH() { return tagMENUITEMINFOW$cch$VH_; }

    static final MemoryLayout tagMENUITEMINFOW$hbmpItem$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUITEMINFOW$hbmpItem$LAYOUT() { return tagMENUITEMINFOW$hbmpItem$LAYOUT_; }

    static final VarHandle tagMENUITEMINFOW$hbmpItem$VH_ = MemoryHandles.asAddressVarHandle(tagMENUITEMINFOW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hbmpItem")));
    static final java.lang.invoke.VarHandle tagMENUITEMINFOW$hbmpItem$VH() { return tagMENUITEMINFOW$hbmpItem$VH_; }

    static final FunctionDescriptor InsertMenuItemA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor InsertMenuItemA$FUNC() { return InsertMenuItemA$FUNC_; }

    static final MethodHandle InsertMenuItemA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InsertMenuItemA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        InsertMenuItemA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InsertMenuItemA$MH() { return InsertMenuItemA$MH_; }

    static final FunctionDescriptor InsertMenuItemW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor InsertMenuItemW$FUNC() { return InsertMenuItemW$FUNC_; }

    static final MethodHandle InsertMenuItemW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InsertMenuItemW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        InsertMenuItemW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InsertMenuItemW$MH() { return InsertMenuItemW$MH_; }

    static final FunctionDescriptor GetMenuItemInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuItemInfoA$FUNC() { return GetMenuItemInfoA$FUNC_; }

    static final MethodHandle GetMenuItemInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuItemInfoA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetMenuItemInfoA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuItemInfoA$MH() { return GetMenuItemInfoA$MH_; }

    static final FunctionDescriptor GetMenuItemInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuItemInfoW$FUNC() { return GetMenuItemInfoW$FUNC_; }

    static final MethodHandle GetMenuItemInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuItemInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetMenuItemInfoW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuItemInfoW$MH() { return GetMenuItemInfoW$MH_; }

    static final FunctionDescriptor SetMenuItemInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMenuItemInfoA$FUNC() { return SetMenuItemInfoA$FUNC_; }

    static final MethodHandle SetMenuItemInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMenuItemInfoA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetMenuItemInfoA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMenuItemInfoA$MH() { return SetMenuItemInfoA$MH_; }

    static final FunctionDescriptor SetMenuItemInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMenuItemInfoW$FUNC() { return SetMenuItemInfoW$FUNC_; }

    static final MethodHandle SetMenuItemInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMenuItemInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        SetMenuItemInfoW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMenuItemInfoW$MH() { return SetMenuItemInfoW$MH_; }

    static final FunctionDescriptor GetMenuDefaultItem$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuDefaultItem$FUNC() { return GetMenuDefaultItem$FUNC_; }

    static final MethodHandle GetMenuDefaultItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuDefaultItem",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        GetMenuDefaultItem$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuDefaultItem$MH() { return GetMenuDefaultItem$MH_; }

    static final FunctionDescriptor SetMenuDefaultItem$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetMenuDefaultItem$FUNC() { return SetMenuDefaultItem$FUNC_; }

    static final MethodHandle SetMenuDefaultItem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetMenuDefaultItem",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        SetMenuDefaultItem$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetMenuDefaultItem$MH() { return SetMenuDefaultItem$MH_; }

    static final FunctionDescriptor GetMenuItemRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuItemRect$FUNC() { return GetMenuItemRect$FUNC_; }

    static final MethodHandle GetMenuItemRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuItemRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetMenuItemRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuItemRect$MH() { return GetMenuItemRect$MH_; }

    static final FunctionDescriptor MenuItemFromPoint$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("tagPOINT")
    );
    static final jdk.incubator.foreign.FunctionDescriptor MenuItemFromPoint$FUNC() { return MenuItemFromPoint$FUNC_; }

    static final MethodHandle MenuItemFromPoint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MenuItemFromPoint",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        MenuItemFromPoint$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MenuItemFromPoint$MH() { return MenuItemFromPoint$MH_; }

    static final MemoryLayout tagDROPSTRUCT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("hwndSource"),
        C_POINTER.withName("hwndSink"),
        C_LONG.withName("wFmt"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("dwData"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptDrop"),
        C_LONG.withName("dwControlData"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagDROPSTRUCT");
    static final jdk.incubator.foreign.MemoryLayout tagDROPSTRUCT$struct$LAYOUT() { return tagDROPSTRUCT$struct$LAYOUT_; }

    static final MemoryLayout tagDROPSTRUCT$hwndSource$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagDROPSTRUCT$hwndSource$LAYOUT() { return tagDROPSTRUCT$hwndSource$LAYOUT_; }

    static final VarHandle tagDROPSTRUCT$hwndSource$VH_ = MemoryHandles.asAddressVarHandle(tagDROPSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndSource")));
    static final java.lang.invoke.VarHandle tagDROPSTRUCT$hwndSource$VH() { return tagDROPSTRUCT$hwndSource$VH_; }

    static final MemoryLayout tagDROPSTRUCT$hwndSink$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagDROPSTRUCT$hwndSink$LAYOUT() { return tagDROPSTRUCT$hwndSink$LAYOUT_; }

    static final VarHandle tagDROPSTRUCT$hwndSink$VH_ = MemoryHandles.asAddressVarHandle(tagDROPSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndSink")));
    static final java.lang.invoke.VarHandle tagDROPSTRUCT$hwndSink$VH() { return tagDROPSTRUCT$hwndSink$VH_; }

    static final MemoryLayout tagDROPSTRUCT$wFmt$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagDROPSTRUCT$wFmt$LAYOUT() { return tagDROPSTRUCT$wFmt$LAYOUT_; }

    static final VarHandle tagDROPSTRUCT$wFmt$VH_ = tagDROPSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("wFmt"));
    static final java.lang.invoke.VarHandle tagDROPSTRUCT$wFmt$VH() { return tagDROPSTRUCT$wFmt$VH_; }

    static final MemoryLayout tagDROPSTRUCT$dwData$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagDROPSTRUCT$dwData$LAYOUT() { return tagDROPSTRUCT$dwData$LAYOUT_; }

    static final VarHandle tagDROPSTRUCT$dwData$VH_ = tagDROPSTRUCT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("dwData"));
    static final java.lang.invoke.VarHandle tagDROPSTRUCT$dwData$VH() { return tagDROPSTRUCT$dwData$VH_; }

    static final MemoryLayout tagDROPSTRUCT$dwControlData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagDROPSTRUCT$dwControlData$LAYOUT() { return tagDROPSTRUCT$dwControlData$LAYOUT_; }

    static final VarHandle tagDROPSTRUCT$dwControlData$VH_ = tagDROPSTRUCT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwControlData"));
    static final java.lang.invoke.VarHandle tagDROPSTRUCT$dwControlData$VH() { return tagDROPSTRUCT$dwControlData$VH_; }

    static final FunctionDescriptor DragObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DragObject$FUNC() { return DragObject$FUNC_; }

    static final MethodHandle DragObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DragObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I",
        DragObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DragObject$MH() { return DragObject$MH_; }

    static final FunctionDescriptor DragDetect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("tagPOINT")
    );
    static final jdk.incubator.foreign.FunctionDescriptor DragDetect$FUNC() { return DragDetect$FUNC_; }

    static final MethodHandle DragDetect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DragDetect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        DragDetect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DragDetect$MH() { return DragDetect$MH_; }

    static final FunctionDescriptor DrawIcon$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawIcon$FUNC() { return DrawIcon$FUNC_; }

    static final MethodHandle DrawIcon$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawIcon",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        DrawIcon$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DrawIcon$MH() { return DrawIcon$MH_; }

    static final MemoryLayout tagDRAWTEXTPARAMS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iTabLength"),
        C_INT.withName("iLeftMargin"),
        C_INT.withName("iRightMargin"),
        C_INT.withName("uiLengthDrawn")
    ).withName("tagDRAWTEXTPARAMS");
    static final jdk.incubator.foreign.MemoryLayout tagDRAWTEXTPARAMS$struct$LAYOUT() { return tagDRAWTEXTPARAMS$struct$LAYOUT_; }

    static final MemoryLayout tagDRAWTEXTPARAMS$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagDRAWTEXTPARAMS$cbSize$LAYOUT() { return tagDRAWTEXTPARAMS$cbSize$LAYOUT_; }

    static final VarHandle tagDRAWTEXTPARAMS$cbSize$VH_ = tagDRAWTEXTPARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagDRAWTEXTPARAMS$cbSize$VH() { return tagDRAWTEXTPARAMS$cbSize$VH_; }

    static final MemoryLayout tagDRAWTEXTPARAMS$iTabLength$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagDRAWTEXTPARAMS$iTabLength$LAYOUT() { return tagDRAWTEXTPARAMS$iTabLength$LAYOUT_; }

    static final VarHandle tagDRAWTEXTPARAMS$iTabLength$VH_ = tagDRAWTEXTPARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iTabLength"));
    static final java.lang.invoke.VarHandle tagDRAWTEXTPARAMS$iTabLength$VH() { return tagDRAWTEXTPARAMS$iTabLength$VH_; }

    static final MemoryLayout tagDRAWTEXTPARAMS$iLeftMargin$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagDRAWTEXTPARAMS$iLeftMargin$LAYOUT() { return tagDRAWTEXTPARAMS$iLeftMargin$LAYOUT_; }

    static final VarHandle tagDRAWTEXTPARAMS$iLeftMargin$VH_ = tagDRAWTEXTPARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iLeftMargin"));
    static final java.lang.invoke.VarHandle tagDRAWTEXTPARAMS$iLeftMargin$VH() { return tagDRAWTEXTPARAMS$iLeftMargin$VH_; }

    static final MemoryLayout tagDRAWTEXTPARAMS$iRightMargin$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagDRAWTEXTPARAMS$iRightMargin$LAYOUT() { return tagDRAWTEXTPARAMS$iRightMargin$LAYOUT_; }

    static final VarHandle tagDRAWTEXTPARAMS$iRightMargin$VH_ = tagDRAWTEXTPARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iRightMargin"));
    static final java.lang.invoke.VarHandle tagDRAWTEXTPARAMS$iRightMargin$VH() { return tagDRAWTEXTPARAMS$iRightMargin$VH_; }

    static final MemoryLayout tagDRAWTEXTPARAMS$uiLengthDrawn$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagDRAWTEXTPARAMS$uiLengthDrawn$LAYOUT() { return tagDRAWTEXTPARAMS$uiLengthDrawn$LAYOUT_; }

    static final VarHandle tagDRAWTEXTPARAMS$uiLengthDrawn$VH_ = tagDRAWTEXTPARAMS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("uiLengthDrawn"));
    static final java.lang.invoke.VarHandle tagDRAWTEXTPARAMS$uiLengthDrawn$VH() { return tagDRAWTEXTPARAMS$uiLengthDrawn$VH_; }

    static final FunctionDescriptor DrawTextA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawTextA$FUNC() { return DrawTextA$FUNC_; }

    static final MethodHandle DrawTextA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawTextA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        DrawTextA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DrawTextA$MH() { return DrawTextA$MH_; }

    static final FunctionDescriptor DrawTextW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawTextW$FUNC() { return DrawTextW$FUNC_; }

    static final MethodHandle DrawTextW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawTextW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        DrawTextW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DrawTextW$MH() { return DrawTextW$MH_; }

    static final FunctionDescriptor DrawTextExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawTextExA$FUNC() { return DrawTextExA$FUNC_; }

    static final MethodHandle DrawTextExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawTextExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        DrawTextExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DrawTextExA$MH() { return DrawTextExA$MH_; }

    static final FunctionDescriptor DrawTextExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawTextExW$FUNC() { return DrawTextExW$FUNC_; }

    static final MethodHandle DrawTextExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawTextExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        DrawTextExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DrawTextExW$MH() { return DrawTextExW$MH_; }

    static final FunctionDescriptor GrayStringA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GrayStringA$FUNC() { return GrayStringA$FUNC_; }

    static final MethodHandle GrayStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GrayStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIIIII)I",
        GrayStringA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GrayStringA$MH() { return GrayStringA$MH_; }

    static final FunctionDescriptor GrayStringA$lpOutputFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GrayStringA$lpOutputFunc$FUNC() { return GrayStringA$lpOutputFunc$FUNC_; }

    static final FunctionDescriptor GrayStringW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GrayStringW$FUNC() { return GrayStringW$FUNC_; }

    static final MethodHandle GrayStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GrayStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JIIIII)I",
        GrayStringW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GrayStringW$MH() { return GrayStringW$MH_; }

    static final FunctionDescriptor GrayStringW$lpOutputFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GrayStringW$lpOutputFunc$FUNC() { return GrayStringW$lpOutputFunc$FUNC_; }

    static final FunctionDescriptor DrawStateA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawStateA$FUNC() { return DrawStateA$FUNC_; }

    static final MethodHandle DrawStateA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawStateA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJIIIII)I",
        DrawStateA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DrawStateA$MH() { return DrawStateA$MH_; }

    static final FunctionDescriptor DrawStateA$qfnCallBack$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawStateA$qfnCallBack$FUNC() { return DrawStateA$qfnCallBack$FUNC_; }

    static final FunctionDescriptor DrawStateW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawStateW$FUNC() { return DrawStateW$FUNC_; }

    static final MethodHandle DrawStateW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DrawStateW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJIIIII)I",
        DrawStateW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DrawStateW$MH() { return DrawStateW$MH_; }

    static final FunctionDescriptor DrawStateW$qfnCallBack$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor DrawStateW$qfnCallBack$FUNC() { return DrawStateW$qfnCallBack$FUNC_; }

    static final FunctionDescriptor TabbedTextOutA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor TabbedTextOutA$FUNC() { return TabbedTextOutA$FUNC_; }

    static final MethodHandle TabbedTextOutA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TabbedTextOutA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        TabbedTextOutA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TabbedTextOutA$MH() { return TabbedTextOutA$MH_; }

    static final FunctionDescriptor TabbedTextOutW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor TabbedTextOutW$FUNC() { return TabbedTextOutW$FUNC_; }

    static final MethodHandle TabbedTextOutW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "TabbedTextOutW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        TabbedTextOutW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle TabbedTextOutW$MH() { return TabbedTextOutW$MH_; }

    static final FunctionDescriptor GetTabbedTextExtentA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTabbedTextExtentA$FUNC() { return GetTabbedTextExtentA$FUNC_; }

    static final MethodHandle GetTabbedTextExtentA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTabbedTextExtentA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetTabbedTextExtentA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTabbedTextExtentA$MH() { return GetTabbedTextExtentA$MH_; }

    static final FunctionDescriptor GetTabbedTextExtentW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTabbedTextExtentW$FUNC() { return GetTabbedTextExtentW$FUNC_; }

    static final MethodHandle GetTabbedTextExtentW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTabbedTextExtentW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetTabbedTextExtentW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTabbedTextExtentW$MH() { return GetTabbedTextExtentW$MH_; }

    static final FunctionDescriptor UpdateWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor UpdateWindow$FUNC() { return UpdateWindow$FUNC_; }

    static final MethodHandle UpdateWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UpdateWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UpdateWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UpdateWindow$MH() { return UpdateWindow$MH_; }

    static final FunctionDescriptor SetActiveWindow$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetActiveWindow$FUNC() { return SetActiveWindow$FUNC_; }

    static final MethodHandle SetActiveWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetActiveWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetActiveWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetActiveWindow$MH() { return SetActiveWindow$MH_; }

    static final FunctionDescriptor GetForegroundWindow$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor GetForegroundWindow$FUNC() { return GetForegroundWindow$FUNC_; }

    static final MethodHandle GetForegroundWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetForegroundWindow",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetForegroundWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetForegroundWindow$MH() { return GetForegroundWindow$MH_; }

    static final FunctionDescriptor PaintDesktop$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PaintDesktop$FUNC() { return PaintDesktop$FUNC_; }

    static final MethodHandle PaintDesktop$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PaintDesktop",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        PaintDesktop$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PaintDesktop$MH() { return PaintDesktop$MH_; }

    static final FunctionDescriptor SwitchToThisWindow$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SwitchToThisWindow$FUNC() { return SwitchToThisWindow$FUNC_; }

    static final MethodHandle SwitchToThisWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SwitchToThisWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        SwitchToThisWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SwitchToThisWindow$MH() { return SwitchToThisWindow$MH_; }

    static final FunctionDescriptor SetForegroundWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetForegroundWindow$FUNC() { return SetForegroundWindow$FUNC_; }

    static final MethodHandle SetForegroundWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetForegroundWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetForegroundWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetForegroundWindow$MH() { return SetForegroundWindow$MH_; }

    static final FunctionDescriptor AllowSetForegroundWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor AllowSetForegroundWindow$FUNC() { return AllowSetForegroundWindow$FUNC_; }

    static final MethodHandle AllowSetForegroundWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AllowSetForegroundWindow",
        "(I)I",
        AllowSetForegroundWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AllowSetForegroundWindow$MH() { return AllowSetForegroundWindow$MH_; }

    static final FunctionDescriptor LockSetForegroundWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor LockSetForegroundWindow$FUNC() { return LockSetForegroundWindow$FUNC_; }

    static final MethodHandle LockSetForegroundWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LockSetForegroundWindow",
        "(I)I",
        LockSetForegroundWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LockSetForegroundWindow$MH() { return LockSetForegroundWindow$MH_; }

    static final FunctionDescriptor WindowFromDC$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WindowFromDC$FUNC() { return WindowFromDC$FUNC_; }

    static final MethodHandle WindowFromDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WindowFromDC",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        WindowFromDC$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WindowFromDC$MH() { return WindowFromDC$MH_; }

    static final FunctionDescriptor GetDC$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDC$FUNC() { return GetDC$FUNC_; }

    static final MethodHandle GetDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDC",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetDC$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDC$MH() { return GetDC$MH_; }

    static final FunctionDescriptor GetDCEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDCEx$FUNC() { return GetDCEx$FUNC_; }

    static final MethodHandle GetDCEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDCEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetDCEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDCEx$MH() { return GetDCEx$MH_; }

    static final FunctionDescriptor GetWindowDC$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowDC$FUNC() { return GetWindowDC$FUNC_; }

    static final MethodHandle GetWindowDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowDC",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetWindowDC$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowDC$MH() { return GetWindowDC$MH_; }

    static final FunctionDescriptor ReleaseDC$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReleaseDC$FUNC() { return ReleaseDC$FUNC_; }

    static final MethodHandle ReleaseDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReleaseDC",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReleaseDC$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReleaseDC$MH() { return ReleaseDC$MH_; }

    static final FunctionDescriptor BeginPaint$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor BeginPaint$FUNC() { return BeginPaint$FUNC_; }

    static final MethodHandle BeginPaint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BeginPaint",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        BeginPaint$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BeginPaint$MH() { return BeginPaint$MH_; }

    static final FunctionDescriptor EndPaint$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EndPaint$FUNC() { return EndPaint$FUNC_; }

    static final MethodHandle EndPaint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EndPaint",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EndPaint$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EndPaint$MH() { return EndPaint$MH_; }

    static final FunctionDescriptor GetUpdateRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetUpdateRect$FUNC() { return GetUpdateRect$FUNC_; }

    static final MethodHandle GetUpdateRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUpdateRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetUpdateRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetUpdateRect$MH() { return GetUpdateRect$MH_; }

    static final FunctionDescriptor GetUpdateRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetUpdateRgn$FUNC() { return GetUpdateRgn$FUNC_; }

    static final MethodHandle GetUpdateRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetUpdateRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetUpdateRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetUpdateRgn$MH() { return GetUpdateRgn$MH_; }

    static final FunctionDescriptor SetWindowRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetWindowRgn$FUNC() { return SetWindowRgn$FUNC_; }

    static final MethodHandle SetWindowRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWindowRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetWindowRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetWindowRgn$MH() { return SetWindowRgn$MH_; }

    static final FunctionDescriptor GetWindowRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowRgn$FUNC() { return GetWindowRgn$FUNC_; }

    static final MethodHandle GetWindowRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowRgn$MH() { return GetWindowRgn$MH_; }

    static final FunctionDescriptor GetWindowRgnBox$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowRgnBox$FUNC() { return GetWindowRgnBox$FUNC_; }

    static final MethodHandle GetWindowRgnBox$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowRgnBox",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowRgnBox$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowRgnBox$MH() { return GetWindowRgnBox$MH_; }

    static final FunctionDescriptor ExcludeUpdateRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ExcludeUpdateRgn$FUNC() { return ExcludeUpdateRgn$FUNC_; }

    static final MethodHandle ExcludeUpdateRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExcludeUpdateRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ExcludeUpdateRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ExcludeUpdateRgn$MH() { return ExcludeUpdateRgn$MH_; }

    static final FunctionDescriptor InvalidateRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor InvalidateRect$FUNC() { return InvalidateRect$FUNC_; }

    static final MethodHandle InvalidateRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InvalidateRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        InvalidateRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InvalidateRect$MH() { return InvalidateRect$MH_; }

    static final FunctionDescriptor ValidateRect$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ValidateRect$FUNC() { return ValidateRect$FUNC_; }

    static final MethodHandle ValidateRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ValidateRect",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ValidateRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ValidateRect$MH() { return ValidateRect$MH_; }

    static final FunctionDescriptor InvalidateRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor InvalidateRgn$FUNC() { return InvalidateRgn$FUNC_; }

    static final MethodHandle InvalidateRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InvalidateRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        InvalidateRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InvalidateRgn$MH() { return InvalidateRgn$MH_; }

    static final FunctionDescriptor ValidateRgn$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ValidateRgn$FUNC() { return ValidateRgn$FUNC_; }

    static final MethodHandle ValidateRgn$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ValidateRgn",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ValidateRgn$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ValidateRgn$MH() { return ValidateRgn$MH_; }

    static final FunctionDescriptor RedrawWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor RedrawWindow$FUNC() { return RedrawWindow$FUNC_; }

    static final MethodHandle RedrawWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RedrawWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        RedrawWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RedrawWindow$MH() { return RedrawWindow$MH_; }

    static final FunctionDescriptor LockWindowUpdate$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor LockWindowUpdate$FUNC() { return LockWindowUpdate$FUNC_; }

    static final MethodHandle LockWindowUpdate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LockWindowUpdate",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        LockWindowUpdate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LockWindowUpdate$MH() { return LockWindowUpdate$MH_; }

    static final FunctionDescriptor ScrollWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ScrollWindow$FUNC() { return ScrollWindow$FUNC_; }

    static final MethodHandle ScrollWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ScrollWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ScrollWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ScrollWindow$MH() { return ScrollWindow$MH_; }

    static final FunctionDescriptor ScrollDC$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ScrollDC$FUNC() { return ScrollDC$FUNC_; }

    static final MethodHandle ScrollDC$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ScrollDC",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ScrollDC$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ScrollDC$MH() { return ScrollDC$MH_; }

    static final FunctionDescriptor ScrollWindowEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor ScrollWindowEx$FUNC() { return ScrollWindowEx$FUNC_; }

    static final MethodHandle ScrollWindowEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ScrollWindowEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ScrollWindowEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ScrollWindowEx$MH() { return ScrollWindowEx$MH_; }

    static final FunctionDescriptor SetScrollPos$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetScrollPos$FUNC() { return SetScrollPos$FUNC_; }

    static final MethodHandle SetScrollPos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetScrollPos",
        "(Ljdk/incubator/foreign/MemoryAddress;III)I",
        SetScrollPos$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetScrollPos$MH() { return SetScrollPos$MH_; }

    static final FunctionDescriptor GetScrollPos$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetScrollPos$FUNC() { return GetScrollPos$FUNC_; }

    static final MethodHandle GetScrollPos$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetScrollPos",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetScrollPos$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetScrollPos$MH() { return GetScrollPos$MH_; }

    static final FunctionDescriptor SetScrollRange$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetScrollRange$FUNC() { return SetScrollRange$FUNC_; }

    static final MethodHandle SetScrollRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetScrollRange",
        "(Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        SetScrollRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetScrollRange$MH() { return SetScrollRange$MH_; }

    static final FunctionDescriptor GetScrollRange$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetScrollRange$FUNC() { return GetScrollRange$FUNC_; }

    static final MethodHandle GetScrollRange$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetScrollRange",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetScrollRange$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetScrollRange$MH() { return GetScrollRange$MH_; }

    static final FunctionDescriptor ShowScrollBar$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor ShowScrollBar$FUNC() { return ShowScrollBar$FUNC_; }

    static final MethodHandle ShowScrollBar$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ShowScrollBar",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        ShowScrollBar$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ShowScrollBar$MH() { return ShowScrollBar$MH_; }

    static final FunctionDescriptor EnableScrollBar$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnableScrollBar$FUNC() { return EnableScrollBar$FUNC_; }

    static final MethodHandle EnableScrollBar$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnableScrollBar",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        EnableScrollBar$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnableScrollBar$MH() { return EnableScrollBar$MH_; }

    static final FunctionDescriptor SetPropA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetPropA$FUNC() { return SetPropA$FUNC_; }

    static final MethodHandle SetPropA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPropA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetPropA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetPropA$MH() { return SetPropA$MH_; }

    static final FunctionDescriptor SetPropW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetPropW$FUNC() { return SetPropW$FUNC_; }

    static final MethodHandle SetPropW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetPropW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetPropW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetPropW$MH() { return SetPropW$MH_; }

    static final FunctionDescriptor GetPropA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPropA$FUNC() { return GetPropA$FUNC_; }

    static final MethodHandle GetPropA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPropA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetPropA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPropA$MH() { return GetPropA$MH_; }

    static final FunctionDescriptor GetPropW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetPropW$FUNC() { return GetPropW$FUNC_; }

    static final MethodHandle GetPropW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetPropW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetPropW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetPropW$MH() { return GetPropW$MH_; }

    static final FunctionDescriptor RemovePropA$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RemovePropA$FUNC() { return RemovePropA$FUNC_; }

    static final MethodHandle RemovePropA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemovePropA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RemovePropA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RemovePropA$MH() { return RemovePropA$MH_; }

    static final FunctionDescriptor RemovePropW$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RemovePropW$FUNC() { return RemovePropW$FUNC_; }

    static final MethodHandle RemovePropW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RemovePropW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RemovePropW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RemovePropW$MH() { return RemovePropW$MH_; }

    static final FunctionDescriptor EnumPropsExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumPropsExA$FUNC() { return EnumPropsExA$FUNC_; }

    static final MethodHandle EnumPropsExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumPropsExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumPropsExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumPropsExA$MH() { return EnumPropsExA$MH_; }

    static final FunctionDescriptor EnumPropsExA$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumPropsExA$lpEnumFunc$FUNC() { return EnumPropsExA$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumPropsExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumPropsExW$FUNC() { return EnumPropsExW$FUNC_; }

    static final MethodHandle EnumPropsExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumPropsExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumPropsExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumPropsExW$MH() { return EnumPropsExW$MH_; }

    static final FunctionDescriptor EnumPropsExW$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumPropsExW$lpEnumFunc$FUNC() { return EnumPropsExW$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumPropsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumPropsA$FUNC() { return EnumPropsA$FUNC_; }

    static final MethodHandle EnumPropsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumPropsA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EnumPropsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumPropsA$MH() { return EnumPropsA$MH_; }

    static final FunctionDescriptor EnumPropsA$lpEnumFunc$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumPropsA$lpEnumFunc$FUNC() { return EnumPropsA$lpEnumFunc$FUNC_; }

    static final FunctionDescriptor EnumPropsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumPropsW$FUNC() { return EnumPropsW$FUNC_; }

    static final MethodHandle EnumPropsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumPropsW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        EnumPropsW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumPropsW$MH() { return EnumPropsW$MH_; }

}

