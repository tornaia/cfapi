// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$101 extends cfapi_h$constants$100 {

    /* package-private */ cfapi_h$constants$101() {}
    static final int REG_DWORD_LITTLE_ENDIAN() { return (int)4L; }

    static final int REG_DWORD_BIG_ENDIAN() { return (int)5L; }

    static final int REG_LINK() { return (int)6L; }

    static final int REG_MULTI_SZ() { return (int)7L; }

    static final int REG_RESOURCE_LIST() { return (int)8L; }

    static final int REG_FULL_RESOURCE_DESCRIPTOR() { return (int)9L; }

    static final int REG_RESOURCE_REQUIREMENTS_LIST() { return (int)10L; }

    static final int REG_QWORD() { return (int)11L; }

    static final int REG_QWORD_LITTLE_ENDIAN() { return (int)11L; }

    static final int SERVICE_DRIVER() { return (int)11L; }

    static final int SERVICE_WIN32() { return (int)48L; }

    static final int SERVICE_USER_SHARE_PROCESS() { return (int)96L; }

    static final int SERVICE_USER_OWN_PROCESS() { return (int)80L; }

    static final int SERVICE_TYPE_ALL() { return (int)1023L; }

    static final int CM_SERVICE_VALID_PROMOTION_MASK() { return (int)511L; }

    static final int TAPE_ERASE_SHORT() { return (int)0L; }

    static final int TAPE_ERASE_LONG() { return (int)1L; }

    static final int TAPE_LOAD() { return (int)0L; }

    static final int TAPE_UNLOAD() { return (int)1L; }

    static final int TAPE_TENSION() { return (int)2L; }

    static final int TAPE_LOCK() { return (int)3L; }

    static final int TAPE_UNLOCK() { return (int)4L; }

    static final int TAPE_FORMAT() { return (int)5L; }

    static final int TAPE_SETMARKS() { return (int)0L; }

    static final int TAPE_FILEMARKS() { return (int)1L; }

    static final int TAPE_SHORT_FILEMARKS() { return (int)2L; }

    static final int TAPE_LONG_FILEMARKS() { return (int)3L; }

    static final int TAPE_ABSOLUTE_POSITION() { return (int)0L; }

    static final int TAPE_LOGICAL_POSITION() { return (int)1L; }

    static final int TAPE_PSEUDO_LOGICAL_POSITION() { return (int)2L; }

    static final int TAPE_REWIND() { return (int)0L; }

    static final int TAPE_ABSOLUTE_BLOCK() { return (int)1L; }

    static final int TAPE_LOGICAL_BLOCK() { return (int)2L; }

    static final int TAPE_PSEUDO_LOGICAL_BLOCK() { return (int)3L; }

    static final int TAPE_SPACE_END_OF_DATA() { return (int)4L; }

    static final int TAPE_SPACE_RELATIVE_BLOCKS() { return (int)5L; }

    static final int TAPE_SPACE_FILEMARKS() { return (int)6L; }

    static final int TAPE_SPACE_SEQUENTIAL_FMKS() { return (int)7L; }

    static final int TAPE_SPACE_SETMARKS() { return (int)8L; }

    static final int TAPE_SPACE_SEQUENTIAL_SMKS() { return (int)9L; }

    static final int TAPE_DRIVE_RESERVED_BIT() { return (int)2147483648L; }

    static final int TAPE_DRIVE_LOAD_UNLOAD() { return (int)2147483649L; }

    static final int TAPE_DRIVE_TENSION() { return (int)2147483650L; }

    static final int TAPE_DRIVE_LOCK_UNLOCK() { return (int)2147483652L; }

    static final int TAPE_DRIVE_REWIND_IMMEDIATE() { return (int)2147483656L; }

    static final int TAPE_DRIVE_SET_BLOCK_SIZE() { return (int)2147483664L; }

    static final int TAPE_DRIVE_LOAD_UNLD_IMMED() { return (int)2147483680L; }

    static final int TAPE_DRIVE_TENSION_IMMED() { return (int)2147483712L; }

    static final int TAPE_DRIVE_LOCK_UNLK_IMMED() { return (int)2147483776L; }

    static final int TAPE_DRIVE_SET_ECC() { return (int)2147483904L; }

    static final int TAPE_DRIVE_SET_COMPRESSION() { return (int)2147484160L; }

    static final int TAPE_DRIVE_SET_PADDING() { return (int)2147484672L; }

    static final int TAPE_DRIVE_SET_REPORT_SMKS() { return (int)2147485696L; }

    static final int TAPE_DRIVE_ABSOLUTE_BLK() { return (int)2147487744L; }

    static final int TAPE_DRIVE_ABS_BLK_IMMED() { return (int)2147491840L; }

    static final int TAPE_DRIVE_LOGICAL_BLK() { return (int)2147500032L; }

    static final int TAPE_DRIVE_LOG_BLK_IMMED() { return (int)2147516416L; }

    static final int TAPE_DRIVE_END_OF_DATA() { return (int)2147549184L; }

    static final int TAPE_DRIVE_RELATIVE_BLKS() { return (int)2147614720L; }

    static final int TAPE_DRIVE_FILEMARKS() { return (int)2147745792L; }

    static final int TAPE_DRIVE_SEQUENTIAL_FMKS() { return (int)2148007936L; }

    static final int TAPE_DRIVE_SETMARKS() { return (int)2148532224L; }

    static final int TAPE_DRIVE_SEQUENTIAL_SMKS() { return (int)2149580800L; }

    static final int TAPE_DRIVE_REVERSE_POSITION() { return (int)2151677952L; }

    static final int TAPE_DRIVE_SPACE_IMMEDIATE() { return (int)2155872256L; }

    static final int TAPE_DRIVE_WRITE_SETMARKS() { return (int)2164260864L; }

    static final int TAPE_DRIVE_WRITE_FILEMARKS() { return (int)2181038080L; }

    static final int TAPE_DRIVE_WRITE_SHORT_FMKS() { return (int)2214592512L; }

    static final int TAPE_DRIVE_WRITE_LONG_FMKS() { return (int)2281701376L; }

    static final int TAPE_DRIVE_WRITE_MARK_IMMED() { return (int)2415919104L; }

    static final int TAPE_DRIVE_FORMAT() { return (int)2684354560L; }

    static final int TAPE_DRIVE_FORMAT_IMMEDIATE() { return (int)3221225472L; }

    static final int TAPE_DRIVE_HIGH_FEATURES() { return (int)2147483648L; }

    static final int TAPE_FIXED_PARTITIONS() { return (int)0L; }

    static final int TAPE_SELECT_PARTITIONS() { return (int)1L; }

    static final int TAPE_INITIATOR_PARTITIONS() { return (int)2L; }

    static final int TAPE_QUERY_DRIVE_PARAMETERS() { return (int)0L; }

    static final int TAPE_QUERY_MEDIA_CAPACITY() { return (int)1L; }

    static final int TAPE_CHECK_FOR_DRIVE_PROBLEM() { return (int)2L; }

    static final int TAPE_QUERY_IO_ERROR_DATA() { return (int)3L; }

    static final int TAPE_QUERY_DEVICE_ERROR_DATA() { return (int)4L; }

    static final MemorySegment TRANSACTIONMANAGER_OBJECT_PATH$SEGMENT_CONSTANT_ = CLinker.toCString("\\");
    static final jdk.incubator.foreign.MemorySegment TRANSACTIONMANAGER_OBJECT_PATH() { return TRANSACTIONMANAGER_OBJECT_PATH$SEGMENT_CONSTANT_; }

    static final MemorySegment TRANSACTION_OBJECT_PATH$SEGMENT_CONSTANT_ = CLinker.toCString("\\");
    static final jdk.incubator.foreign.MemorySegment TRANSACTION_OBJECT_PATH() { return TRANSACTION_OBJECT_PATH$SEGMENT_CONSTANT_; }

    static final MemorySegment ENLISTMENT_OBJECT_PATH$SEGMENT_CONSTANT_ = CLinker.toCString("\\");
    static final jdk.incubator.foreign.MemorySegment ENLISTMENT_OBJECT_PATH() { return ENLISTMENT_OBJECT_PATH$SEGMENT_CONSTANT_; }

    static final MemorySegment RESOURCE_MANAGER_OBJECT_PATH$SEGMENT_CONSTANT_ = CLinker.toCString("\\");
    static final jdk.incubator.foreign.MemorySegment RESOURCE_MANAGER_OBJECT_PATH() { return RESOURCE_MANAGER_OBJECT_PATH$SEGMENT_CONSTANT_; }

    static final long TRANSACTIONMANAGER_OBJECT_NAME_LENGTH_IN_BYTES() { return 118L; }

    static final long TRANSACTION_OBJECT_NAME_LENGTH_IN_BYTES() { return 104L; }

    static final long ENLISTMENT_OBJECT_NAME_LENGTH_IN_BYTES() { return 102L; }

    static final long RESOURCE_MANAGER_OBJECT_NAME_LENGTH_IN_BYTES() { return 112L; }

    static final int TRANSACTIONMANAGER_QUERY_INFORMATION() { return (int)1L; }

    static final int TRANSACTIONMANAGER_SET_INFORMATION() { return (int)2L; }

    static final int TRANSACTIONMANAGER_RECOVER() { return (int)4L; }

    static final int TRANSACTIONMANAGER_RENAME() { return (int)8L; }

    static final int TRANSACTIONMANAGER_CREATE_RM() { return (int)16L; }

    static final int TRANSACTIONMANAGER_BIND_TRANSACTION() { return (int)32L; }

    static final int TRANSACTIONMANAGER_GENERIC_READ() { return (int)131073L; }

    static final int TRANSACTIONMANAGER_GENERIC_WRITE() { return (int)131102L; }

    static final int TRANSACTIONMANAGER_GENERIC_EXECUTE() { return (int)131072L; }

    static final int TRANSACTIONMANAGER_ALL_ACCESS() { return (int)983103L; }

    static final int TRANSACTION_QUERY_INFORMATION() { return (int)1L; }

    static final int TRANSACTION_SET_INFORMATION() { return (int)2L; }

    static final int TRANSACTION_ENLIST() { return (int)4L; }

    static final int TRANSACTION_COMMIT() { return (int)8L; }

    static final int TRANSACTION_ROLLBACK() { return (int)16L; }

    static final int TRANSACTION_PROPAGATE() { return (int)32L; }

    static final int TRANSACTION_RIGHT_RESERVED1() { return (int)64L; }

    static final int TRANSACTION_GENERIC_READ() { return (int)1179649L; }

    static final int TRANSACTION_GENERIC_WRITE() { return (int)1179710L; }

    static final int TRANSACTION_GENERIC_EXECUTE() { return (int)1179672L; }

    static final int TRANSACTION_ALL_ACCESS() { return (int)2031679L; }

    static final int TRANSACTION_RESOURCE_MANAGER_RIGHTS() { return (int)1179703L; }

    static final int RESOURCEMANAGER_QUERY_INFORMATION() { return (int)1L; }

    static final int RESOURCEMANAGER_SET_INFORMATION() { return (int)2L; }

    static final int RESOURCEMANAGER_RECOVER() { return (int)4L; }

    static final int RESOURCEMANAGER_ENLIST() { return (int)8L; }

    static final int RESOURCEMANAGER_GET_NOTIFICATION() { return (int)16L; }

    static final int RESOURCEMANAGER_REGISTER_PROTOCOL() { return (int)32L; }

    static final int RESOURCEMANAGER_COMPLETE_PROPAGATION() { return (int)64L; }

    static final int RESOURCEMANAGER_GENERIC_READ() { return (int)1179649L; }

    static final int RESOURCEMANAGER_GENERIC_WRITE() { return (int)1179774L; }

    static final int RESOURCEMANAGER_GENERIC_EXECUTE() { return (int)1179740L; }

    static final int RESOURCEMANAGER_ALL_ACCESS() { return (int)2031743L; }

    static final int ENLISTMENT_QUERY_INFORMATION() { return (int)1L; }

    static final int ENLISTMENT_SET_INFORMATION() { return (int)2L; }

    static final int ENLISTMENT_RECOVER() { return (int)4L; }

    static final int ENLISTMENT_SUBORDINATE_RIGHTS() { return (int)8L; }

    static final int ENLISTMENT_SUPERIOR_RIGHTS() { return (int)16L; }

    static final int ENLISTMENT_GENERIC_READ() { return (int)131073L; }

    static final int ENLISTMENT_GENERIC_WRITE() { return (int)131102L; }

    static final int ENLISTMENT_GENERIC_EXECUTE() { return (int)131100L; }

    static final int ENLISTMENT_ALL_ACCESS() { return (int)983071L; }

    static final int ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION() { return (int)1L; }

    static final int ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION() { return (int)2L; }

    static final int ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION() { return (int)3L; }

    static final int ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION() { return (int)4L; }

    static final int ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION() { return (int)5L; }

    static final int ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION() { return (int)6L; }

    static final int ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION() { return (int)7L; }

    static final int ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE() { return (int)8L; }

    static final int ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES() { return (int)9L; }

    static final int ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS() { return (int)10L; }

    static final int ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO() { return (int)11L; }

    static final int ACTIVATION_CONTEXT_SECTION_WINRT_ACTIVATABLE_CLASSES() { return (int)12L; }

    static final int HFILE_ERROR() { return (int)-1L; }

    static final int DM_IN_BUFFER() { return (int)8L; }

    static final int DM_IN_PROMPT() { return (int)4L; }

    static final int DM_OUT_BUFFER() { return (int)2L; }

    static final int DM_OUT_DEFAULT() { return (int)1L; }

    static final MemoryAddress DPI_AWARENESS_CONTEXT_UNAWARE$ADDR_CONSTANT_ = MemoryAddress.ofLong(-1L);
    static final jdk.incubator.foreign.MemoryAddress DPI_AWARENESS_CONTEXT_UNAWARE() { return DPI_AWARENESS_CONTEXT_UNAWARE$ADDR_CONSTANT_; }

    static final MemoryAddress DPI_AWARENESS_CONTEXT_SYSTEM_AWARE$ADDR_CONSTANT_ = MemoryAddress.ofLong(-2L);
    static final jdk.incubator.foreign.MemoryAddress DPI_AWARENESS_CONTEXT_SYSTEM_AWARE() { return DPI_AWARENESS_CONTEXT_SYSTEM_AWARE$ADDR_CONSTANT_; }

    static final MemoryAddress DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE$ADDR_CONSTANT_ = MemoryAddress.ofLong(-3L);
    static final jdk.incubator.foreign.MemoryAddress DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE() { return DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE$ADDR_CONSTANT_; }

    static final MemoryAddress DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2$ADDR_CONSTANT_ = MemoryAddress.ofLong(-4L);
    static final jdk.incubator.foreign.MemoryAddress DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2() { return DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2$ADDR_CONSTANT_; }

    static final MemoryAddress DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED$ADDR_CONSTANT_ = MemoryAddress.ofLong(-5L);
    static final jdk.incubator.foreign.MemoryAddress DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED() { return DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED$ADDR_CONSTANT_; }

    static final int STILL_ACTIVE() { return (int)259L; }

    static final int EXCEPTION_ACCESS_VIOLATION() { return (int)3221225477L; }

    static final int EXCEPTION_DATATYPE_MISALIGNMENT() { return (int)2147483650L; }

    static final int EXCEPTION_BREAKPOINT() { return (int)2147483651L; }

    static final int EXCEPTION_SINGLE_STEP() { return (int)2147483652L; }

    static final int EXCEPTION_ARRAY_BOUNDS_EXCEEDED() { return (int)3221225612L; }

    static final int EXCEPTION_FLT_DENORMAL_OPERAND() { return (int)3221225613L; }

    static final int EXCEPTION_FLT_DIVIDE_BY_ZERO() { return (int)3221225614L; }

    static final int EXCEPTION_FLT_INEXACT_RESULT() { return (int)3221225615L; }

    static final int EXCEPTION_FLT_INVALID_OPERATION() { return (int)3221225616L; }

    static final int EXCEPTION_FLT_OVERFLOW() { return (int)3221225617L; }

    static final int EXCEPTION_FLT_STACK_CHECK() { return (int)3221225618L; }

    static final int EXCEPTION_FLT_UNDERFLOW() { return (int)3221225619L; }

    static final int EXCEPTION_INT_DIVIDE_BY_ZERO() { return (int)3221225620L; }

    static final int EXCEPTION_INT_OVERFLOW() { return (int)3221225621L; }

    static final int EXCEPTION_PRIV_INSTRUCTION() { return (int)3221225622L; }

    static final int EXCEPTION_IN_PAGE_ERROR() { return (int)3221225478L; }

    static final int EXCEPTION_ILLEGAL_INSTRUCTION() { return (int)3221225501L; }

    static final int EXCEPTION_NONCONTINUABLE_EXCEPTION() { return (int)3221225509L; }

    static final int EXCEPTION_STACK_OVERFLOW() { return (int)3221225725L; }

    static final int EXCEPTION_INVALID_DISPOSITION() { return (int)3221225510L; }

    static final int EXCEPTION_GUARD_PAGE() { return (int)2147483649L; }

    static final int EXCEPTION_INVALID_HANDLE() { return (int)3221225480L; }

    static final int CONTROL_C_EXIT() { return (int)3221225786L; }

    static final int LHND() { return (int)66L; }

    static final int LPTR() { return (int)64L; }

    static final int NONZEROLHND() { return (int)2L; }

    static final int NONZEROLPTR() { return (int)0L; }

    static final int NUMA_NO_PREFERRED_NODE() { return (int)4294967295L; }

    static final int INVALID_FILE_SIZE() { return (int)4294967295L; }

    static final int INVALID_SET_FILE_POINTER() { return (int)4294967295L; }

    static final int INVALID_FILE_ATTRIBUTES() { return (int)4294967295L; }

    static final MemoryAddress INVALID_HANDLE_VALUE$ADDR_CONSTANT_ = MemoryAddress.ofLong(-1L);
    static final jdk.incubator.foreign.MemoryAddress INVALID_HANDLE_VALUE() { return INVALID_HANDLE_VALUE$ADDR_CONSTANT_; }

    static final int FLS_OUT_OF_INDEXES() { return (int)4294967295L; }

    static final int INIT_ONCE_CHECK_ONLY() { return (int)1L; }

    static final int INIT_ONCE_ASYNC() { return (int)2L; }

    static final int INIT_ONCE_INIT_FAILED() { return (int)4L; }

    static final int INIT_ONCE_CTX_RESERVED_BITS() { return (int)2L; }

    static final int CONDITION_VARIABLE_LOCKMODE_SHARED() { return (int)1L; }

    static final int MUTEX_MODIFY_STATE() { return (int)1L; }

    static final int MUTEX_ALL_ACCESS() { return (int)2031617L; }

    static final int TLS_OUT_OF_INDEXES() { return (int)4294967295L; }

    static final int PROCESS_AFFINITY_ENABLE_AUTO_UPDATE() { return (int)1L; }

    static final int THREAD_POWER_THROTTLING_VALID_FLAGS() { return (int)1L; }

    static final int PROCESS_POWER_THROTTLING_VALID_FLAGS() { return (int)1L; }

    static final int PROCESS_LEAP_SECOND_INFO_VALID_FLAGS() { return (int)1L; }

    static final int FILE_MAP_WRITE() { return (int)2L; }

    static final int FILE_MAP_READ() { return (int)4L; }

    static final int FILE_MAP_ALL_ACCESS() { return (int)983071L; }

    static final int FILE_MAP_EXECUTE() { return (int)32L; }

    static final int FILE_MAP_RESERVE() { return (int)2147483648L; }

    static final int FIND_RESOURCE_DIRECTORY_TYPES() { return (int)256L; }

    static final int FIND_RESOURCE_DIRECTORY_NAMES() { return (int)512L; }

    static final int FIND_RESOURCE_DIRECTORY_LANGUAGES() { return (int)1024L; }

    static final int RESOURCE_ENUM_LN() { return (int)1L; }

    static final int RESOURCE_ENUM_MUI() { return (int)2L; }

    static final int RESOURCE_ENUM_MUI_SYSTEM() { return (int)4L; }

    static final int RESOURCE_ENUM_VALIDATE() { return (int)8L; }

    static final int RESOURCE_ENUM_MODULE_EXACT() { return (int)16L; }

    static final int GET_MODULE_HANDLE_EX_FLAG_PIN() { return (int)1L; }

    static final int GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT() { return (int)2L; }

    static final int GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS() { return (int)4L; }

    static final int WAIT_FAILED() { return (int)4294967295L; }

    static final int WAIT_OBJECT_0() { return (int)0L; }

    static final int WAIT_ABANDONED() { return (int)128L; }

    static final int WAIT_ABANDONED_0() { return (int)128L; }

    static final int WAIT_IO_COMPLETION() { return (int)192L; }

    static final int FILE_FLAG_WRITE_THROUGH() { return (int)2147483648L; }

    static final int SECURITY_ANONYMOUS() { return (int)0L; }

    static final int SECURITY_IDENTIFICATION() { return (int)65536L; }

    static final int SECURITY_IMPERSONATION() { return (int)131072L; }

    static final int SECURITY_DELEGATION() { return (int)196608L; }

    static final int SP_SERIALCOMM() { return (int)1L; }

    static final int PST_UNSPECIFIED() { return (int)0L; }

    static final int PST_RS232() { return (int)1L; }

    static final int PST_PARALLELPORT() { return (int)2L; }

    static final int PST_RS422() { return (int)3L; }

    static final int PST_RS423() { return (int)4L; }

    static final int PST_RS449() { return (int)5L; }

    static final int PST_MODEM() { return (int)6L; }

    static final int PST_FAX() { return (int)33L; }

    static final int PST_SCANNER() { return (int)34L; }

    static final int PST_NETWORK_BRIDGE() { return (int)256L; }

    static final int PST_LAT() { return (int)257L; }

    static final int PST_TCPIP_TELNET() { return (int)258L; }

    static final int PST_X25() { return (int)259L; }

    static final int PCF_DTRDSR() { return (int)1L; }

    static final int PCF_RTSCTS() { return (int)2L; }

    static final int PCF_RLSD() { return (int)4L; }

    static final int PCF_PARITY_CHECK() { return (int)8L; }

    static final int PCF_XONXOFF() { return (int)16L; }

    static final int PCF_SETXCHAR() { return (int)32L; }

    static final int PCF_TOTALTIMEOUTS() { return (int)64L; }

    static final int PCF_INTTIMEOUTS() { return (int)128L; }

    static final int PCF_SPECIALCHARS() { return (int)256L; }

    static final int PCF_16BITMODE() { return (int)512L; }

    static final int SP_PARITY() { return (int)1L; }

    static final int SP_BAUD() { return (int)2L; }

    static final int SP_DATABITS() { return (int)4L; }

    static final int SP_STOPBITS() { return (int)8L; }

    static final int SP_HANDSHAKING() { return (int)16L; }

    static final int SP_PARITY_CHECK() { return (int)32L; }

    static final int SP_RLSD() { return (int)64L; }

    static final int BAUD_075() { return (int)1L; }

    static final int BAUD_110() { return (int)2L; }

    static final int BAUD_134_5() { return (int)4L; }

    static final int BAUD_150() { return (int)8L; }

    static final int BAUD_300() { return (int)16L; }

    static final int BAUD_600() { return (int)32L; }

    static final int BAUD_1200() { return (int)64L; }

    static final int BAUD_1800() { return (int)128L; }

    static final int BAUD_2400() { return (int)256L; }

    static final int BAUD_4800() { return (int)512L; }

    static final int BAUD_7200() { return (int)1024L; }

    static final int BAUD_9600() { return (int)2048L; }

    static final int BAUD_14400() { return (int)4096L; }

    static final int BAUD_19200() { return (int)8192L; }

    static final int BAUD_38400() { return (int)16384L; }

    static final int BAUD_56K() { return (int)32768L; }

    static final int BAUD_128K() { return (int)65536L; }

    static final int BAUD_115200() { return (int)131072L; }

    static final int BAUD_57600() { return (int)262144L; }

    static final int BAUD_USER() { return (int)268435456L; }

    static final short DATABITS_5() { return (short)1L; }

    static final short DATABITS_6() { return (short)2L; }

    static final short DATABITS_7() { return (short)4L; }

    static final short DATABITS_8() { return (short)8L; }

    static final short DATABITS_16() { return (short)16L; }

    static final short DATABITS_16X() { return (short)32L; }

    static final short STOPBITS_10() { return (short)1L; }

    static final short STOPBITS_15() { return (short)2L; }

    static final short STOPBITS_20() { return (short)4L; }

    static final short PARITY_NONE() { return (short)256L; }

    static final short PARITY_ODD() { return (short)512L; }

    static final short PARITY_EVEN() { return (short)1024L; }

    static final short PARITY_MARK() { return (short)2048L; }

    static final short PARITY_SPACE() { return (short)4096L; }

    static final int COMMPROP_INITIALIZED() { return (int)3879531822L; }

    static final int GMEM_LOWER() { return (int)4096L; }

    static final int GHND() { return (int)66L; }

    static final int GPTR() { return (int)64L; }

    static final int CREATE_IGNORE_SYSTEM_DEFAULT() { return (int)2147483648L; }

    static final int THREAD_PRIORITY_LOWEST() { return (int)-2L; }

    static final int THREAD_PRIORITY_BELOW_NORMAL() { return (int)-1L; }

    static final int THREAD_PRIORITY_HIGHEST() { return (int)2L; }

    static final int THREAD_PRIORITY_ABOVE_NORMAL() { return (int)1L; }

    static final int THREAD_PRIORITY_ERROR_RETURN() { return (int)2147483647L; }

    static final int THREAD_PRIORITY_TIME_CRITICAL() { return (int)15L; }

    static final int THREAD_PRIORITY_IDLE() { return (int)-15L; }

    static final int STD_INPUT_HANDLE() { return (int)4294967286L; }

    static final int STD_OUTPUT_HANDLE() { return (int)4294967285L; }

    static final int STD_ERROR_HANDLE() { return (int)4294967284L; }

    static final int INFINITE() { return (int)4294967295L; }

    static final int IE_BADID() { return (int)-1L; }

    static final int IE_OPEN() { return (int)-2L; }

    static final int IE_NOPEN() { return (int)-3L; }

    static final int IE_MEMORY() { return (int)-4L; }

    static final int IE_DEFAULT() { return (int)-5L; }

    static final int IE_HARDWARE() { return (int)-10L; }

    static final int IE_BYTESIZE() { return (int)-11L; }

    static final int IE_BAUDRATE() { return (int)-12L; }

    static final int MS_CTS_ON() { return (int)16L; }

    static final int MS_DSR_ON() { return (int)32L; }

    static final int MS_RING_ON() { return (int)64L; }

    static final int MS_RLSD_ON() { return (int)128L; }

    static final int S_SERDVNA() { return (int)-1L; }

    static final int S_SEROFM() { return (int)-2L; }

    static final int S_SERMACT() { return (int)-3L; }

    static final int S_SERQFUL() { return (int)-4L; }

    static final int S_SERBDNT() { return (int)-5L; }

    static final int S_SERDLN() { return (int)-6L; }

    static final int S_SERDCC() { return (int)-7L; }

    static final int S_SERDTP() { return (int)-8L; }

    static final int S_SERDVL() { return (int)-9L; }

    static final int S_SERDMD() { return (int)-10L; }

    static final int S_SERDSH() { return (int)-11L; }

    static final int S_SERDPT() { return (int)-12L; }

    static final int S_SERDFQ() { return (int)-13L; }

    static final int S_SERDDR() { return (int)-14L; }

    static final int S_SERDSR() { return (int)-15L; }

    static final int S_SERDST() { return (int)-16L; }

    static final int NMPWAIT_WAIT_FOREVER() { return (int)4294967295L; }

    static final int FS_CASE_IS_PRESERVED() { return (int)2L; }

    static final int FS_CASE_SENSITIVE() { return (int)1L; }

    static final int FS_UNICODE_STORED_ON_DISK() { return (int)4L; }

    static final int FS_PERSISTENT_ACLS() { return (int)8L; }

    static final int FS_VOL_IS_COMPRESSED() { return (int)32768L; }

    static final int FS_FILE_COMPRESSION() { return (int)16L; }

    static final int FS_FILE_ENCRYPTION() { return (int)131072L; }

    static final short INVALID_ATOM() { return (short)0L; }

    static final int SCS_THIS_PLATFORM_BINARY() { return (int)6L; }

    static final int UMS_VERSION() { return (int)256L; }

    static final int CRITICAL_SECTION_NO_DEBUG_INFO() { return (int)16777216L; }

    static final int EFS_USE_RECOVERY_KEYS() { return (int)1L; }

    static final int CREATE_FOR_IMPORT() { return (int)1L; }

    static final int CREATE_FOR_DIR() { return (int)2L; }

    static final int OVERWRITE_HIDDEN() { return (int)4L; }

    static final int EFSRPC_SECURE_ONLY() { return (int)8L; }

    static final int EFS_DROP_ALTERNATE_STREAMS() { return (int)16L; }

    static final int PROTECTION_LEVEL_SAME() { return (int)4294967295L; }

    static final int PROTECTION_LEVEL_NONE() { return (int)4294967294L; }

    static final int PROC_THREAD_ATTRIBUTE_PARENT_PROCESS() { return (int)131072L; }

    static final int PROC_THREAD_ATTRIBUTE_HANDLE_LIST() { return (int)131074L; }

    static final int PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY() { return (int)196611L; }

    static final int PROC_THREAD_ATTRIBUTE_PREFERRED_NODE() { return (int)131076L; }

    static final int PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR() { return (int)196613L; }

    static final int PROC_THREAD_ATTRIBUTE_UMS_THREAD() { return (int)196614L; }

    static final int PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY() { return (int)131079L; }

    static final int PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES() { return (int)131081L; }

    static final int PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL() { return (int)131083L; }

    static final int PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE() { return (int)131094L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK() { return (int)768L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER() { return (int)0L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON() { return (int)256L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF() { return (int)512L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS() { return (int)768L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK() { return (int)12288L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER() { return (int)0L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON() { return (int)4096L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF() { return (int)8192L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED() { return (int)12288L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK() { return (int)196608L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER() { return (int)0L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON() { return (int)65536L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF() { return (int)131072L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED() { return (int)196608L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK() { return (int)3145728L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER() { return (int)0L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON() { return (int)1048576L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF() { return (int)2097152L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED() { return (int)3145728L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK() { return (int)50331648L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER() { return (int)0L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON() { return (int)16777216L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF() { return (int)33554432L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED() { return (int)50331648L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK() { return (int)805306368L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER() { return (int)0L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON() { return (int)268435456L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF() { return (int)536870912L; }

    static final int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED() { return (int)805306368L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_MASK() { return 12884901888L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON() { return 4294967296L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_OFF() { return 8589934592L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_RESERVED() { return 12884901888L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_MASK() { return 206158430208L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON() { return 68719476736L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_OFF() { return 137438953472L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON_ALLOW_OPT_OUT() { return 206158430208L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_MASK() { return 3298534883328L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_ON() { return 1099511627776L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_OFF() { return 2199023255552L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_EXPORT_SUPPRESSION() { return 3298534883328L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_MASK() { return 52776558133248L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON() { return 17592186044416L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_OFF() { return 35184372088832L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE() { return 52776558133248L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_MASK() { return 844424930131968L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_ON() { return 281474976710656L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_OFF() { return 562949953421312L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_AUDIT_NONSYSTEM_FONTS() { return 844424930131968L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_MASK() { return 13510798882111488L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_ON() { return 4503599627370496L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_OFF() { return 9007199254740992L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_RESERVED() { return 13510798882111488L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_MASK() { return 216172782113783808L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_ON() { return 72057594037927936L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_OFF() { return 144115188075855872L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_RESERVED() { return 216172782113783808L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_MASK() { return 3458764513820540928L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON() { return 1152921504606846976L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_OFF() { return 2305843009213693952L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_RESERVED() { return 3458764513820540928L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_MASK() { return 48L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_ON() { return 16L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_OFF() { return 32L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_AUDIT() { return 48L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_MASK() { return 768L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_ON() { return 256L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_OFF() { return 512L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_RESERVED() { return 768L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_MASK() { return 12288L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_ON() { return 4096L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_OFF() { return 8192L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_NOINHERIT() { return 12288L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_MASK() { return 196608L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_ON() { return 65536L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_OFF() { return 131072L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_RESERVED() { return 196608L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_MASK() { return 3145728L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_ON() { return 1048576L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_OFF() { return 2097152L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_RESERVED() { return 3145728L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_MASK() { return 50331648L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_ON() { return 16777216L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_OFF() { return 33554432L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_RESERVED() { return 50331648L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_MASK() { return 805306368L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_DEFER() { return 0L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON() { return 268435456L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF() { return 536870912L; }

    static final long PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_RESERVED() { return 805306368L; }

    static final int PROC_THREAD_ATTRIBUTE_JOB_LIST() { return (int)131085L; }

    static final int PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY() { return (int)131086L; }

    static final int PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY() { return (int)131087L; }

    static final int PROC_THREAD_ATTRIBUTE_WIN32K_FILTER() { return (int)131088L; }

    static final int PROC_THREAD_ATTRIBUTE_DESKTOP_APP_POLICY() { return (int)131090L; }

    static final MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A$SEGMENT_CONSTANT_ = CLinker.toCString("GetSystemWow64DirectoryA");
    static final jdk.incubator.foreign.MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A() { return GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A$SEGMENT_CONSTANT_; }

    static final MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W$SEGMENT_CONSTANT_ = CLinker.toCString("G");
    static final jdk.incubator.foreign.MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W() { return GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W$SEGMENT_CONSTANT_; }

    static final MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T$SEGMENT_CONSTANT_ = CLinker.toCString("GetSystemWow64DirectoryA");
    static final jdk.incubator.foreign.MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T() { return GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T$SEGMENT_CONSTANT_; }

    static final MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A$SEGMENT_CONSTANT_ = CLinker.toCString("GetSystemWow64DirectoryW");
    static final jdk.incubator.foreign.MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A() { return GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A$SEGMENT_CONSTANT_; }

    static final MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W$SEGMENT_CONSTANT_ = CLinker.toCString("G");
    static final jdk.incubator.foreign.MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W() { return GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W$SEGMENT_CONSTANT_; }

    static final MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T$SEGMENT_CONSTANT_ = CLinker.toCString("GetSystemWow64DirectoryW");
    static final jdk.incubator.foreign.MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T() { return GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T$SEGMENT_CONSTANT_; }

    static final MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A$SEGMENT_CONSTANT_ = CLinker.toCString("GetSystemWow64DirectoryA");
    static final jdk.incubator.foreign.MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A() { return GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A$SEGMENT_CONSTANT_; }

    static final MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W$SEGMENT_CONSTANT_ = CLinker.toCString("G");
    static final jdk.incubator.foreign.MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W() { return GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W$SEGMENT_CONSTANT_; }

    static final MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T$SEGMENT_CONSTANT_ = CLinker.toCString("GetSystemWow64DirectoryA");
    static final jdk.incubator.foreign.MemorySegment GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T() { return GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T$SEGMENT_CONSTANT_; }

    static final int BASE_SEARCH_PATH_INVALID_FLAGS() { return (int)-98306L; }

    static final int COPYFILE2_MESSAGE_COPY_OFFLOAD() { return (int)1L; }

    static final int LOGON_ZERO_PASSWORD_BUFFER() { return (int)2147483648L; }

    static final int DOCKINFO_UNDOCKED() { return (int)1L; }

    static final int DOCKINFO_DOCKED() { return (int)2L; }

    static final int DOCKINFO_USER_SUPPLIED() { return (int)4L; }

    static final int DOCKINFO_USER_UNDOCKED() { return (int)5L; }

    static final int DOCKINFO_USER_DOCKED() { return (int)6L; }

    static final int ERROR_SUCCESS() { return (int)0L; }

    static final int NO_ERROR() { return (int)0L; }

    static final int SEC_E_OK() { return (int)0L; }

    static final int ERROR_INVALID_FUNCTION() { return (int)1L; }

    static final int ERROR_FILE_NOT_FOUND() { return (int)2L; }

    static final int ERROR_PATH_NOT_FOUND() { return (int)3L; }

    static final int ERROR_TOO_MANY_OPEN_FILES() { return (int)4L; }

    static final int ERROR_ACCESS_DENIED() { return (int)5L; }

    static final int ERROR_INVALID_HANDLE() { return (int)6L; }

    static final int ERROR_ARENA_TRASHED() { return (int)7L; }

    static final int ERROR_NOT_ENOUGH_MEMORY() { return (int)8L; }

    static final int ERROR_INVALID_BLOCK() { return (int)9L; }

    static final int ERROR_BAD_ENVIRONMENT() { return (int)10L; }

    static final int ERROR_BAD_FORMAT() { return (int)11L; }

    static final int ERROR_INVALID_ACCESS() { return (int)12L; }

    static final int ERROR_INVALID_DATA() { return (int)13L; }

    static final int ERROR_OUTOFMEMORY() { return (int)14L; }

    static final int ERROR_INVALID_DRIVE() { return (int)15L; }

    static final int ERROR_CURRENT_DIRECTORY() { return (int)16L; }

    static final int ERROR_NOT_SAME_DEVICE() { return (int)17L; }

    static final int ERROR_NO_MORE_FILES() { return (int)18L; }

    static final int ERROR_WRITE_PROTECT() { return (int)19L; }

    static final int ERROR_BAD_UNIT() { return (int)20L; }

    static final int ERROR_NOT_READY() { return (int)21L; }

    static final int ERROR_BAD_COMMAND() { return (int)22L; }

    static final int ERROR_CRC() { return (int)23L; }

    static final int ERROR_BAD_LENGTH() { return (int)24L; }

    static final int ERROR_SEEK() { return (int)25L; }

    static final int ERROR_NOT_DOS_DISK() { return (int)26L; }

    static final int ERROR_SECTOR_NOT_FOUND() { return (int)27L; }

    static final int ERROR_OUT_OF_PAPER() { return (int)28L; }

    static final int ERROR_WRITE_FAULT() { return (int)29L; }

    static final int ERROR_READ_FAULT() { return (int)30L; }

    static final int ERROR_GEN_FAILURE() { return (int)31L; }

    static final int ERROR_SHARING_VIOLATION() { return (int)32L; }

    static final int ERROR_LOCK_VIOLATION() { return (int)33L; }

    static final int ERROR_WRONG_DISK() { return (int)34L; }

    static final int ERROR_SHARING_BUFFER_EXCEEDED() { return (int)36L; }

    static final int ERROR_HANDLE_EOF() { return (int)38L; }

    static final int ERROR_HANDLE_DISK_FULL() { return (int)39L; }

    static final int ERROR_NOT_SUPPORTED() { return (int)50L; }

    static final int ERROR_REM_NOT_LIST() { return (int)51L; }

    static final int ERROR_DUP_NAME() { return (int)52L; }

    static final int ERROR_BAD_NETPATH() { return (int)53L; }

    static final int ERROR_NETWORK_BUSY() { return (int)54L; }

    static final int ERROR_DEV_NOT_EXIST() { return (int)55L; }

    static final int ERROR_TOO_MANY_CMDS() { return (int)56L; }

    static final int ERROR_ADAP_HDW_ERR() { return (int)57L; }

    static final int ERROR_BAD_NET_RESP() { return (int)58L; }

    static final int ERROR_UNEXP_NET_ERR() { return (int)59L; }

    static final int ERROR_BAD_REM_ADAP() { return (int)60L; }

    static final int ERROR_PRINTQ_FULL() { return (int)61L; }

    static final int ERROR_NO_SPOOL_SPACE() { return (int)62L; }

    static final int ERROR_PRINT_CANCELLED() { return (int)63L; }

    static final int ERROR_NETNAME_DELETED() { return (int)64L; }

    static final int ERROR_NETWORK_ACCESS_DENIED() { return (int)65L; }

    static final int ERROR_BAD_DEV_TYPE() { return (int)66L; }

    static final int ERROR_BAD_NET_NAME() { return (int)67L; }

    static final int ERROR_TOO_MANY_NAMES() { return (int)68L; }

    static final int ERROR_TOO_MANY_SESS() { return (int)69L; }

    static final int ERROR_SHARING_PAUSED() { return (int)70L; }

    static final int ERROR_REQ_NOT_ACCEP() { return (int)71L; }

    static final int ERROR_REDIR_PAUSED() { return (int)72L; }

    static final int ERROR_FILE_EXISTS() { return (int)80L; }

    static final int ERROR_CANNOT_MAKE() { return (int)82L; }

    static final int ERROR_FAIL_I24() { return (int)83L; }

    static final int ERROR_OUT_OF_STRUCTURES() { return (int)84L; }

    static final int ERROR_ALREADY_ASSIGNED() { return (int)85L; }

    static final int ERROR_INVALID_PASSWORD() { return (int)86L; }

    static final int ERROR_INVALID_PARAMETER() { return (int)87L; }

    static final int ERROR_NET_WRITE_FAULT() { return (int)88L; }

    static final int ERROR_NO_PROC_SLOTS() { return (int)89L; }

    static final int ERROR_TOO_MANY_SEMAPHORES() { return (int)100L; }

    static final int ERROR_EXCL_SEM_ALREADY_OWNED() { return (int)101L; }

    static final int ERROR_SEM_IS_SET() { return (int)102L; }

    static final int ERROR_TOO_MANY_SEM_REQUESTS() { return (int)103L; }

    static final int ERROR_INVALID_AT_INTERRUPT_TIME() { return (int)104L; }

    static final int ERROR_SEM_OWNER_DIED() { return (int)105L; }

    static final int ERROR_SEM_USER_LIMIT() { return (int)106L; }

    static final int ERROR_DISK_CHANGE() { return (int)107L; }

    static final int ERROR_DRIVE_LOCKED() { return (int)108L; }

    static final int ERROR_BROKEN_PIPE() { return (int)109L; }

    static final int ERROR_OPEN_FAILED() { return (int)110L; }

    static final int ERROR_BUFFER_OVERFLOW() { return (int)111L; }

    static final int ERROR_DISK_FULL() { return (int)112L; }

    static final int ERROR_NO_MORE_SEARCH_HANDLES() { return (int)113L; }

    static final int ERROR_INVALID_TARGET_HANDLE() { return (int)114L; }

    static final int ERROR_INVALID_CATEGORY() { return (int)117L; }

    static final int ERROR_INVALID_VERIFY_SWITCH() { return (int)118L; }

    static final int ERROR_BAD_DRIVER_LEVEL() { return (int)119L; }

    static final int ERROR_CALL_NOT_IMPLEMENTED() { return (int)120L; }

    static final int ERROR_SEM_TIMEOUT() { return (int)121L; }

    static final int ERROR_INSUFFICIENT_BUFFER() { return (int)122L; }

    static final int ERROR_INVALID_NAME() { return (int)123L; }

    static final int ERROR_INVALID_LEVEL() { return (int)124L; }

    static final int ERROR_NO_VOLUME_LABEL() { return (int)125L; }

    static final int ERROR_MOD_NOT_FOUND() { return (int)126L; }

    static final int ERROR_PROC_NOT_FOUND() { return (int)127L; }

    static final int ERROR_WAIT_NO_CHILDREN() { return (int)128L; }

    static final int ERROR_CHILD_NOT_COMPLETE() { return (int)129L; }

    static final int ERROR_DIRECT_ACCESS_HANDLE() { return (int)130L; }

    static final int ERROR_NEGATIVE_SEEK() { return (int)131L; }

    static final int ERROR_SEEK_ON_DEVICE() { return (int)132L; }

    static final int ERROR_IS_JOIN_TARGET() { return (int)133L; }

    static final int ERROR_IS_JOINED() { return (int)134L; }

    static final int ERROR_IS_SUBSTED() { return (int)135L; }

    static final int ERROR_NOT_JOINED() { return (int)136L; }

    static final int ERROR_NOT_SUBSTED() { return (int)137L; }

    static final int ERROR_JOIN_TO_JOIN() { return (int)138L; }

    static final int ERROR_SUBST_TO_SUBST() { return (int)139L; }

    static final int ERROR_JOIN_TO_SUBST() { return (int)140L; }

    static final int ERROR_SUBST_TO_JOIN() { return (int)141L; }

    static final int ERROR_BUSY_DRIVE() { return (int)142L; }

    static final int ERROR_SAME_DRIVE() { return (int)143L; }

    static final int ERROR_DIR_NOT_ROOT() { return (int)144L; }

    static final int ERROR_DIR_NOT_EMPTY() { return (int)145L; }

    static final int ERROR_IS_SUBST_PATH() { return (int)146L; }

    static final int ERROR_IS_JOIN_PATH() { return (int)147L; }

    static final int ERROR_PATH_BUSY() { return (int)148L; }

    static final int ERROR_IS_SUBST_TARGET() { return (int)149L; }

    static final int ERROR_SYSTEM_TRACE() { return (int)150L; }

    static final int ERROR_INVALID_EVENT_COUNT() { return (int)151L; }

    static final int ERROR_TOO_MANY_MUXWAITERS() { return (int)152L; }

    static final int ERROR_INVALID_LIST_FORMAT() { return (int)153L; }

    static final int ERROR_LABEL_TOO_LONG() { return (int)154L; }

    static final int ERROR_TOO_MANY_TCBS() { return (int)155L; }

    static final int ERROR_SIGNAL_REFUSED() { return (int)156L; }

    static final int ERROR_DISCARDED() { return (int)157L; }

    static final int ERROR_NOT_LOCKED() { return (int)158L; }

    static final int ERROR_BAD_THREADID_ADDR() { return (int)159L; }

    static final int ERROR_BAD_ARGUMENTS() { return (int)160L; }

    static final int ERROR_BAD_PATHNAME() { return (int)161L; }

    static final int ERROR_SIGNAL_PENDING() { return (int)162L; }

    static final int ERROR_MAX_THRDS_REACHED() { return (int)164L; }

    static final int ERROR_LOCK_FAILED() { return (int)167L; }

    static final int ERROR_BUSY() { return (int)170L; }

    static final int ERROR_DEVICE_SUPPORT_IN_PROGRESS() { return (int)171L; }

    static final int ERROR_CANCEL_VIOLATION() { return (int)173L; }

    static final int ERROR_ATOMIC_LOCKS_NOT_SUPPORTED() { return (int)174L; }

    static final int ERROR_INVALID_SEGMENT_NUMBER() { return (int)180L; }

    static final int ERROR_INVALID_ORDINAL() { return (int)182L; }

    static final int ERROR_ALREADY_EXISTS() { return (int)183L; }

    static final int ERROR_INVALID_FLAG_NUMBER() { return (int)186L; }

    static final int ERROR_SEM_NOT_FOUND() { return (int)187L; }

    static final int ERROR_INVALID_STARTING_CODESEG() { return (int)188L; }

    static final int ERROR_INVALID_STACKSEG() { return (int)189L; }

    static final int ERROR_INVALID_MODULETYPE() { return (int)190L; }

    static final int ERROR_INVALID_EXE_SIGNATURE() { return (int)191L; }

    static final int ERROR_EXE_MARKED_INVALID() { return (int)192L; }

    static final int ERROR_BAD_EXE_FORMAT() { return (int)193L; }

    static final int ERROR_ITERATED_DATA_EXCEEDS_64k() { return (int)194L; }

    static final int ERROR_INVALID_MINALLOCSIZE() { return (int)195L; }

    static final int ERROR_DYNLINK_FROM_INVALID_RING() { return (int)196L; }

    static final int ERROR_IOPL_NOT_ENABLED() { return (int)197L; }

    static final int ERROR_INVALID_SEGDPL() { return (int)198L; }

    static final int ERROR_AUTODATASEG_EXCEEDS_64k() { return (int)199L; }

    static final int ERROR_RING2SEG_MUST_BE_MOVABLE() { return (int)200L; }

    static final int ERROR_RELOC_CHAIN_XEEDS_SEGLIM() { return (int)201L; }

    static final int ERROR_INFLOOP_IN_RELOC_CHAIN() { return (int)202L; }

    static final int ERROR_ENVVAR_NOT_FOUND() { return (int)203L; }

    static final int ERROR_NO_SIGNAL_SENT() { return (int)205L; }

    static final int ERROR_FILENAME_EXCED_RANGE() { return (int)206L; }

    static final int ERROR_RING2_STACK_IN_USE() { return (int)207L; }

    static final int ERROR_META_EXPANSION_TOO_LONG() { return (int)208L; }

    static final int ERROR_INVALID_SIGNAL_NUMBER() { return (int)209L; }

    static final int ERROR_THREAD_1_INACTIVE() { return (int)210L; }

    static final int ERROR_LOCKED() { return (int)212L; }

    static final int ERROR_TOO_MANY_MODULES() { return (int)214L; }

    static final int ERROR_NESTING_NOT_ALLOWED() { return (int)215L; }

    static final int ERROR_EXE_MACHINE_TYPE_MISMATCH() { return (int)216L; }

    static final int ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY() { return (int)217L; }

    static final int ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY() { return (int)218L; }

    static final int ERROR_FILE_CHECKED_OUT() { return (int)220L; }

    static final int ERROR_CHECKOUT_REQUIRED() { return (int)221L; }

    static final int ERROR_BAD_FILE_TYPE() { return (int)222L; }

    static final int ERROR_FILE_TOO_LARGE() { return (int)223L; }

    static final int ERROR_FORMS_AUTH_REQUIRED() { return (int)224L; }

    static final int ERROR_VIRUS_INFECTED() { return (int)225L; }

    static final int ERROR_VIRUS_DELETED() { return (int)226L; }

    static final int ERROR_PIPE_LOCAL() { return (int)229L; }

    static final int ERROR_BAD_PIPE() { return (int)230L; }

    static final int ERROR_PIPE_BUSY() { return (int)231L; }

    static final int ERROR_NO_DATA() { return (int)232L; }

    static final int ERROR_PIPE_NOT_CONNECTED() { return (int)233L; }

    static final int ERROR_MORE_DATA() { return (int)234L; }

    static final int ERROR_NO_WORK_DONE() { return (int)235L; }

    static final int ERROR_VC_DISCONNECTED() { return (int)240L; }

    static final int ERROR_INVALID_EA_NAME() { return (int)254L; }

    static final int ERROR_EA_LIST_INCONSISTENT() { return (int)255L; }

    static final int WAIT_TIMEOUT() { return (int)258L; }

    static final int ERROR_NO_MORE_ITEMS() { return (int)259L; }

    static final int ERROR_CANNOT_COPY() { return (int)266L; }

    static final int ERROR_DIRECTORY() { return (int)267L; }

    static final int ERROR_EAS_DIDNT_FIT() { return (int)275L; }

    static final int ERROR_EA_FILE_CORRUPT() { return (int)276L; }

    static final int ERROR_EA_TABLE_FULL() { return (int)277L; }

    static final int ERROR_INVALID_EA_HANDLE() { return (int)278L; }

    static final int ERROR_EAS_NOT_SUPPORTED() { return (int)282L; }

    static final int ERROR_NOT_OWNER() { return (int)288L; }

    static final int ERROR_TOO_MANY_POSTS() { return (int)298L; }

    static final int ERROR_PARTIAL_COPY() { return (int)299L; }

    static final int ERROR_OPLOCK_NOT_GRANTED() { return (int)300L; }

    static final int ERROR_INVALID_OPLOCK_PROTOCOL() { return (int)301L; }

    static final int ERROR_DISK_TOO_FRAGMENTED() { return (int)302L; }

    static final int ERROR_DELETE_PENDING() { return (int)303L; }

    static final int ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING() { return (int)304L; }

    static final int ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME() { return (int)305L; }

    static final int ERROR_SECURITY_STREAM_IS_INCONSISTENT() { return (int)306L; }

    static final int ERROR_INVALID_LOCK_RANGE() { return (int)307L; }

    static final int ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT() { return (int)308L; }

    static final int ERROR_NOTIFICATION_GUID_ALREADY_DEFINED() { return (int)309L; }

    static final int ERROR_INVALID_EXCEPTION_HANDLER() { return (int)310L; }

    static final int ERROR_DUPLICATE_PRIVILEGES() { return (int)311L; }

    static final int ERROR_NO_RANGES_PROCESSED() { return (int)312L; }

    static final int ERROR_NOT_ALLOWED_ON_SYSTEM_FILE() { return (int)313L; }

    static final int ERROR_DISK_RESOURCES_EXHAUSTED() { return (int)314L; }

    static final int ERROR_INVALID_TOKEN() { return (int)315L; }

    static final int ERROR_DEVICE_FEATURE_NOT_SUPPORTED() { return (int)316L; }

    static final int ERROR_MR_MID_NOT_FOUND() { return (int)317L; }

    static final int ERROR_SCOPE_NOT_FOUND() { return (int)318L; }

    static final int ERROR_UNDEFINED_SCOPE() { return (int)319L; }

    static final int ERROR_INVALID_CAP() { return (int)320L; }

    static final int ERROR_DEVICE_UNREACHABLE() { return (int)321L; }

    static final int ERROR_DEVICE_NO_RESOURCES() { return (int)322L; }

    static final int ERROR_DATA_CHECKSUM_ERROR() { return (int)323L; }

    static final int ERROR_INTERMIXED_KERNEL_EA_OPERATION() { return (int)324L; }

    static final int ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED() { return (int)326L; }

    static final int ERROR_OFFSET_ALIGNMENT_VIOLATION() { return (int)327L; }

    static final int ERROR_INVALID_FIELD_IN_PARAMETER_LIST() { return (int)328L; }

    static final int ERROR_OPERATION_IN_PROGRESS() { return (int)329L; }

    static final int ERROR_BAD_DEVICE_PATH() { return (int)330L; }

    static final int ERROR_TOO_MANY_DESCRIPTORS() { return (int)331L; }

    static final int ERROR_SCRUB_DATA_DISABLED() { return (int)332L; }

    static final int ERROR_NOT_REDUNDANT_STORAGE() { return (int)333L; }

    static final int ERROR_RESIDENT_FILE_NOT_SUPPORTED() { return (int)334L; }

    static final int ERROR_COMPRESSED_FILE_NOT_SUPPORTED() { return (int)335L; }

    static final int ERROR_DIRECTORY_NOT_SUPPORTED() { return (int)336L; }

    static final int ERROR_NOT_READ_FROM_COPY() { return (int)337L; }

    static final int ERROR_FT_WRITE_FAILURE() { return (int)338L; }

    static final int ERROR_FT_DI_SCAN_REQUIRED() { return (int)339L; }

    static final int ERROR_INVALID_KERNEL_INFO_VERSION() { return (int)340L; }

    static final int ERROR_INVALID_PEP_INFO_VERSION() { return (int)341L; }

    static final int ERROR_OBJECT_NOT_EXTERNALLY_BACKED() { return (int)342L; }

    static final int ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN() { return (int)343L; }

    static final int ERROR_COMPRESSION_NOT_BENEFICIAL() { return (int)344L; }

    static final int ERROR_STORAGE_TOPOLOGY_ID_MISMATCH() { return (int)345L; }

    static final int ERROR_BLOCKED_BY_PARENTAL_CONTROLS() { return (int)346L; }

    static final int ERROR_BLOCK_TOO_MANY_REFERENCES() { return (int)347L; }

    static final int ERROR_MARKED_TO_DISALLOW_WRITES() { return (int)348L; }

    static final int ERROR_ENCLAVE_FAILURE() { return (int)349L; }

    static final int ERROR_FAIL_NOACTION_REBOOT() { return (int)350L; }

    static final int ERROR_FAIL_SHUTDOWN() { return (int)351L; }

    static final int ERROR_FAIL_RESTART() { return (int)352L; }

    static final int ERROR_MAX_SESSIONS_REACHED() { return (int)353L; }

    static final int ERROR_NETWORK_ACCESS_DENIED_EDP() { return (int)354L; }

    static final int ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL() { return (int)355L; }

    static final int ERROR_EDP_POLICY_DENIES_OPERATION() { return (int)356L; }

    static final int ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED() { return (int)357L; }

    static final int ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT() { return (int)358L; }

    static final int ERROR_DEVICE_IN_MAINTENANCE() { return (int)359L; }

    static final int ERROR_NOT_SUPPORTED_ON_DAX() { return (int)360L; }

    static final int ERROR_DAX_MAPPING_EXISTS() { return (int)361L; }

    static final int ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING() { return (int)362L; }

    static final int ERROR_CLOUD_FILE_METADATA_CORRUPT() { return (int)363L; }

    static final int ERROR_CLOUD_FILE_METADATA_TOO_LARGE() { return (int)364L; }

    static final int ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE() { return (int)365L; }

    static final int ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH() { return (int)366L; }

    static final int ERROR_CHILD_PROCESS_BLOCKED() { return (int)367L; }

    static final int ERROR_STORAGE_LOST_DATA_PERSISTENCE() { return (int)368L; }

    static final int ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE() { return (int)369L; }

    static final int ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT() { return (int)370L; }

    static final int ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY() { return (int)371L; }

    static final int ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN() { return (int)372L; }

    static final int ERROR_GDI_HANDLE_LEAK() { return (int)373L; }

    static final int ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS() { return (int)374L; }

    static final int ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED() { return (int)375L; }

    static final int ERROR_NOT_A_CLOUD_FILE() { return (int)376L; }

    static final int ERROR_CLOUD_FILE_NOT_IN_SYNC() { return (int)377L; }

    static final int ERROR_CLOUD_FILE_ALREADY_CONNECTED() { return (int)378L; }

    static final int ERROR_CLOUD_FILE_NOT_SUPPORTED() { return (int)379L; }

    static final int ERROR_CLOUD_FILE_INVALID_REQUEST() { return (int)380L; }

    static final int ERROR_CLOUD_FILE_READ_ONLY_VOLUME() { return (int)381L; }

    static final int ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY() { return (int)382L; }

    static final int ERROR_CLOUD_FILE_VALIDATION_FAILED() { return (int)383L; }

    static final int ERROR_SMB1_NOT_AVAILABLE() { return (int)384L; }

    static final int ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION() { return (int)385L; }

    static final int ERROR_CLOUD_FILE_AUTHENTICATION_FAILED() { return (int)386L; }

    static final int ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES() { return (int)387L; }

    static final int ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE() { return (int)388L; }

    static final int ERROR_CLOUD_FILE_UNSUCCESSFUL() { return (int)389L; }

    static final int ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT() { return (int)390L; }

    static final int ERROR_CLOUD_FILE_IN_USE() { return (int)391L; }

    static final int ERROR_CLOUD_FILE_PINNED() { return (int)392L; }

    static final int ERROR_CLOUD_FILE_REQUEST_ABORTED() { return (int)393L; }

    static final int ERROR_CLOUD_FILE_PROPERTY_CORRUPT() { return (int)394L; }

    static final int ERROR_CLOUD_FILE_ACCESS_DENIED() { return (int)395L; }

    static final int ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS() { return (int)396L; }

    static final int ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT() { return (int)397L; }

    static final int ERROR_CLOUD_FILE_REQUEST_CANCELED() { return (int)398L; }

    static final int ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED() { return (int)399L; }

    static final int ERROR_THREAD_MODE_ALREADY_BACKGROUND() { return (int)400L; }

    static final int ERROR_THREAD_MODE_NOT_BACKGROUND() { return (int)401L; }

    static final int ERROR_PROCESS_MODE_ALREADY_BACKGROUND() { return (int)402L; }

    static final int ERROR_PROCESS_MODE_NOT_BACKGROUND() { return (int)403L; }

    static final int ERROR_CLOUD_FILE_PROVIDER_TERMINATED() { return (int)404L; }

    static final int ERROR_NOT_A_CLOUD_SYNC_ROOT() { return (int)405L; }

    static final int ERROR_FILE_PROTECTED_UNDER_DPL() { return (int)406L; }

    static final int ERROR_VOLUME_NOT_CLUSTER_ALIGNED() { return (int)407L; }

    static final int ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND() { return (int)408L; }

    static final int ERROR_APPX_FILE_NOT_ENCRYPTED() { return (int)409L; }

    static final int ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED() { return (int)410L; }

    static final int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET() { return (int)411L; }

    static final int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE() { return (int)412L; }

    static final int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER() { return (int)413L; }

    static final int ERROR_LINUX_SUBSYSTEM_NOT_PRESENT() { return (int)414L; }

    static final int ERROR_FT_READ_FAILURE() { return (int)415L; }

    static final int ERROR_STORAGE_RESERVE_ID_INVALID() { return (int)416L; }

    static final int ERROR_STORAGE_RESERVE_DOES_NOT_EXIST() { return (int)417L; }

    static final int ERROR_STORAGE_RESERVE_ALREADY_EXISTS() { return (int)418L; }

    static final int ERROR_STORAGE_RESERVE_NOT_EMPTY() { return (int)419L; }

    static final int ERROR_NOT_A_DAX_VOLUME() { return (int)420L; }

    static final int ERROR_NOT_DAX_MAPPABLE() { return (int)421L; }

    static final int ERROR_TIME_SENSITIVE_THREAD() { return (int)422L; }

    static final int ERROR_DPL_NOT_SUPPORTED_FOR_USER() { return (int)423L; }

    static final int ERROR_CASE_DIFFERING_NAMES_IN_DIR() { return (int)424L; }

    static final int ERROR_FILE_NOT_SUPPORTED() { return (int)425L; }

    static final int ERROR_CLOUD_FILE_REQUEST_TIMEOUT() { return (int)426L; }

    static final int ERROR_NO_TASK_QUEUE() { return (int)427L; }

    static final int ERROR_SRC_SRV_DLL_LOAD_FAILED() { return (int)428L; }

    static final int ERROR_NOT_SUPPORTED_WITH_BTT() { return (int)429L; }

    static final int ERROR_ENCRYPTION_DISABLED() { return (int)430L; }

    static final int ERROR_ENCRYPTING_METADATA_DISALLOWED() { return (int)431L; }

    static final int ERROR_CANT_CLEAR_ENCRYPTION_FLAG() { return (int)432L; }

    static final int ERROR_NO_SUCH_DEVICE() { return (int)433L; }

    static final int ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED() { return (int)434L; }

    static final int ERROR_FILE_SNAP_IN_PROGRESS() { return (int)435L; }

    static final int ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED() { return (int)436L; }

    static final int ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED() { return (int)437L; }

    static final int ERROR_FILE_SNAP_IO_NOT_COORDINATED() { return (int)438L; }

    static final int ERROR_FILE_SNAP_UNEXPECTED_ERROR() { return (int)439L; }

    static final int ERROR_FILE_SNAP_INVALID_PARAMETER() { return (int)440L; }

    static final int ERROR_UNSATISFIED_DEPENDENCIES() { return (int)441L; }

    static final int ERROR_CASE_SENSITIVE_PATH() { return (int)442L; }

    static final int ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR() { return (int)443L; }

    static final int ERROR_CAPAUTHZ_NOT_DEVUNLOCKED() { return (int)450L; }

    static final int ERROR_CAPAUTHZ_CHANGE_TYPE() { return (int)451L; }

    static final int ERROR_CAPAUTHZ_NOT_PROVISIONED() { return (int)452L; }

    static final int ERROR_CAPAUTHZ_NOT_AUTHORIZED() { return (int)453L; }

    static final int ERROR_CAPAUTHZ_NO_POLICY() { return (int)454L; }

    static final int ERROR_CAPAUTHZ_DB_CORRUPTED() { return (int)455L; }

    static final int ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG() { return (int)456L; }

    static final int ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY() { return (int)457L; }

    static final int ERROR_CAPAUTHZ_SCCD_PARSE_ERROR() { return (int)458L; }

    static final int ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED() { return (int)459L; }

    static final int ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH() { return (int)460L; }

    static final int ERROR_CIMFS_IMAGE_CORRUPT() { return (int)470L; }

    static final int ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT() { return (int)480L; }

    static final int ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT() { return (int)481L; }

    static final int ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT() { return (int)482L; }

    static final int ERROR_DEVICE_HARDWARE_ERROR() { return (int)483L; }

    static final int ERROR_INVALID_ADDRESS() { return (int)487L; }

    static final int ERROR_VRF_CFG_AND_IO_ENABLED() { return (int)1183L; }

    static final int ERROR_PARTITION_TERMINATING() { return (int)1184L; }

    static final int ERROR_USER_PROFILE_LOAD() { return (int)500L; }

    static final int ERROR_ARITHMETIC_OVERFLOW() { return (int)534L; }

    static final int ERROR_PIPE_CONNECTED() { return (int)535L; }

    static final int ERROR_PIPE_LISTENING() { return (int)536L; }

    static final int ERROR_VERIFIER_STOP() { return (int)537L; }

    static final int ERROR_ABIOS_ERROR() { return (int)538L; }

    static final int ERROR_WX86_WARNING() { return (int)539L; }

    static final int ERROR_WX86_ERROR() { return (int)540L; }

    static final int ERROR_TIMER_NOT_CANCELED() { return (int)541L; }

    static final int ERROR_UNWIND() { return (int)542L; }

    static final int ERROR_BAD_STACK() { return (int)543L; }

    static final int ERROR_INVALID_UNWIND_TARGET() { return (int)544L; }

    static final int ERROR_INVALID_PORT_ATTRIBUTES() { return (int)545L; }

    static final int ERROR_PORT_MESSAGE_TOO_LONG() { return (int)546L; }

    static final int ERROR_INVALID_QUOTA_LOWER() { return (int)547L; }

    static final int ERROR_DEVICE_ALREADY_ATTACHED() { return (int)548L; }

    static final int ERROR_INSTRUCTION_MISALIGNMENT() { return (int)549L; }

    static final int ERROR_PROFILING_NOT_STARTED() { return (int)550L; }

    static final int ERROR_PROFILING_NOT_STOPPED() { return (int)551L; }

    static final int ERROR_COULD_NOT_INTERPRET() { return (int)552L; }

    static final int ERROR_PROFILING_AT_LIMIT() { return (int)553L; }

    static final int ERROR_CANT_WAIT() { return (int)554L; }

    static final int ERROR_CANT_TERMINATE_SELF() { return (int)555L; }

    static final int ERROR_UNEXPECTED_MM_CREATE_ERR() { return (int)556L; }

    static final int ERROR_UNEXPECTED_MM_MAP_ERROR() { return (int)557L; }

    static final int ERROR_UNEXPECTED_MM_EXTEND_ERR() { return (int)558L; }

    static final int ERROR_BAD_FUNCTION_TABLE() { return (int)559L; }

    static final int ERROR_NO_GUID_TRANSLATION() { return (int)560L; }

    static final int ERROR_INVALID_LDT_SIZE() { return (int)561L; }

    static final int ERROR_INVALID_LDT_OFFSET() { return (int)563L; }

    static final int ERROR_INVALID_LDT_DESCRIPTOR() { return (int)564L; }

    static final int ERROR_TOO_MANY_THREADS() { return (int)565L; }

    static final int ERROR_THREAD_NOT_IN_PROCESS() { return (int)566L; }

    static final int ERROR_PAGEFILE_QUOTA_EXCEEDED() { return (int)567L; }

    static final int ERROR_LOGON_SERVER_CONFLICT() { return (int)568L; }

    static final int ERROR_SYNCHRONIZATION_REQUIRED() { return (int)569L; }

    static final int ERROR_NET_OPEN_FAILED() { return (int)570L; }

    static final int ERROR_IO_PRIVILEGE_FAILED() { return (int)571L; }

    static final int ERROR_CONTROL_C_EXIT() { return (int)572L; }

    static final int ERROR_MISSING_SYSTEMFILE() { return (int)573L; }

    static final int ERROR_UNHANDLED_EXCEPTION() { return (int)574L; }

    static final int ERROR_APP_INIT_FAILURE() { return (int)575L; }

    static final int ERROR_PAGEFILE_CREATE_FAILED() { return (int)576L; }

    static final int ERROR_INVALID_IMAGE_HASH() { return (int)577L; }

    static final int ERROR_NO_PAGEFILE() { return (int)578L; }

    static final int ERROR_ILLEGAL_FLOAT_CONTEXT() { return (int)579L; }

    static final int ERROR_NO_EVENT_PAIR() { return (int)580L; }

    static final int ERROR_DOMAIN_CTRLR_CONFIG_ERROR() { return (int)581L; }

    static final int ERROR_ILLEGAL_CHARACTER() { return (int)582L; }

    static final int ERROR_UNDEFINED_CHARACTER() { return (int)583L; }

    static final int ERROR_FLOPPY_VOLUME() { return (int)584L; }

    static final int ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT() { return (int)585L; }

    static final int ERROR_BACKUP_CONTROLLER() { return (int)586L; }

    static final int ERROR_MUTANT_LIMIT_EXCEEDED() { return (int)587L; }

    static final int ERROR_FS_DRIVER_REQUIRED() { return (int)588L; }

    static final int ERROR_CANNOT_LOAD_REGISTRY_FILE() { return (int)589L; }

    static final int ERROR_DEBUG_ATTACH_FAILED() { return (int)590L; }

    static final int ERROR_SYSTEM_PROCESS_TERMINATED() { return (int)591L; }

    static final int ERROR_DATA_NOT_ACCEPTED() { return (int)592L; }

    static final int ERROR_VDM_HARD_ERROR() { return (int)593L; }

    static final int ERROR_DRIVER_CANCEL_TIMEOUT() { return (int)594L; }

    static final int ERROR_REPLY_MESSAGE_MISMATCH() { return (int)595L; }

    static final int ERROR_LOST_WRITEBEHIND_DATA() { return (int)596L; }

    static final int ERROR_CLIENT_SERVER_PARAMETERS_INVALID() { return (int)597L; }

    static final int ERROR_NOT_TINY_STREAM() { return (int)598L; }

    static final int ERROR_STACK_OVERFLOW_READ() { return (int)599L; }

    static final int ERROR_CONVERT_TO_LARGE() { return (int)600L; }

    static final int ERROR_FOUND_OUT_OF_SCOPE() { return (int)601L; }

    static final int ERROR_ALLOCATE_BUCKET() { return (int)602L; }

    static final int ERROR_MARSHALL_OVERFLOW() { return (int)603L; }

    static final int ERROR_INVALID_VARIANT() { return (int)604L; }

    static final int ERROR_BAD_COMPRESSION_BUFFER() { return (int)605L; }

    static final int ERROR_AUDIT_FAILED() { return (int)606L; }

    static final int ERROR_TIMER_RESOLUTION_NOT_SET() { return (int)607L; }

    static final int ERROR_INSUFFICIENT_LOGON_INFO() { return (int)608L; }

    static final int ERROR_BAD_DLL_ENTRYPOINT() { return (int)609L; }

    static final int ERROR_BAD_SERVICE_ENTRYPOINT() { return (int)610L; }

    static final int ERROR_IP_ADDRESS_CONFLICT1() { return (int)611L; }

    static final int ERROR_IP_ADDRESS_CONFLICT2() { return (int)612L; }

    static final int ERROR_REGISTRY_QUOTA_LIMIT() { return (int)613L; }

    static final int ERROR_NO_CALLBACK_ACTIVE() { return (int)614L; }

    static final int ERROR_PWD_TOO_SHORT() { return (int)615L; }

    static final int ERROR_PWD_TOO_RECENT() { return (int)616L; }

    static final int ERROR_PWD_HISTORY_CONFLICT() { return (int)617L; }

    static final int ERROR_UNSUPPORTED_COMPRESSION() { return (int)618L; }

    static final int ERROR_INVALID_HW_PROFILE() { return (int)619L; }

    static final int ERROR_INVALID_PLUGPLAY_DEVICE_PATH() { return (int)620L; }

    static final int ERROR_QUOTA_LIST_INCONSISTENT() { return (int)621L; }

    static final int ERROR_EVALUATION_EXPIRATION() { return (int)622L; }

    static final int ERROR_ILLEGAL_DLL_RELOCATION() { return (int)623L; }

    static final int ERROR_DLL_INIT_FAILED_LOGOFF() { return (int)624L; }

    static final int ERROR_VALIDATE_CONTINUE() { return (int)625L; }

    static final int ERROR_NO_MORE_MATCHES() { return (int)626L; }

    static final int ERROR_RANGE_LIST_CONFLICT() { return (int)627L; }

    static final int ERROR_SERVER_SID_MISMATCH() { return (int)628L; }

    static final int ERROR_CANT_ENABLE_DENY_ONLY() { return (int)629L; }

    static final int ERROR_FLOAT_MULTIPLE_FAULTS() { return (int)630L; }

    static final int ERROR_FLOAT_MULTIPLE_TRAPS() { return (int)631L; }

    static final int ERROR_NOINTERFACE() { return (int)632L; }

    static final int ERROR_DRIVER_FAILED_SLEEP() { return (int)633L; }

    static final int ERROR_CORRUPT_SYSTEM_FILE() { return (int)634L; }

    static final int ERROR_COMMITMENT_MINIMUM() { return (int)635L; }

    static final int ERROR_PNP_RESTART_ENUMERATION() { return (int)636L; }

    static final int ERROR_SYSTEM_IMAGE_BAD_SIGNATURE() { return (int)637L; }

    static final int ERROR_PNP_REBOOT_REQUIRED() { return (int)638L; }

    static final int ERROR_INSUFFICIENT_POWER() { return (int)639L; }

    static final int ERROR_MULTIPLE_FAULT_VIOLATION() { return (int)640L; }

    static final int ERROR_SYSTEM_SHUTDOWN() { return (int)641L; }

    static final int ERROR_PORT_NOT_SET() { return (int)642L; }

    static final int ERROR_DS_VERSION_CHECK_FAILURE() { return (int)643L; }

    static final int ERROR_RANGE_NOT_FOUND() { return (int)644L; }

    static final int ERROR_NOT_SAFE_MODE_DRIVER() { return (int)646L; }

    static final int ERROR_FAILED_DRIVER_ENTRY() { return (int)647L; }

    static final int ERROR_DEVICE_ENUMERATION_ERROR() { return (int)648L; }

    static final int ERROR_MOUNT_POINT_NOT_RESOLVED() { return (int)649L; }

    static final int ERROR_INVALID_DEVICE_OBJECT_PARAMETER() { return (int)650L; }

    static final int ERROR_MCA_OCCURED() { return (int)651L; }

    static final int ERROR_DRIVER_DATABASE_ERROR() { return (int)652L; }

    static final int ERROR_SYSTEM_HIVE_TOO_LARGE() { return (int)653L; }

    static final int ERROR_DRIVER_FAILED_PRIOR_UNLOAD() { return (int)654L; }

    static final int ERROR_VOLSNAP_PREPARE_HIBERNATE() { return (int)655L; }

    static final int ERROR_HIBERNATION_FAILURE() { return (int)656L; }

    static final int ERROR_PWD_TOO_LONG() { return (int)657L; }

    static final int ERROR_FILE_SYSTEM_LIMITATION() { return (int)665L; }

    static final int ERROR_ASSERTION_FAILURE() { return (int)668L; }

    static final int ERROR_ACPI_ERROR() { return (int)669L; }

    static final int ERROR_WOW_ASSERTION() { return (int)670L; }

    static final int ERROR_PNP_BAD_MPS_TABLE() { return (int)671L; }

    static final int ERROR_PNP_TRANSLATION_FAILED() { return (int)672L; }

    static final int ERROR_PNP_IRQ_TRANSLATION_FAILED() { return (int)673L; }

    static final int ERROR_PNP_INVALID_ID() { return (int)674L; }

    static final int ERROR_WAKE_SYSTEM_DEBUGGER() { return (int)675L; }

    static final int ERROR_HANDLES_CLOSED() { return (int)676L; }

    static final int ERROR_EXTRANEOUS_INFORMATION() { return (int)677L; }

    static final int ERROR_RXACT_COMMIT_NECESSARY() { return (int)678L; }

    static final int ERROR_MEDIA_CHECK() { return (int)679L; }

    static final int ERROR_GUID_SUBSTITUTION_MADE() { return (int)680L; }

    static final int ERROR_STOPPED_ON_SYMLINK() { return (int)681L; }

    static final int ERROR_LONGJUMP() { return (int)682L; }

    static final int ERROR_PLUGPLAY_QUERY_VETOED() { return (int)683L; }

    static final int ERROR_UNWIND_CONSOLIDATE() { return (int)684L; }

    static final int ERROR_REGISTRY_HIVE_RECOVERED() { return (int)685L; }

    static final int ERROR_DLL_MIGHT_BE_INSECURE() { return (int)686L; }

    static final int ERROR_DLL_MIGHT_BE_INCOMPATIBLE() { return (int)687L; }

    static final int ERROR_DBG_EXCEPTION_NOT_HANDLED() { return (int)688L; }

    static final int ERROR_DBG_REPLY_LATER() { return (int)689L; }

    static final int ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE() { return (int)690L; }

}

