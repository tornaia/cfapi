// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$76 extends cfapi_h$constants$75 {

    /* package-private */ cfapi_h$constants$76() {}
    static final MemoryLayout IAsyncManagerVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("CompleteCall"),
        C_POINTER.withName("GetCallContext"),
        C_POINTER.withName("GetState")
    ).withName("IAsyncManagerVtbl");
    static final jdk.incubator.foreign.MemoryLayout IAsyncManagerVtbl$struct$LAYOUT() { return IAsyncManagerVtbl$struct$LAYOUT_; }

    static final MemoryLayout IAsyncManagerVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAsyncManagerVtbl$QueryInterface$LAYOUT() { return IAsyncManagerVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IAsyncManagerVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IAsyncManagerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IAsyncManagerVtbl$QueryInterface$VH() { return IAsyncManagerVtbl$QueryInterface$VH_; }

    static final MemoryLayout IAsyncManagerVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAsyncManagerVtbl$AddRef$LAYOUT() { return IAsyncManagerVtbl$AddRef$LAYOUT_; }

    static final VarHandle IAsyncManagerVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IAsyncManagerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IAsyncManagerVtbl$AddRef$VH() { return IAsyncManagerVtbl$AddRef$VH_; }

    static final MemoryLayout IAsyncManagerVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAsyncManagerVtbl$Release$LAYOUT() { return IAsyncManagerVtbl$Release$LAYOUT_; }

    static final VarHandle IAsyncManagerVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IAsyncManagerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IAsyncManagerVtbl$Release$VH() { return IAsyncManagerVtbl$Release$VH_; }

    static final MemoryLayout IAsyncManagerVtbl$CompleteCall$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAsyncManagerVtbl$CompleteCall$LAYOUT() { return IAsyncManagerVtbl$CompleteCall$LAYOUT_; }

    static final VarHandle IAsyncManagerVtbl$CompleteCall$VH_ = MemoryHandles.asAddressVarHandle(IAsyncManagerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CompleteCall")));
    static final java.lang.invoke.VarHandle IAsyncManagerVtbl$CompleteCall$VH() { return IAsyncManagerVtbl$CompleteCall$VH_; }

    static final MemoryLayout IAsyncManagerVtbl$GetCallContext$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAsyncManagerVtbl$GetCallContext$LAYOUT() { return IAsyncManagerVtbl$GetCallContext$LAYOUT_; }

    static final VarHandle IAsyncManagerVtbl$GetCallContext$VH_ = MemoryHandles.asAddressVarHandle(IAsyncManagerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCallContext")));
    static final java.lang.invoke.VarHandle IAsyncManagerVtbl$GetCallContext$VH() { return IAsyncManagerVtbl$GetCallContext$VH_; }

    static final MemoryLayout IAsyncManagerVtbl$GetState$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAsyncManagerVtbl$GetState$LAYOUT() { return IAsyncManagerVtbl$GetState$LAYOUT_; }

    static final VarHandle IAsyncManagerVtbl$GetState$VH_ = MemoryHandles.asAddressVarHandle(IAsyncManagerVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetState")));
    static final java.lang.invoke.VarHandle IAsyncManagerVtbl$GetState$VH() { return IAsyncManagerVtbl$GetState$VH_; }

    static final MemoryLayout IAsyncManager$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IAsyncManager");
    static final jdk.incubator.foreign.MemoryLayout IAsyncManager$struct$LAYOUT() { return IAsyncManager$struct$LAYOUT_; }

    static final MemoryLayout IAsyncManager$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAsyncManager$lpVtbl$LAYOUT() { return IAsyncManager$lpVtbl$LAYOUT_; }

    static final VarHandle IAsyncManager$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IAsyncManager$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IAsyncManager$lpVtbl$VH() { return IAsyncManager$lpVtbl$VH_; }

    static final MemoryLayout IID_ICallFactory$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ICallFactory$LAYOUT() { return IID_ICallFactory$LAYOUT_; }

    static final MemorySegment IID_ICallFactory$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ICallFactory", IID_ICallFactory$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ICallFactory$SEGMENT() { return IID_ICallFactory$SEGMENT_; }

    static final MemoryLayout ICallFactoryVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("CreateCall")
    ).withName("ICallFactoryVtbl");
    static final jdk.incubator.foreign.MemoryLayout ICallFactoryVtbl$struct$LAYOUT() { return ICallFactoryVtbl$struct$LAYOUT_; }

    static final MemoryLayout ICallFactoryVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICallFactoryVtbl$QueryInterface$LAYOUT() { return ICallFactoryVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle ICallFactoryVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(ICallFactoryVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle ICallFactoryVtbl$QueryInterface$VH() { return ICallFactoryVtbl$QueryInterface$VH_; }

    static final MemoryLayout ICallFactoryVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICallFactoryVtbl$AddRef$LAYOUT() { return ICallFactoryVtbl$AddRef$LAYOUT_; }

    static final VarHandle ICallFactoryVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(ICallFactoryVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle ICallFactoryVtbl$AddRef$VH() { return ICallFactoryVtbl$AddRef$VH_; }

    static final MemoryLayout ICallFactoryVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICallFactoryVtbl$Release$LAYOUT() { return ICallFactoryVtbl$Release$LAYOUT_; }

    static final VarHandle ICallFactoryVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(ICallFactoryVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle ICallFactoryVtbl$Release$VH() { return ICallFactoryVtbl$Release$VH_; }

    static final MemoryLayout ICallFactoryVtbl$CreateCall$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICallFactoryVtbl$CreateCall$LAYOUT() { return ICallFactoryVtbl$CreateCall$LAYOUT_; }

    static final VarHandle ICallFactoryVtbl$CreateCall$VH_ = MemoryHandles.asAddressVarHandle(ICallFactoryVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CreateCall")));
    static final java.lang.invoke.VarHandle ICallFactoryVtbl$CreateCall$VH() { return ICallFactoryVtbl$CreateCall$VH_; }

    static final MemoryLayout ICallFactory$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("ICallFactory");
    static final jdk.incubator.foreign.MemoryLayout ICallFactory$struct$LAYOUT() { return ICallFactory$struct$LAYOUT_; }

    static final MemoryLayout ICallFactory$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout ICallFactory$lpVtbl$LAYOUT() { return ICallFactory$lpVtbl$LAYOUT_; }

    static final VarHandle ICallFactory$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(ICallFactory$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle ICallFactory$lpVtbl$VH() { return ICallFactory$lpVtbl$VH_; }

    static final MemoryLayout IID_IRpcHelper$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IRpcHelper$LAYOUT() { return IID_IRpcHelper$LAYOUT_; }

    static final MemorySegment IID_IRpcHelper$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IRpcHelper", IID_IRpcHelper$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IRpcHelper$SEGMENT() { return IID_IRpcHelper$SEGMENT_; }

    static final MemoryLayout IRpcHelperVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetDCOMProtocolVersion"),
        C_POINTER.withName("GetIIDFromOBJREF")
    ).withName("IRpcHelperVtbl");
    static final jdk.incubator.foreign.MemoryLayout IRpcHelperVtbl$struct$LAYOUT() { return IRpcHelperVtbl$struct$LAYOUT_; }

    static final MemoryLayout IRpcHelperVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRpcHelperVtbl$QueryInterface$LAYOUT() { return IRpcHelperVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IRpcHelperVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IRpcHelperVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IRpcHelperVtbl$QueryInterface$VH() { return IRpcHelperVtbl$QueryInterface$VH_; }

    static final MemoryLayout IRpcHelperVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRpcHelperVtbl$AddRef$LAYOUT() { return IRpcHelperVtbl$AddRef$LAYOUT_; }

    static final VarHandle IRpcHelperVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IRpcHelperVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IRpcHelperVtbl$AddRef$VH() { return IRpcHelperVtbl$AddRef$VH_; }

    static final MemoryLayout IRpcHelperVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRpcHelperVtbl$Release$LAYOUT() { return IRpcHelperVtbl$Release$LAYOUT_; }

    static final VarHandle IRpcHelperVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IRpcHelperVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IRpcHelperVtbl$Release$VH() { return IRpcHelperVtbl$Release$VH_; }

    static final MemoryLayout IRpcHelperVtbl$GetDCOMProtocolVersion$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRpcHelperVtbl$GetDCOMProtocolVersion$LAYOUT() { return IRpcHelperVtbl$GetDCOMProtocolVersion$LAYOUT_; }

    static final VarHandle IRpcHelperVtbl$GetDCOMProtocolVersion$VH_ = MemoryHandles.asAddressVarHandle(IRpcHelperVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetDCOMProtocolVersion")));
    static final java.lang.invoke.VarHandle IRpcHelperVtbl$GetDCOMProtocolVersion$VH() { return IRpcHelperVtbl$GetDCOMProtocolVersion$VH_; }

    static final MemoryLayout IRpcHelperVtbl$GetIIDFromOBJREF$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRpcHelperVtbl$GetIIDFromOBJREF$LAYOUT() { return IRpcHelperVtbl$GetIIDFromOBJREF$LAYOUT_; }

    static final VarHandle IRpcHelperVtbl$GetIIDFromOBJREF$VH_ = MemoryHandles.asAddressVarHandle(IRpcHelperVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetIIDFromOBJREF")));
    static final java.lang.invoke.VarHandle IRpcHelperVtbl$GetIIDFromOBJREF$VH() { return IRpcHelperVtbl$GetIIDFromOBJREF$VH_; }

    static final MemoryLayout IRpcHelper$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IRpcHelper");
    static final jdk.incubator.foreign.MemoryLayout IRpcHelper$struct$LAYOUT() { return IRpcHelper$struct$LAYOUT_; }

    static final MemoryLayout IRpcHelper$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IRpcHelper$lpVtbl$LAYOUT() { return IRpcHelper$lpVtbl$LAYOUT_; }

    static final VarHandle IRpcHelper$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IRpcHelper$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IRpcHelper$lpVtbl$VH() { return IRpcHelper$lpVtbl$VH_; }

    static final MemoryLayout IID_IReleaseMarshalBuffers$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IReleaseMarshalBuffers$LAYOUT() { return IID_IReleaseMarshalBuffers$LAYOUT_; }

    static final MemorySegment IID_IReleaseMarshalBuffers$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IReleaseMarshalBuffers", IID_IReleaseMarshalBuffers$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IReleaseMarshalBuffers$SEGMENT() { return IID_IReleaseMarshalBuffers$SEGMENT_; }

    static final MemoryLayout IReleaseMarshalBuffersVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("ReleaseMarshalBuffer")
    ).withName("IReleaseMarshalBuffersVtbl");
    static final jdk.incubator.foreign.MemoryLayout IReleaseMarshalBuffersVtbl$struct$LAYOUT() { return IReleaseMarshalBuffersVtbl$struct$LAYOUT_; }

    static final MemoryLayout IReleaseMarshalBuffersVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IReleaseMarshalBuffersVtbl$QueryInterface$LAYOUT() { return IReleaseMarshalBuffersVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IReleaseMarshalBuffersVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IReleaseMarshalBuffersVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IReleaseMarshalBuffersVtbl$QueryInterface$VH() { return IReleaseMarshalBuffersVtbl$QueryInterface$VH_; }

    static final MemoryLayout IReleaseMarshalBuffersVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IReleaseMarshalBuffersVtbl$AddRef$LAYOUT() { return IReleaseMarshalBuffersVtbl$AddRef$LAYOUT_; }

    static final VarHandle IReleaseMarshalBuffersVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IReleaseMarshalBuffersVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IReleaseMarshalBuffersVtbl$AddRef$VH() { return IReleaseMarshalBuffersVtbl$AddRef$VH_; }

    static final MemoryLayout IReleaseMarshalBuffersVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IReleaseMarshalBuffersVtbl$Release$LAYOUT() { return IReleaseMarshalBuffersVtbl$Release$LAYOUT_; }

    static final VarHandle IReleaseMarshalBuffersVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IReleaseMarshalBuffersVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IReleaseMarshalBuffersVtbl$Release$VH() { return IReleaseMarshalBuffersVtbl$Release$VH_; }

    static final MemoryLayout IReleaseMarshalBuffersVtbl$ReleaseMarshalBuffer$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IReleaseMarshalBuffersVtbl$ReleaseMarshalBuffer$LAYOUT() { return IReleaseMarshalBuffersVtbl$ReleaseMarshalBuffer$LAYOUT_; }

    static final VarHandle IReleaseMarshalBuffersVtbl$ReleaseMarshalBuffer$VH_ = MemoryHandles.asAddressVarHandle(IReleaseMarshalBuffersVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ReleaseMarshalBuffer")));
    static final java.lang.invoke.VarHandle IReleaseMarshalBuffersVtbl$ReleaseMarshalBuffer$VH() { return IReleaseMarshalBuffersVtbl$ReleaseMarshalBuffer$VH_; }

    static final MemoryLayout IReleaseMarshalBuffers$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IReleaseMarshalBuffers");
    static final jdk.incubator.foreign.MemoryLayout IReleaseMarshalBuffers$struct$LAYOUT() { return IReleaseMarshalBuffers$struct$LAYOUT_; }

    static final MemoryLayout IReleaseMarshalBuffers$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IReleaseMarshalBuffers$lpVtbl$LAYOUT() { return IReleaseMarshalBuffers$lpVtbl$LAYOUT_; }

    static final VarHandle IReleaseMarshalBuffers$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IReleaseMarshalBuffers$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IReleaseMarshalBuffers$lpVtbl$VH() { return IReleaseMarshalBuffers$lpVtbl$VH_; }

    static final MemoryLayout IID_IWaitMultiple$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IWaitMultiple$LAYOUT() { return IID_IWaitMultiple$LAYOUT_; }

    static final MemorySegment IID_IWaitMultiple$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IWaitMultiple", IID_IWaitMultiple$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IWaitMultiple$SEGMENT() { return IID_IWaitMultiple$SEGMENT_; }

    static final MemoryLayout IWaitMultipleVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("WaitMultiple"),
        C_POINTER.withName("AddSynchronize")
    ).withName("IWaitMultipleVtbl");
    static final jdk.incubator.foreign.MemoryLayout IWaitMultipleVtbl$struct$LAYOUT() { return IWaitMultipleVtbl$struct$LAYOUT_; }

    static final MemoryLayout IWaitMultipleVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IWaitMultipleVtbl$QueryInterface$LAYOUT() { return IWaitMultipleVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IWaitMultipleVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IWaitMultipleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IWaitMultipleVtbl$QueryInterface$VH() { return IWaitMultipleVtbl$QueryInterface$VH_; }

    static final MemoryLayout IWaitMultipleVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IWaitMultipleVtbl$AddRef$LAYOUT() { return IWaitMultipleVtbl$AddRef$LAYOUT_; }

    static final VarHandle IWaitMultipleVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IWaitMultipleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IWaitMultipleVtbl$AddRef$VH() { return IWaitMultipleVtbl$AddRef$VH_; }

    static final MemoryLayout IWaitMultipleVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IWaitMultipleVtbl$Release$LAYOUT() { return IWaitMultipleVtbl$Release$LAYOUT_; }

    static final VarHandle IWaitMultipleVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IWaitMultipleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IWaitMultipleVtbl$Release$VH() { return IWaitMultipleVtbl$Release$VH_; }

    static final MemoryLayout IWaitMultipleVtbl$WaitMultiple$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IWaitMultipleVtbl$WaitMultiple$LAYOUT() { return IWaitMultipleVtbl$WaitMultiple$LAYOUT_; }

    static final VarHandle IWaitMultipleVtbl$WaitMultiple$VH_ = MemoryHandles.asAddressVarHandle(IWaitMultipleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("WaitMultiple")));
    static final java.lang.invoke.VarHandle IWaitMultipleVtbl$WaitMultiple$VH() { return IWaitMultipleVtbl$WaitMultiple$VH_; }

    static final MemoryLayout IWaitMultipleVtbl$AddSynchronize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IWaitMultipleVtbl$AddSynchronize$LAYOUT() { return IWaitMultipleVtbl$AddSynchronize$LAYOUT_; }

    static final VarHandle IWaitMultipleVtbl$AddSynchronize$VH_ = MemoryHandles.asAddressVarHandle(IWaitMultipleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddSynchronize")));
    static final java.lang.invoke.VarHandle IWaitMultipleVtbl$AddSynchronize$VH() { return IWaitMultipleVtbl$AddSynchronize$VH_; }

    static final MemoryLayout IWaitMultiple$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IWaitMultiple");
    static final jdk.incubator.foreign.MemoryLayout IWaitMultiple$struct$LAYOUT() { return IWaitMultiple$struct$LAYOUT_; }

    static final MemoryLayout IWaitMultiple$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IWaitMultiple$lpVtbl$LAYOUT() { return IWaitMultiple$lpVtbl$LAYOUT_; }

    static final VarHandle IWaitMultiple$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IWaitMultiple$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IWaitMultiple$lpVtbl$VH() { return IWaitMultiple$lpVtbl$VH_; }

    static final MemoryLayout IID_IAddrTrackingControl$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IAddrTrackingControl$LAYOUT() { return IID_IAddrTrackingControl$LAYOUT_; }

    static final MemorySegment IID_IAddrTrackingControl$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IAddrTrackingControl", IID_IAddrTrackingControl$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IAddrTrackingControl$SEGMENT() { return IID_IAddrTrackingControl$SEGMENT_; }

    static final MemoryLayout IAddrTrackingControlVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("EnableCOMDynamicAddrTracking"),
        C_POINTER.withName("DisableCOMDynamicAddrTracking")
    ).withName("IAddrTrackingControlVtbl");
    static final jdk.incubator.foreign.MemoryLayout IAddrTrackingControlVtbl$struct$LAYOUT() { return IAddrTrackingControlVtbl$struct$LAYOUT_; }

    static final MemoryLayout IAddrTrackingControlVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrTrackingControlVtbl$QueryInterface$LAYOUT() { return IAddrTrackingControlVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IAddrTrackingControlVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IAddrTrackingControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IAddrTrackingControlVtbl$QueryInterface$VH() { return IAddrTrackingControlVtbl$QueryInterface$VH_; }

    static final MemoryLayout IAddrTrackingControlVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrTrackingControlVtbl$AddRef$LAYOUT() { return IAddrTrackingControlVtbl$AddRef$LAYOUT_; }

    static final VarHandle IAddrTrackingControlVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IAddrTrackingControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IAddrTrackingControlVtbl$AddRef$VH() { return IAddrTrackingControlVtbl$AddRef$VH_; }

    static final MemoryLayout IAddrTrackingControlVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrTrackingControlVtbl$Release$LAYOUT() { return IAddrTrackingControlVtbl$Release$LAYOUT_; }

    static final VarHandle IAddrTrackingControlVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IAddrTrackingControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IAddrTrackingControlVtbl$Release$VH() { return IAddrTrackingControlVtbl$Release$VH_; }

    static final MemoryLayout IAddrTrackingControlVtbl$EnableCOMDynamicAddrTracking$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrTrackingControlVtbl$EnableCOMDynamicAddrTracking$LAYOUT() { return IAddrTrackingControlVtbl$EnableCOMDynamicAddrTracking$LAYOUT_; }

    static final VarHandle IAddrTrackingControlVtbl$EnableCOMDynamicAddrTracking$VH_ = MemoryHandles.asAddressVarHandle(IAddrTrackingControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("EnableCOMDynamicAddrTracking")));
    static final java.lang.invoke.VarHandle IAddrTrackingControlVtbl$EnableCOMDynamicAddrTracking$VH() { return IAddrTrackingControlVtbl$EnableCOMDynamicAddrTracking$VH_; }

    static final MemoryLayout IAddrTrackingControlVtbl$DisableCOMDynamicAddrTracking$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrTrackingControlVtbl$DisableCOMDynamicAddrTracking$LAYOUT() { return IAddrTrackingControlVtbl$DisableCOMDynamicAddrTracking$LAYOUT_; }

    static final VarHandle IAddrTrackingControlVtbl$DisableCOMDynamicAddrTracking$VH_ = MemoryHandles.asAddressVarHandle(IAddrTrackingControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DisableCOMDynamicAddrTracking")));
    static final java.lang.invoke.VarHandle IAddrTrackingControlVtbl$DisableCOMDynamicAddrTracking$VH() { return IAddrTrackingControlVtbl$DisableCOMDynamicAddrTracking$VH_; }

    static final MemoryLayout IAddrTrackingControl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IAddrTrackingControl");
    static final jdk.incubator.foreign.MemoryLayout IAddrTrackingControl$struct$LAYOUT() { return IAddrTrackingControl$struct$LAYOUT_; }

    static final MemoryLayout IAddrTrackingControl$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrTrackingControl$lpVtbl$LAYOUT() { return IAddrTrackingControl$lpVtbl$LAYOUT_; }

    static final VarHandle IAddrTrackingControl$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IAddrTrackingControl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IAddrTrackingControl$lpVtbl$VH() { return IAddrTrackingControl$lpVtbl$VH_; }

    static final MemoryLayout IID_IAddrExclusionControl$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IAddrExclusionControl$LAYOUT() { return IID_IAddrExclusionControl$LAYOUT_; }

    static final MemorySegment IID_IAddrExclusionControl$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IAddrExclusionControl", IID_IAddrExclusionControl$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IAddrExclusionControl$SEGMENT() { return IID_IAddrExclusionControl$SEGMENT_; }

    static final MemoryLayout IAddrExclusionControlVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetCurrentAddrExclusionList"),
        C_POINTER.withName("UpdateAddrExclusionList")
    ).withName("IAddrExclusionControlVtbl");
    static final jdk.incubator.foreign.MemoryLayout IAddrExclusionControlVtbl$struct$LAYOUT() { return IAddrExclusionControlVtbl$struct$LAYOUT_; }

    static final MemoryLayout IAddrExclusionControlVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrExclusionControlVtbl$QueryInterface$LAYOUT() { return IAddrExclusionControlVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IAddrExclusionControlVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IAddrExclusionControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IAddrExclusionControlVtbl$QueryInterface$VH() { return IAddrExclusionControlVtbl$QueryInterface$VH_; }

    static final MemoryLayout IAddrExclusionControlVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrExclusionControlVtbl$AddRef$LAYOUT() { return IAddrExclusionControlVtbl$AddRef$LAYOUT_; }

    static final VarHandle IAddrExclusionControlVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IAddrExclusionControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IAddrExclusionControlVtbl$AddRef$VH() { return IAddrExclusionControlVtbl$AddRef$VH_; }

    static final MemoryLayout IAddrExclusionControlVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrExclusionControlVtbl$Release$LAYOUT() { return IAddrExclusionControlVtbl$Release$LAYOUT_; }

    static final VarHandle IAddrExclusionControlVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IAddrExclusionControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IAddrExclusionControlVtbl$Release$VH() { return IAddrExclusionControlVtbl$Release$VH_; }

    static final MemoryLayout IAddrExclusionControlVtbl$GetCurrentAddrExclusionList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrExclusionControlVtbl$GetCurrentAddrExclusionList$LAYOUT() { return IAddrExclusionControlVtbl$GetCurrentAddrExclusionList$LAYOUT_; }

    static final VarHandle IAddrExclusionControlVtbl$GetCurrentAddrExclusionList$VH_ = MemoryHandles.asAddressVarHandle(IAddrExclusionControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCurrentAddrExclusionList")));
    static final java.lang.invoke.VarHandle IAddrExclusionControlVtbl$GetCurrentAddrExclusionList$VH() { return IAddrExclusionControlVtbl$GetCurrentAddrExclusionList$VH_; }

    static final MemoryLayout IAddrExclusionControlVtbl$UpdateAddrExclusionList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrExclusionControlVtbl$UpdateAddrExclusionList$LAYOUT() { return IAddrExclusionControlVtbl$UpdateAddrExclusionList$LAYOUT_; }

    static final VarHandle IAddrExclusionControlVtbl$UpdateAddrExclusionList$VH_ = MemoryHandles.asAddressVarHandle(IAddrExclusionControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UpdateAddrExclusionList")));
    static final java.lang.invoke.VarHandle IAddrExclusionControlVtbl$UpdateAddrExclusionList$VH() { return IAddrExclusionControlVtbl$UpdateAddrExclusionList$VH_; }

    static final MemoryLayout IAddrExclusionControl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IAddrExclusionControl");
    static final jdk.incubator.foreign.MemoryLayout IAddrExclusionControl$struct$LAYOUT() { return IAddrExclusionControl$struct$LAYOUT_; }

    static final MemoryLayout IAddrExclusionControl$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAddrExclusionControl$lpVtbl$LAYOUT() { return IAddrExclusionControl$lpVtbl$LAYOUT_; }

    static final VarHandle IAddrExclusionControl$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IAddrExclusionControl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IAddrExclusionControl$lpVtbl$VH() { return IAddrExclusionControl$lpVtbl$VH_; }

    static final MemoryLayout IID_IPipeByte$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IPipeByte$LAYOUT() { return IID_IPipeByte$LAYOUT_; }

    static final MemorySegment IID_IPipeByte$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IPipeByte", IID_IPipeByte$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IPipeByte$SEGMENT() { return IID_IPipeByte$SEGMENT_; }

    static final MemoryLayout IPipeByteVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Pull"),
        C_POINTER.withName("Push")
    ).withName("IPipeByteVtbl");
    static final jdk.incubator.foreign.MemoryLayout IPipeByteVtbl$struct$LAYOUT() { return IPipeByteVtbl$struct$LAYOUT_; }

    static final MemoryLayout IPipeByteVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeByteVtbl$QueryInterface$LAYOUT() { return IPipeByteVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IPipeByteVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IPipeByteVtbl$QueryInterface$VH() { return IPipeByteVtbl$QueryInterface$VH_; }

    static final MemoryLayout IPipeByteVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeByteVtbl$AddRef$LAYOUT() { return IPipeByteVtbl$AddRef$LAYOUT_; }

    static final VarHandle IPipeByteVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IPipeByteVtbl$AddRef$VH() { return IPipeByteVtbl$AddRef$VH_; }

    static final MemoryLayout IPipeByteVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeByteVtbl$Release$LAYOUT() { return IPipeByteVtbl$Release$LAYOUT_; }

    static final VarHandle IPipeByteVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IPipeByteVtbl$Release$VH() { return IPipeByteVtbl$Release$VH_; }

    static final MemoryLayout IPipeByteVtbl$Pull$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeByteVtbl$Pull$LAYOUT() { return IPipeByteVtbl$Pull$LAYOUT_; }

    static final VarHandle IPipeByteVtbl$Pull$VH_ = MemoryHandles.asAddressVarHandle(IPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Pull")));
    static final java.lang.invoke.VarHandle IPipeByteVtbl$Pull$VH() { return IPipeByteVtbl$Pull$VH_; }

    static final MemoryLayout IPipeByteVtbl$Push$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeByteVtbl$Push$LAYOUT() { return IPipeByteVtbl$Push$LAYOUT_; }

    static final VarHandle IPipeByteVtbl$Push$VH_ = MemoryHandles.asAddressVarHandle(IPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Push")));
    static final java.lang.invoke.VarHandle IPipeByteVtbl$Push$VH() { return IPipeByteVtbl$Push$VH_; }

    static final MemoryLayout IPipeByte$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IPipeByte");
    static final jdk.incubator.foreign.MemoryLayout IPipeByte$struct$LAYOUT() { return IPipeByte$struct$LAYOUT_; }

    static final MemoryLayout IPipeByte$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeByte$lpVtbl$LAYOUT() { return IPipeByte$lpVtbl$LAYOUT_; }

    static final VarHandle IPipeByte$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IPipeByte$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IPipeByte$lpVtbl$VH() { return IPipeByte$lpVtbl$VH_; }

    static final MemoryLayout IID_AsyncIPipeByte$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_AsyncIPipeByte$LAYOUT() { return IID_AsyncIPipeByte$LAYOUT_; }

    static final MemorySegment IID_AsyncIPipeByte$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_AsyncIPipeByte", IID_AsyncIPipeByte$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_AsyncIPipeByte$SEGMENT() { return IID_AsyncIPipeByte$SEGMENT_; }

    static final MemoryLayout AsyncIPipeByteVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Begin_Pull"),
        C_POINTER.withName("Finish_Pull"),
        C_POINTER.withName("Begin_Push"),
        C_POINTER.withName("Finish_Push")
    ).withName("AsyncIPipeByteVtbl");
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByteVtbl$struct$LAYOUT() { return AsyncIPipeByteVtbl$struct$LAYOUT_; }

    static final MemoryLayout AsyncIPipeByteVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByteVtbl$QueryInterface$LAYOUT() { return AsyncIPipeByteVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle AsyncIPipeByteVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle AsyncIPipeByteVtbl$QueryInterface$VH() { return AsyncIPipeByteVtbl$QueryInterface$VH_; }

    static final MemoryLayout AsyncIPipeByteVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByteVtbl$AddRef$LAYOUT() { return AsyncIPipeByteVtbl$AddRef$LAYOUT_; }

    static final VarHandle AsyncIPipeByteVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle AsyncIPipeByteVtbl$AddRef$VH() { return AsyncIPipeByteVtbl$AddRef$VH_; }

    static final MemoryLayout AsyncIPipeByteVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByteVtbl$Release$LAYOUT() { return AsyncIPipeByteVtbl$Release$LAYOUT_; }

    static final VarHandle AsyncIPipeByteVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle AsyncIPipeByteVtbl$Release$VH() { return AsyncIPipeByteVtbl$Release$VH_; }

    static final MemoryLayout AsyncIPipeByteVtbl$Begin_Pull$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByteVtbl$Begin_Pull$LAYOUT() { return AsyncIPipeByteVtbl$Begin_Pull$LAYOUT_; }

    static final VarHandle AsyncIPipeByteVtbl$Begin_Pull$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Begin_Pull")));
    static final java.lang.invoke.VarHandle AsyncIPipeByteVtbl$Begin_Pull$VH() { return AsyncIPipeByteVtbl$Begin_Pull$VH_; }

    static final MemoryLayout AsyncIPipeByteVtbl$Finish_Pull$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByteVtbl$Finish_Pull$LAYOUT() { return AsyncIPipeByteVtbl$Finish_Pull$LAYOUT_; }

    static final VarHandle AsyncIPipeByteVtbl$Finish_Pull$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Finish_Pull")));
    static final java.lang.invoke.VarHandle AsyncIPipeByteVtbl$Finish_Pull$VH() { return AsyncIPipeByteVtbl$Finish_Pull$VH_; }

    static final MemoryLayout AsyncIPipeByteVtbl$Begin_Push$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByteVtbl$Begin_Push$LAYOUT() { return AsyncIPipeByteVtbl$Begin_Push$LAYOUT_; }

    static final VarHandle AsyncIPipeByteVtbl$Begin_Push$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Begin_Push")));
    static final java.lang.invoke.VarHandle AsyncIPipeByteVtbl$Begin_Push$VH() { return AsyncIPipeByteVtbl$Begin_Push$VH_; }

    static final MemoryLayout AsyncIPipeByteVtbl$Finish_Push$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByteVtbl$Finish_Push$LAYOUT() { return AsyncIPipeByteVtbl$Finish_Push$LAYOUT_; }

    static final VarHandle AsyncIPipeByteVtbl$Finish_Push$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeByteVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Finish_Push")));
    static final java.lang.invoke.VarHandle AsyncIPipeByteVtbl$Finish_Push$VH() { return AsyncIPipeByteVtbl$Finish_Push$VH_; }

    static final MemoryLayout AsyncIPipeByte$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("AsyncIPipeByte");
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByte$struct$LAYOUT() { return AsyncIPipeByte$struct$LAYOUT_; }

    static final MemoryLayout AsyncIPipeByte$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeByte$lpVtbl$LAYOUT() { return AsyncIPipeByte$lpVtbl$LAYOUT_; }

    static final VarHandle AsyncIPipeByte$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeByte$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle AsyncIPipeByte$lpVtbl$VH() { return AsyncIPipeByte$lpVtbl$VH_; }

    static final MemoryLayout IID_IPipeLong$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IPipeLong$LAYOUT() { return IID_IPipeLong$LAYOUT_; }

    static final MemorySegment IID_IPipeLong$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IPipeLong", IID_IPipeLong$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IPipeLong$SEGMENT() { return IID_IPipeLong$SEGMENT_; }

    static final MemoryLayout IPipeLongVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Pull"),
        C_POINTER.withName("Push")
    ).withName("IPipeLongVtbl");
    static final jdk.incubator.foreign.MemoryLayout IPipeLongVtbl$struct$LAYOUT() { return IPipeLongVtbl$struct$LAYOUT_; }

    static final MemoryLayout IPipeLongVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeLongVtbl$QueryInterface$LAYOUT() { return IPipeLongVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IPipeLongVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IPipeLongVtbl$QueryInterface$VH() { return IPipeLongVtbl$QueryInterface$VH_; }

    static final MemoryLayout IPipeLongVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeLongVtbl$AddRef$LAYOUT() { return IPipeLongVtbl$AddRef$LAYOUT_; }

    static final VarHandle IPipeLongVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IPipeLongVtbl$AddRef$VH() { return IPipeLongVtbl$AddRef$VH_; }

    static final MemoryLayout IPipeLongVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeLongVtbl$Release$LAYOUT() { return IPipeLongVtbl$Release$LAYOUT_; }

    static final VarHandle IPipeLongVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IPipeLongVtbl$Release$VH() { return IPipeLongVtbl$Release$VH_; }

    static final MemoryLayout IPipeLongVtbl$Pull$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeLongVtbl$Pull$LAYOUT() { return IPipeLongVtbl$Pull$LAYOUT_; }

    static final VarHandle IPipeLongVtbl$Pull$VH_ = MemoryHandles.asAddressVarHandle(IPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Pull")));
    static final java.lang.invoke.VarHandle IPipeLongVtbl$Pull$VH() { return IPipeLongVtbl$Pull$VH_; }

    static final MemoryLayout IPipeLongVtbl$Push$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeLongVtbl$Push$LAYOUT() { return IPipeLongVtbl$Push$LAYOUT_; }

    static final VarHandle IPipeLongVtbl$Push$VH_ = MemoryHandles.asAddressVarHandle(IPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Push")));
    static final java.lang.invoke.VarHandle IPipeLongVtbl$Push$VH() { return IPipeLongVtbl$Push$VH_; }

    static final MemoryLayout IPipeLong$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IPipeLong");
    static final jdk.incubator.foreign.MemoryLayout IPipeLong$struct$LAYOUT() { return IPipeLong$struct$LAYOUT_; }

    static final MemoryLayout IPipeLong$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeLong$lpVtbl$LAYOUT() { return IPipeLong$lpVtbl$LAYOUT_; }

    static final VarHandle IPipeLong$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IPipeLong$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IPipeLong$lpVtbl$VH() { return IPipeLong$lpVtbl$VH_; }

    static final MemoryLayout IID_AsyncIPipeLong$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_AsyncIPipeLong$LAYOUT() { return IID_AsyncIPipeLong$LAYOUT_; }

    static final MemorySegment IID_AsyncIPipeLong$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_AsyncIPipeLong", IID_AsyncIPipeLong$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_AsyncIPipeLong$SEGMENT() { return IID_AsyncIPipeLong$SEGMENT_; }

    static final MemoryLayout AsyncIPipeLongVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Begin_Pull"),
        C_POINTER.withName("Finish_Pull"),
        C_POINTER.withName("Begin_Push"),
        C_POINTER.withName("Finish_Push")
    ).withName("AsyncIPipeLongVtbl");
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLongVtbl$struct$LAYOUT() { return AsyncIPipeLongVtbl$struct$LAYOUT_; }

    static final MemoryLayout AsyncIPipeLongVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLongVtbl$QueryInterface$LAYOUT() { return AsyncIPipeLongVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle AsyncIPipeLongVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle AsyncIPipeLongVtbl$QueryInterface$VH() { return AsyncIPipeLongVtbl$QueryInterface$VH_; }

    static final MemoryLayout AsyncIPipeLongVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLongVtbl$AddRef$LAYOUT() { return AsyncIPipeLongVtbl$AddRef$LAYOUT_; }

    static final VarHandle AsyncIPipeLongVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle AsyncIPipeLongVtbl$AddRef$VH() { return AsyncIPipeLongVtbl$AddRef$VH_; }

    static final MemoryLayout AsyncIPipeLongVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLongVtbl$Release$LAYOUT() { return AsyncIPipeLongVtbl$Release$LAYOUT_; }

    static final VarHandle AsyncIPipeLongVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle AsyncIPipeLongVtbl$Release$VH() { return AsyncIPipeLongVtbl$Release$VH_; }

    static final MemoryLayout AsyncIPipeLongVtbl$Begin_Pull$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLongVtbl$Begin_Pull$LAYOUT() { return AsyncIPipeLongVtbl$Begin_Pull$LAYOUT_; }

    static final VarHandle AsyncIPipeLongVtbl$Begin_Pull$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Begin_Pull")));
    static final java.lang.invoke.VarHandle AsyncIPipeLongVtbl$Begin_Pull$VH() { return AsyncIPipeLongVtbl$Begin_Pull$VH_; }

    static final MemoryLayout AsyncIPipeLongVtbl$Finish_Pull$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLongVtbl$Finish_Pull$LAYOUT() { return AsyncIPipeLongVtbl$Finish_Pull$LAYOUT_; }

    static final VarHandle AsyncIPipeLongVtbl$Finish_Pull$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Finish_Pull")));
    static final java.lang.invoke.VarHandle AsyncIPipeLongVtbl$Finish_Pull$VH() { return AsyncIPipeLongVtbl$Finish_Pull$VH_; }

    static final MemoryLayout AsyncIPipeLongVtbl$Begin_Push$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLongVtbl$Begin_Push$LAYOUT() { return AsyncIPipeLongVtbl$Begin_Push$LAYOUT_; }

    static final VarHandle AsyncIPipeLongVtbl$Begin_Push$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Begin_Push")));
    static final java.lang.invoke.VarHandle AsyncIPipeLongVtbl$Begin_Push$VH() { return AsyncIPipeLongVtbl$Begin_Push$VH_; }

    static final MemoryLayout AsyncIPipeLongVtbl$Finish_Push$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLongVtbl$Finish_Push$LAYOUT() { return AsyncIPipeLongVtbl$Finish_Push$LAYOUT_; }

    static final VarHandle AsyncIPipeLongVtbl$Finish_Push$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeLongVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Finish_Push")));
    static final java.lang.invoke.VarHandle AsyncIPipeLongVtbl$Finish_Push$VH() { return AsyncIPipeLongVtbl$Finish_Push$VH_; }

    static final MemoryLayout AsyncIPipeLong$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("AsyncIPipeLong");
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLong$struct$LAYOUT() { return AsyncIPipeLong$struct$LAYOUT_; }

    static final MemoryLayout AsyncIPipeLong$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeLong$lpVtbl$LAYOUT() { return AsyncIPipeLong$lpVtbl$LAYOUT_; }

    static final VarHandle AsyncIPipeLong$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeLong$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle AsyncIPipeLong$lpVtbl$VH() { return AsyncIPipeLong$lpVtbl$VH_; }

    static final MemoryLayout IID_IPipeDouble$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IPipeDouble$LAYOUT() { return IID_IPipeDouble$LAYOUT_; }

    static final MemorySegment IID_IPipeDouble$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IPipeDouble", IID_IPipeDouble$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IPipeDouble$SEGMENT() { return IID_IPipeDouble$SEGMENT_; }

    static final MemoryLayout IPipeDoubleVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Pull"),
        C_POINTER.withName("Push")
    ).withName("IPipeDoubleVtbl");
    static final jdk.incubator.foreign.MemoryLayout IPipeDoubleVtbl$struct$LAYOUT() { return IPipeDoubleVtbl$struct$LAYOUT_; }

    static final MemoryLayout IPipeDoubleVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeDoubleVtbl$QueryInterface$LAYOUT() { return IPipeDoubleVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IPipeDoubleVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IPipeDoubleVtbl$QueryInterface$VH() { return IPipeDoubleVtbl$QueryInterface$VH_; }

    static final MemoryLayout IPipeDoubleVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeDoubleVtbl$AddRef$LAYOUT() { return IPipeDoubleVtbl$AddRef$LAYOUT_; }

    static final VarHandle IPipeDoubleVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IPipeDoubleVtbl$AddRef$VH() { return IPipeDoubleVtbl$AddRef$VH_; }

    static final MemoryLayout IPipeDoubleVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeDoubleVtbl$Release$LAYOUT() { return IPipeDoubleVtbl$Release$LAYOUT_; }

    static final VarHandle IPipeDoubleVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IPipeDoubleVtbl$Release$VH() { return IPipeDoubleVtbl$Release$VH_; }

    static final MemoryLayout IPipeDoubleVtbl$Pull$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeDoubleVtbl$Pull$LAYOUT() { return IPipeDoubleVtbl$Pull$LAYOUT_; }

    static final VarHandle IPipeDoubleVtbl$Pull$VH_ = MemoryHandles.asAddressVarHandle(IPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Pull")));
    static final java.lang.invoke.VarHandle IPipeDoubleVtbl$Pull$VH() { return IPipeDoubleVtbl$Pull$VH_; }

    static final MemoryLayout IPipeDoubleVtbl$Push$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeDoubleVtbl$Push$LAYOUT() { return IPipeDoubleVtbl$Push$LAYOUT_; }

    static final VarHandle IPipeDoubleVtbl$Push$VH_ = MemoryHandles.asAddressVarHandle(IPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Push")));
    static final java.lang.invoke.VarHandle IPipeDoubleVtbl$Push$VH() { return IPipeDoubleVtbl$Push$VH_; }

    static final MemoryLayout IPipeDouble$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IPipeDouble");
    static final jdk.incubator.foreign.MemoryLayout IPipeDouble$struct$LAYOUT() { return IPipeDouble$struct$LAYOUT_; }

    static final MemoryLayout IPipeDouble$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IPipeDouble$lpVtbl$LAYOUT() { return IPipeDouble$lpVtbl$LAYOUT_; }

    static final VarHandle IPipeDouble$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IPipeDouble$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IPipeDouble$lpVtbl$VH() { return IPipeDouble$lpVtbl$VH_; }

    static final MemoryLayout IID_AsyncIPipeDouble$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_AsyncIPipeDouble$LAYOUT() { return IID_AsyncIPipeDouble$LAYOUT_; }

    static final MemorySegment IID_AsyncIPipeDouble$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_AsyncIPipeDouble", IID_AsyncIPipeDouble$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_AsyncIPipeDouble$SEGMENT() { return IID_AsyncIPipeDouble$SEGMENT_; }

    static final MemoryLayout AsyncIPipeDoubleVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Begin_Pull"),
        C_POINTER.withName("Finish_Pull"),
        C_POINTER.withName("Begin_Push"),
        C_POINTER.withName("Finish_Push")
    ).withName("AsyncIPipeDoubleVtbl");
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDoubleVtbl$struct$LAYOUT() { return AsyncIPipeDoubleVtbl$struct$LAYOUT_; }

    static final MemoryLayout AsyncIPipeDoubleVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDoubleVtbl$QueryInterface$LAYOUT() { return AsyncIPipeDoubleVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle AsyncIPipeDoubleVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle AsyncIPipeDoubleVtbl$QueryInterface$VH() { return AsyncIPipeDoubleVtbl$QueryInterface$VH_; }

    static final MemoryLayout AsyncIPipeDoubleVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDoubleVtbl$AddRef$LAYOUT() { return AsyncIPipeDoubleVtbl$AddRef$LAYOUT_; }

    static final VarHandle AsyncIPipeDoubleVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle AsyncIPipeDoubleVtbl$AddRef$VH() { return AsyncIPipeDoubleVtbl$AddRef$VH_; }

    static final MemoryLayout AsyncIPipeDoubleVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDoubleVtbl$Release$LAYOUT() { return AsyncIPipeDoubleVtbl$Release$LAYOUT_; }

    static final VarHandle AsyncIPipeDoubleVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle AsyncIPipeDoubleVtbl$Release$VH() { return AsyncIPipeDoubleVtbl$Release$VH_; }

    static final MemoryLayout AsyncIPipeDoubleVtbl$Begin_Pull$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDoubleVtbl$Begin_Pull$LAYOUT() { return AsyncIPipeDoubleVtbl$Begin_Pull$LAYOUT_; }

    static final VarHandle AsyncIPipeDoubleVtbl$Begin_Pull$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Begin_Pull")));
    static final java.lang.invoke.VarHandle AsyncIPipeDoubleVtbl$Begin_Pull$VH() { return AsyncIPipeDoubleVtbl$Begin_Pull$VH_; }

    static final MemoryLayout AsyncIPipeDoubleVtbl$Finish_Pull$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDoubleVtbl$Finish_Pull$LAYOUT() { return AsyncIPipeDoubleVtbl$Finish_Pull$LAYOUT_; }

    static final VarHandle AsyncIPipeDoubleVtbl$Finish_Pull$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Finish_Pull")));
    static final java.lang.invoke.VarHandle AsyncIPipeDoubleVtbl$Finish_Pull$VH() { return AsyncIPipeDoubleVtbl$Finish_Pull$VH_; }

    static final MemoryLayout AsyncIPipeDoubleVtbl$Begin_Push$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDoubleVtbl$Begin_Push$LAYOUT() { return AsyncIPipeDoubleVtbl$Begin_Push$LAYOUT_; }

    static final VarHandle AsyncIPipeDoubleVtbl$Begin_Push$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Begin_Push")));
    static final java.lang.invoke.VarHandle AsyncIPipeDoubleVtbl$Begin_Push$VH() { return AsyncIPipeDoubleVtbl$Begin_Push$VH_; }

    static final MemoryLayout AsyncIPipeDoubleVtbl$Finish_Push$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDoubleVtbl$Finish_Push$LAYOUT() { return AsyncIPipeDoubleVtbl$Finish_Push$LAYOUT_; }

    static final VarHandle AsyncIPipeDoubleVtbl$Finish_Push$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeDoubleVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Finish_Push")));
    static final java.lang.invoke.VarHandle AsyncIPipeDoubleVtbl$Finish_Push$VH() { return AsyncIPipeDoubleVtbl$Finish_Push$VH_; }

    static final MemoryLayout AsyncIPipeDouble$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("AsyncIPipeDouble");
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDouble$struct$LAYOUT() { return AsyncIPipeDouble$struct$LAYOUT_; }

    static final MemoryLayout AsyncIPipeDouble$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout AsyncIPipeDouble$lpVtbl$LAYOUT() { return AsyncIPipeDouble$lpVtbl$LAYOUT_; }

    static final VarHandle AsyncIPipeDouble$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(AsyncIPipeDouble$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle AsyncIPipeDouble$lpVtbl$VH() { return AsyncIPipeDouble$lpVtbl$VH_; }

    static final int APTTYPEQUALIFIER_NONE() { return (int)0L; }

    static final int APTTYPEQUALIFIER_IMPLICIT_MTA() { return (int)1L; }

    static final int APTTYPEQUALIFIER_NA_ON_MTA() { return (int)2L; }

    static final int APTTYPEQUALIFIER_NA_ON_STA() { return (int)3L; }

    static final int APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA() { return (int)4L; }

    static final int APTTYPEQUALIFIER_NA_ON_MAINSTA() { return (int)5L; }

    static final int APTTYPEQUALIFIER_APPLICATION_STA() { return (int)6L; }

    static final int APTTYPEQUALIFIER_RESERVED_1() { return (int)7L; }

    static final int APTTYPE_CURRENT() { return (int)-1L; }

    static final int APTTYPE_STA() { return (int)0L; }

    static final int APTTYPE_MTA() { return (int)1L; }

    static final int APTTYPE_NA() { return (int)2L; }

    static final int APTTYPE_MAINSTA() { return (int)3L; }

    static final int THDTYPE_BLOCKMESSAGES() { return (int)0L; }

    static final int THDTYPE_PROCESSMESSAGES() { return (int)1L; }

    static final MemoryLayout __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$VH() { return __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec", __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$VH() { return __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec", __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IComThreadingInfo$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IComThreadingInfo$LAYOUT() { return IID_IComThreadingInfo$LAYOUT_; }

    static final MemorySegment IID_IComThreadingInfo$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IComThreadingInfo", IID_IComThreadingInfo$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IComThreadingInfo$SEGMENT() { return IID_IComThreadingInfo$SEGMENT_; }

    static final MemoryLayout IComThreadingInfoVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("GetCurrentApartmentType"),
        C_POINTER.withName("GetCurrentThreadType"),
        C_POINTER.withName("GetCurrentLogicalThreadId"),
        C_POINTER.withName("SetCurrentLogicalThreadId")
    ).withName("IComThreadingInfoVtbl");
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfoVtbl$struct$LAYOUT() { return IComThreadingInfoVtbl$struct$LAYOUT_; }

    static final MemoryLayout IComThreadingInfoVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfoVtbl$QueryInterface$LAYOUT() { return IComThreadingInfoVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IComThreadingInfoVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IComThreadingInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IComThreadingInfoVtbl$QueryInterface$VH() { return IComThreadingInfoVtbl$QueryInterface$VH_; }

    static final MemoryLayout IComThreadingInfoVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfoVtbl$AddRef$LAYOUT() { return IComThreadingInfoVtbl$AddRef$LAYOUT_; }

    static final VarHandle IComThreadingInfoVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IComThreadingInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IComThreadingInfoVtbl$AddRef$VH() { return IComThreadingInfoVtbl$AddRef$VH_; }

    static final MemoryLayout IComThreadingInfoVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfoVtbl$Release$LAYOUT() { return IComThreadingInfoVtbl$Release$LAYOUT_; }

    static final VarHandle IComThreadingInfoVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IComThreadingInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IComThreadingInfoVtbl$Release$VH() { return IComThreadingInfoVtbl$Release$VH_; }

    static final MemoryLayout IComThreadingInfoVtbl$GetCurrentApartmentType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfoVtbl$GetCurrentApartmentType$LAYOUT() { return IComThreadingInfoVtbl$GetCurrentApartmentType$LAYOUT_; }

    static final VarHandle IComThreadingInfoVtbl$GetCurrentApartmentType$VH_ = MemoryHandles.asAddressVarHandle(IComThreadingInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCurrentApartmentType")));
    static final java.lang.invoke.VarHandle IComThreadingInfoVtbl$GetCurrentApartmentType$VH() { return IComThreadingInfoVtbl$GetCurrentApartmentType$VH_; }

    static final MemoryLayout IComThreadingInfoVtbl$GetCurrentThreadType$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfoVtbl$GetCurrentThreadType$LAYOUT() { return IComThreadingInfoVtbl$GetCurrentThreadType$LAYOUT_; }

    static final VarHandle IComThreadingInfoVtbl$GetCurrentThreadType$VH_ = MemoryHandles.asAddressVarHandle(IComThreadingInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCurrentThreadType")));
    static final java.lang.invoke.VarHandle IComThreadingInfoVtbl$GetCurrentThreadType$VH() { return IComThreadingInfoVtbl$GetCurrentThreadType$VH_; }

    static final MemoryLayout IComThreadingInfoVtbl$GetCurrentLogicalThreadId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfoVtbl$GetCurrentLogicalThreadId$LAYOUT() { return IComThreadingInfoVtbl$GetCurrentLogicalThreadId$LAYOUT_; }

    static final VarHandle IComThreadingInfoVtbl$GetCurrentLogicalThreadId$VH_ = MemoryHandles.asAddressVarHandle(IComThreadingInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetCurrentLogicalThreadId")));
    static final java.lang.invoke.VarHandle IComThreadingInfoVtbl$GetCurrentLogicalThreadId$VH() { return IComThreadingInfoVtbl$GetCurrentLogicalThreadId$VH_; }

    static final MemoryLayout IComThreadingInfoVtbl$SetCurrentLogicalThreadId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfoVtbl$SetCurrentLogicalThreadId$LAYOUT() { return IComThreadingInfoVtbl$SetCurrentLogicalThreadId$LAYOUT_; }

    static final VarHandle IComThreadingInfoVtbl$SetCurrentLogicalThreadId$VH_ = MemoryHandles.asAddressVarHandle(IComThreadingInfoVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetCurrentLogicalThreadId")));
    static final java.lang.invoke.VarHandle IComThreadingInfoVtbl$SetCurrentLogicalThreadId$VH() { return IComThreadingInfoVtbl$SetCurrentLogicalThreadId$VH_; }

    static final MemoryLayout IComThreadingInfo$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IComThreadingInfo");
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfo$struct$LAYOUT() { return IComThreadingInfo$struct$LAYOUT_; }

    static final MemoryLayout IComThreadingInfo$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IComThreadingInfo$lpVtbl$LAYOUT() { return IComThreadingInfo$lpVtbl$LAYOUT_; }

    static final VarHandle IComThreadingInfo$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IComThreadingInfo$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IComThreadingInfo$lpVtbl$VH() { return IComThreadingInfo$lpVtbl$VH_; }

    static final MemoryLayout IID_IProcessInitControl$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IProcessInitControl$LAYOUT() { return IID_IProcessInitControl$LAYOUT_; }

    static final MemorySegment IID_IProcessInitControl$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IProcessInitControl", IID_IProcessInitControl$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IProcessInitControl$SEGMENT() { return IID_IProcessInitControl$SEGMENT_; }

    static final MemoryLayout IProcessInitControlVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("ResetInitializerTimeout")
    ).withName("IProcessInitControlVtbl");
    static final jdk.incubator.foreign.MemoryLayout IProcessInitControlVtbl$struct$LAYOUT() { return IProcessInitControlVtbl$struct$LAYOUT_; }

    static final MemoryLayout IProcessInitControlVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IProcessInitControlVtbl$QueryInterface$LAYOUT() { return IProcessInitControlVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IProcessInitControlVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IProcessInitControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IProcessInitControlVtbl$QueryInterface$VH() { return IProcessInitControlVtbl$QueryInterface$VH_; }

    static final MemoryLayout IProcessInitControlVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IProcessInitControlVtbl$AddRef$LAYOUT() { return IProcessInitControlVtbl$AddRef$LAYOUT_; }

    static final VarHandle IProcessInitControlVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IProcessInitControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IProcessInitControlVtbl$AddRef$VH() { return IProcessInitControlVtbl$AddRef$VH_; }

    static final MemoryLayout IProcessInitControlVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IProcessInitControlVtbl$Release$LAYOUT() { return IProcessInitControlVtbl$Release$LAYOUT_; }

    static final VarHandle IProcessInitControlVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IProcessInitControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IProcessInitControlVtbl$Release$VH() { return IProcessInitControlVtbl$Release$VH_; }

    static final MemoryLayout IProcessInitControlVtbl$ResetInitializerTimeout$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IProcessInitControlVtbl$ResetInitializerTimeout$LAYOUT() { return IProcessInitControlVtbl$ResetInitializerTimeout$LAYOUT_; }

    static final VarHandle IProcessInitControlVtbl$ResetInitializerTimeout$VH_ = MemoryHandles.asAddressVarHandle(IProcessInitControlVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ResetInitializerTimeout")));
    static final java.lang.invoke.VarHandle IProcessInitControlVtbl$ResetInitializerTimeout$VH() { return IProcessInitControlVtbl$ResetInitializerTimeout$VH_; }

    static final MemoryLayout IProcessInitControl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IProcessInitControl");
    static final jdk.incubator.foreign.MemoryLayout IProcessInitControl$struct$LAYOUT() { return IProcessInitControl$struct$LAYOUT_; }

    static final MemoryLayout IProcessInitControl$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IProcessInitControl$lpVtbl$LAYOUT() { return IProcessInitControl$lpVtbl$LAYOUT_; }

    static final VarHandle IProcessInitControl$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IProcessInitControl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IProcessInitControl$lpVtbl$VH() { return IProcessInitControl$lpVtbl$VH_; }

    static final MemoryLayout IID_IFastRundown$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IFastRundown$LAYOUT() { return IID_IFastRundown$LAYOUT_; }

    static final MemorySegment IID_IFastRundown$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IFastRundown", IID_IFastRundown$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IFastRundown$SEGMENT() { return IID_IFastRundown$SEGMENT_; }

    static final MemoryLayout IFastRundownVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release")
    ).withName("IFastRundownVtbl");
    static final jdk.incubator.foreign.MemoryLayout IFastRundownVtbl$struct$LAYOUT() { return IFastRundownVtbl$struct$LAYOUT_; }

    static final MemoryLayout IFastRundownVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IFastRundownVtbl$QueryInterface$LAYOUT() { return IFastRundownVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IFastRundownVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IFastRundownVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IFastRundownVtbl$QueryInterface$VH() { return IFastRundownVtbl$QueryInterface$VH_; }

    static final MemoryLayout IFastRundownVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IFastRundownVtbl$AddRef$LAYOUT() { return IFastRundownVtbl$AddRef$LAYOUT_; }

    static final VarHandle IFastRundownVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IFastRundownVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IFastRundownVtbl$AddRef$VH() { return IFastRundownVtbl$AddRef$VH_; }

    static final MemoryLayout IFastRundownVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IFastRundownVtbl$Release$LAYOUT() { return IFastRundownVtbl$Release$LAYOUT_; }

    static final VarHandle IFastRundownVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IFastRundownVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IFastRundownVtbl$Release$VH() { return IFastRundownVtbl$Release$VH_; }

    static final MemoryLayout IFastRundown$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IFastRundown");
    static final jdk.incubator.foreign.MemoryLayout IFastRundown$struct$LAYOUT() { return IFastRundown$struct$LAYOUT_; }

    static final MemoryLayout IFastRundown$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IFastRundown$lpVtbl$LAYOUT() { return IFastRundown$lpVtbl$LAYOUT_; }

    static final VarHandle IFastRundown$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IFastRundown$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IFastRundown$lpVtbl$VH() { return IFastRundown$lpVtbl$VH_; }

    static final int CO_MARSHALING_SOURCE_IS_APP_CONTAINER() { return (int)0L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1() { return (int)-2147483648L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2() { return (int)-2147483647L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3() { return (int)-2147483646L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4() { return (int)-2147483645L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5() { return (int)-2147483644L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6() { return (int)-2147483643L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7() { return (int)-2147483642L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8() { return (int)-2147483641L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9() { return (int)-2147483640L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10() { return (int)-2147483639L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11() { return (int)-2147483638L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12() { return (int)-2147483637L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13() { return (int)-2147483636L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14() { return (int)-2147483635L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15() { return (int)-2147483634L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16() { return (int)-2147483633L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17() { return (int)-2147483632L; }

    static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18() { return (int)-2147483631L; }

    static final MemoryLayout __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$VH() { return __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec", __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$VH() { return __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec", __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IMarshalingStream$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IMarshalingStream$LAYOUT() { return IID_IMarshalingStream$LAYOUT_; }

    static final MemorySegment IID_IMarshalingStream$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IMarshalingStream", IID_IMarshalingStream$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IMarshalingStream$SEGMENT() { return IID_IMarshalingStream$SEGMENT_; }

    static final MemoryLayout IMarshalingStreamVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Read"),
        C_POINTER.withName("Write"),
        C_POINTER.withName("Seek"),
        C_POINTER.withName("SetSize"),
        C_POINTER.withName("CopyTo"),
        C_POINTER.withName("Commit"),
        C_POINTER.withName("Revert"),
        C_POINTER.withName("LockRegion"),
        C_POINTER.withName("UnlockRegion"),
        C_POINTER.withName("Stat"),
        C_POINTER.withName("Clone"),
        C_POINTER.withName("GetMarshalingContextAttribute")
    ).withName("IMarshalingStreamVtbl");
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$struct$LAYOUT() { return IMarshalingStreamVtbl$struct$LAYOUT_; }

    static final MemoryLayout IMarshalingStreamVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$QueryInterface$LAYOUT() { return IMarshalingStreamVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$QueryInterface$VH() { return IMarshalingStreamVtbl$QueryInterface$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$AddRef$LAYOUT() { return IMarshalingStreamVtbl$AddRef$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$AddRef$VH() { return IMarshalingStreamVtbl$AddRef$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$Release$LAYOUT() { return IMarshalingStreamVtbl$Release$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$Release$VH() { return IMarshalingStreamVtbl$Release$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$Read$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$Read$LAYOUT() { return IMarshalingStreamVtbl$Read$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$Read$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Read")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$Read$VH() { return IMarshalingStreamVtbl$Read$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$Write$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$Write$LAYOUT() { return IMarshalingStreamVtbl$Write$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$Write$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Write")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$Write$VH() { return IMarshalingStreamVtbl$Write$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$Seek$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$Seek$LAYOUT() { return IMarshalingStreamVtbl$Seek$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$Seek$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Seek")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$Seek$VH() { return IMarshalingStreamVtbl$Seek$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$SetSize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$SetSize$LAYOUT() { return IMarshalingStreamVtbl$SetSize$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$SetSize$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SetSize")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$SetSize$VH() { return IMarshalingStreamVtbl$SetSize$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$CopyTo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$CopyTo$LAYOUT() { return IMarshalingStreamVtbl$CopyTo$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$CopyTo$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CopyTo")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$CopyTo$VH() { return IMarshalingStreamVtbl$CopyTo$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$Commit$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$Commit$LAYOUT() { return IMarshalingStreamVtbl$Commit$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$Commit$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Commit")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$Commit$VH() { return IMarshalingStreamVtbl$Commit$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$Revert$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$Revert$LAYOUT() { return IMarshalingStreamVtbl$Revert$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$Revert$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Revert")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$Revert$VH() { return IMarshalingStreamVtbl$Revert$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$LockRegion$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$LockRegion$LAYOUT() { return IMarshalingStreamVtbl$LockRegion$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$LockRegion$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LockRegion")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$LockRegion$VH() { return IMarshalingStreamVtbl$LockRegion$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$UnlockRegion$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$UnlockRegion$LAYOUT() { return IMarshalingStreamVtbl$UnlockRegion$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$UnlockRegion$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnlockRegion")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$UnlockRegion$VH() { return IMarshalingStreamVtbl$UnlockRegion$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$Stat$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$Stat$LAYOUT() { return IMarshalingStreamVtbl$Stat$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$Stat$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Stat")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$Stat$VH() { return IMarshalingStreamVtbl$Stat$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$Clone$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$Clone$LAYOUT() { return IMarshalingStreamVtbl$Clone$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$Clone$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Clone")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$Clone$VH() { return IMarshalingStreamVtbl$Clone$VH_; }

    static final MemoryLayout IMarshalingStreamVtbl$GetMarshalingContextAttribute$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStreamVtbl$GetMarshalingContextAttribute$LAYOUT() { return IMarshalingStreamVtbl$GetMarshalingContextAttribute$LAYOUT_; }

    static final VarHandle IMarshalingStreamVtbl$GetMarshalingContextAttribute$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStreamVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("GetMarshalingContextAttribute")));
    static final java.lang.invoke.VarHandle IMarshalingStreamVtbl$GetMarshalingContextAttribute$VH() { return IMarshalingStreamVtbl$GetMarshalingContextAttribute$VH_; }

    static final MemoryLayout IMarshalingStream$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IMarshalingStream");
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStream$struct$LAYOUT() { return IMarshalingStream$struct$LAYOUT_; }

    static final MemoryLayout IMarshalingStream$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IMarshalingStream$lpVtbl$LAYOUT() { return IMarshalingStream$lpVtbl$LAYOUT_; }

    static final VarHandle IMarshalingStream$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IMarshalingStream$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IMarshalingStream$lpVtbl$VH() { return IMarshalingStream$lpVtbl$VH_; }

    static final MemoryLayout __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$VH() { return __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec", __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$VH() { return __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec", __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$SEGMENT_; }

    static final MemoryLayout IID_IAgileReference$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IAgileReference$LAYOUT() { return IID_IAgileReference$LAYOUT_; }

    static final MemorySegment IID_IAgileReference$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IAgileReference", IID_IAgileReference$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IAgileReference$SEGMENT() { return IID_IAgileReference$SEGMENT_; }

    static final MemoryLayout IAgileReferenceVtbl$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("QueryInterface"),
        C_POINTER.withName("AddRef"),
        C_POINTER.withName("Release"),
        C_POINTER.withName("Resolve")
    ).withName("IAgileReferenceVtbl");
    static final jdk.incubator.foreign.MemoryLayout IAgileReferenceVtbl$struct$LAYOUT() { return IAgileReferenceVtbl$struct$LAYOUT_; }

    static final MemoryLayout IAgileReferenceVtbl$QueryInterface$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAgileReferenceVtbl$QueryInterface$LAYOUT() { return IAgileReferenceVtbl$QueryInterface$LAYOUT_; }

    static final VarHandle IAgileReferenceVtbl$QueryInterface$VH_ = MemoryHandles.asAddressVarHandle(IAgileReferenceVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("QueryInterface")));
    static final java.lang.invoke.VarHandle IAgileReferenceVtbl$QueryInterface$VH() { return IAgileReferenceVtbl$QueryInterface$VH_; }

    static final MemoryLayout IAgileReferenceVtbl$AddRef$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAgileReferenceVtbl$AddRef$LAYOUT() { return IAgileReferenceVtbl$AddRef$LAYOUT_; }

    static final VarHandle IAgileReferenceVtbl$AddRef$VH_ = MemoryHandles.asAddressVarHandle(IAgileReferenceVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AddRef")));
    static final java.lang.invoke.VarHandle IAgileReferenceVtbl$AddRef$VH() { return IAgileReferenceVtbl$AddRef$VH_; }

    static final MemoryLayout IAgileReferenceVtbl$Release$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAgileReferenceVtbl$Release$LAYOUT() { return IAgileReferenceVtbl$Release$LAYOUT_; }

    static final VarHandle IAgileReferenceVtbl$Release$VH_ = MemoryHandles.asAddressVarHandle(IAgileReferenceVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Release")));
    static final java.lang.invoke.VarHandle IAgileReferenceVtbl$Release$VH() { return IAgileReferenceVtbl$Release$VH_; }

    static final MemoryLayout IAgileReferenceVtbl$Resolve$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAgileReferenceVtbl$Resolve$LAYOUT() { return IAgileReferenceVtbl$Resolve$LAYOUT_; }

    static final VarHandle IAgileReferenceVtbl$Resolve$VH_ = MemoryHandles.asAddressVarHandle(IAgileReferenceVtbl$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Resolve")));
    static final java.lang.invoke.VarHandle IAgileReferenceVtbl$Resolve$VH() { return IAgileReferenceVtbl$Resolve$VH_; }

    static final MemoryLayout IAgileReference$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("lpVtbl")
    ).withName("IAgileReference");
    static final jdk.incubator.foreign.MemoryLayout IAgileReference$struct$LAYOUT() { return IAgileReference$struct$LAYOUT_; }

    static final MemoryLayout IAgileReference$lpVtbl$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout IAgileReference$lpVtbl$LAYOUT() { return IAgileReference$lpVtbl$LAYOUT_; }

    static final VarHandle IAgileReference$lpVtbl$VH_ = MemoryHandles.asAddressVarHandle(IAgileReference$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpVtbl")));
    static final java.lang.invoke.VarHandle IAgileReference$lpVtbl$VH() { return IAgileReference$lpVtbl$VH_; }

    static final MemoryLayout IID_ICallbackWithNoReentrancyToApplicationSTA$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_ICallbackWithNoReentrancyToApplicationSTA$LAYOUT() { return IID_ICallbackWithNoReentrancyToApplicationSTA$LAYOUT_; }

    static final MemorySegment IID_ICallbackWithNoReentrancyToApplicationSTA$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_ICallbackWithNoReentrancyToApplicationSTA", IID_ICallbackWithNoReentrancyToApplicationSTA$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_ICallbackWithNoReentrancyToApplicationSTA$SEGMENT() { return IID_ICallbackWithNoReentrancyToApplicationSTA$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$LAYOUT() { return __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$VH() { return __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec", __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$SEGMENT() { return __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$SEGMENT_; }

    static final MemoryLayout __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$LAYOUT() { return __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$LAYOUT_; }

    static final VarHandle __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$VH_ = MemoryHandles.asAddressVarHandle(__MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$LAYOUT_.varHandle(long.class));
    static final java.lang.invoke.VarHandle __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$VH() { return __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$VH_; }

    static final MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "__MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec", __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$SEGMENT() { return __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$SEGMENT_; }

    static final FunctionDescriptor IEnumUnknown_Next_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumUnknown_Next_Proxy$FUNC() { return IEnumUnknown_Next_Proxy$FUNC_; }

    static final MethodHandle IEnumUnknown_Next_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumUnknown_Next_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumUnknown_Next_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumUnknown_Next_Proxy$MH() { return IEnumUnknown_Next_Proxy$MH_; }

    static final FunctionDescriptor IEnumUnknown_Next_Stub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumUnknown_Next_Stub$FUNC() { return IEnumUnknown_Next_Stub$FUNC_; }

    static final MethodHandle IEnumUnknown_Next_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumUnknown_Next_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumUnknown_Next_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumUnknown_Next_Stub$MH() { return IEnumUnknown_Next_Stub$MH_; }

    static final FunctionDescriptor IEnumString_Next_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumString_Next_Proxy$FUNC() { return IEnumString_Next_Proxy$FUNC_; }

    static final MethodHandle IEnumString_Next_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumString_Next_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumString_Next_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumString_Next_Proxy$MH() { return IEnumString_Next_Proxy$MH_; }

    static final FunctionDescriptor IEnumString_Next_Stub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IEnumString_Next_Stub$FUNC() { return IEnumString_Next_Stub$FUNC_; }

    static final MethodHandle IEnumString_Next_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IEnumString_Next_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IEnumString_Next_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IEnumString_Next_Stub$MH() { return IEnumString_Next_Stub$MH_; }

    static final FunctionDescriptor ISequentialStream_Read_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ISequentialStream_Read_Proxy$FUNC() { return ISequentialStream_Read_Proxy$FUNC_; }

    static final MethodHandle ISequentialStream_Read_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ISequentialStream_Read_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ISequentialStream_Read_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ISequentialStream_Read_Proxy$MH() { return ISequentialStream_Read_Proxy$MH_; }

    static final FunctionDescriptor ISequentialStream_Read_Stub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ISequentialStream_Read_Stub$FUNC() { return ISequentialStream_Read_Stub$FUNC_; }

    static final MethodHandle ISequentialStream_Read_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ISequentialStream_Read_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ISequentialStream_Read_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ISequentialStream_Read_Stub$MH() { return ISequentialStream_Read_Stub$MH_; }

    static final FunctionDescriptor ISequentialStream_Write_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ISequentialStream_Write_Proxy$FUNC() { return ISequentialStream_Write_Proxy$FUNC_; }

    static final MethodHandle ISequentialStream_Write_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ISequentialStream_Write_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ISequentialStream_Write_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ISequentialStream_Write_Proxy$MH() { return ISequentialStream_Write_Proxy$MH_; }

    static final FunctionDescriptor ISequentialStream_Write_Stub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ISequentialStream_Write_Stub$FUNC() { return ISequentialStream_Write_Stub$FUNC_; }

    static final MethodHandle ISequentialStream_Write_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ISequentialStream_Write_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ISequentialStream_Write_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ISequentialStream_Write_Stub$MH() { return ISequentialStream_Write_Stub$MH_; }

    static final FunctionDescriptor IStream_Seek_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IStream_Seek_Proxy$FUNC() { return IStream_Seek_Proxy$FUNC_; }

    static final MethodHandle IStream_Seek_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IStream_Seek_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;ILjdk/incubator/foreign/MemoryAddress;)I",
        IStream_Seek_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IStream_Seek_Proxy$MH() { return IStream_Seek_Proxy$MH_; }

    static final FunctionDescriptor IStream_Seek_Stub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IStream_Seek_Stub$FUNC() { return IStream_Seek_Stub$FUNC_; }

    static final MethodHandle IStream_Seek_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IStream_Seek_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;ILjdk/incubator/foreign/MemoryAddress;)I",
        IStream_Seek_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IStream_Seek_Stub$MH() { return IStream_Seek_Stub$MH_; }

    static final FunctionDescriptor IStream_CopyTo_Proxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IStream_CopyTo_Proxy$FUNC() { return IStream_CopyTo_Proxy$FUNC_; }

    static final MethodHandle IStream_CopyTo_Proxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IStream_CopyTo_Proxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IStream_CopyTo_Proxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IStream_CopyTo_Proxy$MH() { return IStream_CopyTo_Proxy$MH_; }

    static final FunctionDescriptor IStream_CopyTo_Stub$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IStream_CopyTo_Stub$FUNC() { return IStream_CopyTo_Stub$FUNC_; }

    static final MethodHandle IStream_CopyTo_Stub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IStream_CopyTo_Stub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        IStream_CopyTo_Stub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IStream_CopyTo_Stub$MH() { return IStream_CopyTo_Stub$MH_; }

    static final MemoryLayout GUID_NULL$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_NULL$LAYOUT() { return GUID_NULL$LAYOUT_; }

    static final MemorySegment GUID_NULL$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_NULL", GUID_NULL$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_NULL$SEGMENT() { return GUID_NULL$SEGMENT_; }

    static final MemoryLayout CATID_MARSHALER$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CATID_MARSHALER$LAYOUT() { return CATID_MARSHALER$LAYOUT_; }

    static final MemorySegment CATID_MARSHALER$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CATID_MARSHALER", CATID_MARSHALER$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CATID_MARSHALER$SEGMENT() { return CATID_MARSHALER$SEGMENT_; }

    static final MemoryLayout IID_IRpcChannel$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IRpcChannel$LAYOUT() { return IID_IRpcChannel$LAYOUT_; }

    static final MemorySegment IID_IRpcChannel$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IRpcChannel", IID_IRpcChannel$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IRpcChannel$SEGMENT() { return IID_IRpcChannel$SEGMENT_; }

    static final MemoryLayout IID_IRpcStub$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IRpcStub$LAYOUT() { return IID_IRpcStub$LAYOUT_; }

    static final MemorySegment IID_IRpcStub$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IRpcStub", IID_IRpcStub$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IRpcStub$SEGMENT() { return IID_IRpcStub$SEGMENT_; }

    static final MemoryLayout IID_IStubManager$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IStubManager$LAYOUT() { return IID_IStubManager$LAYOUT_; }

    static final MemorySegment IID_IStubManager$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IStubManager", IID_IStubManager$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IStubManager$SEGMENT() { return IID_IStubManager$SEGMENT_; }

    static final MemoryLayout IID_IRpcProxy$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IRpcProxy$LAYOUT() { return IID_IRpcProxy$LAYOUT_; }

    static final MemorySegment IID_IRpcProxy$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IRpcProxy", IID_IRpcProxy$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IRpcProxy$SEGMENT() { return IID_IRpcProxy$SEGMENT_; }

    static final MemoryLayout IID_IProxyManager$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IProxyManager$LAYOUT() { return IID_IProxyManager$LAYOUT_; }

    static final MemorySegment IID_IProxyManager$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IProxyManager", IID_IProxyManager$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IProxyManager$SEGMENT() { return IID_IProxyManager$SEGMENT_; }

    static final MemoryLayout IID_IPSFactory$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IPSFactory$LAYOUT() { return IID_IPSFactory$LAYOUT_; }

    static final MemorySegment IID_IPSFactory$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IPSFactory", IID_IPSFactory$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IPSFactory$SEGMENT() { return IID_IPSFactory$SEGMENT_; }

    static final MemoryLayout IID_IInternalMoniker$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IInternalMoniker$LAYOUT() { return IID_IInternalMoniker$LAYOUT_; }

    static final MemorySegment IID_IInternalMoniker$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IInternalMoniker", IID_IInternalMoniker$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IInternalMoniker$SEGMENT() { return IID_IInternalMoniker$SEGMENT_; }

    static final MemoryLayout IID_IDfReserved1$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IDfReserved1$LAYOUT() { return IID_IDfReserved1$LAYOUT_; }

    static final MemorySegment IID_IDfReserved1$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IDfReserved1", IID_IDfReserved1$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IDfReserved1$SEGMENT() { return IID_IDfReserved1$SEGMENT_; }

    static final MemoryLayout IID_IDfReserved2$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IDfReserved2$LAYOUT() { return IID_IDfReserved2$LAYOUT_; }

    static final MemorySegment IID_IDfReserved2$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IDfReserved2", IID_IDfReserved2$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IDfReserved2$SEGMENT() { return IID_IDfReserved2$SEGMENT_; }

    static final MemoryLayout IID_IDfReserved3$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IDfReserved3$LAYOUT() { return IID_IDfReserved3$LAYOUT_; }

    static final MemorySegment IID_IDfReserved3$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IDfReserved3", IID_IDfReserved3$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IDfReserved3$SEGMENT() { return IID_IDfReserved3$SEGMENT_; }

    static final MemoryLayout CLSID_StdMarshal$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_StdMarshal$LAYOUT() { return CLSID_StdMarshal$LAYOUT_; }

    static final MemorySegment CLSID_StdMarshal$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_StdMarshal", CLSID_StdMarshal$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_StdMarshal$SEGMENT() { return CLSID_StdMarshal$SEGMENT_; }

    static final MemoryLayout CLSID_AggStdMarshal$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_AggStdMarshal$LAYOUT() { return CLSID_AggStdMarshal$LAYOUT_; }

    static final MemorySegment CLSID_AggStdMarshal$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_AggStdMarshal", CLSID_AggStdMarshal$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_AggStdMarshal$SEGMENT() { return CLSID_AggStdMarshal$SEGMENT_; }

    static final MemoryLayout CLSID_StdAsyncActManager$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_StdAsyncActManager$LAYOUT() { return CLSID_StdAsyncActManager$LAYOUT_; }

    static final MemorySegment CLSID_StdAsyncActManager$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_StdAsyncActManager", CLSID_StdAsyncActManager$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_StdAsyncActManager$SEGMENT() { return CLSID_StdAsyncActManager$SEGMENT_; }

    static final MemoryLayout IID_IStub$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IStub$LAYOUT() { return IID_IStub$LAYOUT_; }

    static final MemorySegment IID_IStub$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IStub", IID_IStub$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IStub$SEGMENT() { return IID_IStub$SEGMENT_; }

    static final MemoryLayout IID_IProxy$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IProxy$LAYOUT() { return IID_IProxy$LAYOUT_; }

    static final MemorySegment IID_IProxy$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IProxy", IID_IProxy$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IProxy$SEGMENT() { return IID_IProxy$SEGMENT_; }

    static final MemoryLayout IID_IEnumGeneric$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IEnumGeneric$LAYOUT() { return IID_IEnumGeneric$LAYOUT_; }

    static final MemorySegment IID_IEnumGeneric$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IEnumGeneric", IID_IEnumGeneric$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IEnumGeneric$SEGMENT() { return IID_IEnumGeneric$SEGMENT_; }

    static final MemoryLayout IID_IEnumHolder$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IEnumHolder$LAYOUT() { return IID_IEnumHolder$LAYOUT_; }

    static final MemorySegment IID_IEnumHolder$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IEnumHolder", IID_IEnumHolder$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IEnumHolder$SEGMENT() { return IID_IEnumHolder$SEGMENT_; }

    static final MemoryLayout IID_IEnumCallback$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IEnumCallback$LAYOUT() { return IID_IEnumCallback$LAYOUT_; }

    static final MemorySegment IID_IEnumCallback$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IEnumCallback", IID_IEnumCallback$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IEnumCallback$SEGMENT() { return IID_IEnumCallback$SEGMENT_; }

    static final MemoryLayout IID_IOleManager$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOleManager$LAYOUT() { return IID_IOleManager$LAYOUT_; }

    static final MemorySegment IID_IOleManager$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOleManager", IID_IOleManager$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOleManager$SEGMENT() { return IID_IOleManager$SEGMENT_; }

    static final MemoryLayout IID_IOlePresObj$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IOlePresObj$LAYOUT() { return IID_IOlePresObj$LAYOUT_; }

    static final MemorySegment IID_IOlePresObj$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IOlePresObj", IID_IOlePresObj$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IOlePresObj$SEGMENT() { return IID_IOlePresObj$SEGMENT_; }

    static final MemoryLayout IID_IDebug$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IDebug$LAYOUT() { return IID_IDebug$LAYOUT_; }

    static final MemorySegment IID_IDebug$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IDebug", IID_IDebug$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IDebug$SEGMENT() { return IID_IDebug$SEGMENT_; }

    static final MemoryLayout IID_IDebugStream$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout IID_IDebugStream$LAYOUT() { return IID_IDebugStream$LAYOUT_; }

    static final MemorySegment IID_IDebugStream$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "IID_IDebugStream", IID_IDebugStream$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment IID_IDebugStream$SEGMENT() { return IID_IDebugStream$SEGMENT_; }

    static final MemoryLayout CLSID_PSGenObject$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_PSGenObject$LAYOUT() { return CLSID_PSGenObject$LAYOUT_; }

    static final MemorySegment CLSID_PSGenObject$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_PSGenObject", CLSID_PSGenObject$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_PSGenObject$SEGMENT() { return CLSID_PSGenObject$SEGMENT_; }

    static final MemoryLayout CLSID_PSClientSite$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_PSClientSite$LAYOUT() { return CLSID_PSClientSite$LAYOUT_; }

    static final MemorySegment CLSID_PSClientSite$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_PSClientSite", CLSID_PSClientSite$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_PSClientSite$SEGMENT() { return CLSID_PSClientSite$SEGMENT_; }

    static final MemoryLayout CLSID_PSClassObject$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_PSClassObject$LAYOUT() { return CLSID_PSClassObject$LAYOUT_; }

    static final MemorySegment CLSID_PSClassObject$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_PSClassObject", CLSID_PSClassObject$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_PSClassObject$SEGMENT() { return CLSID_PSClassObject$SEGMENT_; }

    static final MemoryLayout CLSID_PSInPlaceActive$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_PSInPlaceActive$LAYOUT() { return CLSID_PSInPlaceActive$LAYOUT_; }

    static final MemorySegment CLSID_PSInPlaceActive$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_PSInPlaceActive", CLSID_PSInPlaceActive$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_PSInPlaceActive$SEGMENT() { return CLSID_PSInPlaceActive$SEGMENT_; }

    static final MemoryLayout CLSID_PSInPlaceFrame$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_PSInPlaceFrame$LAYOUT() { return CLSID_PSInPlaceFrame$LAYOUT_; }

    static final MemorySegment CLSID_PSInPlaceFrame$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_PSInPlaceFrame", CLSID_PSInPlaceFrame$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_PSInPlaceFrame$SEGMENT() { return CLSID_PSInPlaceFrame$SEGMENT_; }

    static final MemoryLayout CLSID_PSDragDrop$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_PSDragDrop$LAYOUT() { return CLSID_PSDragDrop$LAYOUT_; }

    static final MemorySegment CLSID_PSDragDrop$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_PSDragDrop", CLSID_PSDragDrop$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_PSDragDrop$SEGMENT() { return CLSID_PSDragDrop$SEGMENT_; }

    static final MemoryLayout CLSID_PSBindCtx$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_PSBindCtx$LAYOUT() { return CLSID_PSBindCtx$LAYOUT_; }

    static final MemorySegment CLSID_PSBindCtx$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_PSBindCtx", CLSID_PSBindCtx$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_PSBindCtx$SEGMENT() { return CLSID_PSBindCtx$SEGMENT_; }

    static final MemoryLayout CLSID_PSEnumerators$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_PSEnumerators$LAYOUT() { return CLSID_PSEnumerators$LAYOUT_; }

    static final MemorySegment CLSID_PSEnumerators$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_PSEnumerators", CLSID_PSEnumerators$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_PSEnumerators$SEGMENT() { return CLSID_PSEnumerators$SEGMENT_; }

    static final MemoryLayout CLSID_StaticMetafile$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_StaticMetafile$LAYOUT() { return CLSID_StaticMetafile$LAYOUT_; }

    static final MemorySegment CLSID_StaticMetafile$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_StaticMetafile", CLSID_StaticMetafile$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_StaticMetafile$SEGMENT() { return CLSID_StaticMetafile$SEGMENT_; }

    static final MemoryLayout CLSID_StaticDib$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_StaticDib$LAYOUT() { return CLSID_StaticDib$LAYOUT_; }

    static final MemorySegment CLSID_StaticDib$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_StaticDib", CLSID_StaticDib$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_StaticDib$SEGMENT() { return CLSID_StaticDib$SEGMENT_; }

    static final MemoryLayout CID_CDfsVolume$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CID_CDfsVolume$LAYOUT() { return CID_CDfsVolume$LAYOUT_; }

    static final MemorySegment CID_CDfsVolume$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CID_CDfsVolume", CID_CDfsVolume$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CID_CDfsVolume$SEGMENT() { return CID_CDfsVolume$SEGMENT_; }

    static final MemoryLayout CLSID_DCOMAccessControl$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_DCOMAccessControl$LAYOUT() { return CLSID_DCOMAccessControl$LAYOUT_; }

    static final MemorySegment CLSID_DCOMAccessControl$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_DCOMAccessControl", CLSID_DCOMAccessControl$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_DCOMAccessControl$SEGMENT() { return CLSID_DCOMAccessControl$SEGMENT_; }

    static final MemoryLayout CLSID_GlobalOptions$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_GlobalOptions$LAYOUT() { return CLSID_GlobalOptions$LAYOUT_; }

    static final MemorySegment CLSID_GlobalOptions$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_GlobalOptions", CLSID_GlobalOptions$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_GlobalOptions$SEGMENT() { return CLSID_GlobalOptions$SEGMENT_; }

    static final MemoryLayout CLSID_StdGlobalInterfaceTable$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_StdGlobalInterfaceTable$LAYOUT() { return CLSID_StdGlobalInterfaceTable$LAYOUT_; }

    static final MemorySegment CLSID_StdGlobalInterfaceTable$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_StdGlobalInterfaceTable", CLSID_StdGlobalInterfaceTable$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_StdGlobalInterfaceTable$SEGMENT() { return CLSID_StdGlobalInterfaceTable$SEGMENT_; }

    static final MemoryLayout CLSID_ComBinding$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_ComBinding$LAYOUT() { return CLSID_ComBinding$LAYOUT_; }

    static final MemorySegment CLSID_ComBinding$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_ComBinding", CLSID_ComBinding$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_ComBinding$SEGMENT() { return CLSID_ComBinding$SEGMENT_; }

    static final MemoryLayout CLSID_StdEvent$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_StdEvent$LAYOUT() { return CLSID_StdEvent$LAYOUT_; }

    static final MemorySegment CLSID_StdEvent$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_StdEvent", CLSID_StdEvent$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_StdEvent$SEGMENT() { return CLSID_StdEvent$SEGMENT_; }

    static final MemoryLayout CLSID_ManualResetEvent$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_ManualResetEvent$LAYOUT() { return CLSID_ManualResetEvent$LAYOUT_; }

    static final MemorySegment CLSID_ManualResetEvent$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_ManualResetEvent", CLSID_ManualResetEvent$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_ManualResetEvent$SEGMENT() { return CLSID_ManualResetEvent$SEGMENT_; }

    static final MemoryLayout CLSID_SynchronizeContainer$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_SynchronizeContainer$LAYOUT() { return CLSID_SynchronizeContainer$LAYOUT_; }

    static final MemorySegment CLSID_SynchronizeContainer$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_SynchronizeContainer", CLSID_SynchronizeContainer$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_SynchronizeContainer$SEGMENT() { return CLSID_SynchronizeContainer$SEGMENT_; }

    static final MemoryLayout CLSID_AddrControl$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_AddrControl$LAYOUT() { return CLSID_AddrControl$LAYOUT_; }

    static final MemorySegment CLSID_AddrControl$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_AddrControl", CLSID_AddrControl$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_AddrControl$SEGMENT() { return CLSID_AddrControl$SEGMENT_; }

    static final MemoryLayout CLSID_ContextSwitcher$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_ContextSwitcher$LAYOUT() { return CLSID_ContextSwitcher$LAYOUT_; }

    static final MemorySegment CLSID_ContextSwitcher$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_ContextSwitcher", CLSID_ContextSwitcher$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_ContextSwitcher$SEGMENT() { return CLSID_ContextSwitcher$SEGMENT_; }

    static final MemoryLayout CLSID_CCDFormKrnl$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDFormKrnl$LAYOUT() { return CLSID_CCDFormKrnl$LAYOUT_; }

    static final MemorySegment CLSID_CCDFormKrnl$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDFormKrnl", CLSID_CCDFormKrnl$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDFormKrnl$SEGMENT() { return CLSID_CCDFormKrnl$SEGMENT_; }

    static final MemoryLayout CLSID_CCDPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDPropertyPage$LAYOUT() { return CLSID_CCDPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDPropertyPage", CLSID_CCDPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDPropertyPage$SEGMENT() { return CLSID_CCDPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDFormDialog$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDFormDialog$LAYOUT() { return CLSID_CCDFormDialog$LAYOUT_; }

    static final MemorySegment CLSID_CCDFormDialog$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDFormDialog", CLSID_CCDFormDialog$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDFormDialog$SEGMENT() { return CLSID_CCDFormDialog$SEGMENT_; }

    static final MemoryLayout CLSID_CCDCommandButton$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDCommandButton$LAYOUT() { return CLSID_CCDCommandButton$LAYOUT_; }

    static final MemorySegment CLSID_CCDCommandButton$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDCommandButton", CLSID_CCDCommandButton$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDCommandButton$SEGMENT() { return CLSID_CCDCommandButton$SEGMENT_; }

    static final MemoryLayout CLSID_CCDComboBox$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDComboBox$LAYOUT() { return CLSID_CCDComboBox$LAYOUT_; }

    static final MemorySegment CLSID_CCDComboBox$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDComboBox", CLSID_CCDComboBox$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDComboBox$SEGMENT() { return CLSID_CCDComboBox$SEGMENT_; }

    static final MemoryLayout CLSID_CCDTextBox$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDTextBox$LAYOUT() { return CLSID_CCDTextBox$LAYOUT_; }

    static final MemorySegment CLSID_CCDTextBox$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDTextBox", CLSID_CCDTextBox$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDTextBox$SEGMENT() { return CLSID_CCDTextBox$SEGMENT_; }

    static final MemoryLayout CLSID_CCDCheckBox$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDCheckBox$LAYOUT() { return CLSID_CCDCheckBox$LAYOUT_; }

    static final MemorySegment CLSID_CCDCheckBox$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDCheckBox", CLSID_CCDCheckBox$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDCheckBox$SEGMENT() { return CLSID_CCDCheckBox$SEGMENT_; }

    static final MemoryLayout CLSID_CCDLabel$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDLabel$LAYOUT() { return CLSID_CCDLabel$LAYOUT_; }

    static final MemorySegment CLSID_CCDLabel$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDLabel", CLSID_CCDLabel$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDLabel$SEGMENT() { return CLSID_CCDLabel$SEGMENT_; }

    static final MemoryLayout CLSID_CCDOptionButton$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDOptionButton$LAYOUT() { return CLSID_CCDOptionButton$LAYOUT_; }

    static final MemorySegment CLSID_CCDOptionButton$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDOptionButton", CLSID_CCDOptionButton$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDOptionButton$SEGMENT() { return CLSID_CCDOptionButton$SEGMENT_; }

    static final MemoryLayout CLSID_CCDListBox$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDListBox$LAYOUT() { return CLSID_CCDListBox$LAYOUT_; }

    static final MemorySegment CLSID_CCDListBox$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDListBox", CLSID_CCDListBox$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDListBox$SEGMENT() { return CLSID_CCDListBox$SEGMENT_; }

    static final MemoryLayout CLSID_CCDScrollBar$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDScrollBar$LAYOUT() { return CLSID_CCDScrollBar$LAYOUT_; }

    static final MemorySegment CLSID_CCDScrollBar$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDScrollBar", CLSID_CCDScrollBar$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDScrollBar$SEGMENT() { return CLSID_CCDScrollBar$SEGMENT_; }

    static final MemoryLayout CLSID_CCDGroupBox$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDGroupBox$LAYOUT() { return CLSID_CCDGroupBox$LAYOUT_; }

    static final MemorySegment CLSID_CCDGroupBox$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDGroupBox", CLSID_CCDGroupBox$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDGroupBox$SEGMENT() { return CLSID_CCDGroupBox$SEGMENT_; }

    static final MemoryLayout CLSID_CCDGeneralPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDGeneralPropertyPage$LAYOUT() { return CLSID_CCDGeneralPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDGeneralPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDGeneralPropertyPage", CLSID_CCDGeneralPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDGeneralPropertyPage$SEGMENT() { return CLSID_CCDGeneralPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDGenericPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDGenericPropertyPage$LAYOUT() { return CLSID_CCDGenericPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDGenericPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDGenericPropertyPage", CLSID_CCDGenericPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDGenericPropertyPage$SEGMENT() { return CLSID_CCDGenericPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDFontPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDFontPropertyPage$LAYOUT() { return CLSID_CCDFontPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDFontPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDFontPropertyPage", CLSID_CCDFontPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDFontPropertyPage$SEGMENT() { return CLSID_CCDFontPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDColorPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDColorPropertyPage$LAYOUT() { return CLSID_CCDColorPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDColorPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDColorPropertyPage", CLSID_CCDColorPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDColorPropertyPage$SEGMENT() { return CLSID_CCDColorPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDLabelPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDLabelPropertyPage$LAYOUT() { return CLSID_CCDLabelPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDLabelPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDLabelPropertyPage", CLSID_CCDLabelPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDLabelPropertyPage$SEGMENT() { return CLSID_CCDLabelPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDCheckBoxPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDCheckBoxPropertyPage$LAYOUT() { return CLSID_CCDCheckBoxPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDCheckBoxPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDCheckBoxPropertyPage", CLSID_CCDCheckBoxPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDCheckBoxPropertyPage$SEGMENT() { return CLSID_CCDCheckBoxPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDTextBoxPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDTextBoxPropertyPage$LAYOUT() { return CLSID_CCDTextBoxPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDTextBoxPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDTextBoxPropertyPage", CLSID_CCDTextBoxPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDTextBoxPropertyPage$SEGMENT() { return CLSID_CCDTextBoxPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDOptionButtonPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDOptionButtonPropertyPage$LAYOUT() { return CLSID_CCDOptionButtonPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDOptionButtonPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDOptionButtonPropertyPage", CLSID_CCDOptionButtonPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDOptionButtonPropertyPage$SEGMENT() { return CLSID_CCDOptionButtonPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDListBoxPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDListBoxPropertyPage$LAYOUT() { return CLSID_CCDListBoxPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDListBoxPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDListBoxPropertyPage", CLSID_CCDListBoxPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDListBoxPropertyPage$SEGMENT() { return CLSID_CCDListBoxPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDCommandButtonPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDCommandButtonPropertyPage$LAYOUT() { return CLSID_CCDCommandButtonPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDCommandButtonPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDCommandButtonPropertyPage", CLSID_CCDCommandButtonPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDCommandButtonPropertyPage$SEGMENT() { return CLSID_CCDCommandButtonPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDComboBoxPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDComboBoxPropertyPage$LAYOUT() { return CLSID_CCDComboBoxPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDComboBoxPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDComboBoxPropertyPage", CLSID_CCDComboBoxPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDComboBoxPropertyPage$SEGMENT() { return CLSID_CCDComboBoxPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDScrollBarPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDScrollBarPropertyPage$LAYOUT() { return CLSID_CCDScrollBarPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDScrollBarPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDScrollBarPropertyPage", CLSID_CCDScrollBarPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDScrollBarPropertyPage$SEGMENT() { return CLSID_CCDScrollBarPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDGroupBoxPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDGroupBoxPropertyPage$LAYOUT() { return CLSID_CCDGroupBoxPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDGroupBoxPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDGroupBoxPropertyPage", CLSID_CCDGroupBoxPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDGroupBoxPropertyPage$SEGMENT() { return CLSID_CCDGroupBoxPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CCDXObjectPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CCDXObjectPropertyPage$LAYOUT() { return CLSID_CCDXObjectPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CCDXObjectPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CCDXObjectPropertyPage", CLSID_CCDXObjectPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CCDXObjectPropertyPage$SEGMENT() { return CLSID_CCDXObjectPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CStdPropertyFrame$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CStdPropertyFrame$LAYOUT() { return CLSID_CStdPropertyFrame$LAYOUT_; }

    static final MemorySegment CLSID_CStdPropertyFrame$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CStdPropertyFrame", CLSID_CStdPropertyFrame$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CStdPropertyFrame$SEGMENT() { return CLSID_CStdPropertyFrame$SEGMENT_; }

    static final MemoryLayout CLSID_CFormPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CFormPropertyPage$LAYOUT() { return CLSID_CFormPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CFormPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CFormPropertyPage", CLSID_CFormPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CFormPropertyPage$SEGMENT() { return CLSID_CFormPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CGridPropertyPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CGridPropertyPage$LAYOUT() { return CLSID_CGridPropertyPage$LAYOUT_; }

    static final MemorySegment CLSID_CGridPropertyPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CGridPropertyPage", CLSID_CGridPropertyPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CGridPropertyPage$SEGMENT() { return CLSID_CGridPropertyPage$SEGMENT_; }

    static final MemoryLayout CLSID_CWSJArticlePage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CWSJArticlePage$LAYOUT() { return CLSID_CWSJArticlePage$LAYOUT_; }

    static final MemorySegment CLSID_CWSJArticlePage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CWSJArticlePage", CLSID_CWSJArticlePage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CWSJArticlePage$SEGMENT() { return CLSID_CWSJArticlePage$SEGMENT_; }

    static final MemoryLayout CLSID_CSystemPage$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_CSystemPage$LAYOUT() { return CLSID_CSystemPage$LAYOUT_; }

    static final MemorySegment CLSID_CSystemPage$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_CSystemPage", CLSID_CSystemPage$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_CSystemPage$SEGMENT() { return CLSID_CSystemPage$SEGMENT_; }

    static final MemoryLayout CLSID_IdentityUnmarshal$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_IdentityUnmarshal$LAYOUT() { return CLSID_IdentityUnmarshal$LAYOUT_; }

    static final MemorySegment CLSID_IdentityUnmarshal$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_IdentityUnmarshal", CLSID_IdentityUnmarshal$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_IdentityUnmarshal$SEGMENT() { return CLSID_IdentityUnmarshal$SEGMENT_; }

    static final MemoryLayout CLSID_InProcFreeMarshaler$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_InProcFreeMarshaler$LAYOUT() { return CLSID_InProcFreeMarshaler$LAYOUT_; }

    static final MemorySegment CLSID_InProcFreeMarshaler$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_InProcFreeMarshaler", CLSID_InProcFreeMarshaler$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_InProcFreeMarshaler$SEGMENT() { return CLSID_InProcFreeMarshaler$SEGMENT_; }

    static final MemoryLayout CLSID_Picture_Metafile$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_Picture_Metafile$LAYOUT() { return CLSID_Picture_Metafile$LAYOUT_; }

    static final MemorySegment CLSID_Picture_Metafile$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_Picture_Metafile", CLSID_Picture_Metafile$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_Picture_Metafile$SEGMENT() { return CLSID_Picture_Metafile$SEGMENT_; }

    static final MemoryLayout CLSID_Picture_EnhMetafile$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_Picture_EnhMetafile$LAYOUT() { return CLSID_Picture_EnhMetafile$LAYOUT_; }

    static final MemorySegment CLSID_Picture_EnhMetafile$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_Picture_EnhMetafile", CLSID_Picture_EnhMetafile$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_Picture_EnhMetafile$SEGMENT() { return CLSID_Picture_EnhMetafile$SEGMENT_; }

    static final MemoryLayout CLSID_Picture_Dib$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout CLSID_Picture_Dib$LAYOUT() { return CLSID_Picture_Dib$LAYOUT_; }

    static final MemorySegment CLSID_Picture_Dib$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "CLSID_Picture_Dib", CLSID_Picture_Dib$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment CLSID_Picture_Dib$SEGMENT() { return CLSID_Picture_Dib$SEGMENT_; }

    static final MemoryLayout GUID_TRISTATE$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Data1"),
        C_SHORT.withName("Data2"),
        C_SHORT.withName("Data3"),
        MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
    ).withName("_GUID");
    static final jdk.incubator.foreign.MemoryLayout GUID_TRISTATE$LAYOUT() { return GUID_TRISTATE$LAYOUT_; }

    static final MemorySegment GUID_TRISTATE$SEGMENT_ = RuntimeHelper.lookupGlobalVariable(LIBRARIES, "GUID_TRISTATE", GUID_TRISTATE$LAYOUT_);
    static final jdk.incubator.foreign.MemorySegment GUID_TRISTATE$SEGMENT() { return GUID_TRISTATE$SEGMENT_; }

    static final FunctionDescriptor CoGetMalloc$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetMalloc$FUNC() { return CoGetMalloc$FUNC_; }

    static final MethodHandle CoGetMalloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetMalloc",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        CoGetMalloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetMalloc$MH() { return CoGetMalloc$MH_; }

    static final FunctionDescriptor CreateStreamOnHGlobal$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateStreamOnHGlobal$FUNC() { return CreateStreamOnHGlobal$FUNC_; }

    static final MethodHandle CreateStreamOnHGlobal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateStreamOnHGlobal",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CreateStreamOnHGlobal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateStreamOnHGlobal$MH() { return CreateStreamOnHGlobal$MH_; }

    static final FunctionDescriptor GetHGlobalFromStream$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetHGlobalFromStream$FUNC() { return GetHGlobalFromStream$FUNC_; }

    static final MethodHandle GetHGlobalFromStream$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetHGlobalFromStream",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetHGlobalFromStream$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetHGlobalFromStream$MH() { return GetHGlobalFromStream$MH_; }

    static final FunctionDescriptor CoUninitialize$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor CoUninitialize$FUNC() { return CoUninitialize$FUNC_; }

    static final MethodHandle CoUninitialize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoUninitialize",
        "()V",
        CoUninitialize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoUninitialize$MH() { return CoUninitialize$MH_; }

    static final FunctionDescriptor CoGetCurrentProcess$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCurrentProcess$FUNC() { return CoGetCurrentProcess$FUNC_; }

    static final MethodHandle CoGetCurrentProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCurrentProcess",
        "()I",
        CoGetCurrentProcess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCurrentProcess$MH() { return CoGetCurrentProcess$MH_; }

    static final FunctionDescriptor CoInitializeEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoInitializeEx$FUNC() { return CoInitializeEx$FUNC_; }

    static final MethodHandle CoInitializeEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoInitializeEx",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CoInitializeEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoInitializeEx$MH() { return CoInitializeEx$MH_; }

    static final FunctionDescriptor CoGetCallerTID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCallerTID$FUNC() { return CoGetCallerTID$FUNC_; }

    static final MethodHandle CoGetCallerTID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCallerTID",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetCallerTID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCallerTID$MH() { return CoGetCallerTID$MH_; }

    static final FunctionDescriptor CoGetCurrentLogicalThreadId$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCurrentLogicalThreadId$FUNC() { return CoGetCurrentLogicalThreadId$FUNC_; }

    static final MethodHandle CoGetCurrentLogicalThreadId$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCurrentLogicalThreadId",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetCurrentLogicalThreadId$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCurrentLogicalThreadId$MH() { return CoGetCurrentLogicalThreadId$MH_; }

    static final FunctionDescriptor CoGetContextToken$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetContextToken$FUNC() { return CoGetContextToken$FUNC_; }

    static final MethodHandle CoGetContextToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetContextToken",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetContextToken$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetContextToken$MH() { return CoGetContextToken$MH_; }

    static final FunctionDescriptor CoGetDefaultContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetDefaultContext$FUNC() { return CoGetDefaultContext$FUNC_; }

    static final MethodHandle CoGetDefaultContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetDefaultContext",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetDefaultContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetDefaultContext$MH() { return CoGetDefaultContext$MH_; }

    static final FunctionDescriptor CoGetApartmentType$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetApartmentType$FUNC() { return CoGetApartmentType$FUNC_; }

    static final MethodHandle CoGetApartmentType$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetApartmentType",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetApartmentType$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetApartmentType$MH() { return CoGetApartmentType$MH_; }

    static final MemoryLayout tagServerInformation$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwServerPid"),
        C_LONG.withName("dwServerTid"),
        C_LONGLONG.withName("ui64ServerAddress")
    ).withName("tagServerInformation");
    static final jdk.incubator.foreign.MemoryLayout tagServerInformation$struct$LAYOUT() { return tagServerInformation$struct$LAYOUT_; }

    static final MemoryLayout tagServerInformation$dwServerPid$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagServerInformation$dwServerPid$LAYOUT() { return tagServerInformation$dwServerPid$LAYOUT_; }

    static final VarHandle tagServerInformation$dwServerPid$VH_ = tagServerInformation$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwServerPid"));
    static final java.lang.invoke.VarHandle tagServerInformation$dwServerPid$VH() { return tagServerInformation$dwServerPid$VH_; }

    static final MemoryLayout tagServerInformation$dwServerTid$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagServerInformation$dwServerTid$LAYOUT() { return tagServerInformation$dwServerTid$LAYOUT_; }

    static final VarHandle tagServerInformation$dwServerTid$VH_ = tagServerInformation$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwServerTid"));
    static final java.lang.invoke.VarHandle tagServerInformation$dwServerTid$VH() { return tagServerInformation$dwServerTid$VH_; }

    static final MemoryLayout tagServerInformation$ui64ServerAddress$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagServerInformation$ui64ServerAddress$LAYOUT() { return tagServerInformation$ui64ServerAddress$LAYOUT_; }

    static final VarHandle tagServerInformation$ui64ServerAddress$VH_ = tagServerInformation$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ui64ServerAddress"));
    static final java.lang.invoke.VarHandle tagServerInformation$ui64ServerAddress$VH() { return tagServerInformation$ui64ServerAddress$VH_; }

    static final FunctionDescriptor CoDecodeProxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDecodeProxy$FUNC() { return CoDecodeProxy$FUNC_; }

    static final MethodHandle CoDecodeProxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDecodeProxy",
        "(IJLjdk/incubator/foreign/MemoryAddress;)I",
        CoDecodeProxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDecodeProxy$MH() { return CoDecodeProxy$MH_; }

    static final MemoryLayout CO_MTA_USAGE_COOKIE__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("CO_MTA_USAGE_COOKIE__");
    static final jdk.incubator.foreign.MemoryLayout CO_MTA_USAGE_COOKIE__$struct$LAYOUT() { return CO_MTA_USAGE_COOKIE__$struct$LAYOUT_; }

    static final MemoryLayout CO_MTA_USAGE_COOKIE__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout CO_MTA_USAGE_COOKIE__$unused$LAYOUT() { return CO_MTA_USAGE_COOKIE__$unused$LAYOUT_; }

    static final VarHandle CO_MTA_USAGE_COOKIE__$unused$VH_ = CO_MTA_USAGE_COOKIE__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle CO_MTA_USAGE_COOKIE__$unused$VH() { return CO_MTA_USAGE_COOKIE__$unused$VH_; }

    static final FunctionDescriptor CoIncrementMTAUsage$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoIncrementMTAUsage$FUNC() { return CoIncrementMTAUsage$FUNC_; }

    static final MethodHandle CoIncrementMTAUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoIncrementMTAUsage",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoIncrementMTAUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoIncrementMTAUsage$MH() { return CoIncrementMTAUsage$MH_; }

    static final FunctionDescriptor CoDecrementMTAUsage$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDecrementMTAUsage$FUNC() { return CoDecrementMTAUsage$FUNC_; }

    static final MethodHandle CoDecrementMTAUsage$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDecrementMTAUsage",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoDecrementMTAUsage$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDecrementMTAUsage$MH() { return CoDecrementMTAUsage$MH_; }

    static final FunctionDescriptor CoAllowUnmarshalerCLSID$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoAllowUnmarshalerCLSID$FUNC() { return CoAllowUnmarshalerCLSID$FUNC_; }

    static final MethodHandle CoAllowUnmarshalerCLSID$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoAllowUnmarshalerCLSID",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoAllowUnmarshalerCLSID$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoAllowUnmarshalerCLSID$MH() { return CoAllowUnmarshalerCLSID$MH_; }

    static final FunctionDescriptor CoGetObjectContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetObjectContext$FUNC() { return CoGetObjectContext$FUNC_; }

    static final MethodHandle CoGetObjectContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetObjectContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetObjectContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetObjectContext$MH() { return CoGetObjectContext$MH_; }

    static final FunctionDescriptor CoGetClassObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetClassObject$FUNC() { return CoGetClassObject$FUNC_; }

    static final MethodHandle CoGetClassObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetClassObject",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetClassObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetClassObject$MH() { return CoGetClassObject$MH_; }

    static final FunctionDescriptor CoRegisterClassObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterClassObject$FUNC() { return CoRegisterClassObject$FUNC_; }

    static final MethodHandle CoRegisterClassObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterClassObject",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterClassObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterClassObject$MH() { return CoRegisterClassObject$MH_; }

    static final FunctionDescriptor CoRevokeClassObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRevokeClassObject$FUNC() { return CoRevokeClassObject$FUNC_; }

    static final MethodHandle CoRevokeClassObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRevokeClassObject",
        "(I)I",
        CoRevokeClassObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRevokeClassObject$MH() { return CoRevokeClassObject$MH_; }

    static final FunctionDescriptor CoResumeClassObjects$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoResumeClassObjects$FUNC() { return CoResumeClassObjects$FUNC_; }

    static final MethodHandle CoResumeClassObjects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoResumeClassObjects",
        "()I",
        CoResumeClassObjects$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoResumeClassObjects$MH() { return CoResumeClassObjects$MH_; }

    static final FunctionDescriptor CoSuspendClassObjects$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoSuspendClassObjects$FUNC() { return CoSuspendClassObjects$FUNC_; }

    static final MethodHandle CoSuspendClassObjects$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoSuspendClassObjects",
        "()I",
        CoSuspendClassObjects$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoSuspendClassObjects$MH() { return CoSuspendClassObjects$MH_; }

    static final FunctionDescriptor CoAddRefServerProcess$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoAddRefServerProcess$FUNC() { return CoAddRefServerProcess$FUNC_; }

    static final MethodHandle CoAddRefServerProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoAddRefServerProcess",
        "()I",
        CoAddRefServerProcess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoAddRefServerProcess$MH() { return CoAddRefServerProcess$MH_; }

    static final FunctionDescriptor CoReleaseServerProcess$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoReleaseServerProcess$FUNC() { return CoReleaseServerProcess$FUNC_; }

    static final MethodHandle CoReleaseServerProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoReleaseServerProcess",
        "()I",
        CoReleaseServerProcess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoReleaseServerProcess$MH() { return CoReleaseServerProcess$MH_; }

    static final FunctionDescriptor CoGetPSClsid$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetPSClsid$FUNC() { return CoGetPSClsid$FUNC_; }

    static final MethodHandle CoGetPSClsid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetPSClsid",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetPSClsid$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetPSClsid$MH() { return CoGetPSClsid$MH_; }

    static final FunctionDescriptor CoRegisterPSClsid$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterPSClsid$FUNC() { return CoRegisterPSClsid$FUNC_; }

    static final MethodHandle CoRegisterPSClsid$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterPSClsid",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterPSClsid$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterPSClsid$MH() { return CoRegisterPSClsid$MH_; }

    static final FunctionDescriptor CoRegisterSurrogate$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterSurrogate$FUNC() { return CoRegisterSurrogate$FUNC_; }

    static final MethodHandle CoRegisterSurrogate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterSurrogate",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterSurrogate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterSurrogate$MH() { return CoRegisterSurrogate$MH_; }

    static final FunctionDescriptor CoGetMarshalSizeMax$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetMarshalSizeMax$FUNC() { return CoGetMarshalSizeMax$FUNC_; }

    static final MethodHandle CoGetMarshalSizeMax$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetMarshalSizeMax",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CoGetMarshalSizeMax$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetMarshalSizeMax$MH() { return CoGetMarshalSizeMax$MH_; }

    static final FunctionDescriptor CoMarshalInterface$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoMarshalInterface$FUNC() { return CoMarshalInterface$FUNC_; }

    static final MethodHandle CoMarshalInterface$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoMarshalInterface",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        CoMarshalInterface$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoMarshalInterface$MH() { return CoMarshalInterface$MH_; }

    static final FunctionDescriptor CoUnmarshalInterface$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoUnmarshalInterface$FUNC() { return CoUnmarshalInterface$FUNC_; }

    static final MethodHandle CoUnmarshalInterface$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoUnmarshalInterface",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoUnmarshalInterface$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoUnmarshalInterface$MH() { return CoUnmarshalInterface$MH_; }

    static final FunctionDescriptor CoMarshalHresult$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoMarshalHresult$FUNC() { return CoMarshalHresult$FUNC_; }

    static final MethodHandle CoMarshalHresult$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoMarshalHresult",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CoMarshalHresult$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoMarshalHresult$MH() { return CoMarshalHresult$MH_; }

    static final FunctionDescriptor CoUnmarshalHresult$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoUnmarshalHresult$FUNC() { return CoUnmarshalHresult$FUNC_; }

    static final MethodHandle CoUnmarshalHresult$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoUnmarshalHresult",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoUnmarshalHresult$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoUnmarshalHresult$MH() { return CoUnmarshalHresult$MH_; }

    static final FunctionDescriptor CoReleaseMarshalData$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoReleaseMarshalData$FUNC() { return CoReleaseMarshalData$FUNC_; }

    static final MethodHandle CoReleaseMarshalData$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoReleaseMarshalData",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoReleaseMarshalData$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoReleaseMarshalData$MH() { return CoReleaseMarshalData$MH_; }

    static final FunctionDescriptor CoDisconnectObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDisconnectObject$FUNC() { return CoDisconnectObject$FUNC_; }

    static final MethodHandle CoDisconnectObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDisconnectObject",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        CoDisconnectObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDisconnectObject$MH() { return CoDisconnectObject$MH_; }

    static final FunctionDescriptor CoLockObjectExternal$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoLockObjectExternal$FUNC() { return CoLockObjectExternal$FUNC_; }

    static final MethodHandle CoLockObjectExternal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoLockObjectExternal",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        CoLockObjectExternal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoLockObjectExternal$MH() { return CoLockObjectExternal$MH_; }

    static final FunctionDescriptor CoGetStandardMarshal$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetStandardMarshal$FUNC() { return CoGetStandardMarshal$FUNC_; }

    static final MethodHandle CoGetStandardMarshal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetStandardMarshal",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoGetStandardMarshal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetStandardMarshal$MH() { return CoGetStandardMarshal$MH_; }

    static final FunctionDescriptor CoGetStdMarshalEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetStdMarshalEx$FUNC() { return CoGetStdMarshalEx$FUNC_; }

    static final MethodHandle CoGetStdMarshalEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetStdMarshalEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoGetStdMarshalEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetStdMarshalEx$MH() { return CoGetStdMarshalEx$MH_; }

    static final int SMEXF_SERVER() { return (int)1L; }

    static final int SMEXF_HANDLER() { return (int)2L; }

    static final FunctionDescriptor CoIsHandlerConnected$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoIsHandlerConnected$FUNC() { return CoIsHandlerConnected$FUNC_; }

    static final MethodHandle CoIsHandlerConnected$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoIsHandlerConnected",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoIsHandlerConnected$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoIsHandlerConnected$MH() { return CoIsHandlerConnected$MH_; }

    static final FunctionDescriptor CoMarshalInterThreadInterfaceInStream$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoMarshalInterThreadInterfaceInStream$FUNC() { return CoMarshalInterThreadInterfaceInStream$FUNC_; }

    static final MethodHandle CoMarshalInterThreadInterfaceInStream$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoMarshalInterThreadInterfaceInStream",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoMarshalInterThreadInterfaceInStream$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoMarshalInterThreadInterfaceInStream$MH() { return CoMarshalInterThreadInterfaceInStream$MH_; }

    static final FunctionDescriptor CoGetInterfaceAndReleaseStream$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetInterfaceAndReleaseStream$FUNC() { return CoGetInterfaceAndReleaseStream$FUNC_; }

    static final MethodHandle CoGetInterfaceAndReleaseStream$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetInterfaceAndReleaseStream",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetInterfaceAndReleaseStream$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetInterfaceAndReleaseStream$MH() { return CoGetInterfaceAndReleaseStream$MH_; }

    static final FunctionDescriptor CoCreateFreeThreadedMarshaler$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateFreeThreadedMarshaler$FUNC() { return CoCreateFreeThreadedMarshaler$FUNC_; }

    static final MethodHandle CoCreateFreeThreadedMarshaler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateFreeThreadedMarshaler",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoCreateFreeThreadedMarshaler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateFreeThreadedMarshaler$MH() { return CoCreateFreeThreadedMarshaler$MH_; }

    static final FunctionDescriptor CoFreeUnusedLibraries$FUNC_ = FunctionDescriptor.ofVoid();
    static final jdk.incubator.foreign.FunctionDescriptor CoFreeUnusedLibraries$FUNC() { return CoFreeUnusedLibraries$FUNC_; }

    static final MethodHandle CoFreeUnusedLibraries$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoFreeUnusedLibraries",
        "()V",
        CoFreeUnusedLibraries$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoFreeUnusedLibraries$MH() { return CoFreeUnusedLibraries$MH_; }

    static final FunctionDescriptor CoFreeUnusedLibrariesEx$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoFreeUnusedLibrariesEx$FUNC() { return CoFreeUnusedLibrariesEx$FUNC_; }

    static final MethodHandle CoFreeUnusedLibrariesEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoFreeUnusedLibrariesEx",
        "(II)V",
        CoFreeUnusedLibrariesEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoFreeUnusedLibrariesEx$MH() { return CoFreeUnusedLibrariesEx$MH_; }

    static final FunctionDescriptor CoDisconnectContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoDisconnectContext$FUNC() { return CoDisconnectContext$FUNC_; }

    static final MethodHandle CoDisconnectContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoDisconnectContext",
        "(I)I",
        CoDisconnectContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoDisconnectContext$MH() { return CoDisconnectContext$MH_; }

    static final FunctionDescriptor CoInitializeSecurity$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoInitializeSecurity$FUNC() { return CoInitializeSecurity$FUNC_; }

    static final MethodHandle CoInitializeSecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoInitializeSecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoInitializeSecurity$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoInitializeSecurity$MH() { return CoInitializeSecurity$MH_; }

    static final FunctionDescriptor CoGetCallContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCallContext$FUNC() { return CoGetCallContext$FUNC_; }

    static final MethodHandle CoGetCallContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCallContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetCallContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCallContext$MH() { return CoGetCallContext$MH_; }

    static final FunctionDescriptor CoQueryProxyBlanket$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoQueryProxyBlanket$FUNC() { return CoQueryProxyBlanket$FUNC_; }

    static final MethodHandle CoQueryProxyBlanket$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoQueryProxyBlanket",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoQueryProxyBlanket$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoQueryProxyBlanket$MH() { return CoQueryProxyBlanket$MH_; }

    static final FunctionDescriptor CoSetProxyBlanket$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoSetProxyBlanket$FUNC() { return CoSetProxyBlanket$FUNC_; }

    static final MethodHandle CoSetProxyBlanket$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoSetProxyBlanket",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        CoSetProxyBlanket$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoSetProxyBlanket$MH() { return CoSetProxyBlanket$MH_; }

    static final FunctionDescriptor CoCopyProxy$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCopyProxy$FUNC() { return CoCopyProxy$FUNC_; }

    static final MethodHandle CoCopyProxy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCopyProxy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoCopyProxy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCopyProxy$MH() { return CoCopyProxy$MH_; }

    static final FunctionDescriptor CoQueryClientBlanket$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoQueryClientBlanket$FUNC() { return CoQueryClientBlanket$FUNC_; }

    static final MethodHandle CoQueryClientBlanket$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoQueryClientBlanket",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoQueryClientBlanket$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoQueryClientBlanket$MH() { return CoQueryClientBlanket$MH_; }

    static final FunctionDescriptor CoImpersonateClient$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoImpersonateClient$FUNC() { return CoImpersonateClient$FUNC_; }

    static final MethodHandle CoImpersonateClient$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoImpersonateClient",
        "()I",
        CoImpersonateClient$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoImpersonateClient$MH() { return CoImpersonateClient$MH_; }

    static final FunctionDescriptor CoRevertToSelf$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoRevertToSelf$FUNC() { return CoRevertToSelf$FUNC_; }

    static final MethodHandle CoRevertToSelf$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRevertToSelf",
        "()I",
        CoRevertToSelf$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRevertToSelf$MH() { return CoRevertToSelf$MH_; }

    static final FunctionDescriptor CoQueryAuthenticationServices$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoQueryAuthenticationServices$FUNC() { return CoQueryAuthenticationServices$FUNC_; }

    static final MethodHandle CoQueryAuthenticationServices$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoQueryAuthenticationServices",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoQueryAuthenticationServices$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoQueryAuthenticationServices$MH() { return CoQueryAuthenticationServices$MH_; }

    static final FunctionDescriptor CoSwitchCallContext$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoSwitchCallContext$FUNC() { return CoSwitchCallContext$FUNC_; }

    static final MethodHandle CoSwitchCallContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoSwitchCallContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoSwitchCallContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoSwitchCallContext$MH() { return CoSwitchCallContext$MH_; }

    static final FunctionDescriptor CoCreateInstance$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateInstance$FUNC() { return CoCreateInstance$FUNC_; }

    static final MethodHandle CoCreateInstance$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateInstance",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoCreateInstance$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateInstance$MH() { return CoCreateInstance$MH_; }

    static final FunctionDescriptor CoCreateInstanceEx$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateInstanceEx$FUNC() { return CoCreateInstanceEx$FUNC_; }

    static final MethodHandle CoCreateInstanceEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateInstanceEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoCreateInstanceEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateInstanceEx$MH() { return CoCreateInstanceEx$MH_; }

    static final FunctionDescriptor CoCreateInstanceFromApp$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCreateInstanceFromApp$FUNC() { return CoCreateInstanceFromApp$FUNC_; }

    static final MethodHandle CoCreateInstanceFromApp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCreateInstanceFromApp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CoCreateInstanceFromApp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCreateInstanceFromApp$MH() { return CoCreateInstanceFromApp$MH_; }

    static final FunctionDescriptor CoRegisterActivationFilter$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoRegisterActivationFilter$FUNC() { return CoRegisterActivationFilter$FUNC_; }

    static final MethodHandle CoRegisterActivationFilter$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoRegisterActivationFilter",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoRegisterActivationFilter$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoRegisterActivationFilter$MH() { return CoRegisterActivationFilter$MH_; }

    static final FunctionDescriptor CoGetCancelObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoGetCancelObject$FUNC() { return CoGetCancelObject$FUNC_; }

    static final MethodHandle CoGetCancelObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoGetCancelObject",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        CoGetCancelObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoGetCancelObject$MH() { return CoGetCancelObject$MH_; }

    static final FunctionDescriptor CoSetCancelObject$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoSetCancelObject$FUNC() { return CoSetCancelObject$FUNC_; }

    static final MethodHandle CoSetCancelObject$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoSetCancelObject",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoSetCancelObject$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoSetCancelObject$MH() { return CoSetCancelObject$MH_; }

    static final FunctionDescriptor CoCancelCall$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoCancelCall$FUNC() { return CoCancelCall$FUNC_; }

    static final MethodHandle CoCancelCall$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoCancelCall",
        "(II)I",
        CoCancelCall$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoCancelCall$MH() { return CoCancelCall$MH_; }

    static final FunctionDescriptor CoTestCancel$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor CoTestCancel$FUNC() { return CoTestCancel$FUNC_; }

    static final MethodHandle CoTestCancel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoTestCancel",
        "()I",
        CoTestCancel$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoTestCancel$MH() { return CoTestCancel$MH_; }

    static final FunctionDescriptor CoEnableCallCancellation$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CoEnableCallCancellation$FUNC() { return CoEnableCallCancellation$FUNC_; }

    static final MethodHandle CoEnableCallCancellation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CoEnableCallCancellation",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        CoEnableCallCancellation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CoEnableCallCancellation$MH() { return CoEnableCallCancellation$MH_; }

}

