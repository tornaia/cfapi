// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$22 extends cfapi_h$constants$21 {

    /* package-private */ cfapi_h$constants$22() {}
    static final MemoryLayout _ImageArchitectureHeader$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT,
        C_LONG.withName("FirstEntryRVA")
    ).withName("_ImageArchitectureHeader");
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureHeader$struct$LAYOUT() { return _ImageArchitectureHeader$struct$LAYOUT_; }

    static final MemoryLayout _ImageArchitectureHeader$FirstEntryRVA$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureHeader$FirstEntryRVA$LAYOUT() { return _ImageArchitectureHeader$FirstEntryRVA$LAYOUT_; }

    static final VarHandle _ImageArchitectureHeader$FirstEntryRVA$VH_ = _ImageArchitectureHeader$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FirstEntryRVA"));
    static final java.lang.invoke.VarHandle _ImageArchitectureHeader$FirstEntryRVA$VH() { return _ImageArchitectureHeader$FirstEntryRVA$VH_; }

    static final MemoryLayout _ImageArchitectureEntry$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("FixupInstRVA"),
        C_LONG.withName("NewInst")
    ).withName("_ImageArchitectureEntry");
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureEntry$struct$LAYOUT() { return _ImageArchitectureEntry$struct$LAYOUT_; }

    static final MemoryLayout _ImageArchitectureEntry$FixupInstRVA$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureEntry$FixupInstRVA$LAYOUT() { return _ImageArchitectureEntry$FixupInstRVA$LAYOUT_; }

    static final VarHandle _ImageArchitectureEntry$FixupInstRVA$VH_ = _ImageArchitectureEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FixupInstRVA"));
    static final java.lang.invoke.VarHandle _ImageArchitectureEntry$FixupInstRVA$VH() { return _ImageArchitectureEntry$FixupInstRVA$VH_; }

    static final MemoryLayout _ImageArchitectureEntry$NewInst$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ImageArchitectureEntry$NewInst$LAYOUT() { return _ImageArchitectureEntry$NewInst$LAYOUT_; }

    static final VarHandle _ImageArchitectureEntry$NewInst$VH_ = _ImageArchitectureEntry$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NewInst"));
    static final java.lang.invoke.VarHandle _ImageArchitectureEntry$NewInst$VH() { return _ImageArchitectureEntry$NewInst$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Sig1"),
        C_SHORT.withName("Sig2"),
        C_SHORT.withName("Version"),
        C_SHORT.withName("Machine"),
        C_LONG.withName("TimeDateStamp"),
        C_LONG.withName("SizeOfData"),
        C_SHORT.withName("Ordinal"),
        C_SHORT.withName("Hint"),
        C_SHORT
    ).withName("IMPORT_OBJECT_HEADER");
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$struct$LAYOUT() { return IMPORT_OBJECT_HEADER$struct$LAYOUT_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Sig1$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Sig1$LAYOUT() { return IMPORT_OBJECT_HEADER$Sig1$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Sig1$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig1"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Sig1$VH() { return IMPORT_OBJECT_HEADER$Sig1$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Sig2$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Sig2$LAYOUT() { return IMPORT_OBJECT_HEADER$Sig2$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Sig2$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Sig2"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Sig2$VH() { return IMPORT_OBJECT_HEADER$Sig2$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Version$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Version$LAYOUT() { return IMPORT_OBJECT_HEADER$Version$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Version$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Version$VH() { return IMPORT_OBJECT_HEADER$Version$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Machine$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Machine$LAYOUT() { return IMPORT_OBJECT_HEADER$Machine$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Machine$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Machine"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Machine$VH() { return IMPORT_OBJECT_HEADER$Machine$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$TimeDateStamp$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$TimeDateStamp$LAYOUT() { return IMPORT_OBJECT_HEADER$TimeDateStamp$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$TimeDateStamp$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$TimeDateStamp$VH() { return IMPORT_OBJECT_HEADER$TimeDateStamp$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$SizeOfData$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$SizeOfData$LAYOUT() { return IMPORT_OBJECT_HEADER$SizeOfData$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$SizeOfData$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("SizeOfData"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$SizeOfData$VH() { return IMPORT_OBJECT_HEADER$SizeOfData$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Ordinal$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Ordinal$LAYOUT() { return IMPORT_OBJECT_HEADER$Ordinal$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Ordinal$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Ordinal"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Ordinal$VH() { return IMPORT_OBJECT_HEADER$Ordinal$VH_; }

    static final MemoryLayout IMPORT_OBJECT_HEADER$Hint$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMPORT_OBJECT_HEADER$Hint$LAYOUT() { return IMPORT_OBJECT_HEADER$Hint$LAYOUT_; }

    static final VarHandle IMPORT_OBJECT_HEADER$Hint$VH_ = IMPORT_OBJECT_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Hint"));
    static final java.lang.invoke.VarHandle IMPORT_OBJECT_HEADER$Hint$VH() { return IMPORT_OBJECT_HEADER$Hint$VH_; }

    static final int IMPORT_OBJECT_CODE() { return (int)0L; }

    static final int IMPORT_OBJECT_DATA() { return (int)1L; }

    static final int IMPORT_OBJECT_CONST() { return (int)2L; }

    static final int IMPORT_OBJECT_ORDINAL() { return (int)0L; }

    static final int IMPORT_OBJECT_NAME() { return (int)1L; }

    static final int IMPORT_OBJECT_NAME_NO_PREFIX() { return (int)2L; }

    static final int IMPORT_OBJECT_NAME_UNDECORATE() { return (int)3L; }

    static final int IMPORT_OBJECT_NAME_EXPORTAS() { return (int)4L; }

    static final int COMIMAGE_FLAGS_ILONLY() { return (int)1L; }

    static final int COMIMAGE_FLAGS_32BITREQUIRED() { return (int)2L; }

    static final int COMIMAGE_FLAGS_IL_LIBRARY() { return (int)4L; }

    static final int COMIMAGE_FLAGS_STRONGNAMESIGNED() { return (int)8L; }

    static final int COMIMAGE_FLAGS_NATIVE_ENTRYPOINT() { return (int)16L; }

    static final int COMIMAGE_FLAGS_TRACKDEBUGDATA() { return (int)65536L; }

    static final int COMIMAGE_FLAGS_32BITPREFERRED() { return (int)131072L; }

    static final int COR_VERSION_MAJOR_V2() { return (int)2L; }

    static final int COR_VERSION_MAJOR() { return (int)2L; }

    static final int COR_VERSION_MINOR() { return (int)5L; }

    static final int COR_DELETED_NAME_LENGTH() { return (int)8L; }

    static final int COR_VTABLEGAP_NAME_LENGTH() { return (int)8L; }

    static final int NATIVE_TYPE_MAX_CB() { return (int)1L; }

    static final int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE() { return (int)255L; }

    static final int IMAGE_COR_MIH_METHODRVA() { return (int)1L; }

    static final int IMAGE_COR_MIH_EHRVA() { return (int)2L; }

    static final int IMAGE_COR_MIH_BASICBLOCK() { return (int)8L; }

    static final int COR_VTABLE_32BIT() { return (int)1L; }

    static final int COR_VTABLE_64BIT() { return (int)2L; }

    static final int COR_VTABLE_FROM_UNMANAGED() { return (int)4L; }

    static final int COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN() { return (int)8L; }

    static final int COR_VTABLE_CALL_MOST_DERIVED() { return (int)16L; }

    static final int IMAGE_COR_EATJ_THUNK_SIZE() { return (int)32L; }

    static final int MAX_CLASS_NAME() { return (int)1024L; }

    static final int MAX_PACKAGE_NAME() { return (int)1024L; }

    static final MemoryLayout IMAGE_COR20_HEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cb"),
        C_SHORT.withName("MajorRuntimeVersion"),
        C_SHORT.withName("MinorRuntimeVersion"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("MetaData"),
        C_LONG.withName("Flags"),
        C_LONG.withName("EntryPointToken"),
        C_LONG.withName("EntryPointRVA"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("Resources"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("StrongNameSignature"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("CodeManagerTable"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("VTableFixups"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("ExportAddressTableJumps"),
        MemoryLayout.ofStruct(
            C_LONG.withName("VirtualAddress"),
            C_LONG.withName("Size")
        ).withName("ManagedNativeHeader")
    ).withName("IMAGE_COR20_HEADER");
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$struct$LAYOUT() { return IMAGE_COR20_HEADER$struct$LAYOUT_; }

    static final MemoryLayout IMAGE_COR20_HEADER$cb$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$cb$LAYOUT() { return IMAGE_COR20_HEADER$cb$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$cb$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cb"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$cb$VH() { return IMAGE_COR20_HEADER$cb$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$MajorRuntimeVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$MajorRuntimeVersion$LAYOUT() { return IMAGE_COR20_HEADER$MajorRuntimeVersion$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$MajorRuntimeVersion$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorRuntimeVersion"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$MajorRuntimeVersion$VH() { return IMAGE_COR20_HEADER$MajorRuntimeVersion$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$MinorRuntimeVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$MinorRuntimeVersion$LAYOUT() { return IMAGE_COR20_HEADER$MinorRuntimeVersion$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$MinorRuntimeVersion$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorRuntimeVersion"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$MinorRuntimeVersion$VH() { return IMAGE_COR20_HEADER$MinorRuntimeVersion$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$Flags$LAYOUT() { return IMAGE_COR20_HEADER$Flags$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$Flags$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$Flags$VH() { return IMAGE_COR20_HEADER$Flags$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$EntryPointToken$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$EntryPointToken$LAYOUT() { return IMAGE_COR20_HEADER$EntryPointToken$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$EntryPointToken$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryPointToken"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$EntryPointToken$VH() { return IMAGE_COR20_HEADER$EntryPointToken$VH_; }

    static final MemoryLayout IMAGE_COR20_HEADER$EntryPointRVA$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout IMAGE_COR20_HEADER$EntryPointRVA$LAYOUT() { return IMAGE_COR20_HEADER$EntryPointRVA$LAYOUT_; }

    static final VarHandle IMAGE_COR20_HEADER$EntryPointRVA$VH_ = IMAGE_COR20_HEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryPointRVA"));
    static final java.lang.invoke.VarHandle IMAGE_COR20_HEADER$EntryPointRVA$VH() { return IMAGE_COR20_HEADER$EntryPointRVA$VH_; }

    static final FunctionDescriptor RtlCaptureStackBackTrace$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCaptureStackBackTrace$FUNC() { return RtlCaptureStackBackTrace$FUNC_; }

    static final MethodHandle RtlCaptureStackBackTrace$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCaptureStackBackTrace",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)S",
        RtlCaptureStackBackTrace$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCaptureStackBackTrace$MH() { return RtlCaptureStackBackTrace$MH_; }

    static final FunctionDescriptor RtlCaptureContext$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCaptureContext$FUNC() { return RtlCaptureContext$FUNC_; }

    static final MethodHandle RtlCaptureContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCaptureContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlCaptureContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCaptureContext$MH() { return RtlCaptureContext$MH_; }

    static final FunctionDescriptor RtlCaptureContext2$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCaptureContext2$FUNC() { return RtlCaptureContext2$FUNC_; }

    static final MethodHandle RtlCaptureContext2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCaptureContext2",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlCaptureContext2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCaptureContext2$MH() { return RtlCaptureContext2$MH_; }

    static final FunctionDescriptor RtlUnwind$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlUnwind$FUNC() { return RtlUnwind$FUNC_; }

    static final MethodHandle RtlUnwind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlUnwind",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlUnwind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlUnwind$MH() { return RtlUnwind$MH_; }

    static final FunctionDescriptor RtlAddFunctionTable$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlAddFunctionTable$FUNC() { return RtlAddFunctionTable$FUNC_; }

    static final MethodHandle RtlAddFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlAddFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;IJ)B",
        RtlAddFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlAddFunctionTable$MH() { return RtlAddFunctionTable$MH_; }

    static final FunctionDescriptor RtlDeleteFunctionTable$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlDeleteFunctionTable$FUNC() { return RtlDeleteFunctionTable$FUNC_; }

    static final MethodHandle RtlDeleteFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlDeleteFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;)B",
        RtlDeleteFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlDeleteFunctionTable$MH() { return RtlDeleteFunctionTable$MH_; }

    static final FunctionDescriptor RtlInstallFunctionTableCallback$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_LONGLONG,
        C_LONGLONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInstallFunctionTableCallback$FUNC() { return RtlInstallFunctionTableCallback$FUNC_; }

    static final MethodHandle RtlInstallFunctionTableCallback$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInstallFunctionTableCallback",
        "(JJILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)B",
        RtlInstallFunctionTableCallback$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInstallFunctionTableCallback$MH() { return RtlInstallFunctionTableCallback$MH_; }

    static final FunctionDescriptor RtlInstallFunctionTableCallback$Callback$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInstallFunctionTableCallback$Callback$FUNC() { return RtlInstallFunctionTableCallback$Callback$FUNC_; }

    static final FunctionDescriptor RtlAddGrowableFunctionTable$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlAddGrowableFunctionTable$FUNC() { return RtlAddGrowableFunctionTable$FUNC_; }

    static final MethodHandle RtlAddGrowableFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlAddGrowableFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIJJ)I",
        RtlAddGrowableFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlAddGrowableFunctionTable$MH() { return RtlAddGrowableFunctionTable$MH_; }

    static final FunctionDescriptor RtlGrowFunctionTable$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlGrowFunctionTable$FUNC() { return RtlGrowFunctionTable$FUNC_; }

    static final MethodHandle RtlGrowFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGrowFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;I)V",
        RtlGrowFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlGrowFunctionTable$MH() { return RtlGrowFunctionTable$MH_; }

    static final FunctionDescriptor RtlDeleteGrowableFunctionTable$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlDeleteGrowableFunctionTable$FUNC() { return RtlDeleteGrowableFunctionTable$FUNC_; }

    static final MethodHandle RtlDeleteGrowableFunctionTable$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlDeleteGrowableFunctionTable",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlDeleteGrowableFunctionTable$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlDeleteGrowableFunctionTable$MH() { return RtlDeleteGrowableFunctionTable$MH_; }

    static final FunctionDescriptor RtlLookupFunctionEntry$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONGLONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlLookupFunctionEntry$FUNC() { return RtlLookupFunctionEntry$FUNC_; }

    static final MethodHandle RtlLookupFunctionEntry$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlLookupFunctionEntry",
        "(JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlLookupFunctionEntry$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlLookupFunctionEntry$MH() { return RtlLookupFunctionEntry$MH_; }

    static final FunctionDescriptor RtlRestoreContext$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlRestoreContext$FUNC() { return RtlRestoreContext$FUNC_; }

    static final MethodHandle RtlRestoreContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlRestoreContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlRestoreContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlRestoreContext$MH() { return RtlRestoreContext$MH_; }

    static final FunctionDescriptor RtlUnwindEx$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlUnwindEx$FUNC() { return RtlUnwindEx$FUNC_; }

    static final MethodHandle RtlUnwindEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlUnwindEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlUnwindEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlUnwindEx$MH() { return RtlUnwindEx$MH_; }

    static final FunctionDescriptor RtlVirtualUnwind$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONGLONG,
        C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlVirtualUnwind$FUNC() { return RtlVirtualUnwind$FUNC_; }

    static final MethodHandle RtlVirtualUnwind$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlVirtualUnwind",
        "(IJJLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlVirtualUnwind$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlVirtualUnwind$MH() { return RtlVirtualUnwind$MH_; }

    static final FunctionDescriptor RtlRaiseException$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlRaiseException$FUNC() { return RtlRaiseException$FUNC_; }

    static final MethodHandle RtlRaiseException$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlRaiseException",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlRaiseException$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlRaiseException$MH() { return RtlRaiseException$MH_; }

    static final FunctionDescriptor RtlPcToFileHeader$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlPcToFileHeader$FUNC() { return RtlPcToFileHeader$FUNC_; }

    static final MethodHandle RtlPcToFileHeader$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlPcToFileHeader",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlPcToFileHeader$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlPcToFileHeader$MH() { return RtlPcToFileHeader$MH_; }

    static final FunctionDescriptor RtlCompareMemory$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCompareMemory$FUNC() { return RtlCompareMemory$FUNC_; }

    static final MethodHandle RtlCompareMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCompareMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)J",
        RtlCompareMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCompareMemory$MH() { return RtlCompareMemory$MH_; }

    static final MemoryLayout _SLIST_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Next"),
        MemoryLayout.ofPaddingBits(64)
    ).withName("_SLIST_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _SLIST_ENTRY$struct$LAYOUT() { return _SLIST_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _SLIST_ENTRY$Next$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _SLIST_ENTRY$Next$LAYOUT() { return _SLIST_ENTRY$Next$LAYOUT_; }

    static final VarHandle _SLIST_ENTRY$Next$VH_ = MemoryHandles.asAddressVarHandle(_SLIST_ENTRY$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Next")));
    static final java.lang.invoke.VarHandle _SLIST_ENTRY$Next$VH() { return _SLIST_ENTRY$Next$VH_; }

    static final MemoryLayout _SLIST_HEADER$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_LONGLONG.withName("Alignment"),
        C_LONGLONG.withName("Region"),
        MemoryLayout.ofStruct(
            C_LONGLONG,
            C_LONGLONG
        ).withName("HeaderX64")
    ).withName("_SLIST_HEADER");
    static final jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$struct$LAYOUT() { return _SLIST_HEADER$struct$LAYOUT_; }

    static final MemoryLayout _SLIST_HEADER$Alignment$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$Alignment$LAYOUT() { return _SLIST_HEADER$Alignment$LAYOUT_; }

    static final VarHandle _SLIST_HEADER$Alignment$VH_ = _SLIST_HEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Alignment"));
    static final java.lang.invoke.VarHandle _SLIST_HEADER$Alignment$VH() { return _SLIST_HEADER$Alignment$VH_; }

    static final MemoryLayout _SLIST_HEADER$Region$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _SLIST_HEADER$Region$LAYOUT() { return _SLIST_HEADER$Region$LAYOUT_; }

    static final VarHandle _SLIST_HEADER$Region$VH_ = _SLIST_HEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Region"));
    static final java.lang.invoke.VarHandle _SLIST_HEADER$Region$VH() { return _SLIST_HEADER$Region$VH_; }

    static final MemoryLayout HeaderX64$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.MemoryLayout HeaderX64$struct$LAYOUT() { return HeaderX64$struct$LAYOUT_; }

    static final FunctionDescriptor RtlInitializeSListHead$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInitializeSListHead$FUNC() { return RtlInitializeSListHead$FUNC_; }

    static final MethodHandle RtlInitializeSListHead$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInitializeSListHead",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        RtlInitializeSListHead$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInitializeSListHead$MH() { return RtlInitializeSListHead$MH_; }

    static final FunctionDescriptor RtlFirstEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFirstEntrySList$FUNC() { return RtlFirstEntrySList$FUNC_; }

    static final MethodHandle RtlFirstEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFirstEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlFirstEntrySList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFirstEntrySList$MH() { return RtlFirstEntrySList$MH_; }

    static final FunctionDescriptor RtlInterlockedPopEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInterlockedPopEntrySList$FUNC() { return RtlInterlockedPopEntrySList$FUNC_; }

    static final MethodHandle RtlInterlockedPopEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedPopEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedPopEntrySList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInterlockedPopEntrySList$MH() { return RtlInterlockedPopEntrySList$MH_; }

    static final FunctionDescriptor RtlInterlockedPushEntrySList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInterlockedPushEntrySList$FUNC() { return RtlInterlockedPushEntrySList$FUNC_; }

    static final MethodHandle RtlInterlockedPushEntrySList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedPushEntrySList",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedPushEntrySList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInterlockedPushEntrySList$MH() { return RtlInterlockedPushEntrySList$MH_; }

    static final FunctionDescriptor RtlInterlockedPushListSListEx$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInterlockedPushListSListEx$FUNC() { return RtlInterlockedPushListSListEx$FUNC_; }

    static final MethodHandle RtlInterlockedPushListSListEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedPushListSListEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedPushListSListEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInterlockedPushListSListEx$MH() { return RtlInterlockedPushListSListEx$MH_; }

    static final FunctionDescriptor RtlInterlockedFlushSList$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInterlockedFlushSList$FUNC() { return RtlInterlockedFlushSList$FUNC_; }

    static final MethodHandle RtlInterlockedFlushSList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInterlockedFlushSList",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        RtlInterlockedFlushSList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInterlockedFlushSList$MH() { return RtlInterlockedFlushSList$MH_; }

    static final FunctionDescriptor RtlQueryDepthSList$FUNC_ = FunctionDescriptor.of(C_SHORT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlQueryDepthSList$FUNC() { return RtlQueryDepthSList$FUNC_; }

    static final MethodHandle RtlQueryDepthSList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlQueryDepthSList",
        "(Ljdk/incubator/foreign/MemoryAddress;)S",
        RtlQueryDepthSList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlQueryDepthSList$MH() { return RtlQueryDepthSList$MH_; }

    static final FunctionDescriptor RtlGetReturnAddressHijackTarget$FUNC_ = FunctionDescriptor.of(C_LONGLONG);
    static final jdk.incubator.foreign.FunctionDescriptor RtlGetReturnAddressHijackTarget$FUNC() { return RtlGetReturnAddressHijackTarget$FUNC_; }

    static final MethodHandle RtlGetReturnAddressHijackTarget$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetReturnAddressHijackTarget",
        "()J",
        RtlGetReturnAddressHijackTarget$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlGetReturnAddressHijackTarget$MH() { return RtlGetReturnAddressHijackTarget$MH_; }

    static final MemoryLayout _RTL_RUN_ONCE$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_POINTER.withName("Ptr")
    ).withName("_RTL_RUN_ONCE");
    static final jdk.incubator.foreign.MemoryLayout _RTL_RUN_ONCE$struct$LAYOUT() { return _RTL_RUN_ONCE$struct$LAYOUT_; }

    static final MemoryLayout _RTL_RUN_ONCE$Ptr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _RTL_RUN_ONCE$Ptr$LAYOUT() { return _RTL_RUN_ONCE$Ptr$LAYOUT_; }

    static final VarHandle _RTL_RUN_ONCE$Ptr$VH_ = MemoryHandles.asAddressVarHandle(_RTL_RUN_ONCE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ptr")));
    static final java.lang.invoke.VarHandle _RTL_RUN_ONCE$Ptr$VH() { return _RTL_RUN_ONCE$Ptr$VH_; }

    static final MemoryLayout _RTL_BARRIER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Reserved1"),
        C_LONG.withName("Reserved2"),
        MemoryLayout.ofSequence(2, C_LONGLONG).withName("Reserved3"),
        C_LONG.withName("Reserved4"),
        C_LONG.withName("Reserved5")
    ).withName("_RTL_BARRIER");
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$struct$LAYOUT() { return _RTL_BARRIER$struct$LAYOUT_; }

    static final MemoryLayout _RTL_BARRIER$Reserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved1$LAYOUT() { return _RTL_BARRIER$Reserved1$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved1$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved1"));
    static final java.lang.invoke.VarHandle _RTL_BARRIER$Reserved1$VH() { return _RTL_BARRIER$Reserved1$VH_; }

    static final MemoryLayout _RTL_BARRIER$Reserved2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved2$LAYOUT() { return _RTL_BARRIER$Reserved2$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved2$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved2"));
    static final java.lang.invoke.VarHandle _RTL_BARRIER$Reserved2$VH() { return _RTL_BARRIER$Reserved2$VH_; }

    static final MemoryLayout _RTL_BARRIER$Reserved4$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved4$LAYOUT() { return _RTL_BARRIER$Reserved4$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved4$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved4"));
    static final java.lang.invoke.VarHandle _RTL_BARRIER$Reserved4$VH() { return _RTL_BARRIER$Reserved4$VH_; }

    static final MemoryLayout _RTL_BARRIER$Reserved5$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_BARRIER$Reserved5$LAYOUT() { return _RTL_BARRIER$Reserved5$LAYOUT_; }

    static final VarHandle _RTL_BARRIER$Reserved5$VH_ = _RTL_BARRIER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved5"));
    static final java.lang.invoke.VarHandle _RTL_BARRIER$Reserved5$VH() { return _RTL_BARRIER$Reserved5$VH_; }

    static final FunctionDescriptor __fastfail$FUNC_ = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor __fastfail$FUNC() { return __fastfail$FUNC_; }

    static final MethodHandle __fastfail$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "__fastfail",
        "(I)V",
        __fastfail$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle __fastfail$MH() { return __fastfail$MH_; }

    static final FunctionDescriptor HEAP_MAKE_TAG_FLAGS$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor HEAP_MAKE_TAG_FLAGS$FUNC() { return HEAP_MAKE_TAG_FLAGS$FUNC_; }

    static final MethodHandle HEAP_MAKE_TAG_FLAGS$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "HEAP_MAKE_TAG_FLAGS",
        "(II)I",
        HEAP_MAKE_TAG_FLAGS$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle HEAP_MAKE_TAG_FLAGS$MH() { return HEAP_MAKE_TAG_FLAGS$MH_; }

    static final FunctionDescriptor RtlSecureZeroMemory$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlSecureZeroMemory$FUNC() { return RtlSecureZeroMemory$FUNC_; }

    static final MethodHandle RtlSecureZeroMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlSecureZeroMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        RtlSecureZeroMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlSecureZeroMemory$MH() { return RtlSecureZeroMemory$MH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Length"),
        C_SHORT.withName("Flags"),
        MemoryLayout.ofSequence(1, C_CHAR).withName("Text"),
        MemoryLayout.ofPaddingBits(8)
    ).withName("_MESSAGE_RESOURCE_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT() { return _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _MESSAGE_RESOURCE_ENTRY$Length$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_ENTRY$Length$LAYOUT() { return _MESSAGE_RESOURCE_ENTRY$Length$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_ENTRY$Length$VH_ = _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_ENTRY$Length$VH() { return _MESSAGE_RESOURCE_ENTRY$Length$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_ENTRY$Flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_ENTRY$Flags$LAYOUT() { return _MESSAGE_RESOURCE_ENTRY$Flags$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_ENTRY$Flags$VH_ = _MESSAGE_RESOURCE_ENTRY$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_ENTRY$Flags$VH() { return _MESSAGE_RESOURCE_ENTRY$Flags$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("LowId"),
        C_LONG.withName("HighId"),
        C_LONG.withName("OffsetToEntries")
    ).withName("_MESSAGE_RESOURCE_BLOCK");
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$LowId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$LowId$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$LowId$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_BLOCK$LowId$VH_ = _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LowId"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_BLOCK$LowId$VH() { return _MESSAGE_RESOURCE_BLOCK$LowId$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$HighId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$HighId$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$HighId$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_BLOCK$HighId$VH_ = _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HighId"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_BLOCK$HighId$VH() { return _MESSAGE_RESOURCE_BLOCK$HighId$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$LAYOUT() { return _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH_ = _MESSAGE_RESOURCE_BLOCK$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("OffsetToEntries"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH() { return _MESSAGE_RESOURCE_BLOCK$OffsetToEntries$VH_; }

    static final MemoryLayout _MESSAGE_RESOURCE_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("NumberOfBlocks"),
        MemoryLayout.ofSequence(1, MemoryLayout.ofStruct(
            C_LONG.withName("LowId"),
            C_LONG.withName("HighId"),
            C_LONG.withName("OffsetToEntries")
        ).withName("_MESSAGE_RESOURCE_BLOCK")).withName("Blocks")
    ).withName("_MESSAGE_RESOURCE_DATA");
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_DATA$struct$LAYOUT() { return _MESSAGE_RESOURCE_DATA$struct$LAYOUT_; }

    static final MemoryLayout _MESSAGE_RESOURCE_DATA$NumberOfBlocks$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MESSAGE_RESOURCE_DATA$NumberOfBlocks$LAYOUT() { return _MESSAGE_RESOURCE_DATA$NumberOfBlocks$LAYOUT_; }

    static final VarHandle _MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH_ = _MESSAGE_RESOURCE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfBlocks"));
    static final java.lang.invoke.VarHandle _MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH() { return _MESSAGE_RESOURCE_DATA$NumberOfBlocks$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwOSVersionInfoSize"),
        C_LONG.withName("dwMajorVersion"),
        C_LONG.withName("dwMinorVersion"),
        C_LONG.withName("dwBuildNumber"),
        C_LONG.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_CHAR).withName("szCSDVersion")
    ).withName("_OSVERSIONINFOA");
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$struct$LAYOUT() { return _OSVERSIONINFOA$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOA$dwOSVersionInfoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOA$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOA$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwMajorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOA$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwMajorVersion$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwMajorVersion$VH() { return _OSVERSIONINFOA$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwMinorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOA$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwMinorVersion$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwMinorVersion$VH() { return _OSVERSIONINFOA$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwBuildNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOA$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwBuildNumber$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwBuildNumber$VH() { return _OSVERSIONINFOA$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOA$dwPlatformId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOA$dwPlatformId$LAYOUT() { return _OSVERSIONINFOA$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOA$dwPlatformId$VH_ = _OSVERSIONINFOA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOA$dwPlatformId$VH() { return _OSVERSIONINFOA$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwOSVersionInfoSize"),
        C_LONG.withName("dwMajorVersion"),
        C_LONG.withName("dwMinorVersion"),
        C_LONG.withName("dwBuildNumber"),
        C_LONG.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("szCSDVersion")
    ).withName("_OSVERSIONINFOW");
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$struct$LAYOUT() { return _OSVERSIONINFOW$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOW$dwOSVersionInfoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOW$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOW$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwMajorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOW$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwMajorVersion$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwMajorVersion$VH() { return _OSVERSIONINFOW$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwMinorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOW$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwMinorVersion$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwMinorVersion$VH() { return _OSVERSIONINFOW$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwBuildNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOW$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwBuildNumber$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwBuildNumber$VH() { return _OSVERSIONINFOW$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOW$dwPlatformId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOW$dwPlatformId$LAYOUT() { return _OSVERSIONINFOW$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOW$dwPlatformId$VH_ = _OSVERSIONINFOW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOW$dwPlatformId$VH() { return _OSVERSIONINFOW$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwOSVersionInfoSize"),
        C_LONG.withName("dwMajorVersion"),
        C_LONG.withName("dwMinorVersion"),
        C_LONG.withName("dwBuildNumber"),
        C_LONG.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_CHAR).withName("szCSDVersion"),
        C_SHORT.withName("wServicePackMajor"),
        C_SHORT.withName("wServicePackMinor"),
        C_SHORT.withName("wSuiteMask"),
        C_CHAR.withName("wProductType"),
        C_CHAR.withName("wReserved")
    ).withName("_OSVERSIONINFOEXA");
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$struct$LAYOUT() { return _OSVERSIONINFOEXA$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwOSVersionInfoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOEXA$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOEXA$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwMajorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOEXA$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwMajorVersion$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwMajorVersion$VH() { return _OSVERSIONINFOEXA$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwMinorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOEXA$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwMinorVersion$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwMinorVersion$VH() { return _OSVERSIONINFOEXA$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwBuildNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOEXA$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwBuildNumber$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwBuildNumber$VH() { return _OSVERSIONINFOEXA$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$dwPlatformId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$dwPlatformId$LAYOUT() { return _OSVERSIONINFOEXA$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$dwPlatformId$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$dwPlatformId$VH() { return _OSVERSIONINFOEXA$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wServicePackMajor$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wServicePackMajor$LAYOUT() { return _OSVERSIONINFOEXA$wServicePackMajor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wServicePackMajor$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMajor"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wServicePackMajor$VH() { return _OSVERSIONINFOEXA$wServicePackMajor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wServicePackMinor$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wServicePackMinor$LAYOUT() { return _OSVERSIONINFOEXA$wServicePackMinor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wServicePackMinor$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMinor"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wServicePackMinor$VH() { return _OSVERSIONINFOEXA$wServicePackMinor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wSuiteMask$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wSuiteMask$LAYOUT() { return _OSVERSIONINFOEXA$wSuiteMask$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wSuiteMask$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSuiteMask"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wSuiteMask$VH() { return _OSVERSIONINFOEXA$wSuiteMask$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wProductType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wProductType$LAYOUT() { return _OSVERSIONINFOEXA$wProductType$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wProductType$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wProductType"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wProductType$VH() { return _OSVERSIONINFOEXA$wProductType$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXA$wReserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXA$wReserved$LAYOUT() { return _OSVERSIONINFOEXA$wReserved$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXA$wReserved$VH_ = _OSVERSIONINFOEXA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wReserved"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXA$wReserved$VH() { return _OSVERSIONINFOEXA$wReserved$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwOSVersionInfoSize"),
        C_LONG.withName("dwMajorVersion"),
        C_LONG.withName("dwMinorVersion"),
        C_LONG.withName("dwBuildNumber"),
        C_LONG.withName("dwPlatformId"),
        MemoryLayout.ofSequence(128, C_SHORT).withName("szCSDVersion"),
        C_SHORT.withName("wServicePackMajor"),
        C_SHORT.withName("wServicePackMinor"),
        C_SHORT.withName("wSuiteMask"),
        C_CHAR.withName("wProductType"),
        C_CHAR.withName("wReserved")
    ).withName("_OSVERSIONINFOEXW");
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$struct$LAYOUT() { return _OSVERSIONINFOEXW$struct$LAYOUT_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwOSVersionInfoSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwOSVersionInfoSize$LAYOUT() { return _OSVERSIONINFOEXW$dwOSVersionInfoSize$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwOSVersionInfoSize$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOSVersionInfoSize"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwOSVersionInfoSize$VH() { return _OSVERSIONINFOEXW$dwOSVersionInfoSize$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwMajorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwMajorVersion$LAYOUT() { return _OSVERSIONINFOEXW$dwMajorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwMajorVersion$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMajorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwMajorVersion$VH() { return _OSVERSIONINFOEXW$dwMajorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwMinorVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwMinorVersion$LAYOUT() { return _OSVERSIONINFOEXW$dwMinorVersion$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwMinorVersion$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMinorVersion"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwMinorVersion$VH() { return _OSVERSIONINFOEXW$dwMinorVersion$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwBuildNumber$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwBuildNumber$LAYOUT() { return _OSVERSIONINFOEXW$dwBuildNumber$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwBuildNumber$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBuildNumber"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwBuildNumber$VH() { return _OSVERSIONINFOEXW$dwBuildNumber$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$dwPlatformId$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$dwPlatformId$LAYOUT() { return _OSVERSIONINFOEXW$dwPlatformId$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$dwPlatformId$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPlatformId"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$dwPlatformId$VH() { return _OSVERSIONINFOEXW$dwPlatformId$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wServicePackMajor$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wServicePackMajor$LAYOUT() { return _OSVERSIONINFOEXW$wServicePackMajor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wServicePackMajor$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMajor"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wServicePackMajor$VH() { return _OSVERSIONINFOEXW$wServicePackMajor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wServicePackMinor$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wServicePackMinor$LAYOUT() { return _OSVERSIONINFOEXW$wServicePackMinor$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wServicePackMinor$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wServicePackMinor"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wServicePackMinor$VH() { return _OSVERSIONINFOEXW$wServicePackMinor$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wSuiteMask$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wSuiteMask$LAYOUT() { return _OSVERSIONINFOEXW$wSuiteMask$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wSuiteMask$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wSuiteMask"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wSuiteMask$VH() { return _OSVERSIONINFOEXW$wSuiteMask$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wProductType$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wProductType$LAYOUT() { return _OSVERSIONINFOEXW$wProductType$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wProductType$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wProductType"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wProductType$VH() { return _OSVERSIONINFOEXW$wProductType$VH_; }

    static final MemoryLayout _OSVERSIONINFOEXW$wReserved$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _OSVERSIONINFOEXW$wReserved$LAYOUT() { return _OSVERSIONINFOEXW$wReserved$LAYOUT_; }

    static final VarHandle _OSVERSIONINFOEXW$wReserved$VH_ = _OSVERSIONINFOEXW$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("wReserved"));
    static final java.lang.invoke.VarHandle _OSVERSIONINFOEXW$wReserved$VH() { return _OSVERSIONINFOEXW$wReserved$VH_; }

    static final FunctionDescriptor VerSetConditionMask$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_LONGLONG,
        C_LONG,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerSetConditionMask$FUNC() { return VerSetConditionMask$FUNC_; }

    static final MethodHandle VerSetConditionMask$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerSetConditionMask",
        "(JIB)J",
        VerSetConditionMask$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerSetConditionMask$MH() { return VerSetConditionMask$MH_; }

    static final FunctionDescriptor RtlGetProductInfo$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlGetProductInfo$FUNC() { return RtlGetProductInfo$FUNC_; }

    static final MethodHandle RtlGetProductInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetProductInfo",
        "(IIIILjdk/incubator/foreign/MemoryAddress;)B",
        RtlGetProductInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlGetProductInfo$MH() { return RtlGetProductInfo$MH_; }

    static final int UmsThreadInvalidInfoClass() { return (int)0L; }

    static final int UmsThreadUserContext() { return (int)1L; }

    static final int UmsThreadPriority() { return (int)2L; }

    static final int UmsThreadAffinity() { return (int)3L; }

    static final int UmsThreadTeb() { return (int)4L; }

    static final int UmsThreadIsSuspended() { return (int)5L; }

    static final int UmsThreadIsTerminated() { return (int)6L; }

    static final int UmsThreadMaxInfoClass() { return (int)7L; }

    static final int UmsSchedulerStartup() { return (int)0L; }

    static final int UmsSchedulerThreadBlocked() { return (int)1L; }

    static final int UmsSchedulerThreadYield() { return (int)2L; }

    static final FunctionDescriptor RtlCrc32$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCrc32$FUNC() { return RtlCrc32$FUNC_; }

    static final MethodHandle RtlCrc32$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCrc32",
        "(Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlCrc32$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCrc32$MH() { return RtlCrc32$MH_; }

    static final FunctionDescriptor RtlCrc64$FUNC_ = FunctionDescriptor.of(C_LONGLONG,
        C_POINTER,
        C_LONGLONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlCrc64$FUNC() { return RtlCrc64$FUNC_; }

    static final MethodHandle RtlCrc64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlCrc64",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)J",
        RtlCrc64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlCrc64$MH() { return RtlCrc64$MH_; }

    static final int OS_DEPLOYMENT_STANDARD() { return (int)1L; }

    static final int OS_DEPLOYMENT_COMPACT() { return (int)2L; }

    static final FunctionDescriptor RtlOsDeploymentState$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlOsDeploymentState$FUNC() { return RtlOsDeploymentState$FUNC_; }

    static final MethodHandle RtlOsDeploymentState$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlOsDeploymentState",
        "(I)I",
        RtlOsDeploymentState$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlOsDeploymentState$MH() { return RtlOsDeploymentState$MH_; }

    static final MemoryLayout _NV_MEMORY_RANGE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("BaseAddress"),
        C_LONGLONG.withName("Length")
    ).withName("_NV_MEMORY_RANGE");
    static final jdk.incubator.foreign.MemoryLayout _NV_MEMORY_RANGE$struct$LAYOUT() { return _NV_MEMORY_RANGE$struct$LAYOUT_; }

    static final MemoryLayout _NV_MEMORY_RANGE$BaseAddress$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NV_MEMORY_RANGE$BaseAddress$LAYOUT() { return _NV_MEMORY_RANGE$BaseAddress$LAYOUT_; }

    static final VarHandle _NV_MEMORY_RANGE$BaseAddress$VH_ = MemoryHandles.asAddressVarHandle(_NV_MEMORY_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("BaseAddress")));
    static final java.lang.invoke.VarHandle _NV_MEMORY_RANGE$BaseAddress$VH() { return _NV_MEMORY_RANGE$BaseAddress$VH_; }

    static final MemoryLayout _NV_MEMORY_RANGE$Length$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _NV_MEMORY_RANGE$Length$LAYOUT() { return _NV_MEMORY_RANGE$Length$LAYOUT_; }

    static final VarHandle _NV_MEMORY_RANGE$Length$VH_ = _NV_MEMORY_RANGE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Length"));
    static final java.lang.invoke.VarHandle _NV_MEMORY_RANGE$Length$VH() { return _NV_MEMORY_RANGE$Length$VH_; }

    static final FunctionDescriptor RtlGetNonVolatileToken$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlGetNonVolatileToken$FUNC() { return RtlGetNonVolatileToken$FUNC_; }

    static final MethodHandle RtlGetNonVolatileToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlGetNonVolatileToken",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        RtlGetNonVolatileToken$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlGetNonVolatileToken$MH() { return RtlGetNonVolatileToken$MH_; }

    static final FunctionDescriptor RtlFreeNonVolatileToken$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFreeNonVolatileToken$FUNC() { return RtlFreeNonVolatileToken$FUNC_; }

    static final MethodHandle RtlFreeNonVolatileToken$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFreeNonVolatileToken",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlFreeNonVolatileToken$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFreeNonVolatileToken$MH() { return RtlFreeNonVolatileToken$MH_; }

    static final FunctionDescriptor RtlFlushNonVolatileMemory$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFlushNonVolatileMemory$FUNC() { return RtlFlushNonVolatileMemory$FUNC_; }

    static final MethodHandle RtlFlushNonVolatileMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFlushNonVolatileMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlFlushNonVolatileMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFlushNonVolatileMemory$MH() { return RtlFlushNonVolatileMemory$MH_; }

    static final FunctionDescriptor RtlDrainNonVolatileFlush$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlDrainNonVolatileFlush$FUNC() { return RtlDrainNonVolatileFlush$FUNC_; }

    static final MethodHandle RtlDrainNonVolatileFlush$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlDrainNonVolatileFlush",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlDrainNonVolatileFlush$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlDrainNonVolatileFlush$MH() { return RtlDrainNonVolatileFlush$MH_; }

    static final FunctionDescriptor RtlWriteNonVolatileMemory$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlWriteNonVolatileMemory$FUNC() { return RtlWriteNonVolatileMemory$FUNC_; }

    static final MethodHandle RtlWriteNonVolatileMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlWriteNonVolatileMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlWriteNonVolatileMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlWriteNonVolatileMemory$MH() { return RtlWriteNonVolatileMemory$MH_; }

    static final FunctionDescriptor RtlFillNonVolatileMemory$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_CHAR,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFillNonVolatileMemory$FUNC() { return RtlFillNonVolatileMemory$FUNC_; }

    static final MethodHandle RtlFillNonVolatileMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFillNonVolatileMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JBI)I",
        RtlFillNonVolatileMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFillNonVolatileMemory$MH() { return RtlFillNonVolatileMemory$MH_; }

    static final FunctionDescriptor RtlFlushNonVolatileMemoryRanges$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONGLONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlFlushNonVolatileMemoryRanges$FUNC() { return RtlFlushNonVolatileMemoryRanges$FUNC_; }

    static final MethodHandle RtlFlushNonVolatileMemoryRanges$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlFlushNonVolatileMemoryRanges",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I",
        RtlFlushNonVolatileMemoryRanges$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlFlushNonVolatileMemoryRanges$MH() { return RtlFlushNonVolatileMemoryRanges$MH_; }

    static final MemoryLayout CORRELATION_VECTOR$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Version"),
        MemoryLayout.ofSequence(129, C_CHAR).withName("Vector")
    ).withName("CORRELATION_VECTOR");
    static final jdk.incubator.foreign.MemoryLayout CORRELATION_VECTOR$struct$LAYOUT() { return CORRELATION_VECTOR$struct$LAYOUT_; }

    static final MemoryLayout CORRELATION_VECTOR$Version$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout CORRELATION_VECTOR$Version$LAYOUT() { return CORRELATION_VECTOR$Version$LAYOUT_; }

    static final VarHandle CORRELATION_VECTOR$Version$VH_ = CORRELATION_VECTOR$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle CORRELATION_VECTOR$Version$VH() { return CORRELATION_VECTOR$Version$VH_; }

    static final FunctionDescriptor RtlInitializeCorrelationVector$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlInitializeCorrelationVector$FUNC() { return RtlInitializeCorrelationVector$FUNC_; }

    static final MethodHandle RtlInitializeCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlInitializeCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RtlInitializeCorrelationVector$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlInitializeCorrelationVector$MH() { return RtlInitializeCorrelationVector$MH_; }

    static final FunctionDescriptor RtlIncrementCorrelationVector$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlIncrementCorrelationVector$FUNC() { return RtlIncrementCorrelationVector$FUNC_; }

    static final MethodHandle RtlIncrementCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlIncrementCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlIncrementCorrelationVector$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlIncrementCorrelationVector$MH() { return RtlIncrementCorrelationVector$MH_; }

    static final FunctionDescriptor RtlExtendCorrelationVector$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlExtendCorrelationVector$FUNC() { return RtlExtendCorrelationVector$FUNC_; }

    static final MethodHandle RtlExtendCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlExtendCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlExtendCorrelationVector$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlExtendCorrelationVector$MH() { return RtlExtendCorrelationVector$MH_; }

    static final FunctionDescriptor RtlValidateCorrelationVector$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlValidateCorrelationVector$FUNC() { return RtlValidateCorrelationVector$FUNC_; }

    static final MethodHandle RtlValidateCorrelationVector$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlValidateCorrelationVector",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlValidateCorrelationVector$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlValidateCorrelationVector$MH() { return RtlValidateCorrelationVector$MH_; }

    static final MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Size"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("TriggerId")
    ).withName("_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG");
    static final jdk.incubator.foreign.MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_; }

    static final MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$LAYOUT() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$LAYOUT_; }

    static final VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH_ = _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$Size$VH_; }

    static final MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$LAYOUT() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$LAYOUT_; }

    static final VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH_ = MemoryHandles.asAddressVarHandle(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("TriggerId")));
    static final java.lang.invoke.VarHandle _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH() { return _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG$TriggerId$VH_; }

    static final FunctionDescriptor CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC() { return CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC_; }

    static final MethodHandle CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CUSTOM_SYSTEM_EVENT_TRIGGER_INIT",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH() { return CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH_; }

    static final FunctionDescriptor RtlRaiseCustomSystemEventTrigger$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlRaiseCustomSystemEventTrigger$FUNC() { return RtlRaiseCustomSystemEventTrigger$FUNC_; }

    static final MethodHandle RtlRaiseCustomSystemEventTrigger$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlRaiseCustomSystemEventTrigger",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RtlRaiseCustomSystemEventTrigger$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlRaiseCustomSystemEventTrigger$MH() { return RtlRaiseCustomSystemEventTrigger$MH_; }

    static final int ImagePolicyEntryTypeNone() { return (int)0L; }

    static final int ImagePolicyEntryTypeBool() { return (int)1L; }

    static final int ImagePolicyEntryTypeInt8() { return (int)2L; }

    static final int ImagePolicyEntryTypeUInt8() { return (int)3L; }

    static final int ImagePolicyEntryTypeInt16() { return (int)4L; }

    static final int ImagePolicyEntryTypeUInt16() { return (int)5L; }

    static final int ImagePolicyEntryTypeInt32() { return (int)6L; }

    static final int ImagePolicyEntryTypeUInt32() { return (int)7L; }

    static final int ImagePolicyEntryTypeInt64() { return (int)8L; }

    static final int ImagePolicyEntryTypeUInt64() { return (int)9L; }

    static final int ImagePolicyEntryTypeAnsiString() { return (int)10L; }

    static final int ImagePolicyEntryTypeUnicodeString() { return (int)11L; }

    static final int ImagePolicyEntryTypeOverride() { return (int)12L; }

    static final int ImagePolicyEntryTypeMaximum() { return (int)13L; }

    static final int ImagePolicyIdNone() { return (int)0L; }

    static final int ImagePolicyIdEtw() { return (int)1L; }

    static final int ImagePolicyIdDebug() { return (int)2L; }

    static final int ImagePolicyIdCrashDump() { return (int)3L; }

    static final int ImagePolicyIdCrashDumpKey() { return (int)4L; }

    static final int ImagePolicyIdCrashDumpKeyGuid() { return (int)5L; }

    static final int ImagePolicyIdParentSd() { return (int)6L; }

    static final int ImagePolicyIdParentSdRev() { return (int)7L; }

    static final int ImagePolicyIdSvn() { return (int)8L; }

    static final int ImagePolicyIdDeviceId() { return (int)9L; }

    static final int ImagePolicyIdCapability() { return (int)10L; }

    static final int ImagePolicyIdScenarioId() { return (int)11L; }

    static final int ImagePolicyIdMaximum() { return (int)12L; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_INT.withName("PolicyId"),
        MemoryLayout.ofUnion(
            C_POINTER.withName("None"),
            C_CHAR.withName("BoolValue"),
            C_CHAR.withName("Int8Value"),
            C_CHAR.withName("UInt8Value"),
            C_SHORT.withName("Int16Value"),
            C_SHORT.withName("UInt16Value"),
            C_INT.withName("Int32Value"),
            C_INT.withName("UInt32Value"),
            C_LONGLONG.withName("Int64Value"),
            C_LONGLONG.withName("UInt64Value"),
            C_POINTER.withName("AnsiStringValue"),
            C_POINTER.withName("UnicodeStringValue")
        ).withName("u")
    ).withName("_IMAGE_POLICY_ENTRY");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$struct$LAYOUT() { return _IMAGE_POLICY_ENTRY$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$Type$LAYOUT() { return _IMAGE_POLICY_ENTRY$Type$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_ENTRY$Type$VH_ = _IMAGE_POLICY_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _IMAGE_POLICY_ENTRY$Type$VH() { return _IMAGE_POLICY_ENTRY$Type$VH_; }

    static final MemoryLayout _IMAGE_POLICY_ENTRY$PolicyId$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_ENTRY$PolicyId$LAYOUT() { return _IMAGE_POLICY_ENTRY$PolicyId$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_ENTRY$PolicyId$VH_ = _IMAGE_POLICY_ENTRY$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("PolicyId"));
    static final java.lang.invoke.VarHandle _IMAGE_POLICY_ENTRY$PolicyId$VH() { return _IMAGE_POLICY_ENTRY$PolicyId$VH_; }

    static final MemoryLayout u$None$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout u$None$LAYOUT() { return u$None$LAYOUT_; }

    static final VarHandle u$None$VH_ = MemoryHandles.asAddressVarHandle(u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("None")));
    static final java.lang.invoke.VarHandle u$None$VH() { return u$None$VH_; }

    static final MemoryLayout u$BoolValue$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout u$BoolValue$LAYOUT() { return u$BoolValue$LAYOUT_; }

    static final VarHandle u$BoolValue$VH_ = u$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("BoolValue"));
    static final java.lang.invoke.VarHandle u$BoolValue$VH() { return u$BoolValue$VH_; }

    static final MemoryLayout u$Int8Value$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout u$Int8Value$LAYOUT() { return u$Int8Value$LAYOUT_; }

    static final VarHandle u$Int8Value$VH_ = u$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Int8Value"));
    static final java.lang.invoke.VarHandle u$Int8Value$VH() { return u$Int8Value$VH_; }

    static final MemoryLayout u$UInt8Value$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout u$UInt8Value$LAYOUT() { return u$UInt8Value$LAYOUT_; }

    static final VarHandle u$UInt8Value$VH_ = u$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("UInt8Value"));
    static final java.lang.invoke.VarHandle u$UInt8Value$VH() { return u$UInt8Value$VH_; }

    static final MemoryLayout u$Int16Value$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout u$Int16Value$LAYOUT() { return u$Int16Value$LAYOUT_; }

    static final VarHandle u$Int16Value$VH_ = u$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Int16Value"));
    static final java.lang.invoke.VarHandle u$Int16Value$VH() { return u$Int16Value$VH_; }

    static final MemoryLayout u$UInt16Value$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout u$UInt16Value$LAYOUT() { return u$UInt16Value$LAYOUT_; }

    static final VarHandle u$UInt16Value$VH_ = u$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("UInt16Value"));
    static final java.lang.invoke.VarHandle u$UInt16Value$VH() { return u$UInt16Value$VH_; }

    static final MemoryLayout u$Int32Value$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout u$Int32Value$LAYOUT() { return u$Int32Value$LAYOUT_; }

    static final VarHandle u$Int32Value$VH_ = u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Int32Value"));
    static final java.lang.invoke.VarHandle u$Int32Value$VH() { return u$Int32Value$VH_; }

    static final MemoryLayout u$UInt32Value$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout u$UInt32Value$LAYOUT() { return u$UInt32Value$LAYOUT_; }

    static final VarHandle u$UInt32Value$VH_ = u$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UInt32Value"));
    static final java.lang.invoke.VarHandle u$UInt32Value$VH() { return u$UInt32Value$VH_; }

    static final MemoryLayout u$Int64Value$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout u$Int64Value$LAYOUT() { return u$Int64Value$LAYOUT_; }

    static final VarHandle u$Int64Value$VH_ = u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Int64Value"));
    static final java.lang.invoke.VarHandle u$Int64Value$VH() { return u$Int64Value$VH_; }

    static final MemoryLayout u$UInt64Value$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout u$UInt64Value$LAYOUT() { return u$UInt64Value$LAYOUT_; }

    static final VarHandle u$UInt64Value$VH_ = u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UInt64Value"));
    static final java.lang.invoke.VarHandle u$UInt64Value$VH() { return u$UInt64Value$VH_; }

    static final MemoryLayout u$AnsiStringValue$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout u$AnsiStringValue$LAYOUT() { return u$AnsiStringValue$LAYOUT_; }

    static final VarHandle u$AnsiStringValue$VH_ = MemoryHandles.asAddressVarHandle(u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("AnsiStringValue")));
    static final java.lang.invoke.VarHandle u$AnsiStringValue$VH() { return u$AnsiStringValue$VH_; }

    static final MemoryLayout u$UnicodeStringValue$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout u$UnicodeStringValue$LAYOUT() { return u$UnicodeStringValue$LAYOUT_; }

    static final VarHandle u$UnicodeStringValue$VH_ = MemoryHandles.asAddressVarHandle(u$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("UnicodeStringValue")));
    static final java.lang.invoke.VarHandle u$UnicodeStringValue$VH() { return u$UnicodeStringValue$VH_; }

    static final MemoryLayout _IMAGE_POLICY_METADATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_CHAR.withName("Version"),
        MemoryLayout.ofSequence(7, C_CHAR).withName("Reserved0"),
        C_LONGLONG.withName("ApplicationId"),
        MemoryLayout.ofSequence(MemoryLayout.ofStruct(
            C_INT.withName("Type"),
            C_INT.withName("PolicyId"),
            MemoryLayout.ofUnion(
                C_POINTER.withName("None"),
                C_CHAR.withName("BoolValue"),
                C_CHAR.withName("Int8Value"),
                C_CHAR.withName("UInt8Value"),
                C_SHORT.withName("Int16Value"),
                C_SHORT.withName("UInt16Value"),
                C_INT.withName("Int32Value"),
                C_INT.withName("UInt32Value"),
                C_LONGLONG.withName("Int64Value"),
                C_LONGLONG.withName("UInt64Value"),
                C_POINTER.withName("AnsiStringValue"),
                C_POINTER.withName("UnicodeStringValue")
            ).withName("u")
        ).withName("_IMAGE_POLICY_ENTRY")).withName("Policies")
    ).withName("_IMAGE_POLICY_METADATA");
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_METADATA$struct$LAYOUT() { return _IMAGE_POLICY_METADATA$struct$LAYOUT_; }

    static final MemoryLayout _IMAGE_POLICY_METADATA$Version$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_METADATA$Version$LAYOUT() { return _IMAGE_POLICY_METADATA$Version$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_METADATA$Version$VH_ = _IMAGE_POLICY_METADATA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _IMAGE_POLICY_METADATA$Version$VH() { return _IMAGE_POLICY_METADATA$Version$VH_; }

    static final MemoryLayout _IMAGE_POLICY_METADATA$ApplicationId$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _IMAGE_POLICY_METADATA$ApplicationId$LAYOUT() { return _IMAGE_POLICY_METADATA$ApplicationId$LAYOUT_; }

    static final VarHandle _IMAGE_POLICY_METADATA$ApplicationId$VH_ = _IMAGE_POLICY_METADATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ApplicationId"));
    static final java.lang.invoke.VarHandle _IMAGE_POLICY_METADATA$ApplicationId$VH() { return _IMAGE_POLICY_METADATA$ApplicationId$VH_; }

    static final FunctionDescriptor RtlIsZeroMemory$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlIsZeroMemory$FUNC() { return RtlIsZeroMemory$FUNC_; }

    static final MethodHandle RtlIsZeroMemory$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlIsZeroMemory",
        "(Ljdk/incubator/foreign/MemoryAddress;J)B",
        RtlIsZeroMemory$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlIsZeroMemory$MH() { return RtlIsZeroMemory$MH_; }

    static final FunctionDescriptor RtlNormalizeSecurityDescriptor$FUNC_ = FunctionDescriptor.of(C_CHAR,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor RtlNormalizeSecurityDescriptor$FUNC() { return RtlNormalizeSecurityDescriptor$FUNC_; }

    static final MethodHandle RtlNormalizeSecurityDescriptor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RtlNormalizeSecurityDescriptor",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;B)B",
        RtlNormalizeSecurityDescriptor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RtlNormalizeSecurityDescriptor$MH() { return RtlNormalizeSecurityDescriptor$MH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Type"),
        C_SHORT.withName("CreatorBackTraceIndex"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("CriticalSection"),
        MemoryLayout.ofStruct(
            C_POINTER.withName("Flink"),
            C_POINTER.withName("Blink")
        ).withName("ProcessLocksList"),
        C_LONG.withName("EntryCount"),
        C_LONG.withName("ContentionCount"),
        C_LONG.withName("Flags"),
        C_SHORT.withName("CreatorBackTraceIndexHigh"),
        C_SHORT.withName("SpareWORD")
    ).withName("_RTL_CRITICAL_SECTION_DEBUG");
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$Type$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$Type$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$Type$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$Type$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$Type$VH() { return _RTL_CRITICAL_SECTION_DEBUG$Type$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CreatorBackTraceIndex"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH() { return _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndex$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CriticalSection")));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH() { return _RTL_CRITICAL_SECTION_DEBUG$CriticalSection$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$EntryCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$EntryCount$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$EntryCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("EntryCount"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH() { return _RTL_CRITICAL_SECTION_DEBUG$EntryCount$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ContentionCount"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH() { return _RTL_CRITICAL_SECTION_DEBUG$ContentionCount$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$Flags$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$Flags$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$Flags$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$Flags$VH() { return _RTL_CRITICAL_SECTION_DEBUG$Flags$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("CreatorBackTraceIndexHigh"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH() { return _RTL_CRITICAL_SECTION_DEBUG$CreatorBackTraceIndexHigh$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$LAYOUT() { return _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH_ = _RTL_CRITICAL_SECTION_DEBUG$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("SpareWORD"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH() { return _RTL_CRITICAL_SECTION_DEBUG$SpareWORD$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("DebugInfo"),
        C_LONG.withName("LockCount"),
        C_LONG.withName("RecursionCount"),
        C_POINTER.withName("OwningThread"),
        C_POINTER.withName("LockSemaphore"),
        C_LONGLONG.withName("SpinCount")
    ).withName("_RTL_CRITICAL_SECTION");
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$struct$LAYOUT() { return _RTL_CRITICAL_SECTION$struct$LAYOUT_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$DebugInfo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$DebugInfo$LAYOUT() { return _RTL_CRITICAL_SECTION$DebugInfo$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$DebugInfo$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("DebugInfo")));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$DebugInfo$VH() { return _RTL_CRITICAL_SECTION$DebugInfo$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$LockCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$LockCount$LAYOUT() { return _RTL_CRITICAL_SECTION$LockCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$LockCount$VH_ = _RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("LockCount"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$LockCount$VH() { return _RTL_CRITICAL_SECTION$LockCount$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$RecursionCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$RecursionCount$LAYOUT() { return _RTL_CRITICAL_SECTION$RecursionCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$RecursionCount$VH_ = _RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RecursionCount"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$RecursionCount$VH() { return _RTL_CRITICAL_SECTION$RecursionCount$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$OwningThread$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$OwningThread$LAYOUT() { return _RTL_CRITICAL_SECTION$OwningThread$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$OwningThread$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("OwningThread")));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$OwningThread$VH() { return _RTL_CRITICAL_SECTION$OwningThread$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$LockSemaphore$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$LockSemaphore$LAYOUT() { return _RTL_CRITICAL_SECTION$LockSemaphore$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$LockSemaphore$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("LockSemaphore")));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$LockSemaphore$VH() { return _RTL_CRITICAL_SECTION$LockSemaphore$VH_; }

    static final MemoryLayout _RTL_CRITICAL_SECTION$SpinCount$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CRITICAL_SECTION$SpinCount$LAYOUT() { return _RTL_CRITICAL_SECTION$SpinCount$LAYOUT_; }

    static final VarHandle _RTL_CRITICAL_SECTION$SpinCount$VH_ = _RTL_CRITICAL_SECTION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("SpinCount"));
    static final java.lang.invoke.VarHandle _RTL_CRITICAL_SECTION$SpinCount$VH() { return _RTL_CRITICAL_SECTION$SpinCount$VH_; }

    static final MemoryLayout _RTL_SRWLOCK$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Ptr")
    ).withName("_RTL_SRWLOCK");
    static final jdk.incubator.foreign.MemoryLayout _RTL_SRWLOCK$struct$LAYOUT() { return _RTL_SRWLOCK$struct$LAYOUT_; }

    static final MemoryLayout _RTL_SRWLOCK$Ptr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _RTL_SRWLOCK$Ptr$LAYOUT() { return _RTL_SRWLOCK$Ptr$LAYOUT_; }

    static final VarHandle _RTL_SRWLOCK$Ptr$VH_ = MemoryHandles.asAddressVarHandle(_RTL_SRWLOCK$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ptr")));
    static final java.lang.invoke.VarHandle _RTL_SRWLOCK$Ptr$VH() { return _RTL_SRWLOCK$Ptr$VH_; }

    static final MemoryLayout _RTL_CONDITION_VARIABLE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("Ptr")
    ).withName("_RTL_CONDITION_VARIABLE");
    static final jdk.incubator.foreign.MemoryLayout _RTL_CONDITION_VARIABLE$struct$LAYOUT() { return _RTL_CONDITION_VARIABLE$struct$LAYOUT_; }

    static final MemoryLayout _RTL_CONDITION_VARIABLE$Ptr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _RTL_CONDITION_VARIABLE$Ptr$LAYOUT() { return _RTL_CONDITION_VARIABLE$Ptr$LAYOUT_; }

    static final VarHandle _RTL_CONDITION_VARIABLE$Ptr$VH_ = MemoryHandles.asAddressVarHandle(_RTL_CONDITION_VARIABLE$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Ptr")));
    static final java.lang.invoke.VarHandle _RTL_CONDITION_VARIABLE$Ptr$VH() { return _RTL_CONDITION_VARIABLE$Ptr$VH_; }

    static final int HeapCompatibilityInformation() { return (int)0L; }

    static final int HeapEnableTerminationOnCorruption() { return (int)1L; }

    static final int HeapOptimizeResources() { return (int)3L; }

    static final MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("Version"),
        C_LONG.withName("Flags")
    ).withName("_HEAP_OPTIMIZE_RESOURCES_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$LAYOUT() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$LAYOUT_; }

    static final VarHandle _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH_ = _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Version$VH_; }

    static final MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$LAYOUT() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$LAYOUT_; }

    static final VarHandle _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH_ = _HEAP_OPTIMIZE_RESOURCES_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH() { return _HEAP_OPTIMIZE_RESOURCES_INFORMATION$Flags$VH_; }

    static final int ActivationContextBasicInformation() { return (int)1L; }

    static final int ActivationContextDetailedInformation() { return (int)2L; }

    static final int AssemblyDetailedInformationInActivationContext() { return (int)3L; }

    static final int FileInformationInAssemblyOfAssemblyInActivationContext() { return (int)4L; }

    static final int RunlevelInformationInActivationContext() { return (int)5L; }

    static final int CompatibilityInformationInActivationContext() { return (int)6L; }

    static final int ActivationContextManifestResourceName() { return (int)7L; }

    static final int MaxActivationContextInfoClass() { return (int)8L; }

    static final int AssemblyDetailedInformationInActivationContxt() { return (int)3L; }

    static final int FileInformationInAssemblyOfAssemblyInActivationContxt() { return (int)4L; }

    static final MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ulAssemblyIndex"),
        C_LONG.withName("ulFileIndexInAssembly")
    ).withName("_ACTIVATION_CONTEXT_QUERY_INDEX");
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT() { return _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$LAYOUT() { return _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH_ = _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAssemblyIndex"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH() { return _ACTIVATION_CONTEXT_QUERY_INDEX$ulAssemblyIndex$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$LAYOUT() { return _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH_ = _ACTIVATION_CONTEXT_QUERY_INDEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFileIndexInAssembly"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH() { return _ACTIVATION_CONTEXT_QUERY_INDEX$ulFileIndexInAssembly$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ulFlags"),
        C_LONG.withName("ulFilenameLength"),
        C_LONG.withName("ulPathLength"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpFileName"),
        C_POINTER.withName("lpFilePath")
    ).withName("_ASSEMBLY_FILE_DETAILED_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH_ = _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFlags"));
    static final java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFlags$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH_ = _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFilenameLength"));
    static final java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulFilenameLength$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH_ = _ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPathLength"));
    static final java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$ulPathLength$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH_ = MemoryHandles.asAddressVarHandle(_ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpFileName")));
    static final java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFileName$VH_; }

    static final MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$LAYOUT() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$LAYOUT_; }

    static final VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH_ = MemoryHandles.asAddressVarHandle(_ASSEMBLY_FILE_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpFilePath")));
    static final java.lang.invoke.VarHandle _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH() { return _ASSEMBLY_FILE_DETAILED_INFORMATION$lpFilePath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ulFlags"),
        C_LONG.withName("ulEncodedAssemblyIdentityLength"),
        C_LONG.withName("ulManifestPathType"),
        C_LONG.withName("ulManifestPathLength"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("liManifestLastWriteTime"),
        C_LONG.withName("ulPolicyPathType"),
        C_LONG.withName("ulPolicyPathLength"),
        MemoryLayout.ofUnion(
            C_LONG.withName("LowPart"),
            C_LONG.withName("HighPart"),
            MemoryLayout.ofStruct(
                C_LONG.withName("LowPart"),
                C_LONG.withName("HighPart")
            ).withName("u"),
            C_LONGLONG.withName("QuadPart")
        ).withName("liPolicyLastWriteTime"),
        C_LONG.withName("ulMetadataSatelliteRosterIndex"),
        C_LONG.withName("ulManifestVersionMajor"),
        C_LONG.withName("ulManifestVersionMinor"),
        C_LONG.withName("ulPolicyVersionMajor"),
        C_LONG.withName("ulPolicyVersionMinor"),
        C_LONG.withName("ulAssemblyDirectoryNameLength"),
        C_POINTER.withName("lpAssemblyEncodedAssemblyIdentity"),
        C_POINTER.withName("lpAssemblyManifestPath"),
        C_POINTER.withName("lpAssemblyPolicyPath"),
        C_POINTER.withName("lpAssemblyDirectoryName"),
        C_LONG.withName("ulFileCount"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFlags"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFlags$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulEncodedAssemblyIdentityLength"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulEncodedAssemblyIdentityLength$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulManifestPathType"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulManifestPathLength"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestPathLength$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPolicyPathType"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPolicyPathLength"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyPathLength$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulMetadataSatelliteRosterIndex"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulMetadataSatelliteRosterIndex$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulManifestVersionMajor"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMajor$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulManifestVersionMinor"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulManifestVersionMinor$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPolicyVersionMajor"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMajor$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulPolicyVersionMinor"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulPolicyVersionMinor$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAssemblyDirectoryNameLength"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulAssemblyDirectoryNameLength$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyEncodedAssemblyIdentity")));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyEncodedAssemblyIdentity$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyManifestPath")));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyManifestPath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyPolicyPath")));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyPolicyPath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAssemblyDirectoryName")));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$lpAssemblyDirectoryName$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$LAYOUT() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH_ = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFileCount"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH() { return _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION$ulFileCount$VH_; }

    static final int ACTCTX_RUN_LEVEL_UNSPECIFIED() { return (int)0L; }

    static final int ACTCTX_RUN_LEVEL_AS_INVOKER() { return (int)1L; }

    static final int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE() { return (int)2L; }

    static final int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN() { return (int)3L; }

    static final int ACTCTX_RUN_LEVEL_NUMBERS() { return (int)4L; }

    static final MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ulFlags"),
        C_INT.withName("RunLevel"),
        C_LONG.withName("UiAccess")
    ).withName("_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$LAYOUT() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH_ = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFlags"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$ulFlags$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$LAYOUT() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH_ = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("RunLevel"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$RunLevel$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$LAYOUT() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH_ = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("UiAccess"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH() { return _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION$UiAccess$VH_; }

    static final int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN() { return (int)0L; }

    static final int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS() { return (int)1L; }

    static final int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION() { return (int)2L; }

    static final int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED() { return (int)3L; }

    static final MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("Id"),
        C_INT.withName("Type"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("MaxVersionTested")
    ).withName("_COMPATIBILITY_CONTEXT_ELEMENT");
    static final jdk.incubator.foreign.MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT() { return _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT_; }

    static final MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$Type$LAYOUT() { return _COMPATIBILITY_CONTEXT_ELEMENT$Type$LAYOUT_; }

    static final VarHandle _COMPATIBILITY_CONTEXT_ELEMENT$Type$VH_ = _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _COMPATIBILITY_CONTEXT_ELEMENT$Type$VH() { return _COMPATIBILITY_CONTEXT_ELEMENT$Type$VH_; }

    static final MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$LAYOUT() { return _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$LAYOUT_; }

    static final VarHandle _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH_ = _COMPATIBILITY_CONTEXT_ELEMENT$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxVersionTested"));
    static final java.lang.invoke.VarHandle _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH() { return _COMPATIBILITY_CONTEXT_ELEMENT$MaxVersionTested$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("ElementCount"),
        MemoryLayout.ofPaddingBits(32),
        MemoryLayout.ofSequence(MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_LONG.withName("Data1"),
                C_SHORT.withName("Data2"),
                C_SHORT.withName("Data3"),
                MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
            ).withName("Id"),
            C_INT.withName("Type"),
            MemoryLayout.ofPaddingBits(32),
            C_LONGLONG.withName("MaxVersionTested")
        ).withName("_COMPATIBILITY_CONTEXT_ELEMENT")).withName("Elements")
    ).withName("_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$struct$LAYOUT() { return _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$LAYOUT() { return _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH_ = _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ElementCount"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH() { return _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION$ElementCount$VH_; }

    static final MemoryLayout _SUPPORTED_OS_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("MajorVersion"),
        C_SHORT.withName("MinorVersion")
    ).withName("_SUPPORTED_OS_INFO");
    static final jdk.incubator.foreign.MemoryLayout _SUPPORTED_OS_INFO$struct$LAYOUT() { return _SUPPORTED_OS_INFO$struct$LAYOUT_; }

    static final MemoryLayout _SUPPORTED_OS_INFO$MajorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SUPPORTED_OS_INFO$MajorVersion$LAYOUT() { return _SUPPORTED_OS_INFO$MajorVersion$LAYOUT_; }

    static final VarHandle _SUPPORTED_OS_INFO$MajorVersion$VH_ = _SUPPORTED_OS_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MajorVersion"));
    static final java.lang.invoke.VarHandle _SUPPORTED_OS_INFO$MajorVersion$VH() { return _SUPPORTED_OS_INFO$MajorVersion$VH_; }

    static final MemoryLayout _SUPPORTED_OS_INFO$MinorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SUPPORTED_OS_INFO$MinorVersion$LAYOUT() { return _SUPPORTED_OS_INFO$MinorVersion$LAYOUT_; }

    static final VarHandle _SUPPORTED_OS_INFO$MinorVersion$VH_ = _SUPPORTED_OS_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MinorVersion"));
    static final java.lang.invoke.VarHandle _SUPPORTED_OS_INFO$MinorVersion$VH() { return _SUPPORTED_OS_INFO$MinorVersion$VH_; }

    static final MemoryLayout _MAXVERSIONTESTED_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONGLONG.withName("MaxVersionTested")
    ).withName("_MAXVERSIONTESTED_INFO");
    static final jdk.incubator.foreign.MemoryLayout _MAXVERSIONTESTED_INFO$struct$LAYOUT() { return _MAXVERSIONTESTED_INFO$struct$LAYOUT_; }

    static final MemoryLayout _MAXVERSIONTESTED_INFO$MaxVersionTested$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _MAXVERSIONTESTED_INFO$MaxVersionTested$LAYOUT() { return _MAXVERSIONTESTED_INFO$MaxVersionTested$LAYOUT_; }

    static final VarHandle _MAXVERSIONTESTED_INFO$MaxVersionTested$VH_ = _MAXVERSIONTESTED_INFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("MaxVersionTested"));
    static final java.lang.invoke.VarHandle _MAXVERSIONTESTED_INFO$MaxVersionTested$VH() { return _MAXVERSIONTESTED_INFO$MaxVersionTested$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwFlags"),
        C_LONG.withName("ulFormatVersion"),
        C_LONG.withName("ulAssemblyCount"),
        C_LONG.withName("ulRootManifestPathType"),
        C_LONG.withName("ulRootManifestPathChars"),
        C_LONG.withName("ulRootConfigurationPathType"),
        C_LONG.withName("ulRootConfigurationPathChars"),
        C_LONG.withName("ulAppDirPathType"),
        C_LONG.withName("ulAppDirPathChars"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("lpRootManifestPath"),
        C_POINTER.withName("lpRootConfigurationPath"),
        C_POINTER.withName("lpAppDirPath")
    ).withName("_ACTIVATION_CONTEXT_DETAILED_INFORMATION");
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$dwFlags$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulFormatVersion"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulFormatVersion$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAssemblyCount"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAssemblyCount$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulRootManifestPathType"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulRootManifestPathChars"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootManifestPathChars$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulRootConfigurationPathType"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulRootConfigurationPathChars"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulRootConfigurationPathChars$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAppDirPathType"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathType$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH_ = _ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulAppDirPathChars"));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$ulAppDirPathChars$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpRootManifestPath")));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootManifestPath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpRootConfigurationPath")));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpRootConfigurationPath$VH_; }

    static final MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$LAYOUT() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$LAYOUT_; }

    static final VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH_ = MemoryHandles.asAddressVarHandle(_ACTIVATION_CONTEXT_DETAILED_INFORMATION$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpAppDirPath")));
    static final java.lang.invoke.VarHandle _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH() { return _ACTIVATION_CONTEXT_DETAILED_INFORMATION$lpAppDirPath$VH_; }

    static final MemoryLayout _HARDWARE_COUNTER_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("Type"),
        C_LONG.withName("Reserved"),
        C_LONGLONG.withName("Value")
    ).withName("_HARDWARE_COUNTER_DATA");
    static final jdk.incubator.foreign.MemoryLayout _HARDWARE_COUNTER_DATA$struct$LAYOUT() { return _HARDWARE_COUNTER_DATA$struct$LAYOUT_; }

    static final MemoryLayout _HARDWARE_COUNTER_DATA$Type$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _HARDWARE_COUNTER_DATA$Type$LAYOUT() { return _HARDWARE_COUNTER_DATA$Type$LAYOUT_; }

    static final VarHandle _HARDWARE_COUNTER_DATA$Type$VH_ = _HARDWARE_COUNTER_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Type"));
    static final java.lang.invoke.VarHandle _HARDWARE_COUNTER_DATA$Type$VH() { return _HARDWARE_COUNTER_DATA$Type$VH_; }

    static final MemoryLayout _HARDWARE_COUNTER_DATA$Reserved$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _HARDWARE_COUNTER_DATA$Reserved$LAYOUT() { return _HARDWARE_COUNTER_DATA$Reserved$LAYOUT_; }

    static final VarHandle _HARDWARE_COUNTER_DATA$Reserved$VH_ = _HARDWARE_COUNTER_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle _HARDWARE_COUNTER_DATA$Reserved$VH() { return _HARDWARE_COUNTER_DATA$Reserved$VH_; }

    static final MemoryLayout _HARDWARE_COUNTER_DATA$Value$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _HARDWARE_COUNTER_DATA$Value$LAYOUT() { return _HARDWARE_COUNTER_DATA$Value$LAYOUT_; }

    static final VarHandle _HARDWARE_COUNTER_DATA$Value$VH_ = _HARDWARE_COUNTER_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("Value"));
    static final java.lang.invoke.VarHandle _HARDWARE_COUNTER_DATA$Value$VH() { return _HARDWARE_COUNTER_DATA$Value$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Size"),
        C_CHAR.withName("Version"),
        C_CHAR.withName("HwCountersCount"),
        C_LONG.withName("ContextSwitchCount"),
        C_LONGLONG.withName("WaitReasonBitMap"),
        C_LONGLONG.withName("CycleTime"),
        C_LONG.withName("RetryCount"),
        C_LONG.withName("Reserved"),
        MemoryLayout.ofSequence(16, MemoryLayout.ofStruct(
            C_INT.withName("Type"),
            C_LONG.withName("Reserved"),
            C_LONGLONG.withName("Value")
        ).withName("_HARDWARE_COUNTER_DATA")).withName("HwCounters")
    ).withName("_PERFORMANCE_DATA");
    static final jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$struct$LAYOUT() { return _PERFORMANCE_DATA$struct$LAYOUT_; }

    static final MemoryLayout _PERFORMANCE_DATA$Size$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$Size$LAYOUT() { return _PERFORMANCE_DATA$Size$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$Size$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Size"));
    static final java.lang.invoke.VarHandle _PERFORMANCE_DATA$Size$VH() { return _PERFORMANCE_DATA$Size$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$Version$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$Version$LAYOUT() { return _PERFORMANCE_DATA$Version$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$Version$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("Version"));
    static final java.lang.invoke.VarHandle _PERFORMANCE_DATA$Version$VH() { return _PERFORMANCE_DATA$Version$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$HwCountersCount$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$HwCountersCount$LAYOUT() { return _PERFORMANCE_DATA$HwCountersCount$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$HwCountersCount$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("HwCountersCount"));
    static final java.lang.invoke.VarHandle _PERFORMANCE_DATA$HwCountersCount$VH() { return _PERFORMANCE_DATA$HwCountersCount$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$ContextSwitchCount$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$ContextSwitchCount$LAYOUT() { return _PERFORMANCE_DATA$ContextSwitchCount$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$ContextSwitchCount$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ContextSwitchCount"));
    static final java.lang.invoke.VarHandle _PERFORMANCE_DATA$ContextSwitchCount$VH() { return _PERFORMANCE_DATA$ContextSwitchCount$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$WaitReasonBitMap$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$WaitReasonBitMap$LAYOUT() { return _PERFORMANCE_DATA$WaitReasonBitMap$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$WaitReasonBitMap$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("WaitReasonBitMap"));
    static final java.lang.invoke.VarHandle _PERFORMANCE_DATA$WaitReasonBitMap$VH() { return _PERFORMANCE_DATA$WaitReasonBitMap$VH_; }

    static final MemoryLayout _PERFORMANCE_DATA$CycleTime$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout _PERFORMANCE_DATA$CycleTime$LAYOUT() { return _PERFORMANCE_DATA$CycleTime$LAYOUT_; }

    static final VarHandle _PERFORMANCE_DATA$CycleTime$VH_ = _PERFORMANCE_DATA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("CycleTime"));
    static final java.lang.invoke.VarHandle _PERFORMANCE_DATA$CycleTime$VH() { return _PERFORMANCE_DATA$CycleTime$VH_; }

}

