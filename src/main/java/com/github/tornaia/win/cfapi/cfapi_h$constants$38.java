// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$38 extends cfapi_h$constants$37 {

    /* package-private */ cfapi_h$constants$38() {}
    static final MemoryLayout tagMINIMIZEDMETRICS$iWidth$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$iWidth$LAYOUT() { return tagMINIMIZEDMETRICS$iWidth$LAYOUT_; }

    static final VarHandle tagMINIMIZEDMETRICS$iWidth$VH_ = tagMINIMIZEDMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iWidth"));
    static final java.lang.invoke.VarHandle tagMINIMIZEDMETRICS$iWidth$VH() { return tagMINIMIZEDMETRICS$iWidth$VH_; }

    static final MemoryLayout tagMINIMIZEDMETRICS$iHorzGap$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$iHorzGap$LAYOUT() { return tagMINIMIZEDMETRICS$iHorzGap$LAYOUT_; }

    static final VarHandle tagMINIMIZEDMETRICS$iHorzGap$VH_ = tagMINIMIZEDMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iHorzGap"));
    static final java.lang.invoke.VarHandle tagMINIMIZEDMETRICS$iHorzGap$VH() { return tagMINIMIZEDMETRICS$iHorzGap$VH_; }

    static final MemoryLayout tagMINIMIZEDMETRICS$iVertGap$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$iVertGap$LAYOUT() { return tagMINIMIZEDMETRICS$iVertGap$LAYOUT_; }

    static final VarHandle tagMINIMIZEDMETRICS$iVertGap$VH_ = tagMINIMIZEDMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iVertGap"));
    static final java.lang.invoke.VarHandle tagMINIMIZEDMETRICS$iVertGap$VH() { return tagMINIMIZEDMETRICS$iVertGap$VH_; }

    static final MemoryLayout tagMINIMIZEDMETRICS$iArrange$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMINIMIZEDMETRICS$iArrange$LAYOUT() { return tagMINIMIZEDMETRICS$iArrange$LAYOUT_; }

    static final VarHandle tagMINIMIZEDMETRICS$iArrange$VH_ = tagMINIMIZEDMETRICS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iArrange"));
    static final java.lang.invoke.VarHandle tagMINIMIZEDMETRICS$iArrange$VH() { return tagMINIMIZEDMETRICS$iArrange$VH_; }

    static final MemoryLayout tagICONMETRICSA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iHorzSpacing"),
        C_INT.withName("iVertSpacing"),
        C_INT.withName("iTitleWrap"),
        MemoryLayout.ofStruct(
            C_LONG.withName("lfHeight"),
            C_LONG.withName("lfWidth"),
            C_LONG.withName("lfEscapement"),
            C_LONG.withName("lfOrientation"),
            C_LONG.withName("lfWeight"),
            C_CHAR.withName("lfItalic"),
            C_CHAR.withName("lfUnderline"),
            C_CHAR.withName("lfStrikeOut"),
            C_CHAR.withName("lfCharSet"),
            C_CHAR.withName("lfOutPrecision"),
            C_CHAR.withName("lfClipPrecision"),
            C_CHAR.withName("lfQuality"),
            C_CHAR.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_CHAR).withName("lfFaceName")
        ).withName("lfFont")
    ).withName("tagICONMETRICSA");
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$struct$LAYOUT() { return tagICONMETRICSA$struct$LAYOUT_; }

    static final MemoryLayout tagICONMETRICSA$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$cbSize$LAYOUT() { return tagICONMETRICSA$cbSize$LAYOUT_; }

    static final VarHandle tagICONMETRICSA$cbSize$VH_ = tagICONMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagICONMETRICSA$cbSize$VH() { return tagICONMETRICSA$cbSize$VH_; }

    static final MemoryLayout tagICONMETRICSA$iHorzSpacing$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$iHorzSpacing$LAYOUT() { return tagICONMETRICSA$iHorzSpacing$LAYOUT_; }

    static final VarHandle tagICONMETRICSA$iHorzSpacing$VH_ = tagICONMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iHorzSpacing"));
    static final java.lang.invoke.VarHandle tagICONMETRICSA$iHorzSpacing$VH() { return tagICONMETRICSA$iHorzSpacing$VH_; }

    static final MemoryLayout tagICONMETRICSA$iVertSpacing$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$iVertSpacing$LAYOUT() { return tagICONMETRICSA$iVertSpacing$LAYOUT_; }

    static final VarHandle tagICONMETRICSA$iVertSpacing$VH_ = tagICONMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iVertSpacing"));
    static final java.lang.invoke.VarHandle tagICONMETRICSA$iVertSpacing$VH() { return tagICONMETRICSA$iVertSpacing$VH_; }

    static final MemoryLayout tagICONMETRICSA$iTitleWrap$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSA$iTitleWrap$LAYOUT() { return tagICONMETRICSA$iTitleWrap$LAYOUT_; }

    static final VarHandle tagICONMETRICSA$iTitleWrap$VH_ = tagICONMETRICSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iTitleWrap"));
    static final java.lang.invoke.VarHandle tagICONMETRICSA$iTitleWrap$VH() { return tagICONMETRICSA$iTitleWrap$VH_; }

    static final MemoryLayout tagICONMETRICSW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iHorzSpacing"),
        C_INT.withName("iVertSpacing"),
        C_INT.withName("iTitleWrap"),
        MemoryLayout.ofStruct(
            C_LONG.withName("lfHeight"),
            C_LONG.withName("lfWidth"),
            C_LONG.withName("lfEscapement"),
            C_LONG.withName("lfOrientation"),
            C_LONG.withName("lfWeight"),
            C_CHAR.withName("lfItalic"),
            C_CHAR.withName("lfUnderline"),
            C_CHAR.withName("lfStrikeOut"),
            C_CHAR.withName("lfCharSet"),
            C_CHAR.withName("lfOutPrecision"),
            C_CHAR.withName("lfClipPrecision"),
            C_CHAR.withName("lfQuality"),
            C_CHAR.withName("lfPitchAndFamily"),
            MemoryLayout.ofSequence(32, C_SHORT).withName("lfFaceName")
        ).withName("lfFont")
    ).withName("tagICONMETRICSW");
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$struct$LAYOUT() { return tagICONMETRICSW$struct$LAYOUT_; }

    static final MemoryLayout tagICONMETRICSW$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$cbSize$LAYOUT() { return tagICONMETRICSW$cbSize$LAYOUT_; }

    static final VarHandle tagICONMETRICSW$cbSize$VH_ = tagICONMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagICONMETRICSW$cbSize$VH() { return tagICONMETRICSW$cbSize$VH_; }

    static final MemoryLayout tagICONMETRICSW$iHorzSpacing$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$iHorzSpacing$LAYOUT() { return tagICONMETRICSW$iHorzSpacing$LAYOUT_; }

    static final VarHandle tagICONMETRICSW$iHorzSpacing$VH_ = tagICONMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iHorzSpacing"));
    static final java.lang.invoke.VarHandle tagICONMETRICSW$iHorzSpacing$VH() { return tagICONMETRICSW$iHorzSpacing$VH_; }

    static final MemoryLayout tagICONMETRICSW$iVertSpacing$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$iVertSpacing$LAYOUT() { return tagICONMETRICSW$iVertSpacing$LAYOUT_; }

    static final VarHandle tagICONMETRICSW$iVertSpacing$VH_ = tagICONMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iVertSpacing"));
    static final java.lang.invoke.VarHandle tagICONMETRICSW$iVertSpacing$VH() { return tagICONMETRICSW$iVertSpacing$VH_; }

    static final MemoryLayout tagICONMETRICSW$iTitleWrap$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagICONMETRICSW$iTitleWrap$LAYOUT() { return tagICONMETRICSW$iTitleWrap$LAYOUT_; }

    static final VarHandle tagICONMETRICSW$iTitleWrap$VH_ = tagICONMETRICSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iTitleWrap"));
    static final java.lang.invoke.VarHandle tagICONMETRICSW$iTitleWrap$VH() { return tagICONMETRICSW$iTitleWrap$VH_; }

    static final MemoryLayout tagANIMATIONINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("iMinAnimate")
    ).withName("tagANIMATIONINFO");
    static final jdk.incubator.foreign.MemoryLayout tagANIMATIONINFO$struct$LAYOUT() { return tagANIMATIONINFO$struct$LAYOUT_; }

    static final MemoryLayout tagANIMATIONINFO$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagANIMATIONINFO$cbSize$LAYOUT() { return tagANIMATIONINFO$cbSize$LAYOUT_; }

    static final VarHandle tagANIMATIONINFO$cbSize$VH_ = tagANIMATIONINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagANIMATIONINFO$cbSize$VH() { return tagANIMATIONINFO$cbSize$VH_; }

    static final MemoryLayout tagANIMATIONINFO$iMinAnimate$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagANIMATIONINFO$iMinAnimate$LAYOUT() { return tagANIMATIONINFO$iMinAnimate$LAYOUT_; }

    static final VarHandle tagANIMATIONINFO$iMinAnimate$VH_ = tagANIMATIONINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMinAnimate"));
    static final java.lang.invoke.VarHandle tagANIMATIONINFO$iMinAnimate$VH() { return tagANIMATIONINFO$iMinAnimate$VH_; }

    static final MemoryLayout tagSERIALKEYSA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_POINTER.withName("lpszActivePort"),
        C_POINTER.withName("lpszPort"),
        C_INT.withName("iBaudRate"),
        C_INT.withName("iPortState"),
        C_INT.withName("iActive"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagSERIALKEYSA");
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$struct$LAYOUT() { return tagSERIALKEYSA$struct$LAYOUT_; }

    static final MemoryLayout tagSERIALKEYSA$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$cbSize$LAYOUT() { return tagSERIALKEYSA$cbSize$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$cbSize$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSA$cbSize$VH() { return tagSERIALKEYSA$cbSize$VH_; }

    static final MemoryLayout tagSERIALKEYSA$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$dwFlags$LAYOUT() { return tagSERIALKEYSA$dwFlags$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$dwFlags$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSA$dwFlags$VH() { return tagSERIALKEYSA$dwFlags$VH_; }

    static final MemoryLayout tagSERIALKEYSA$lpszActivePort$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$lpszActivePort$LAYOUT() { return tagSERIALKEYSA$lpszActivePort$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$lpszActivePort$VH_ = MemoryHandles.asAddressVarHandle(tagSERIALKEYSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszActivePort")));
    static final java.lang.invoke.VarHandle tagSERIALKEYSA$lpszActivePort$VH() { return tagSERIALKEYSA$lpszActivePort$VH_; }

    static final MemoryLayout tagSERIALKEYSA$lpszPort$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$lpszPort$LAYOUT() { return tagSERIALKEYSA$lpszPort$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$lpszPort$VH_ = MemoryHandles.asAddressVarHandle(tagSERIALKEYSA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszPort")));
    static final java.lang.invoke.VarHandle tagSERIALKEYSA$lpszPort$VH() { return tagSERIALKEYSA$lpszPort$VH_; }

    static final MemoryLayout tagSERIALKEYSA$iBaudRate$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$iBaudRate$LAYOUT() { return tagSERIALKEYSA$iBaudRate$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$iBaudRate$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iBaudRate"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSA$iBaudRate$VH() { return tagSERIALKEYSA$iBaudRate$VH_; }

    static final MemoryLayout tagSERIALKEYSA$iPortState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$iPortState$LAYOUT() { return tagSERIALKEYSA$iPortState$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$iPortState$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iPortState"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSA$iPortState$VH() { return tagSERIALKEYSA$iPortState$VH_; }

    static final MemoryLayout tagSERIALKEYSA$iActive$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSA$iActive$LAYOUT() { return tagSERIALKEYSA$iActive$LAYOUT_; }

    static final VarHandle tagSERIALKEYSA$iActive$VH_ = tagSERIALKEYSA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iActive"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSA$iActive$VH() { return tagSERIALKEYSA$iActive$VH_; }

    static final MemoryLayout tagSERIALKEYSW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_POINTER.withName("lpszActivePort"),
        C_POINTER.withName("lpszPort"),
        C_INT.withName("iBaudRate"),
        C_INT.withName("iPortState"),
        C_INT.withName("iActive"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagSERIALKEYSW");
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$struct$LAYOUT() { return tagSERIALKEYSW$struct$LAYOUT_; }

    static final MemoryLayout tagSERIALKEYSW$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$cbSize$LAYOUT() { return tagSERIALKEYSW$cbSize$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$cbSize$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSW$cbSize$VH() { return tagSERIALKEYSW$cbSize$VH_; }

    static final MemoryLayout tagSERIALKEYSW$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$dwFlags$LAYOUT() { return tagSERIALKEYSW$dwFlags$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$dwFlags$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSW$dwFlags$VH() { return tagSERIALKEYSW$dwFlags$VH_; }

    static final MemoryLayout tagSERIALKEYSW$lpszActivePort$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$lpszActivePort$LAYOUT() { return tagSERIALKEYSW$lpszActivePort$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$lpszActivePort$VH_ = MemoryHandles.asAddressVarHandle(tagSERIALKEYSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszActivePort")));
    static final java.lang.invoke.VarHandle tagSERIALKEYSW$lpszActivePort$VH() { return tagSERIALKEYSW$lpszActivePort$VH_; }

    static final MemoryLayout tagSERIALKEYSW$lpszPort$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$lpszPort$LAYOUT() { return tagSERIALKEYSW$lpszPort$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$lpszPort$VH_ = MemoryHandles.asAddressVarHandle(tagSERIALKEYSW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszPort")));
    static final java.lang.invoke.VarHandle tagSERIALKEYSW$lpszPort$VH() { return tagSERIALKEYSW$lpszPort$VH_; }

    static final MemoryLayout tagSERIALKEYSW$iBaudRate$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$iBaudRate$LAYOUT() { return tagSERIALKEYSW$iBaudRate$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$iBaudRate$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iBaudRate"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSW$iBaudRate$VH() { return tagSERIALKEYSW$iBaudRate$VH_; }

    static final MemoryLayout tagSERIALKEYSW$iPortState$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$iPortState$LAYOUT() { return tagSERIALKEYSW$iPortState$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$iPortState$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iPortState"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSW$iPortState$VH() { return tagSERIALKEYSW$iPortState$VH_; }

    static final MemoryLayout tagSERIALKEYSW$iActive$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSERIALKEYSW$iActive$LAYOUT() { return tagSERIALKEYSW$iActive$LAYOUT_; }

    static final VarHandle tagSERIALKEYSW$iActive$VH_ = tagSERIALKEYSW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iActive"));
    static final java.lang.invoke.VarHandle tagSERIALKEYSW$iActive$VH() { return tagSERIALKEYSW$iActive$VH_; }

    static final MemoryLayout tagHIGHCONTRASTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_POINTER.withName("lpszDefaultScheme")
    ).withName("tagHIGHCONTRASTA");
    static final jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTA$struct$LAYOUT() { return tagHIGHCONTRASTA$struct$LAYOUT_; }

    static final MemoryLayout tagHIGHCONTRASTA$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTA$cbSize$LAYOUT() { return tagHIGHCONTRASTA$cbSize$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTA$cbSize$VH_ = tagHIGHCONTRASTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagHIGHCONTRASTA$cbSize$VH() { return tagHIGHCONTRASTA$cbSize$VH_; }

    static final MemoryLayout tagHIGHCONTRASTA$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTA$dwFlags$LAYOUT() { return tagHIGHCONTRASTA$dwFlags$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTA$dwFlags$VH_ = tagHIGHCONTRASTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagHIGHCONTRASTA$dwFlags$VH() { return tagHIGHCONTRASTA$dwFlags$VH_; }

    static final MemoryLayout tagHIGHCONTRASTA$lpszDefaultScheme$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTA$lpszDefaultScheme$LAYOUT() { return tagHIGHCONTRASTA$lpszDefaultScheme$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTA$lpszDefaultScheme$VH_ = MemoryHandles.asAddressVarHandle(tagHIGHCONTRASTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszDefaultScheme")));
    static final java.lang.invoke.VarHandle tagHIGHCONTRASTA$lpszDefaultScheme$VH() { return tagHIGHCONTRASTA$lpszDefaultScheme$VH_; }

    static final MemoryLayout tagHIGHCONTRASTW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_POINTER.withName("lpszDefaultScheme")
    ).withName("tagHIGHCONTRASTW");
    static final jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTW$struct$LAYOUT() { return tagHIGHCONTRASTW$struct$LAYOUT_; }

    static final MemoryLayout tagHIGHCONTRASTW$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTW$cbSize$LAYOUT() { return tagHIGHCONTRASTW$cbSize$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTW$cbSize$VH_ = tagHIGHCONTRASTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagHIGHCONTRASTW$cbSize$VH() { return tagHIGHCONTRASTW$cbSize$VH_; }

    static final MemoryLayout tagHIGHCONTRASTW$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTW$dwFlags$LAYOUT() { return tagHIGHCONTRASTW$dwFlags$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTW$dwFlags$VH_ = tagHIGHCONTRASTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagHIGHCONTRASTW$dwFlags$VH() { return tagHIGHCONTRASTW$dwFlags$VH_; }

    static final MemoryLayout tagHIGHCONTRASTW$lpszDefaultScheme$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagHIGHCONTRASTW$lpszDefaultScheme$LAYOUT() { return tagHIGHCONTRASTW$lpszDefaultScheme$LAYOUT_; }

    static final VarHandle tagHIGHCONTRASTW$lpszDefaultScheme$VH_ = MemoryHandles.asAddressVarHandle(tagHIGHCONTRASTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszDefaultScheme")));
    static final java.lang.invoke.VarHandle tagHIGHCONTRASTW$lpszDefaultScheme$VH() { return tagHIGHCONTRASTW$lpszDefaultScheme$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_LONG.withName("Data1"),
            C_SHORT.withName("Data2"),
            C_SHORT.withName("Data3"),
            MemoryLayout.ofSequence(8, C_CHAR).withName("Data4")
        ).withName("Guid"),
        C_LONG.withName("dwOffset"),
        C_LONG.withName("dwCommand"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwMode"),
        C_LONG.withName("dwTVStandard"),
        C_LONG.withName("dwAvailableModes"),
        C_LONG.withName("dwAvailableTVStandard"),
        C_LONG.withName("dwFlickerFilter"),
        C_LONG.withName("dwOverScanX"),
        C_LONG.withName("dwOverScanY"),
        C_LONG.withName("dwMaxUnscaledX"),
        C_LONG.withName("dwMaxUnscaledY"),
        C_LONG.withName("dwPositionX"),
        C_LONG.withName("dwPositionY"),
        C_LONG.withName("dwBrightness"),
        C_LONG.withName("dwContrast"),
        C_LONG.withName("dwCPType"),
        C_LONG.withName("dwCPCommand"),
        C_LONG.withName("dwCPStandard"),
        C_LONG.withName("dwCPKey"),
        C_LONG.withName("bCP_APSTriggerBits"),
        MemoryLayout.ofSequence(256, C_CHAR).withName("bOEMCopyProtection")
    ).withName("_VIDEOPARAMETERS");
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$struct$LAYOUT() { return _VIDEOPARAMETERS$struct$LAYOUT_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwOffset$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwOffset$LAYOUT() { return _VIDEOPARAMETERS$dwOffset$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwOffset$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOffset"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwOffset$VH() { return _VIDEOPARAMETERS$dwOffset$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwCommand$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwCommand$LAYOUT() { return _VIDEOPARAMETERS$dwCommand$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwCommand$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCommand"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwCommand$VH() { return _VIDEOPARAMETERS$dwCommand$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwFlags$LAYOUT() { return _VIDEOPARAMETERS$dwFlags$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwFlags$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwFlags$VH() { return _VIDEOPARAMETERS$dwFlags$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwMode$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwMode$LAYOUT() { return _VIDEOPARAMETERS$dwMode$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwMode$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMode"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwMode$VH() { return _VIDEOPARAMETERS$dwMode$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwTVStandard$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwTVStandard$LAYOUT() { return _VIDEOPARAMETERS$dwTVStandard$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwTVStandard$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwTVStandard"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwTVStandard$VH() { return _VIDEOPARAMETERS$dwTVStandard$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwAvailableModes$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwAvailableModes$LAYOUT() { return _VIDEOPARAMETERS$dwAvailableModes$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwAvailableModes$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAvailableModes"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwAvailableModes$VH() { return _VIDEOPARAMETERS$dwAvailableModes$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwAvailableTVStandard$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwAvailableTVStandard$LAYOUT() { return _VIDEOPARAMETERS$dwAvailableTVStandard$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwAvailableTVStandard$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwAvailableTVStandard"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwAvailableTVStandard$VH() { return _VIDEOPARAMETERS$dwAvailableTVStandard$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwFlickerFilter$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwFlickerFilter$LAYOUT() { return _VIDEOPARAMETERS$dwFlickerFilter$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwFlickerFilter$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlickerFilter"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwFlickerFilter$VH() { return _VIDEOPARAMETERS$dwFlickerFilter$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwOverScanX$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwOverScanX$LAYOUT() { return _VIDEOPARAMETERS$dwOverScanX$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwOverScanX$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOverScanX"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwOverScanX$VH() { return _VIDEOPARAMETERS$dwOverScanX$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwOverScanY$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwOverScanY$LAYOUT() { return _VIDEOPARAMETERS$dwOverScanY$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwOverScanY$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwOverScanY"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwOverScanY$VH() { return _VIDEOPARAMETERS$dwOverScanY$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwMaxUnscaledX$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwMaxUnscaledX$LAYOUT() { return _VIDEOPARAMETERS$dwMaxUnscaledX$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwMaxUnscaledX$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxUnscaledX"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwMaxUnscaledX$VH() { return _VIDEOPARAMETERS$dwMaxUnscaledX$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwMaxUnscaledY$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwMaxUnscaledY$LAYOUT() { return _VIDEOPARAMETERS$dwMaxUnscaledY$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwMaxUnscaledY$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwMaxUnscaledY"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwMaxUnscaledY$VH() { return _VIDEOPARAMETERS$dwMaxUnscaledY$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwPositionX$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwPositionX$LAYOUT() { return _VIDEOPARAMETERS$dwPositionX$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwPositionX$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPositionX"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwPositionX$VH() { return _VIDEOPARAMETERS$dwPositionX$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwPositionY$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwPositionY$LAYOUT() { return _VIDEOPARAMETERS$dwPositionY$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwPositionY$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwPositionY"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwPositionY$VH() { return _VIDEOPARAMETERS$dwPositionY$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwBrightness$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwBrightness$LAYOUT() { return _VIDEOPARAMETERS$dwBrightness$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwBrightness$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwBrightness"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwBrightness$VH() { return _VIDEOPARAMETERS$dwBrightness$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwContrast$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwContrast$LAYOUT() { return _VIDEOPARAMETERS$dwContrast$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwContrast$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwContrast"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwContrast$VH() { return _VIDEOPARAMETERS$dwContrast$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwCPType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwCPType$LAYOUT() { return _VIDEOPARAMETERS$dwCPType$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwCPType$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCPType"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwCPType$VH() { return _VIDEOPARAMETERS$dwCPType$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwCPCommand$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwCPCommand$LAYOUT() { return _VIDEOPARAMETERS$dwCPCommand$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwCPCommand$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCPCommand"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwCPCommand$VH() { return _VIDEOPARAMETERS$dwCPCommand$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwCPStandard$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwCPStandard$LAYOUT() { return _VIDEOPARAMETERS$dwCPStandard$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwCPStandard$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCPStandard"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwCPStandard$VH() { return _VIDEOPARAMETERS$dwCPStandard$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$dwCPKey$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$dwCPKey$LAYOUT() { return _VIDEOPARAMETERS$dwCPKey$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$dwCPKey$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCPKey"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$dwCPKey$VH() { return _VIDEOPARAMETERS$dwCPKey$VH_; }

    static final MemoryLayout _VIDEOPARAMETERS$bCP_APSTriggerBits$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _VIDEOPARAMETERS$bCP_APSTriggerBits$LAYOUT() { return _VIDEOPARAMETERS$bCP_APSTriggerBits$LAYOUT_; }

    static final VarHandle _VIDEOPARAMETERS$bCP_APSTriggerBits$VH_ = _VIDEOPARAMETERS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bCP_APSTriggerBits"));
    static final java.lang.invoke.VarHandle _VIDEOPARAMETERS$bCP_APSTriggerBits$VH() { return _VIDEOPARAMETERS$bCP_APSTriggerBits$VH_; }

    static final FunctionDescriptor ChangeDisplaySettingsA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor ChangeDisplaySettingsA$FUNC() { return ChangeDisplaySettingsA$FUNC_; }

    static final MethodHandle ChangeDisplaySettingsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeDisplaySettingsA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ChangeDisplaySettingsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ChangeDisplaySettingsA$MH() { return ChangeDisplaySettingsA$MH_; }

    static final FunctionDescriptor ChangeDisplaySettingsW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor ChangeDisplaySettingsW$FUNC() { return ChangeDisplaySettingsW$FUNC_; }

    static final MethodHandle ChangeDisplaySettingsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeDisplaySettingsW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        ChangeDisplaySettingsW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ChangeDisplaySettingsW$MH() { return ChangeDisplaySettingsW$MH_; }

    static final FunctionDescriptor ChangeDisplaySettingsExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ChangeDisplaySettingsExA$FUNC() { return ChangeDisplaySettingsExA$FUNC_; }

    static final MethodHandle ChangeDisplaySettingsExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeDisplaySettingsExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ChangeDisplaySettingsExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ChangeDisplaySettingsExA$MH() { return ChangeDisplaySettingsExA$MH_; }

    static final FunctionDescriptor ChangeDisplaySettingsExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ChangeDisplaySettingsExW$FUNC() { return ChangeDisplaySettingsExW$FUNC_; }

    static final MethodHandle ChangeDisplaySettingsExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ChangeDisplaySettingsExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ChangeDisplaySettingsExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ChangeDisplaySettingsExW$MH() { return ChangeDisplaySettingsExW$MH_; }

    static final FunctionDescriptor EnumDisplaySettingsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumDisplaySettingsA$FUNC() { return EnumDisplaySettingsA$FUNC_; }

    static final MethodHandle EnumDisplaySettingsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDisplaySettingsA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        EnumDisplaySettingsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumDisplaySettingsA$MH() { return EnumDisplaySettingsA$MH_; }

    static final FunctionDescriptor EnumDisplaySettingsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumDisplaySettingsW$FUNC() { return EnumDisplaySettingsW$FUNC_; }

    static final MethodHandle EnumDisplaySettingsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDisplaySettingsW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        EnumDisplaySettingsW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumDisplaySettingsW$MH() { return EnumDisplaySettingsW$MH_; }

    static final FunctionDescriptor EnumDisplaySettingsExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumDisplaySettingsExA$FUNC() { return EnumDisplaySettingsExA$FUNC_; }

    static final MethodHandle EnumDisplaySettingsExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDisplaySettingsExA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        EnumDisplaySettingsExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumDisplaySettingsExA$MH() { return EnumDisplaySettingsExA$MH_; }

    static final FunctionDescriptor EnumDisplaySettingsExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumDisplaySettingsExW$FUNC() { return EnumDisplaySettingsExW$FUNC_; }

    static final MethodHandle EnumDisplaySettingsExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDisplaySettingsExW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        EnumDisplaySettingsExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumDisplaySettingsExW$MH() { return EnumDisplaySettingsExW$MH_; }

    static final FunctionDescriptor EnumDisplayDevicesA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumDisplayDevicesA$FUNC() { return EnumDisplayDevicesA$FUNC_; }

    static final MethodHandle EnumDisplayDevicesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDisplayDevicesA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        EnumDisplayDevicesA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumDisplayDevicesA$MH() { return EnumDisplayDevicesA$MH_; }

    static final FunctionDescriptor EnumDisplayDevicesW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumDisplayDevicesW$FUNC() { return EnumDisplayDevicesW$FUNC_; }

    static final MethodHandle EnumDisplayDevicesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDisplayDevicesW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        EnumDisplayDevicesW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumDisplayDevicesW$MH() { return EnumDisplayDevicesW$MH_; }

    static final FunctionDescriptor GetDisplayConfigBufferSizes$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDisplayConfigBufferSizes$FUNC() { return GetDisplayConfigBufferSizes$FUNC_; }

    static final MethodHandle GetDisplayConfigBufferSizes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDisplayConfigBufferSizes",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDisplayConfigBufferSizes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDisplayConfigBufferSizes$MH() { return GetDisplayConfigBufferSizes$MH_; }

    static final FunctionDescriptor SetDisplayConfig$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetDisplayConfig$FUNC() { return SetDisplayConfig$FUNC_; }

    static final MethodHandle SetDisplayConfig$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDisplayConfig",
        "(ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        SetDisplayConfig$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetDisplayConfig$MH() { return SetDisplayConfig$MH_; }

    static final FunctionDescriptor QueryDisplayConfig$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor QueryDisplayConfig$FUNC() { return QueryDisplayConfig$FUNC_; }

    static final MethodHandle QueryDisplayConfig$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "QueryDisplayConfig",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        QueryDisplayConfig$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle QueryDisplayConfig$MH() { return QueryDisplayConfig$MH_; }

    static final FunctionDescriptor DisplayConfigGetDeviceInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DisplayConfigGetDeviceInfo$FUNC() { return DisplayConfigGetDeviceInfo$FUNC_; }

    static final MethodHandle DisplayConfigGetDeviceInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DisplayConfigGetDeviceInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DisplayConfigGetDeviceInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DisplayConfigGetDeviceInfo$MH() { return DisplayConfigGetDeviceInfo$MH_; }

    static final FunctionDescriptor DisplayConfigSetDeviceInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor DisplayConfigSetDeviceInfo$FUNC() { return DisplayConfigSetDeviceInfo$FUNC_; }

    static final MethodHandle DisplayConfigSetDeviceInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "DisplayConfigSetDeviceInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        DisplayConfigSetDeviceInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle DisplayConfigSetDeviceInfo$MH() { return DisplayConfigSetDeviceInfo$MH_; }

    static final FunctionDescriptor SystemParametersInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SystemParametersInfoA$FUNC() { return SystemParametersInfoA$FUNC_; }

    static final MethodHandle SystemParametersInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SystemParametersInfoA",
        "(IILjdk/incubator/foreign/MemoryAddress;I)I",
        SystemParametersInfoA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SystemParametersInfoA$MH() { return SystemParametersInfoA$MH_; }

    static final FunctionDescriptor SystemParametersInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SystemParametersInfoW$FUNC() { return SystemParametersInfoW$FUNC_; }

    static final MethodHandle SystemParametersInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SystemParametersInfoW",
        "(IILjdk/incubator/foreign/MemoryAddress;I)I",
        SystemParametersInfoW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SystemParametersInfoW$MH() { return SystemParametersInfoW$MH_; }

    static final FunctionDescriptor SystemParametersInfoForDpi$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SystemParametersInfoForDpi$FUNC() { return SystemParametersInfoForDpi$FUNC_; }

    static final MethodHandle SystemParametersInfoForDpi$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SystemParametersInfoForDpi",
        "(IILjdk/incubator/foreign/MemoryAddress;II)I",
        SystemParametersInfoForDpi$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SystemParametersInfoForDpi$MH() { return SystemParametersInfoForDpi$MH_; }

    static final MemoryLayout tagFILTERKEYS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("iWaitMSec"),
        C_LONG.withName("iDelayMSec"),
        C_LONG.withName("iRepeatMSec"),
        C_LONG.withName("iBounceMSec")
    ).withName("tagFILTERKEYS");
    static final jdk.incubator.foreign.MemoryLayout tagFILTERKEYS$struct$LAYOUT() { return tagFILTERKEYS$struct$LAYOUT_; }

    static final MemoryLayout tagFILTERKEYS$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagFILTERKEYS$cbSize$LAYOUT() { return tagFILTERKEYS$cbSize$LAYOUT_; }

    static final VarHandle tagFILTERKEYS$cbSize$VH_ = tagFILTERKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagFILTERKEYS$cbSize$VH() { return tagFILTERKEYS$cbSize$VH_; }

    static final MemoryLayout tagFILTERKEYS$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagFILTERKEYS$dwFlags$LAYOUT() { return tagFILTERKEYS$dwFlags$LAYOUT_; }

    static final VarHandle tagFILTERKEYS$dwFlags$VH_ = tagFILTERKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagFILTERKEYS$dwFlags$VH() { return tagFILTERKEYS$dwFlags$VH_; }

    static final MemoryLayout tagFILTERKEYS$iWaitMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagFILTERKEYS$iWaitMSec$LAYOUT() { return tagFILTERKEYS$iWaitMSec$LAYOUT_; }

    static final VarHandle tagFILTERKEYS$iWaitMSec$VH_ = tagFILTERKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iWaitMSec"));
    static final java.lang.invoke.VarHandle tagFILTERKEYS$iWaitMSec$VH() { return tagFILTERKEYS$iWaitMSec$VH_; }

    static final MemoryLayout tagFILTERKEYS$iDelayMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagFILTERKEYS$iDelayMSec$LAYOUT() { return tagFILTERKEYS$iDelayMSec$LAYOUT_; }

    static final VarHandle tagFILTERKEYS$iDelayMSec$VH_ = tagFILTERKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iDelayMSec"));
    static final java.lang.invoke.VarHandle tagFILTERKEYS$iDelayMSec$VH() { return tagFILTERKEYS$iDelayMSec$VH_; }

    static final MemoryLayout tagFILTERKEYS$iRepeatMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagFILTERKEYS$iRepeatMSec$LAYOUT() { return tagFILTERKEYS$iRepeatMSec$LAYOUT_; }

    static final VarHandle tagFILTERKEYS$iRepeatMSec$VH_ = tagFILTERKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iRepeatMSec"));
    static final java.lang.invoke.VarHandle tagFILTERKEYS$iRepeatMSec$VH() { return tagFILTERKEYS$iRepeatMSec$VH_; }

    static final MemoryLayout tagFILTERKEYS$iBounceMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagFILTERKEYS$iBounceMSec$LAYOUT() { return tagFILTERKEYS$iBounceMSec$LAYOUT_; }

    static final VarHandle tagFILTERKEYS$iBounceMSec$VH_ = tagFILTERKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iBounceMSec"));
    static final java.lang.invoke.VarHandle tagFILTERKEYS$iBounceMSec$VH() { return tagFILTERKEYS$iBounceMSec$VH_; }

    static final MemoryLayout tagSTICKYKEYS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags")
    ).withName("tagSTICKYKEYS");
    static final jdk.incubator.foreign.MemoryLayout tagSTICKYKEYS$struct$LAYOUT() { return tagSTICKYKEYS$struct$LAYOUT_; }

    static final MemoryLayout tagSTICKYKEYS$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSTICKYKEYS$cbSize$LAYOUT() { return tagSTICKYKEYS$cbSize$LAYOUT_; }

    static final VarHandle tagSTICKYKEYS$cbSize$VH_ = tagSTICKYKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagSTICKYKEYS$cbSize$VH() { return tagSTICKYKEYS$cbSize$VH_; }

    static final MemoryLayout tagSTICKYKEYS$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSTICKYKEYS$dwFlags$LAYOUT() { return tagSTICKYKEYS$dwFlags$LAYOUT_; }

    static final VarHandle tagSTICKYKEYS$dwFlags$VH_ = tagSTICKYKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagSTICKYKEYS$dwFlags$VH() { return tagSTICKYKEYS$dwFlags$VH_; }

    static final MemoryLayout tagMOUSEKEYS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("iMaxSpeed"),
        C_LONG.withName("iTimeToMaxSpeed"),
        C_LONG.withName("iCtrlSpeed"),
        C_LONG.withName("dwReserved1"),
        C_LONG.withName("dwReserved2")
    ).withName("tagMOUSEKEYS");
    static final jdk.incubator.foreign.MemoryLayout tagMOUSEKEYS$struct$LAYOUT() { return tagMOUSEKEYS$struct$LAYOUT_; }

    static final MemoryLayout tagMOUSEKEYS$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagMOUSEKEYS$cbSize$LAYOUT() { return tagMOUSEKEYS$cbSize$LAYOUT_; }

    static final VarHandle tagMOUSEKEYS$cbSize$VH_ = tagMOUSEKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagMOUSEKEYS$cbSize$VH() { return tagMOUSEKEYS$cbSize$VH_; }

    static final MemoryLayout tagMOUSEKEYS$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMOUSEKEYS$dwFlags$LAYOUT() { return tagMOUSEKEYS$dwFlags$LAYOUT_; }

    static final VarHandle tagMOUSEKEYS$dwFlags$VH_ = tagMOUSEKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagMOUSEKEYS$dwFlags$VH() { return tagMOUSEKEYS$dwFlags$VH_; }

    static final MemoryLayout tagMOUSEKEYS$iMaxSpeed$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMOUSEKEYS$iMaxSpeed$LAYOUT() { return tagMOUSEKEYS$iMaxSpeed$LAYOUT_; }

    static final VarHandle tagMOUSEKEYS$iMaxSpeed$VH_ = tagMOUSEKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iMaxSpeed"));
    static final java.lang.invoke.VarHandle tagMOUSEKEYS$iMaxSpeed$VH() { return tagMOUSEKEYS$iMaxSpeed$VH_; }

    static final MemoryLayout tagMOUSEKEYS$iTimeToMaxSpeed$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMOUSEKEYS$iTimeToMaxSpeed$LAYOUT() { return tagMOUSEKEYS$iTimeToMaxSpeed$LAYOUT_; }

    static final VarHandle tagMOUSEKEYS$iTimeToMaxSpeed$VH_ = tagMOUSEKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iTimeToMaxSpeed"));
    static final java.lang.invoke.VarHandle tagMOUSEKEYS$iTimeToMaxSpeed$VH() { return tagMOUSEKEYS$iTimeToMaxSpeed$VH_; }

    static final MemoryLayout tagMOUSEKEYS$iCtrlSpeed$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMOUSEKEYS$iCtrlSpeed$LAYOUT() { return tagMOUSEKEYS$iCtrlSpeed$LAYOUT_; }

    static final VarHandle tagMOUSEKEYS$iCtrlSpeed$VH_ = tagMOUSEKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iCtrlSpeed"));
    static final java.lang.invoke.VarHandle tagMOUSEKEYS$iCtrlSpeed$VH() { return tagMOUSEKEYS$iCtrlSpeed$VH_; }

    static final MemoryLayout tagMOUSEKEYS$dwReserved1$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMOUSEKEYS$dwReserved1$LAYOUT() { return tagMOUSEKEYS$dwReserved1$LAYOUT_; }

    static final VarHandle tagMOUSEKEYS$dwReserved1$VH_ = tagMOUSEKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved1"));
    static final java.lang.invoke.VarHandle tagMOUSEKEYS$dwReserved1$VH() { return tagMOUSEKEYS$dwReserved1$VH_; }

    static final MemoryLayout tagMOUSEKEYS$dwReserved2$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMOUSEKEYS$dwReserved2$LAYOUT() { return tagMOUSEKEYS$dwReserved2$LAYOUT_; }

    static final VarHandle tagMOUSEKEYS$dwReserved2$VH_ = tagMOUSEKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwReserved2"));
    static final java.lang.invoke.VarHandle tagMOUSEKEYS$dwReserved2$VH() { return tagMOUSEKEYS$dwReserved2$VH_; }

    static final MemoryLayout tagACCESSTIMEOUT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("iTimeOutMSec")
    ).withName("tagACCESSTIMEOUT");
    static final jdk.incubator.foreign.MemoryLayout tagACCESSTIMEOUT$struct$LAYOUT() { return tagACCESSTIMEOUT$struct$LAYOUT_; }

    static final MemoryLayout tagACCESSTIMEOUT$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagACCESSTIMEOUT$cbSize$LAYOUT() { return tagACCESSTIMEOUT$cbSize$LAYOUT_; }

    static final VarHandle tagACCESSTIMEOUT$cbSize$VH_ = tagACCESSTIMEOUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagACCESSTIMEOUT$cbSize$VH() { return tagACCESSTIMEOUT$cbSize$VH_; }

    static final MemoryLayout tagACCESSTIMEOUT$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagACCESSTIMEOUT$dwFlags$LAYOUT() { return tagACCESSTIMEOUT$dwFlags$LAYOUT_; }

    static final VarHandle tagACCESSTIMEOUT$dwFlags$VH_ = tagACCESSTIMEOUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagACCESSTIMEOUT$dwFlags$VH() { return tagACCESSTIMEOUT$dwFlags$VH_; }

    static final MemoryLayout tagACCESSTIMEOUT$iTimeOutMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagACCESSTIMEOUT$iTimeOutMSec$LAYOUT() { return tagACCESSTIMEOUT$iTimeOutMSec$LAYOUT_; }

    static final VarHandle tagACCESSTIMEOUT$iTimeOutMSec$VH_ = tagACCESSTIMEOUT$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iTimeOutMSec"));
    static final java.lang.invoke.VarHandle tagACCESSTIMEOUT$iTimeOutMSec$VH() { return tagACCESSTIMEOUT$iTimeOutMSec$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("iFSTextEffect"),
        C_LONG.withName("iFSTextEffectMSec"),
        C_LONG.withName("iFSTextEffectColorBits"),
        C_LONG.withName("iFSGrafEffect"),
        C_LONG.withName("iFSGrafEffectMSec"),
        C_LONG.withName("iFSGrafEffectColor"),
        C_LONG.withName("iWindowsEffect"),
        C_LONG.withName("iWindowsEffectMSec"),
        C_POINTER.withName("lpszWindowsEffectDLL"),
        C_LONG.withName("iWindowsEffectOrdinal"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagSOUNDSENTRYA");
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$struct$LAYOUT() { return tagSOUNDSENTRYA$struct$LAYOUT_; }

    static final MemoryLayout tagSOUNDSENTRYA$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$cbSize$LAYOUT() { return tagSOUNDSENTRYA$cbSize$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$cbSize$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$cbSize$VH() { return tagSOUNDSENTRYA$cbSize$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$dwFlags$LAYOUT() { return tagSOUNDSENTRYA$dwFlags$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$dwFlags$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$dwFlags$VH() { return tagSOUNDSENTRYA$dwFlags$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$iFSTextEffect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$iFSTextEffect$LAYOUT() { return tagSOUNDSENTRYA$iFSTextEffect$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$iFSTextEffect$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSTextEffect"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$iFSTextEffect$VH() { return tagSOUNDSENTRYA$iFSTextEffect$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$iFSTextEffectMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$iFSTextEffectMSec$LAYOUT() { return tagSOUNDSENTRYA$iFSTextEffectMSec$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$iFSTextEffectMSec$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSTextEffectMSec"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$iFSTextEffectMSec$VH() { return tagSOUNDSENTRYA$iFSTextEffectMSec$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$iFSTextEffectColorBits$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$iFSTextEffectColorBits$LAYOUT() { return tagSOUNDSENTRYA$iFSTextEffectColorBits$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$iFSTextEffectColorBits$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSTextEffectColorBits"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$iFSTextEffectColorBits$VH() { return tagSOUNDSENTRYA$iFSTextEffectColorBits$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$iFSGrafEffect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$iFSGrafEffect$LAYOUT() { return tagSOUNDSENTRYA$iFSGrafEffect$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$iFSGrafEffect$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSGrafEffect"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$iFSGrafEffect$VH() { return tagSOUNDSENTRYA$iFSGrafEffect$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$iFSGrafEffectMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$iFSGrafEffectMSec$LAYOUT() { return tagSOUNDSENTRYA$iFSGrafEffectMSec$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$iFSGrafEffectMSec$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSGrafEffectMSec"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$iFSGrafEffectMSec$VH() { return tagSOUNDSENTRYA$iFSGrafEffectMSec$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$iFSGrafEffectColor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$iFSGrafEffectColor$LAYOUT() { return tagSOUNDSENTRYA$iFSGrafEffectColor$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$iFSGrafEffectColor$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSGrafEffectColor"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$iFSGrafEffectColor$VH() { return tagSOUNDSENTRYA$iFSGrafEffectColor$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$iWindowsEffect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$iWindowsEffect$LAYOUT() { return tagSOUNDSENTRYA$iWindowsEffect$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$iWindowsEffect$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iWindowsEffect"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$iWindowsEffect$VH() { return tagSOUNDSENTRYA$iWindowsEffect$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$iWindowsEffectMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$iWindowsEffectMSec$LAYOUT() { return tagSOUNDSENTRYA$iWindowsEffectMSec$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$iWindowsEffectMSec$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iWindowsEffectMSec"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$iWindowsEffectMSec$VH() { return tagSOUNDSENTRYA$iWindowsEffectMSec$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$lpszWindowsEffectDLL$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$lpszWindowsEffectDLL$LAYOUT() { return tagSOUNDSENTRYA$lpszWindowsEffectDLL$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$lpszWindowsEffectDLL$VH_ = MemoryHandles.asAddressVarHandle(tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszWindowsEffectDLL")));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$lpszWindowsEffectDLL$VH() { return tagSOUNDSENTRYA$lpszWindowsEffectDLL$VH_; }

    static final MemoryLayout tagSOUNDSENTRYA$iWindowsEffectOrdinal$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYA$iWindowsEffectOrdinal$LAYOUT() { return tagSOUNDSENTRYA$iWindowsEffectOrdinal$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYA$iWindowsEffectOrdinal$VH_ = tagSOUNDSENTRYA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iWindowsEffectOrdinal"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYA$iWindowsEffectOrdinal$VH() { return tagSOUNDSENTRYA$iWindowsEffectOrdinal$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("iFSTextEffect"),
        C_LONG.withName("iFSTextEffectMSec"),
        C_LONG.withName("iFSTextEffectColorBits"),
        C_LONG.withName("iFSGrafEffect"),
        C_LONG.withName("iFSGrafEffectMSec"),
        C_LONG.withName("iFSGrafEffectColor"),
        C_LONG.withName("iWindowsEffect"),
        C_LONG.withName("iWindowsEffectMSec"),
        C_POINTER.withName("lpszWindowsEffectDLL"),
        C_LONG.withName("iWindowsEffectOrdinal"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("tagSOUNDSENTRYW");
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$struct$LAYOUT() { return tagSOUNDSENTRYW$struct$LAYOUT_; }

    static final MemoryLayout tagSOUNDSENTRYW$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$cbSize$LAYOUT() { return tagSOUNDSENTRYW$cbSize$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$cbSize$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$cbSize$VH() { return tagSOUNDSENTRYW$cbSize$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$dwFlags$LAYOUT() { return tagSOUNDSENTRYW$dwFlags$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$dwFlags$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$dwFlags$VH() { return tagSOUNDSENTRYW$dwFlags$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$iFSTextEffect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$iFSTextEffect$LAYOUT() { return tagSOUNDSENTRYW$iFSTextEffect$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$iFSTextEffect$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSTextEffect"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$iFSTextEffect$VH() { return tagSOUNDSENTRYW$iFSTextEffect$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$iFSTextEffectMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$iFSTextEffectMSec$LAYOUT() { return tagSOUNDSENTRYW$iFSTextEffectMSec$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$iFSTextEffectMSec$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSTextEffectMSec"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$iFSTextEffectMSec$VH() { return tagSOUNDSENTRYW$iFSTextEffectMSec$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$iFSTextEffectColorBits$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$iFSTextEffectColorBits$LAYOUT() { return tagSOUNDSENTRYW$iFSTextEffectColorBits$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$iFSTextEffectColorBits$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSTextEffectColorBits"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$iFSTextEffectColorBits$VH() { return tagSOUNDSENTRYW$iFSTextEffectColorBits$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$iFSGrafEffect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$iFSGrafEffect$LAYOUT() { return tagSOUNDSENTRYW$iFSGrafEffect$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$iFSGrafEffect$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSGrafEffect"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$iFSGrafEffect$VH() { return tagSOUNDSENTRYW$iFSGrafEffect$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$iFSGrafEffectMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$iFSGrafEffectMSec$LAYOUT() { return tagSOUNDSENTRYW$iFSGrafEffectMSec$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$iFSGrafEffectMSec$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSGrafEffectMSec"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$iFSGrafEffectMSec$VH() { return tagSOUNDSENTRYW$iFSGrafEffectMSec$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$iFSGrafEffectColor$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$iFSGrafEffectColor$LAYOUT() { return tagSOUNDSENTRYW$iFSGrafEffectColor$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$iFSGrafEffectColor$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iFSGrafEffectColor"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$iFSGrafEffectColor$VH() { return tagSOUNDSENTRYW$iFSGrafEffectColor$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$iWindowsEffect$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$iWindowsEffect$LAYOUT() { return tagSOUNDSENTRYW$iWindowsEffect$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$iWindowsEffect$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iWindowsEffect"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$iWindowsEffect$VH() { return tagSOUNDSENTRYW$iWindowsEffect$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$iWindowsEffectMSec$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$iWindowsEffectMSec$LAYOUT() { return tagSOUNDSENTRYW$iWindowsEffectMSec$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$iWindowsEffectMSec$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iWindowsEffectMSec"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$iWindowsEffectMSec$VH() { return tagSOUNDSENTRYW$iWindowsEffectMSec$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$lpszWindowsEffectDLL$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$lpszWindowsEffectDLL$LAYOUT() { return tagSOUNDSENTRYW$lpszWindowsEffectDLL$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$lpszWindowsEffectDLL$VH_ = MemoryHandles.asAddressVarHandle(tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpszWindowsEffectDLL")));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$lpszWindowsEffectDLL$VH() { return tagSOUNDSENTRYW$lpszWindowsEffectDLL$VH_; }

    static final MemoryLayout tagSOUNDSENTRYW$iWindowsEffectOrdinal$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSOUNDSENTRYW$iWindowsEffectOrdinal$LAYOUT() { return tagSOUNDSENTRYW$iWindowsEffectOrdinal$LAYOUT_; }

    static final VarHandle tagSOUNDSENTRYW$iWindowsEffectOrdinal$VH_ = tagSOUNDSENTRYW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iWindowsEffectOrdinal"));
    static final java.lang.invoke.VarHandle tagSOUNDSENTRYW$iWindowsEffectOrdinal$VH() { return tagSOUNDSENTRYW$iWindowsEffectOrdinal$VH_; }

    static final FunctionDescriptor SoundSentry$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor SoundSentry$FUNC() { return SoundSentry$FUNC_; }

    static final MethodHandle SoundSentry$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SoundSentry",
        "()I",
        SoundSentry$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SoundSentry$MH() { return SoundSentry$MH_; }

    static final MemoryLayout tagTOGGLEKEYS$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_LONG.withName("dwFlags")
    ).withName("tagTOGGLEKEYS");
    static final jdk.incubator.foreign.MemoryLayout tagTOGGLEKEYS$struct$LAYOUT() { return tagTOGGLEKEYS$struct$LAYOUT_; }

    static final MemoryLayout tagTOGGLEKEYS$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagTOGGLEKEYS$cbSize$LAYOUT() { return tagTOGGLEKEYS$cbSize$LAYOUT_; }

    static final VarHandle tagTOGGLEKEYS$cbSize$VH_ = tagTOGGLEKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagTOGGLEKEYS$cbSize$VH() { return tagTOGGLEKEYS$cbSize$VH_; }

    static final MemoryLayout tagTOGGLEKEYS$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTOGGLEKEYS$dwFlags$LAYOUT() { return tagTOGGLEKEYS$dwFlags$LAYOUT_; }

    static final VarHandle tagTOGGLEKEYS$dwFlags$VH_ = tagTOGGLEKEYS$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagTOGGLEKEYS$dwFlags$VH() { return tagTOGGLEKEYS$dwFlags$VH_; }

    static final MemoryLayout tagAUDIODESCRIPTION$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("Enabled"),
        C_LONG.withName("Locale")
    ).withName("tagAUDIODESCRIPTION");
    static final jdk.incubator.foreign.MemoryLayout tagAUDIODESCRIPTION$struct$LAYOUT() { return tagAUDIODESCRIPTION$struct$LAYOUT_; }

    static final MemoryLayout tagAUDIODESCRIPTION$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagAUDIODESCRIPTION$cbSize$LAYOUT() { return tagAUDIODESCRIPTION$cbSize$LAYOUT_; }

    static final VarHandle tagAUDIODESCRIPTION$cbSize$VH_ = tagAUDIODESCRIPTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagAUDIODESCRIPTION$cbSize$VH() { return tagAUDIODESCRIPTION$cbSize$VH_; }

    static final MemoryLayout tagAUDIODESCRIPTION$Enabled$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagAUDIODESCRIPTION$Enabled$LAYOUT() { return tagAUDIODESCRIPTION$Enabled$LAYOUT_; }

    static final VarHandle tagAUDIODESCRIPTION$Enabled$VH_ = tagAUDIODESCRIPTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Enabled"));
    static final java.lang.invoke.VarHandle tagAUDIODESCRIPTION$Enabled$VH() { return tagAUDIODESCRIPTION$Enabled$VH_; }

    static final MemoryLayout tagAUDIODESCRIPTION$Locale$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagAUDIODESCRIPTION$Locale$LAYOUT() { return tagAUDIODESCRIPTION$Locale$LAYOUT_; }

    static final VarHandle tagAUDIODESCRIPTION$Locale$VH_ = tagAUDIODESCRIPTION$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Locale"));
    static final java.lang.invoke.VarHandle tagAUDIODESCRIPTION$Locale$VH() { return tagAUDIODESCRIPTION$Locale$VH_; }

    static final FunctionDescriptor SetDebugErrorLevel$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetDebugErrorLevel$FUNC() { return SetDebugErrorLevel$FUNC_; }

    static final MethodHandle SetDebugErrorLevel$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetDebugErrorLevel",
        "(I)V",
        SetDebugErrorLevel$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetDebugErrorLevel$MH() { return SetDebugErrorLevel$MH_; }

    static final FunctionDescriptor SetLastErrorEx$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetLastErrorEx$FUNC() { return SetLastErrorEx$FUNC_; }

    static final MethodHandle SetLastErrorEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetLastErrorEx",
        "(II)V",
        SetLastErrorEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetLastErrorEx$MH() { return SetLastErrorEx$MH_; }

    static final FunctionDescriptor InternalGetWindowText$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor InternalGetWindowText$FUNC() { return InternalGetWindowText$FUNC_; }

    static final MethodHandle InternalGetWindowText$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InternalGetWindowText",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        InternalGetWindowText$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InternalGetWindowText$MH() { return InternalGetWindowText$MH_; }

    static final FunctionDescriptor CancelShutdown$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor CancelShutdown$FUNC() { return CancelShutdown$FUNC_; }

    static final MethodHandle CancelShutdown$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CancelShutdown",
        "()I",
        CancelShutdown$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CancelShutdown$MH() { return CancelShutdown$MH_; }

    static final FunctionDescriptor MonitorFromPoint$FUNC_ = FunctionDescriptor.of(C_POINTER,
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("tagPOINT"),
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor MonitorFromPoint$FUNC() { return MonitorFromPoint$FUNC_; }

    static final MethodHandle MonitorFromPoint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MonitorFromPoint",
        "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemoryAddress;",
        MonitorFromPoint$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MonitorFromPoint$MH() { return MonitorFromPoint$MH_; }

    static final FunctionDescriptor MonitorFromRect$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor MonitorFromRect$FUNC() { return MonitorFromRect$FUNC_; }

    static final MethodHandle MonitorFromRect$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MonitorFromRect",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        MonitorFromRect$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MonitorFromRect$MH() { return MonitorFromRect$MH_; }

    static final FunctionDescriptor MonitorFromWindow$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor MonitorFromWindow$FUNC() { return MonitorFromWindow$FUNC_; }

    static final MethodHandle MonitorFromWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "MonitorFromWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        MonitorFromWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle MonitorFromWindow$MH() { return MonitorFromWindow$MH_; }

    static final MemoryLayout tagMONITORINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcMonitor"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcWork"),
        C_LONG.withName("dwFlags")
    ).withName("tagMONITORINFO");
    static final jdk.incubator.foreign.MemoryLayout tagMONITORINFO$struct$LAYOUT() { return tagMONITORINFO$struct$LAYOUT_; }

    static final MemoryLayout tagMONITORINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMONITORINFO$cbSize$LAYOUT() { return tagMONITORINFO$cbSize$LAYOUT_; }

    static final VarHandle tagMONITORINFO$cbSize$VH_ = tagMONITORINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagMONITORINFO$cbSize$VH() { return tagMONITORINFO$cbSize$VH_; }

    static final MemoryLayout tagMONITORINFO$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMONITORINFO$dwFlags$LAYOUT() { return tagMONITORINFO$dwFlags$LAYOUT_; }

    static final VarHandle tagMONITORINFO$dwFlags$VH_ = tagMONITORINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle tagMONITORINFO$dwFlags$VH() { return tagMONITORINFO$dwFlags$VH_; }

    static final MemoryLayout tagMONITORINFOEXA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofPaddingBits(320),
        MemoryLayout.ofSequence(32, C_CHAR).withName("szDevice")
    ).withName("tagMONITORINFOEXA");
    static final jdk.incubator.foreign.MemoryLayout tagMONITORINFOEXA$struct$LAYOUT() { return tagMONITORINFOEXA$struct$LAYOUT_; }

    static final MemoryLayout tagMONITORINFOEXW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofPaddingBits(320),
        MemoryLayout.ofSequence(32, C_SHORT).withName("szDevice")
    ).withName("tagMONITORINFOEXW");
    static final jdk.incubator.foreign.MemoryLayout tagMONITORINFOEXW$struct$LAYOUT() { return tagMONITORINFOEXW$struct$LAYOUT_; }

    static final FunctionDescriptor GetMonitorInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMonitorInfoA$FUNC() { return GetMonitorInfoA$FUNC_; }

    static final MethodHandle GetMonitorInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMonitorInfoA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMonitorInfoA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMonitorInfoA$MH() { return GetMonitorInfoA$MH_; }

    static final FunctionDescriptor GetMonitorInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMonitorInfoW$FUNC() { return GetMonitorInfoW$FUNC_; }

    static final MethodHandle GetMonitorInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMonitorInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetMonitorInfoW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMonitorInfoW$MH() { return GetMonitorInfoW$MH_; }

    static final FunctionDescriptor EnumDisplayMonitors$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumDisplayMonitors$FUNC() { return EnumDisplayMonitors$FUNC_; }

    static final MethodHandle EnumDisplayMonitors$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumDisplayMonitors",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        EnumDisplayMonitors$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumDisplayMonitors$MH() { return EnumDisplayMonitors$MH_; }

    static final FunctionDescriptor EnumDisplayMonitors$lpfnEnum$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumDisplayMonitors$lpfnEnum$FUNC() { return EnumDisplayMonitors$lpfnEnum$FUNC_; }

    static final FunctionDescriptor NotifyWinEvent$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor NotifyWinEvent$FUNC() { return NotifyWinEvent$FUNC_; }

    static final MethodHandle NotifyWinEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "NotifyWinEvent",
        "(ILjdk/incubator/foreign/MemoryAddress;II)V",
        NotifyWinEvent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle NotifyWinEvent$MH() { return NotifyWinEvent$MH_; }

    static final FunctionDescriptor SetWinEventHook$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetWinEventHook$FUNC() { return SetWinEventHook$FUNC_; }

    static final MethodHandle SetWinEventHook$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetWinEventHook",
        "(IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)Ljdk/incubator/foreign/MemoryAddress;",
        SetWinEventHook$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetWinEventHook$MH() { return SetWinEventHook$MH_; }

    static final FunctionDescriptor SetWinEventHook$pfnWinEventProc$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetWinEventHook$pfnWinEventProc$FUNC() { return SetWinEventHook$pfnWinEventProc$FUNC_; }

    static final FunctionDescriptor IsWinEventHookInstalled$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor IsWinEventHookInstalled$FUNC() { return IsWinEventHookInstalled$FUNC_; }

    static final MethodHandle IsWinEventHookInstalled$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsWinEventHookInstalled",
        "(I)I",
        IsWinEventHookInstalled$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IsWinEventHookInstalled$MH() { return IsWinEventHookInstalled$MH_; }

    static final FunctionDescriptor UnhookWinEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor UnhookWinEvent$FUNC() { return UnhookWinEvent$FUNC_; }

    static final MethodHandle UnhookWinEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UnhookWinEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        UnhookWinEvent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UnhookWinEvent$MH() { return UnhookWinEvent$MH_; }

    static final MemoryLayout tagGUITHREADINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("flags"),
        C_POINTER.withName("hwndActive"),
        C_POINTER.withName("hwndFocus"),
        C_POINTER.withName("hwndCapture"),
        C_POINTER.withName("hwndMenuOwner"),
        C_POINTER.withName("hwndMoveSize"),
        C_POINTER.withName("hwndCaret"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcCaret")
    ).withName("tagGUITHREADINFO");
    static final jdk.incubator.foreign.MemoryLayout tagGUITHREADINFO$struct$LAYOUT() { return tagGUITHREADINFO$struct$LAYOUT_; }

    static final MemoryLayout tagGUITHREADINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagGUITHREADINFO$cbSize$LAYOUT() { return tagGUITHREADINFO$cbSize$LAYOUT_; }

    static final VarHandle tagGUITHREADINFO$cbSize$VH_ = tagGUITHREADINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagGUITHREADINFO$cbSize$VH() { return tagGUITHREADINFO$cbSize$VH_; }

    static final MemoryLayout tagGUITHREADINFO$flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagGUITHREADINFO$flags$LAYOUT() { return tagGUITHREADINFO$flags$LAYOUT_; }

    static final VarHandle tagGUITHREADINFO$flags$VH_ = tagGUITHREADINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    static final java.lang.invoke.VarHandle tagGUITHREADINFO$flags$VH() { return tagGUITHREADINFO$flags$VH_; }

    static final MemoryLayout tagGUITHREADINFO$hwndActive$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagGUITHREADINFO$hwndActive$LAYOUT() { return tagGUITHREADINFO$hwndActive$LAYOUT_; }

    static final VarHandle tagGUITHREADINFO$hwndActive$VH_ = MemoryHandles.asAddressVarHandle(tagGUITHREADINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndActive")));
    static final java.lang.invoke.VarHandle tagGUITHREADINFO$hwndActive$VH() { return tagGUITHREADINFO$hwndActive$VH_; }

    static final MemoryLayout tagGUITHREADINFO$hwndFocus$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagGUITHREADINFO$hwndFocus$LAYOUT() { return tagGUITHREADINFO$hwndFocus$LAYOUT_; }

    static final VarHandle tagGUITHREADINFO$hwndFocus$VH_ = MemoryHandles.asAddressVarHandle(tagGUITHREADINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndFocus")));
    static final java.lang.invoke.VarHandle tagGUITHREADINFO$hwndFocus$VH() { return tagGUITHREADINFO$hwndFocus$VH_; }

    static final MemoryLayout tagGUITHREADINFO$hwndCapture$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagGUITHREADINFO$hwndCapture$LAYOUT() { return tagGUITHREADINFO$hwndCapture$LAYOUT_; }

    static final VarHandle tagGUITHREADINFO$hwndCapture$VH_ = MemoryHandles.asAddressVarHandle(tagGUITHREADINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndCapture")));
    static final java.lang.invoke.VarHandle tagGUITHREADINFO$hwndCapture$VH() { return tagGUITHREADINFO$hwndCapture$VH_; }

    static final MemoryLayout tagGUITHREADINFO$hwndMenuOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagGUITHREADINFO$hwndMenuOwner$LAYOUT() { return tagGUITHREADINFO$hwndMenuOwner$LAYOUT_; }

    static final VarHandle tagGUITHREADINFO$hwndMenuOwner$VH_ = MemoryHandles.asAddressVarHandle(tagGUITHREADINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndMenuOwner")));
    static final java.lang.invoke.VarHandle tagGUITHREADINFO$hwndMenuOwner$VH() { return tagGUITHREADINFO$hwndMenuOwner$VH_; }

    static final MemoryLayout tagGUITHREADINFO$hwndMoveSize$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagGUITHREADINFO$hwndMoveSize$LAYOUT() { return tagGUITHREADINFO$hwndMoveSize$LAYOUT_; }

    static final VarHandle tagGUITHREADINFO$hwndMoveSize$VH_ = MemoryHandles.asAddressVarHandle(tagGUITHREADINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndMoveSize")));
    static final java.lang.invoke.VarHandle tagGUITHREADINFO$hwndMoveSize$VH() { return tagGUITHREADINFO$hwndMoveSize$VH_; }

    static final MemoryLayout tagGUITHREADINFO$hwndCaret$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagGUITHREADINFO$hwndCaret$LAYOUT() { return tagGUITHREADINFO$hwndCaret$LAYOUT_; }

    static final VarHandle tagGUITHREADINFO$hwndCaret$VH_ = MemoryHandles.asAddressVarHandle(tagGUITHREADINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndCaret")));
    static final java.lang.invoke.VarHandle tagGUITHREADINFO$hwndCaret$VH() { return tagGUITHREADINFO$hwndCaret$VH_; }

    static final FunctionDescriptor GetGUIThreadInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetGUIThreadInfo$FUNC() { return GetGUIThreadInfo$FUNC_; }

    static final MethodHandle GetGUIThreadInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetGUIThreadInfo",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        GetGUIThreadInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetGUIThreadInfo$MH() { return GetGUIThreadInfo$MH_; }

    static final FunctionDescriptor BlockInput$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor BlockInput$FUNC() { return BlockInput$FUNC_; }

    static final MethodHandle BlockInput$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "BlockInput",
        "(I)I",
        BlockInput$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle BlockInput$MH() { return BlockInput$MH_; }

    static final FunctionDescriptor SetProcessDPIAware$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor SetProcessDPIAware$FUNC() { return SetProcessDPIAware$FUNC_; }

    static final MethodHandle SetProcessDPIAware$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessDPIAware",
        "()I",
        SetProcessDPIAware$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetProcessDPIAware$MH() { return SetProcessDPIAware$MH_; }

    static final FunctionDescriptor IsProcessDPIAware$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor IsProcessDPIAware$FUNC() { return IsProcessDPIAware$FUNC_; }

    static final MethodHandle IsProcessDPIAware$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsProcessDPIAware",
        "()I",
        IsProcessDPIAware$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IsProcessDPIAware$MH() { return IsProcessDPIAware$MH_; }

    static final FunctionDescriptor SetThreadDpiAwarenessContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetThreadDpiAwarenessContext$FUNC() { return SetThreadDpiAwarenessContext$FUNC_; }

    static final MethodHandle SetThreadDpiAwarenessContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadDpiAwarenessContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        SetThreadDpiAwarenessContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetThreadDpiAwarenessContext$MH() { return SetThreadDpiAwarenessContext$MH_; }

    static final FunctionDescriptor GetThreadDpiAwarenessContext$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor GetThreadDpiAwarenessContext$FUNC() { return GetThreadDpiAwarenessContext$FUNC_; }

    static final MethodHandle GetThreadDpiAwarenessContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadDpiAwarenessContext",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetThreadDpiAwarenessContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetThreadDpiAwarenessContext$MH() { return GetThreadDpiAwarenessContext$MH_; }

    static final FunctionDescriptor GetWindowDpiAwarenessContext$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowDpiAwarenessContext$FUNC() { return GetWindowDpiAwarenessContext$FUNC_; }

    static final MethodHandle GetWindowDpiAwarenessContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowDpiAwarenessContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetWindowDpiAwarenessContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowDpiAwarenessContext$MH() { return GetWindowDpiAwarenessContext$MH_; }

    static final FunctionDescriptor GetAwarenessFromDpiAwarenessContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetAwarenessFromDpiAwarenessContext$FUNC() { return GetAwarenessFromDpiAwarenessContext$FUNC_; }

    static final MethodHandle GetAwarenessFromDpiAwarenessContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAwarenessFromDpiAwarenessContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetAwarenessFromDpiAwarenessContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetAwarenessFromDpiAwarenessContext$MH() { return GetAwarenessFromDpiAwarenessContext$MH_; }

    static final FunctionDescriptor GetDpiFromDpiAwarenessContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDpiFromDpiAwarenessContext$FUNC() { return GetDpiFromDpiAwarenessContext$FUNC_; }

    static final MethodHandle GetDpiFromDpiAwarenessContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDpiFromDpiAwarenessContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDpiFromDpiAwarenessContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDpiFromDpiAwarenessContext$MH() { return GetDpiFromDpiAwarenessContext$MH_; }

    static final FunctionDescriptor AreDpiAwarenessContextsEqual$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AreDpiAwarenessContextsEqual$FUNC() { return AreDpiAwarenessContextsEqual$FUNC_; }

    static final MethodHandle AreDpiAwarenessContextsEqual$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AreDpiAwarenessContextsEqual",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AreDpiAwarenessContextsEqual$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AreDpiAwarenessContextsEqual$MH() { return AreDpiAwarenessContextsEqual$MH_; }

    static final FunctionDescriptor IsValidDpiAwarenessContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor IsValidDpiAwarenessContext$FUNC() { return IsValidDpiAwarenessContext$FUNC_; }

    static final MethodHandle IsValidDpiAwarenessContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "IsValidDpiAwarenessContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        IsValidDpiAwarenessContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle IsValidDpiAwarenessContext$MH() { return IsValidDpiAwarenessContext$MH_; }

    static final FunctionDescriptor GetDpiForWindow$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDpiForWindow$FUNC() { return GetDpiForWindow$FUNC_; }

    static final MethodHandle GetDpiForWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDpiForWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetDpiForWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDpiForWindow$MH() { return GetDpiForWindow$MH_; }

    static final FunctionDescriptor GetDpiForSystem$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor GetDpiForSystem$FUNC() { return GetDpiForSystem$FUNC_; }

    static final MethodHandle GetDpiForSystem$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDpiForSystem",
        "()I",
        GetDpiForSystem$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDpiForSystem$MH() { return GetDpiForSystem$MH_; }

    static final FunctionDescriptor GetSystemDpiForProcess$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetSystemDpiForProcess$FUNC() { return GetSystemDpiForProcess$FUNC_; }

    static final MethodHandle GetSystemDpiForProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetSystemDpiForProcess",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetSystemDpiForProcess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetSystemDpiForProcess$MH() { return GetSystemDpiForProcess$MH_; }

    static final FunctionDescriptor EnableNonClientDpiScaling$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnableNonClientDpiScaling$FUNC() { return EnableNonClientDpiScaling$FUNC_; }

    static final MethodHandle EnableNonClientDpiScaling$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnableNonClientDpiScaling",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        EnableNonClientDpiScaling$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnableNonClientDpiScaling$MH() { return EnableNonClientDpiScaling$MH_; }

    static final FunctionDescriptor InheritWindowMonitor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor InheritWindowMonitor$FUNC() { return InheritWindowMonitor$FUNC_; }

    static final MethodHandle InheritWindowMonitor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InheritWindowMonitor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        InheritWindowMonitor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InheritWindowMonitor$MH() { return InheritWindowMonitor$MH_; }

    static final FunctionDescriptor SetProcessDpiAwarenessContext$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetProcessDpiAwarenessContext$FUNC() { return SetProcessDpiAwarenessContext$FUNC_; }

    static final MethodHandle SetProcessDpiAwarenessContext$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetProcessDpiAwarenessContext",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetProcessDpiAwarenessContext$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetProcessDpiAwarenessContext$MH() { return SetProcessDpiAwarenessContext$MH_; }

    static final FunctionDescriptor GetDpiAwarenessContextForProcess$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetDpiAwarenessContextForProcess$FUNC() { return GetDpiAwarenessContextForProcess$FUNC_; }

    static final MethodHandle GetDpiAwarenessContextForProcess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetDpiAwarenessContextForProcess",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        GetDpiAwarenessContextForProcess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetDpiAwarenessContextForProcess$MH() { return GetDpiAwarenessContextForProcess$MH_; }

    static final FunctionDescriptor SetThreadDpiHostingBehavior$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetThreadDpiHostingBehavior$FUNC() { return SetThreadDpiHostingBehavior$FUNC_; }

    static final MethodHandle SetThreadDpiHostingBehavior$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetThreadDpiHostingBehavior",
        "(I)I",
        SetThreadDpiHostingBehavior$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetThreadDpiHostingBehavior$MH() { return SetThreadDpiHostingBehavior$MH_; }

    static final FunctionDescriptor GetThreadDpiHostingBehavior$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor GetThreadDpiHostingBehavior$FUNC() { return GetThreadDpiHostingBehavior$FUNC_; }

    static final MethodHandle GetThreadDpiHostingBehavior$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetThreadDpiHostingBehavior",
        "()I",
        GetThreadDpiHostingBehavior$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetThreadDpiHostingBehavior$MH() { return GetThreadDpiHostingBehavior$MH_; }

    static final FunctionDescriptor GetWindowDpiHostingBehavior$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowDpiHostingBehavior$FUNC() { return GetWindowDpiHostingBehavior$FUNC_; }

    static final MethodHandle GetWindowDpiHostingBehavior$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowDpiHostingBehavior",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowDpiHostingBehavior$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowDpiHostingBehavior$MH() { return GetWindowDpiHostingBehavior$MH_; }

    static final FunctionDescriptor GetWindowModuleFileNameA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowModuleFileNameA$FUNC() { return GetWindowModuleFileNameA$FUNC_; }

    static final MethodHandle GetWindowModuleFileNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowModuleFileNameA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetWindowModuleFileNameA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowModuleFileNameA$MH() { return GetWindowModuleFileNameA$MH_; }

    static final FunctionDescriptor GetWindowModuleFileNameW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowModuleFileNameW$FUNC() { return GetWindowModuleFileNameW$FUNC_; }

    static final MethodHandle GetWindowModuleFileNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowModuleFileNameW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetWindowModuleFileNameW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowModuleFileNameW$MH() { return GetWindowModuleFileNameW$MH_; }

    static final MemoryLayout tagCURSORINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("flags"),
        C_POINTER.withName("hCursor"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptScreenPos")
    ).withName("tagCURSORINFO");
    static final jdk.incubator.foreign.MemoryLayout tagCURSORINFO$struct$LAYOUT() { return tagCURSORINFO$struct$LAYOUT_; }

    static final MemoryLayout tagCURSORINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCURSORINFO$cbSize$LAYOUT() { return tagCURSORINFO$cbSize$LAYOUT_; }

    static final VarHandle tagCURSORINFO$cbSize$VH_ = tagCURSORINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagCURSORINFO$cbSize$VH() { return tagCURSORINFO$cbSize$VH_; }

    static final MemoryLayout tagCURSORINFO$flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCURSORINFO$flags$LAYOUT() { return tagCURSORINFO$flags$LAYOUT_; }

    static final VarHandle tagCURSORINFO$flags$VH_ = tagCURSORINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("flags"));
    static final java.lang.invoke.VarHandle tagCURSORINFO$flags$VH() { return tagCURSORINFO$flags$VH_; }

    static final MemoryLayout tagCURSORINFO$hCursor$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCURSORINFO$hCursor$LAYOUT() { return tagCURSORINFO$hCursor$LAYOUT_; }

    static final VarHandle tagCURSORINFO$hCursor$VH_ = MemoryHandles.asAddressVarHandle(tagCURSORINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hCursor")));
    static final java.lang.invoke.VarHandle tagCURSORINFO$hCursor$VH() { return tagCURSORINFO$hCursor$VH_; }

    static final FunctionDescriptor GetCursorInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCursorInfo$FUNC() { return GetCursorInfo$FUNC_; }

    static final MethodHandle GetCursorInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCursorInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetCursorInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCursorInfo$MH() { return GetCursorInfo$MH_; }

    static final MemoryLayout tagWINDOWINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcWindow"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcClient"),
        C_LONG.withName("dwStyle"),
        C_LONG.withName("dwExStyle"),
        C_LONG.withName("dwWindowStatus"),
        C_INT.withName("cxWindowBorders"),
        C_INT.withName("cyWindowBorders"),
        C_SHORT.withName("atomWindowType"),
        C_SHORT.withName("wCreatorVersion")
    ).withName("tagWINDOWINFO");
    static final jdk.incubator.foreign.MemoryLayout tagWINDOWINFO$struct$LAYOUT() { return tagWINDOWINFO$struct$LAYOUT_; }

    static final MemoryLayout tagWINDOWINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagWINDOWINFO$cbSize$LAYOUT() { return tagWINDOWINFO$cbSize$LAYOUT_; }

    static final VarHandle tagWINDOWINFO$cbSize$VH_ = tagWINDOWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagWINDOWINFO$cbSize$VH() { return tagWINDOWINFO$cbSize$VH_; }

    static final MemoryLayout tagWINDOWINFO$dwStyle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagWINDOWINFO$dwStyle$LAYOUT() { return tagWINDOWINFO$dwStyle$LAYOUT_; }

    static final VarHandle tagWINDOWINFO$dwStyle$VH_ = tagWINDOWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStyle"));
    static final java.lang.invoke.VarHandle tagWINDOWINFO$dwStyle$VH() { return tagWINDOWINFO$dwStyle$VH_; }

    static final MemoryLayout tagWINDOWINFO$dwExStyle$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagWINDOWINFO$dwExStyle$LAYOUT() { return tagWINDOWINFO$dwExStyle$LAYOUT_; }

    static final VarHandle tagWINDOWINFO$dwExStyle$VH_ = tagWINDOWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwExStyle"));
    static final java.lang.invoke.VarHandle tagWINDOWINFO$dwExStyle$VH() { return tagWINDOWINFO$dwExStyle$VH_; }

    static final MemoryLayout tagWINDOWINFO$dwWindowStatus$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagWINDOWINFO$dwWindowStatus$LAYOUT() { return tagWINDOWINFO$dwWindowStatus$LAYOUT_; }

    static final VarHandle tagWINDOWINFO$dwWindowStatus$VH_ = tagWINDOWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwWindowStatus"));
    static final java.lang.invoke.VarHandle tagWINDOWINFO$dwWindowStatus$VH() { return tagWINDOWINFO$dwWindowStatus$VH_; }

    static final MemoryLayout tagWINDOWINFO$cxWindowBorders$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagWINDOWINFO$cxWindowBorders$LAYOUT() { return tagWINDOWINFO$cxWindowBorders$LAYOUT_; }

    static final VarHandle tagWINDOWINFO$cxWindowBorders$VH_ = tagWINDOWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cxWindowBorders"));
    static final java.lang.invoke.VarHandle tagWINDOWINFO$cxWindowBorders$VH() { return tagWINDOWINFO$cxWindowBorders$VH_; }

    static final MemoryLayout tagWINDOWINFO$cyWindowBorders$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagWINDOWINFO$cyWindowBorders$LAYOUT() { return tagWINDOWINFO$cyWindowBorders$LAYOUT_; }

    static final VarHandle tagWINDOWINFO$cyWindowBorders$VH_ = tagWINDOWINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cyWindowBorders"));
    static final java.lang.invoke.VarHandle tagWINDOWINFO$cyWindowBorders$VH() { return tagWINDOWINFO$cyWindowBorders$VH_; }

    static final MemoryLayout tagWINDOWINFO$atomWindowType$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagWINDOWINFO$atomWindowType$LAYOUT() { return tagWINDOWINFO$atomWindowType$LAYOUT_; }

    static final VarHandle tagWINDOWINFO$atomWindowType$VH_ = tagWINDOWINFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("atomWindowType"));
    static final java.lang.invoke.VarHandle tagWINDOWINFO$atomWindowType$VH() { return tagWINDOWINFO$atomWindowType$VH_; }

    static final MemoryLayout tagWINDOWINFO$wCreatorVersion$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagWINDOWINFO$wCreatorVersion$LAYOUT() { return tagWINDOWINFO$wCreatorVersion$LAYOUT_; }

    static final VarHandle tagWINDOWINFO$wCreatorVersion$VH_ = tagWINDOWINFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wCreatorVersion"));
    static final java.lang.invoke.VarHandle tagWINDOWINFO$wCreatorVersion$VH() { return tagWINDOWINFO$wCreatorVersion$VH_; }

    static final FunctionDescriptor GetWindowInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetWindowInfo$FUNC() { return GetWindowInfo$FUNC_; }

    static final MethodHandle GetWindowInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetWindowInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetWindowInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetWindowInfo$MH() { return GetWindowInfo$MH_; }

    static final MemoryLayout tagTITLEBARINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcTitleBar"),
        MemoryLayout.ofSequence(6, C_LONG).withName("rgstate")
    ).withName("tagTITLEBARINFO");
    static final jdk.incubator.foreign.MemoryLayout tagTITLEBARINFO$struct$LAYOUT() { return tagTITLEBARINFO$struct$LAYOUT_; }

    static final MemoryLayout tagTITLEBARINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTITLEBARINFO$cbSize$LAYOUT() { return tagTITLEBARINFO$cbSize$LAYOUT_; }

    static final VarHandle tagTITLEBARINFO$cbSize$VH_ = tagTITLEBARINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagTITLEBARINFO$cbSize$VH() { return tagTITLEBARINFO$cbSize$VH_; }

    static final FunctionDescriptor GetTitleBarInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetTitleBarInfo$FUNC() { return GetTitleBarInfo$FUNC_; }

    static final MethodHandle GetTitleBarInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetTitleBarInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetTitleBarInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetTitleBarInfo$MH() { return GetTitleBarInfo$MH_; }

    static final MemoryLayout tagTITLEBARINFOEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcTitleBar"),
        MemoryLayout.ofSequence(6, C_LONG).withName("rgstate"),
        MemoryLayout.ofSequence(6, MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("tagRECT")).withName("rgrect")
    ).withName("tagTITLEBARINFOEX");
    static final jdk.incubator.foreign.MemoryLayout tagTITLEBARINFOEX$struct$LAYOUT() { return tagTITLEBARINFOEX$struct$LAYOUT_; }

    static final MemoryLayout tagTITLEBARINFOEX$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagTITLEBARINFOEX$cbSize$LAYOUT() { return tagTITLEBARINFOEX$cbSize$LAYOUT_; }

    static final VarHandle tagTITLEBARINFOEX$cbSize$VH_ = tagTITLEBARINFOEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagTITLEBARINFOEX$cbSize$VH() { return tagTITLEBARINFOEX$cbSize$VH_; }

    static final MemoryLayout tagMENUBARINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcBar"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hMenu"),
        C_POINTER.withName("hwndMenu"),
        C_LONGLONG
    ).withName("tagMENUBARINFO");
    static final jdk.incubator.foreign.MemoryLayout tagMENUBARINFO$struct$LAYOUT() { return tagMENUBARINFO$struct$LAYOUT_; }

    static final MemoryLayout tagMENUBARINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagMENUBARINFO$cbSize$LAYOUT() { return tagMENUBARINFO$cbSize$LAYOUT_; }

    static final VarHandle tagMENUBARINFO$cbSize$VH_ = tagMENUBARINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagMENUBARINFO$cbSize$VH() { return tagMENUBARINFO$cbSize$VH_; }

    static final MemoryLayout tagMENUBARINFO$hMenu$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUBARINFO$hMenu$LAYOUT() { return tagMENUBARINFO$hMenu$LAYOUT_; }

    static final VarHandle tagMENUBARINFO$hMenu$VH_ = MemoryHandles.asAddressVarHandle(tagMENUBARINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hMenu")));
    static final java.lang.invoke.VarHandle tagMENUBARINFO$hMenu$VH() { return tagMENUBARINFO$hMenu$VH_; }

    static final MemoryLayout tagMENUBARINFO$hwndMenu$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagMENUBARINFO$hwndMenu$LAYOUT() { return tagMENUBARINFO$hwndMenu$LAYOUT_; }

    static final VarHandle tagMENUBARINFO$hwndMenu$VH_ = MemoryHandles.asAddressVarHandle(tagMENUBARINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndMenu")));
    static final java.lang.invoke.VarHandle tagMENUBARINFO$hwndMenu$VH() { return tagMENUBARINFO$hwndMenu$VH_; }

    static final FunctionDescriptor GetMenuBarInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetMenuBarInfo$FUNC() { return GetMenuBarInfo$FUNC_; }

    static final MethodHandle GetMenuBarInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetMenuBarInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetMenuBarInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetMenuBarInfo$MH() { return GetMenuBarInfo$MH_; }

    static final MemoryLayout tagSCROLLBARINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcScrollBar"),
        C_INT.withName("dxyLineButton"),
        C_INT.withName("xyThumbTop"),
        C_INT.withName("xyThumbBottom"),
        C_INT.withName("reserved"),
        MemoryLayout.ofSequence(6, C_LONG).withName("rgstate")
    ).withName("tagSCROLLBARINFO");
    static final jdk.incubator.foreign.MemoryLayout tagSCROLLBARINFO$struct$LAYOUT() { return tagSCROLLBARINFO$struct$LAYOUT_; }

    static final MemoryLayout tagSCROLLBARINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagSCROLLBARINFO$cbSize$LAYOUT() { return tagSCROLLBARINFO$cbSize$LAYOUT_; }

    static final VarHandle tagSCROLLBARINFO$cbSize$VH_ = tagSCROLLBARINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagSCROLLBARINFO$cbSize$VH() { return tagSCROLLBARINFO$cbSize$VH_; }

    static final MemoryLayout tagSCROLLBARINFO$dxyLineButton$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSCROLLBARINFO$dxyLineButton$LAYOUT() { return tagSCROLLBARINFO$dxyLineButton$LAYOUT_; }

    static final VarHandle tagSCROLLBARINFO$dxyLineButton$VH_ = tagSCROLLBARINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dxyLineButton"));
    static final java.lang.invoke.VarHandle tagSCROLLBARINFO$dxyLineButton$VH() { return tagSCROLLBARINFO$dxyLineButton$VH_; }

    static final MemoryLayout tagSCROLLBARINFO$xyThumbTop$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSCROLLBARINFO$xyThumbTop$LAYOUT() { return tagSCROLLBARINFO$xyThumbTop$LAYOUT_; }

    static final VarHandle tagSCROLLBARINFO$xyThumbTop$VH_ = tagSCROLLBARINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("xyThumbTop"));
    static final java.lang.invoke.VarHandle tagSCROLLBARINFO$xyThumbTop$VH() { return tagSCROLLBARINFO$xyThumbTop$VH_; }

    static final MemoryLayout tagSCROLLBARINFO$xyThumbBottom$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSCROLLBARINFO$xyThumbBottom$LAYOUT() { return tagSCROLLBARINFO$xyThumbBottom$LAYOUT_; }

    static final VarHandle tagSCROLLBARINFO$xyThumbBottom$VH_ = tagSCROLLBARINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("xyThumbBottom"));
    static final java.lang.invoke.VarHandle tagSCROLLBARINFO$xyThumbBottom$VH() { return tagSCROLLBARINFO$xyThumbBottom$VH_; }

    static final MemoryLayout tagSCROLLBARINFO$reserved$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagSCROLLBARINFO$reserved$LAYOUT() { return tagSCROLLBARINFO$reserved$LAYOUT_; }

    static final VarHandle tagSCROLLBARINFO$reserved$VH_ = tagSCROLLBARINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("reserved"));
    static final java.lang.invoke.VarHandle tagSCROLLBARINFO$reserved$VH() { return tagSCROLLBARINFO$reserved$VH_; }

    static final FunctionDescriptor GetScrollBarInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetScrollBarInfo$FUNC() { return GetScrollBarInfo$FUNC_; }

    static final MethodHandle GetScrollBarInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetScrollBarInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetScrollBarInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetScrollBarInfo$MH() { return GetScrollBarInfo$MH_; }

    static final MemoryLayout tagCOMBOBOXINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcItem"),
        MemoryLayout.ofStruct(
            C_LONG.withName("left"),
            C_LONG.withName("top"),
            C_LONG.withName("right"),
            C_LONG.withName("bottom")
        ).withName("rcButton"),
        C_LONG.withName("stateButton"),
        C_POINTER.withName("hwndCombo"),
        C_POINTER.withName("hwndItem"),
        C_POINTER.withName("hwndList")
    ).withName("tagCOMBOBOXINFO");
    static final jdk.incubator.foreign.MemoryLayout tagCOMBOBOXINFO$struct$LAYOUT() { return tagCOMBOBOXINFO$struct$LAYOUT_; }

    static final MemoryLayout tagCOMBOBOXINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCOMBOBOXINFO$cbSize$LAYOUT() { return tagCOMBOBOXINFO$cbSize$LAYOUT_; }

    static final VarHandle tagCOMBOBOXINFO$cbSize$VH_ = tagCOMBOBOXINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagCOMBOBOXINFO$cbSize$VH() { return tagCOMBOBOXINFO$cbSize$VH_; }

    static final MemoryLayout tagCOMBOBOXINFO$stateButton$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagCOMBOBOXINFO$stateButton$LAYOUT() { return tagCOMBOBOXINFO$stateButton$LAYOUT_; }

    static final VarHandle tagCOMBOBOXINFO$stateButton$VH_ = tagCOMBOBOXINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("stateButton"));
    static final java.lang.invoke.VarHandle tagCOMBOBOXINFO$stateButton$VH() { return tagCOMBOBOXINFO$stateButton$VH_; }

    static final MemoryLayout tagCOMBOBOXINFO$hwndCombo$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCOMBOBOXINFO$hwndCombo$LAYOUT() { return tagCOMBOBOXINFO$hwndCombo$LAYOUT_; }

    static final VarHandle tagCOMBOBOXINFO$hwndCombo$VH_ = MemoryHandles.asAddressVarHandle(tagCOMBOBOXINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndCombo")));
    static final java.lang.invoke.VarHandle tagCOMBOBOXINFO$hwndCombo$VH() { return tagCOMBOBOXINFO$hwndCombo$VH_; }

    static final MemoryLayout tagCOMBOBOXINFO$hwndItem$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCOMBOBOXINFO$hwndItem$LAYOUT() { return tagCOMBOBOXINFO$hwndItem$LAYOUT_; }

    static final VarHandle tagCOMBOBOXINFO$hwndItem$VH_ = MemoryHandles.asAddressVarHandle(tagCOMBOBOXINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndItem")));
    static final java.lang.invoke.VarHandle tagCOMBOBOXINFO$hwndItem$VH() { return tagCOMBOBOXINFO$hwndItem$VH_; }

    static final MemoryLayout tagCOMBOBOXINFO$hwndList$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagCOMBOBOXINFO$hwndList$LAYOUT() { return tagCOMBOBOXINFO$hwndList$LAYOUT_; }

    static final VarHandle tagCOMBOBOXINFO$hwndList$VH_ = MemoryHandles.asAddressVarHandle(tagCOMBOBOXINFO$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndList")));
    static final java.lang.invoke.VarHandle tagCOMBOBOXINFO$hwndList$VH() { return tagCOMBOBOXINFO$hwndList$VH_; }

    static final FunctionDescriptor GetComboBoxInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetComboBoxInfo$FUNC() { return GetComboBoxInfo$FUNC_; }

    static final MethodHandle GetComboBoxInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetComboBoxInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetComboBoxInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetComboBoxInfo$MH() { return GetComboBoxInfo$MH_; }

    static final FunctionDescriptor GetAncestor$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetAncestor$FUNC() { return GetAncestor$FUNC_; }

    static final MethodHandle GetAncestor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAncestor",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
        GetAncestor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetAncestor$MH() { return GetAncestor$MH_; }

    static final FunctionDescriptor RealChildWindowFromPoint$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("tagPOINT")
    );
    static final jdk.incubator.foreign.FunctionDescriptor RealChildWindowFromPoint$FUNC() { return RealChildWindowFromPoint$FUNC_; }

    static final MethodHandle RealChildWindowFromPoint$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RealChildWindowFromPoint",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
        RealChildWindowFromPoint$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RealChildWindowFromPoint$MH() { return RealChildWindowFromPoint$MH_; }

    static final FunctionDescriptor RealGetWindowClassA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor RealGetWindowClassA$FUNC() { return RealGetWindowClassA$FUNC_; }

    static final MethodHandle RealGetWindowClassA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RealGetWindowClassA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        RealGetWindowClassA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RealGetWindowClassA$MH() { return RealGetWindowClassA$MH_; }

    static final FunctionDescriptor RealGetWindowClassW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor RealGetWindowClassW$FUNC() { return RealGetWindowClassW$FUNC_; }

    static final MethodHandle RealGetWindowClassW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RealGetWindowClassW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        RealGetWindowClassW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RealGetWindowClassW$MH() { return RealGetWindowClassW$MH_; }

    static final MemoryLayout tagALTTABINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_INT.withName("cItems"),
        C_INT.withName("cColumns"),
        C_INT.withName("cRows"),
        C_INT.withName("iColFocus"),
        C_INT.withName("iRowFocus"),
        C_INT.withName("cxItem"),
        C_INT.withName("cyItem"),
        MemoryLayout.ofStruct(
            C_LONG.withName("x"),
            C_LONG.withName("y")
        ).withName("ptStart")
    ).withName("tagALTTABINFO");
    static final jdk.incubator.foreign.MemoryLayout tagALTTABINFO$struct$LAYOUT() { return tagALTTABINFO$struct$LAYOUT_; }

    static final MemoryLayout tagALTTABINFO$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagALTTABINFO$cbSize$LAYOUT() { return tagALTTABINFO$cbSize$LAYOUT_; }

    static final VarHandle tagALTTABINFO$cbSize$VH_ = tagALTTABINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle tagALTTABINFO$cbSize$VH() { return tagALTTABINFO$cbSize$VH_; }

    static final MemoryLayout tagALTTABINFO$cItems$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagALTTABINFO$cItems$LAYOUT() { return tagALTTABINFO$cItems$LAYOUT_; }

    static final VarHandle tagALTTABINFO$cItems$VH_ = tagALTTABINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cItems"));
    static final java.lang.invoke.VarHandle tagALTTABINFO$cItems$VH() { return tagALTTABINFO$cItems$VH_; }

    static final MemoryLayout tagALTTABINFO$cColumns$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagALTTABINFO$cColumns$LAYOUT() { return tagALTTABINFO$cColumns$LAYOUT_; }

    static final VarHandle tagALTTABINFO$cColumns$VH_ = tagALTTABINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cColumns"));
    static final java.lang.invoke.VarHandle tagALTTABINFO$cColumns$VH() { return tagALTTABINFO$cColumns$VH_; }

    static final MemoryLayout tagALTTABINFO$cRows$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagALTTABINFO$cRows$LAYOUT() { return tagALTTABINFO$cRows$LAYOUT_; }

    static final VarHandle tagALTTABINFO$cRows$VH_ = tagALTTABINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cRows"));
    static final java.lang.invoke.VarHandle tagALTTABINFO$cRows$VH() { return tagALTTABINFO$cRows$VH_; }

    static final MemoryLayout tagALTTABINFO$iColFocus$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagALTTABINFO$iColFocus$LAYOUT() { return tagALTTABINFO$iColFocus$LAYOUT_; }

    static final VarHandle tagALTTABINFO$iColFocus$VH_ = tagALTTABINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iColFocus"));
    static final java.lang.invoke.VarHandle tagALTTABINFO$iColFocus$VH() { return tagALTTABINFO$iColFocus$VH_; }

    static final MemoryLayout tagALTTABINFO$iRowFocus$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagALTTABINFO$iRowFocus$LAYOUT() { return tagALTTABINFO$iRowFocus$LAYOUT_; }

    static final VarHandle tagALTTABINFO$iRowFocus$VH_ = tagALTTABINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("iRowFocus"));
    static final java.lang.invoke.VarHandle tagALTTABINFO$iRowFocus$VH() { return tagALTTABINFO$iRowFocus$VH_; }

    static final MemoryLayout tagALTTABINFO$cxItem$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagALTTABINFO$cxItem$LAYOUT() { return tagALTTABINFO$cxItem$LAYOUT_; }

    static final VarHandle tagALTTABINFO$cxItem$VH_ = tagALTTABINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cxItem"));
    static final java.lang.invoke.VarHandle tagALTTABINFO$cxItem$VH() { return tagALTTABINFO$cxItem$VH_; }

    static final MemoryLayout tagALTTABINFO$cyItem$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagALTTABINFO$cyItem$LAYOUT() { return tagALTTABINFO$cyItem$LAYOUT_; }

    static final VarHandle tagALTTABINFO$cyItem$VH_ = tagALTTABINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cyItem"));
    static final java.lang.invoke.VarHandle tagALTTABINFO$cyItem$VH() { return tagALTTABINFO$cyItem$VH_; }

    static final FunctionDescriptor GetAltTabInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetAltTabInfoA$FUNC() { return GetAltTabInfoA$FUNC_; }

    static final MethodHandle GetAltTabInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAltTabInfoA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetAltTabInfoA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetAltTabInfoA$MH() { return GetAltTabInfoA$MH_; }

    static final FunctionDescriptor GetAltTabInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetAltTabInfoW$FUNC() { return GetAltTabInfoW$FUNC_; }

    static final MethodHandle GetAltTabInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetAltTabInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetAltTabInfoW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetAltTabInfoW$MH() { return GetAltTabInfoW$MH_; }

    static final FunctionDescriptor GetListBoxInfo$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetListBoxInfo$FUNC() { return GetListBoxInfo$FUNC_; }

    static final MethodHandle GetListBoxInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetListBoxInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetListBoxInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetListBoxInfo$MH() { return GetListBoxInfo$MH_; }

    static final FunctionDescriptor LockWorkStation$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor LockWorkStation$FUNC() { return LockWorkStation$FUNC_; }

    static final MethodHandle LockWorkStation$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "LockWorkStation",
        "()I",
        LockWorkStation$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle LockWorkStation$MH() { return LockWorkStation$MH_; }

    static final FunctionDescriptor UserHandleGrantAccess$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor UserHandleGrantAccess$FUNC() { return UserHandleGrantAccess$FUNC_; }

    static final MethodHandle UserHandleGrantAccess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "UserHandleGrantAccess",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        UserHandleGrantAccess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle UserHandleGrantAccess$MH() { return UserHandleGrantAccess$MH_; }

    static final MemoryLayout HRAWINPUT__$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("unused")
    ).withName("HRAWINPUT__");
    static final jdk.incubator.foreign.MemoryLayout HRAWINPUT__$struct$LAYOUT() { return HRAWINPUT__$struct$LAYOUT_; }

    static final MemoryLayout HRAWINPUT__$unused$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout HRAWINPUT__$unused$LAYOUT() { return HRAWINPUT__$unused$LAYOUT_; }

    static final VarHandle HRAWINPUT__$unused$VH_ = HRAWINPUT__$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("unused"));
    static final java.lang.invoke.VarHandle HRAWINPUT__$unused$VH() { return HRAWINPUT__$unused$VH_; }

    static final MemoryLayout tagRAWINPUTHEADER$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwType"),
        C_LONG.withName("dwSize"),
        C_POINTER.withName("hDevice"),
        C_LONGLONG.withName("wParam")
    ).withName("tagRAWINPUTHEADER");
    static final jdk.incubator.foreign.MemoryLayout tagRAWINPUTHEADER$struct$LAYOUT() { return tagRAWINPUTHEADER$struct$LAYOUT_; }

    static final MemoryLayout tagRAWINPUTHEADER$dwType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRAWINPUTHEADER$dwType$LAYOUT() { return tagRAWINPUTHEADER$dwType$LAYOUT_; }

    static final VarHandle tagRAWINPUTHEADER$dwType$VH_ = tagRAWINPUTHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwType"));
    static final java.lang.invoke.VarHandle tagRAWINPUTHEADER$dwType$VH() { return tagRAWINPUTHEADER$dwType$VH_; }

    static final MemoryLayout tagRAWINPUTHEADER$dwSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRAWINPUTHEADER$dwSize$LAYOUT() { return tagRAWINPUTHEADER$dwSize$LAYOUT_; }

    static final VarHandle tagRAWINPUTHEADER$dwSize$VH_ = tagRAWINPUTHEADER$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    static final java.lang.invoke.VarHandle tagRAWINPUTHEADER$dwSize$VH() { return tagRAWINPUTHEADER$dwSize$VH_; }

    static final MemoryLayout tagRAWINPUTHEADER$hDevice$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout tagRAWINPUTHEADER$hDevice$LAYOUT() { return tagRAWINPUTHEADER$hDevice$LAYOUT_; }

    static final VarHandle tagRAWINPUTHEADER$hDevice$VH_ = MemoryHandles.asAddressVarHandle(tagRAWINPUTHEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hDevice")));
    static final java.lang.invoke.VarHandle tagRAWINPUTHEADER$hDevice$VH() { return tagRAWINPUTHEADER$hDevice$VH_; }

    static final MemoryLayout tagRAWINPUTHEADER$wParam$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout tagRAWINPUTHEADER$wParam$LAYOUT() { return tagRAWINPUTHEADER$wParam$LAYOUT_; }

    static final VarHandle tagRAWINPUTHEADER$wParam$VH_ = tagRAWINPUTHEADER$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("wParam"));
    static final java.lang.invoke.VarHandle tagRAWINPUTHEADER$wParam$VH() { return tagRAWINPUTHEADER$wParam$VH_; }

    static final MemoryLayout tagRAWMOUSE$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("usFlags"),
        MemoryLayout.ofPaddingBits(16),
        C_LONG.withName("ulButtons"),
        C_SHORT.withName("usButtonFlags"),
        C_SHORT.withName("usButtonData"),
        C_LONG.withName("ulRawButtons"),
        C_LONG.withName("lLastX"),
        C_LONG.withName("lLastY"),
        C_LONG.withName("ulExtraInformation")
    ).withName("tagRAWMOUSE");
    static final jdk.incubator.foreign.MemoryLayout tagRAWMOUSE$struct$LAYOUT() { return tagRAWMOUSE$struct$LAYOUT_; }

    static final MemoryLayout tagRAWMOUSE$usFlags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagRAWMOUSE$usFlags$LAYOUT() { return tagRAWMOUSE$usFlags$LAYOUT_; }

    static final VarHandle tagRAWMOUSE$usFlags$VH_ = tagRAWMOUSE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("usFlags"));
    static final java.lang.invoke.VarHandle tagRAWMOUSE$usFlags$VH() { return tagRAWMOUSE$usFlags$VH_; }

    static final MemoryLayout tagRAWMOUSE$ulButtons$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRAWMOUSE$ulButtons$LAYOUT() { return tagRAWMOUSE$ulButtons$LAYOUT_; }

    static final VarHandle tagRAWMOUSE$ulButtons$VH_ = tagRAWMOUSE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulButtons"));
    static final java.lang.invoke.VarHandle tagRAWMOUSE$ulButtons$VH() { return tagRAWMOUSE$ulButtons$VH_; }

    static final MemoryLayout tagRAWMOUSE$usButtonFlags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagRAWMOUSE$usButtonFlags$LAYOUT() { return tagRAWMOUSE$usButtonFlags$LAYOUT_; }

    static final VarHandle tagRAWMOUSE$usButtonFlags$VH_ = tagRAWMOUSE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("usButtonFlags"));
    static final java.lang.invoke.VarHandle tagRAWMOUSE$usButtonFlags$VH() { return tagRAWMOUSE$usButtonFlags$VH_; }

    static final MemoryLayout tagRAWMOUSE$usButtonData$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagRAWMOUSE$usButtonData$LAYOUT() { return tagRAWMOUSE$usButtonData$LAYOUT_; }

    static final VarHandle tagRAWMOUSE$usButtonData$VH_ = tagRAWMOUSE$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("usButtonData"));
    static final java.lang.invoke.VarHandle tagRAWMOUSE$usButtonData$VH() { return tagRAWMOUSE$usButtonData$VH_; }

    static final MemoryLayout tagRAWMOUSE$ulRawButtons$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRAWMOUSE$ulRawButtons$LAYOUT() { return tagRAWMOUSE$ulRawButtons$LAYOUT_; }

    static final VarHandle tagRAWMOUSE$ulRawButtons$VH_ = tagRAWMOUSE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulRawButtons"));
    static final java.lang.invoke.VarHandle tagRAWMOUSE$ulRawButtons$VH() { return tagRAWMOUSE$ulRawButtons$VH_; }

    static final MemoryLayout tagRAWMOUSE$lLastX$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRAWMOUSE$lLastX$LAYOUT() { return tagRAWMOUSE$lLastX$LAYOUT_; }

    static final VarHandle tagRAWMOUSE$lLastX$VH_ = tagRAWMOUSE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lLastX"));
    static final java.lang.invoke.VarHandle tagRAWMOUSE$lLastX$VH() { return tagRAWMOUSE$lLastX$VH_; }

    static final MemoryLayout tagRAWMOUSE$lLastY$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRAWMOUSE$lLastY$LAYOUT() { return tagRAWMOUSE$lLastY$LAYOUT_; }

    static final VarHandle tagRAWMOUSE$lLastY$VH_ = tagRAWMOUSE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("lLastY"));
    static final java.lang.invoke.VarHandle tagRAWMOUSE$lLastY$VH() { return tagRAWMOUSE$lLastY$VH_; }

    static final MemoryLayout tagRAWMOUSE$ulExtraInformation$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRAWMOUSE$ulExtraInformation$LAYOUT() { return tagRAWMOUSE$ulExtraInformation$LAYOUT_; }

    static final VarHandle tagRAWMOUSE$ulExtraInformation$VH_ = tagRAWMOUSE$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ulExtraInformation"));
    static final java.lang.invoke.VarHandle tagRAWMOUSE$ulExtraInformation$VH() { return tagRAWMOUSE$ulExtraInformation$VH_; }

    static final MemoryLayout tagRAWKEYBOARD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("MakeCode"),
        C_SHORT.withName("Flags"),
        C_SHORT.withName("Reserved"),
        C_SHORT.withName("VKey"),
        C_INT.withName("Message"),
        C_LONG.withName("ExtraInformation")
    ).withName("tagRAWKEYBOARD");
    static final jdk.incubator.foreign.MemoryLayout tagRAWKEYBOARD$struct$LAYOUT() { return tagRAWKEYBOARD$struct$LAYOUT_; }

    static final MemoryLayout tagRAWKEYBOARD$MakeCode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagRAWKEYBOARD$MakeCode$LAYOUT() { return tagRAWKEYBOARD$MakeCode$LAYOUT_; }

    static final VarHandle tagRAWKEYBOARD$MakeCode$VH_ = tagRAWKEYBOARD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("MakeCode"));
    static final java.lang.invoke.VarHandle tagRAWKEYBOARD$MakeCode$VH() { return tagRAWKEYBOARD$MakeCode$VH_; }

    static final MemoryLayout tagRAWKEYBOARD$Flags$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagRAWKEYBOARD$Flags$LAYOUT() { return tagRAWKEYBOARD$Flags$LAYOUT_; }

    static final VarHandle tagRAWKEYBOARD$Flags$VH_ = tagRAWKEYBOARD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Flags"));
    static final java.lang.invoke.VarHandle tagRAWKEYBOARD$Flags$VH() { return tagRAWKEYBOARD$Flags$VH_; }

    static final MemoryLayout tagRAWKEYBOARD$Reserved$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagRAWKEYBOARD$Reserved$LAYOUT() { return tagRAWKEYBOARD$Reserved$LAYOUT_; }

    static final VarHandle tagRAWKEYBOARD$Reserved$VH_ = tagRAWKEYBOARD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Reserved"));
    static final java.lang.invoke.VarHandle tagRAWKEYBOARD$Reserved$VH() { return tagRAWKEYBOARD$Reserved$VH_; }

    static final MemoryLayout tagRAWKEYBOARD$VKey$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout tagRAWKEYBOARD$VKey$LAYOUT() { return tagRAWKEYBOARD$VKey$LAYOUT_; }

    static final VarHandle tagRAWKEYBOARD$VKey$VH_ = tagRAWKEYBOARD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("VKey"));
    static final java.lang.invoke.VarHandle tagRAWKEYBOARD$VKey$VH() { return tagRAWKEYBOARD$VKey$VH_; }

    static final MemoryLayout tagRAWKEYBOARD$Message$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout tagRAWKEYBOARD$Message$LAYOUT() { return tagRAWKEYBOARD$Message$LAYOUT_; }

    static final VarHandle tagRAWKEYBOARD$Message$VH_ = tagRAWKEYBOARD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("Message"));
    static final java.lang.invoke.VarHandle tagRAWKEYBOARD$Message$VH() { return tagRAWKEYBOARD$Message$VH_; }

    static final MemoryLayout tagRAWKEYBOARD$ExtraInformation$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagRAWKEYBOARD$ExtraInformation$LAYOUT() { return tagRAWKEYBOARD$ExtraInformation$LAYOUT_; }

    static final VarHandle tagRAWKEYBOARD$ExtraInformation$VH_ = tagRAWKEYBOARD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ExtraInformation"));
    static final java.lang.invoke.VarHandle tagRAWKEYBOARD$ExtraInformation$VH() { return tagRAWKEYBOARD$ExtraInformation$VH_; }

}

