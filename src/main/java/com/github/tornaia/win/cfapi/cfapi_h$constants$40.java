// Generated by jextract

package com.github.tornaia.win.cfapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class cfapi_h$constants$40 extends cfapi_h$constants$39 {

    /* package-private */ cfapi_h$constants$40() {}
    static final FunctionDescriptor EnumTimeFormatsEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumTimeFormatsEx$FUNC() { return EnumTimeFormatsEx$FUNC_; }

    static final MethodHandle EnumTimeFormatsEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumTimeFormatsEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I",
        EnumTimeFormatsEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumTimeFormatsEx$MH() { return EnumTimeFormatsEx$MH_; }

    static final FunctionDescriptor EnumTimeFormatsEx$lpTimeFmtEnumProcEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumTimeFormatsEx$lpTimeFmtEnumProcEx$FUNC() { return EnumTimeFormatsEx$lpTimeFmtEnumProcEx$FUNC_; }

    static final FunctionDescriptor EnumSystemLocalesEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONGLONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumSystemLocalesEx$FUNC() { return EnumSystemLocalesEx$FUNC_; }

    static final MethodHandle EnumSystemLocalesEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "EnumSystemLocalesEx",
        "(Ljdk/incubator/foreign/MemoryAddress;IJLjdk/incubator/foreign/MemoryAddress;)I",
        EnumSystemLocalesEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle EnumSystemLocalesEx$MH() { return EnumSystemLocalesEx$MH_; }

    static final FunctionDescriptor EnumSystemLocalesEx$lpLocaleEnumProcEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONGLONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor EnumSystemLocalesEx$lpLocaleEnumProcEx$FUNC() { return EnumSystemLocalesEx$lpLocaleEnumProcEx$FUNC_; }

    static final FunctionDescriptor ResolveLocaleName$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor ResolveLocaleName$FUNC() { return ResolveLocaleName$FUNC_; }

    static final MethodHandle ResolveLocaleName$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResolveLocaleName",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        ResolveLocaleName$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ResolveLocaleName$MH() { return ResolveLocaleName$MH_; }

    static final MemoryLayout _COORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("X"),
        C_SHORT.withName("Y")
    ).withName("_COORD");
    static final jdk.incubator.foreign.MemoryLayout _COORD$struct$LAYOUT() { return _COORD$struct$LAYOUT_; }

    static final MemoryLayout _COORD$X$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COORD$X$LAYOUT() { return _COORD$X$LAYOUT_; }

    static final VarHandle _COORD$X$VH_ = _COORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("X"));
    static final java.lang.invoke.VarHandle _COORD$X$VH() { return _COORD$X$VH_; }

    static final MemoryLayout _COORD$Y$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _COORD$Y$LAYOUT() { return _COORD$Y$LAYOUT_; }

    static final VarHandle _COORD$Y$VH_ = _COORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Y"));
    static final java.lang.invoke.VarHandle _COORD$Y$VH() { return _COORD$Y$VH_; }

    static final MemoryLayout _SMALL_RECT$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("Left"),
        C_SHORT.withName("Top"),
        C_SHORT.withName("Right"),
        C_SHORT.withName("Bottom")
    ).withName("_SMALL_RECT");
    static final jdk.incubator.foreign.MemoryLayout _SMALL_RECT$struct$LAYOUT() { return _SMALL_RECT$struct$LAYOUT_; }

    static final MemoryLayout _SMALL_RECT$Left$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SMALL_RECT$Left$LAYOUT() { return _SMALL_RECT$Left$LAYOUT_; }

    static final VarHandle _SMALL_RECT$Left$VH_ = _SMALL_RECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Left"));
    static final java.lang.invoke.VarHandle _SMALL_RECT$Left$VH() { return _SMALL_RECT$Left$VH_; }

    static final MemoryLayout _SMALL_RECT$Top$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SMALL_RECT$Top$LAYOUT() { return _SMALL_RECT$Top$LAYOUT_; }

    static final VarHandle _SMALL_RECT$Top$VH_ = _SMALL_RECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Top"));
    static final java.lang.invoke.VarHandle _SMALL_RECT$Top$VH() { return _SMALL_RECT$Top$VH_; }

    static final MemoryLayout _SMALL_RECT$Right$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SMALL_RECT$Right$LAYOUT() { return _SMALL_RECT$Right$LAYOUT_; }

    static final VarHandle _SMALL_RECT$Right$VH_ = _SMALL_RECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Right"));
    static final java.lang.invoke.VarHandle _SMALL_RECT$Right$VH() { return _SMALL_RECT$Right$VH_; }

    static final MemoryLayout _SMALL_RECT$Bottom$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _SMALL_RECT$Bottom$LAYOUT() { return _SMALL_RECT$Bottom$LAYOUT_; }

    static final VarHandle _SMALL_RECT$Bottom$VH_ = _SMALL_RECT$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Bottom"));
    static final java.lang.invoke.VarHandle _SMALL_RECT$Bottom$VH() { return _SMALL_RECT$Bottom$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("bKeyDown"),
        C_SHORT.withName("wRepeatCount"),
        C_SHORT.withName("wVirtualKeyCode"),
        C_SHORT.withName("wVirtualScanCode"),
        MemoryLayout.ofUnion(
            C_SHORT.withName("UnicodeChar"),
            C_CHAR.withName("AsciiChar")
        ).withName("uChar"),
        C_LONG.withName("dwControlKeyState")
    ).withName("_KEY_EVENT_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$struct$LAYOUT() { return _KEY_EVENT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _KEY_EVENT_RECORD$bKeyDown$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$bKeyDown$LAYOUT() { return _KEY_EVENT_RECORD$bKeyDown$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$bKeyDown$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bKeyDown"));
    static final java.lang.invoke.VarHandle _KEY_EVENT_RECORD$bKeyDown$VH() { return _KEY_EVENT_RECORD$bKeyDown$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$wRepeatCount$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$wRepeatCount$LAYOUT() { return _KEY_EVENT_RECORD$wRepeatCount$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$wRepeatCount$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wRepeatCount"));
    static final java.lang.invoke.VarHandle _KEY_EVENT_RECORD$wRepeatCount$VH() { return _KEY_EVENT_RECORD$wRepeatCount$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$wVirtualKeyCode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$wVirtualKeyCode$LAYOUT() { return _KEY_EVENT_RECORD$wVirtualKeyCode$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$wVirtualKeyCode$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wVirtualKeyCode"));
    static final java.lang.invoke.VarHandle _KEY_EVENT_RECORD$wVirtualKeyCode$VH() { return _KEY_EVENT_RECORD$wVirtualKeyCode$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$wVirtualScanCode$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$wVirtualScanCode$LAYOUT() { return _KEY_EVENT_RECORD$wVirtualScanCode$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$wVirtualScanCode$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wVirtualScanCode"));
    static final java.lang.invoke.VarHandle _KEY_EVENT_RECORD$wVirtualScanCode$VH() { return _KEY_EVENT_RECORD$wVirtualScanCode$VH_; }

    static final MemoryLayout uChar$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_SHORT.withName("UnicodeChar"),
        C_CHAR.withName("AsciiChar")
    );
    static final jdk.incubator.foreign.MemoryLayout uChar$struct$LAYOUT() { return uChar$struct$LAYOUT_; }

    static final MemoryLayout uChar$UnicodeChar$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout uChar$UnicodeChar$LAYOUT() { return uChar$UnicodeChar$LAYOUT_; }

    static final VarHandle uChar$UnicodeChar$VH_ = uChar$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("UnicodeChar"));
    static final java.lang.invoke.VarHandle uChar$UnicodeChar$VH() { return uChar$UnicodeChar$VH_; }

    static final MemoryLayout uChar$AsciiChar$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout uChar$AsciiChar$LAYOUT() { return uChar$AsciiChar$LAYOUT_; }

    static final VarHandle uChar$AsciiChar$VH_ = uChar$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AsciiChar"));
    static final java.lang.invoke.VarHandle uChar$AsciiChar$VH() { return uChar$AsciiChar$VH_; }

    static final MemoryLayout _KEY_EVENT_RECORD$dwControlKeyState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _KEY_EVENT_RECORD$dwControlKeyState$LAYOUT() { return _KEY_EVENT_RECORD$dwControlKeyState$LAYOUT_; }

    static final VarHandle _KEY_EVENT_RECORD$dwControlKeyState$VH_ = _KEY_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwControlKeyState"));
    static final java.lang.invoke.VarHandle _KEY_EVENT_RECORD$dwControlKeyState$VH() { return _KEY_EVENT_RECORD$dwControlKeyState$VH_; }

    static final MemoryLayout _MOUSE_EVENT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwMousePosition"),
        C_LONG.withName("dwButtonState"),
        C_LONG.withName("dwControlKeyState"),
        C_LONG.withName("dwEventFlags")
    ).withName("_MOUSE_EVENT_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _MOUSE_EVENT_RECORD$struct$LAYOUT() { return _MOUSE_EVENT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _MOUSE_EVENT_RECORD$dwButtonState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MOUSE_EVENT_RECORD$dwButtonState$LAYOUT() { return _MOUSE_EVENT_RECORD$dwButtonState$LAYOUT_; }

    static final VarHandle _MOUSE_EVENT_RECORD$dwButtonState$VH_ = _MOUSE_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwButtonState"));
    static final java.lang.invoke.VarHandle _MOUSE_EVENT_RECORD$dwButtonState$VH() { return _MOUSE_EVENT_RECORD$dwButtonState$VH_; }

    static final MemoryLayout _MOUSE_EVENT_RECORD$dwControlKeyState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MOUSE_EVENT_RECORD$dwControlKeyState$LAYOUT() { return _MOUSE_EVENT_RECORD$dwControlKeyState$LAYOUT_; }

    static final VarHandle _MOUSE_EVENT_RECORD$dwControlKeyState$VH_ = _MOUSE_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwControlKeyState"));
    static final java.lang.invoke.VarHandle _MOUSE_EVENT_RECORD$dwControlKeyState$VH() { return _MOUSE_EVENT_RECORD$dwControlKeyState$VH_; }

    static final MemoryLayout _MOUSE_EVENT_RECORD$dwEventFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _MOUSE_EVENT_RECORD$dwEventFlags$LAYOUT() { return _MOUSE_EVENT_RECORD$dwEventFlags$LAYOUT_; }

    static final VarHandle _MOUSE_EVENT_RECORD$dwEventFlags$VH_ = _MOUSE_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwEventFlags"));
    static final java.lang.invoke.VarHandle _MOUSE_EVENT_RECORD$dwEventFlags$VH() { return _MOUSE_EVENT_RECORD$dwEventFlags$VH_; }

    static final MemoryLayout _WINDOW_BUFFER_SIZE_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwSize")
    ).withName("_WINDOW_BUFFER_SIZE_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _WINDOW_BUFFER_SIZE_RECORD$struct$LAYOUT() { return _WINDOW_BUFFER_SIZE_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _MENU_EVENT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("dwCommandId")
    ).withName("_MENU_EVENT_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _MENU_EVENT_RECORD$struct$LAYOUT() { return _MENU_EVENT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _MENU_EVENT_RECORD$dwCommandId$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _MENU_EVENT_RECORD$dwCommandId$LAYOUT() { return _MENU_EVENT_RECORD$dwCommandId$LAYOUT_; }

    static final VarHandle _MENU_EVENT_RECORD$dwCommandId$VH_ = _MENU_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCommandId"));
    static final java.lang.invoke.VarHandle _MENU_EVENT_RECORD$dwCommandId$VH() { return _MENU_EVENT_RECORD$dwCommandId$VH_; }

    static final MemoryLayout _FOCUS_EVENT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("bSetFocus")
    ).withName("_FOCUS_EVENT_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _FOCUS_EVENT_RECORD$struct$LAYOUT() { return _FOCUS_EVENT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _FOCUS_EVENT_RECORD$bSetFocus$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _FOCUS_EVENT_RECORD$bSetFocus$LAYOUT() { return _FOCUS_EVENT_RECORD$bSetFocus$LAYOUT_; }

    static final VarHandle _FOCUS_EVENT_RECORD$bSetFocus$VH_ = _FOCUS_EVENT_RECORD$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bSetFocus"));
    static final java.lang.invoke.VarHandle _FOCUS_EVENT_RECORD$bSetFocus$VH() { return _FOCUS_EVENT_RECORD$bSetFocus$VH_; }

    static final MemoryLayout _INPUT_RECORD$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_SHORT.withName("EventType"),
        MemoryLayout.ofPaddingBits(16),
        MemoryLayout.ofUnion(
            MemoryLayout.ofStruct(
                C_INT.withName("bKeyDown"),
                C_SHORT.withName("wRepeatCount"),
                C_SHORT.withName("wVirtualKeyCode"),
                C_SHORT.withName("wVirtualScanCode"),
                MemoryLayout.ofUnion(
                    C_SHORT.withName("UnicodeChar"),
                    C_CHAR.withName("AsciiChar")
                ).withName("uChar"),
                C_LONG.withName("dwControlKeyState")
            ).withName("KeyEvent"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofStruct(
                    C_SHORT.withName("X"),
                    C_SHORT.withName("Y")
                ).withName("dwMousePosition"),
                C_LONG.withName("dwButtonState"),
                C_LONG.withName("dwControlKeyState"),
                C_LONG.withName("dwEventFlags")
            ).withName("MouseEvent"),
            MemoryLayout.ofStruct(
                MemoryLayout.ofStruct(
                    C_SHORT.withName("X"),
                    C_SHORT.withName("Y")
                ).withName("dwSize")
            ).withName("WindowBufferSizeEvent"),
            MemoryLayout.ofStruct(
                C_INT.withName("dwCommandId")
            ).withName("MenuEvent"),
            MemoryLayout.ofStruct(
                C_INT.withName("bSetFocus")
            ).withName("FocusEvent")
        ).withName("Event")
    ).withName("_INPUT_RECORD");
    static final jdk.incubator.foreign.MemoryLayout _INPUT_RECORD$struct$LAYOUT() { return _INPUT_RECORD$struct$LAYOUT_; }

    static final MemoryLayout _INPUT_RECORD$EventType$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _INPUT_RECORD$EventType$LAYOUT() { return _INPUT_RECORD$EventType$LAYOUT_; }

    static final VarHandle _INPUT_RECORD$EventType$VH_ = _INPUT_RECORD$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("EventType"));
    static final java.lang.invoke.VarHandle _INPUT_RECORD$EventType$VH() { return _INPUT_RECORD$EventType$VH_; }

    static final MemoryLayout Event$struct$LAYOUT_ = MemoryLayout.ofUnion(
        MemoryLayout.ofStruct(
            C_INT.withName("bKeyDown"),
            C_SHORT.withName("wRepeatCount"),
            C_SHORT.withName("wVirtualKeyCode"),
            C_SHORT.withName("wVirtualScanCode"),
            MemoryLayout.ofUnion(
                C_SHORT.withName("UnicodeChar"),
                C_CHAR.withName("AsciiChar")
            ).withName("uChar"),
            C_LONG.withName("dwControlKeyState")
        ).withName("KeyEvent"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_SHORT.withName("X"),
                C_SHORT.withName("Y")
            ).withName("dwMousePosition"),
            C_LONG.withName("dwButtonState"),
            C_LONG.withName("dwControlKeyState"),
            C_LONG.withName("dwEventFlags")
        ).withName("MouseEvent"),
        MemoryLayout.ofStruct(
            MemoryLayout.ofStruct(
                C_SHORT.withName("X"),
                C_SHORT.withName("Y")
            ).withName("dwSize")
        ).withName("WindowBufferSizeEvent"),
        MemoryLayout.ofStruct(
            C_INT.withName("dwCommandId")
        ).withName("MenuEvent"),
        MemoryLayout.ofStruct(
            C_INT.withName("bSetFocus")
        ).withName("FocusEvent")
    );
    static final jdk.incubator.foreign.MemoryLayout Event$struct$LAYOUT() { return Event$struct$LAYOUT_; }

    static final MemoryLayout _CHAR_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofUnion(
            C_SHORT.withName("UnicodeChar"),
            C_CHAR.withName("AsciiChar")
        ).withName("Char"),
        C_SHORT.withName("Attributes")
    ).withName("_CHAR_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CHAR_INFO$struct$LAYOUT() { return _CHAR_INFO$struct$LAYOUT_; }

    static final MemoryLayout Char$struct$LAYOUT_ = MemoryLayout.ofUnion(
        C_SHORT.withName("UnicodeChar"),
        C_CHAR.withName("AsciiChar")
    );
    static final jdk.incubator.foreign.MemoryLayout Char$struct$LAYOUT() { return Char$struct$LAYOUT_; }

    static final MemoryLayout Char$UnicodeChar$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout Char$UnicodeChar$LAYOUT() { return Char$UnicodeChar$LAYOUT_; }

    static final VarHandle Char$UnicodeChar$VH_ = Char$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("UnicodeChar"));
    static final java.lang.invoke.VarHandle Char$UnicodeChar$VH() { return Char$UnicodeChar$VH_; }

    static final MemoryLayout Char$AsciiChar$LAYOUT_ = C_CHAR;
    static final jdk.incubator.foreign.MemoryLayout Char$AsciiChar$LAYOUT() { return Char$AsciiChar$LAYOUT_; }

    static final VarHandle Char$AsciiChar$VH_ = Char$struct$LAYOUT_.varHandle(byte.class, MemoryLayout.PathElement.groupElement("AsciiChar"));
    static final java.lang.invoke.VarHandle Char$AsciiChar$VH() { return Char$AsciiChar$VH_; }

    static final MemoryLayout _CHAR_INFO$Attributes$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CHAR_INFO$Attributes$LAYOUT() { return _CHAR_INFO$Attributes$LAYOUT_; }

    static final VarHandle _CHAR_INFO$Attributes$VH_ = _CHAR_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("Attributes"));
    static final java.lang.invoke.VarHandle _CHAR_INFO$Attributes$VH() { return _CHAR_INFO$Attributes$VH_; }

    static final MemoryLayout _CONSOLE_FONT_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("nFont"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwFontSize")
    ).withName("_CONSOLE_FONT_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_FONT_INFO$struct$LAYOUT() { return _CONSOLE_FONT_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_FONT_INFO$nFont$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_FONT_INFO$nFont$LAYOUT() { return _CONSOLE_FONT_INFO$nFont$LAYOUT_; }

    static final VarHandle _CONSOLE_FONT_INFO$nFont$VH_ = _CONSOLE_FONT_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFont"));
    static final java.lang.invoke.VarHandle _CONSOLE_FONT_INFO$nFont$VH() { return _CONSOLE_FONT_INFO$nFont$VH_; }

    static final FunctionDescriptor AllocConsole$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor AllocConsole$FUNC() { return AllocConsole$FUNC_; }

    static final MethodHandle AllocConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AllocConsole",
        "()I",
        AllocConsole$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AllocConsole$MH() { return AllocConsole$MH_; }

    static final FunctionDescriptor FreeConsole$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor FreeConsole$FUNC() { return FreeConsole$FUNC_; }

    static final MethodHandle FreeConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FreeConsole",
        "()I",
        FreeConsole$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FreeConsole$MH() { return FreeConsole$MH_; }

    static final FunctionDescriptor AttachConsole$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor AttachConsole$FUNC() { return AttachConsole$FUNC_; }

    static final MethodHandle AttachConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AttachConsole",
        "(I)I",
        AttachConsole$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AttachConsole$MH() { return AttachConsole$MH_; }

    static final FunctionDescriptor GetConsoleCP$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleCP$FUNC() { return GetConsoleCP$FUNC_; }

    static final MethodHandle GetConsoleCP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleCP",
        "()I",
        GetConsoleCP$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleCP$MH() { return GetConsoleCP$MH_; }

    static final FunctionDescriptor GetConsoleOutputCP$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleOutputCP$FUNC() { return GetConsoleOutputCP$FUNC_; }

    static final MethodHandle GetConsoleOutputCP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleOutputCP",
        "()I",
        GetConsoleOutputCP$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleOutputCP$MH() { return GetConsoleOutputCP$MH_; }

    static final FunctionDescriptor GetConsoleMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleMode$FUNC() { return GetConsoleMode$FUNC_; }

    static final MethodHandle GetConsoleMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleMode",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleMode$MH() { return GetConsoleMode$MH_; }

    static final FunctionDescriptor SetConsoleMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleMode$FUNC() { return SetConsoleMode$FUNC_; }

    static final MethodHandle SetConsoleMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleMode",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetConsoleMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleMode$MH() { return SetConsoleMode$MH_; }

    static final FunctionDescriptor GetNumberOfConsoleInputEvents$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetNumberOfConsoleInputEvents$FUNC() { return GetNumberOfConsoleInputEvents$FUNC_; }

    static final MethodHandle GetNumberOfConsoleInputEvents$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumberOfConsoleInputEvents",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNumberOfConsoleInputEvents$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetNumberOfConsoleInputEvents$MH() { return GetNumberOfConsoleInputEvents$MH_; }

    static final FunctionDescriptor ReadConsoleInputA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadConsoleInputA$FUNC() { return ReadConsoleInputA$FUNC_; }

    static final MethodHandle ReadConsoleInputA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleInputA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleInputA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadConsoleInputA$MH() { return ReadConsoleInputA$MH_; }

    static final FunctionDescriptor ReadConsoleInputW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadConsoleInputW$FUNC() { return ReadConsoleInputW$FUNC_; }

    static final MethodHandle ReadConsoleInputW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleInputW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleInputW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadConsoleInputW$MH() { return ReadConsoleInputW$MH_; }

    static final FunctionDescriptor PeekConsoleInputA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PeekConsoleInputA$FUNC() { return PeekConsoleInputA$FUNC_; }

    static final MethodHandle PeekConsoleInputA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PeekConsoleInputA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        PeekConsoleInputA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PeekConsoleInputA$MH() { return PeekConsoleInputA$MH_; }

    static final FunctionDescriptor PeekConsoleInputW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor PeekConsoleInputW$FUNC() { return PeekConsoleInputW$FUNC_; }

    static final MethodHandle PeekConsoleInputW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "PeekConsoleInputW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        PeekConsoleInputW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle PeekConsoleInputW$MH() { return PeekConsoleInputW$MH_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("nLength"),
        C_LONG.withName("nInitialChars"),
        C_LONG.withName("dwCtrlWakeupMask"),
        C_LONG.withName("dwControlKeyState")
    ).withName("_CONSOLE_READCONSOLE_CONTROL");
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$nLength$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$nLength$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$nLength$LAYOUT_; }

    static final VarHandle _CONSOLE_READCONSOLE_CONTROL$nLength$VH_ = _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nLength"));
    static final java.lang.invoke.VarHandle _CONSOLE_READCONSOLE_CONTROL$nLength$VH() { return _CONSOLE_READCONSOLE_CONTROL$nLength$VH_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$nInitialChars$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$nInitialChars$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$nInitialChars$LAYOUT_; }

    static final VarHandle _CONSOLE_READCONSOLE_CONTROL$nInitialChars$VH_ = _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nInitialChars"));
    static final java.lang.invoke.VarHandle _CONSOLE_READCONSOLE_CONTROL$nInitialChars$VH() { return _CONSOLE_READCONSOLE_CONTROL$nInitialChars$VH_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$LAYOUT_; }

    static final VarHandle _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$VH_ = _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwCtrlWakeupMask"));
    static final java.lang.invoke.VarHandle _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$VH() { return _CONSOLE_READCONSOLE_CONTROL$dwCtrlWakeupMask$VH_; }

    static final MemoryLayout _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$LAYOUT() { return _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$LAYOUT_; }

    static final VarHandle _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$VH_ = _CONSOLE_READCONSOLE_CONTROL$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwControlKeyState"));
    static final java.lang.invoke.VarHandle _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$VH() { return _CONSOLE_READCONSOLE_CONTROL$dwControlKeyState$VH_; }

    static final FunctionDescriptor ReadConsoleA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadConsoleA$FUNC() { return ReadConsoleA$FUNC_; }

    static final MethodHandle ReadConsoleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadConsoleA$MH() { return ReadConsoleA$MH_; }

    static final FunctionDescriptor ReadConsoleW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadConsoleW$FUNC() { return ReadConsoleW$FUNC_; }

    static final MethodHandle ReadConsoleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadConsoleW$MH() { return ReadConsoleW$MH_; }

    static final FunctionDescriptor WriteConsoleA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteConsoleA$FUNC() { return WriteConsoleA$FUNC_; }

    static final MethodHandle WriteConsoleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteConsoleA$MH() { return WriteConsoleA$MH_; }

    static final FunctionDescriptor WriteConsoleW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteConsoleW$FUNC() { return WriteConsoleW$FUNC_; }

    static final MethodHandle WriteConsoleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteConsoleW$MH() { return WriteConsoleW$MH_; }

    static final FunctionDescriptor SetConsoleCtrlHandler$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleCtrlHandler$FUNC() { return SetConsoleCtrlHandler$FUNC_; }

    static final MethodHandle SetConsoleCtrlHandler$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleCtrlHandler",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        SetConsoleCtrlHandler$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleCtrlHandler$MH() { return SetConsoleCtrlHandler$MH_; }

    static final FunctionDescriptor SetConsoleCtrlHandler$HandlerRoutine$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleCtrlHandler$HandlerRoutine$FUNC() { return SetConsoleCtrlHandler$HandlerRoutine$FUNC_; }

    static final FunctionDescriptor CreatePseudoConsole$FUNC_ = FunctionDescriptor.of(C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreatePseudoConsole$FUNC() { return CreatePseudoConsole$FUNC_; }

    static final MethodHandle CreatePseudoConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreatePseudoConsole",
        "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        CreatePseudoConsole$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreatePseudoConsole$MH() { return CreatePseudoConsole$MH_; }

    static final FunctionDescriptor ResizePseudoConsole$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD")
    );
    static final jdk.incubator.foreign.FunctionDescriptor ResizePseudoConsole$FUNC() { return ResizePseudoConsole$FUNC_; }

    static final MethodHandle ResizePseudoConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ResizePseudoConsole",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        ResizePseudoConsole$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ResizePseudoConsole$MH() { return ResizePseudoConsole$MH_; }

    static final FunctionDescriptor ClosePseudoConsole$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ClosePseudoConsole$FUNC() { return ClosePseudoConsole$FUNC_; }

    static final MethodHandle ClosePseudoConsole$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ClosePseudoConsole",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        ClosePseudoConsole$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ClosePseudoConsole$MH() { return ClosePseudoConsole$MH_; }

    static final FunctionDescriptor FillConsoleOutputCharacterA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_CHAR,
        C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FillConsoleOutputCharacterA$FUNC() { return FillConsoleOutputCharacterA$FUNC_; }

    static final MethodHandle FillConsoleOutputCharacterA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FillConsoleOutputCharacterA",
        "(Ljdk/incubator/foreign/MemoryAddress;BILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        FillConsoleOutputCharacterA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FillConsoleOutputCharacterA$MH() { return FillConsoleOutputCharacterA$MH_; }

    static final FunctionDescriptor FillConsoleOutputCharacterW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FillConsoleOutputCharacterW$FUNC() { return FillConsoleOutputCharacterW$FUNC_; }

    static final MethodHandle FillConsoleOutputCharacterW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FillConsoleOutputCharacterW",
        "(Ljdk/incubator/foreign/MemoryAddress;SILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        FillConsoleOutputCharacterW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FillConsoleOutputCharacterW$MH() { return FillConsoleOutputCharacterW$MH_; }

    static final FunctionDescriptor FillConsoleOutputAttribute$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT,
        C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FillConsoleOutputAttribute$FUNC() { return FillConsoleOutputAttribute$FUNC_; }

    static final MethodHandle FillConsoleOutputAttribute$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FillConsoleOutputAttribute",
        "(Ljdk/incubator/foreign/MemoryAddress;SILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        FillConsoleOutputAttribute$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FillConsoleOutputAttribute$MH() { return FillConsoleOutputAttribute$MH_; }

    static final FunctionDescriptor GenerateConsoleCtrlEvent$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GenerateConsoleCtrlEvent$FUNC() { return GenerateConsoleCtrlEvent$FUNC_; }

    static final MethodHandle GenerateConsoleCtrlEvent$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GenerateConsoleCtrlEvent",
        "(II)I",
        GenerateConsoleCtrlEvent$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GenerateConsoleCtrlEvent$MH() { return GenerateConsoleCtrlEvent$MH_; }

    static final FunctionDescriptor CreateConsoleScreenBuffer$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor CreateConsoleScreenBuffer$FUNC() { return CreateConsoleScreenBuffer$FUNC_; }

    static final MethodHandle CreateConsoleScreenBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CreateConsoleScreenBuffer",
        "(IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        CreateConsoleScreenBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CreateConsoleScreenBuffer$MH() { return CreateConsoleScreenBuffer$MH_; }

    static final FunctionDescriptor SetConsoleActiveScreenBuffer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleActiveScreenBuffer$FUNC() { return SetConsoleActiveScreenBuffer$FUNC_; }

    static final MethodHandle SetConsoleActiveScreenBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleActiveScreenBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleActiveScreenBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleActiveScreenBuffer$MH() { return SetConsoleActiveScreenBuffer$MH_; }

    static final FunctionDescriptor FlushConsoleInputBuffer$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor FlushConsoleInputBuffer$FUNC() { return FlushConsoleInputBuffer$FUNC_; }

    static final MethodHandle FlushConsoleInputBuffer$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "FlushConsoleInputBuffer",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        FlushConsoleInputBuffer$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle FlushConsoleInputBuffer$MH() { return FlushConsoleInputBuffer$MH_; }

    static final FunctionDescriptor SetConsoleCP$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleCP$FUNC() { return SetConsoleCP$FUNC_; }

    static final MethodHandle SetConsoleCP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleCP",
        "(I)I",
        SetConsoleCP$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleCP$MH() { return SetConsoleCP$MH_; }

    static final FunctionDescriptor SetConsoleOutputCP$FUNC_ = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleOutputCP$FUNC() { return SetConsoleOutputCP$FUNC_; }

    static final MethodHandle SetConsoleOutputCP$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleOutputCP",
        "(I)I",
        SetConsoleOutputCP$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleOutputCP$MH() { return SetConsoleOutputCP$MH_; }

    static final MemoryLayout _CONSOLE_CURSOR_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwSize"),
        C_INT.withName("bVisible")
    ).withName("_CONSOLE_CURSOR_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_CURSOR_INFO$struct$LAYOUT() { return _CONSOLE_CURSOR_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_CURSOR_INFO$dwSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_CURSOR_INFO$dwSize$LAYOUT() { return _CONSOLE_CURSOR_INFO$dwSize$LAYOUT_; }

    static final VarHandle _CONSOLE_CURSOR_INFO$dwSize$VH_ = _CONSOLE_CURSOR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSize"));
    static final java.lang.invoke.VarHandle _CONSOLE_CURSOR_INFO$dwSize$VH() { return _CONSOLE_CURSOR_INFO$dwSize$VH_; }

    static final MemoryLayout _CONSOLE_CURSOR_INFO$bVisible$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_CURSOR_INFO$bVisible$LAYOUT() { return _CONSOLE_CURSOR_INFO$bVisible$LAYOUT_; }

    static final VarHandle _CONSOLE_CURSOR_INFO$bVisible$VH_ = _CONSOLE_CURSOR_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bVisible"));
    static final java.lang.invoke.VarHandle _CONSOLE_CURSOR_INFO$bVisible$VH() { return _CONSOLE_CURSOR_INFO$bVisible$VH_; }

    static final FunctionDescriptor GetConsoleCursorInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleCursorInfo$FUNC() { return GetConsoleCursorInfo$FUNC_; }

    static final MethodHandle GetConsoleCursorInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleCursorInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleCursorInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleCursorInfo$MH() { return GetConsoleCursorInfo$MH_; }

    static final FunctionDescriptor SetConsoleCursorInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleCursorInfo$FUNC() { return SetConsoleCursorInfo$FUNC_; }

    static final MethodHandle SetConsoleCursorInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleCursorInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleCursorInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleCursorInfo$MH() { return SetConsoleCursorInfo$MH_; }

    static final MemoryLayout _CONSOLE_SCREEN_BUFFER_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwSize"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwCursorPosition"),
        C_SHORT.withName("wAttributes"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Left"),
            C_SHORT.withName("Top"),
            C_SHORT.withName("Right"),
            C_SHORT.withName("Bottom")
        ).withName("srWindow"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwMaximumWindowSize")
    ).withName("_CONSOLE_SCREEN_BUFFER_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_SCREEN_BUFFER_INFO$struct$LAYOUT() { return _CONSOLE_SCREEN_BUFFER_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_SCREEN_BUFFER_INFO$wAttributes$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_SCREEN_BUFFER_INFO$wAttributes$LAYOUT() { return _CONSOLE_SCREEN_BUFFER_INFO$wAttributes$LAYOUT_; }

    static final VarHandle _CONSOLE_SCREEN_BUFFER_INFO$wAttributes$VH_ = _CONSOLE_SCREEN_BUFFER_INFO$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wAttributes"));
    static final java.lang.invoke.VarHandle _CONSOLE_SCREEN_BUFFER_INFO$wAttributes$VH() { return _CONSOLE_SCREEN_BUFFER_INFO$wAttributes$VH_; }

    static final FunctionDescriptor GetConsoleScreenBufferInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleScreenBufferInfo$FUNC() { return GetConsoleScreenBufferInfo$FUNC_; }

    static final MethodHandle GetConsoleScreenBufferInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleScreenBufferInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleScreenBufferInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleScreenBufferInfo$MH() { return GetConsoleScreenBufferInfo$MH_; }

    static final MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwSize"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwCursorPosition"),
        C_SHORT.withName("wAttributes"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Left"),
            C_SHORT.withName("Top"),
            C_SHORT.withName("Right"),
            C_SHORT.withName("Bottom")
        ).withName("srWindow"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwMaximumWindowSize"),
        C_SHORT.withName("wPopupAttributes"),
        C_INT.withName("bFullscreenSupported"),
        MemoryLayout.ofSequence(16, C_LONG).withName("ColorTable")
    ).withName("_CONSOLE_SCREEN_BUFFER_INFOEX");
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$struct$LAYOUT() { return _CONSOLE_SCREEN_BUFFER_INFOEX$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$cbSize$LAYOUT() { return _CONSOLE_SCREEN_BUFFER_INFOEX$cbSize$LAYOUT_; }

    static final VarHandle _CONSOLE_SCREEN_BUFFER_INFOEX$cbSize$VH_ = _CONSOLE_SCREEN_BUFFER_INFOEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CONSOLE_SCREEN_BUFFER_INFOEX$cbSize$VH() { return _CONSOLE_SCREEN_BUFFER_INFOEX$cbSize$VH_; }

    static final MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$wAttributes$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$wAttributes$LAYOUT() { return _CONSOLE_SCREEN_BUFFER_INFOEX$wAttributes$LAYOUT_; }

    static final VarHandle _CONSOLE_SCREEN_BUFFER_INFOEX$wAttributes$VH_ = _CONSOLE_SCREEN_BUFFER_INFOEX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wAttributes"));
    static final java.lang.invoke.VarHandle _CONSOLE_SCREEN_BUFFER_INFOEX$wAttributes$VH() { return _CONSOLE_SCREEN_BUFFER_INFOEX$wAttributes$VH_; }

    static final MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$wPopupAttributes$LAYOUT_ = C_SHORT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$wPopupAttributes$LAYOUT() { return _CONSOLE_SCREEN_BUFFER_INFOEX$wPopupAttributes$LAYOUT_; }

    static final VarHandle _CONSOLE_SCREEN_BUFFER_INFOEX$wPopupAttributes$VH_ = _CONSOLE_SCREEN_BUFFER_INFOEX$struct$LAYOUT_.varHandle(short.class, MemoryLayout.PathElement.groupElement("wPopupAttributes"));
    static final java.lang.invoke.VarHandle _CONSOLE_SCREEN_BUFFER_INFOEX$wPopupAttributes$VH() { return _CONSOLE_SCREEN_BUFFER_INFOEX$wPopupAttributes$VH_; }

    static final MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$bFullscreenSupported$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_SCREEN_BUFFER_INFOEX$bFullscreenSupported$LAYOUT() { return _CONSOLE_SCREEN_BUFFER_INFOEX$bFullscreenSupported$LAYOUT_; }

    static final VarHandle _CONSOLE_SCREEN_BUFFER_INFOEX$bFullscreenSupported$VH_ = _CONSOLE_SCREEN_BUFFER_INFOEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("bFullscreenSupported"));
    static final java.lang.invoke.VarHandle _CONSOLE_SCREEN_BUFFER_INFOEX$bFullscreenSupported$VH() { return _CONSOLE_SCREEN_BUFFER_INFOEX$bFullscreenSupported$VH_; }

    static final FunctionDescriptor GetConsoleScreenBufferInfoEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleScreenBufferInfoEx$FUNC() { return GetConsoleScreenBufferInfoEx$FUNC_; }

    static final MethodHandle GetConsoleScreenBufferInfoEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleScreenBufferInfoEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleScreenBufferInfoEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleScreenBufferInfoEx$MH() { return GetConsoleScreenBufferInfoEx$MH_; }

    static final FunctionDescriptor SetConsoleScreenBufferInfoEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleScreenBufferInfoEx$FUNC() { return SetConsoleScreenBufferInfoEx$FUNC_; }

    static final MethodHandle SetConsoleScreenBufferInfoEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleScreenBufferInfoEx",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleScreenBufferInfoEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleScreenBufferInfoEx$MH() { return SetConsoleScreenBufferInfoEx$MH_; }

    static final FunctionDescriptor SetConsoleScreenBufferSize$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD")
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleScreenBufferSize$FUNC() { return SetConsoleScreenBufferSize$FUNC_; }

    static final MethodHandle SetConsoleScreenBufferSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleScreenBufferSize",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        SetConsoleScreenBufferSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleScreenBufferSize$MH() { return SetConsoleScreenBufferSize$MH_; }

    static final FunctionDescriptor SetConsoleCursorPosition$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD")
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleCursorPosition$FUNC() { return SetConsoleCursorPosition$FUNC_; }

    static final MethodHandle SetConsoleCursorPosition$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleCursorPosition",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
        SetConsoleCursorPosition$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleCursorPosition$MH() { return SetConsoleCursorPosition$MH_; }

    static final FunctionDescriptor GetLargestConsoleWindowSize$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_SHORT.withName("X"),
        C_SHORT.withName("Y")
    ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetLargestConsoleWindowSize$FUNC() { return GetLargestConsoleWindowSize$FUNC_; }

    static final MethodHandle GetLargestConsoleWindowSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetLargestConsoleWindowSize",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        GetLargestConsoleWindowSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetLargestConsoleWindowSize$MH() { return GetLargestConsoleWindowSize$MH_; }

    static final FunctionDescriptor SetConsoleTextAttribute$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_SHORT
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleTextAttribute$FUNC() { return SetConsoleTextAttribute$FUNC_; }

    static final MethodHandle SetConsoleTextAttribute$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleTextAttribute",
        "(Ljdk/incubator/foreign/MemoryAddress;S)I",
        SetConsoleTextAttribute$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleTextAttribute$MH() { return SetConsoleTextAttribute$MH_; }

    static final FunctionDescriptor SetConsoleWindowInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleWindowInfo$FUNC() { return SetConsoleWindowInfo$FUNC_; }

    static final MethodHandle SetConsoleWindowInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleWindowInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleWindowInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleWindowInfo$MH() { return SetConsoleWindowInfo$MH_; }

    static final FunctionDescriptor WriteConsoleOutputCharacterA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteConsoleOutputCharacterA$FUNC() { return WriteConsoleOutputCharacterA$FUNC_; }

    static final MethodHandle WriteConsoleOutputCharacterA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleOutputCharacterA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleOutputCharacterA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteConsoleOutputCharacterA$MH() { return WriteConsoleOutputCharacterA$MH_; }

    static final FunctionDescriptor WriteConsoleOutputCharacterW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteConsoleOutputCharacterW$FUNC() { return WriteConsoleOutputCharacterW$FUNC_; }

    static final MethodHandle WriteConsoleOutputCharacterW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleOutputCharacterW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleOutputCharacterW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteConsoleOutputCharacterW$MH() { return WriteConsoleOutputCharacterW$MH_; }

    static final FunctionDescriptor WriteConsoleOutputAttribute$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteConsoleOutputAttribute$FUNC() { return WriteConsoleOutputAttribute$FUNC_; }

    static final MethodHandle WriteConsoleOutputAttribute$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleOutputAttribute",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleOutputAttribute$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteConsoleOutputAttribute$MH() { return WriteConsoleOutputAttribute$MH_; }

    static final FunctionDescriptor ReadConsoleOutputCharacterA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadConsoleOutputCharacterA$FUNC() { return ReadConsoleOutputCharacterA$FUNC_; }

    static final MethodHandle ReadConsoleOutputCharacterA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleOutputCharacterA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleOutputCharacterA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadConsoleOutputCharacterA$MH() { return ReadConsoleOutputCharacterA$MH_; }

    static final FunctionDescriptor ReadConsoleOutputCharacterW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadConsoleOutputCharacterW$FUNC() { return ReadConsoleOutputCharacterW$FUNC_; }

    static final MethodHandle ReadConsoleOutputCharacterW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleOutputCharacterW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleOutputCharacterW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadConsoleOutputCharacterW$MH() { return ReadConsoleOutputCharacterW$MH_; }

    static final FunctionDescriptor ReadConsoleOutputAttribute$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadConsoleOutputAttribute$FUNC() { return ReadConsoleOutputAttribute$FUNC_; }

    static final MethodHandle ReadConsoleOutputAttribute$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleOutputAttribute",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleOutputAttribute$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadConsoleOutputAttribute$MH() { return ReadConsoleOutputAttribute$MH_; }

    static final FunctionDescriptor WriteConsoleInputA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteConsoleInputA$FUNC() { return WriteConsoleInputA$FUNC_; }

    static final MethodHandle WriteConsoleInputA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleInputA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleInputA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteConsoleInputA$MH() { return WriteConsoleInputA$MH_; }

    static final FunctionDescriptor WriteConsoleInputW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteConsoleInputW$FUNC() { return WriteConsoleInputW$FUNC_; }

    static final MethodHandle WriteConsoleInputW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleInputW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleInputW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteConsoleInputW$MH() { return WriteConsoleInputW$MH_; }

    static final FunctionDescriptor ScrollConsoleScreenBufferA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ScrollConsoleScreenBufferA$FUNC() { return ScrollConsoleScreenBufferA$FUNC_; }

    static final MethodHandle ScrollConsoleScreenBufferA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ScrollConsoleScreenBufferA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        ScrollConsoleScreenBufferA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ScrollConsoleScreenBufferA$MH() { return ScrollConsoleScreenBufferA$MH_; }

    static final FunctionDescriptor ScrollConsoleScreenBufferW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ScrollConsoleScreenBufferW$FUNC() { return ScrollConsoleScreenBufferW$FUNC_; }

    static final MethodHandle ScrollConsoleScreenBufferW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ScrollConsoleScreenBufferW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        ScrollConsoleScreenBufferW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ScrollConsoleScreenBufferW$MH() { return ScrollConsoleScreenBufferW$MH_; }

    static final FunctionDescriptor WriteConsoleOutputA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteConsoleOutputA$FUNC() { return WriteConsoleOutputA$FUNC_; }

    static final MethodHandle WriteConsoleOutputA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleOutputA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleOutputA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteConsoleOutputA$MH() { return WriteConsoleOutputA$MH_; }

    static final FunctionDescriptor WriteConsoleOutputW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WriteConsoleOutputW$FUNC() { return WriteConsoleOutputW$FUNC_; }

    static final MethodHandle WriteConsoleOutputW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WriteConsoleOutputW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        WriteConsoleOutputW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WriteConsoleOutputW$MH() { return WriteConsoleOutputW$MH_; }

    static final FunctionDescriptor ReadConsoleOutputA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadConsoleOutputA$FUNC() { return ReadConsoleOutputA$FUNC_; }

    static final MethodHandle ReadConsoleOutputA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleOutputA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleOutputA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadConsoleOutputA$MH() { return ReadConsoleOutputA$MH_; }

    static final FunctionDescriptor ReadConsoleOutputW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("_COORD"),
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ReadConsoleOutputW$FUNC() { return ReadConsoleOutputW$FUNC_; }

    static final MethodHandle ReadConsoleOutputW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ReadConsoleOutputW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)I",
        ReadConsoleOutputW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ReadConsoleOutputW$MH() { return ReadConsoleOutputW$MH_; }

    static final FunctionDescriptor GetConsoleTitleA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleTitleA$FUNC() { return GetConsoleTitleA$FUNC_; }

    static final MethodHandle GetConsoleTitleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleTitleA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetConsoleTitleA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleTitleA$MH() { return GetConsoleTitleA$MH_; }

    static final FunctionDescriptor GetConsoleTitleW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleTitleW$FUNC() { return GetConsoleTitleW$FUNC_; }

    static final MethodHandle GetConsoleTitleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleTitleW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetConsoleTitleW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleTitleW$MH() { return GetConsoleTitleW$MH_; }

    static final FunctionDescriptor GetConsoleOriginalTitleA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleOriginalTitleA$FUNC() { return GetConsoleOriginalTitleA$FUNC_; }

    static final MethodHandle GetConsoleOriginalTitleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleOriginalTitleA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetConsoleOriginalTitleA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleOriginalTitleA$MH() { return GetConsoleOriginalTitleA$MH_; }

    static final FunctionDescriptor GetConsoleOriginalTitleW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleOriginalTitleW$FUNC() { return GetConsoleOriginalTitleW$FUNC_; }

    static final MethodHandle GetConsoleOriginalTitleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleOriginalTitleW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetConsoleOriginalTitleW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleOriginalTitleW$MH() { return GetConsoleOriginalTitleW$MH_; }

    static final FunctionDescriptor SetConsoleTitleA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleTitleA$FUNC() { return SetConsoleTitleA$FUNC_; }

    static final MethodHandle SetConsoleTitleA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleTitleA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleTitleA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleTitleA$MH() { return SetConsoleTitleA$MH_; }

    static final FunctionDescriptor SetConsoleTitleW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleTitleW$FUNC() { return SetConsoleTitleW$FUNC_; }

    static final MethodHandle SetConsoleTitleW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleTitleW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleTitleW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleTitleW$MH() { return SetConsoleTitleW$MH_; }

    static final FunctionDescriptor GetNumberOfConsoleMouseButtons$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetNumberOfConsoleMouseButtons$FUNC() { return GetNumberOfConsoleMouseButtons$FUNC_; }

    static final MethodHandle GetNumberOfConsoleMouseButtons$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetNumberOfConsoleMouseButtons",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetNumberOfConsoleMouseButtons$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetNumberOfConsoleMouseButtons$MH() { return GetNumberOfConsoleMouseButtons$MH_; }

    static final FunctionDescriptor GetConsoleFontSize$FUNC_ = FunctionDescriptor.of(MemoryLayout.ofStruct(
        C_SHORT.withName("X"),
        C_SHORT.withName("Y")
    ).withName("_COORD"),
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleFontSize$FUNC() { return GetConsoleFontSize$FUNC_; }

    static final MethodHandle GetConsoleFontSize$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleFontSize",
        "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
        GetConsoleFontSize$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleFontSize$MH() { return GetConsoleFontSize$MH_; }

    static final FunctionDescriptor GetCurrentConsoleFont$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCurrentConsoleFont$FUNC() { return GetCurrentConsoleFont$FUNC_; }

    static final MethodHandle GetCurrentConsoleFont$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentConsoleFont",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentConsoleFont$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCurrentConsoleFont$MH() { return GetCurrentConsoleFont$MH_; }

    static final MemoryLayout _CONSOLE_FONT_INFOEX$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbSize"),
        C_LONG.withName("nFont"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwFontSize"),
        C_INT.withName("FontFamily"),
        C_INT.withName("FontWeight"),
        MemoryLayout.ofSequence(32, C_SHORT).withName("FaceName")
    ).withName("_CONSOLE_FONT_INFOEX");
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_FONT_INFOEX$struct$LAYOUT() { return _CONSOLE_FONT_INFOEX$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_FONT_INFOEX$cbSize$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_FONT_INFOEX$cbSize$LAYOUT() { return _CONSOLE_FONT_INFOEX$cbSize$LAYOUT_; }

    static final VarHandle _CONSOLE_FONT_INFOEX$cbSize$VH_ = _CONSOLE_FONT_INFOEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CONSOLE_FONT_INFOEX$cbSize$VH() { return _CONSOLE_FONT_INFOEX$cbSize$VH_; }

    static final MemoryLayout _CONSOLE_FONT_INFOEX$nFont$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_FONT_INFOEX$nFont$LAYOUT() { return _CONSOLE_FONT_INFOEX$nFont$LAYOUT_; }

    static final VarHandle _CONSOLE_FONT_INFOEX$nFont$VH_ = _CONSOLE_FONT_INFOEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("nFont"));
    static final java.lang.invoke.VarHandle _CONSOLE_FONT_INFOEX$nFont$VH() { return _CONSOLE_FONT_INFOEX$nFont$VH_; }

    static final MemoryLayout _CONSOLE_FONT_INFOEX$FontFamily$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_FONT_INFOEX$FontFamily$LAYOUT() { return _CONSOLE_FONT_INFOEX$FontFamily$LAYOUT_; }

    static final VarHandle _CONSOLE_FONT_INFOEX$FontFamily$VH_ = _CONSOLE_FONT_INFOEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FontFamily"));
    static final java.lang.invoke.VarHandle _CONSOLE_FONT_INFOEX$FontFamily$VH() { return _CONSOLE_FONT_INFOEX$FontFamily$VH_; }

    static final MemoryLayout _CONSOLE_FONT_INFOEX$FontWeight$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_FONT_INFOEX$FontWeight$LAYOUT() { return _CONSOLE_FONT_INFOEX$FontWeight$LAYOUT_; }

    static final VarHandle _CONSOLE_FONT_INFOEX$FontWeight$VH_ = _CONSOLE_FONT_INFOEX$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("FontWeight"));
    static final java.lang.invoke.VarHandle _CONSOLE_FONT_INFOEX$FontWeight$VH() { return _CONSOLE_FONT_INFOEX$FontWeight$VH_; }

    static final FunctionDescriptor GetCurrentConsoleFontEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetCurrentConsoleFontEx$FUNC() { return GetCurrentConsoleFontEx$FUNC_; }

    static final MethodHandle GetCurrentConsoleFontEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetCurrentConsoleFontEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetCurrentConsoleFontEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetCurrentConsoleFontEx$MH() { return GetCurrentConsoleFontEx$MH_; }

    static final FunctionDescriptor SetCurrentConsoleFontEx$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetCurrentConsoleFontEx$FUNC() { return SetCurrentConsoleFontEx$FUNC_; }

    static final MethodHandle SetCurrentConsoleFontEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetCurrentConsoleFontEx",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetCurrentConsoleFontEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetCurrentConsoleFontEx$MH() { return SetCurrentConsoleFontEx$MH_; }

    static final MemoryLayout _CONSOLE_SELECTION_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwFlags"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("X"),
            C_SHORT.withName("Y")
        ).withName("dwSelectionAnchor"),
        MemoryLayout.ofStruct(
            C_SHORT.withName("Left"),
            C_SHORT.withName("Top"),
            C_SHORT.withName("Right"),
            C_SHORT.withName("Bottom")
        ).withName("srSelection")
    ).withName("_CONSOLE_SELECTION_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_SELECTION_INFO$struct$LAYOUT() { return _CONSOLE_SELECTION_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_SELECTION_INFO$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_SELECTION_INFO$dwFlags$LAYOUT() { return _CONSOLE_SELECTION_INFO$dwFlags$LAYOUT_; }

    static final VarHandle _CONSOLE_SELECTION_INFO$dwFlags$VH_ = _CONSOLE_SELECTION_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CONSOLE_SELECTION_INFO$dwFlags$VH() { return _CONSOLE_SELECTION_INFO$dwFlags$VH_; }

    static final FunctionDescriptor GetConsoleSelectionInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleSelectionInfo$FUNC() { return GetConsoleSelectionInfo$FUNC_; }

    static final MethodHandle GetConsoleSelectionInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleSelectionInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleSelectionInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleSelectionInfo$MH() { return GetConsoleSelectionInfo$MH_; }

    static final MemoryLayout _CONSOLE_HISTORY_INFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("cbSize"),
        C_INT.withName("HistoryBufferSize"),
        C_INT.withName("NumberOfHistoryBuffers"),
        C_LONG.withName("dwFlags")
    ).withName("_CONSOLE_HISTORY_INFO");
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_HISTORY_INFO$struct$LAYOUT() { return _CONSOLE_HISTORY_INFO$struct$LAYOUT_; }

    static final MemoryLayout _CONSOLE_HISTORY_INFO$cbSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_HISTORY_INFO$cbSize$LAYOUT() { return _CONSOLE_HISTORY_INFO$cbSize$LAYOUT_; }

    static final VarHandle _CONSOLE_HISTORY_INFO$cbSize$VH_ = _CONSOLE_HISTORY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbSize"));
    static final java.lang.invoke.VarHandle _CONSOLE_HISTORY_INFO$cbSize$VH() { return _CONSOLE_HISTORY_INFO$cbSize$VH_; }

    static final MemoryLayout _CONSOLE_HISTORY_INFO$HistoryBufferSize$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_HISTORY_INFO$HistoryBufferSize$LAYOUT() { return _CONSOLE_HISTORY_INFO$HistoryBufferSize$LAYOUT_; }

    static final VarHandle _CONSOLE_HISTORY_INFO$HistoryBufferSize$VH_ = _CONSOLE_HISTORY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("HistoryBufferSize"));
    static final java.lang.invoke.VarHandle _CONSOLE_HISTORY_INFO$HistoryBufferSize$VH() { return _CONSOLE_HISTORY_INFO$HistoryBufferSize$VH_; }

    static final MemoryLayout _CONSOLE_HISTORY_INFO$NumberOfHistoryBuffers$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_HISTORY_INFO$NumberOfHistoryBuffers$LAYOUT() { return _CONSOLE_HISTORY_INFO$NumberOfHistoryBuffers$LAYOUT_; }

    static final VarHandle _CONSOLE_HISTORY_INFO$NumberOfHistoryBuffers$VH_ = _CONSOLE_HISTORY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("NumberOfHistoryBuffers"));
    static final java.lang.invoke.VarHandle _CONSOLE_HISTORY_INFO$NumberOfHistoryBuffers$VH() { return _CONSOLE_HISTORY_INFO$NumberOfHistoryBuffers$VH_; }

    static final MemoryLayout _CONSOLE_HISTORY_INFO$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONSOLE_HISTORY_INFO$dwFlags$LAYOUT() { return _CONSOLE_HISTORY_INFO$dwFlags$LAYOUT_; }

    static final VarHandle _CONSOLE_HISTORY_INFO$dwFlags$VH_ = _CONSOLE_HISTORY_INFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CONSOLE_HISTORY_INFO$dwFlags$VH() { return _CONSOLE_HISTORY_INFO$dwFlags$VH_; }

    static final FunctionDescriptor GetConsoleHistoryInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleHistoryInfo$FUNC() { return GetConsoleHistoryInfo$FUNC_; }

    static final MethodHandle GetConsoleHistoryInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleHistoryInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleHistoryInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleHistoryInfo$MH() { return GetConsoleHistoryInfo$MH_; }

    static final FunctionDescriptor SetConsoleHistoryInfo$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleHistoryInfo$FUNC() { return SetConsoleHistoryInfo$FUNC_; }

    static final MethodHandle SetConsoleHistoryInfo$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleHistoryInfo",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleHistoryInfo$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleHistoryInfo$MH() { return SetConsoleHistoryInfo$MH_; }

    static final FunctionDescriptor GetConsoleDisplayMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleDisplayMode$FUNC() { return GetConsoleDisplayMode$FUNC_; }

    static final MethodHandle GetConsoleDisplayMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleDisplayMode",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleDisplayMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleDisplayMode$MH() { return GetConsoleDisplayMode$MH_; }

    static final FunctionDescriptor SetConsoleDisplayMode$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleDisplayMode$FUNC() { return SetConsoleDisplayMode$FUNC_; }

    static final MethodHandle SetConsoleDisplayMode$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleDisplayMode",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleDisplayMode$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleDisplayMode$MH() { return SetConsoleDisplayMode$MH_; }

    static final FunctionDescriptor GetConsoleWindow$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleWindow$FUNC() { return GetConsoleWindow$FUNC_; }

    static final MethodHandle GetConsoleWindow$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleWindow",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        GetConsoleWindow$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleWindow$MH() { return GetConsoleWindow$MH_; }

    static final FunctionDescriptor AddConsoleAliasA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AddConsoleAliasA$FUNC() { return AddConsoleAliasA$FUNC_; }

    static final MethodHandle AddConsoleAliasA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddConsoleAliasA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AddConsoleAliasA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AddConsoleAliasA$MH() { return AddConsoleAliasA$MH_; }

    static final FunctionDescriptor AddConsoleAliasW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AddConsoleAliasW$FUNC() { return AddConsoleAliasW$FUNC_; }

    static final MethodHandle AddConsoleAliasW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AddConsoleAliasW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        AddConsoleAliasW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AddConsoleAliasW$MH() { return AddConsoleAliasW$MH_; }

    static final FunctionDescriptor GetConsoleAliasA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasA$FUNC() { return GetConsoleAliasA$FUNC_; }

    static final MethodHandle GetConsoleAliasA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleAliasA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasA$MH() { return GetConsoleAliasA$MH_; }

    static final FunctionDescriptor GetConsoleAliasW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasW$FUNC() { return GetConsoleAliasW$FUNC_; }

    static final MethodHandle GetConsoleAliasW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleAliasW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasW$MH() { return GetConsoleAliasW$MH_; }

    static final FunctionDescriptor GetConsoleAliasesLengthA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasesLengthA$FUNC() { return GetConsoleAliasesLengthA$FUNC_; }

    static final MethodHandle GetConsoleAliasesLengthA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasesLengthA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleAliasesLengthA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasesLengthA$MH() { return GetConsoleAliasesLengthA$MH_; }

    static final FunctionDescriptor GetConsoleAliasesLengthW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasesLengthW$FUNC() { return GetConsoleAliasesLengthW$FUNC_; }

    static final MethodHandle GetConsoleAliasesLengthW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasesLengthW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleAliasesLengthW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasesLengthW$MH() { return GetConsoleAliasesLengthW$MH_; }

    static final FunctionDescriptor GetConsoleAliasExesLengthA$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasExesLengthA$FUNC() { return GetConsoleAliasExesLengthA$FUNC_; }

    static final MethodHandle GetConsoleAliasExesLengthA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasExesLengthA",
        "()I",
        GetConsoleAliasExesLengthA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasExesLengthA$MH() { return GetConsoleAliasExesLengthA$MH_; }

    static final FunctionDescriptor GetConsoleAliasExesLengthW$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasExesLengthW$FUNC() { return GetConsoleAliasExesLengthW$FUNC_; }

    static final MethodHandle GetConsoleAliasExesLengthW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasExesLengthW",
        "()I",
        GetConsoleAliasExesLengthW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasExesLengthW$MH() { return GetConsoleAliasExesLengthW$MH_; }

    static final FunctionDescriptor GetConsoleAliasesA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasesA$FUNC() { return GetConsoleAliasesA$FUNC_; }

    static final MethodHandle GetConsoleAliasesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasesA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleAliasesA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasesA$MH() { return GetConsoleAliasesA$MH_; }

    static final FunctionDescriptor GetConsoleAliasesW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasesW$FUNC() { return GetConsoleAliasesW$FUNC_; }

    static final MethodHandle GetConsoleAliasesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasesW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleAliasesW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasesW$MH() { return GetConsoleAliasesW$MH_; }

    static final FunctionDescriptor GetConsoleAliasExesA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasExesA$FUNC() { return GetConsoleAliasExesA$FUNC_; }

    static final MethodHandle GetConsoleAliasExesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasExesA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetConsoleAliasExesA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasExesA$MH() { return GetConsoleAliasExesA$MH_; }

    static final FunctionDescriptor GetConsoleAliasExesW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleAliasExesW$FUNC() { return GetConsoleAliasExesW$FUNC_; }

    static final MethodHandle GetConsoleAliasExesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleAliasExesW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetConsoleAliasExesW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleAliasExesW$MH() { return GetConsoleAliasExesW$MH_; }

    static final FunctionDescriptor ExpungeConsoleCommandHistoryA$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ExpungeConsoleCommandHistoryA$FUNC() { return ExpungeConsoleCommandHistoryA$FUNC_; }

    static final MethodHandle ExpungeConsoleCommandHistoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExpungeConsoleCommandHistoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        ExpungeConsoleCommandHistoryA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ExpungeConsoleCommandHistoryA$MH() { return ExpungeConsoleCommandHistoryA$MH_; }

    static final FunctionDescriptor ExpungeConsoleCommandHistoryW$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor ExpungeConsoleCommandHistoryW$FUNC() { return ExpungeConsoleCommandHistoryW$FUNC_; }

    static final MethodHandle ExpungeConsoleCommandHistoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "ExpungeConsoleCommandHistoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        ExpungeConsoleCommandHistoryW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle ExpungeConsoleCommandHistoryW$MH() { return ExpungeConsoleCommandHistoryW$MH_; }

    static final FunctionDescriptor SetConsoleNumberOfCommandsA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleNumberOfCommandsA$FUNC() { return SetConsoleNumberOfCommandsA$FUNC_; }

    static final MethodHandle SetConsoleNumberOfCommandsA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleNumberOfCommandsA",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleNumberOfCommandsA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleNumberOfCommandsA$MH() { return SetConsoleNumberOfCommandsA$MH_; }

    static final FunctionDescriptor SetConsoleNumberOfCommandsW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor SetConsoleNumberOfCommandsW$FUNC() { return SetConsoleNumberOfCommandsW$FUNC_; }

    static final MethodHandle SetConsoleNumberOfCommandsW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "SetConsoleNumberOfCommandsW",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        SetConsoleNumberOfCommandsW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle SetConsoleNumberOfCommandsW$MH() { return SetConsoleNumberOfCommandsW$MH_; }

    static final FunctionDescriptor GetConsoleCommandHistoryLengthA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleCommandHistoryLengthA$FUNC() { return GetConsoleCommandHistoryLengthA$FUNC_; }

    static final MethodHandle GetConsoleCommandHistoryLengthA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleCommandHistoryLengthA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleCommandHistoryLengthA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleCommandHistoryLengthA$MH() { return GetConsoleCommandHistoryLengthA$MH_; }

    static final FunctionDescriptor GetConsoleCommandHistoryLengthW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleCommandHistoryLengthW$FUNC() { return GetConsoleCommandHistoryLengthW$FUNC_; }

    static final MethodHandle GetConsoleCommandHistoryLengthW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleCommandHistoryLengthW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleCommandHistoryLengthW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleCommandHistoryLengthW$MH() { return GetConsoleCommandHistoryLengthW$MH_; }

    static final FunctionDescriptor GetConsoleCommandHistoryA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleCommandHistoryA$FUNC() { return GetConsoleCommandHistoryA$FUNC_; }

    static final MethodHandle GetConsoleCommandHistoryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleCommandHistoryA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleCommandHistoryA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleCommandHistoryA$MH() { return GetConsoleCommandHistoryA$MH_; }

    static final FunctionDescriptor GetConsoleCommandHistoryW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleCommandHistoryW$FUNC() { return GetConsoleCommandHistoryW$FUNC_; }

    static final MethodHandle GetConsoleCommandHistoryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleCommandHistoryW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        GetConsoleCommandHistoryW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleCommandHistoryW$MH() { return GetConsoleCommandHistoryW$MH_; }

    static final FunctionDescriptor GetConsoleProcessList$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetConsoleProcessList$FUNC() { return GetConsoleProcessList$FUNC_; }

    static final MethodHandle GetConsoleProcessList$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetConsoleProcessList",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        GetConsoleProcessList$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetConsoleProcessList$MH() { return GetConsoleProcessList$MH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwSignature"),
        C_LONG.withName("dwStrucVersion"),
        C_LONG.withName("dwFileVersionMS"),
        C_LONG.withName("dwFileVersionLS"),
        C_LONG.withName("dwProductVersionMS"),
        C_LONG.withName("dwProductVersionLS"),
        C_LONG.withName("dwFileFlagsMask"),
        C_LONG.withName("dwFileFlags"),
        C_LONG.withName("dwFileOS"),
        C_LONG.withName("dwFileType"),
        C_LONG.withName("dwFileSubtype"),
        C_LONG.withName("dwFileDateMS"),
        C_LONG.withName("dwFileDateLS")
    ).withName("tagVS_FIXEDFILEINFO");
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$struct$LAYOUT() { return tagVS_FIXEDFILEINFO$struct$LAYOUT_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwSignature$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwSignature$LAYOUT() { return tagVS_FIXEDFILEINFO$dwSignature$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwSignature$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwSignature"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwSignature$VH() { return tagVS_FIXEDFILEINFO$dwSignature$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwStrucVersion$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwStrucVersion$LAYOUT() { return tagVS_FIXEDFILEINFO$dwStrucVersion$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwStrucVersion$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwStrucVersion"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwStrucVersion$VH() { return tagVS_FIXEDFILEINFO$dwStrucVersion$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwFileVersionMS$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwFileVersionMS$LAYOUT() { return tagVS_FIXEDFILEINFO$dwFileVersionMS$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwFileVersionMS$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileVersionMS"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwFileVersionMS$VH() { return tagVS_FIXEDFILEINFO$dwFileVersionMS$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwFileVersionLS$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwFileVersionLS$LAYOUT() { return tagVS_FIXEDFILEINFO$dwFileVersionLS$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwFileVersionLS$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileVersionLS"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwFileVersionLS$VH() { return tagVS_FIXEDFILEINFO$dwFileVersionLS$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwProductVersionMS$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwProductVersionMS$LAYOUT() { return tagVS_FIXEDFILEINFO$dwProductVersionMS$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwProductVersionMS$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProductVersionMS"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwProductVersionMS$VH() { return tagVS_FIXEDFILEINFO$dwProductVersionMS$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwProductVersionLS$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwProductVersionLS$LAYOUT() { return tagVS_FIXEDFILEINFO$dwProductVersionLS$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwProductVersionLS$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwProductVersionLS"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwProductVersionLS$VH() { return tagVS_FIXEDFILEINFO$dwProductVersionLS$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwFileFlagsMask$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwFileFlagsMask$LAYOUT() { return tagVS_FIXEDFILEINFO$dwFileFlagsMask$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwFileFlagsMask$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileFlagsMask"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwFileFlagsMask$VH() { return tagVS_FIXEDFILEINFO$dwFileFlagsMask$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwFileFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwFileFlags$LAYOUT() { return tagVS_FIXEDFILEINFO$dwFileFlags$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwFileFlags$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileFlags"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwFileFlags$VH() { return tagVS_FIXEDFILEINFO$dwFileFlags$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwFileOS$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwFileOS$LAYOUT() { return tagVS_FIXEDFILEINFO$dwFileOS$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwFileOS$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileOS"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwFileOS$VH() { return tagVS_FIXEDFILEINFO$dwFileOS$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwFileType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwFileType$LAYOUT() { return tagVS_FIXEDFILEINFO$dwFileType$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwFileType$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileType"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwFileType$VH() { return tagVS_FIXEDFILEINFO$dwFileType$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwFileSubtype$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwFileSubtype$LAYOUT() { return tagVS_FIXEDFILEINFO$dwFileSubtype$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwFileSubtype$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileSubtype"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwFileSubtype$VH() { return tagVS_FIXEDFILEINFO$dwFileSubtype$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwFileDateMS$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwFileDateMS$LAYOUT() { return tagVS_FIXEDFILEINFO$dwFileDateMS$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwFileDateMS$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileDateMS"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwFileDateMS$VH() { return tagVS_FIXEDFILEINFO$dwFileDateMS$VH_; }

    static final MemoryLayout tagVS_FIXEDFILEINFO$dwFileDateLS$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout tagVS_FIXEDFILEINFO$dwFileDateLS$LAYOUT() { return tagVS_FIXEDFILEINFO$dwFileDateLS$LAYOUT_; }

    static final VarHandle tagVS_FIXEDFILEINFO$dwFileDateLS$VH_ = tagVS_FIXEDFILEINFO$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFileDateLS"));
    static final java.lang.invoke.VarHandle tagVS_FIXEDFILEINFO$dwFileDateLS$VH() { return tagVS_FIXEDFILEINFO$dwFileDateLS$VH_; }

    static final FunctionDescriptor VerFindFileA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerFindFileA$FUNC() { return VerFindFileA$FUNC_; }

    static final MethodHandle VerFindFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerFindFileA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VerFindFileA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerFindFileA$MH() { return VerFindFileA$MH_; }

    static final FunctionDescriptor VerFindFileW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerFindFileW$FUNC() { return VerFindFileW$FUNC_; }

    static final MethodHandle VerFindFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerFindFileW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VerFindFileW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerFindFileW$MH() { return VerFindFileW$MH_; }

    static final FunctionDescriptor VerInstallFileA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerInstallFileA$FUNC() { return VerInstallFileA$FUNC_; }

    static final MethodHandle VerInstallFileA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerInstallFileA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VerInstallFileA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerInstallFileA$MH() { return VerInstallFileA$MH_; }

    static final FunctionDescriptor VerInstallFileW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerInstallFileW$FUNC() { return VerInstallFileW$FUNC_; }

    static final MethodHandle VerInstallFileW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerInstallFileW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VerInstallFileW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerInstallFileW$MH() { return VerInstallFileW$MH_; }

    static final FunctionDescriptor GetFileVersionInfoSizeA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileVersionInfoSizeA$FUNC() { return GetFileVersionInfoSizeA$FUNC_; }

    static final MethodHandle GetFileVersionInfoSizeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileVersionInfoSizeA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileVersionInfoSizeA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileVersionInfoSizeA$MH() { return GetFileVersionInfoSizeA$MH_; }

    static final FunctionDescriptor GetFileVersionInfoSizeW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileVersionInfoSizeW$FUNC() { return GetFileVersionInfoSizeW$FUNC_; }

    static final MethodHandle GetFileVersionInfoSizeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileVersionInfoSizeW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileVersionInfoSizeW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileVersionInfoSizeW$MH() { return GetFileVersionInfoSizeW$MH_; }

    static final FunctionDescriptor GetFileVersionInfoA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileVersionInfoA$FUNC() { return GetFileVersionInfoA$FUNC_; }

    static final MethodHandle GetFileVersionInfoA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileVersionInfoA",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetFileVersionInfoA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileVersionInfoA$MH() { return GetFileVersionInfoA$MH_; }

    static final FunctionDescriptor GetFileVersionInfoW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileVersionInfoW$FUNC() { return GetFileVersionInfoW$FUNC_; }

    static final MethodHandle GetFileVersionInfoW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileVersionInfoW",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetFileVersionInfoW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileVersionInfoW$MH() { return GetFileVersionInfoW$MH_; }

    static final FunctionDescriptor GetFileVersionInfoSizeExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileVersionInfoSizeExA$FUNC() { return GetFileVersionInfoSizeExA$FUNC_; }

    static final MethodHandle GetFileVersionInfoSizeExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileVersionInfoSizeExA",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileVersionInfoSizeExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileVersionInfoSizeExA$MH() { return GetFileVersionInfoSizeExA$MH_; }

    static final FunctionDescriptor GetFileVersionInfoSizeExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileVersionInfoSizeExW$FUNC() { return GetFileVersionInfoSizeExW$FUNC_; }

    static final MethodHandle GetFileVersionInfoSizeExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileVersionInfoSizeExW",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        GetFileVersionInfoSizeExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileVersionInfoSizeExW$MH() { return GetFileVersionInfoSizeExW$MH_; }

    static final FunctionDescriptor GetFileVersionInfoExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileVersionInfoExA$FUNC() { return GetFileVersionInfoExA$FUNC_; }

    static final MethodHandle GetFileVersionInfoExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileVersionInfoExA",
        "(ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetFileVersionInfoExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileVersionInfoExA$MH() { return GetFileVersionInfoExA$MH_; }

    static final FunctionDescriptor GetFileVersionInfoExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor GetFileVersionInfoExW$FUNC() { return GetFileVersionInfoExW$FUNC_; }

    static final MethodHandle GetFileVersionInfoExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "GetFileVersionInfoExW",
        "(ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        GetFileVersionInfoExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle GetFileVersionInfoExW$MH() { return GetFileVersionInfoExW$MH_; }

    static final FunctionDescriptor VerLanguageNameA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerLanguageNameA$FUNC() { return VerLanguageNameA$FUNC_; }

    static final MethodHandle VerLanguageNameA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerLanguageNameA",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        VerLanguageNameA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerLanguageNameA$MH() { return VerLanguageNameA$MH_; }

    static final FunctionDescriptor VerLanguageNameW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerLanguageNameW$FUNC() { return VerLanguageNameW$FUNC_; }

    static final MethodHandle VerLanguageNameW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerLanguageNameW",
        "(ILjdk/incubator/foreign/MemoryAddress;I)I",
        VerLanguageNameW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerLanguageNameW$MH() { return VerLanguageNameW$MH_; }

    static final FunctionDescriptor VerQueryValueA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerQueryValueA$FUNC() { return VerQueryValueA$FUNC_; }

    static final MethodHandle VerQueryValueA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerQueryValueA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VerQueryValueA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerQueryValueA$MH() { return VerQueryValueA$MH_; }

    static final FunctionDescriptor VerQueryValueW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor VerQueryValueW$FUNC() { return VerQueryValueW$FUNC_; }

    static final MethodHandle VerQueryValueW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "VerQueryValueW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        VerQueryValueW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle VerQueryValueW$MH() { return VerQueryValueW$MH_; }

    static final MemoryLayout val_context$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_INT.withName("valuelen"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("value_context"),
        C_POINTER.withName("val_buff_ptr")
    ).withName("val_context");
    static final jdk.incubator.foreign.MemoryLayout val_context$struct$LAYOUT() { return val_context$struct$LAYOUT_; }

    static final MemoryLayout val_context$valuelen$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout val_context$valuelen$LAYOUT() { return val_context$valuelen$LAYOUT_; }

    static final VarHandle val_context$valuelen$VH_ = val_context$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("valuelen"));
    static final java.lang.invoke.VarHandle val_context$valuelen$VH() { return val_context$valuelen$VH_; }

    static final MemoryLayout val_context$value_context$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout val_context$value_context$LAYOUT() { return val_context$value_context$LAYOUT_; }

    static final VarHandle val_context$value_context$VH_ = MemoryHandles.asAddressVarHandle(val_context$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("value_context")));
    static final java.lang.invoke.VarHandle val_context$value_context$VH() { return val_context$value_context$VH_; }

    static final MemoryLayout val_context$val_buff_ptr$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout val_context$val_buff_ptr$LAYOUT() { return val_context$val_buff_ptr$LAYOUT_; }

    static final VarHandle val_context$val_buff_ptr$VH_ = MemoryHandles.asAddressVarHandle(val_context$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("val_buff_ptr")));
    static final java.lang.invoke.VarHandle val_context$val_buff_ptr$VH() { return val_context$val_buff_ptr$VH_; }

    static final MemoryLayout pvalueA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pv_valuename"),
        C_INT.withName("pv_valuelen"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pv_value_context"),
        C_LONG.withName("pv_type"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("pvalueA");
    static final jdk.incubator.foreign.MemoryLayout pvalueA$struct$LAYOUT() { return pvalueA$struct$LAYOUT_; }

    static final MemoryLayout pvalueA$pv_valuename$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout pvalueA$pv_valuename$LAYOUT() { return pvalueA$pv_valuename$LAYOUT_; }

    static final VarHandle pvalueA$pv_valuename$VH_ = MemoryHandles.asAddressVarHandle(pvalueA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pv_valuename")));
    static final java.lang.invoke.VarHandle pvalueA$pv_valuename$VH() { return pvalueA$pv_valuename$VH_; }

    static final MemoryLayout pvalueA$pv_valuelen$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout pvalueA$pv_valuelen$LAYOUT() { return pvalueA$pv_valuelen$LAYOUT_; }

    static final VarHandle pvalueA$pv_valuelen$VH_ = pvalueA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pv_valuelen"));
    static final java.lang.invoke.VarHandle pvalueA$pv_valuelen$VH() { return pvalueA$pv_valuelen$VH_; }

    static final MemoryLayout pvalueA$pv_value_context$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout pvalueA$pv_value_context$LAYOUT() { return pvalueA$pv_value_context$LAYOUT_; }

    static final VarHandle pvalueA$pv_value_context$VH_ = MemoryHandles.asAddressVarHandle(pvalueA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pv_value_context")));
    static final java.lang.invoke.VarHandle pvalueA$pv_value_context$VH() { return pvalueA$pv_value_context$VH_; }

    static final MemoryLayout pvalueA$pv_type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout pvalueA$pv_type$LAYOUT() { return pvalueA$pv_type$LAYOUT_; }

    static final VarHandle pvalueA$pv_type$VH_ = pvalueA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pv_type"));
    static final java.lang.invoke.VarHandle pvalueA$pv_type$VH() { return pvalueA$pv_type$VH_; }

    static final MemoryLayout pvalueW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pv_valuename"),
        C_INT.withName("pv_valuelen"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pv_value_context"),
        C_LONG.withName("pv_type"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("pvalueW");
    static final jdk.incubator.foreign.MemoryLayout pvalueW$struct$LAYOUT() { return pvalueW$struct$LAYOUT_; }

    static final MemoryLayout pvalueW$pv_valuename$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout pvalueW$pv_valuename$LAYOUT() { return pvalueW$pv_valuename$LAYOUT_; }

    static final VarHandle pvalueW$pv_valuename$VH_ = MemoryHandles.asAddressVarHandle(pvalueW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pv_valuename")));
    static final java.lang.invoke.VarHandle pvalueW$pv_valuename$VH() { return pvalueW$pv_valuename$VH_; }

    static final MemoryLayout pvalueW$pv_valuelen$LAYOUT_ = C_INT;
    static final jdk.incubator.foreign.MemoryLayout pvalueW$pv_valuelen$LAYOUT() { return pvalueW$pv_valuelen$LAYOUT_; }

    static final VarHandle pvalueW$pv_valuelen$VH_ = pvalueW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pv_valuelen"));
    static final java.lang.invoke.VarHandle pvalueW$pv_valuelen$VH() { return pvalueW$pv_valuelen$VH_; }

    static final MemoryLayout pvalueW$pv_value_context$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout pvalueW$pv_value_context$LAYOUT() { return pvalueW$pv_value_context$LAYOUT_; }

    static final VarHandle pvalueW$pv_value_context$VH_ = MemoryHandles.asAddressVarHandle(pvalueW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pv_value_context")));
    static final java.lang.invoke.VarHandle pvalueW$pv_value_context$VH() { return pvalueW$pv_value_context$VH_; }

    static final MemoryLayout pvalueW$pv_type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout pvalueW$pv_type$LAYOUT() { return pvalueW$pv_type$LAYOUT_; }

    static final VarHandle pvalueW$pv_type$VH_ = pvalueW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pv_type"));
    static final java.lang.invoke.VarHandle pvalueW$pv_type$VH() { return pvalueW$pv_type$VH_; }

    static final MemoryLayout provider_info$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("pi_R0_1val"),
        C_POINTER.withName("pi_R0_allvals"),
        C_POINTER.withName("pi_R3_1val"),
        C_POINTER.withName("pi_R3_allvals"),
        C_LONG.withName("pi_flags"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("pi_key_context")
    ).withName("provider_info");
    static final jdk.incubator.foreign.MemoryLayout provider_info$struct$LAYOUT() { return provider_info$struct$LAYOUT_; }

    static final MemoryLayout provider_info$pi_R0_1val$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout provider_info$pi_R0_1val$LAYOUT() { return provider_info$pi_R0_1val$LAYOUT_; }

    static final VarHandle provider_info$pi_R0_1val$VH_ = MemoryHandles.asAddressVarHandle(provider_info$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pi_R0_1val")));
    static final java.lang.invoke.VarHandle provider_info$pi_R0_1val$VH() { return provider_info$pi_R0_1val$VH_; }

    static final MemoryLayout provider_info$pi_R0_allvals$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout provider_info$pi_R0_allvals$LAYOUT() { return provider_info$pi_R0_allvals$LAYOUT_; }

    static final VarHandle provider_info$pi_R0_allvals$VH_ = MemoryHandles.asAddressVarHandle(provider_info$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pi_R0_allvals")));
    static final java.lang.invoke.VarHandle provider_info$pi_R0_allvals$VH() { return provider_info$pi_R0_allvals$VH_; }

    static final MemoryLayout provider_info$pi_R3_1val$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout provider_info$pi_R3_1val$LAYOUT() { return provider_info$pi_R3_1val$LAYOUT_; }

    static final VarHandle provider_info$pi_R3_1val$VH_ = MemoryHandles.asAddressVarHandle(provider_info$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pi_R3_1val")));
    static final java.lang.invoke.VarHandle provider_info$pi_R3_1val$VH() { return provider_info$pi_R3_1val$VH_; }

    static final MemoryLayout provider_info$pi_R3_allvals$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout provider_info$pi_R3_allvals$LAYOUT() { return provider_info$pi_R3_allvals$LAYOUT_; }

    static final VarHandle provider_info$pi_R3_allvals$VH_ = MemoryHandles.asAddressVarHandle(provider_info$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pi_R3_allvals")));
    static final java.lang.invoke.VarHandle provider_info$pi_R3_allvals$VH() { return provider_info$pi_R3_allvals$VH_; }

    static final MemoryLayout provider_info$pi_flags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout provider_info$pi_flags$LAYOUT() { return provider_info$pi_flags$LAYOUT_; }

    static final VarHandle provider_info$pi_flags$VH_ = provider_info$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("pi_flags"));
    static final java.lang.invoke.VarHandle provider_info$pi_flags$VH() { return provider_info$pi_flags$VH_; }

    static final MemoryLayout provider_info$pi_key_context$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout provider_info$pi_key_context$LAYOUT() { return provider_info$pi_key_context$LAYOUT_; }

    static final VarHandle provider_info$pi_key_context$VH_ = MemoryHandles.asAddressVarHandle(provider_info$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("pi_key_context")));
    static final java.lang.invoke.VarHandle provider_info$pi_key_context$VH() { return provider_info$pi_key_context$VH_; }

    static final MemoryLayout value_entA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("ve_valuename"),
        C_LONG.withName("ve_valuelen"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("ve_valueptr"),
        C_LONG.withName("ve_type"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("value_entA");
    static final jdk.incubator.foreign.MemoryLayout value_entA$struct$LAYOUT() { return value_entA$struct$LAYOUT_; }

    static final MemoryLayout value_entA$ve_valuename$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout value_entA$ve_valuename$LAYOUT() { return value_entA$ve_valuename$LAYOUT_; }

    static final VarHandle value_entA$ve_valuename$VH_ = MemoryHandles.asAddressVarHandle(value_entA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ve_valuename")));
    static final java.lang.invoke.VarHandle value_entA$ve_valuename$VH() { return value_entA$ve_valuename$VH_; }

    static final MemoryLayout value_entA$ve_valuelen$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout value_entA$ve_valuelen$LAYOUT() { return value_entA$ve_valuelen$LAYOUT_; }

    static final VarHandle value_entA$ve_valuelen$VH_ = value_entA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ve_valuelen"));
    static final java.lang.invoke.VarHandle value_entA$ve_valuelen$VH() { return value_entA$ve_valuelen$VH_; }

    static final MemoryLayout value_entA$ve_valueptr$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout value_entA$ve_valueptr$LAYOUT() { return value_entA$ve_valueptr$LAYOUT_; }

    static final VarHandle value_entA$ve_valueptr$VH_ = value_entA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ve_valueptr"));
    static final java.lang.invoke.VarHandle value_entA$ve_valueptr$VH() { return value_entA$ve_valueptr$VH_; }

    static final MemoryLayout value_entA$ve_type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout value_entA$ve_type$LAYOUT() { return value_entA$ve_type$LAYOUT_; }

    static final VarHandle value_entA$ve_type$VH_ = value_entA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ve_type"));
    static final java.lang.invoke.VarHandle value_entA$ve_type$VH() { return value_entA$ve_type$VH_; }

    static final MemoryLayout value_entW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_POINTER.withName("ve_valuename"),
        C_LONG.withName("ve_valuelen"),
        MemoryLayout.ofPaddingBits(32),
        C_LONGLONG.withName("ve_valueptr"),
        C_LONG.withName("ve_type"),
        MemoryLayout.ofPaddingBits(32)
    ).withName("value_entW");
    static final jdk.incubator.foreign.MemoryLayout value_entW$struct$LAYOUT() { return value_entW$struct$LAYOUT_; }

    static final MemoryLayout value_entW$ve_valuename$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout value_entW$ve_valuename$LAYOUT() { return value_entW$ve_valuename$LAYOUT_; }

    static final VarHandle value_entW$ve_valuename$VH_ = MemoryHandles.asAddressVarHandle(value_entW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ve_valuename")));
    static final java.lang.invoke.VarHandle value_entW$ve_valuename$VH() { return value_entW$ve_valuename$VH_; }

    static final MemoryLayout value_entW$ve_valuelen$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout value_entW$ve_valuelen$LAYOUT() { return value_entW$ve_valuelen$LAYOUT_; }

    static final VarHandle value_entW$ve_valuelen$VH_ = value_entW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ve_valuelen"));
    static final java.lang.invoke.VarHandle value_entW$ve_valuelen$VH() { return value_entW$ve_valuelen$VH_; }

    static final MemoryLayout value_entW$ve_valueptr$LAYOUT_ = C_LONGLONG;
    static final jdk.incubator.foreign.MemoryLayout value_entW$ve_valueptr$LAYOUT() { return value_entW$ve_valueptr$LAYOUT_; }

    static final VarHandle value_entW$ve_valueptr$VH_ = value_entW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("ve_valueptr"));
    static final java.lang.invoke.VarHandle value_entW$ve_valueptr$VH() { return value_entW$ve_valueptr$VH_; }

    static final MemoryLayout value_entW$ve_type$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout value_entW$ve_type$LAYOUT() { return value_entW$ve_type$LAYOUT_; }

    static final VarHandle value_entW$ve_type$VH_ = value_entW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("ve_type"));
    static final java.lang.invoke.VarHandle value_entW$ve_type$VH() { return value_entW$ve_type$VH_; }

    static final FunctionDescriptor RegCloseKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegCloseKey$FUNC() { return RegCloseKey$FUNC_; }

    static final MethodHandle RegCloseKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegCloseKey",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RegCloseKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegCloseKey$MH() { return RegCloseKey$MH_; }

    static final FunctionDescriptor RegOverridePredefKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegOverridePredefKey$FUNC() { return RegOverridePredefKey$FUNC_; }

    static final MethodHandle RegOverridePredefKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegOverridePredefKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegOverridePredefKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegOverridePredefKey$MH() { return RegOverridePredefKey$MH_; }

    static final FunctionDescriptor RegOpenUserClassesRoot$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegOpenUserClassesRoot$FUNC() { return RegOpenUserClassesRoot$FUNC_; }

    static final MethodHandle RegOpenUserClassesRoot$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegOpenUserClassesRoot",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        RegOpenUserClassesRoot$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegOpenUserClassesRoot$MH() { return RegOpenUserClassesRoot$MH_; }

    static final FunctionDescriptor RegOpenCurrentUser$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegOpenCurrentUser$FUNC() { return RegOpenCurrentUser$FUNC_; }

    static final MethodHandle RegOpenCurrentUser$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegOpenCurrentUser",
        "(ILjdk/incubator/foreign/MemoryAddress;)I",
        RegOpenCurrentUser$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegOpenCurrentUser$MH() { return RegOpenCurrentUser$MH_; }

    static final FunctionDescriptor RegDisablePredefinedCache$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor RegDisablePredefinedCache$FUNC() { return RegDisablePredefinedCache$FUNC_; }

    static final MethodHandle RegDisablePredefinedCache$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDisablePredefinedCache",
        "()I",
        RegDisablePredefinedCache$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDisablePredefinedCache$MH() { return RegDisablePredefinedCache$MH_; }

    static final FunctionDescriptor RegDisablePredefinedCacheEx$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor RegDisablePredefinedCacheEx$FUNC() { return RegDisablePredefinedCacheEx$FUNC_; }

    static final MethodHandle RegDisablePredefinedCacheEx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDisablePredefinedCacheEx",
        "()I",
        RegDisablePredefinedCacheEx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDisablePredefinedCacheEx$MH() { return RegDisablePredefinedCacheEx$MH_; }

    static final FunctionDescriptor RegConnectRegistryA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegConnectRegistryA$FUNC() { return RegConnectRegistryA$FUNC_; }

    static final MethodHandle RegConnectRegistryA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegConnectRegistryA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegConnectRegistryA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegConnectRegistryA$MH() { return RegConnectRegistryA$MH_; }

    static final FunctionDescriptor RegConnectRegistryW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegConnectRegistryW$FUNC() { return RegConnectRegistryW$FUNC_; }

    static final MethodHandle RegConnectRegistryW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegConnectRegistryW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegConnectRegistryW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegConnectRegistryW$MH() { return RegConnectRegistryW$MH_; }

    static final FunctionDescriptor RegConnectRegistryExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegConnectRegistryExA$FUNC() { return RegConnectRegistryExA$FUNC_; }

    static final MethodHandle RegConnectRegistryExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegConnectRegistryExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RegConnectRegistryExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegConnectRegistryExA$MH() { return RegConnectRegistryExA$MH_; }

    static final FunctionDescriptor RegConnectRegistryExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegConnectRegistryExW$FUNC() { return RegConnectRegistryExW$FUNC_; }

    static final MethodHandle RegConnectRegistryExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegConnectRegistryExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RegConnectRegistryExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegConnectRegistryExW$MH() { return RegConnectRegistryExW$MH_; }

    static final FunctionDescriptor RegCreateKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegCreateKeyA$FUNC() { return RegCreateKeyA$FUNC_; }

    static final MethodHandle RegCreateKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegCreateKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegCreateKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegCreateKeyA$MH() { return RegCreateKeyA$MH_; }

    static final FunctionDescriptor RegCreateKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegCreateKeyW$FUNC() { return RegCreateKeyW$FUNC_; }

    static final MethodHandle RegCreateKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegCreateKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegCreateKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegCreateKeyW$MH() { return RegCreateKeyW$MH_; }

    static final FunctionDescriptor RegCreateKeyExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegCreateKeyExA$FUNC() { return RegCreateKeyExA$FUNC_; }

    static final MethodHandle RegCreateKeyExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegCreateKeyExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegCreateKeyExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegCreateKeyExA$MH() { return RegCreateKeyExA$MH_; }

    static final FunctionDescriptor RegCreateKeyExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegCreateKeyExW$FUNC() { return RegCreateKeyExW$FUNC_; }

    static final MethodHandle RegCreateKeyExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegCreateKeyExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegCreateKeyExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegCreateKeyExW$MH() { return RegCreateKeyExW$MH_; }

    static final FunctionDescriptor RegCreateKeyTransactedA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegCreateKeyTransactedA$FUNC() { return RegCreateKeyTransactedA$FUNC_; }

    static final MethodHandle RegCreateKeyTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegCreateKeyTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegCreateKeyTransactedA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegCreateKeyTransactedA$MH() { return RegCreateKeyTransactedA$MH_; }

    static final FunctionDescriptor RegCreateKeyTransactedW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegCreateKeyTransactedW$FUNC() { return RegCreateKeyTransactedW$FUNC_; }

    static final MethodHandle RegCreateKeyTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegCreateKeyTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegCreateKeyTransactedW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegCreateKeyTransactedW$MH() { return RegCreateKeyTransactedW$MH_; }

    static final FunctionDescriptor RegDeleteKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteKeyA$FUNC() { return RegDeleteKeyA$FUNC_; }

    static final MethodHandle RegDeleteKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteKeyA$MH() { return RegDeleteKeyA$MH_; }

    static final FunctionDescriptor RegDeleteKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteKeyW$FUNC() { return RegDeleteKeyW$FUNC_; }

    static final MethodHandle RegDeleteKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteKeyW$MH() { return RegDeleteKeyW$MH_; }

    static final FunctionDescriptor RegDeleteKeyExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteKeyExA$FUNC() { return RegDeleteKeyExA$FUNC_; }

    static final MethodHandle RegDeleteKeyExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteKeyExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        RegDeleteKeyExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteKeyExA$MH() { return RegDeleteKeyExA$MH_; }

    static final FunctionDescriptor RegDeleteKeyExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteKeyExW$FUNC() { return RegDeleteKeyExW$FUNC_; }

    static final MethodHandle RegDeleteKeyExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteKeyExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
        RegDeleteKeyExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteKeyExW$MH() { return RegDeleteKeyExW$MH_; }

    static final FunctionDescriptor RegDeleteKeyTransactedA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteKeyTransactedA$FUNC() { return RegDeleteKeyTransactedA$FUNC_; }

    static final MethodHandle RegDeleteKeyTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteKeyTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteKeyTransactedA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteKeyTransactedA$MH() { return RegDeleteKeyTransactedA$MH_; }

    static final FunctionDescriptor RegDeleteKeyTransactedW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteKeyTransactedW$FUNC() { return RegDeleteKeyTransactedW$FUNC_; }

    static final MethodHandle RegDeleteKeyTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteKeyTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteKeyTransactedW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteKeyTransactedW$MH() { return RegDeleteKeyTransactedW$MH_; }

    static final FunctionDescriptor RegDisableReflectionKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDisableReflectionKey$FUNC() { return RegDisableReflectionKey$FUNC_; }

    static final MethodHandle RegDisableReflectionKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDisableReflectionKey",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDisableReflectionKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDisableReflectionKey$MH() { return RegDisableReflectionKey$MH_; }

    static final FunctionDescriptor RegEnableReflectionKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegEnableReflectionKey$FUNC() { return RegEnableReflectionKey$FUNC_; }

    static final MethodHandle RegEnableReflectionKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegEnableReflectionKey",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RegEnableReflectionKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegEnableReflectionKey$MH() { return RegEnableReflectionKey$MH_; }

    static final FunctionDescriptor RegQueryReflectionKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegQueryReflectionKey$FUNC() { return RegQueryReflectionKey$FUNC_; }

    static final MethodHandle RegQueryReflectionKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegQueryReflectionKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegQueryReflectionKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegQueryReflectionKey$MH() { return RegQueryReflectionKey$MH_; }

    static final FunctionDescriptor RegDeleteValueA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteValueA$FUNC() { return RegDeleteValueA$FUNC_; }

    static final MethodHandle RegDeleteValueA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteValueA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteValueA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteValueA$MH() { return RegDeleteValueA$MH_; }

    static final FunctionDescriptor RegDeleteValueW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteValueW$FUNC() { return RegDeleteValueW$FUNC_; }

    static final MethodHandle RegDeleteValueW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteValueW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteValueW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteValueW$MH() { return RegDeleteValueW$MH_; }

    static final FunctionDescriptor RegEnumKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegEnumKeyA$FUNC() { return RegEnumKeyA$FUNC_; }

    static final MethodHandle RegEnumKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegEnumKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        RegEnumKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegEnumKeyA$MH() { return RegEnumKeyA$MH_; }

    static final FunctionDescriptor RegEnumKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegEnumKeyW$FUNC() { return RegEnumKeyW$FUNC_; }

    static final MethodHandle RegEnumKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegEnumKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        RegEnumKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegEnumKeyW$MH() { return RegEnumKeyW$MH_; }

    static final FunctionDescriptor RegEnumKeyExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegEnumKeyExA$FUNC() { return RegEnumKeyExA$FUNC_; }

    static final MethodHandle RegEnumKeyExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegEnumKeyExA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegEnumKeyExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegEnumKeyExA$MH() { return RegEnumKeyExA$MH_; }

    static final FunctionDescriptor RegEnumKeyExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegEnumKeyExW$FUNC() { return RegEnumKeyExW$FUNC_; }

    static final MethodHandle RegEnumKeyExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegEnumKeyExW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegEnumKeyExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegEnumKeyExW$MH() { return RegEnumKeyExW$MH_; }

    static final FunctionDescriptor RegEnumValueA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegEnumValueA$FUNC() { return RegEnumValueA$FUNC_; }

    static final MethodHandle RegEnumValueA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegEnumValueA",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegEnumValueA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegEnumValueA$MH() { return RegEnumValueA$MH_; }

    static final FunctionDescriptor RegEnumValueW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegEnumValueW$FUNC() { return RegEnumValueW$FUNC_; }

    static final MethodHandle RegEnumValueW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegEnumValueW",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegEnumValueW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegEnumValueW$MH() { return RegEnumValueW$MH_; }

    static final FunctionDescriptor RegFlushKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegFlushKey$FUNC() { return RegFlushKey$FUNC_; }

    static final MethodHandle RegFlushKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegFlushKey",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        RegFlushKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegFlushKey$MH() { return RegFlushKey$MH_; }

    static final FunctionDescriptor RegGetKeySecurity$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegGetKeySecurity$FUNC() { return RegGetKeySecurity$FUNC_; }

    static final MethodHandle RegGetKeySecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegGetKeySecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegGetKeySecurity$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegGetKeySecurity$MH() { return RegGetKeySecurity$MH_; }

    static final FunctionDescriptor RegLoadKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegLoadKeyA$FUNC() { return RegLoadKeyA$FUNC_; }

    static final MethodHandle RegLoadKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegLoadKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegLoadKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegLoadKeyA$MH() { return RegLoadKeyA$MH_; }

    static final FunctionDescriptor RegLoadKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegLoadKeyW$FUNC() { return RegLoadKeyW$FUNC_; }

    static final MethodHandle RegLoadKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegLoadKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegLoadKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegLoadKeyW$MH() { return RegLoadKeyW$MH_; }

    static final FunctionDescriptor RegNotifyChangeKeyValue$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT,
        C_LONG,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegNotifyChangeKeyValue$FUNC() { return RegNotifyChangeKeyValue$FUNC_; }

    static final MethodHandle RegNotifyChangeKeyValue$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegNotifyChangeKeyValue",
        "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        RegNotifyChangeKeyValue$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegNotifyChangeKeyValue$MH() { return RegNotifyChangeKeyValue$MH_; }

    static final FunctionDescriptor RegOpenKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegOpenKeyA$FUNC() { return RegOpenKeyA$FUNC_; }

    static final MethodHandle RegOpenKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegOpenKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegOpenKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegOpenKeyA$MH() { return RegOpenKeyA$MH_; }

    static final FunctionDescriptor RegOpenKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegOpenKeyW$FUNC() { return RegOpenKeyW$FUNC_; }

    static final MethodHandle RegOpenKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegOpenKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegOpenKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegOpenKeyW$MH() { return RegOpenKeyW$MH_; }

    static final FunctionDescriptor RegOpenKeyExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegOpenKeyExA$FUNC() { return RegOpenKeyExA$FUNC_; }

    static final MethodHandle RegOpenKeyExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegOpenKeyExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        RegOpenKeyExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegOpenKeyExA$MH() { return RegOpenKeyExA$MH_; }

    static final FunctionDescriptor RegOpenKeyExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegOpenKeyExW$FUNC() { return RegOpenKeyExW$FUNC_; }

    static final MethodHandle RegOpenKeyExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegOpenKeyExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
        RegOpenKeyExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegOpenKeyExW$MH() { return RegOpenKeyExW$MH_; }

    static final FunctionDescriptor RegOpenKeyTransactedA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegOpenKeyTransactedA$FUNC() { return RegOpenKeyTransactedA$FUNC_; }

    static final MethodHandle RegOpenKeyTransactedA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegOpenKeyTransactedA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegOpenKeyTransactedA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegOpenKeyTransactedA$MH() { return RegOpenKeyTransactedA$MH_; }

    static final FunctionDescriptor RegOpenKeyTransactedW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegOpenKeyTransactedW$FUNC() { return RegOpenKeyTransactedW$FUNC_; }

    static final MethodHandle RegOpenKeyTransactedW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegOpenKeyTransactedW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegOpenKeyTransactedW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegOpenKeyTransactedW$MH() { return RegOpenKeyTransactedW$MH_; }

    static final FunctionDescriptor RegQueryInfoKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegQueryInfoKeyA$FUNC() { return RegQueryInfoKeyA$FUNC_; }

    static final MethodHandle RegQueryInfoKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegQueryInfoKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegQueryInfoKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegQueryInfoKeyA$MH() { return RegQueryInfoKeyA$MH_; }

    static final FunctionDescriptor RegQueryInfoKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegQueryInfoKeyW$FUNC() { return RegQueryInfoKeyW$FUNC_; }

    static final MethodHandle RegQueryInfoKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegQueryInfoKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegQueryInfoKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegQueryInfoKeyW$MH() { return RegQueryInfoKeyW$MH_; }

    static final FunctionDescriptor RegQueryValueA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegQueryValueA$FUNC() { return RegQueryValueA$FUNC_; }

    static final MethodHandle RegQueryValueA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegQueryValueA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegQueryValueA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegQueryValueA$MH() { return RegQueryValueA$MH_; }

    static final FunctionDescriptor RegQueryValueW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegQueryValueW$FUNC() { return RegQueryValueW$FUNC_; }

    static final MethodHandle RegQueryValueW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegQueryValueW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegQueryValueW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegQueryValueW$MH() { return RegQueryValueW$MH_; }

    static final FunctionDescriptor RegQueryMultipleValuesA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegQueryMultipleValuesA$FUNC() { return RegQueryMultipleValuesA$FUNC_; }

    static final MethodHandle RegQueryMultipleValuesA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegQueryMultipleValuesA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegQueryMultipleValuesA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegQueryMultipleValuesA$MH() { return RegQueryMultipleValuesA$MH_; }

    static final FunctionDescriptor RegQueryMultipleValuesW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegQueryMultipleValuesW$FUNC() { return RegQueryMultipleValuesW$FUNC_; }

    static final MethodHandle RegQueryMultipleValuesW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegQueryMultipleValuesW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegQueryMultipleValuesW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegQueryMultipleValuesW$MH() { return RegQueryMultipleValuesW$MH_; }

    static final FunctionDescriptor RegQueryValueExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegQueryValueExA$FUNC() { return RegQueryValueExA$FUNC_; }

    static final MethodHandle RegQueryValueExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegQueryValueExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegQueryValueExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegQueryValueExA$MH() { return RegQueryValueExA$MH_; }

    static final FunctionDescriptor RegQueryValueExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegQueryValueExW$FUNC() { return RegQueryValueExW$FUNC_; }

    static final MethodHandle RegQueryValueExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegQueryValueExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegQueryValueExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegQueryValueExW$MH() { return RegQueryValueExW$MH_; }

    static final FunctionDescriptor RegReplaceKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegReplaceKeyA$FUNC() { return RegReplaceKeyA$FUNC_; }

    static final MethodHandle RegReplaceKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegReplaceKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegReplaceKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegReplaceKeyA$MH() { return RegReplaceKeyA$MH_; }

    static final FunctionDescriptor RegReplaceKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegReplaceKeyW$FUNC() { return RegReplaceKeyW$FUNC_; }

    static final MethodHandle RegReplaceKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegReplaceKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegReplaceKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegReplaceKeyW$MH() { return RegReplaceKeyW$MH_; }

    static final FunctionDescriptor RegRestoreKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegRestoreKeyA$FUNC() { return RegRestoreKeyA$FUNC_; }

    static final MethodHandle RegRestoreKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegRestoreKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegRestoreKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegRestoreKeyA$MH() { return RegRestoreKeyA$MH_; }

    static final FunctionDescriptor RegRestoreKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegRestoreKeyW$FUNC() { return RegRestoreKeyW$FUNC_; }

    static final MethodHandle RegRestoreKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegRestoreKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegRestoreKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegRestoreKeyW$MH() { return RegRestoreKeyW$MH_; }

    static final FunctionDescriptor RegRenameKey$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegRenameKey$FUNC() { return RegRenameKey$FUNC_; }

    static final MethodHandle RegRenameKey$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegRenameKey",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegRenameKey$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegRenameKey$MH() { return RegRenameKey$MH_; }

    static final FunctionDescriptor RegSaveKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSaveKeyA$FUNC() { return RegSaveKeyA$FUNC_; }

    static final MethodHandle RegSaveKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSaveKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegSaveKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSaveKeyA$MH() { return RegSaveKeyA$MH_; }

    static final FunctionDescriptor RegSaveKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSaveKeyW$FUNC() { return RegSaveKeyW$FUNC_; }

    static final MethodHandle RegSaveKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSaveKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegSaveKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSaveKeyW$MH() { return RegSaveKeyW$MH_; }

    static final FunctionDescriptor RegSetKeySecurity$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSetKeySecurity$FUNC() { return RegSetKeySecurity$FUNC_; }

    static final MethodHandle RegSetKeySecurity$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSetKeySecurity",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RegSetKeySecurity$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSetKeySecurity$MH() { return RegSetKeySecurity$MH_; }

    static final FunctionDescriptor RegSetValueA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSetValueA$FUNC() { return RegSetValueA$FUNC_; }

    static final MethodHandle RegSetValueA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSetValueA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        RegSetValueA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSetValueA$MH() { return RegSetValueA$MH_; }

    static final FunctionDescriptor RegSetValueW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSetValueW$FUNC() { return RegSetValueW$FUNC_; }

    static final MethodHandle RegSetValueW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSetValueW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        RegSetValueW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSetValueW$MH() { return RegSetValueW$MH_; }

    static final FunctionDescriptor RegSetValueExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSetValueExA$FUNC() { return RegSetValueExA$FUNC_; }

    static final MethodHandle RegSetValueExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSetValueExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        RegSetValueExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSetValueExA$MH() { return RegSetValueExA$MH_; }

    static final FunctionDescriptor RegSetValueExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSetValueExW$FUNC() { return RegSetValueExW$FUNC_; }

    static final MethodHandle RegSetValueExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSetValueExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        RegSetValueExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSetValueExW$MH() { return RegSetValueExW$MH_; }

    static final FunctionDescriptor RegUnLoadKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegUnLoadKeyA$FUNC() { return RegUnLoadKeyA$FUNC_; }

    static final MethodHandle RegUnLoadKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegUnLoadKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegUnLoadKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegUnLoadKeyA$MH() { return RegUnLoadKeyA$MH_; }

    static final FunctionDescriptor RegUnLoadKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegUnLoadKeyW$FUNC() { return RegUnLoadKeyW$FUNC_; }

    static final MethodHandle RegUnLoadKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegUnLoadKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegUnLoadKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegUnLoadKeyW$MH() { return RegUnLoadKeyW$MH_; }

    static final FunctionDescriptor RegDeleteKeyValueA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteKeyValueA$FUNC() { return RegDeleteKeyValueA$FUNC_; }

    static final MethodHandle RegDeleteKeyValueA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteKeyValueA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteKeyValueA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteKeyValueA$MH() { return RegDeleteKeyValueA$MH_; }

    static final FunctionDescriptor RegDeleteKeyValueW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteKeyValueW$FUNC() { return RegDeleteKeyValueW$FUNC_; }

    static final MethodHandle RegDeleteKeyValueW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteKeyValueW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteKeyValueW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteKeyValueW$MH() { return RegDeleteKeyValueW$MH_; }

    static final FunctionDescriptor RegSetKeyValueA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSetKeyValueA$FUNC() { return RegSetKeyValueA$FUNC_; }

    static final MethodHandle RegSetKeyValueA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSetKeyValueA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        RegSetKeyValueA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSetKeyValueA$MH() { return RegSetKeyValueA$MH_; }

    static final FunctionDescriptor RegSetKeyValueW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSetKeyValueW$FUNC() { return RegSetKeyValueW$FUNC_; }

    static final MethodHandle RegSetKeyValueW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSetKeyValueW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
        RegSetKeyValueW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSetKeyValueW$MH() { return RegSetKeyValueW$MH_; }

    static final FunctionDescriptor RegDeleteTreeA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteTreeA$FUNC() { return RegDeleteTreeA$FUNC_; }

    static final MethodHandle RegDeleteTreeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteTreeA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteTreeA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteTreeA$MH() { return RegDeleteTreeA$MH_; }

    static final FunctionDescriptor RegDeleteTreeW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegDeleteTreeW$FUNC() { return RegDeleteTreeW$FUNC_; }

    static final MethodHandle RegDeleteTreeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegDeleteTreeW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegDeleteTreeW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegDeleteTreeW$MH() { return RegDeleteTreeW$MH_; }

    static final FunctionDescriptor RegCopyTreeA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegCopyTreeA$FUNC() { return RegCopyTreeA$FUNC_; }

    static final MethodHandle RegCopyTreeA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegCopyTreeA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegCopyTreeA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegCopyTreeA$MH() { return RegCopyTreeA$MH_; }

    static final FunctionDescriptor RegGetValueA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegGetValueA$FUNC() { return RegGetValueA$FUNC_; }

    static final MethodHandle RegGetValueA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegGetValueA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegGetValueA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegGetValueA$MH() { return RegGetValueA$MH_; }

    static final FunctionDescriptor RegGetValueW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegGetValueW$FUNC() { return RegGetValueW$FUNC_; }

    static final MethodHandle RegGetValueW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegGetValueW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegGetValueW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegGetValueW$MH() { return RegGetValueW$MH_; }

    static final FunctionDescriptor RegCopyTreeW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegCopyTreeW$FUNC() { return RegCopyTreeW$FUNC_; }

    static final MethodHandle RegCopyTreeW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegCopyTreeW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        RegCopyTreeW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegCopyTreeW$MH() { return RegCopyTreeW$MH_; }

    static final FunctionDescriptor RegLoadMUIStringA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegLoadMUIStringA$FUNC() { return RegLoadMUIStringA$FUNC_; }

    static final MethodHandle RegLoadMUIStringA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegLoadMUIStringA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RegLoadMUIStringA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegLoadMUIStringA$MH() { return RegLoadMUIStringA$MH_; }

    static final FunctionDescriptor RegLoadMUIStringW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegLoadMUIStringW$FUNC() { return RegLoadMUIStringW$FUNC_; }

    static final MethodHandle RegLoadMUIStringW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegLoadMUIStringW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        RegLoadMUIStringW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegLoadMUIStringW$MH() { return RegLoadMUIStringW$MH_; }

    static final FunctionDescriptor RegLoadAppKeyA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegLoadAppKeyA$FUNC() { return RegLoadAppKeyA$FUNC_; }

    static final MethodHandle RegLoadAppKeyA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegLoadAppKeyA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        RegLoadAppKeyA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegLoadAppKeyA$MH() { return RegLoadAppKeyA$MH_; }

    static final FunctionDescriptor RegLoadAppKeyW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegLoadAppKeyW$FUNC() { return RegLoadAppKeyW$FUNC_; }

    static final MethodHandle RegLoadAppKeyW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegLoadAppKeyW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        RegLoadAppKeyW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegLoadAppKeyW$MH() { return RegLoadAppKeyW$MH_; }

    static final FunctionDescriptor InitiateSystemShutdownA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor InitiateSystemShutdownA$FUNC() { return InitiateSystemShutdownA$FUNC_; }

    static final MethodHandle InitiateSystemShutdownA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitiateSystemShutdownA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        InitiateSystemShutdownA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InitiateSystemShutdownA$MH() { return InitiateSystemShutdownA$MH_; }

    static final FunctionDescriptor InitiateSystemShutdownW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor InitiateSystemShutdownW$FUNC() { return InitiateSystemShutdownW$FUNC_; }

    static final MethodHandle InitiateSystemShutdownW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitiateSystemShutdownW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        InitiateSystemShutdownW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InitiateSystemShutdownW$MH() { return InitiateSystemShutdownW$MH_; }

    static final FunctionDescriptor AbortSystemShutdownA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AbortSystemShutdownA$FUNC() { return AbortSystemShutdownA$FUNC_; }

    static final MethodHandle AbortSystemShutdownA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AbortSystemShutdownA",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        AbortSystemShutdownA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AbortSystemShutdownA$MH() { return AbortSystemShutdownA$MH_; }

    static final FunctionDescriptor AbortSystemShutdownW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor AbortSystemShutdownW$FUNC() { return AbortSystemShutdownW$FUNC_; }

    static final MethodHandle AbortSystemShutdownW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "AbortSystemShutdownW",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        AbortSystemShutdownW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle AbortSystemShutdownW$MH() { return AbortSystemShutdownW$MH_; }

    static final FunctionDescriptor InitiateSystemShutdownExA$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT,
        C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor InitiateSystemShutdownExA$FUNC() { return InitiateSystemShutdownExA$FUNC_; }

    static final MethodHandle InitiateSystemShutdownExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitiateSystemShutdownExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        InitiateSystemShutdownExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InitiateSystemShutdownExA$MH() { return InitiateSystemShutdownExA$MH_; }

    static final FunctionDescriptor InitiateSystemShutdownExW$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT,
        C_INT,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor InitiateSystemShutdownExW$FUNC() { return InitiateSystemShutdownExW$FUNC_; }

    static final MethodHandle InitiateSystemShutdownExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitiateSystemShutdownExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIII)I",
        InitiateSystemShutdownExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InitiateSystemShutdownExW$MH() { return InitiateSystemShutdownExW$MH_; }

    static final FunctionDescriptor InitiateShutdownA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor InitiateShutdownA$FUNC() { return InitiateShutdownA$FUNC_; }

    static final MethodHandle InitiateShutdownA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitiateShutdownA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        InitiateShutdownA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InitiateShutdownA$MH() { return InitiateShutdownA$MH_; }

    static final FunctionDescriptor InitiateShutdownW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor InitiateShutdownW$FUNC() { return InitiateShutdownW$FUNC_; }

    static final MethodHandle InitiateShutdownW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "InitiateShutdownW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;III)I",
        InitiateShutdownW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle InitiateShutdownW$MH() { return InitiateShutdownW$MH_; }

    static final FunctionDescriptor CheckForHiberboot$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_CHAR
    );
    static final jdk.incubator.foreign.FunctionDescriptor CheckForHiberboot$FUNC() { return CheckForHiberboot$FUNC_; }

    static final MethodHandle CheckForHiberboot$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "CheckForHiberboot",
        "(Ljdk/incubator/foreign/MemoryAddress;B)I",
        CheckForHiberboot$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle CheckForHiberboot$MH() { return CheckForHiberboot$MH_; }

    static final FunctionDescriptor RegSaveKeyExA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSaveKeyExA$FUNC() { return RegSaveKeyExA$FUNC_; }

    static final MethodHandle RegSaveKeyExA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSaveKeyExA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegSaveKeyExA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSaveKeyExA$MH() { return RegSaveKeyExA$MH_; }

    static final FunctionDescriptor RegSaveKeyExW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor RegSaveKeyExW$FUNC() { return RegSaveKeyExW$FUNC_; }

    static final MethodHandle RegSaveKeyExW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "RegSaveKeyExW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        RegSaveKeyExW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle RegSaveKeyExW$MH() { return RegSaveKeyExW$MH_; }

    static final MemoryLayout _NETRESOURCEA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwScope"),
        C_LONG.withName("dwType"),
        C_LONG.withName("dwDisplayType"),
        C_LONG.withName("dwUsage"),
        C_POINTER.withName("lpLocalName"),
        C_POINTER.withName("lpRemoteName"),
        C_POINTER.withName("lpComment"),
        C_POINTER.withName("lpProvider")
    ).withName("_NETRESOURCEA");
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEA$struct$LAYOUT() { return _NETRESOURCEA$struct$LAYOUT_; }

    static final MemoryLayout _NETRESOURCEA$dwScope$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEA$dwScope$LAYOUT() { return _NETRESOURCEA$dwScope$LAYOUT_; }

    static final VarHandle _NETRESOURCEA$dwScope$VH_ = _NETRESOURCEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwScope"));
    static final java.lang.invoke.VarHandle _NETRESOURCEA$dwScope$VH() { return _NETRESOURCEA$dwScope$VH_; }

    static final MemoryLayout _NETRESOURCEA$dwType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEA$dwType$LAYOUT() { return _NETRESOURCEA$dwType$LAYOUT_; }

    static final VarHandle _NETRESOURCEA$dwType$VH_ = _NETRESOURCEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwType"));
    static final java.lang.invoke.VarHandle _NETRESOURCEA$dwType$VH() { return _NETRESOURCEA$dwType$VH_; }

    static final MemoryLayout _NETRESOURCEA$dwDisplayType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEA$dwDisplayType$LAYOUT() { return _NETRESOURCEA$dwDisplayType$LAYOUT_; }

    static final VarHandle _NETRESOURCEA$dwDisplayType$VH_ = _NETRESOURCEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDisplayType"));
    static final java.lang.invoke.VarHandle _NETRESOURCEA$dwDisplayType$VH() { return _NETRESOURCEA$dwDisplayType$VH_; }

    static final MemoryLayout _NETRESOURCEA$dwUsage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEA$dwUsage$LAYOUT() { return _NETRESOURCEA$dwUsage$LAYOUT_; }

    static final VarHandle _NETRESOURCEA$dwUsage$VH_ = _NETRESOURCEA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwUsage"));
    static final java.lang.invoke.VarHandle _NETRESOURCEA$dwUsage$VH() { return _NETRESOURCEA$dwUsage$VH_; }

    static final MemoryLayout _NETRESOURCEA$lpLocalName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEA$lpLocalName$LAYOUT() { return _NETRESOURCEA$lpLocalName$LAYOUT_; }

    static final VarHandle _NETRESOURCEA$lpLocalName$VH_ = MemoryHandles.asAddressVarHandle(_NETRESOURCEA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpLocalName")));
    static final java.lang.invoke.VarHandle _NETRESOURCEA$lpLocalName$VH() { return _NETRESOURCEA$lpLocalName$VH_; }

    static final MemoryLayout _NETRESOURCEA$lpRemoteName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEA$lpRemoteName$LAYOUT() { return _NETRESOURCEA$lpRemoteName$LAYOUT_; }

    static final VarHandle _NETRESOURCEA$lpRemoteName$VH_ = MemoryHandles.asAddressVarHandle(_NETRESOURCEA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpRemoteName")));
    static final java.lang.invoke.VarHandle _NETRESOURCEA$lpRemoteName$VH() { return _NETRESOURCEA$lpRemoteName$VH_; }

    static final MemoryLayout _NETRESOURCEA$lpComment$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEA$lpComment$LAYOUT() { return _NETRESOURCEA$lpComment$LAYOUT_; }

    static final VarHandle _NETRESOURCEA$lpComment$VH_ = MemoryHandles.asAddressVarHandle(_NETRESOURCEA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpComment")));
    static final java.lang.invoke.VarHandle _NETRESOURCEA$lpComment$VH() { return _NETRESOURCEA$lpComment$VH_; }

    static final MemoryLayout _NETRESOURCEA$lpProvider$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEA$lpProvider$LAYOUT() { return _NETRESOURCEA$lpProvider$LAYOUT_; }

    static final VarHandle _NETRESOURCEA$lpProvider$VH_ = MemoryHandles.asAddressVarHandle(_NETRESOURCEA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpProvider")));
    static final java.lang.invoke.VarHandle _NETRESOURCEA$lpProvider$VH() { return _NETRESOURCEA$lpProvider$VH_; }

    static final MemoryLayout _NETRESOURCEW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("dwScope"),
        C_LONG.withName("dwType"),
        C_LONG.withName("dwDisplayType"),
        C_LONG.withName("dwUsage"),
        C_POINTER.withName("lpLocalName"),
        C_POINTER.withName("lpRemoteName"),
        C_POINTER.withName("lpComment"),
        C_POINTER.withName("lpProvider")
    ).withName("_NETRESOURCEW");
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEW$struct$LAYOUT() { return _NETRESOURCEW$struct$LAYOUT_; }

    static final MemoryLayout _NETRESOURCEW$dwScope$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEW$dwScope$LAYOUT() { return _NETRESOURCEW$dwScope$LAYOUT_; }

    static final VarHandle _NETRESOURCEW$dwScope$VH_ = _NETRESOURCEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwScope"));
    static final java.lang.invoke.VarHandle _NETRESOURCEW$dwScope$VH() { return _NETRESOURCEW$dwScope$VH_; }

    static final MemoryLayout _NETRESOURCEW$dwType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEW$dwType$LAYOUT() { return _NETRESOURCEW$dwType$LAYOUT_; }

    static final VarHandle _NETRESOURCEW$dwType$VH_ = _NETRESOURCEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwType"));
    static final java.lang.invoke.VarHandle _NETRESOURCEW$dwType$VH() { return _NETRESOURCEW$dwType$VH_; }

    static final MemoryLayout _NETRESOURCEW$dwDisplayType$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEW$dwDisplayType$LAYOUT() { return _NETRESOURCEW$dwDisplayType$LAYOUT_; }

    static final VarHandle _NETRESOURCEW$dwDisplayType$VH_ = _NETRESOURCEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDisplayType"));
    static final java.lang.invoke.VarHandle _NETRESOURCEW$dwDisplayType$VH() { return _NETRESOURCEW$dwDisplayType$VH_; }

    static final MemoryLayout _NETRESOURCEW$dwUsage$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEW$dwUsage$LAYOUT() { return _NETRESOURCEW$dwUsage$LAYOUT_; }

    static final VarHandle _NETRESOURCEW$dwUsage$VH_ = _NETRESOURCEW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwUsage"));
    static final java.lang.invoke.VarHandle _NETRESOURCEW$dwUsage$VH() { return _NETRESOURCEW$dwUsage$VH_; }

    static final MemoryLayout _NETRESOURCEW$lpLocalName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEW$lpLocalName$LAYOUT() { return _NETRESOURCEW$lpLocalName$LAYOUT_; }

    static final VarHandle _NETRESOURCEW$lpLocalName$VH_ = MemoryHandles.asAddressVarHandle(_NETRESOURCEW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpLocalName")));
    static final java.lang.invoke.VarHandle _NETRESOURCEW$lpLocalName$VH() { return _NETRESOURCEW$lpLocalName$VH_; }

    static final MemoryLayout _NETRESOURCEW$lpRemoteName$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEW$lpRemoteName$LAYOUT() { return _NETRESOURCEW$lpRemoteName$LAYOUT_; }

    static final VarHandle _NETRESOURCEW$lpRemoteName$VH_ = MemoryHandles.asAddressVarHandle(_NETRESOURCEW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpRemoteName")));
    static final java.lang.invoke.VarHandle _NETRESOURCEW$lpRemoteName$VH() { return _NETRESOURCEW$lpRemoteName$VH_; }

    static final MemoryLayout _NETRESOURCEW$lpComment$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEW$lpComment$LAYOUT() { return _NETRESOURCEW$lpComment$LAYOUT_; }

    static final VarHandle _NETRESOURCEW$lpComment$VH_ = MemoryHandles.asAddressVarHandle(_NETRESOURCEW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpComment")));
    static final java.lang.invoke.VarHandle _NETRESOURCEW$lpComment$VH() { return _NETRESOURCEW$lpComment$VH_; }

    static final MemoryLayout _NETRESOURCEW$lpProvider$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _NETRESOURCEW$lpProvider$LAYOUT() { return _NETRESOURCEW$lpProvider$LAYOUT_; }

    static final VarHandle _NETRESOURCEW$lpProvider$VH_ = MemoryHandles.asAddressVarHandle(_NETRESOURCEW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpProvider")));
    static final java.lang.invoke.VarHandle _NETRESOURCEW$lpProvider$VH() { return _NETRESOURCEW$lpProvider$VH_; }

    static final FunctionDescriptor WNetAddConnectionA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetAddConnectionA$FUNC() { return WNetAddConnectionA$FUNC_; }

    static final MethodHandle WNetAddConnectionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetAddConnectionA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WNetAddConnectionA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetAddConnectionA$MH() { return WNetAddConnectionA$MH_; }

    static final FunctionDescriptor WNetAddConnectionW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetAddConnectionW$FUNC() { return WNetAddConnectionW$FUNC_; }

    static final MethodHandle WNetAddConnectionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetAddConnectionW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WNetAddConnectionW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetAddConnectionW$MH() { return WNetAddConnectionW$MH_; }

    static final FunctionDescriptor WNetAddConnection2A$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetAddConnection2A$FUNC() { return WNetAddConnection2A$FUNC_; }

    static final MethodHandle WNetAddConnection2A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetAddConnection2A",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        WNetAddConnection2A$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetAddConnection2A$MH() { return WNetAddConnection2A$MH_; }

    static final FunctionDescriptor WNetAddConnection2W$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetAddConnection2W$FUNC() { return WNetAddConnection2W$FUNC_; }

    static final MethodHandle WNetAddConnection2W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetAddConnection2W",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        WNetAddConnection2W$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetAddConnection2W$MH() { return WNetAddConnection2W$MH_; }

    static final FunctionDescriptor WNetAddConnection3A$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetAddConnection3A$FUNC() { return WNetAddConnection3A$FUNC_; }

    static final MethodHandle WNetAddConnection3A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetAddConnection3A",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        WNetAddConnection3A$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetAddConnection3A$MH() { return WNetAddConnection3A$MH_; }

    static final FunctionDescriptor WNetAddConnection3W$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetAddConnection3W$FUNC() { return WNetAddConnection3W$FUNC_; }

    static final MethodHandle WNetAddConnection3W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetAddConnection3W",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        WNetAddConnection3W$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetAddConnection3W$MH() { return WNetAddConnection3W$MH_; }

    static final FunctionDescriptor WNetAddConnection4A$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetAddConnection4A$FUNC() { return WNetAddConnection4A$FUNC_; }

    static final MethodHandle WNetAddConnection4A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetAddConnection4A",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        WNetAddConnection4A$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetAddConnection4A$MH() { return WNetAddConnection4A$MH_; }

    static final FunctionDescriptor WNetAddConnection4W$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetAddConnection4W$FUNC() { return WNetAddConnection4W$FUNC_; }

    static final MethodHandle WNetAddConnection4W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetAddConnection4W",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;I)I",
        WNetAddConnection4W$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetAddConnection4W$MH() { return WNetAddConnection4W$MH_; }

    static final FunctionDescriptor WNetCancelConnectionA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetCancelConnectionA$FUNC() { return WNetCancelConnectionA$FUNC_; }

    static final MethodHandle WNetCancelConnectionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetCancelConnectionA",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WNetCancelConnectionA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetCancelConnectionA$MH() { return WNetCancelConnectionA$MH_; }

    static final FunctionDescriptor WNetCancelConnectionW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetCancelConnectionW$FUNC() { return WNetCancelConnectionW$FUNC_; }

    static final MethodHandle WNetCancelConnectionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetCancelConnectionW",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WNetCancelConnectionW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetCancelConnectionW$MH() { return WNetCancelConnectionW$MH_; }

    static final FunctionDescriptor WNetCancelConnection2A$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetCancelConnection2A$FUNC() { return WNetCancelConnection2A$FUNC_; }

    static final MethodHandle WNetCancelConnection2A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetCancelConnection2A",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        WNetCancelConnection2A$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetCancelConnection2A$MH() { return WNetCancelConnection2A$MH_; }

    static final FunctionDescriptor WNetCancelConnection2W$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetCancelConnection2W$FUNC() { return WNetCancelConnection2W$FUNC_; }

    static final MethodHandle WNetCancelConnection2W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetCancelConnection2W",
        "(Ljdk/incubator/foreign/MemoryAddress;II)I",
        WNetCancelConnection2W$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetCancelConnection2W$MH() { return WNetCancelConnection2W$MH_; }

    static final FunctionDescriptor WNetGetConnectionA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetGetConnectionA$FUNC() { return WNetGetConnectionA$FUNC_; }

    static final MethodHandle WNetGetConnectionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetGetConnectionA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WNetGetConnectionA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetGetConnectionA$MH() { return WNetGetConnectionA$MH_; }

    static final FunctionDescriptor WNetGetConnectionW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetGetConnectionW$FUNC() { return WNetGetConnectionW$FUNC_; }

    static final MethodHandle WNetGetConnectionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetGetConnectionW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WNetGetConnectionW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetGetConnectionW$MH() { return WNetGetConnectionW$MH_; }

    static final FunctionDescriptor WNetRestoreSingleConnectionW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetRestoreSingleConnectionW$FUNC() { return WNetRestoreSingleConnectionW$FUNC_; }

    static final MethodHandle WNetRestoreSingleConnectionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetRestoreSingleConnectionW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        WNetRestoreSingleConnectionW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetRestoreSingleConnectionW$MH() { return WNetRestoreSingleConnectionW$MH_; }

    static final FunctionDescriptor WNetUseConnectionA$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetUseConnectionA$FUNC() { return WNetUseConnectionA$FUNC_; }

    static final MethodHandle WNetUseConnectionA$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetUseConnectionA",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WNetUseConnectionA$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetUseConnectionA$MH() { return WNetUseConnectionA$MH_; }

    static final FunctionDescriptor WNetUseConnectionW$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetUseConnectionW$FUNC() { return WNetUseConnectionW$FUNC_; }

    static final MethodHandle WNetUseConnectionW$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetUseConnectionW",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WNetUseConnectionW$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetUseConnectionW$MH() { return WNetUseConnectionW$MH_; }

    static final FunctionDescriptor WNetUseConnection4A$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetUseConnection4A$FUNC() { return WNetUseConnection4A$FUNC_; }

    static final MethodHandle WNetUseConnection4A$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetUseConnection4A",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WNetUseConnection4A$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetUseConnection4A$MH() { return WNetUseConnection4A$MH_; }

    static final FunctionDescriptor WNetUseConnection4W$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetUseConnection4W$FUNC() { return WNetUseConnection4W$FUNC_; }

    static final MethodHandle WNetUseConnection4W$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetUseConnection4W",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        WNetUseConnection4W$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetUseConnection4W$MH() { return WNetUseConnection4W$MH_; }

    static final FunctionDescriptor WNetConnectionDialog$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetConnectionDialog$FUNC() { return WNetConnectionDialog$FUNC_; }

    static final MethodHandle WNetConnectionDialog$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetConnectionDialog",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WNetConnectionDialog$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetConnectionDialog$MH() { return WNetConnectionDialog$MH_; }

    static final FunctionDescriptor WNetDisconnectDialog$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor WNetDisconnectDialog$FUNC() { return WNetDisconnectDialog$FUNC_; }

    static final MethodHandle WNetDisconnectDialog$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "WNetDisconnectDialog",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        WNetDisconnectDialog$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle WNetDisconnectDialog$MH() { return WNetDisconnectDialog$MH_; }

    static final MemoryLayout _CONNECTDLGSTRUCTA$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbStructure"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndOwner"),
        C_POINTER.withName("lpConnRes"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwDevNum")
    ).withName("_CONNECTDLGSTRUCTA");
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTA$struct$LAYOUT() { return _CONNECTDLGSTRUCTA$struct$LAYOUT_; }

    static final MemoryLayout _CONNECTDLGSTRUCTA$cbStructure$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTA$cbStructure$LAYOUT() { return _CONNECTDLGSTRUCTA$cbStructure$LAYOUT_; }

    static final VarHandle _CONNECTDLGSTRUCTA$cbStructure$VH_ = _CONNECTDLGSTRUCTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbStructure"));
    static final java.lang.invoke.VarHandle _CONNECTDLGSTRUCTA$cbStructure$VH() { return _CONNECTDLGSTRUCTA$cbStructure$VH_; }

    static final MemoryLayout _CONNECTDLGSTRUCTA$hwndOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTA$hwndOwner$LAYOUT() { return _CONNECTDLGSTRUCTA$hwndOwner$LAYOUT_; }

    static final VarHandle _CONNECTDLGSTRUCTA$hwndOwner$VH_ = MemoryHandles.asAddressVarHandle(_CONNECTDLGSTRUCTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndOwner")));
    static final java.lang.invoke.VarHandle _CONNECTDLGSTRUCTA$hwndOwner$VH() { return _CONNECTDLGSTRUCTA$hwndOwner$VH_; }

    static final MemoryLayout _CONNECTDLGSTRUCTA$lpConnRes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTA$lpConnRes$LAYOUT() { return _CONNECTDLGSTRUCTA$lpConnRes$LAYOUT_; }

    static final VarHandle _CONNECTDLGSTRUCTA$lpConnRes$VH_ = MemoryHandles.asAddressVarHandle(_CONNECTDLGSTRUCTA$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpConnRes")));
    static final java.lang.invoke.VarHandle _CONNECTDLGSTRUCTA$lpConnRes$VH() { return _CONNECTDLGSTRUCTA$lpConnRes$VH_; }

    static final MemoryLayout _CONNECTDLGSTRUCTA$dwFlags$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTA$dwFlags$LAYOUT() { return _CONNECTDLGSTRUCTA$dwFlags$LAYOUT_; }

    static final VarHandle _CONNECTDLGSTRUCTA$dwFlags$VH_ = _CONNECTDLGSTRUCTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwFlags"));
    static final java.lang.invoke.VarHandle _CONNECTDLGSTRUCTA$dwFlags$VH() { return _CONNECTDLGSTRUCTA$dwFlags$VH_; }

    static final MemoryLayout _CONNECTDLGSTRUCTA$dwDevNum$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTA$dwDevNum$LAYOUT() { return _CONNECTDLGSTRUCTA$dwDevNum$LAYOUT_; }

    static final VarHandle _CONNECTDLGSTRUCTA$dwDevNum$VH_ = _CONNECTDLGSTRUCTA$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("dwDevNum"));
    static final java.lang.invoke.VarHandle _CONNECTDLGSTRUCTA$dwDevNum$VH() { return _CONNECTDLGSTRUCTA$dwDevNum$VH_; }

    static final MemoryLayout _CONNECTDLGSTRUCTW$struct$LAYOUT_ = MemoryLayout.ofStruct(
        C_LONG.withName("cbStructure"),
        MemoryLayout.ofPaddingBits(32),
        C_POINTER.withName("hwndOwner"),
        C_POINTER.withName("lpConnRes"),
        C_LONG.withName("dwFlags"),
        C_LONG.withName("dwDevNum")
    ).withName("_CONNECTDLGSTRUCTW");
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTW$struct$LAYOUT() { return _CONNECTDLGSTRUCTW$struct$LAYOUT_; }

    static final MemoryLayout _CONNECTDLGSTRUCTW$cbStructure$LAYOUT_ = C_LONG;
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTW$cbStructure$LAYOUT() { return _CONNECTDLGSTRUCTW$cbStructure$LAYOUT_; }

    static final VarHandle _CONNECTDLGSTRUCTW$cbStructure$VH_ = _CONNECTDLGSTRUCTW$struct$LAYOUT_.varHandle(int.class, MemoryLayout.PathElement.groupElement("cbStructure"));
    static final java.lang.invoke.VarHandle _CONNECTDLGSTRUCTW$cbStructure$VH() { return _CONNECTDLGSTRUCTW$cbStructure$VH_; }

    static final MemoryLayout _CONNECTDLGSTRUCTW$hwndOwner$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTW$hwndOwner$LAYOUT() { return _CONNECTDLGSTRUCTW$hwndOwner$LAYOUT_; }

    static final VarHandle _CONNECTDLGSTRUCTW$hwndOwner$VH_ = MemoryHandles.asAddressVarHandle(_CONNECTDLGSTRUCTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("hwndOwner")));
    static final java.lang.invoke.VarHandle _CONNECTDLGSTRUCTW$hwndOwner$VH() { return _CONNECTDLGSTRUCTW$hwndOwner$VH_; }

    static final MemoryLayout _CONNECTDLGSTRUCTW$lpConnRes$LAYOUT_ = C_POINTER;
    static final jdk.incubator.foreign.MemoryLayout _CONNECTDLGSTRUCTW$lpConnRes$LAYOUT() { return _CONNECTDLGSTRUCTW$lpConnRes$LAYOUT_; }

    static final VarHandle _CONNECTDLGSTRUCTW$lpConnRes$VH_ = MemoryHandles.asAddressVarHandle(_CONNECTDLGSTRUCTW$struct$LAYOUT_.varHandle(long.class, MemoryLayout.PathElement.groupElement("lpConnRes")));
    static final java.lang.invoke.VarHandle _CONNECTDLGSTRUCTW$lpConnRes$VH() { return _CONNECTDLGSTRUCTW$lpConnRes$VH_; }

}

